{"sha": "f9d20b674796cfaa04902420ef8bd567e472ff77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDIwYjY3NDc5NmNmYWEwNDkwMjQyMGVmOGJkNTY3ZTQ3MmZmNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-05T21:02:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-05T21:02:42Z"}, "message": "Merge #9505\n\n9505: internal: ensure consistent passing for config params r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2087a289c2c7b4e5beb98160ed6508d35a485432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2087a289c2c7b4e5beb98160ed6508d35a485432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d20b674796cfaa04902420ef8bd567e472ff77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg43NyCRBK7hj4Ov3rIwAAhPEIAIBxDOkgDBUWBRf0GTnQaud7\nILvm2YE3x7S155O23fqKasa+9j4fO+n+lP+CRYTxCOr/wwmlSPZ7dLwy5m1QGBwB\n6JMwyUsa9EbugBMGFOhhYMZzJvmhyeSbebblFzUk6nswy/rc6Kh1DXwzgi5oEI3T\nDrDf3JrbjtXSOOvG4X42zgrf9U2fVm6yx+zUq2jWwYuYZdFdOarKcIkplw6BL3Bj\n88QWixUu8Kj5xsqkd2xmUUEUuWrGPYW57mUK5uvTs9G5HQxXvkmlq4oEpFrut6KS\nIq+lcqw/JJkNEeaq+v5D0uaXxcf1FZ2DIs1YjPZrnxiBy5sHQ4uuen/3gC5yZyg=\n=wsI6\n-----END PGP SIGNATURE-----\n", "payload": "tree 2087a289c2c7b4e5beb98160ed6508d35a485432\nparent 795b8153c05109bca309957b5a9f1e10ec7cbbe7\nparent 0db4f3f6a4bce25f62d25f382ee47db47f5a33f9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625518962 +0000\ncommitter GitHub <noreply@github.com> 1625518962 +0000\n\nMerge #9505\n\n9505: internal: ensure consistent passing for config params r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d20b674796cfaa04902420ef8bd567e472ff77", "html_url": "https://github.com/rust-lang/rust/commit/f9d20b674796cfaa04902420ef8bd567e472ff77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d20b674796cfaa04902420ef8bd567e472ff77/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795b8153c05109bca309957b5a9f1e10ec7cbbe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/795b8153c05109bca309957b5a9f1e10ec7cbbe7", "html_url": "https://github.com/rust-lang/rust/commit/795b8153c05109bca309957b5a9f1e10ec7cbbe7"}, {"sha": "0db4f3f6a4bce25f62d25f382ee47db47f5a33f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db4f3f6a4bce25f62d25f382ee47db47f5a33f9", "html_url": "https://github.com/rust-lang/rust/commit/0db4f3f6a4bce25f62d25f382ee47db47f5a33f9"}], "stats": {"total": 151, "additions": 91, "deletions": 60}, "files": [{"sha": "058de80506154230b4f99e4ebe3d5419815cc7c5", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=f9d20b674796cfaa04902420ef8bd567e472ff77", "patch": "@@ -46,8 +46,8 @@ pub struct AnnotationConfig {\n \n pub(crate) fn annotations(\n     db: &RootDatabase,\n+    config: &AnnotationConfig,\n     file_id: FileId,\n-    config: AnnotationConfig,\n ) -> Vec<Annotation> {\n     let mut annotations = Vec::default();\n \n@@ -190,8 +190,7 @@ mod tests {\n \n         let annotations: Vec<Annotation> = analysis\n             .annotations(\n-                file_id,\n-                AnnotationConfig {\n+                &AnnotationConfig {\n                     binary_target: true,\n                     annotate_runnables: true,\n                     annotate_impls: true,\n@@ -200,6 +199,7 @@ mod tests {\n                     run: true,\n                     debug: true,\n                 },\n+                file_id,\n             )\n             .unwrap()\n             .into_iter()"}, {"sha": "c0189ae3ddeb940b6375022a4b3f7bad0d60891f", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=f9d20b674796cfaa04902420ef8bd567e472ff77", "patch": "@@ -532,27 +532,27 @@ mod tests {\n \n     fn check_hover_no_result(ra_fixture: &str) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        assert!(analysis\n+        let hover = analysis\n             .hover(\n-                position,\n                 &HoverConfig {\n                     links_in_hover: true,\n-                    documentation: Some(HoverDocFormat::Markdown)\n-                }\n+                    documentation: Some(HoverDocFormat::Markdown),\n+                },\n+                position,\n             )\n-            .unwrap()\n-            .is_none());\n+            .unwrap();\n+        assert!(hover.is_none());\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis\n             .hover(\n-                position,\n                 &HoverConfig {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n+                position,\n             )\n             .unwrap()\n             .unwrap();\n@@ -568,11 +568,11 @@ mod tests {\n         let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis\n             .hover(\n-                position,\n                 &HoverConfig {\n                     links_in_hover: false,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n+                position,\n             )\n             .unwrap()\n             .unwrap();\n@@ -588,11 +588,11 @@ mod tests {\n         let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis\n             .hover(\n-                position,\n                 &HoverConfig {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::PlainText),\n                 },\n+                position,\n             )\n             .unwrap()\n             .unwrap();\n@@ -608,11 +608,11 @@ mod tests {\n         let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis\n             .hover(\n-                position,\n                 &HoverConfig {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n+                position,\n             )\n             .unwrap()\n             .unwrap();"}, {"sha": "fb320d0d1894e19fde669e5351b190b33561a037", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=f9d20b674796cfaa04902420ef8bd567e472ff77", "patch": "@@ -488,15 +488,15 @@ mod tests {\n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n-        let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n+        let inlay_hints = analysis.inlay_hints(&config, file_id).unwrap();\n         let actual =\n             inlay_hints.into_iter().map(|it| (it.range, it.label.to_string())).collect::<Vec<_>>();\n         assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n     }\n \n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n-        let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n+        let inlay_hints = analysis.inlay_hints(&config, file_id).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n     }\n "}, {"sha": "f8c811c8ed61d5011e8d06d8f74499553920020b", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f9d20b674796cfaa04902420ef8bd567e472ff77", "patch": "@@ -347,8 +347,8 @@ impl Analysis {\n     /// Returns a list of the places in the file where type hints can be displayed.\n     pub fn inlay_hints(\n         &self,\n-        file_id: FileId,\n         config: &InlayHintsConfig,\n+        file_id: FileId,\n     ) -> Cancellable<Vec<InlayHint>> {\n         self.with_db(|db| inlay_hints::inlay_hints(db, file_id, config))\n     }\n@@ -417,8 +417,8 @@ impl Analysis {\n     /// Returns a short text describing element at position.\n     pub fn hover(\n         &self,\n-        position: FilePosition,\n         config: &HoverConfig,\n+        position: FilePosition,\n     ) -> Cancellable<Option<RangeInfo<HoverResult>>> {\n         self.with_db(|db| hover::hover(db, position, config))\n     }\n@@ -649,10 +649,10 @@ impl Analysis {\n \n     pub fn annotations(\n         &self,\n+        config: &AnnotationConfig,\n         file_id: FileId,\n-        config: AnnotationConfig,\n     ) -> Cancellable<Vec<Annotation>> {\n-        self.with_db(|db| annotations::annotations(db, file_id, config))\n+        self.with_db(|db| annotations::annotations(db, config, file_id))\n     }\n \n     pub fn resolve_annotation(&self, annotation: Annotation) -> Cancellable<Annotation> {"}, {"sha": "84de2187fa78dbebe5745a30254754781a29ba7c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d20b674796cfaa04902420ef8bd567e472ff77/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f9d20b674796cfaa04902420ef8bd567e472ff77", "patch": "@@ -871,7 +871,7 @@ pub(crate) fn handle_hover(\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile::span(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let info = match snap.analysis.hover(position, &snap.config.hover())? {\n+    let info = match snap.analysis.hover(&snap.config.hover(), position)? {\n         None => return Ok(None),\n         Some(info) => info,\n     };\n@@ -1136,8 +1136,7 @@ pub(crate) fn handle_code_lens(\n     let lenses = snap\n         .analysis\n         .annotations(\n-            file_id,\n-            AnnotationConfig {\n+            &AnnotationConfig {\n                 binary_target: cargo_target_spec\n                     .map(|spec| {\n                         matches!(\n@@ -1153,6 +1152,7 @@ pub(crate) fn handle_code_lens(\n                 run: lens_config.run,\n                 debug: lens_config.debug,\n             },\n+            file_id,\n         )?\n         .into_iter()\n         .map(|annotation| to_proto::code_lens(&snap, annotation).unwrap())\n@@ -1253,7 +1253,7 @@ pub(crate) fn handle_inlay_hints(\n     let line_index = snap.file_line_index(file_id)?;\n     Ok(snap\n         .analysis\n-        .inlay_hints(file_id, &snap.config.inlay_hints())?\n+        .inlay_hints(&snap.config.inlay_hints(), file_id)?\n         .into_iter()\n         .map(|it| to_proto::inlay_hint(&line_index, it))\n         .collect())"}, {"sha": "f83b99ca6b5c6fc477ada92e57d084652bfa216f", "filename": "docs/dev/style.md", "status": "modified", "additions": 68, "deletions": 37, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f9d20b674796cfaa04902420ef8bd567e472ff77/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9d20b674796cfaa04902420ef8bd567e472ff77/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=f9d20b674796cfaa04902420ef8bd567e472ff77", "patch": "@@ -489,42 +489,6 @@ fn foo(bar: Option<Bar>) { ... }\n Splitting the two different control flows into two functions simplifies each path, and remove cross-dependencies between the two paths.\n If there's common code between `foo` and `foo_with_bar`, extract *that* into a common helper.\n \n-## Avoid Monomorphization\n-\n-Avoid making a lot of code type parametric, *especially* on the boundaries between crates.\n-\n-```rust\n-// GOOD\n-fn frobnicate(f: impl FnMut()) {\n-    frobnicate_impl(&mut f)\n-}\n-fn frobnicate_impl(f: &mut dyn FnMut()) {\n-    // lots of code\n-}\n-\n-// BAD\n-fn frobnicate(f: impl FnMut()) {\n-    // lots of code\n-}\n-```\n-\n-Avoid `AsRef` polymorphism, it pays back only for widely used libraries:\n-\n-```rust\n-// GOOD\n-fn frobnicate(f: &Path) {\n-}\n-\n-// BAD\n-fn frobnicate(f: impl AsRef<Path>) {\n-}\n-```\n-\n-**Rationale:** Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n-This allows for exceptionally good performance, but leads to increased compile times.\n-Runtime performance obeys 80%/20% rule -- only a small fraction of code is hot.\n-Compile time **does not** obey this rule -- all code has to be compiled.\n-\n ## Appropriate String Types\n \n When interfacing with OS APIs, use `OsString`, even if the original source of data is utf-8 encoded.\n@@ -617,6 +581,42 @@ pub fn reachable_nodes(node: Node) -> FxHashSet<Node> {\n \n **Rationale:** re-use allocations, accumulator style is more concise for complex cases.\n \n+## Avoid Monomorphization\n+\n+Avoid making a lot of code type parametric, *especially* on the boundaries between crates.\n+\n+```rust\n+// GOOD\n+fn frobnicate(f: impl FnMut()) {\n+    frobnicate_impl(&mut f)\n+}\n+fn frobnicate_impl(f: &mut dyn FnMut()) {\n+    // lots of code\n+}\n+\n+// BAD\n+fn frobnicate(f: impl FnMut()) {\n+    // lots of code\n+}\n+```\n+\n+Avoid `AsRef` polymorphism, it pays back only for widely used libraries:\n+\n+```rust\n+// GOOD\n+fn frobnicate(f: &Path) {\n+}\n+\n+// BAD\n+fn frobnicate(f: impl AsRef<Path>) {\n+}\n+```\n+\n+**Rationale:** Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n+This allows for exceptionally good performance, but leads to increased compile times.\n+Runtime performance obeys 80%/20% rule -- only a small fraction of code is hot.\n+Compile time **does not** obey this rule -- all code has to be compiled.\n+\n # Style\n \n ## Order of Imports\n@@ -780,6 +780,38 @@ impl Parent {\n **Rationale:** easier to get the sense of the API by visually scanning the file.\n If function bodies are folded in the editor, the source code should read as documentation for the public API.\n \n+## Context Parameters\n+\n+Some parameters are threaded unchanged through many function calls.\n+They determine the \"context\" of the operation.\n+Pass such parameters first, not last.\n+If there are several context parameters, consider packing them into a `struct Ctx` and passing it as `&self`.\n+\n+```rust\n+// GOOD\n+fn dfs(graph: &Graph, v: Vertex) -> usize {\n+    let mut visited = FxHashSet::default();\n+    return go(graph, &mut visited, v);\n+\n+    fn go(graph: &Graph, visited: &mut FxHashSet<Vertex>, v: usize) -> usize {\n+        ...\n+    }\n+}\n+\n+// BAD\n+fn dfs(v: Vertex, graph: &Graph) -> usize {\n+    fn go(v: usize, graph: &Graph, visited: &mut FxHashSet<Vertex>) -> usize {\n+        ...\n+    }\n+\n+    let mut visited = FxHashSet::default();\n+    go(v, graph, &mut visited)\n+}\n+```\n+\n+**Rationale:** consistency.\n+Context-first works better when non-context parameter is a lambda.\n+\n ## Variable Naming\n \n Use boring and long names for local variables ([yay code completion](https://github.com/rust-analyzer/rust-analyzer/pull/4162#discussion_r417130973)).\n@@ -934,7 +966,6 @@ fn dfs(graph: &Graph, v: Vertex) -> usize {\n     let mut visited = FxHashSet::default();\n     go(graph, &mut visited, v)\n }\n-\n ```\n \n **Rationale:** consistency, improved top-down readability."}]}