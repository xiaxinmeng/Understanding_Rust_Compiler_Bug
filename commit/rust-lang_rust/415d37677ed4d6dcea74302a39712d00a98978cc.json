{"sha": "415d37677ed4d6dcea74302a39712d00a98978cc", "node_id": "C_kwDOAAsO6NoAKDQxNWQzNzY3N2VkNGQ2ZGNlYTc0MzAyYTM5NzEyZDAwYTk4OTc4Y2M", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-03-11T19:38:31Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-03-11T19:38:31Z"}, "message": "Remove unneeded conversions in bootstrapping code\n\nFixes warnings from `clippy::useless_conversion` in `src/bootstrap`.", "tree": {"sha": "574fd15a25091b5a58a4183e50312465a97d6254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574fd15a25091b5a58a4183e50312465a97d6254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415d37677ed4d6dcea74302a39712d00a98978cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415d37677ed4d6dcea74302a39712d00a98978cc", "html_url": "https://github.com/rust-lang/rust/commit/415d37677ed4d6dcea74302a39712d00a98978cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415d37677ed4d6dcea74302a39712d00a98978cc/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8604faddc44b27a59d1a719ff6ceca8bc145eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8604faddc44b27a59d1a719ff6ceca8bc145eb", "html_url": "https://github.com/rust-lang/rust/commit/af8604faddc44b27a59d1a719ff6ceca8bc145eb"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "68ae7f2be96adb7ac684f66347f43f4346b64970", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/415d37677ed4d6dcea74302a39712d00a98978cc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415d37677ed4d6dcea74302a39712d00a98978cc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=415d37677ed4d6dcea74302a39712d00a98978cc", "patch": "@@ -169,7 +169,7 @@ impl PathSet {\n \n     fn one<P: Into<PathBuf>>(path: P, kind: Kind) -> PathSet {\n         let mut set = BTreeSet::new();\n-        set.insert(TaskPath { path: path.into(), kind: Some(kind.into()) });\n+        set.insert(TaskPath { path: path.into(), kind: Some(kind) });\n         PathSet::Set(set)\n     }\n \n@@ -372,10 +372,7 @@ impl<'a> ShouldRun<'a> {\n     // multiple aliases for the same job\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n         self.paths.insert(PathSet::Set(\n-            paths\n-                .iter()\n-                .map(|p| TaskPath { path: p.into(), kind: Some(self.kind.into()) })\n-                .collect(),\n+            paths.iter().map(|p| TaskPath { path: p.into(), kind: Some(self.kind) }).collect(),\n         ));\n         self\n     }\n@@ -388,8 +385,7 @@ impl<'a> ShouldRun<'a> {\n     }\n \n     pub fn suite_path(mut self, suite: &str) -> Self {\n-        self.paths\n-            .insert(PathSet::Suite(TaskPath { path: suite.into(), kind: Some(self.kind.into()) }));\n+        self.paths.insert(PathSet::Suite(TaskPath { path: suite.into(), kind: Some(self.kind) }));\n         self\n     }\n \n@@ -1769,7 +1765,7 @@ impl<'a> Builder<'a> {\n             if should_run.paths.iter().any(|s| s.has(path, Some(desc.kind)))\n                 && !desc.is_excluded(\n                     self,\n-                    &PathSet::Suite(TaskPath { path: path.clone(), kind: Some(desc.kind.into()) }),\n+                    &PathSet::Suite(TaskPath { path: path.clone(), kind: Some(desc.kind) }),\n                 )\n             {\n                 return true;"}, {"sha": "a9ca89bdea1ce8bcf6677e623cf744e05e7f763b", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415d37677ed4d6dcea74302a39712d00a98978cc/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415d37677ed4d6dcea74302a39712d00a98978cc/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=415d37677ed4d6dcea74302a39712d00a98978cc", "patch": "@@ -391,7 +391,7 @@ impl ErrorIndex {\n         add_dylib_path(\n             vec![\n                 PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host)),\n-                PathBuf::from(builder.rustc_libdir(compiler)),\n+                builder.rustc_libdir(compiler),\n             ],\n             &mut cmd,\n         );"}]}