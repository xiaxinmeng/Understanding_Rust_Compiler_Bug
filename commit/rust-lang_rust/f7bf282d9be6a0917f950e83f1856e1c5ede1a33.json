{"sha": "f7bf282d9be6a0917f950e83f1856e1c5ede1a33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YmYyODJkOWJlNmEwOTE3Zjk1MGU4M2YxODU2ZTFjNWVkZTFhMzM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-15T20:58:34Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-15T20:58:34Z"}, "message": "MIR visitor: Don't treat debuginfo field access as a use of the struct", "tree": {"sha": "80590c2b05b74f37e31e401a1755689dfb80714b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80590c2b05b74f37e31e401a1755689dfb80714b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7bf282d9be6a0917f950e83f1856e1c5ede1a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bf282d9be6a0917f950e83f1856e1c5ede1a33", "html_url": "https://github.com/rust-lang/rust/commit/f7bf282d9be6a0917f950e83f1856e1c5ede1a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7bf282d9be6a0917f950e83f1856e1c5ede1a33/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0", "html_url": "https://github.com/rust-lang/rust/commit/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "e9a27c82af2b2f03c7ccff7b77e8a15de00e2872", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f7bf282d9be6a0917f950e83f1856e1c5ede1a33/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7bf282d9be6a0917f950e83f1856e1c5ede1a33/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=f7bf282d9be6a0917f950e83f1856e1c5ede1a33", "patch": "@@ -1017,11 +1017,13 @@ macro_rules! visit_place_fns {\n             let mut context = context;\n \n             if !place.projection.is_empty() {\n-                context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n+                if context.is_use() {\n+                    context = if context.is_mutating_use() {\n+                        PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+                    } else {\n+                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n+                    };\n+                }\n             }\n \n             self.visit_local(&place.local, context, location);"}]}