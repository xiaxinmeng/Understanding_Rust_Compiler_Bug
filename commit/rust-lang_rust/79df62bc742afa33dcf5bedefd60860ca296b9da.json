{"sha": "79df62bc742afa33dcf5bedefd60860ca296b9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZGY2MmJjNzQyYWZhMzNkY2Y1YmVkZWZkNjA4NjBjYTI5NmI5ZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-23T17:41:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-25T07:52:50Z"}, "message": "cleanup", "tree": {"sha": "c917097b30909a273ed28bd92d46d402ec59e367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c917097b30909a273ed28bd92d46d402ec59e367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79df62bc742afa33dcf5bedefd60860ca296b9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79df62bc742afa33dcf5bedefd60860ca296b9da", "html_url": "https://github.com/rust-lang/rust/commit/79df62bc742afa33dcf5bedefd60860ca296b9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79df62bc742afa33dcf5bedefd60860ca296b9da/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fb88e95aa5e122a521beec766d5b1264ca4de3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb88e95aa5e122a521beec766d5b1264ca4de3b", "html_url": "https://github.com/rust-lang/rust/commit/3fb88e95aa5e122a521beec766d5b1264ca4de3b"}], "stats": {"total": 121, "additions": 70, "deletions": 51}, "files": [{"sha": "bc0f74c8960df2aab6d0b93fa417d8a5894bde81", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=79df62bc742afa33dcf5bedefd60860ca296b9da", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n     impl_block::ImplBlock,\n     resolve::Resolver,\n-    diagnostics::Diagnostics,\n+    diagnostics::DiagnosticSink,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -166,7 +166,7 @@ impl Module {\n         db.crate_def_map(self.krate)[self.module_id].scope.clone()\n     }\n \n-    pub fn diagnostics(&self, db: &impl HirDatabase, sink: &mut Diagnostics) {\n+    pub fn diagnostics(&self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n         db.crate_def_map(self.krate).add_diagnostics(db, self.module_id, sink);\n     }\n \n@@ -515,7 +515,7 @@ impl Function {\n         r\n     }\n \n-    pub fn diagnostics(&self, db: &impl HirDatabase, sink: &mut Diagnostics) {\n+    pub fn diagnostics(&self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n         self.infer(db).add_diagnostics(db, *self, sink);\n     }\n }"}, {"sha": "d6b28159e983a837aaefb280cbb9ffd66d3be5db", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=79df62bc742afa33dcf5bedefd60860ca296b9da", "patch": "@@ -8,19 +8,19 @@ use relative_path::RelativePathBuf;\n /// Diagnostic defines hir API for errors and warnings.\n ///\n /// It is used as a `dyn` object, which you can downcast to a concrete\n-/// diagnostic. Diagnostics are structured, meaning that they include rich\n-/// information which can be used by IDE to create fixes. Diagnostics are\n+/// diagnostic. DiagnosticSink are structured, meaning that they include rich\n+/// information which can be used by IDE to create fixes. DiagnosticSink are\n /// expressed in terms of macro-expanded syntax tree nodes (so, it's a bad idea\n /// to diagnostic in a salsa value).\n ///\n /// Internally, various subsystems of hir produce diagnostics specific to a\n-/// subsytem (typically, an `enum`), which are safe to store in salsa but do not\n+/// subsystem (typically, an `enum`), which are safe to store in salsa but do not\n /// include source locations. Such internal diagnostic are transformed into an\n /// instance of `Diagnostic` on demand.\n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n+    fn message(&self) -> String;\n     fn file(&self) -> HirFileId;\n     fn syntax_node(&self) -> SyntaxNodePtr;\n-    fn message(&self) -> String;\n     fn as_any(&self) -> &(Any + Send + 'static);\n }\n \n@@ -31,17 +31,17 @@ impl dyn Diagnostic {\n }\n \n #[derive(Debug, Default)]\n-pub struct Diagnostics {\n+pub struct DiagnosticSink {\n     data: Vec<Box<dyn Diagnostic>>,\n }\n \n-impl Diagnostics {\n+impl DiagnosticSink {\n     pub fn push(&mut self, d: impl Diagnostic) {\n         self.data.push(Box::new(d))\n     }\n \n-    pub fn iter<'a>(&'a self) -> impl Iterator<Item = &'a dyn Diagnostic> + 'a {\n-        self.data.iter().map(|it| it.as_ref())\n+    pub fn into_diagnostics(self) -> Vec<Box<dyn Diagnostic>> {\n+        self.data\n     }\n }\n \n@@ -52,15 +52,15 @@ pub struct NoSuchField {\n }\n \n impl Diagnostic for NoSuchField {\n+    fn message(&self) -> String {\n+        \"no such field\".to_string()\n+    }\n     fn file(&self) -> HirFileId {\n         self.file\n     }\n     fn syntax_node(&self) -> SyntaxNodePtr {\n         self.field.into()\n     }\n-    fn message(&self) -> String {\n-        \"no such field\".to_string()\n-    }\n     fn as_any(&self) -> &(Any + Send + 'static) {\n         self\n     }\n@@ -74,15 +74,15 @@ pub struct UnresolvedModule {\n }\n \n impl Diagnostic for UnresolvedModule {\n+    fn message(&self) -> String {\n+        \"unresolved module\".to_string()\n+    }\n     fn file(&self) -> HirFileId {\n         self.file\n     }\n     fn syntax_node(&self) -> SyntaxNodePtr {\n         self.decl.into()\n     }\n-    fn message(&self) -> String {\n-        \"unresolved module\".to_string()\n-    }\n     fn as_any(&self) -> &(Any + Send + 'static) {\n         self\n     }"}, {"sha": "56ed872d591a85fd0db223789b61c6fb82c43273", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=79df62bc742afa33dcf5bedefd60860ca296b9da", "patch": "@@ -56,17 +56,16 @@ mod tests;\n use std::sync::Arc;\n \n use rustc_hash::FxHashMap;\n-use relative_path::RelativePathBuf;\n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_db::{FileId, Edition};\n-use ra_syntax::{AstNode, AstPtr, ast};\n use test_utils::tested_by;\n \n use crate::{\n     ModuleDef, Name, Crate, Module,\n     DefDatabase, Path, PathKind, HirFileId,\n     ids::{SourceItemId, SourceFileItemId, MacroCallId},\n-    diagnostics::{Diagnostics, UnresolvedModule},\n+    diagnostics::DiagnosticSink,\n+    nameres::diagnostics::DefDiagnostic,\n };\n \n pub(crate) use self::raw::{RawItems, ImportId, ImportSourceMap};\n@@ -228,7 +227,7 @@ impl CrateDefMap {\n         &self,\n         db: &impl DefDatabase,\n         module: CrateModuleId,\n-        sink: &mut Diagnostics,\n+        sink: &mut DiagnosticSink,\n     ) {\n         self.diagnostics.iter().for_each(|it| it.add_to(db, module, sink))\n     }\n@@ -446,30 +445,47 @@ impl CrateDefMap {\n     }\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n-enum DefDiagnostic {\n-    UnresolvedModule {\n-        module: CrateModuleId,\n-        declaration: SourceItemId,\n-        candidate: RelativePathBuf,\n-    },\n-}\n+mod diagnostics {\n+    use relative_path::RelativePathBuf;\n+    use ra_syntax::{AstPtr, AstNode, ast};\n+\n+    use crate::{\n+        SourceItemId, DefDatabase,\n+        nameres::CrateModuleId,\n+        diagnostics::{DiagnosticSink, UnresolvedModule},\n+};\n \n-impl DefDiagnostic {\n-    fn add_to(&self, db: &impl DefDatabase, target_module: CrateModuleId, sink: &mut Diagnostics) {\n-        match self {\n-            DefDiagnostic::UnresolvedModule { module, declaration, candidate } => {\n-                if *module != target_module {\n-                    return;\n+    #[derive(Debug, PartialEq, Eq)]\n+    pub(super) enum DefDiagnostic {\n+        UnresolvedModule {\n+            module: CrateModuleId,\n+            declaration: SourceItemId,\n+            candidate: RelativePathBuf,\n+        },\n+    }\n+\n+    impl DefDiagnostic {\n+        pub(super) fn add_to(\n+            &self,\n+            db: &impl DefDatabase,\n+            target_module: CrateModuleId,\n+            sink: &mut DiagnosticSink,\n+        ) {\n+            match self {\n+                DefDiagnostic::UnresolvedModule { module, declaration, candidate } => {\n+                    if *module != target_module {\n+                        return;\n+                    }\n+                    let syntax = db.file_item(*declaration);\n+                    let decl = ast::Module::cast(&syntax).unwrap();\n+                    sink.push(UnresolvedModule {\n+                        file: declaration.file_id,\n+                        decl: AstPtr::new(&decl),\n+                        candidate: candidate.clone(),\n+                    })\n                 }\n-                let syntax = db.file_item(*declaration);\n-                let decl = ast::Module::cast(&syntax).unwrap();\n-                sink.push(UnresolvedModule {\n-                    file: declaration.file_id,\n-                    decl: AstPtr::new(&decl),\n-                    candidate: candidate.clone(),\n-                })\n             }\n         }\n     }\n+\n }"}, {"sha": "8830b4624acb8476dbec4ebc6c24b05b3ddb2563", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=79df62bc742afa33dcf5bedefd60860ca296b9da", "patch": "@@ -8,12 +8,15 @@ use crate::{\n     Function, Module, Struct, Enum, Const, Static, Trait, TypeAlias,\n     DefDatabase, HirFileId, Name, Path, Crate,\n     KnownName,\n-    nameres::{Resolution, PerNs, ModuleDef, ReachedFixedPoint, ResolveMode, raw, DefDiagnostic},\n+    nameres::{\n+        Resolution, PerNs, ModuleDef, ReachedFixedPoint, ResolveMode,\n+        CrateDefMap, CrateModuleId, ModuleData, CrateMacroId,\n+        diagnostics::DefDiagnostic,\n+        raw,\n+    },\n     ids::{AstItemDef, LocationCtx, MacroCallLoc, SourceItemId, MacroCallId},\n };\n \n-use super::{CrateDefMap, CrateModuleId, ModuleData, CrateMacroId};\n-\n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n     // populate external prelude\n     for dep in def_map.krate.dependencies(db) {"}, {"sha": "5fd602a9e63d24d6d005af0418c7a2cb87409204", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=79df62bc742afa33dcf5bedefd60860ca296b9da", "patch": "@@ -38,7 +38,7 @@ use crate::{\n     resolve::{Resolver, Resolution},\n     nameres::Namespace,\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    diagnostics::Diagnostics,\n+    diagnostics::DiagnosticSink,\n };\n use super::{Ty, TypableDef, Substs, primitive, op, FnSig, ApplicationTy, TypeCtor};\n \n@@ -120,7 +120,7 @@ impl InferenceResult {\n         &self,\n         db: &impl HirDatabase,\n         owner: Function,\n-        sink: &mut Diagnostics,\n+        sink: &mut DiagnosticSink,\n     ) {\n         self.diagnostics.iter().for_each(|it| it.add_to(db, owner, sink))\n     }\n@@ -1269,7 +1269,7 @@ impl Expectation {\n }\n \n mod diagnostics {\n-    use crate::{expr::ExprId, diagnostics::{Diagnostics, NoSuchField}, HirDatabase, Function};\n+    use crate::{expr::ExprId, diagnostics::{DiagnosticSink, NoSuchField}, HirDatabase, Function};\n \n     #[derive(Debug, PartialEq, Eq, Clone)]\n     pub(super) enum InferenceDiagnostic {\n@@ -1281,7 +1281,7 @@ mod diagnostics {\n             &self,\n             db: &impl HirDatabase,\n             owner: Function,\n-            sink: &mut Diagnostics,\n+            sink: &mut DiagnosticSink,\n         ) {\n             match self {\n                 InferenceDiagnostic::NoSuchField { expr, field } => {"}, {"sha": "1395cede216ddbdc729c3ebb88cc9ff58ce0e472", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79df62bc742afa33dcf5bedefd60860ca296b9da/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=79df62bc742afa33dcf5bedefd60860ca296b9da", "patch": "@@ -129,7 +129,7 @@ fn check_struct_shorthand_initialization(\n }\n \n fn check_module(acc: &mut Vec<Diagnostic>, db: &RootDatabase, module: hir::Module) {\n-    let mut diagnostics = hir::diagnostics::Diagnostics::default();\n+    let mut diagnostics = hir::diagnostics::DiagnosticSink::default();\n     module.diagnostics(db, &mut diagnostics);\n     for decl in module.declarations(db) {\n         match decl {\n@@ -138,7 +138,7 @@ fn check_module(acc: &mut Vec<Diagnostic>, db: &RootDatabase, module: hir::Modul\n         }\n     }\n \n-    for d in diagnostics.iter() {\n+    for d in diagnostics.into_diagnostics().iter() {\n         if let Some(d) = d.downcast_ref::<hir::diagnostics::UnresolvedModule>() {\n             let source_root = db.file_source_root(d.file().original_file(db));\n             let create_file = FileSystemEdit::CreateFile { source_root, path: d.candidate.clone() };"}]}