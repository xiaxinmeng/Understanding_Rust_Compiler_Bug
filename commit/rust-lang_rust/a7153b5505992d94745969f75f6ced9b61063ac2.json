{"sha": "a7153b5505992d94745969f75f6ced9b61063ac2", "node_id": "C_kwDOAAsO6NoAKGE3MTUzYjU1MDU5OTJkOTQ3NDU5NjlmNzVmNmNlZDliNjEwNjNhYzI", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-26T20:07:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-04T13:32:10Z"}, "message": "A bit of cleanup", "tree": {"sha": "61f906b1f9b041e0e5baefd6d85526a962930526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f906b1f9b041e0e5baefd6d85526a962930526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7153b5505992d94745969f75f6ced9b61063ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7153b5505992d94745969f75f6ced9b61063ac2", "html_url": "https://github.com/rust-lang/rust/commit/a7153b5505992d94745969f75f6ced9b61063ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7153b5505992d94745969f75f6ced9b61063ac2/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e8f8eddfb872e863e19d044656777b116b9d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e8f8eddfb872e863e19d044656777b116b9d46", "html_url": "https://github.com/rust-lang/rust/commit/25e8f8eddfb872e863e19d044656777b116b9d46"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "1b05088b3d54eb42279b6d2624fc312654c45dcc", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=a7153b5505992d94745969f75f6ced9b61063ac2", "patch": "@@ -183,7 +183,8 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n \n impl VisitMachineValues for Thread<'_, '_> {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        let Thread { panic_payload, last_error, stack, .. } = self;\n+        let Thread { panic_payload, last_error, stack, state: _, thread_name: _, join_status: _ } =\n+            self;\n \n         if let Some(payload) = panic_payload {\n             visit(&Operand::Immediate(Immediate::Scalar(*payload)))\n@@ -199,7 +200,16 @@ impl VisitMachineValues for Thread<'_, '_> {\n \n impl VisitMachineValues for Frame<'_, '_, Provenance, FrameData<'_>> {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        let Frame { return_place, locals, extra, .. } = self;\n+        let Frame {\n+            return_place,\n+            locals,\n+            extra,\n+            body: _,\n+            instance: _,\n+            return_to_block: _,\n+            loc: _,\n+            ..\n+        } = self;\n \n         // Return place.\n         if let Place::Ptr(mplace) = **return_place {\n@@ -290,7 +300,14 @@ impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n \n impl VisitMachineValues for ThreadManager<'_, '_> {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        let ThreadManager { threads, thread_local_alloc_ids, .. } = self;\n+        let ThreadManager {\n+            threads,\n+            thread_local_alloc_ids,\n+            active_thread: _,\n+            yield_active_thread: _,\n+            sync: _,\n+            timeout_callbacks: _,\n+        } = self;\n \n         for thread in threads {\n             thread.visit_machine_values(visit);"}, {"sha": "35d5c0d9a8744dc5125d2e926d929c0f73fc8628", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=a7153b5505992d94745969f75f6ced9b61063ac2", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> std::fmt::Debug for FrameData<'tcx> {\n \n impl VisitMachineValues for FrameData<'_> {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        let FrameData { catch_unwind, .. } = self;\n+        let FrameData { catch_unwind, stacked_borrows: _, timing: _ } = self;\n \n         if let Some(catch_unwind) = catch_unwind {\n             catch_unwind.visit_machine_values(visit);"}, {"sha": "be14892f69681857b8479ea71374ecd778155170", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=a7153b5505992d94745969f75f6ced9b61063ac2", "patch": "@@ -37,8 +37,9 @@ pub struct CatchUnwindData<'tcx> {\n \n impl VisitMachineValues for CatchUnwindData<'_> {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        visit(&Operand::Indirect(MemPlace::from_ptr(self.catch_fn)));\n-        visit(&Operand::Immediate(Immediate::Scalar(self.data)));\n+        let CatchUnwindData { catch_fn, data, dest: _, ret: _ } = self;\n+        visit(&Operand::Indirect(MemPlace::from_ptr(*catch_fn)));\n+        visit(&Operand::Immediate(Immediate::Scalar(*data)));\n     }\n }\n "}, {"sha": "59d24e00dc1aea1afac3b4246f0a6967c0aa8eba", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=a7153b5505992d94745969f75f6ced9b61063ac2", "patch": "@@ -464,7 +464,9 @@ impl Default for DirHandler {\n \n impl VisitMachineValues for DirHandler {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        for dir in self.streams.values() {\n+        let DirHandler { streams, next_id: _ } = self;\n+\n+        for dir in streams.values() {\n             visit(&Operand::Indirect(MemPlace::from_ptr(dir.entry)));\n         }\n     }"}, {"sha": "57de1c21c8b2de57a0feb284c5bee0457442873b", "filename": "src/tools/miri/src/stacked_borrows/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7153b5505992d94745969f75f6ced9b61063ac2/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs?ref=a7153b5505992d94745969f75f6ced9b61063ac2", "patch": "@@ -46,7 +46,7 @@ impl Stack {\n         // For stacks with a known bottom, we never consider removing the bottom-most tag, because\n         // that is the base tag which exists whether or not there are any pointers to the\n         // allocation.\n-        let mut read_idx = usize::from(self.unknown_bottom.is_none());\n+        let mut read_idx = if self.unknown_bottom.is_some() { 0 } else { 1 };\n         let mut write_idx = read_idx;\n         while read_idx < self.borrows.len() {\n             let left = self.borrows[read_idx - 1];"}]}