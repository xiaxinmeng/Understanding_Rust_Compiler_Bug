{"sha": "4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NDRlMWMwOGEwZjg3ZjhjMmJmNGJhNzUyNjMwZTFhZjA3OTRhNjM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-14T00:14:59Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-14T02:14:24Z"}, "message": "Add support for printing uints as lower-case hex to ExtFmt.\n\nBegin passing an ExtFmt.RT.conv parsed format description to each of the\nExtFmt.RT.conv* functions.", "tree": {"sha": "a7d877e2298ac884441ab73002a48f05e897e7c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d877e2298ac884441ab73002a48f05e897e7c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "html_url": "https://github.com/rust-lang/rust/commit/4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4844e1c08a0f87f8c2bf4ba752630e1af0794a63/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aebdef0cd6dff87322f51850f72c42ccb54fbd53", "url": "https://api.github.com/repos/rust-lang/rust/commits/aebdef0cd6dff87322f51850f72c42ccb54fbd53", "html_url": "https://github.com/rust-lang/rust/commit/aebdef0cd6dff87322f51850f72c42ccb54fbd53"}], "stats": {"total": 119, "additions": 101, "deletions": 18}, "files": [{"sha": "bb9f88324b061d0b1c153d761f9d01bd16301dc0", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 78, "deletions": 13, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4844e1c08a0f87f8c2bf4ba752630e1af0794a63/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4844e1c08a0f87f8c2bf4ba752630e1af0794a63/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "patch": "@@ -111,24 +111,86 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n         ret @rec(node=binexpr, span=sp);\n     }\n \n-    fn make_call(common.span sp, vec[ast.ident] fn_path,\n-                 vec[@ast.expr] args) -> @ast.expr {\n-        let vec[ast.ident] path_idents = fn_path;\n-        let vec[@ast.ty] path_types = vec();\n-        auto path = rec(idents = path_idents, types = path_types);\n+    fn make_path_expr(common.span sp, vec[ast.ident] idents) -> @ast.expr {\n+        let vec[@ast.ty] types = vec();\n+        auto path = rec(idents=idents, types=types);\n         auto sp_path = rec(node=path, span=sp);\n         auto pathexpr = ast.expr_path(sp_path, none[ast.def], ast.ann_none);\n         auto sp_pathexpr = @rec(node=pathexpr, span=sp);\n-        auto callexpr = ast.expr_call(sp_pathexpr, args, ast.ann_none);\n+        ret sp_pathexpr;\n+    }\n+\n+    fn make_call(common.span sp, vec[ast.ident] fn_path,\n+                 vec[@ast.expr] args) -> @ast.expr {\n+        auto pathexpr = make_path_expr(sp, fn_path);\n+        auto callexpr = ast.expr_call(pathexpr, args, ast.ann_none);\n         auto sp_callexpr = @rec(node=callexpr, span=sp);\n         ret sp_callexpr;\n     }\n \n+    fn make_rec_expr(common.span sp,\n+                     vec[tup(ast.ident, @ast.expr)] fields) -> @ast.expr {\n+        let vec[ast.field] astfields = vec();\n+        for (tup(ast.ident, @ast.expr) field in fields) {\n+            auto ident = field._0;\n+            auto val = field._1;\n+            auto astfield = rec(mut = ast.imm,\n+                                ident = ident,\n+                                expr = val);\n+            astfields += vec(astfield);\n+        }\n+\n+        auto recexpr = ast.expr_rec(astfields,\n+                                    option.none[@ast.expr],\n+                                    ast.ann_none);\n+        auto sp_recexpr = @rec(node=recexpr, span=sp);\n+        ret sp_recexpr;\n+    }\n+\n+    fn make_path_vec(str ident) -> vec[str] {\n+        ret vec(\"std\", \"ExtFmt\", \"RT\", ident);\n+    }\n+\n+    fn make_rt_conv_expr(common.span sp, &conv cnv) -> @ast.expr {\n+        fn make_ty(common.span sp, &ty t) -> @ast.expr {\n+            auto rt_type;\n+            alt (t) {\n+                case (ty_hex(?c)) {\n+                    alt (c) {\n+                        case (case_upper) {\n+                            rt_type = \"ty_hex_upper\";\n+                        }\n+                        case (case_lower) {\n+                            rt_type = \"ty_hex_lower\";\n+                        }\n+                    }\n+                }\n+                case (ty_bits) {\n+                    rt_type = \"ty_bits\";\n+                }\n+                case (_) {\n+                    rt_type = \"ty_default\";\n+                }\n+            }\n+\n+            auto idents = make_path_vec(rt_type);\n+            ret make_path_expr(sp, idents);\n+        }\n+\n+        fn make_conv_rec(common.span sp, &@ast.expr ty_expr) -> @ast.expr {\n+            ret make_rec_expr(sp, vec(tup(\"ty\", ty_expr)));\n+        }\n+\n+        auto rt_conv_ty = make_ty(sp, cnv.ty);\n+        ret make_conv_rec(sp, rt_conv_ty);\n+    }\n+\n     fn make_conv_call(common.span sp, str conv_type,\n-                      @ast.expr arg) -> @ast.expr {\n+                      &conv cnv, @ast.expr arg) -> @ast.expr {\n         auto fname = \"conv_\" + conv_type;\n-        let vec[str] path = vec(\"std\", \"ExtFmt\", \"RT\", fname);\n-        let vec[@ast.expr] args = vec(arg);\n+        auto path = make_path_vec(fname);\n+        auto cnv_expr = make_rt_conv_expr(sp, cnv);\n+        auto args = vec(cnv_expr, arg);\n         ret make_call(arg.span, path, args);\n     }\n \n@@ -175,18 +237,21 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             case (ty_int(?sign)) {\n                 alt (sign) {\n                     case (signed) {\n-                        ret make_conv_call(arg.span, \"int\", arg);\n+                        ret make_conv_call(arg.span, \"int\", cnv, arg);\n                     }\n                     case (unsigned) {\n-                        ret make_conv_call(arg.span, \"uint\", arg);\n+                        ret make_conv_call(arg.span, \"uint\", cnv, arg);\n                     }\n                 }\n             }\n             case (ty_bool) {\n-                ret make_conv_call(arg.span, \"bool\", arg);\n+                ret make_conv_call(arg.span, \"bool\", cnv, arg);\n             }\n             case (ty_char) {\n-                ret make_conv_call(arg.span, \"char\", arg);\n+                ret make_conv_call(arg.span, \"char\", cnv, arg);\n+            }\n+            case (ty_hex(_)) {\n+                ret make_conv_call(arg.span, \"uint\", cnv, arg);\n             }\n             case (_) {\n                 log unsupported;"}, {"sha": "229a0c5d517d70b944205e374767a94bda304972", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4844e1c08a0f87f8c2bf4ba752630e1af0794a63/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4844e1c08a0f87f8c2bf4ba752630e1af0794a63/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "patch": "@@ -264,23 +264,40 @@ mod CT {\n \n // Functions used by the fmt extension at runtime\n mod RT {\n-    fn conv_int(int i) -> str {\n+\n+    tag ty {\n+        ty_default;\n+        ty_bits;\n+        ty_hex_upper;\n+        ty_hex_lower;\n+    }\n+\n+    type conv = rec(ty ty);\n+\n+    fn conv_int(&conv cv, int i) -> str {\n         ret _int.to_str(i, 10u);\n     }\n \n-    fn conv_uint(uint u) -> str {\n-        ret _uint.to_str(u, 10u);\n+    fn conv_uint(&conv cv, uint u) -> str {\n+        alt (cv.ty) {\n+            case (ty_default) {\n+                ret _uint.to_str(u, 10u);\n+            }\n+            case (ty_hex_lower) {\n+                ret _uint.to_str(u, 16u);\n+            }\n+        }\n     }\n \n-    fn conv_bool(bool b) -> str {\n+    fn conv_bool(&conv cv, bool b) -> str {\n         if (b) {\n             ret \"true\";\n         } else {\n             ret \"false\";\n         }\n     }\n \n-    fn conv_char(char c) -> str {\n+    fn conv_char(&conv cv, char c) -> str {\n         ret _str.from_char(c);\n     }\n }"}, {"sha": "78a414b35b64ed708a55fbfeb3986d16a97f0f4c", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4844e1c08a0f87f8c2bf4ba752630e1af0794a63/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4844e1c08a0f87f8c2bf4ba752630e1af0794a63/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=4844e1c08a0f87f8c2bf4ba752630e1af0794a63", "patch": "@@ -22,4 +22,5 @@ fn main() {\n   test(#fmt(\"%b\", true), \"true\");\n   test(#fmt(\"%b\", false), \"false\");\n   test(#fmt(\"%c\", 'A'), \"A\");\n+  test(#fmt(\"%x\", 0xff_u), \"ff\");\n }"}]}