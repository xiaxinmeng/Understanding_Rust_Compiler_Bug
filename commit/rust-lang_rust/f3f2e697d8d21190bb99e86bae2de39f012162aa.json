{"sha": "f3f2e697d8d21190bb99e86bae2de39f012162aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZjJlNjk3ZDhkMjExOTBiYjk5ZTg2YmFlMmRlMzlmMDEyMTYyYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-18T17:01:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-18T17:01:46Z"}, "message": "auto merge of #11619 : adridu59/rust/patch-md, r=cmr\n\nNoticeably necroes #10892.\r\nAlso closes #11559.\r\n\r\nr? @alexcrichton", "tree": {"sha": "d8492cf3e1e234bcd0feab3937d15ab41950049a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8492cf3e1e234bcd0feab3937d15ab41950049a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3f2e697d8d21190bb99e86bae2de39f012162aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f2e697d8d21190bb99e86bae2de39f012162aa", "html_url": "https://github.com/rust-lang/rust/commit/f3f2e697d8d21190bb99e86bae2de39f012162aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3f2e697d8d21190bb99e86bae2de39f012162aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf07c80838e59cb21748f7e3b092ced96f41a208", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf07c80838e59cb21748f7e3b092ced96f41a208", "html_url": "https://github.com/rust-lang/rust/commit/bf07c80838e59cb21748f7e3b092ced96f41a208"}, {"sha": "14f605df21237d1a08d05dac2c964f08e8d21486", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f605df21237d1a08d05dac2c964f08e8d21486", "html_url": "https://github.com/rust-lang/rust/commit/14f605df21237d1a08d05dac2c964f08e8d21486"}], "stats": {"total": 96, "additions": 58, "deletions": 38}, "files": [{"sha": "bf0e9dd090ae432a1d236488ff9c67908d9d17ac", "filename": "doc/rust.md", "status": "modified", "additions": 50, "deletions": 31, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f3f2e697d8d21190bb99e86bae2de39f012162aa/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f3f2e697d8d21190bb99e86bae2de39f012162aa/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=f3f2e697d8d21190bb99e86bae2de39f012162aa", "patch": "@@ -2211,12 +2211,9 @@ dereferences (`*expr`), [indexing expressions](#index-expressions)\n (`expr[expr]`), and [field references](#field-expressions) (`expr.f`).\n All other expressions are rvalues.\n \n-The left operand of an [assignment](#assignment-expressions),\n-[binary move](#binary-move-expressions) or\n+The left operand of an [assignment](#assignment-expressions) or\n [compound-assignment](#compound-assignment-expressions) expression is an lvalue context,\n-as is the single operand of a unary [borrow](#unary-operator-expressions),\n-or [move](#unary-move-expressions) expression,\n-and _both_ operands of a [swap](#swap-expressions) expression.\n+as is the single operand of a unary [borrow](#unary-operator-expressions).\n All other expression contexts are rvalue contexts.\n \n When an lvalue is evaluated in an _lvalue context_, it denotes a memory location;\n@@ -2229,9 +2226,8 @@ A temporary's lifetime equals the largest lifetime of any reference that points\n \n When a [local variable](#memory-slots) is used\n as an [rvalue](#lvalues-rvalues-and-temporaries)\n-the variable will either be [moved](#move-expressions) or copied,\n-depending on its type.\n-For types that contain [owning pointers](#owning-pointers)\n+the variable will either be moved or copied, depending on its type.\n+For types that contain [owning pointers](#pointer-types)\n or values that implement the special trait `Drop`,\n the variable is moved.\n All other types are copied.\n@@ -2890,16 +2886,26 @@ match x {\n \n The first pattern matches lists constructed by applying `Cons` to any head value, and a\n tail value of `~Nil`. The second pattern matches _any_ list constructed with `Cons`,\n-ignoring the values of its arguments. The difference between `_` and `*` is that the pattern `C(_)` is only type-correct if\n-`C` has exactly one argument, while the pattern `C(..)` is type-correct for any enum variant `C`, regardless of how many arguments `C` has.\n-\n-To execute an `match` expression, first the head expression is evaluated, then\n-its value is sequentially compared to the patterns in the arms until a match\n+ignoring the values of its arguments. The difference between `_` and `*` is that the pattern\n+`C(_)` is only type-correct if `C` has exactly one argument, while the pattern `C(..)` is\n+type-correct for any enum variant `C`, regardless of how many arguments `C` has.\n+\n+A `match` behaves differently depending on whether or not the head expression\n+is an [lvalue or an rvalue](#lvalues-rvalues-and-temporaries).\n+If the head expression is an rvalue, it is\n+first evaluated into a temporary location, and the resulting value\n+is sequentially compared to the patterns in the arms until a match\n is found. The first arm with a matching pattern is chosen as the branch target\n of the `match`, any variables bound by the pattern are assigned to local\n variables in the arm's block, and control enters the block.\n \n-An example of an `match` expression:\n+When the head expression is an lvalue, the match does not allocate a\n+temporary location (however, a by-value binding may copy or move from\n+the lvalue). When possible, it is preferable to match on lvalues, as the\n+lifetime of these matches inherits the lifetime of the lvalue, rather\n+than being restricted to the inside of the match.\n+\n+An example of a `match` expression:\n \n ~~~~\n # fn process_pair(a: int, b: int) { }\n@@ -2929,19 +2935,31 @@ Patterns that bind variables\n default to binding to a copy or move of the matched value\n (depending on the matched value's type).\n This can be changed to bind to a reference by\n-using the ```ref``` keyword,\n-or to a mutable reference using ```ref mut```.\n-\n-A pattern that's just an identifier,\n-like `Nil` in the previous answer,\n-could either refer to an enum variant that's in scope,\n-or bind a new variable.\n-The compiler resolves this ambiguity by forbidding variable bindings that occur in ```match``` patterns from shadowing names of variants that are in scope.\n-For example, wherever ```List``` is in scope,\n-a ```match``` pattern would not be able to bind ```Nil``` as a new name.\n-The compiler interprets a variable pattern `x` as a binding _only_ if there is no variant named `x` in scope.\n-A convention you can use to avoid conflicts is simply to name variants with upper-case letters,\n-and local variables with lower-case letters.\n+using the `ref` keyword,\n+or to a mutable reference using `ref mut`.\n+\n+Patterns can also dereference pointers by using the `&`,\n+`~` or `@` symbols, as appropriate. For example, these two matches\n+on `x: &int` are equivalent:\n+\n+~~~~\n+# let x = &3;\n+let y = match *x { 0 => \"zero\", _ => \"some\" };\n+let z = match x { &0 => \"zero\", _ => \"some\" };\n+\n+assert_eq!(y, z);\n+~~~~\n+\n+A pattern that's just an identifier, like `Nil` in the previous answer,\n+could either refer to an enum variant that's in scope, or bind a new variable.\n+The compiler resolves this ambiguity by forbidding variable bindings that occur\n+in `match` patterns from shadowing names of variants that are in scope.\n+For example, wherever `List` is in scope,\n+a `match` pattern would not be able to bind `Nil` as a new name.\n+The compiler interprets a variable pattern `x` as a binding _only_ if there is\n+no variant named `x` in scope.\n+A convention you can use to avoid conflicts is simply to name variants with\n+upper-case letters, and local variables with lower-case letters.\n \n Multiple match patterns may be joined with the `|` operator.\n A range of values may be specified with `..`.\n@@ -3122,19 +3140,20 @@ A `struct` *type* is a heterogeneous product of other types, called the *fields*\n the *record* types of the ML family,\n or the *structure* types of the Lisp family.]\n \n-New instances of a `struct` can be constructed with a [struct expression](#struct-expressions).\n+New instances of a `struct` can be constructed with a [struct expression](#structure-expressions).\n \n The memory order of fields in a `struct` is given by the item defining it.\n Fields may be given in any order in a corresponding struct *expression*;\n the resulting `struct` value will always be laid out in memory in the order specified by the corresponding *item*.\n \n-The fields of a `struct` may be qualified by [visibility modifiers](#visibility-modifiers),\n+The fields of a `struct` may be qualified by [visibility modifiers](#re-exporting-and-visibility),\n to restrict access to implementation-private data in a structure.\n \n A _tuple struct_ type is just like a structure type, except that the fields are anonymous.\n \n A _unit-like struct_ type is like a structure type, except that it has no fields.\n-The one value constructed by the associated [structure expression](#structure-expression) is the only value that inhabits such a type.\n+The one value constructed by the associated [structure expression](#structure-expressions)\n+is the only value that inhabits such a type.\n \n ### Enumerated types\n \n@@ -3805,7 +3824,7 @@ over the output format of a Rust crate.\n ### Logging system\n \n The runtime contains a system for directing [logging\n-expressions](#log-expressions) to a logging console and/or internal logging\n+expressions](#logging-expressions) to a logging console and/or internal logging\n buffers. Logging can be enabled per module.\n \n Logging output is enabled by setting the `RUST_LOG` environment"}, {"sha": "bacf39e1307db520f3346e37514a9c1421f06932", "filename": "mk/docs.mk", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f3f2e697d8d21190bb99e86bae2de39f012162aa/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f3f2e697d8d21190bb99e86bae2de39f012162aa/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=f3f2e697d8d21190bb99e86bae2de39f012162aa", "patch": "@@ -17,16 +17,16 @@ CDOCS :=\n DOCS_L10N :=\n HTML_DEPS :=\n \n-BASE_DOC_OPTS := --include-before-body=doc/version_info.html --standalone  \\\n-                                --toc --number-sections\n-HTML_OPTS = $(BASE_DOC_OPTS) \t--to=html5  --section-divs --css=rust.css  \\\n-\t\t\t\t\t\t\t\t--include-in-header=doc/favicon.inc\n-TEX_OPTS = $(BASE_DOC_OPTS) --to=latex\n+BASE_DOC_OPTS := --standalone --toc --number-sections\n+HTML_OPTS = $(BASE_DOC_OPTS) --to=html5 --section-divs --css=rust.css \\\n+    --include-before-body=doc/version_info.html --include-in-header=doc/favicon.inc\n+TEX_OPTS = $(BASE_DOC_OPTS) --include-before-body=doc/version.md --to=latex\n EPUB_OPTS = $(BASE_DOC_OPTS) --to=epub\n \n ######################################################################\n # Rust version\n ######################################################################\n+\n doc/version.md: $(MKFILE_DEPS) $(wildcard $(S)doc/*.*)\n \t@$(call E, version-stamp: $@)\n \t$(Q)echo \"$(CFG_VERSION)\" >$@\n@@ -84,7 +84,7 @@ doc/rust.tex: rust.md doc/version.md\n \t$(CFG_PANDOC) $(TEX_OPTS) --output=$@\n \n DOCS += doc/rust.epub\n-doc/rust.epub: rust.md doc/version_info.html doc/rust.css\n+doc/rust.epub: rust.md\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(EPUB_OPTS) --output=$@\n@@ -114,7 +114,7 @@ doc/tutorial.tex: tutorial.md doc/version.md\n \t$(CFG_PANDOC) $(TEX_OPTS) --output=$@\n \n DOCS += doc/tutorial.epub\n-doc/tutorial.epub: tutorial.md doc/version_info.html doc/rust.css\n+doc/tutorial.epub: tutorial.md\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(EPUB_OPTS) --output=$@\n@@ -265,6 +265,7 @@ endif # No pandoc / node\n ######################################################################\n # LLnextgen (grammar analysis from refman)\n ######################################################################\n+\n ifeq ($(CFG_LLNEXTGEN),)\n   $(info cfg: no llnextgen found, omitting grammar-verification)\n else"}]}