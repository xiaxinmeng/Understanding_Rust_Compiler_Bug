{"sha": "8d5f2bdcd17f3139965b9ef6da8cb13183324485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNWYyYmRjZDE3ZjMxMzk5NjViOWVmNmRhOGNiMTMxODMzMjQ0ODU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-28T12:39:45Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-29T20:14:19Z"}, "message": "Add test ensuring that we don't propagate large arrays", "tree": {"sha": "7c08fc3a1605cb19bde3a1c10fb4edc93204a368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c08fc3a1605cb19bde3a1c10fb4edc93204a368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5f2bdcd17f3139965b9ef6da8cb13183324485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5f2bdcd17f3139965b9ef6da8cb13183324485", "html_url": "https://github.com/rust-lang/rust/commit/8d5f2bdcd17f3139965b9ef6da8cb13183324485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5f2bdcd17f3139965b9ef6da8cb13183324485/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e21004c74b8749686c0e5b9195e6822be6280d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e21004c74b8749686c0e5b9195e6822be6280d0", "html_url": "https://github.com/rust-lang/rust/commit/9e21004c74b8749686c0e5b9195e6822be6280d0"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "e6a12f3364aead2999e408ef96ebb8aae7f958a2", "filename": "src/test/mir-opt/const_prop/large_array_index.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d5f2bdcd17f3139965b9ef6da8cb13183324485/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5f2bdcd17f3139965b9ef6da8cb13183324485/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs?ref=8d5f2bdcd17f3139965b9ef6da8cb13183324485", "patch": "@@ -0,0 +1,7 @@\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n+// EMIT_MIR rustc.main.ConstProp.diff\n+fn main() {\n+    // check that we don't propagate this, because it's too large\n+    let x: u8 = [0_u8; 5000][2];\n+}"}, {"sha": "721766f9849710050ef7685f85478765cf600ea9", "filename": "src/test/mir-opt/const_prop/large_array_index/32bit/rustc.main.ConstProp.diff", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8d5f2bdcd17f3139965b9ef6da8cb13183324485/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d5f2bdcd17f3139965b9ef6da8cb13183324485/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index%2F32bit%2Frustc.main.ConstProp.diff?ref=8d5f2bdcd17f3139965b9ef6da8cb13183324485", "patch": "@@ -0,0 +1,85 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:4:11: 4:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:6:9: 6:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:6:18: 6:22\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:6:30: 6:31\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n+          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00001388))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:6:17: 6:32\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00001388)) }\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00001388))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00001388)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n+      }\n+  \n+      bb1: {\n+          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n+          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:4:11: 7:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:4:11: 7:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:7:2: 7:2\n+      }\n+  }\n+  "}, {"sha": "eae2ce6671cc15b5ee7283ac1e32686ffdd1e2cf", "filename": "src/test/mir-opt/const_prop/large_array_index/64bit/rustc.main.ConstProp.diff", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8d5f2bdcd17f3139965b9ef6da8cb13183324485/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d5f2bdcd17f3139965b9ef6da8cb13183324485/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index%2F64bit%2Frustc.main.ConstProp.diff?ref=8d5f2bdcd17f3139965b9ef6da8cb13183324485", "patch": "@@ -0,0 +1,85 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:4:11: 4:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:6:9: 6:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:6:18: 6:22\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:6:30: 6:31\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n+          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000001388))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:6:17: 6:32\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000001388)) }\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000001388))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000001388)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n+      }\n+  \n+      bb1: {\n+          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n+          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:4:11: 7:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/large_array_index.rs:4:11: 7:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:7:2: 7:2\n+      }\n+  }\n+  "}]}