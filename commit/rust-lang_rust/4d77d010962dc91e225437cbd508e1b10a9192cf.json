{"sha": "4d77d010962dc91e225437cbd508e1b10a9192cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNzdkMDEwOTYyZGM5MWUyMjU0MzdjYmQ1MDhlMWIxMGE5MTkyY2Y=", "commit": {"author": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2020-03-25T21:42:13Z"}, "committer": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2020-03-25T22:08:23Z"}, "message": "Fix for #62691: use the largest niche across all fields\n\nfixes #62691", "tree": {"sha": "d5522ce77385dca55b6a5219cf17160e904bf78c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5522ce77385dca55b6a5219cf17160e904bf78c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d77d010962dc91e225437cbd508e1b10a9192cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d77d010962dc91e225437cbd508e1b10a9192cf", "html_url": "https://github.com/rust-lang/rust/commit/4d77d010962dc91e225437cbd508e1b10a9192cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d77d010962dc91e225437cbd508e1b10a9192cf/comments", "author": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02046a5d402c789c006d0da7662f800fe3c45faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/02046a5d402c789c006d0da7662f800fe3c45faf", "html_url": "https://github.com/rust-lang/rust/commit/02046a5d402c789c006d0da7662f800fe3c45faf"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "e63a9eac0e64347cef848b53c311303326fab6f4", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d77d010962dc91e225437cbd508e1b10a9192cf/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d77d010962dc91e225437cbd508e1b10a9192cf/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4d77d010962dc91e225437cbd508e1b10a9192cf", "patch": "@@ -282,8 +282,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let mut align = if pack.is_some() { dl.i8_align } else { dl.aggregate_align };\n \n-        let mut sized = true;\n-        let mut offsets = vec![Size::ZERO; fields.len()];\n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n         let mut optimize = !repr.inhibit_struct_field_reordering_opt();\n@@ -320,6 +318,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // At the bottom of this function, we invert `inverse_memory_index` to\n         // produce `memory_index` (see `invert_mapping`).\n \n+        let mut sized = true;\n+        let mut offsets = vec![Size::ZERO; fields.len()];\n         let mut offset = Size::ZERO;\n         let mut largest_niche = None;\n         let mut largest_niche_available = 0;\n@@ -907,18 +907,15 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         let count = (niche_variants.end().as_u32()\n                             - niche_variants.start().as_u32()\n                             + 1) as u128;\n-                        // FIXME(#62691) use the largest niche across all fields,\n-                        // not just the first one.\n-                        for (field_index, &field) in variants[i].iter().enumerate() {\n-                            let niche = match &field.largest_niche {\n-                                Some(niche) => niche,\n-                                _ => continue,\n-                            };\n-                            let (niche_start, niche_scalar) = match niche.reserve(self, count) {\n-                                Some(pair) => pair,\n-                                None => continue,\n-                            };\n-\n+                        if let Some((field_index, niche, (niche_start, niche_scalar))) = variants[i]\n+                            .iter()\n+                            .enumerate()\n+                            .filter_map(|(i, &field)| {\n+                                let niche = field.largest_niche.as_ref()?;\n+                                Some((i, niche, niche.reserve(self, count)?))\n+                            })\n+                            .max_by_key(|(_, niche, _)| niche.available(dl))\n+                        {\n                             let mut align = dl.aggregate_align;\n                             let st = variants\n                                 .iter_enumerated()"}, {"sha": "1d332cc3bf7ba3081e00930c72b443a632286938", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d77d010962dc91e225437cbd508e1b10a9192cf/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d77d010962dc91e225437cbd508e1b10a9192cf/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=4d77d010962dc91e225437cbd508e1b10a9192cf", "patch": "@@ -74,6 +74,11 @@ enum NicheFilledEnumWithAbsentVariant {\n     C,\n }\n \n+enum Option2<A, B> {\n+    Some(A, B),\n+    None\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -113,4 +118,6 @@ pub fn main() {\n \n     assert_eq!(size_of::<Option<Option<(bool, &())>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option<(&(), bool)>>>(), size_of::<(bool, &())>());\n+    assert_eq!(size_of::<Option<Option2<bool, &()>>>(), size_of::<(bool, &())>());\n+    assert_eq!(size_of::<Option<Option2<&(), bool>>>(), size_of::<(bool, &())>());\n }"}]}