{"sha": "a03ca01f4750e643a28731563e530917d314f729", "node_id": "C_kwDOAAsO6NoAKGEwM2NhMDFmNDc1MGU2NDNhMjg3MzE1NjNlNTMwOTE3ZDMxNGY3Mjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-18T05:06:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-18T05:06:04Z"}, "message": "Auto merge of #102992 - nnethercote:rm-RunCompiler-emitter, r=bjorn3\n\nRemove `RunCompiler::emitter`.\n\nIt's no longer used.\n\nr? `@bjorn3`", "tree": {"sha": "7ee127a97e1d3393c10d319302d1b70d14987549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ee127a97e1d3393c10d319302d1b70d14987549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a03ca01f4750e643a28731563e530917d314f729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a03ca01f4750e643a28731563e530917d314f729", "html_url": "https://github.com/rust-lang/rust/commit/a03ca01f4750e643a28731563e530917d314f729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a03ca01f4750e643a28731563e530917d314f729/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a5ac269cffada469753ad2416717e251863f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a5ac269cffada469753ad2416717e251863f9a", "html_url": "https://github.com/rust-lang/rust/commit/98a5ac269cffada469753ad2416717e251863f9a"}, {"sha": "641f8249f99b407af7e5376b098323926eab1696", "url": "https://api.github.com/repos/rust-lang/rust/commits/641f8249f99b407af7e5376b098323926eab1696", "html_url": "https://github.com/rust-lang/rust/commit/641f8249f99b407af7e5376b098323926eab1696"}], "stats": {"total": 130, "additions": 29, "deletions": 101}, "files": [{"sha": "f268d50e96e87b078b2d82511c43addb04e206ab", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -35,7 +35,7 @@ use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, Tr\n use rustc_session::cstore::MetadataLoader;\n use rustc_session::getopts;\n use rustc_session::lint::{Lint, LintId};\n-use rustc_session::{config, DiagnosticOutput, Session};\n+use rustc_session::{config, Session};\n use rustc_session::{early_error, early_error_no_abort, early_warn};\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n@@ -147,19 +147,21 @@ pub struct RunCompiler<'a, 'b> {\n     at_args: &'a [String],\n     callbacks: &'b mut (dyn Callbacks + Send),\n     file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n-    emitter: Option<Box<dyn Write + Send>>,\n     make_codegen_backend:\n         Option<Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>>,\n }\n \n impl<'a, 'b> RunCompiler<'a, 'b> {\n     pub fn new(at_args: &'a [String], callbacks: &'b mut (dyn Callbacks + Send)) -> Self {\n-        Self { at_args, callbacks, file_loader: None, emitter: None, make_codegen_backend: None }\n+        Self { at_args, callbacks, file_loader: None, make_codegen_backend: None }\n     }\n \n     /// Set a custom codegen backend.\n     ///\n-    /// Used by cg_clif.\n+    /// Has no uses within this repository, but is used by bjorn3 for \"the\n+    /// hotswapping branch of cg_clif\" for \"setting the codegen backend from a\n+    /// custom driver where the custom codegen backend has arbitrary data.\"\n+    /// (See #102759.)\n     pub fn set_make_codegen_backend(\n         &mut self,\n         make_codegen_backend: Option<\n@@ -170,17 +172,11 @@ impl<'a, 'b> RunCompiler<'a, 'b> {\n         self\n     }\n \n-    /// Emit diagnostics to the specified location.\n-    ///\n-    /// Used by RLS.\n-    pub fn set_emitter(&mut self, emitter: Option<Box<dyn Write + Send>>) -> &mut Self {\n-        self.emitter = emitter;\n-        self\n-    }\n-\n     /// Load files from sources other than the file system.\n     ///\n-    /// Used by RLS.\n+    /// Has no uses within this repository, but may be used in the future by\n+    /// bjorn3 for \"hooking rust-analyzer's VFS into rustc at some point for\n+    /// running rustc without having to save\". (See #102759.)\n     pub fn set_file_loader(\n         &mut self,\n         file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n@@ -191,27 +187,19 @@ impl<'a, 'b> RunCompiler<'a, 'b> {\n \n     /// Parse args and run the compiler.\n     pub fn run(self) -> interface::Result<()> {\n-        run_compiler(\n-            self.at_args,\n-            self.callbacks,\n-            self.file_loader,\n-            self.emitter,\n-            self.make_codegen_backend,\n-        )\n+        run_compiler(self.at_args, self.callbacks, self.file_loader, self.make_codegen_backend)\n     }\n }\n fn run_compiler(\n     at_args: &[String],\n     callbacks: &mut (dyn Callbacks + Send),\n     file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n-    emitter: Option<Box<dyn Write + Send>>,\n     make_codegen_backend: Option<\n         Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n     >,\n ) -> interface::Result<()> {\n     let args = args::arg_expand_all(at_args);\n \n-    let diagnostic_output = emitter.map_or(DiagnosticOutput::Default, DiagnosticOutput::Raw);\n     let Some(matches) = handle_options(&args) else { return Ok(()) };\n \n     let sopts = config::build_session_options(&matches);\n@@ -233,7 +221,6 @@ fn run_compiler(\n         output_file: ofile,\n         output_dir: odir,\n         file_loader,\n-        diagnostic_output,\n         lint_caps: Default::default(),\n         parse_sess_created: None,\n         register_lints: None,"}, {"sha": "134934c7ca6b2597f486ffa67b081241f6454e5b", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -17,7 +17,7 @@ use rustc_session::config::{self, CheckCfg, ErrorOutputType, Input, OutputFilena\n use rustc_session::early_error;\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n-use rustc_session::{DiagnosticOutput, Session};\n+use rustc_session::Session;\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n use std::path::PathBuf;\n@@ -247,7 +247,6 @@ pub struct Config {\n     pub output_dir: Option<PathBuf>,\n     pub output_file: Option<PathBuf>,\n     pub file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n-    pub diagnostic_output: DiagnosticOutput,\n \n     pub lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n@@ -284,7 +283,6 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         config.opts,\n         config.crate_cfg,\n         config.crate_check_cfg,\n-        config.diagnostic_output,\n         config.file_loader,\n         config.input_path.clone(),\n         config.lint_caps,"}, {"sha": "da3102ba7b02b53b11e4d7edf3ad5d0e476d2ffb", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -17,7 +17,7 @@ use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, Switc\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n-use rustc_session::{build_session, getopts, DiagnosticOutput, Session};\n+use rustc_session::{build_session, getopts, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n@@ -40,16 +40,7 @@ fn build_session_options_and_crate_config(matches: getopts::Matches) -> (Options\n fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let registry = registry::Registry::new(&[]);\n     let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-    let sess = build_session(\n-        sessopts,\n-        None,\n-        None,\n-        registry,\n-        DiagnosticOutput::Default,\n-        Default::default(),\n-        None,\n-        None,\n-    );\n+    let sess = build_session(sessopts, None, None, registry, Default::default(), None, None);\n     (sess, cfg)\n }\n "}, {"sha": "3a9e491e289653354a1172ba3f5dad91cd70c2f2", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -18,7 +18,7 @@ use rustc_session::config::{self, CrateType};\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n-use rustc_session::{early_error, filesearch, output, DiagnosticOutput, Session};\n+use rustc_session::{early_error, filesearch, output, Session};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::FileLoader;\n@@ -65,7 +65,6 @@ pub fn create_session(\n     sopts: config::Options,\n     cfg: FxHashSet<(String, Option<String>)>,\n     check_cfg: CheckCfg,\n-    diagnostic_output: DiagnosticOutput,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     input_path: Option<PathBuf>,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -104,7 +103,6 @@ pub fn create_session(\n         input_path,\n         bundle,\n         descriptions,\n-        diagnostic_output,\n         lint_caps,\n         file_loader,\n         target_override,"}, {"sha": "b5e25f45fa7576843276a3136951c1aa1fa66f09", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 14, "deletions": 55, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -44,7 +44,6 @@ use rustc_target::spec::{\n use std::cell::{self, RefCell};\n use std::env;\n use std::fmt;\n-use std::io::Write;\n use std::ops::{Div, Mul};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n@@ -1213,11 +1212,10 @@ fn default_emitter(\n     source_map: Lrc<SourceMap>,\n     bundle: Option<Lrc<FluentBundle>>,\n     fallback_bundle: LazyFallbackBundle,\n-    emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n     let macro_backtrace = sopts.unstable_opts.macro_backtrace;\n-    match (sopts.error_format, emitter_dest) {\n-        (config::ErrorOutputType::HumanReadable(kind), dst) => {\n+    match sopts.error_format {\n+        config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n \n             if let HumanReadableErrorType::AnnotateSnippet(_) = kind {\n@@ -1230,33 +1228,20 @@ fn default_emitter(\n                 );\n                 Box::new(emitter.ui_testing(sopts.unstable_opts.ui_testing))\n             } else {\n-                let emitter = match dst {\n-                    None => EmitterWriter::stderr(\n-                        color_config,\n-                        Some(source_map),\n-                        bundle,\n-                        fallback_bundle,\n-                        short,\n-                        sopts.unstable_opts.teach,\n-                        sopts.diagnostic_width,\n-                        macro_backtrace,\n-                    ),\n-                    Some(dst) => EmitterWriter::new(\n-                        dst,\n-                        Some(source_map),\n-                        bundle,\n-                        fallback_bundle,\n-                        short,\n-                        false, // no teach messages when writing to a buffer\n-                        false, // no colors when writing to a buffer\n-                        None,  // no diagnostic width\n-                        macro_backtrace,\n-                    ),\n-                };\n+                let emitter = EmitterWriter::stderr(\n+                    color_config,\n+                    Some(source_map),\n+                    bundle,\n+                    fallback_bundle,\n+                    short,\n+                    sopts.unstable_opts.teach,\n+                    sopts.diagnostic_width,\n+                    macro_backtrace,\n+                );\n                 Box::new(emitter.ui_testing(sopts.unstable_opts.ui_testing))\n             }\n         }\n-        (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n+        config::ErrorOutputType::Json { pretty, json_rendered } => Box::new(\n             JsonEmitter::stderr(\n                 Some(registry),\n                 source_map,\n@@ -1269,36 +1254,16 @@ fn default_emitter(\n             )\n             .ui_testing(sopts.unstable_opts.ui_testing),\n         ),\n-        (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n-            JsonEmitter::new(\n-                dst,\n-                Some(registry),\n-                source_map,\n-                bundle,\n-                fallback_bundle,\n-                pretty,\n-                json_rendered,\n-                sopts.diagnostic_width,\n-                macro_backtrace,\n-            )\n-            .ui_testing(sopts.unstable_opts.ui_testing),\n-        ),\n     }\n }\n \n-pub enum DiagnosticOutput {\n-    Default,\n-    Raw(Box<dyn Write + Send>),\n-}\n-\n // JUSTIFICATION: literally session construction\n #[allow(rustc::bad_opt_access)]\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n-    diagnostics_output: DiagnosticOutput,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     target_override: Option<Target>,\n@@ -1314,11 +1279,6 @@ pub fn build_session(\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n-    let write_dest = match diagnostics_output {\n-        DiagnosticOutput::Default => None,\n-        DiagnosticOutput::Raw(write) => Some(write),\n-    };\n-\n     let sysroot = match &sopts.maybe_sysroot {\n         Some(sysroot) => sysroot.clone(),\n         None => filesearch::get_or_default_sysroot(),\n@@ -1351,8 +1311,7 @@ pub fn build_session(\n         rustc_errors::DEFAULT_LOCALE_RESOURCES,\n         sopts.unstable_opts.translate_directionality_markers,\n     );\n-    let emitter =\n-        default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n+    let emitter = default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle);\n \n     let span_diagnostic = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,"}, {"sha": "858e939bd96e8fabd4b78bc5e6e5802af37b55c3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n use rustc_session::lint;\n-use rustc_session::DiagnosticOutput;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::{source_map, Span, Symbol};\n@@ -286,7 +285,6 @@ pub(crate) fn create_config(\n         output_file: None,\n         output_dir: None,\n         file_loader: None,\n-        diagnostic_output: DiagnosticOutput::Default,\n         lint_caps,\n         parse_sess_created: None,\n         register_lints: Some(Box::new(crate::lint::register_lints)),"}, {"sha": "ac8b5211878f28872f463c8b809af18315dae9cd", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -14,7 +14,7 @@ use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_parse::parser::attr::InnerAttrPolicy;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n use rustc_session::parse::ParseSess;\n-use rustc_session::{lint, DiagnosticOutput, Session};\n+use rustc_session::{lint, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n@@ -100,7 +100,6 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n         output_file: None,\n         output_dir: None,\n         file_loader: None,\n-        diagnostic_output: DiagnosticOutput::Default,\n         lint_caps,\n         parse_sess_created: None,\n         register_lints: Some(Box::new(crate::lint::register_lints)),"}, {"sha": "7e1b6aeb31558c30da283cc004473e47c7e2bca3", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a03ca01f4750e643a28731563e530917d314f729/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ca01f4750e643a28731563e530917d314f729/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=a03ca01f4750e643a28731563e530917d314f729", "patch": "@@ -5,7 +5,6 @@ extern crate rustc_driver;\n extern crate rustc_session;\n extern crate rustc_span;\n \n-use rustc_session::DiagnosticOutput;\n use rustc_session::config::{Input, Options, OutputType, OutputTypes};\n use rustc_interface::interface;\n use rustc_span::source_map::FileName;\n@@ -55,7 +54,6 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         output_file: Some(output),\n         output_dir: None,\n         file_loader: None,\n-        diagnostic_output: DiagnosticOutput::Default,\n         lint_caps: Default::default(),\n         parse_sess_created: None,\n         register_lints: None,"}]}