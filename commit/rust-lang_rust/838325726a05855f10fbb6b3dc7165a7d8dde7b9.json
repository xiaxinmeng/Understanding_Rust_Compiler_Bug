{"sha": "838325726a05855f10fbb6b3dc7165a7d8dde7b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzODMyNTcyNmEwNTg1NWYxMGZiYjZiM2RjNzE2NWE3ZDhkZGU3Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-07T00:33:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-07T00:33:47Z"}, "message": "Auto merge of #76422 - Dylan-DPC:rollup-0579ucb, r=Dylan-DPC\n\nRollup of 18 pull requests\n\nSuccessful merges:\n\n - #76273 (Move some Vec UI tests into alloc unit tests)\n - #76274 (Allow try blocks as the argument to return expressions)\n - #76287 (Remove an unnecessary allowed lint)\n - #76293 (Implementation of incompatible features error)\n - #76299 (Make `Ipv4Addr` and `Ipv6Addr` const tests unit tests under `library`)\n - #76302 (Address review comments on `Peekable::next_if`)\n - #76303 (Link to `#capacity-and-reallocation` when using with_capacity)\n - #76305 (Move various ui const tests to `library`)\n - #76309 (Indent a note to make folding work nicer)\n - #76312 (time.rs: Make spelling of \"Darwin\" consistent)\n - #76318 (Use ops::ControlFlow in rustc_data_structures::graph::iterate)\n - #76324 (Move Vec slice UI tests in library)\n - #76338 (add some intra-doc links to `Iterator`)\n - #76340 (Remove unused duplicated `trivial_dropck_outlives`)\n - #76344 (Improve docs for `std::env::args()`)\n - #76346 (Docs: nlink example typo)\n - #76358 (Minor grammar fix in doc comment for soft-deprecated methods)\n - #76364 (Disable atomics on avr target.)\n\nFailed merges:\n\n - #76304 (Make delegation methods of `std::net::IpAddr` unstably const)\n\nr? @ghost", "tree": {"sha": "9420a0b381b8351eb92b86cc8fc05fd52566f22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9420a0b381b8351eb92b86cc8fc05fd52566f22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/838325726a05855f10fbb6b3dc7165a7d8dde7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/838325726a05855f10fbb6b3dc7165a7d8dde7b9", "html_url": "https://github.com/rust-lang/rust/commit/838325726a05855f10fbb6b3dc7165a7d8dde7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/838325726a05855f10fbb6b3dc7165a7d8dde7b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf4d6cca4905841b788729b7e6a44eefb8725812", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4d6cca4905841b788729b7e6a44eefb8725812", "html_url": "https://github.com/rust-lang/rust/commit/bf4d6cca4905841b788729b7e6a44eefb8725812"}, {"sha": "23f8dd19ff45da374323f0132567319b832c044e", "url": "https://api.github.com/repos/rust-lang/rust/commits/23f8dd19ff45da374323f0132567319b832c044e", "html_url": "https://github.com/rust-lang/rust/commit/23f8dd19ff45da374323f0132567319b832c044e"}], "stats": {"total": 825, "additions": 408, "deletions": 417}, "files": [{"sha": "09c0983bb9d1aa0c1b96d4b442ce31b1f206855f", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -173,6 +173,7 @@ pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {\n             kw::Move,\n             kw::Return,\n             kw::True,\n+            kw::Try,\n             kw::Unsafe,\n             kw::While,\n             kw::Yield,"}, {"sha": "97e6b363eff60b05fda6856f2178c89dfd7fdd94", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -608,6 +608,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     maybe_stage_features(sess, krate);\n+    check_incompatible_features(sess);\n     let mut visitor = PostExpansionVisitor { sess, features: &sess.features_untracked() };\n \n     let spans = sess.parse_sess.gated_spans.spans.borrow();\n@@ -677,3 +678,36 @@ fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {\n         }\n     }\n }\n+\n+fn check_incompatible_features(sess: &Session) {\n+    let features = sess.features_untracked();\n+\n+    let declared_features = features\n+        .declared_lang_features\n+        .iter()\n+        .copied()\n+        .map(|(name, span, _)| (name, span))\n+        .chain(features.declared_lib_features.iter().copied());\n+\n+    for (f1, f2) in rustc_feature::INCOMPATIBLE_FEATURES\n+        .iter()\n+        .filter(|&&(f1, f2)| features.enabled(f1) && features.enabled(f2))\n+    {\n+        if let Some((f1_name, f1_span)) = declared_features.clone().find(|(name, _)| name == f1) {\n+            if let Some((f2_name, f2_span)) = declared_features.clone().find(|(name, _)| name == f2)\n+            {\n+                let spans = vec![f1_span, f2_span];\n+                sess.struct_span_err(\n+                    spans.clone(),\n+                    &format!(\n+                        \"features `{}` and `{}` are incompatible, using them at the same time \\\n+                        is not allowed\",\n+                        f1_name, f2_name\n+                    ),\n+                )\n+                .help(\"remove one of these features\")\n+                .emit();\n+            }\n+        }\n+    }\n+}"}, {"sha": "bc3d1ce53bac5d2ebaf840513f36cf142e836c41", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -87,11 +87,8 @@ where\n }\n \n /// Allows searches to terminate early with a value.\n-#[derive(Clone, Copy, Debug)]\n-pub enum ControlFlow<T> {\n-    Break(T),\n-    Continue,\n-}\n+// FIXME (#75744): remove the alias once the generics are in a better order and `C=()`.\n+pub type ControlFlow<T> = std::ops::ControlFlow<(), T>;\n \n /// The status of a node in the depth-first search.\n ///\n@@ -260,12 +257,12 @@ where\n         _node: G::Node,\n         _prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     /// Called after all nodes reachable from this one have been examined.\n     fn node_settled(&mut self, _node: G::Node) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     /// Behave as if no edges exist from `source` to `target`.\n@@ -289,8 +286,8 @@ where\n         prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n         match prior_status {\n-            Some(NodeStatus::Visited) => ControlFlow::Break(()),\n-            _ => ControlFlow::Continue,\n+            Some(NodeStatus::Visited) => ControlFlow::BREAK,\n+            _ => ControlFlow::CONTINUE,\n         }\n     }\n }"}, {"sha": "88c160e93b66a618eed378141e8314f18aaa7ee7", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -8,6 +8,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![allow(incomplete_features)]\n+#![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n #![feature(unboxed_closures)]\n #![feature(generators)]"}, {"sha": "3d7b3da45ccb948bf718feb2f49d287559dc7d99", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -605,3 +605,8 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::lazy_normalization_consts,\n     sym::specialization,\n ];\n+\n+/// Some features are not allowed to be used together at the same time, if\n+/// the two are present, produce an error\n+pub const INCOMPATIBLE_FEATURES: &[(Symbol, Symbol)] =\n+    &[(sym::const_generics, sym::min_const_generics)];"}, {"sha": "15564a59658cb24c46f3ba8794b6a198229d40b2", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -131,7 +131,7 @@ pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU3\n }\n \n pub use accepted::ACCEPTED_FEATURES;\n-pub use active::{Features, ACTIVE_FEATURES, INCOMPLETE_FEATURES};\n+pub use active::{Features, ACTIVE_FEATURES, INCOMPATIBLE_FEATURES, INCOMPLETE_FEATURES};\n pub use builtin_attrs::{\n     deprecated_attributes, find_gated_cfg, is_builtin_attr_name, AttributeGate, AttributeTemplate,\n     AttributeType, BuiltinAttribute, GatedCfg, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,"}, {"sha": "f9cadb3bb2dbc03948e2c413a13c103d5e3abe0d", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -190,74 +190,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n     }\n }\n \n-/// This returns true if the type `ty` is \"trivial\" for\n-/// dropck-outlives -- that is, if it doesn't require any types to\n-/// outlive. This is similar but not *quite* the same as the\n-/// `needs_drop` test in the compiler already -- that is, for every\n-/// type T for which this function return true, needs-drop would\n-/// return `false`. But the reverse does not hold: in particular,\n-/// `needs_drop` returns false for `PhantomData`, but it is not\n-/// trivial for dropck-outlives.\n-///\n-/// Note also that `needs_drop` requires a \"global\" type (i.e., one\n-/// with erased regions), but this function does not.\n-pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        // None of these types have a destructor and hence they do not\n-        // require anything in particular to outlive the dtor's\n-        // execution.\n-        ty::Infer(ty::FreshIntTy(_))\n-        | ty::Infer(ty::FreshFloatTy(_))\n-        | ty::Bool\n-        | ty::Int(_)\n-        | ty::Uint(_)\n-        | ty::Float(_)\n-        | ty::Never\n-        | ty::FnDef(..)\n-        | ty::FnPtr(_)\n-        | ty::Char\n-        | ty::GeneratorWitness(..)\n-        | ty::RawPtr(_)\n-        | ty::Ref(..)\n-        | ty::Str\n-        | ty::Foreign(..)\n-        | ty::Error(_) => true,\n-\n-        // [T; N] and [T] have same properties as T.\n-        ty::Array(ty, _) | ty::Slice(ty) => trivial_dropck_outlives(tcx, ty),\n-\n-        // (T1..Tn) and closures have same properties as T1..Tn --\n-        // check if *any* of those are trivial.\n-        ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n-        ty::Closure(_, ref substs) => {\n-            substs.as_closure().upvar_tys().all(|t| trivial_dropck_outlives(tcx, t))\n-        }\n-\n-        ty::Adt(def, _) => {\n-            if Some(def.did) == tcx.lang_items().manually_drop() {\n-                // `ManuallyDrop` never has a dtor.\n-                true\n-            } else {\n-                // Other types might. Moreover, PhantomData doesn't\n-                // have a dtor, but it is considered to own its\n-                // content, so it is non-trivial. Unions can have `impl Drop`,\n-                // and hence are non-trivial as well.\n-                false\n-            }\n-        }\n-\n-        // The following *might* require a destructor: needs deeper inspection.\n-        ty::Dynamic(..)\n-        | ty::Projection(..)\n-        | ty::Param(_)\n-        | ty::Opaque(..)\n-        | ty::Placeholder(..)\n-        | ty::Infer(_)\n-        | ty::Bound(..)\n-        | ty::Generator(..) => false,\n-    }\n-}\n-\n #[derive(Debug, HashStable)]\n pub struct CandidateStep<'tcx> {\n     pub self_ty: Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,"}, {"sha": "e55180ff4be526bef3c2950a5c87b5477bdb09d2", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -6,6 +6,7 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n+#![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![feature(or_patterns)]"}, {"sha": "a8d7c612a8419c4ba515895ef6604b7bfa064922", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -117,7 +117,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             // A diverging InlineAsm is treated as non-recursing\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if destination.is_some() {\n-                    ControlFlow::Continue\n+                    ControlFlow::CONTINUE\n                 } else {\n                     ControlFlow::Break(NonRecursive)\n                 }\n@@ -131,7 +131,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }\n-            | TerminatorKind::SwitchInt { .. } => ControlFlow::Continue,\n+            | TerminatorKind::SwitchInt { .. } => ControlFlow::CONTINUE,\n         }\n     }\n \n@@ -144,7 +144,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             }\n         }\n \n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {"}, {"sha": "527a322d56a4fd1f8b5d708650f2ecd0e9e5f475", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -45,6 +45,8 @@ pub fn target(target_cpu: String) -> TargetResult {\n             late_link_args: vec![(LinkerFlavor::Gcc, vec![\"-lgcc\".to_owned()])]\n                 .into_iter()\n                 .collect(),\n+            max_atomic_width: Some(0),\n+            atomic_cas: false,\n             ..TargetOptions::default()\n         },\n     })"}, {"sha": "eba7ffae22c4c90dccc855239ab7a684b0a57a45", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -120,6 +120,9 @@ use crate::raw_vec::RawVec;\n /// assert_eq!(vec, [0, 0, 0, 0, 0]);\n /// ```\n ///\n+/// For more information, see\n+/// [Capacity and Reallocation](#capacity-and-reallocation).\n+///\n /// Use a `Vec<T>` as an efficient stack:\n ///\n /// ```"}, {"sha": "57976aa6cdfdfee288d90fc2afe91ae16109f30e", "filename": "library/alloc/tests/borrow.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Ftests%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Ftests%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fborrow.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -45,3 +45,16 @@ fn test_from_cow_path() {\n     let path = Path::new(\"hello\");\n     test_from_cow!(path: &Path);\n }\n+\n+#[test]\n+fn cow_const() {\n+    // test that the methods of `Cow` are usable in a const context\n+\n+    const COW: Cow<'_, str> = Cow::Borrowed(\"moo\");\n+\n+    const IS_BORROWED: bool = COW.is_borrowed();\n+    assert!(IS_BORROWED);\n+\n+    const IS_OWNED: bool = COW.is_owned();\n+    assert!(!IS_OWNED);\n+}"}, {"sha": "590639d983481bdc0b3f0518ff820941d5fbf0cc", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -1,5 +1,6 @@\n #![feature(allocator_api)]\n #![feature(box_syntax)]\n+#![feature(cow_is_borrowed)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(new_uninit)]"}, {"sha": "53b0d0a2718445328ee7f3605f4ab695130e66fe", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -74,6 +74,42 @@ fn test_zst_capacity() {\n     assert_eq!(Vec::<()>::new().capacity(), usize::MAX);\n }\n \n+#[test]\n+fn test_indexing() {\n+    let v: Vec<isize> = vec![10, 20];\n+    assert_eq!(v[0], 10);\n+    assert_eq!(v[1], 20);\n+    let mut x: usize = 0;\n+    assert_eq!(v[x], 10);\n+    assert_eq!(v[x + 1], 20);\n+    x = x + 1;\n+    assert_eq!(v[x], 20);\n+    assert_eq!(v[x - 1], 10);\n+}\n+\n+#[test]\n+fn test_debug_fmt() {\n+    let vec1: Vec<isize> = vec![];\n+    assert_eq!(\"[]\", format!(\"{:?}\", vec1));\n+\n+    let vec2 = vec![0, 1];\n+    assert_eq!(\"[0, 1]\", format!(\"{:?}\", vec2));\n+\n+    let slice: &[isize] = &[4, 5];\n+    assert_eq!(\"[4, 5]\", format!(\"{:?}\", slice));\n+}\n+\n+#[test]\n+fn test_push() {\n+    let mut v = vec![];\n+    v.push(1);\n+    assert_eq!(v, [1]);\n+    v.push(2);\n+    assert_eq!(v, [1, 2]);\n+    v.push(3);\n+    assert_eq!(v, [1, 2, 3]);\n+}\n+\n #[test]\n fn test_extend() {\n     let mut v = Vec::new();\n@@ -119,6 +155,18 @@ fn test_extend() {\n     assert_eq!(count_x, 1);\n }\n \n+#[test]\n+fn test_extend_from_slice() {\n+    let a: Vec<isize> = vec![1, 2, 3, 4, 5];\n+    let b: Vec<isize> = vec![6, 7, 8, 9, 0];\n+\n+    let mut v: Vec<isize> = a;\n+\n+    v.extend_from_slice(&b);\n+\n+    assert_eq!(v, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n+}\n+\n #[test]\n fn test_extend_ref() {\n     let mut v = vec![1, 2];\n@@ -134,6 +182,14 @@ fn test_extend_ref() {\n     assert_eq!(v, [1, 2, 3, 4, 5, 6, 7]);\n }\n \n+#[test]\n+fn test_slice_from_ref() {\n+    let values = vec![1, 2, 3, 4, 5];\n+    let slice = &values[1..3];\n+\n+    assert_eq!(slice, [2, 3]);\n+}\n+\n #[test]\n fn test_slice_from_mut() {\n     let mut values = vec![1, 2, 3, 4, 5];\n@@ -345,6 +401,29 @@ fn test_zip_unzip() {\n     assert_eq!((3, 6), (left[2], right[2]));\n }\n \n+#[test]\n+fn test_cmp() {\n+    let x: &[isize] = &[1, 2, 3, 4, 5];\n+    let cmp: &[isize] = &[1, 2, 3, 4, 5];\n+    assert_eq!(&x[..], cmp);\n+    let cmp: &[isize] = &[3, 4, 5];\n+    assert_eq!(&x[2..], cmp);\n+    let cmp: &[isize] = &[1, 2, 3];\n+    assert_eq!(&x[..3], cmp);\n+    let cmp: &[isize] = &[2, 3, 4];\n+    assert_eq!(&x[1..4], cmp);\n+\n+    let x: Vec<isize> = vec![1, 2, 3, 4, 5];\n+    let cmp: &[isize] = &[1, 2, 3, 4, 5];\n+    assert_eq!(&x[..], cmp);\n+    let cmp: &[isize] = &[3, 4, 5];\n+    assert_eq!(&x[2..], cmp);\n+    let cmp: &[isize] = &[1, 2, 3];\n+    assert_eq!(&x[..3], cmp);\n+    let cmp: &[isize] = &[2, 3, 4];\n+    assert_eq!(&x[1..4], cmp);\n+}\n+\n #[test]\n fn test_vec_truncate_drop() {\n     static mut DROPS: u32 = 0;"}, {"sha": "b411222856edbf2fa795fd0e2cd3300163095b82", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -1273,7 +1273,7 @@ where\n         ) -> impl FnMut((), T) -> ControlFlow<(), B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::Continue(()),\n+                None => ControlFlow::CONTINUE,\n             }\n         }\n \n@@ -1772,7 +1772,7 @@ impl<I: Iterator> Peekable<I> {\n         self.peeked.get_or_insert_with(|| iter.next()).as_ref()\n     }\n \n-    /// Consume the next value of this iterator if a condition is true.\n+    /// Consume and return the next value of this iterator if a condition is true.\n     ///\n     /// If `func` returns `true` for the next value of this iterator, consume and return it.\n     /// Otherwise, return `None`.\n@@ -1812,7 +1812,7 @@ impl<I: Iterator> Peekable<I> {\n         }\n     }\n \n-    /// Consume the next item if it is equal to `expected`.\n+    /// Consume and return the next item if it is equal to `expected`.\n     ///\n     /// # Example\n     /// Consume a number if it's equal to 0.\n@@ -1827,10 +1827,10 @@ impl<I: Iterator> Peekable<I> {\n     /// assert_eq!(iter.next(), Some(1));\n     /// ```\n     #[unstable(feature = \"peekable_next_if\", issue = \"72480\")]\n-    pub fn next_if_eq<R>(&mut self, expected: &R) -> Option<I::Item>\n+    pub fn next_if_eq<T>(&mut self, expected: &T) -> Option<I::Item>\n     where\n-        R: ?Sized,\n-        I::Item: PartialEq<R>,\n+        T: ?Sized,\n+        I::Item: PartialEq<T>,\n     {\n         self.next_if(|next| next == expected)\n     }"}, {"sha": "a025bc8b56049c5ef0f8a02585e46d176ad0ab08", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -310,7 +310,7 @@ pub trait DoubleEndedIterator: Iterator {\n             mut predicate: impl FnMut(&T) -> bool,\n         ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n         }\n "}, {"sha": "b8a09f822b6da3ff1578fc26fdea26251c66cf56", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -809,7 +809,7 @@ pub trait Iterator {\n         Enumerate::new(self)\n     }\n \n-    /// Creates an iterator which can use `peek` to look at the next element of\n+    /// Creates an iterator which can use [`peek`] to look at the next element of\n     /// the iterator without consuming it.\n     ///\n     /// Adds a [`peek`] method to an iterator. See its documentation for\n@@ -1992,7 +1992,7 @@ pub trait Iterator {\n \n     /// The same as [`fold()`], but uses the first element in the\n     /// iterator as the initial value, folding every subsequent element into it.\n-    /// If the iterator is empty, return `None`; otherwise, return the result\n+    /// If the iterator is empty, return [`None`]; otherwise, return the result\n     /// of the fold.\n     ///\n     /// [`fold()`]: Iterator::fold\n@@ -2076,10 +2076,10 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n+                if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n             }\n         }\n-        self.try_fold((), check(f)) == ControlFlow::Continue(())\n+        self.try_fold((), check(f)) == ControlFlow::CONTINUE\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -2129,11 +2129,11 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<(), ()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::Break(()) } else { ControlFlow::Continue(()) }\n+                if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n             }\n         }\n \n-        self.try_fold((), check(f)) == ControlFlow::Break(())\n+        self.try_fold((), check(f)) == ControlFlow::BREAK\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -2191,7 +2191,7 @@ pub trait Iterator {\n             mut predicate: impl FnMut(&T) -> bool,\n         ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n         }\n \n@@ -2226,7 +2226,7 @@ pub trait Iterator {\n         ) -> impl FnMut((), T) -> ControlFlow<(), B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::Continue(()),\n+                None => ControlFlow::CONTINUE,\n             }\n         }\n \n@@ -2268,7 +2268,7 @@ pub trait Iterator {\n             R: Try<Ok = bool>,\n         {\n             move |(), x| match f(&x).into_result() {\n-                Ok(false) => ControlFlow::Continue(()),\n+                Ok(false) => ControlFlow::CONTINUE,\n                 Ok(true) => ControlFlow::Break(Ok(x)),\n                 Err(x) => ControlFlow::Break(Err(x)),\n             }\n@@ -2821,7 +2821,7 @@ pub trait Iterator {\n         Product::product(self)\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2843,7 +2843,7 @@ pub trait Iterator {\n         self.cmp_by(other, |x, y| x.cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2895,7 +2895,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2919,7 +2919,7 @@ pub trait Iterator {\n         self.partial_cmp_by(other, |x, y| x.partial_cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2980,7 +2980,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Determines if the elements of this `Iterator` are equal to those of\n+    /// Determines if the elements of this [`Iterator`] are equal to those of\n     /// another.\n     ///\n     /// # Examples\n@@ -2999,7 +2999,7 @@ pub trait Iterator {\n         self.eq_by(other, |x, y| x == y)\n     }\n \n-    /// Determines if the elements of this `Iterator` are equal to those of\n+    /// Determines if the elements of this [`Iterator`] are equal to those of\n     /// another with respect to the specified equality function.\n     ///\n     /// # Examples\n@@ -3040,7 +3040,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Determines if the elements of this `Iterator` are unequal to those of\n+    /// Determines if the elements of this [`Iterator`] are unequal to those of\n     /// another.\n     ///\n     /// # Examples\n@@ -3059,7 +3059,7 @@ pub trait Iterator {\n         !self.eq(other)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// less than those of another.\n     ///\n     /// # Examples\n@@ -3080,7 +3080,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Less)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// less or equal to those of another.\n     ///\n     /// # Examples\n@@ -3101,7 +3101,7 @@ pub trait Iterator {\n         matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// greater than those of another.\n     ///\n     /// # Examples\n@@ -3122,7 +3122,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Greater)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// greater than or equal to those of another.\n     ///\n     /// # Examples"}, {"sha": "757ad5252bab3221bc2f6e5016c8880219f8913b", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -2470,7 +2470,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n         doc_comment! {\n             concat!(\"**This method is soft-deprecated.**\n \n-Although using it won\u2019t cause compilation warning,\n+Although using it won\u2019t cause a compilation warning,\n new code should use [`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN) instead.\n \n Returns the smallest value that can be represented by this integer type.\"),\n@@ -2486,7 +2486,7 @@ Returns the smallest value that can be represented by this integer type.\"),\n         doc_comment! {\n             concat!(\"**This method is soft-deprecated.**\n \n-Although using it won\u2019t cause compilation warning,\n+Although using it won\u2019t cause a compilation warning,\n new code should use [`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX) instead.\n \n Returns the largest value that can be represented by this integer type.\"),"}, {"sha": "b0c7dc1a518758b70df7ac8a3f6263e194c8887c", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -65,3 +65,46 @@ impl<R: Try> ControlFlow<R::Ok, R> {\n         }\n     }\n }\n+\n+impl<B> ControlFlow<(), B> {\n+    /// It's frequently the case that there's no value needed with `Continue`,\n+    /// so this provides a way to avoid typing `(())`, if you prefer it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let mut partial_sum = 0;\n+    /// let last_used = (1..10).chain(20..25).try_for_each(|x| {\n+    ///     partial_sum += x;\n+    ///     if partial_sum > 100 { ControlFlow::Break(x) }\n+    ///     else { ControlFlow::CONTINUE }\n+    /// });\n+    /// assert_eq!(last_used.break_value(), Some(22));\n+    /// ```\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub const CONTINUE: Self = ControlFlow::Continue(());\n+}\n+\n+impl<C> ControlFlow<C, ()> {\n+    /// APIs like `try_for_each` don't need values with `Break`,\n+    /// so this provides a way to avoid typing `(())`, if you prefer it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let mut partial_sum = 0;\n+    /// (1..10).chain(20..25).try_for_each(|x| {\n+    ///     if partial_sum > 100 { ControlFlow::BREAK }\n+    ///     else { partial_sum += x; ControlFlow::CONTINUE }\n+    /// });\n+    /// assert_eq!(partial_sum, 108);\n+    /// ```\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub const BREAK: Self = ControlFlow::Break(());\n+}"}, {"sha": "aa9ad395b184010c01c68a76dcb85079f600c95a", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -66,7 +66,6 @@ impl<T> [T] {\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[allow(unused_attributes)]\n     #[allow_internal_unstable(const_fn_union)]\n     pub const fn len(&self) -> usize {\n         // SAFETY: this is safe because `&[T]` and `FatPtr<T>` have the same layout.\n@@ -3358,8 +3357,9 @@ mod private_slice_index {\n     on(T = \"str\", label = \"string indices are ranges of `usize`\",),\n     on(\n         all(any(T = \"str\", T = \"&str\", T = \"std::string::String\"), _Self = \"{integer}\"),\n-        note = \"you can use `.chars().nth()` or `.bytes().nth()`\n-see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n+        note = \"you can use `.chars().nth()` or `.bytes().nth()`\\n\\\n+                for more information, see chapter 8 in The Book: \\\n+                <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n     ),\n     message = \"the type `{T}` cannot be indexed by `{Self}`\",\n     label = \"slice indices are of type `usize` or ranges of `usize`\""}, {"sha": "3244bbc2d670ddc00f7f9aefe14b3ef543f3b44c", "filename": "library/core/tests/ascii.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fascii.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -397,3 +397,14 @@ fn test_is_ascii_align_size_thoroughly() {\n         }\n     }\n }\n+\n+#[test]\n+fn ascii_const() {\n+    // test that the `is_ascii` methods of `char` and `u8` are usable in a const context\n+\n+    const CHAR_IS_ASCII: bool = 'a'.is_ascii();\n+    assert!(CHAR_IS_ASCII);\n+\n+    const BYTE_IS_ASCII: bool = 97u8.is_ascii();\n+    assert!(BYTE_IS_ASCII);\n+}"}, {"sha": "825e5e63b59bc84822cb0250c0c8406313331aef", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -195,3 +195,20 @@ fn test_nonzero_from_int_on_err() {\n     assert!(NonZeroI8::try_from(0).is_err());\n     assert!(NonZeroI32::try_from(0).is_err());\n }\n+\n+#[test]\n+fn nonzero_const() {\n+    // test that the methods of `NonZeroX>` are usable in a const context\n+    // Note: only tests NonZero8\n+\n+    const NONZERO: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };\n+\n+    const GET: u8 = NONZERO.get();\n+    assert_eq!(GET, 5);\n+\n+    const ZERO: Option<NonZeroU8> = NonZeroU8::new(0);\n+    assert!(ZERO.is_none());\n+\n+    const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n+    assert!(ONE.is_some());\n+}"}, {"sha": "b0fceb9b2f669731fe6294d1682885b05be54ecd", "filename": "library/std/src/env.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -695,21 +695,21 @@ pub struct ArgsOs {\n     inner: sys::args::Args,\n }\n \n-/// Returns the arguments which this program was started with (normally passed\n+/// Returns the arguments that this program was started with (normally passed\n /// via the command line).\n ///\n /// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property should\n /// not be relied upon for security purposes.\n ///\n-/// On Unix systems shell usually expands unquoted arguments with glob patterns\n+/// On Unix systems the shell usually expands unquoted arguments with glob patterns\n /// (such as `*` and `?`). On Windows this is not done, and such arguments are\n /// passed as-is.\n ///\n-/// On glibc Linux systems, arguments are retrieved by placing a function in \".init_array\".\n-/// Glibc passes argc, argv, and envp to functions in \".init_array\", as a non-standard extension.\n-/// This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS\n-/// and Windows.\n+/// On glibc Linux systems, arguments are retrieved by placing a function in `.init_array`.\n+/// Glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard\n+/// extension. This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it\n+/// does on macOS and Windows.\n ///\n /// # Panics\n ///"}, {"sha": "76a0ae8b9454dfff7576247c997049f8f92c22e8", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -809,3 +809,112 @@ fn is_v6() {\n     assert!(!ip.is_ipv4());\n     assert!(ip.is_ipv6());\n }\n+\n+#[test]\n+fn ipv4_const() {\n+    // test that the methods of `Ipv4Addr` are usable in a const context\n+\n+    const IP_ADDRESS: Ipv4Addr = Ipv4Addr::new(127, 0, 0, 1);\n+    assert_eq!(IP_ADDRESS, Ipv4Addr::LOCALHOST);\n+\n+    const OCTETS: [u8; 4] = IP_ADDRESS.octets();\n+    assert_eq!(OCTETS, [127, 0, 0, 1]);\n+\n+    const IS_UNSPECIFIED: bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK: bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_PRIVATE: bool = IP_ADDRESS.is_private();\n+    assert!(!IS_PRIVATE);\n+\n+    const IS_LINK_LOCAL: bool = IP_ADDRESS.is_link_local();\n+    assert!(!IS_LINK_LOCAL);\n+\n+    const IS_GLOBAL: bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_SHARED: bool = IP_ADDRESS.is_shared();\n+    assert!(!IS_SHARED);\n+\n+    const IS_IETF_PROTOCOL_ASSIGNMENT: bool = IP_ADDRESS.is_ietf_protocol_assignment();\n+    assert!(!IS_IETF_PROTOCOL_ASSIGNMENT);\n+\n+    const IS_BENCHMARKING: bool = IP_ADDRESS.is_benchmarking();\n+    assert!(!IS_BENCHMARKING);\n+\n+    const IS_RESERVED: bool = IP_ADDRESS.is_reserved();\n+    assert!(!IS_RESERVED);\n+\n+    const IS_MULTICAST: bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+\n+    const IS_BROADCAST: bool = IP_ADDRESS.is_broadcast();\n+    assert!(!IS_BROADCAST);\n+\n+    const IS_DOCUMENTATION: bool = IP_ADDRESS.is_documentation();\n+    assert!(!IS_DOCUMENTATION);\n+\n+    const IP_V6_COMPATIBLE: Ipv6Addr = IP_ADDRESS.to_ipv6_compatible();\n+    assert_eq!(\n+        IP_V6_COMPATIBLE,\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 1])\n+    );\n+\n+    const IP_V6_MAPPED: Ipv6Addr = IP_ADDRESS.to_ipv6_mapped();\n+    assert_eq!(\n+        IP_V6_MAPPED,\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 127, 0, 0, 1])\n+    );\n+}\n+\n+#[test]\n+fn ipv6_const() {\n+    // test that the methods of `Ipv6Addr` are usable in a const context\n+\n+    const IP_ADDRESS: Ipv6Addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n+    assert_eq!(IP_ADDRESS, Ipv6Addr::LOCALHOST);\n+\n+    const SEGMENTS: [u16; 8] = IP_ADDRESS.segments();\n+    assert_eq!(SEGMENTS, [0, 0, 0, 0, 0, 0, 0, 1]);\n+\n+    const OCTETS: [u8; 16] = IP_ADDRESS.octets();\n+    assert_eq!(OCTETS, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);\n+\n+    const IS_UNSPECIFIED: bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK: bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_GLOBAL: bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_UNIQUE_LOCAL: bool = IP_ADDRESS.is_unique_local();\n+    assert!(!IS_UNIQUE_LOCAL);\n+\n+    const IS_UNICAST_LINK_LOCAL_STRICT: bool = IP_ADDRESS.is_unicast_link_local_strict();\n+    assert!(!IS_UNICAST_LINK_LOCAL_STRICT);\n+\n+    const IS_UNICAST_LINK_LOCAL: bool = IP_ADDRESS.is_unicast_link_local();\n+    assert!(!IS_UNICAST_LINK_LOCAL);\n+\n+    const IS_UNICAST_SITE_LOCAL: bool = IP_ADDRESS.is_unicast_site_local();\n+    assert!(!IS_UNICAST_SITE_LOCAL);\n+\n+    const IS_DOCUMENTATION: bool = IP_ADDRESS.is_documentation();\n+    assert!(!IS_DOCUMENTATION);\n+\n+    const IS_UNICAST_GLOBAL: bool = IP_ADDRESS.is_unicast_global();\n+    assert!(!IS_UNICAST_GLOBAL);\n+\n+    const MULTICAST_SCOPE: Option<Ipv6MulticastScope> = IP_ADDRESS.multicast_scope();\n+    assert_eq!(MULTICAST_SCOPE, None);\n+\n+    const IS_MULTICAST: bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+\n+    const IP_V4: Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n+    assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n+}"}, {"sha": "83e8853fe79230a74ab94410c29251b7f83d32c4", "filename": "library/std/src/os/raw/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -9,7 +9,6 @@\n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n #[cfg(test)]\n-#[allow(unused_imports)]\n mod tests;\n \n #[doc(include = \"char.md\")]"}, {"sha": "e7bb7d7e73e80eb6eae12eabd1d5d545432d4fe4", "filename": "library/std/src/os/raw/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ftests.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -1,5 +1,4 @@\n use crate::any::TypeId;\n-use crate::mem;\n \n macro_rules! ok {\n     ($($t:ident)*) => {$("}, {"sha": "487ac266ee9cdbc71547f0f6f922a8b5760de475", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -428,7 +428,7 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n-    ///  use std::io;\n+    /// use std::io;\n     ///\n     /// fn main() -> io::Result<()> {\n     ///     let meta = fs::metadata(\"some_file\")?;"}, {"sha": "9b4c64bdb6d84daaefde02a8edc10608c4391205", "filename": "library/std/src/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -427,7 +427,7 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n-    ///  use std::io;\n+    /// use std::io;\n     ///\n     /// fn main() -> io::Result<()> {\n     ///     let meta = fs::metadata(\"some_file\")?;"}, {"sha": "575882eb459fcc3a4af0ef285d81d3958578f005", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -159,7 +159,7 @@ pub struct Instant(time::Instant);\n /// | CloudABI  | [clock_time_get (Realtime Clock)]                                    |\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n /// | UNIX      | [clock_gettime (Realtime Clock)]                                     |\n-/// | DARWIN    | [gettimeofday]                                                       |\n+/// | Darwin    | [gettimeofday]                                                       |\n /// | VXWorks   | [clock_gettime (Realtime Clock)]                                     |\n /// | WASI      | [__wasi_clock_time_get (Realtime Clock)]                             |\n /// | Windows   | [GetSystemTimePreciseAsFileTime] / [GetSystemTimeAsFileTime]         |"}, {"sha": "01733f48234f9684f35e31dfbf92f60bad225a16", "filename": "src/test/ui/array-slice-vec/slice-2.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-2.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,62 +0,0 @@\n-// run-pass\n-\n-// Test slicing expressions on slices and Vecs.\n-\n-\n-fn main() {\n-    let x: &[isize] = &[1, 2, 3, 4, 5];\n-    let cmp: &[isize] = &[1, 2, 3, 4, 5];\n-    assert_eq!(&x[..], cmp);\n-    let cmp: &[isize] = &[3, 4, 5];\n-    assert_eq!(&x[2..], cmp);\n-    let cmp: &[isize] = &[1, 2, 3];\n-    assert_eq!(&x[..3], cmp);\n-    let cmp: &[isize] = &[2, 3, 4];\n-    assert_eq!(&x[1..4], cmp);\n-\n-    let x: Vec<isize> = vec![1, 2, 3, 4, 5];\n-    let cmp: &[isize] = &[1, 2, 3, 4, 5];\n-    assert_eq!(&x[..], cmp);\n-    let cmp: &[isize] = &[3, 4, 5];\n-    assert_eq!(&x[2..], cmp);\n-    let cmp: &[isize] = &[1, 2, 3];\n-    assert_eq!(&x[..3], cmp);\n-    let cmp: &[isize] = &[2, 3, 4];\n-    assert_eq!(&x[1..4], cmp);\n-\n-    let x: &mut [isize] = &mut [1, 2, 3, 4, 5];\n-    {\n-        let cmp: &mut [isize] = &mut [1, 2, 3, 4, 5];\n-        assert_eq!(&mut x[..], cmp);\n-    }\n-    {\n-        let cmp: &mut [isize] = &mut [3, 4, 5];\n-        assert_eq!(&mut x[2..], cmp);\n-    }\n-    {\n-        let cmp: &mut [isize] = &mut [1, 2, 3];\n-        assert_eq!(&mut x[..3], cmp);\n-    }\n-    {\n-        let cmp: &mut [isize] = &mut [2, 3, 4];\n-        assert_eq!(&mut x[1..4], cmp);\n-    }\n-\n-    let mut x: Vec<isize> = vec![1, 2, 3, 4, 5];\n-    {\n-        let cmp: &mut [isize] = &mut [1, 2, 3, 4, 5];\n-        assert_eq!(&mut x[..], cmp);\n-    }\n-    {\n-        let cmp: &mut [isize] = &mut [3, 4, 5];\n-        assert_eq!(&mut x[2..], cmp);\n-    }\n-    {\n-        let cmp: &mut [isize] = &mut [1, 2, 3];\n-        assert_eq!(&mut x[..3], cmp);\n-    }\n-    {\n-        let cmp: &mut [isize] = &mut [2, 3, 4];\n-        assert_eq!(&mut x[1..4], cmp);\n-    }\n-}"}, {"sha": "1f493679b794737a92d5fb4260a49bc23d6d1b02", "filename": "src/test/ui/array-slice-vec/vec-concat.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-concat.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,14 +0,0 @@\n-// run-pass\n-\n-use std::vec;\n-\n-pub fn main() {\n-    let a: Vec<isize> = vec![1, 2, 3, 4, 5];\n-    let b: Vec<isize> = vec![6, 7, 8, 9, 0];\n-    let mut v: Vec<isize> = a;\n-    v.extend_from_slice(&b);\n-    println!(\"{}\", v[9]);\n-    assert_eq!(v[0], 1);\n-    assert_eq!(v[7], 8);\n-    assert_eq!(v[9], 0);\n-}"}, {"sha": "b09f08bb85a8245598bcae711645c49808922249", "filename": "src/test/ui/array-slice-vec/vec-growth.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-growth.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,16 +0,0 @@\n-// run-pass\n-\n-\n-\n-pub fn main() {\n-    let mut v = vec![1];\n-    v.push(2);\n-    v.push(3);\n-    v.push(4);\n-    v.push(5);\n-    assert_eq!(v[0], 1);\n-    assert_eq!(v[1], 2);\n-    assert_eq!(v[2], 3);\n-    assert_eq!(v[3], 4);\n-    assert_eq!(v[4], 5);\n-}"}, {"sha": "466ab3fab1cab253fea4e2e95389e1c741354005", "filename": "src/test/ui/array-slice-vec/vec-push.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-push.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,3 +0,0 @@\n-// run-pass\n-\n-pub fn main() { let mut v = vec![1, 2, 3]; v.push(1); }"}, {"sha": "1f090ddd9c97dfb50731df3d5875c43fde183a06", "filename": "src/test/ui/array-slice-vec/vec-slice.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-slice.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,9 +0,0 @@\n-// run-pass\n-\n-\n-pub fn main() {\n-    let  v = vec![1,2,3,4,5];\n-    let v2 = &v[1..3];\n-    assert_eq!(v2[0], 2);\n-    assert_eq!(v2[1], 3);\n-}"}, {"sha": "a11cfc8e9b5c93404246380858363dad405ba8ba", "filename": "src/test/ui/array-slice-vec/vec-to_str.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-to_str.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,12 +0,0 @@\n-// run-pass\n-\n-\n-pub fn main() {\n-    assert_eq!(format!(\"{:?}\", vec![0, 1]), \"[0, 1]\".to_string());\n-\n-    let foo = vec![3, 4];\n-    let bar: &[isize] = &[4, 5];\n-\n-    assert_eq!(format!(\"{:?}\", foo), \"[3, 4]\");\n-    assert_eq!(format!(\"{:?}\", bar), \"[4, 5]\");\n-}"}, {"sha": "e76c1ab440e6edc4a627fb89d9e2a76403fc6c5e", "filename": "src/test/ui/array-slice-vec/vec.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-\n-\n-\n-pub fn main() {\n-    let v: Vec<isize> = vec![10, 20];\n-    assert_eq!(v[0], 10);\n-    assert_eq!(v[1], 20);\n-    let mut x: usize = 0;\n-    assert_eq!(v[x], 10);\n-    assert_eq!(v[x + 1], 20);\n-    x = x + 1;\n-    assert_eq!(v[x], 20);\n-    assert_eq!(v[x - 1], 10);\n-}"}, {"sha": "2365adc3a861f3103e453d220ee6b777638e348b", "filename": "src/test/ui/const-generics/min-and-full-same-time.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fconst-generics%2Fmin-and-full-same-time.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fconst-generics%2Fmin-and-full-same-time.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin-and-full-same-time.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -0,0 +1,7 @@\n+#![feature(const_generics)]\n+//~^ ERROR features `const_generics` and `min_const_generics` are incompatible\n+#![allow(incomplete_features)]\n+#![feature(min_const_generics)]\n+\n+\n+fn main() {}"}, {"sha": "907fec9bbe17a870aa5591e14ac7d7b01f594975", "filename": "src/test/ui/const-generics/min-and-full-same-time.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fconst-generics%2Fmin-and-full-same-time.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fconst-generics%2Fmin-and-full-same-time.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin-and-full-same-time.stderr?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -0,0 +1,13 @@\n+error: features `const_generics` and `min_const_generics` are incompatible, using them at the same time is not allowed\n+  --> $DIR/min-and-full-same-time.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+...\n+LL | #![feature(min_const_generics)]\n+   |            ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove one of these features\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf6f8c8d69a26b92ff4014eaf2812d1e7302ee84", "filename": "src/test/ui/consts/const-nonzero.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,16 +0,0 @@\n-// run-pass\n-\n-use std::num::NonZeroU8;\n-\n-const X: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };\n-const Y: u8 = X.get();\n-\n-const ZERO: Option<NonZeroU8> = NonZeroU8::new(0);\n-const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n-\n-fn main() {\n-    assert_eq!(Y, 5);\n-\n-    assert!(ZERO.is_none());\n-    assert_eq!(ONE.unwrap().get(), 1);\n-}"}, {"sha": "adebe20f5a25591df1f21b58a7dd7acec590e820", "filename": "src/test/ui/consts/cow-is-borrowed.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-\n-#![feature(cow_is_borrowed)]\n-\n-use std::borrow::Cow;\n-\n-fn main() {\n-    const COW: Cow<str> = Cow::Borrowed(\"moo\");\n-\n-    const IS_BORROWED: bool = COW.is_borrowed();\n-    assert!(IS_BORROWED);\n-\n-    const IS_OWNED: bool = COW.is_owned();\n-    assert!(!IS_OWNED);\n-}"}, {"sha": "d8424549f93e6b29f9bf61d68fa31e540ee7aa3d", "filename": "src/test/ui/consts/is_ascii.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-\n-static X: bool = 'a'.is_ascii();\n-static Y: bool = '\u00e4'.is_ascii();\n-\n-static BX: bool = b'a'.is_ascii();\n-static BY: bool = 192u8.is_ascii();\n-\n-fn main() {\n-    assert!(X);\n-    assert!(!Y);\n-\n-    assert!(BX);\n-    assert!(!BY);\n-}"}, {"sha": "8c676999ae734c1952b339ad6a99b9b6403368d9", "filename": "src/test/ui/consts/std/net/ipv4.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,58 +0,0 @@\n-// run-pass\n-\n-#![feature(ip)]\n-#![feature(const_ipv4)]\n-\n-use std::net::{Ipv4Addr, Ipv6Addr};\n-\n-fn main() {\n-    const IP_ADDRESS: Ipv4Addr = Ipv4Addr::new(127, 0, 0, 1);\n-    assert_eq!(IP_ADDRESS, Ipv4Addr::LOCALHOST);\n-\n-    const OCTETS: [u8; 4] = IP_ADDRESS.octets();\n-    assert_eq!(OCTETS, [127, 0, 0, 1]);\n-\n-    const IS_UNSPECIFIED : bool = IP_ADDRESS.is_unspecified();\n-    assert!(!IS_UNSPECIFIED);\n-\n-    const IS_LOOPBACK : bool = IP_ADDRESS.is_loopback();\n-    assert!(IS_LOOPBACK);\n-\n-    const IS_PRIVATE : bool = IP_ADDRESS.is_private();\n-    assert!(!IS_PRIVATE);\n-\n-    const IS_LINK_LOCAL : bool = IP_ADDRESS.is_link_local();\n-    assert!(!IS_LINK_LOCAL);\n-\n-    const IS_GLOBAL : bool = IP_ADDRESS.is_global();\n-    assert!(!IS_GLOBAL);\n-\n-    const IS_SHARED : bool = IP_ADDRESS.is_shared();\n-    assert!(!IS_SHARED);\n-\n-    const IS_IETF_PROTOCOL_ASSIGNMENT : bool = IP_ADDRESS.is_ietf_protocol_assignment();\n-    assert!(!IS_IETF_PROTOCOL_ASSIGNMENT);\n-\n-    const IS_BENCHMARKING : bool = IP_ADDRESS.is_benchmarking();\n-    assert!(!IS_BENCHMARKING);\n-\n-    const IS_RESERVED : bool = IP_ADDRESS.is_reserved();\n-    assert!(!IS_RESERVED);\n-\n-    const IS_MULTICAST : bool = IP_ADDRESS.is_multicast();\n-    assert!(!IS_MULTICAST);\n-\n-    const IS_BROADCAST : bool = IP_ADDRESS.is_broadcast();\n-    assert!(!IS_BROADCAST);\n-\n-    const IS_DOCUMENTATION : bool = IP_ADDRESS.is_documentation();\n-    assert!(!IS_DOCUMENTATION);\n-\n-    const IP_V6_COMPATIBLE : Ipv6Addr = IP_ADDRESS.to_ipv6_compatible();\n-    assert_eq!(IP_V6_COMPATIBLE,\n-        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 1]));\n-\n-    const IP_V6_MAPPED : Ipv6Addr = IP_ADDRESS.to_ipv6_mapped();\n-    assert_eq!(IP_V6_MAPPED,\n-        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 127, 0, 0, 1]));\n-}"}, {"sha": "e3841c38c2231d5c61bf678fc31b149b59e07b17", "filename": "src/test/ui/consts/std/net/ipv6.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4d6cca4905841b788729b7e6a44eefb8725812/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs?ref=bf4d6cca4905841b788729b7e6a44eefb8725812", "patch": "@@ -1,53 +0,0 @@\n-// run-pass\n-\n-#![feature(ip)]\n-#![feature(const_ipv6)]\n-\n-use std::net::{Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n-\n-fn main() {\n-    const IP_ADDRESS : Ipv6Addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n-    assert_eq!(IP_ADDRESS, Ipv6Addr::LOCALHOST);\n-\n-    const SEGMENTS : [u16; 8] = IP_ADDRESS.segments();\n-    assert_eq!(SEGMENTS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 1]);\n-\n-    const OCTETS : [u8; 16] = IP_ADDRESS.octets();\n-    assert_eq!(OCTETS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 1]);\n-\n-    const IS_UNSPECIFIED : bool = IP_ADDRESS.is_unspecified();\n-    assert!(!IS_UNSPECIFIED);\n-\n-    const IS_LOOPBACK : bool = IP_ADDRESS.is_loopback();\n-    assert!(IS_LOOPBACK);\n-\n-    const IS_GLOBAL : bool = IP_ADDRESS.is_global();\n-    assert!(!IS_GLOBAL);\n-\n-    const IS_UNIQUE_LOCAL : bool = IP_ADDRESS.is_unique_local();\n-    assert!(!IS_UNIQUE_LOCAL);\n-\n-    const IS_UNICAST_LINK_LOCAL_STRICT : bool = IP_ADDRESS.is_unicast_link_local_strict();\n-    assert!(!IS_UNICAST_LINK_LOCAL_STRICT);\n-\n-    const IS_UNICAST_LINK_LOCAL : bool = IP_ADDRESS.is_unicast_link_local();\n-    assert!(!IS_UNICAST_LINK_LOCAL);\n-\n-    const IS_UNICAST_SITE_LOCAL : bool = IP_ADDRESS.is_unicast_site_local();\n-    assert!(!IS_UNICAST_SITE_LOCAL);\n-\n-    const IS_DOCUMENTATION : bool = IP_ADDRESS.is_documentation();\n-    assert!(!IS_DOCUMENTATION);\n-\n-    const IS_UNICAST_GLOBAL : bool = IP_ADDRESS.is_unicast_global();\n-    assert!(!IS_UNICAST_GLOBAL);\n-\n-    const MULTICAST_SCOPE : Option<Ipv6MulticastScope> = IP_ADDRESS.multicast_scope();\n-    assert_eq!(MULTICAST_SCOPE, None);\n-\n-    const IS_MULTICAST : bool = IP_ADDRESS.is_multicast();\n-    assert!(!IS_MULTICAST);\n-\n-    const IP_V4 : Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n-    assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n-}"}, {"sha": "f323ba03c012cfd50753f64b43bd2b27fd72443d", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -6,7 +6,7 @@ LL |     let _: u8 = s[4];\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n    = note: required because of the requirements on the impl of `Index<{integer}>` for `str`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n@@ -17,7 +17,7 @@ LL |     let _ = s.get(4);\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n@@ -27,7 +27,7 @@ LL |     let _ = s.get_unchecked(4);\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:17"}, {"sha": "405542820a394cdbc5920a0efcb2c5976f36c14a", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -39,7 +39,7 @@ LL |     s.get_mut(1);\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n@@ -49,7 +49,7 @@ LL |     s.get_unchecked_mut(1);\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:5"}, {"sha": "a15bfeef1c12d49b07d50a85983ac586042e8e57", "filename": "src/test/ui/try-block/try-block-in-return.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838325726a05855f10fbb6b3dc7165a7d8dde7b9/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-return.rs?ref=838325726a05855f10fbb6b3dc7165a7d8dde7b9", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n+\n+fn issue_76271() -> Option<i32> {\n+    return try { 4 }\n+}\n+\n+fn main() {\n+    assert_eq!(issue_76271(), Some(4));\n+}"}]}