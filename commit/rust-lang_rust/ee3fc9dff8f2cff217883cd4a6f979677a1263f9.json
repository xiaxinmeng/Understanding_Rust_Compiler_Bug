{"sha": "ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "node_id": "C_kwDOAAsO6NoAKGVlM2ZjOWRmZjhmMmNmZjIxNzg4M2NkNGE2Zjk3OTY3N2ExMjYzZjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-02T19:47:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-02T21:09:41Z"}, "message": "never consider unsafe blocks unused if they would be required with unsafe_op_in_unsafe_fn", "tree": {"sha": "876b43d0db16306b95492e49d58ef758f0a6ba00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/876b43d0db16306b95492e49d58ef758f0a6ba00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "html_url": "https://github.com/rust-lang/rust/commit/ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4493a0f4724c0bae1436242d76cccc9c0a287b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80", "html_url": "https://github.com/rust-lang/rust/commit/4493a0f4724c0bae1436242d76cccc9c0a287b80"}], "stats": {"total": 755, "additions": 124, "deletions": 631}, "files": [{"sha": "04159bff4ff411539cf7983a633e24c13b11235f", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -566,7 +566,7 @@ impl Drop for DiagnosticBuilderInner<'_> {\n                         ),\n                     ));\n                     handler.emit_diagnostic(&mut self.diagnostic);\n-                    panic!();\n+                    panic!(\"error was constructed but not emitted\");\n                 }\n             }\n             // `.emit()` was previously called, or maybe we're during `.cancel()`."}, {"sha": "e3157a4300195844c6cec106681933a3ca6d61ed", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -75,10 +75,10 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n         match self.safety_context {\n             SafetyContext::BuiltinUnsafeBlock => {}\n             SafetyContext::UnsafeBlock { ref mut used, .. } => {\n-                if !self.body_unsafety.is_unsafe() || !unsafe_op_in_unsafe_fn_allowed {\n-                    // Mark this block as useful\n-                    *used = true;\n-                }\n+                // Mark this block as useful (even inside `unsafe fn`, where it is technically\n+                // redundant -- but we want to eventually enable `unsafe_op_in_unsafe_fn` by\n+                // default which will require those blocks).\n+                *used = true;\n             }\n             SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n             SafetyContext::UnsafeFn => {"}, {"sha": "9ea87245d034aabbeb8cf175ef0f8433081642fa", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -5,9 +5,9 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n+use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_middle::{lint, mir::*};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n \n@@ -259,7 +259,7 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n         violations: impl IntoIterator<Item = &'a UnsafetyViolation>,\n         new_used_unsafe_blocks: impl IntoIterator<Item = (HirId, UsedUnsafeBlockData)>,\n     ) {\n-        use UsedUnsafeBlockData::{AllAllowedInUnsafeFn, SomeDisallowedInUnsafeFn};\n+        use UsedUnsafeBlockData::*;\n \n         let update_entry = |this: &mut Self, hir_id, new_usage| {\n             match this.used_unsafe_blocks.entry(hir_id) {\n@@ -299,15 +299,11 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n                 }\n             }),\n             Safety::BuiltinUnsafe => {}\n-            Safety::ExplicitUnsafe(hir_id) => violations.into_iter().for_each(|violation| {\n+            Safety::ExplicitUnsafe(hir_id) => violations.into_iter().for_each(|_violation| {\n                 update_entry(\n                     self,\n                     hir_id,\n-                    match self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, violation.lint_root).0\n-                    {\n-                        Level::Allow => AllAllowedInUnsafeFn(violation.lint_root),\n-                        _ => SomeDisallowedInUnsafeFn,\n-                    },\n+                    SomeDisallowedInUnsafeFn,\n                 )\n             }),\n         };\n@@ -522,6 +518,11 @@ fn unsafety_check_result<'tcx>(\n }\n \n fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n+    if matches!(kind, UnusedUnsafe::InUnsafeFn(..)) {\n+        // We do *not* warn here, these unsafe blocks are actually required when\n+        // `unsafe_op_in_unsafe_fn` is warn or higher.\n+        return;\n+    }\n     let span = tcx.sess.source_map().guess_head_span(tcx.hir().span(id));\n     tcx.struct_span_lint_hir(UNUSED_UNSAFE, id, span, |lint| {\n         let msg = \"unnecessary `unsafe` block\";\n@@ -535,25 +536,7 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n                     \"because it's nested under this `unsafe` block\",\n                 );\n             }\n-            UnusedUnsafe::InUnsafeFn(id, usage_lint_root) => {\n-                db.span_label(\n-                    tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n-                    \"because it's nested under this `unsafe` fn\",\n-                )\n-                .note(\n-                    \"this `unsafe` block does contain unsafe operations, \\\n-                    but those are already allowed in an `unsafe fn`\",\n-                );\n-                let (level, source) =\n-                    tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, usage_lint_root);\n-                assert_eq!(level, Level::Allow);\n-                lint::explain_lint_level_source(\n-                    UNSAFE_OP_IN_UNSAFE_FN,\n-                    Level::Allow,\n-                    source,\n-                    &mut db,\n-                );\n-            }\n+            UnusedUnsafe::InUnsafeFn(_id, _usage_lint_root) => unreachable!(),\n         }\n \n         db.emit();"}, {"sha": "adb72c26bba470274533ab8b03aafff9d4b1dac4", "filename": "src/test/ui/span/lint-unused-unsafe-thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -22,7 +22,7 @@ fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n-unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad5() { unsafe { unsf() } }\n fn bad6() {\n     unsafe {                             // don't put the warning here\n         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n@@ -31,7 +31,7 @@ fn bad6() {\n     }\n }\n unsafe fn bad7() {\n-    unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+    unsafe {\n         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n             unsf()\n         }"}, {"sha": "3bcbb759775aac879dc2cc2a4c157f5442b30309", "filename": "src/test/ui/span/lint-unused-unsafe-thir.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -30,14 +30,6 @@ error: unnecessary `unsafe` block\n LL | fn bad4() { unsafe { callback(||{}) } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe-thir.rs:25:20\n-   |\n-LL | unsafe fn bad5() { unsafe { unsf() } }\n-   | ----------------   ^^^^^^ unnecessary `unsafe` block\n-   | |\n-   | because it's nested under this `unsafe` fn\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe-thir.rs:28:9\n    |\n@@ -54,13 +46,5 @@ LL |     unsafe {\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe-thir.rs:34:5\n-   |\n-LL | unsafe fn bad7() {\n-   | ---------------- because it's nested under this `unsafe` fn\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "d8412908c738320512891c307ac39aa3ff1e155c", "filename": "src/test/ui/span/lint-unused-unsafe.mir.stderr", "status": "modified", "additions": 63, "deletions": 485, "changes": 548, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -28,17 +28,6 @@ error: unnecessary `unsafe` block\n LL | fn bad4() { unsafe { callback(||{}) } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:30:20\n-   |\n-LL | unsafe fn bad5() { unsafe { unsf() } }\n-   | ----------------   ^^^^^^ unnecessary `unsafe` block\n-   | |\n-   | because it's nested under this `unsafe` fn\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-   = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:32:5\n    |\n@@ -51,17 +40,6 @@ error: unnecessary `unsafe` block\n LL |     unsafe {\n    |     ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:40:9\n-   |\n-LL | unsafe fn bad7() {\n-   | ---------------- because it's nested under this `unsafe` fn\n-LL |     unsafe {\n-LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:74:9\n    |\n@@ -272,91 +250,32 @@ error: unnecessary `unsafe` block\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:197:13\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-LL |         unsafe {\n-LL |             unsafe { unsf() }\n-   |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:194:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:198:13\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             unsafe { unsf() }\n-   |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:199:13\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             unsafe { unsf() }\n-   |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:205:9\n-   |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:203:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:207:13\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n LL |             unsafe { unsf() }\n    |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:208:13\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n ...\n LL |             unsafe { unsf() }\n    |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:209:13\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n ...\n LL |             unsafe { unsf() }\n    |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:220:17\n@@ -398,19 +317,12 @@ LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:254:9\n+  --> $DIR/lint-unused-unsafe.rs:255:13\n    |\n-LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:252:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |         ------ because it's nested under this `unsafe` block\n+LL |             unsafe {\n+   |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:268:13\n@@ -630,91 +542,32 @@ error: unnecessary `unsafe` block\n LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:409:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-LL |             let _ = || unsafe { unsf() };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:406:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:410:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { unsf() };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:411:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { unsf() };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:417:20\n-   |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:415:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:419:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n LL |             let _ = || unsafe { unsf() };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:420:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { unsf() };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:421:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { unsf() };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:432:28\n@@ -756,19 +609,12 @@ LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:466:20\n+  --> $DIR/lint-unused-unsafe.rs:467:24\n    |\n-LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:464:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:480:24\n@@ -988,91 +834,32 @@ error: unnecessary `unsafe` block\n LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:622:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-LL |             let _ = || unsafe { let _ = || unsf(); };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:619:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:623:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { let _ = || unsf(); };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:624:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { let _ = || unsf(); };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:630:20\n-   |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:628:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:632:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsf();\n LL |             let _ = || unsafe { let _ = || unsf(); };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:633:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { let _ = || unsf(); };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:634:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { let _ = || unsf(); };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:645:28\n@@ -1114,19 +901,12 @@ LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:679:20\n+  --> $DIR/lint-unused-unsafe.rs:680:24\n    |\n-LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:677:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:693:24\n@@ -1256,91 +1036,32 @@ error: unnecessary `unsafe` block\n LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:784:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:781:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:785:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:786:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:792:24\n-   |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:790:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:794:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 unsf();\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:795:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:796:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:807:32\n@@ -1382,19 +1103,12 @@ LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:841:24\n+  --> $DIR/lint-unused-unsafe.rs:842:28\n    |\n-LL |         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |         ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:839:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 let _ = || unsafe {\n+   |                            ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:855:28\n@@ -1524,91 +1238,32 @@ error: unnecessary `unsafe` block\n LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:942:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:939:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:943:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:944:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:950:24\n-   |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:948:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:952:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 unsf();\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:953:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:954:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:965:32\n@@ -1650,19 +1305,12 @@ LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:999:24\n+  --> $DIR/lint-unused-unsafe.rs:1000:28\n    |\n-LL |         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |         ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:997:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 let _ = || unsafe {\n+   |                            ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1013:28\n@@ -1672,21 +1320,6 @@ LL |             let _ = || unsafe {\n LL |                 let _ = || unsafe {\n    |                            ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1044:9\n-   |\n-LL |     unsafe fn multiple_unsafe_op_in_unsafe_fn_allows() {\n-   |     -------------------------------------------------- because it's nested under this `unsafe` fn\n-LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:1045:21\n-   |\n-LL |             #[allow(unsafe_op_in_unsafe_fn)]\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1059:29\n    |\n@@ -1726,87 +1359,32 @@ error: unnecessary `unsafe` block\n LL |             let _ = async { unsafe {\n    |                             ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1074:33\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n-   |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:1071:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1075:33\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n-   |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1076:33\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n-   |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1078:29\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = async { unsafe {\n-   |                             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1080:33\n    |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n+LL |                 let _ = async { unsf() };\n LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n    |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1081:33\n    |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n    |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1082:33\n    |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n    |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1092:22\n@@ -1820,5 +1398,5 @@ error: unnecessary `unsafe` block\n LL |         let _x: [(); unsafe { unsafe { size() } }] = [];\n    |                      ^^^^^^ unnecessary `unsafe` block\n \n-error: aborting due to 201 previous errors\n+error: aborting due to 174 previous errors\n "}, {"sha": "5d042768be0025ee994a10e10aaf558b2a181ffe", "filename": "src/test/ui/span/lint-unused-unsafe.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -27,7 +27,7 @@ fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n-unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad5() { unsafe { unsf() } }\n fn bad6() {\n     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n         unsafe {                         // don't put the warning here\n@@ -37,7 +37,7 @@ fn bad6() {\n }\n unsafe fn bad7() {\n     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-        unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+        unsafe {\n             unsf()\n         }\n     }\n@@ -194,15 +194,15 @@ mod additional_tests {\n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granularity_2() {\n         unsafe { //~ ERROR: unnecessary `unsafe` block\n-            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n-            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n-            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n         }\n     }\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn top_level_used_2() {\n-        unsafe { //~ ERROR: unnecessary `unsafe` block\n+        unsafe {\n             unsf();\n             unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n             unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n@@ -251,8 +251,8 @@ mod additional_tests {\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-        unsafe { //~ ERROR: unnecessary `unsafe` block\n-            unsafe {\n+        unsafe {\n+            unsafe { //~ ERROR: unnecessary `unsafe` block\n                 #[deny(unsafe_op_in_unsafe_fn)]\n                 {\n                     unsf();\n@@ -406,15 +406,15 @@ mod additional_tests_closures {\n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granularity_2() {\n         let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n         };\n     }\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn top_level_used_2() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+        let _ = || unsafe {\n             unsf();\n             let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n             let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n@@ -463,8 +463,8 @@ mod additional_tests_closures {\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe {\n+        let _ = || unsafe {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                 #[deny(unsafe_op_in_unsafe_fn)]\n                 {\n                     unsf();\n@@ -619,15 +619,15 @@ mod additional_tests_even_more_closures {\n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granularity_2() {\n         let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n         };\n     }\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn top_level_used_2() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+        let _ = || unsafe {\n             let _ = || unsf();\n             let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n             let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n@@ -676,8 +676,8 @@ mod additional_tests_even_more_closures {\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe {\n+        let _ = || unsafe {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                 #[deny(unsafe_op_in_unsafe_fn)]\n                 {\n                     let _ = || unsf();\n@@ -781,15 +781,15 @@ mod item_likes {\n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granularity_2() {\n             let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n             };\n         }\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn top_level_used_2() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n                 unsf();\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n@@ -838,8 +838,8 @@ mod item_likes {\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe {\n+            let _ = || unsafe {\n+                let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                     #[deny(unsafe_op_in_unsafe_fn)]\n                     {\n                         unsf();\n@@ -939,15 +939,15 @@ mod item_likes {\n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granularity_2() {\n             let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n             };\n         }\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn top_level_used_2() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n                 unsf();\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n@@ -996,8 +996,8 @@ mod item_likes {\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe {\n+            let _ = || unsafe {\n+                let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                     #[deny(unsafe_op_in_unsafe_fn)]\n                     {\n                         unsf();\n@@ -1041,7 +1041,7 @@ mod additional_tests_extra {\n \n     #[warn(unsafe_op_in_unsafe_fn)]\n     unsafe fn multiple_unsafe_op_in_unsafe_fn_allows() {\n-        unsafe { //~ ERROR: unnecessary `unsafe` block\n+        unsafe {\n             #[allow(unsafe_op_in_unsafe_fn)]\n             {\n                 unsf();\n@@ -1071,11 +1071,11 @@ mod additional_tests_extra {\n         #[allow(unsafe_op_in_unsafe_fn)]\n         {\n             let _ = async { unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n-                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n-                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n             }};\n-            let _ = async { unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = async { unsafe {\n                 let _ = async { unsf() };\n                 let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n                 let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block"}, {"sha": "b968174dd2d7ec09eb48d9df2fa9ba37db4cebc5", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -81,54 +81,22 @@ error: unnecessary `unsafe` block\n LL |     unsafe { unsafe { unsf() } }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:60:5\n-   |\n-LL | unsafe fn allow_level() {\n-   | ----------------------- because it's nested under this `unsafe` fn\n-...\n-LL |     unsafe { unsf() }\n-   |     ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:53:9\n-   |\n-LL | #[allow(unsafe_op_in_unsafe_fn)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:72:9\n-   |\n-LL | unsafe fn nested_allow_level() {\n-   | ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |         unsafe { unsf() }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:65:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0133]: call to unsafe function is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:83:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:81:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "db1e916a36c1fb7e885171e727806bdf6dc9b58d", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -58,7 +58,6 @@ unsafe fn allow_level() {\n     VOID = ();\n \n     unsafe { unsf() }\n-    //~^ ERROR unnecessary `unsafe` block\n }\n \n unsafe fn nested_allow_level() {\n@@ -70,7 +69,6 @@ unsafe fn nested_allow_level() {\n         VOID = ();\n \n         unsafe { unsf() }\n-        //~^ ERROR unnecessary `unsafe` block\n     }\n }\n "}, {"sha": "e365293657e305259afbec3c352845d0572b65ec", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee3fc9dff8f2cff217883cd4a6f979677a1263f9/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr?ref=ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "patch": "@@ -83,40 +83,22 @@ LL |     unsafe { unsafe { unsf() } }\n    |     |\n    |     because it's nested under this `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:60:5\n-   |\n-LL | unsafe fn allow_level() {\n-   | ----------------------- because it's nested under this `unsafe` fn\n-...\n-LL |     unsafe { unsf() }\n-   |     ^^^^^^ unnecessary `unsafe` block\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:72:9\n-   |\n-LL | unsafe fn nested_allow_level() {\n-   | ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |         unsafe { unsf() }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-\n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:83:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:81:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}