{"sha": "b8e5ab20ed7a7677a998a163ccf7853764b195e6", "node_id": "C_kwDOAAsO6NoAKGI4ZTVhYjIwZWQ3YTc2NzdhOTk4YTE2M2NjZjc4NTM3NjRiMTk1ZTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-21T07:15:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-21T07:15:32Z"}, "message": "Auto merge of #89580 - estebank:trait-bounds-are-tricky, r=nagisa\n\nPoint at source of trait bound obligations in more places\n\nBe more thorough in using `ItemObligation` and `BindingObligation` when\nevaluating obligations so that we can point at trait bounds that\nintroduced unfulfilled obligations. We no longer incorrectly point at\nunrelated trait bounds (`substs-ppaux.verbose.stderr`).\n\nIn particular, we now point at trait bounds on method calls.\n\nWe no longer point at \"obvious\" obligation sources (we no longer have a\nnote pointing at `Trait` saying \"required by a bound in `Trait`\", like\nin `associated-types-no-suitable-supertrait*`).\n\nWe no longer point at associated items (`ImplObligation`), as they didn't\nadd any user actionable information, they just added noise.\n\nAddress part of #89418.", "tree": {"sha": "680dda4a829f2e252d7c5fb4bc87fa8b4a3231a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680dda4a829f2e252d7c5fb4bc87fa8b4a3231a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e5ab20ed7a7677a998a163ccf7853764b195e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e5ab20ed7a7677a998a163ccf7853764b195e6", "html_url": "https://github.com/rust-lang/rust/commit/b8e5ab20ed7a7677a998a163ccf7853764b195e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e5ab20ed7a7677a998a163ccf7853764b195e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02913c078849f940371eb9930754f2b0f1bc9fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/02913c078849f940371eb9930754f2b0f1bc9fad", "html_url": "https://github.com/rust-lang/rust/commit/02913c078849f940371eb9930754f2b0f1bc9fad"}, {"sha": "2a2621deef74e6e9687f96ea502c7f82b1ffb432", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2621deef74e6e9687f96ea502c7f82b1ffb432", "html_url": "https://github.com/rust-lang/rust/commit/2a2621deef74e6e9687f96ea502c7f82b1ffb432"}], "stats": {"total": 4803, "additions": 2064, "deletions": 2739}, "files": [{"sha": "6b79962ddd6095bc600d8d0766b5ce557d8b8a14", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1266,22 +1266,37 @@ impl EmitterWriter {\n             }\n             self.msg_to_buffer(&mut buffer, msg, max_line_num_len, \"note\", None);\n         } else {\n+            let mut label_width = 0;\n             // The failure note level itself does not provide any useful diagnostic information\n             if *level != Level::FailureNote {\n                 buffer.append(0, level.to_str(), Style::Level(*level));\n+                label_width += level.to_str().len();\n             }\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n                 buffer.append(0, \"[\", Style::Level(*level));\n                 buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n+                label_width += 2 + code.len();\n             }\n             let header_style = if is_secondary { Style::HeaderMsg } else { Style::MainHeaderMsg };\n             if *level != Level::FailureNote {\n                 buffer.append(0, \": \", header_style);\n+                label_width += 2;\n             }\n             for &(ref text, _) in msg.iter() {\n-                buffer.append(0, &replace_tabs(text), header_style);\n+                // Account for newlines to align output to its label.\n+                for (line, text) in replace_tabs(text).lines().enumerate() {\n+                    buffer.append(\n+                        0 + line,\n+                        &format!(\n+                            \"{}{}\",\n+                            if line == 0 { String::new() } else { \" \".repeat(label_width) },\n+                            text\n+                        ),\n+                        header_style,\n+                    );\n+                }\n             }\n         }\n "}, {"sha": "a85892f1b5ea6047cdfa7b7d60d0398cad480102", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -2141,10 +2141,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         None\n                     },\n                     self.tcx.generics_of(owner.to_def_id()),\n+                    hir.span(hir_id),\n                 )\n             });\n+\n+        let span = match generics {\n+            // This is to get around the trait identity obligation, that has a `DUMMY_SP` as signal\n+            // for other diagnostics, so we need to recover it here.\n+            Some((_, _, node)) if span.is_dummy() => node,\n+            _ => span,\n+        };\n+\n         let type_param_span = match (generics, bound_kind) {\n-            (Some((_, ref generics)), GenericKind::Param(ref param)) => {\n+            (Some((_, ref generics, _)), GenericKind::Param(ref param)) => {\n                 // Account for the case where `param` corresponds to `Self`,\n                 // which doesn't have the expected type argument.\n                 if !(generics.has_self && param.index == 0) {\n@@ -2181,7 +2190,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n         let new_lt = generics\n             .as_ref()\n-            .and_then(|(parent_g, g)| {\n+            .and_then(|(parent_g, g, _)| {\n                 let mut possible = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char));\n                 let mut lts_names = g\n                     .params\n@@ -2203,7 +2212,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .unwrap_or(\"'lt\".to_string());\n         let add_lt_sugg = generics\n             .as_ref()\n-            .and_then(|(_, g)| g.params.first())\n+            .and_then(|(_, g, _)| g.params.first())\n             .and_then(|param| param.def_id.as_local())\n             .map(|def_id| {\n                 ("}, {"sha": "2aaebed28ced759939b87cb4269f916357896325", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -192,14 +192,16 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ObligationCauseCode::MatchImpl(parent, ..) => &parent.code,\n                 _ => &cause.code,\n             };\n-            if let ObligationCauseCode::ItemObligation(item_def_id) = *code {\n+            if let (ObligationCauseCode::ItemObligation(item_def_id), None) =\n+                (code, override_error_code)\n+            {\n                 // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n                 // lifetime as above, but called using a fully-qualified path to the method:\n                 // `Foo::qux(bar)`.\n                 let mut v = TraitObjectVisitor(FxHashSet::default());\n                 v.visit_ty(param.param_ty);\n                 if let Some((ident, self_ty)) =\n-                    self.get_impl_ident_and_self_ty_from_trait(item_def_id, &v.0)\n+                    self.get_impl_ident_and_self_ty_from_trait(*item_def_id, &v.0)\n                 {\n                     if self.suggest_constrain_dyn_trait_in_impl(&mut err, &v.0, ident, self_ty) {\n                         override_error_code = Some(ident);"}, {"sha": "d5c7cf711169b504a5a18ad5fb952dd66c69034a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1958,15 +1958,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     region, object_ty,\n                 ));\n             }\n-            ObligationCauseCode::ItemObligation(item_def_id) => {\n-                let item_name = tcx.def_path_str(item_def_id);\n-                let msg = format!(\"required by `{}`\", item_name);\n-                let sp = tcx\n-                    .hir()\n-                    .span_if_local(item_def_id)\n-                    .unwrap_or_else(|| tcx.def_span(item_def_id));\n-                let sp = tcx.sess.source_map().guess_head_span(sp);\n-                err.span_note(sp, &msg);\n+            ObligationCauseCode::ItemObligation(_item_def_id) => {\n+                // We hold the `DefId` of the item introducing the obligation, but displaying it\n+                // doesn't add user usable information. It always point at an associated item.\n             }\n             ObligationCauseCode::BindingObligation(item_def_id, span) => {\n                 let item_name = tcx.def_path_str(item_def_id);"}, {"sha": "6d2323abba465e152e76ed1c23538c725626fb4e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,7 +9,9 @@ use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n-pub use rustc_infer::traits::util::*;\n+pub use rustc_infer::traits::{self, util::*};\n+\n+use std::iter;\n \n ///////////////////////////////////////////////////////////////////////////\n // `TraitAliasExpander` iterator\n@@ -229,11 +231,16 @@ pub fn predicates_for_generics<'tcx>(\n ) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n     debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n \n-    generic_bounds.predicates.into_iter().map(move |predicate| Obligation {\n-        cause: cause.clone(),\n-        recursion_depth,\n-        param_env,\n-        predicate,\n+    iter::zip(generic_bounds.predicates, generic_bounds.spans).map(move |(predicate, span)| {\n+        let cause = match cause.code {\n+            traits::ItemObligation(def_id) if !span.is_dummy() => traits::ObligationCause::new(\n+                cause.span,\n+                cause.body_id,\n+                traits::BindingObligation(def_id, span),\n+            ),\n+            _ => cause.clone(),\n+        };\n+        Obligation { cause, recursion_depth, param_env, predicate }\n     })\n }\n "}, {"sha": "2a66684e2a2a0937a498866a831992877c24f02e", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -709,7 +709,12 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n             .map(|((pred, span), origin_def_id)| {\n-                let cause = self.cause(traits::BindingObligation(origin_def_id, span));\n+                let code = if span.is_dummy() {\n+                    traits::MiscObligation\n+                } else {\n+                    traits::BindingObligation(origin_def_id, span)\n+                };\n+                let cause = self.cause(code);\n                 traits::Obligation::with_depth(cause, self.recursion_depth, self.param_env, pred)\n             })\n             .filter(|pred| !pred.has_escaping_bound_vars())"}, {"sha": "4d4662f73a9556023a59408bb35103ec7563856c", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -210,12 +210,8 @@ fn compare_predicate_entailment<'tcx>(\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_hir_id);\n     let param_env =\n         ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n-    let param_env = traits::normalize_param_env_or_error(\n-        tcx,\n-        impl_m.def_id,\n-        param_env,\n-        normalize_cause.clone(),\n-    );\n+    let param_env =\n+        traits::normalize_param_env_or_error(tcx, impl_m.def_id, param_env, normalize_cause);\n \n     tcx.infer_ctxt().enter(|infcx| {\n         let inh = Inherited::new(infcx, impl_m.def_id.expect_local());\n@@ -226,12 +222,15 @@ fn compare_predicate_entailment<'tcx>(\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n         let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n-        for predicate in impl_m_own_bounds.predicates {\n+        for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n+            let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n             let traits::Normalized { value: predicate, obligations } =\n-                traits::normalize(&mut selcx, param_env, normalize_cause.clone(), predicate);\n+                traits::normalize(&mut selcx, param_env, normalize_cause, predicate);\n \n             inh.register_predicates(obligations);\n-            inh.register_predicate(traits::Obligation::new(cause.clone(), param_env, predicate));\n+            let mut cause = cause.clone();\n+            cause.make_mut().span = span;\n+            inh.register_predicate(traits::Obligation::new(cause, param_env, predicate));\n         }\n \n         // We now need to check that the signature of the impl method is\n@@ -280,6 +279,12 @@ fn compare_predicate_entailment<'tcx>(\n \n         let sub_result = infcx.at(&cause, param_env).sup(trait_fty, impl_fty).map(\n             |InferOk { obligations, .. }| {\n+                // FIXME: We'd want to keep more accurate spans than \"the method signature\" when\n+                // processing the comparison between the trait and impl fn, but we sadly lose them\n+                // and point at the whole signature when a trait bound or specific input or output\n+                // type would be more appropriate. In other places we have a `Vec<Span>`\n+                // corresponding to their `Vec<Predicate>`, but we don't have that here.\n+                // Fixing this would improve the output of test `issue-83765.rs`.\n                 inh.register_predicates(obligations);\n             },\n         );\n@@ -1385,12 +1390,13 @@ pub fn check_type_bounds<'tcx>(\n \n         let impl_ty_hir_id = tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local());\n         let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n-        let mk_cause = |span| {\n-            ObligationCause::new(\n-                impl_ty_span,\n-                impl_ty_hir_id,\n-                ObligationCauseCode::BindingObligation(trait_ty.def_id, span),\n-            )\n+        let mk_cause = |span: Span| {\n+            let code = if span.is_dummy() {\n+                traits::MiscObligation\n+            } else {\n+                traits::BindingObligation(trait_ty.def_id, span)\n+            };\n+            ObligationCause::new(impl_ty_span, impl_ty_hir_id, code)\n         };\n \n         let obligations = tcx"}, {"sha": "142a0a8fc2501e922c4a35058f87537cec07aed7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -586,38 +586,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Given a fully substituted set of bounds (`generic_bounds`), and the values with which each\n-    /// type/region parameter was instantiated (`substs`), creates and registers suitable\n-    /// trait/region obligations.\n-    ///\n-    /// For example, if there is a function:\n-    ///\n-    /// ```\n-    /// fn foo<'a,T:'a>(...)\n-    /// ```\n-    ///\n-    /// and a reference:\n-    ///\n-    /// ```\n-    /// let f = foo;\n-    /// ```\n-    ///\n-    /// Then we will create a fresh region variable `'$0` and a fresh type variable `$1` for `'a`\n-    /// and `T`. This routine will add a region obligation `$1:'$0` and register it locally.\n-    pub fn add_obligations_for_parameters(\n-        &self,\n-        cause: traits::ObligationCause<'tcx>,\n-        predicates: ty::InstantiatedPredicates<'tcx>,\n-    ) {\n-        assert!(!predicates.has_escaping_bound_vars());\n-\n-        debug!(\"add_obligations_for_parameters(predicates={:?})\", predicates);\n-\n-        for obligation in traits::predicates_for_generics(cause, self.param_env, predicates) {\n-            self.register_predicate(obligation);\n-        }\n-    }\n-\n     // FIXME(arielb1): use this instead of field.ty everywhere\n     // Only for fields! Returns <none> for methods>\n     // Indifferent to privacy flags\n@@ -1522,20 +1490,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Add all the obligations that are required, substituting and normalized appropriately.\n     #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n-    fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n-        let (bounds, spans) = self.instantiate_bounds(span, def_id, &substs);\n+    crate fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n+        let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n-        for (i, mut obligation) in traits::predicates_for_generics(\n+        for obligation in traits::predicates_for_generics(\n             traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n             self.param_env,\n             bounds,\n-        )\n-        .enumerate()\n-        {\n-            // This makes the error point at the bound, but we want to point at the argument\n-            if let Some(span) = spans.get(i) {\n-                obligation.cause.make_mut().code = traits::BindingObligation(def_id, *span);\n-            }\n+        ) {\n             self.register_predicate(obligation);\n         }\n     }"}, {"sha": "a119a6838b8d2f3e900d74f7bd8a144b8daa5c01", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -509,10 +509,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.write_user_type_annotation_from_substs(hir_id, did, substs, None);\n \n             // Check bounds on type arguments used in the path.\n-            let (bounds, _) = self.instantiate_bounds(path_span, did, substs);\n-            let cause =\n-                traits::ObligationCause::new(path_span, self.body_id, traits::ItemObligation(did));\n-            self.add_obligations_for_parameters(cause, bounds);\n+            self.add_required_obligations(path_span, did, substs);\n \n             Some((variant, ty))\n         } else {"}, {"sha": "dabfe92190b33ade90375e7742bca4c22da47513", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -120,7 +120,12 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n         if illegal_sized_bound.is_none() {\n-            self.add_obligations(self.tcx.mk_fn_ptr(method_sig), all_substs, method_predicates);\n+            self.add_obligations(\n+                self.tcx.mk_fn_ptr(method_sig),\n+                all_substs,\n+                method_predicates,\n+                pick.item.def_id,\n+            );\n         }\n \n         // Create the final `MethodCallee`.\n@@ -471,16 +476,23 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         fty: Ty<'tcx>,\n         all_substs: SubstsRef<'tcx>,\n         method_predicates: ty::InstantiatedPredicates<'tcx>,\n+        def_id: DefId,\n     ) {\n         debug!(\n-            \"add_obligations: fty={:?} all_substs={:?} method_predicates={:?}\",\n-            fty, all_substs, method_predicates\n+            \"add_obligations: fty={:?} all_substs={:?} method_predicates={:?} def_id={:?}\",\n+            fty, all_substs, method_predicates, def_id\n         );\n \n-        self.add_obligations_for_parameters(\n-            traits::ObligationCause::misc(self.span, self.body_id),\n+        // FIXME: could replace with the following, but we already calculated `method_predicates`,\n+        // so we just call `predicates_for_generics` directly to avoid redoing work.\n+        // `self.add_required_obligations(self.span, def_id, &all_substs);`\n+        for obligation in traits::predicates_for_generics(\n+            traits::ObligationCause::new(self.span, self.body_id, traits::ItemObligation(def_id)),\n+            self.param_env,\n             method_predicates,\n-        );\n+        ) {\n+            self.register_predicate(obligation);\n+        }\n \n         // this is a projection from a trait reference, so we have to\n         // make sure that the trait reference inputs are well-formed."}, {"sha": "dbc1d4ec193772ffea2c3cdf8d430278c860a13c", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,6 +12,7 @@ pub use self::CandidateSource::*;\n pub use self::MethodError::*;\n \n use crate::check::FnCtxt;\n+use crate::ObligationCause;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -71,7 +72,8 @@ pub enum MethodError<'tcx> {\n #[derive(Debug)]\n pub struct NoMatchData<'tcx> {\n     pub static_candidates: Vec<CandidateSource>,\n-    pub unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n+    pub unsatisfied_predicates:\n+        Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>, Option<ObligationCause<'tcx>>)>,\n     pub out_of_scope_traits: Vec<DefId>,\n     pub lev_candidate: Option<ty::AssocItem>,\n     pub mode: probe::Mode,\n@@ -80,7 +82,11 @@ pub struct NoMatchData<'tcx> {\n impl<'tcx> NoMatchData<'tcx> {\n     pub fn new(\n         static_candidates: Vec<CandidateSource>,\n-        unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n+        unsatisfied_predicates: Vec<(\n+            ty::Predicate<'tcx>,\n+            Option<ty::Predicate<'tcx>>,\n+            Option<ObligationCause<'tcx>>,\n+        )>,\n         out_of_scope_traits: Vec<DefId>,\n         lev_candidate: Option<ty::AssocItem>,\n         mode: probe::Mode,"}, {"sha": "9fd7e8c4daa2043c0ea4cfde26934575a84be8a0", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -78,7 +78,8 @@ struct ProbeContext<'a, 'tcx> {\n \n     /// Collects near misses when trait bounds for type parameters are unsatisfied and is only used\n     /// for error reporting\n-    unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n+    unsatisfied_predicates:\n+        Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>, Option<ObligationCause<'tcx>>)>,\n \n     is_suggestion: IsSuggestion,\n \n@@ -1351,6 +1352,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         possibly_unsatisfied_predicates: &mut Vec<(\n             ty::Predicate<'tcx>,\n             Option<ty::Predicate<'tcx>>,\n+            Option<ObligationCause<'tcx>>,\n         )>,\n         unstable_candidates: Option<&mut Vec<(Candidate<'tcx>, Symbol)>>,\n     ) -> Option<PickResult<'tcx>>\n@@ -1497,6 +1499,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         possibly_unsatisfied_predicates: &mut Vec<(\n             ty::Predicate<'tcx>,\n             Option<ty::Predicate<'tcx>>,\n+            Option<ObligationCause<'tcx>>,\n         )>,\n     ) -> ProbeResult {\n         debug!(\"consider_probe: self_ty={:?} probe={:?}\", self_ty, probe);\n@@ -1508,8 +1511,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 .sup(probe.xform_self_ty, self_ty)\n             {\n                 Ok(InferOk { obligations, value: () }) => obligations,\n-                Err(_) => {\n-                    debug!(\"--> cannot relate self-types\");\n+                Err(err) => {\n+                    debug!(\"--> cannot relate self-types {:?}\", err);\n                     return ProbeResult::NoMatch;\n                 }\n             };\n@@ -1558,7 +1561,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         let o = self.resolve_vars_if_possible(o);\n                         if !self.predicate_may_hold(&o) {\n                             result = ProbeResult::NoMatch;\n-                            possibly_unsatisfied_predicates.push((o.predicate, None));\n+                            possibly_unsatisfied_predicates.push((\n+                                o.predicate,\n+                                None,\n+                                Some(o.cause),\n+                            ));\n                         }\n                     }\n                 }\n@@ -1604,16 +1611,19 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                             } else {\n                                                 Some(predicate)\n                                             };\n-                                            possibly_unsatisfied_predicates\n-                                                .push((nested_predicate, p));\n+                                            possibly_unsatisfied_predicates.push((\n+                                                nested_predicate,\n+                                                p,\n+                                                Some(obligation.cause.clone()),\n+                                            ));\n                                         }\n                                     }\n                                 }\n                                 _ => {\n                                     // Some nested subobligation of this predicate\n                                     // failed.\n                                     let predicate = self.resolve_vars_if_possible(predicate);\n-                                    possibly_unsatisfied_predicates.push((predicate, None));\n+                                    possibly_unsatisfied_predicates.push((predicate, None, None));\n                                 }\n                             }\n                             false\n@@ -1632,7 +1642,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 let o = self.resolve_vars_if_possible(o);\n                 if !self.predicate_may_hold(&o) {\n                     result = ProbeResult::NoMatch;\n-                    possibly_unsatisfied_predicates.push((o.predicate, None));\n+                    possibly_unsatisfied_predicates.push((o.predicate, None, Some(o.cause)));\n                 }\n             }\n "}, {"sha": "ca174ed5e84972cb3950e301e6bd3c7a107be699", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 151, "deletions": 37, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -17,7 +17,9 @@ use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{source_map, FileName, MultiSpan, Span, Symbol};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n-use rustc_trait_selection::traits::{FulfillmentError, Obligation};\n+use rustc_trait_selection::traits::{\n+    FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n+};\n \n use std::cmp::Ordering;\n use std::iter;\n@@ -702,27 +704,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let (ty::Param(_), ty::PredicateKind::Trait(p)) =\n                                 (self_ty.kind(), parent_pred.kind().skip_binder())\n                             {\n-                                if let ty::Adt(def, _) = p.trait_ref.self_ty().kind() {\n-                                    let node = def.did.as_local().map(|def_id| {\n+                                let node = match p.trait_ref.self_ty().kind() {\n+                                    ty::Param(_) => {\n+                                        // Account for `fn` items like in `issue-35677.rs` to\n+                                        // suggest restricting its type params.\n+                                        let did = self.tcx.hir().body_owner_def_id(hir::BodyId {\n+                                            hir_id: self.body_id,\n+                                        });\n+                                        Some(\n+                                            self.tcx\n+                                                .hir()\n+                                                .get(self.tcx.hir().local_def_id_to_hir_id(did)),\n+                                        )\n+                                    }\n+                                    ty::Adt(def, _) => def.did.as_local().map(|def_id| {\n                                         self.tcx\n                                             .hir()\n                                             .get(self.tcx.hir().local_def_id_to_hir_id(def_id))\n-                                    });\n-                                    if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n-                                        if let Some(g) = kind.generics() {\n-                                            let key = match g.where_clause.predicates {\n-                                                [.., pred] => (pred.span().shrink_to_hi(), false),\n-                                                [] => (\n-                                                    g.where_clause\n-                                                        .span_for_predicates_or_empty_place(),\n-                                                    true,\n-                                                ),\n-                                            };\n-                                            type_params\n-                                                .entry(key)\n-                                                .or_insert_with(FxHashSet::default)\n-                                                .insert(obligation.to_owned());\n-                                        }\n+                                    }),\n+                                    _ => None,\n+                                };\n+                                if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n+                                    if let Some(g) = kind.generics() {\n+                                        let key = match g.where_clause.predicates {\n+                                            [.., pred] => (pred.span().shrink_to_hi(), false),\n+                                            [] => (\n+                                                g.where_clause.span_for_predicates_or_empty_place(),\n+                                                true,\n+                                            ),\n+                                        };\n+                                        type_params\n+                                            .entry(key)\n+                                            .or_insert_with(FxHashSet::default)\n+                                            .insert(obligation.to_owned());\n                                     }\n                                 }\n                             }\n@@ -791,22 +805,109 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             _ => None,\n                         }\n                     };\n+\n+                    // Find all the requirements that come from a local `impl` block.\n+                    let mut skip_list: FxHashSet<_> = Default::default();\n+                    let mut spanned_predicates: FxHashMap<MultiSpan, _> = Default::default();\n+                    for (data, p, parent_p) in unsatisfied_predicates\n+                        .iter()\n+                        .filter_map(|(p, parent, c)| c.as_ref().map(|c| (p, parent, c)))\n+                        .filter_map(|(p, parent, c)| match c.code {\n+                            ObligationCauseCode::ImplDerivedObligation(ref data) => {\n+                                Some((data, p, parent))\n+                            }\n+                            _ => None,\n+                        })\n+                    {\n+                        let parent_trait_ref = data.parent_trait_ref;\n+                        let parent_def_id = parent_trait_ref.def_id();\n+                        let path = parent_trait_ref.print_only_trait_path();\n+                        let tr_self_ty = parent_trait_ref.skip_binder().self_ty();\n+                        let mut candidates = vec![];\n+                        self.tcx.for_each_relevant_impl(\n+                            parent_def_id,\n+                            parent_trait_ref.self_ty().skip_binder(),\n+                            |impl_def_id| match self.tcx.hir().get_if_local(impl_def_id) {\n+                                Some(Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::Impl(hir::Impl { .. }),\n+                                    ..\n+                                })) => {\n+                                    candidates.push(impl_def_id);\n+                                }\n+                                _ => {}\n+                            },\n+                        );\n+                        if let [def_id] = &candidates[..] {\n+                            match self.tcx.hir().get_if_local(*def_id) {\n+                                Some(Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::Impl(hir::Impl { of_trait, self_ty, .. }),\n+                                    ..\n+                                })) => {\n+                                    if let Some(pred) = parent_p {\n+                                        // Done to add the \"doesn't satisfy\" `span_label`.\n+                                        let _ = format_pred(*pred);\n+                                    }\n+                                    skip_list.insert(p);\n+                                    let mut spans = Vec::with_capacity(2);\n+                                    if let Some(trait_ref) = of_trait {\n+                                        spans.push(trait_ref.path.span);\n+                                    }\n+                                    spans.push(self_ty.span);\n+                                    let entry = spanned_predicates.entry(spans.into());\n+                                    entry\n+                                        .or_insert_with(|| (path, tr_self_ty, Vec::new()))\n+                                        .2\n+                                        .push(p);\n+                                }\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n+                    for (span, (path, self_ty, preds)) in spanned_predicates {\n+                        err.span_note(\n+                            span,\n+                            &format!(\n+                                \"the following trait bounds were not satisfied because of the \\\n+                                 requirements of the implementation of `{}` for `{}`:\\n{}\",\n+                                path,\n+                                self_ty,\n+                                preds\n+                                    .into_iter()\n+                                    // .map(|pred| format!(\"{:?}\", pred))\n+                                    .filter_map(|pred| format_pred(*pred))\n+                                    .map(|(p, _)| format!(\"`{}`\", p))\n+                                    .collect::<Vec<_>>()\n+                                    .join(\"\\n\"),\n+                            ),\n+                        );\n+                    }\n+\n+                    // The requirements that didn't have an `impl` span to show.\n                     let mut bound_list = unsatisfied_predicates\n                         .iter()\n-                        .filter_map(|(pred, parent_pred)| {\n-                            format_pred(*pred).map(|(p, self_ty)| match parent_pred {\n-                                None => format!(\"`{}`\", &p),\n-                                Some(parent_pred) => match format_pred(*parent_pred) {\n+                        .filter(|(pred, _, _parent_pred)| !skip_list.contains(&pred))\n+                        .filter_map(|(pred, parent_pred, _cause)| {\n+                            format_pred(*pred).map(|(p, self_ty)| {\n+                                collect_type_param_suggestions(self_ty, pred, &p);\n+                                match parent_pred {\n                                     None => format!(\"`{}`\", &p),\n-                                    Some((parent_p, _)) => {\n-                                        collect_type_param_suggestions(self_ty, parent_pred, &p);\n-                                        format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)\n-                                    }\n-                                },\n+                                    Some(parent_pred) => match format_pred(*parent_pred) {\n+                                        None => format!(\"`{}`\", &p),\n+                                        Some((parent_p, _)) => {\n+                                            collect_type_param_suggestions(\n+                                                self_ty,\n+                                                parent_pred,\n+                                                &p,\n+                                            );\n+                                            format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)\n+                                        }\n+                                    },\n+                                }\n                             })\n                         })\n                         .enumerate()\n                         .collect::<Vec<(usize, String)>>();\n+\n                     for ((span, empty_where), obligations) in type_params.into_iter() {\n                         restrict_type_params = true;\n                         // #74886: Sort here so that the output is always the same.\n@@ -836,7 +937,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     for (span, msg) in bound_spans.into_iter() {\n                         err.span_label(span, &msg);\n                     }\n-                    if !bound_list.is_empty() {\n+                    if !bound_list.is_empty() || !skip_list.is_empty() {\n                         let bound_list = bound_list\n                             .into_iter()\n                             .map(|(_, path)| path)\n@@ -846,9 +947,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.set_primary_message(&format!(\n                             \"the {item_kind} `{item_name}` exists for {actual_prefix} `{ty_str}`, but its trait bounds were not satisfied\"\n                         ));\n-                        err.note(&format!(\n-                            \"the following trait bounds were not satisfied:\\n{bound_list}\"\n-                        ));\n+                        if !bound_list.is_empty() {\n+                            err.note(&format!(\n+                                \"the following trait bounds were not satisfied:\\n{bound_list}\"\n+                            ));\n+                        }\n                         self.suggest_derive(&mut err, &unsatisfied_predicates);\n \n                         unsatisfied_bounds = true;\n@@ -1062,18 +1165,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_note(spans, &msg);\n         }\n \n-        let preds: Vec<_> = errors.iter().map(|e| (e.obligation.predicate, None)).collect();\n+        let preds: Vec<_> = errors\n+            .iter()\n+            .map(|e| (e.obligation.predicate, None, Some(e.obligation.cause.clone())))\n+            .collect();\n         self.suggest_derive(err, &preds);\n     }\n \n     fn suggest_derive(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        unsatisfied_predicates: &Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n+        unsatisfied_predicates: &Vec<(\n+            ty::Predicate<'tcx>,\n+            Option<ty::Predicate<'tcx>>,\n+            Option<ObligationCause<'tcx>>,\n+        )>,\n     ) {\n         let mut derives = Vec::<(String, Span, String)>::new();\n         let mut traits = Vec::<Span>::new();\n-        for (pred, _) in unsatisfied_predicates {\n+        for (pred, _, _) in unsatisfied_predicates {\n             let trait_pred = match pred.kind().skip_binder() {\n                 ty::PredicateKind::Trait(trait_pred) => trait_pred,\n                 _ => continue,\n@@ -1264,7 +1374,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         item_name: Ident,\n         source: SelfSource<'tcx>,\n         valid_out_of_scope_traits: Vec<DefId>,\n-        unsatisfied_predicates: &[(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)],\n+        unsatisfied_predicates: &[(\n+            ty::Predicate<'tcx>,\n+            Option<ty::Predicate<'tcx>>,\n+            Option<ObligationCause<'tcx>>,\n+        )],\n         unsatisfied_bounds: bool,\n     ) {\n         let mut alt_rcvr_sugg = false;\n@@ -1380,7 +1494,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // this isn't perfect (that is, there are cases when\n                 // implementing a trait would be legal but is rejected\n                 // here).\n-                unsatisfied_predicates.iter().all(|(p, _)| {\n+                unsatisfied_predicates.iter().all(|(p, _, _)| {\n                     match p.kind().skip_binder() {\n                         // Hide traits if they are present in predicates as they can be fixed without\n                         // having to implement them."}, {"sha": "498c9f7c64ef6b85f26e7230b5a4066e0e2d83b6", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1990,16 +1990,12 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n         // prove that the trait applies to the types that were\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n-        let mut span = tcx.def_span(def_id);\n-        if tcx.sess.source_map().is_local_span(span) {\n-            // `guess_head_span` reads the actual source file from\n-            // disk to try to determine the 'head' snippet of the span.\n-            // Don't do this for a span that comes from a file outside\n-            // of our crate, since this would make our query output\n-            // (and overall crate metadata) dependent on the\n-            // *current* state of an external file.\n-            span = tcx.sess.source_map().guess_head_span(span);\n-        }\n+        //\n+        // We use a DUMMY_SP here as a way to signal trait bounds that come\n+        // from the trait itself that *shouldn't* be shown as the source of\n+        // an obligation and instead be skipped. Otherwise we'd use\n+        // `tcx.def_span(def_id);`\n+        let span = rustc_span::DUMMY_SP;\n         result.predicates =\n             tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n                 ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(tcx),"}, {"sha": "b72ec404f672a575900678e11c1ea535e211e825", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -33,7 +33,7 @@ trait TraitVisibility { }\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub trait TraitVisibility { }\n \n@@ -46,7 +46,7 @@ trait TraitUnsafety { }\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(except=\"hir_owner,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail5\")]\n #[rustc_clean(cfg=\"cfail6\")]\n unsafe trait TraitUnsafety { }\n \n@@ -60,7 +60,7 @@ trait TraitAddMethod {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(except=\"hir_owner,associated_item_def_ids,predicates_of\", cfg=\"cfail5\")]\n+#[rustc_clean(except=\"hir_owner,associated_item_def_ids\", cfg=\"cfail5\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub trait TraitAddMethod {\n     fn method();"}, {"sha": "e7a9ce94af4d9f52fc0c4c61e19f7097b2709c5d", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::alloc`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn alloc(&self, layout: Layout) -> *mut u8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -21,11 +16,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::dealloc`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -36,11 +26,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::realloc`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -51,11 +36,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "86c62e7b7f12fe0a61b08cb88c8ee2230b253ba4", "filename": "src/test/ui/associated-consts/associated-const-array-len.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n    |\n LL | const X: [i32; <i32 as Foo>::ID] = [0, 1, 2];\n    |                ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n-   |\n-note: required by `Foo::ID`\n-  --> $DIR/associated-const-array-len.rs:2:5\n-   |\n-LL |     const ID: usize;\n-   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "db39fd762c307c056ce5339d32377e95771a8198", "filename": "src/test/ui/associated-consts/issue-63496.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,11 +9,6 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |\n    = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `A::C`\n-  --> $DIR/issue-63496.rs:2:5\n-   |\n-LL |     const C: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:33\n@@ -26,11 +21,6 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |\n    = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `A::C`\n-  --> $DIR/issue-63496.rs:2:5\n-   |\n-LL |     const C: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9ae25a8c222206e27c305920f72a90c580232933", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,11 +9,6 @@ LL |     fn return_n(&self) -> [u8; Bar::X];\n    |\n    = note: cannot satisfy `_: Bar`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `Bar::X`\n-  --> $DIR/issue-48027.rs:2:5\n-   |\n-LL |     const X: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-48027.rs:6:6"}, {"sha": "4ecae471ec2da3909602ebca1931fec9685c623a", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,13 +5,6 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n-note: required by a bound in `Send`\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | / pub unsafe auto trait Send {\n-LL | |     // empty.\n-LL | | }\n-   | |_^ required by this bound in `Send`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n@@ -24,17 +17,6 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n-note: required by a bound in `Iterator`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL | / pub trait Iterator {\n-LL | |     /// The type of the elements being iterated over.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Item;\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ required by this bound in `Iterator`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n@@ -47,17 +29,6 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n-note: required by a bound in `Sync`\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | / pub unsafe auto trait Sync {\n-LL | |     // FIXME(estebank): once support to add notes in `rustc_on_unimplemented`\n-LL | |     // lands in beta, and it has been extended to check whether a closure is\n-LL | |     // anywhere in the requirement chain, extend it as such (#48534):\n-...  |\n-LL | |     // Empty\n-LL | | }\n-   | |_^ required by this bound in `Sync`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Sync {"}, {"sha": "4e2313bd4e4a90709aabcdc0101a2e2cd1fe28db", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,17 +5,6 @@ LL |     type A: Iterator<Item: Debug>;\n    |                            ^^^^^ `<<Self as Case1>::A as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `<<Self as Case1>::A as Iterator>::Item`\n-note: required by a bound in `Debug`\n-  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL | / pub trait Debug {\n-LL | |     /// Formats the value using the given formatter.\n-LL | |     ///\n-LL | |     /// # Examples\n-...  |\n-LL | |     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-LL | | }\n-   | |_^ required by this bound in `Debug`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::A as Iterator>::Item: Debug {\n@@ -27,17 +16,6 @@ error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: Default` is n\n LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n    |                                      ^^^^^^^ the trait `Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n    |\n-note: required by a bound in `Default`\n-  --> $SRC_DIR/core/src/default.rs:LL:COL\n-   |\n-LL | / pub trait Default: Sized {\n-LL | |     /// Returns the \"default value\" for a type.\n-LL | |     ///\n-LL | |     /// Default values are often some kind of initial value, identity value, or anything else that\n-...  |\n-LL | |     fn default() -> Self;\n-LL | | }\n-   | |_^ required by this bound in `Default`\n help: consider further restricting the associated type\n    |\n LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: Default { type Out: Baz<Assoc: Default>; }"}, {"sha": "3eda22796e099aeb4bdf39a5c9ac395f81fa11ae", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |     ToInt::to_int(&g.get())\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required by `ToInt::to_int`\n-  --> $DIR/associated-types-bound-failure.rs:6:5\n-   |\n-LL |     fn to_int(&self) -> isize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting the associated type\n    |\n LL |     where G : GetToInt, <G as GetToInt>::R: ToInt"}, {"sha": "6552c8be7808926e1b4acb7cd25536ed2c708795", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-for-unimpl-trait.rs:4:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}"}, {"sha": "b2ee1b5e6d04527fb56eb6eddb0b65ce4e8d8381", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `T: Get` is not satisfied\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n    |                     ^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-bound.rs:1:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider restricting type parameter `T`\n    |\n LL |     fn uhoh<T: Get>(foo: <T as Get>::Value) {}"}, {"sha": "2e40dbd065d3ef5579d5495b95590646d5e086a0", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-supertrait-2.rs:12:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}"}, {"sha": "da79c7ac77f9d1bf5e64b63a8ad154ef56bde2d3", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:12:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n@@ -19,12 +14,6 @@ error[E0277]: the trait bound `(T, U): Get` is not satisfied\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n-   |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:12:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2e67c21940fc712c05aebfd3170128e287c54434", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n-note: required by a bound in `Get`\n-  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:5:1\n-   |\n-LL | trait Get {\n-   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get;"}, {"sha": "60ec23cf655ab162e80d3a1b6045cc4424fddab3", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     let x: isize = Foo::bar();\n    |                    ^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Foo`\n-note: required by `Foo::bar`\n-  --> $DIR/associated-types-unconstrained.rs:5:5\n-   |\n-LL |     fn bar() -> isize;\n-   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "54f6556c083fd8b55e849b3e336716f9cc6828ae", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,11 +9,6 @@ note: required because of the requirements on the impl of `Visit` for `()`\n    |\n LL | impl<'a> Visit for () where\n    |          ^^^^^     ^^\n-note: required by `Visit::visit`\n-  --> $DIR/issue-44153.rs:6:5\n-   |\n-LL |     fn visit() {}\n-   |     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "085c56870b365b42dbaffff0f88045c3f7bd6178", "filename": "src/test/ui/associated-types/substs-ppaux.normal.stderr", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -82,11 +82,6 @@ note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n-note: required by a bound in `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:30\n-   |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |                              ^^ required by this bound in `Foo::bar`\n \n error: aborting due to 5 previous errors\n ", "previous_filename": "src/test/ui/substs-ppaux.normal.stderr"}, {"sha": "66cd94d7a1b3730f224fdd13c3c44ca10ebb44ba", "filename": "src/test/ui/associated-types/substs-ppaux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "previous_filename": "src/test/ui/substs-ppaux.rs"}, {"sha": "b831f3b7a76d23aef2deaf317863be67d68ee0c8", "filename": "src/test/ui/associated-types/substs-ppaux.verbose.stderr", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -82,11 +82,6 @@ note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n-note: required by a bound in `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:30\n-   |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |                              ^^ required by this bound in `Foo::bar`\n \n error: aborting due to 5 previous errors\n ", "previous_filename": "src/test/ui/substs-ppaux.verbose.stderr"}, {"sha": "a94136cfea1fc44f162f9246256c1fd9c3e29db3", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -42,12 +42,10 @@ async fn bar() -> Result<(), ()> {\n     foo()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n     //~| HELP the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n-    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n-    //~| NOTE in this expansion of desugaring of operator `?`\n     Ok(())\n }\n \n@@ -67,12 +65,10 @@ async fn baz() -> Result<(), ()> {\n     t?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `T`\n     //~| HELP the trait `Try` is not implemented for `T`\n-    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n-    //~| NOTE in this expansion of desugaring of operator `?`\n \n \n     let _: i32 = tuple().0; //~ ERROR no field `0`"}, {"sha": "65c0bc695bfbc12732750ce08004c4027d6e705f", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,35 +5,25 @@ LL |     foo()?;\n    |     ^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n    = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     foo().await?;\n    |          ++++++\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/issue-61076.rs:67:5\n+  --> $DIR/issue-61076.rs:65:5\n    |\n LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n    |\n    = help: the trait `Try` is not implemented for `T`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     t.await?;\n    |      ++++++\n \n error[E0609]: no field `0` on type `impl Future<Output = Tuple>`\n-  --> $DIR/issue-61076.rs:78:26\n+  --> $DIR/issue-61076.rs:74:26\n    |\n LL |     let _: i32 = tuple().0;\n    |                          ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -44,7 +34,7 @@ LL |     let _: i32 = tuple().await.0;\n    |                         ++++++\n \n error[E0609]: no field `a` on type `impl Future<Output = Struct>`\n-  --> $DIR/issue-61076.rs:82:28\n+  --> $DIR/issue-61076.rs:78:28\n    |\n LL |     let _: i32 = struct_().a;\n    |                            ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -55,7 +45,7 @@ LL |     let _: i32 = struct_().await.a;\n    |                           ++++++\n \n error[E0599]: no method named `method` found for opaque type `impl Future<Output = Struct>` in the current scope\n-  --> $DIR/issue-61076.rs:86:15\n+  --> $DIR/issue-61076.rs:82:15\n    |\n LL |     struct_().method();\n    |               ^^^^^^ method not found in `impl Future<Output = Struct>`\n@@ -66,13 +56,13 @@ LL |     struct_().await.method();\n    |               ++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-61076.rs:94:9\n+  --> $DIR/issue-61076.rs:90:9\n    |\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/issue-61076.rs:58:21\n+  --> $DIR/issue-61076.rs:56:21\n    |\n LL | async fn tuple() -> Tuple {\n    |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type"}, {"sha": "eb24040404b90db8c60434af98708c8b523d84f7", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -25,11 +25,6 @@ LL |     [1; ().await];\n    |         ^^^^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n-note: required by `poll`\n-  --> $SRC_DIR/core/src/future/future.rs:LL:COL\n-   |\n-LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1e22373ba6ea10c7105ab0a90dbfa8143ffedfb5", "filename": "src/test/ui/async-await/issue-84841.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     test()?;\n    |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = ()>`\n    |\n    = help: the trait `Try` is not implemented for `impl Future<Output = ()>`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/issue-84841.rs:9:11\n@@ -25,11 +20,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e2ea72a1e617890583230fbc734040c272f528c6", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -34,11 +34,6 @@ LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n-note: required by `poll`\n-  --> $SRC_DIR/core/src/future/future.rs:LL:COL\n-   |\n-LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "83d1a02c876b19e3ca71523aba19fdc147b0005d", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,11 +12,11 @@ note: required because it appears within the type `Sleep`\n    |\n LL | struct Sleep(std::marker::PhantomPinned);\n    |        ^^^^^\n-note: required by `Pin::<P>::new`\n+note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n    |\n-LL |     pub const fn new(pointer: P) -> Pin<P> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n+   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error: aborting due to previous error\n "}, {"sha": "a55850d76c3d8c2e2b5818baad2cffd9b46cb1a0", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,11 +11,6 @@ LL | |     }\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-in-async.rs:17:10\n@@ -30,11 +25,6 @@ LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-in-async.rs:26:6\n@@ -49,11 +39,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "878afb39214adaf4f5a50da71b1bc4a6b2848c8a", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -16,15 +16,15 @@ LL | bug!();\n    = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `{\n-    let res =\n-        ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                                                            &match (&\"u8\",) {\n-                                                                 _args =>\n-                                                                 [::core::fmt::ArgumentV1::new(_args.0,\n-                                                                                               ::core::fmt::Display::fmt)],\n-                                                             }));\n-    res\n-}.as_str()`\n+           let res =\n+               ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n+                                                                   &match (&\"u8\",) {\n+                                                                        _args =>\n+                                                                        [::core::fmt::ArgumentV1::new(_args.0,\n+                                                                                                      ::core::fmt::Display::fmt)],\n+                                                                    }));\n+           res\n+       }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23\n    |\n LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}"}, {"sha": "1e3b071ef92927781fd4db9524547ab77016648e", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -64,13 +64,13 @@ LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n    |                    ^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:49:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:49:26\n    |\n LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n    |     ------------------------------------------------------- definition of `another_bound` from trait\n ...\n LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n+   |                          ^^ impl has extra requirement `'x: 't`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "de654fdc1a4b5540125520e7825586a083a7f672", "filename": "src/test/ui/box/into-boxed-slice-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,11 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-note: required by `Box::<T, A>::into_boxed_slice`\n+note: required by a bound in `Box::<T, A>::into_boxed_slice`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL |     pub fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T, A: Allocator> Box<T, A> {\n+   |      ^ required by this bound in `Box::<T, A>::into_boxed_slice`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:7:13\n@@ -31,11 +31,11 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n-note: required by `Box::<T, A>::into_boxed_slice`\n+note: required by a bound in `Box::<T, A>::into_boxed_slice`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL |     pub fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T, A: Allocator> Box<T, A> {\n+   |      ^ required by this bound in `Box::<T, A>::into_boxed_slice`\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:11:13"}, {"sha": "57902efa2015cb8de239e3d780c9806fd31ae613", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,11 @@ LL |     let s = S {\n    = help: the following implementations were found:\n              <Option<T> as Foo>\n              <i32 as Foo>\n-note: required by `S`\n-  --> $DIR/type_wf.rs:6:1\n+note: required by a bound in `S`\n+  --> $DIR/type_wf.rs:6:13\n    |\n LL | struct S<T: Foo> {\n-   | ^^^^^^^^^^^^^^^^\n+   |             ^^^ required by this bound in `S`\n \n error: aborting due to previous error\n "}, {"sha": "8b38d5ff4592cf9a28eede7f4b86a643ce66b7d5", "filename": "src/test/ui/closures/closure-expected.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,6 +8,11 @@ LL |     let y = x.or_else(4);\n    |\n    = help: the trait `FnOnce<()>` is not implemented for `{integer}`\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `Option::<T>::or_else`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::or_else`\n \n error: aborting due to previous error\n "}, {"sha": "24db272534730a30c7b9ac40def0c09a48ab648e", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,6 +7,11 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n    |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "37230078781ede152614b2e937b9861347e37bb4", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-stack.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,5 +1,4 @@\n error: <unknown>:0:0: in function test i32 (i32, i32, i32, i32, i32): call to non-secure function would require passing arguments on stack\n \n-\n error: aborting due to previous error\n "}, {"sha": "1054c26651270276c87c04fa8b93ab55696103aa", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,5 +1,4 @@\n error: <unknown>:0:0: in function entry_function i32 (i32, i32, i32, i32, i32): secure entry function requires arguments on stack\n \n-\n error: aborting due to previous error\n "}, {"sha": "5b389f24bf15128e287bf32482b5de09ddb12089", "filename": "src/test/ui/coherence/coherence-overlap-trait-alias.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,11 +12,6 @@ LL | impl<T: AB> C for T {}\n LL | #[rustc_strict_coherence]\n LL | impl C for u32 {}\n    | ^^^^^^^^^^^^^^\n-note: required by a bound in `C`\n-  --> $DIR/coherence-overlap-trait-alias.rs:11:1\n-   |\n-LL | trait C {}\n-   | ^^^^^^^ required by this bound in `C`\n \n error: aborting due to previous error\n "}, {"sha": "797a8167931f858331b196c5e330953cb86b429e", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/proj-outlives-region.rs:9:5\n+  --> $DIR/proj-outlives-region.rs:9:23\n    |\n LL |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n LL |     fn foo() where U: 'a { }\n-   |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n+   |                       ^^ impl has extra requirement `U: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "f01d7f4710c382d502ad33b9731b8c9147c4df9e", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region-extra-2.rs:9:5\n+  --> $DIR/region-extra-2.rs:9:53\n    |\n LL |     fn renew<'b: 'a>(self) -> &'b mut [T];\n    |     -------------------------------------- definition of `renew` from trait\n ...\n LL |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n+   |                                                     ^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "4a3af65e9042bc350bdd31865af17e458f767356", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region-extra.rs:9:5\n+  --> $DIR/region-extra.rs:9:24\n    |\n LL |     fn foo();\n    |     --------- definition of `foo` from trait\n ...\n LL |     fn foo() where 'a: 'b { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n+   |                        ^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "f7ae6f94438e2c161c21198560301da13dcb4dd6", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region-unrelated.rs:9:5\n+  --> $DIR/region-unrelated.rs:9:23\n    |\n LL |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n LL |     fn foo() where V: 'a { }\n-   |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n+   |                       ^^ impl has extra requirement `V: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "ce6885c1541f70ddf3928fd6fc98163a3d3649b5", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/trait-bound-on-type-parameter.rs:15:5\n+  --> $DIR/trait-bound-on-type-parameter.rs:15:13\n    |\n LL |   fn b<C,D>(&self, x: C) -> C;\n    |   ---------------------------- definition of `b` from trait\n ...\n LL |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: Sync`\n+   |             ^^^^ impl has extra requirement `F: Sync`\n \n error: aborting due to previous error\n "}, {"sha": "805c04536cac7d74f51c6dfc3a28803a582f9d8f", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,65 +1,65 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:27:5\n+  --> $DIR/traits-misc-mismatch-1.rs:27:26\n    |\n LL |     fn test_error1_fn<T: Eq>(&self);\n    |     -------------------------------- definition of `test_error1_fn` from trait\n ...\n LL |     fn test_error1_fn<T: Ord>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Ord`\n+   |                          ^^^ impl has extra requirement `T: Ord`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:31:5\n+  --> $DIR/traits-misc-mismatch-1.rs:31:31\n    |\n LL |     fn test_error2_fn<T: Eq + Ord>(&self);\n    |     -------------------------------------- definition of `test_error2_fn` from trait\n ...\n LL |     fn test_error2_fn<T: Eq + B>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |                               ^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:35:5\n+  --> $DIR/traits-misc-mismatch-1.rs:35:26\n    |\n LL |     fn test_error3_fn<T: Eq + Ord>(&self);\n    |     -------------------------------------- definition of `test_error3_fn` from trait\n ...\n LL |     fn test_error3_fn<T: B + Eq>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |                          ^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:45:5\n+  --> $DIR/traits-misc-mismatch-1.rs:45:26\n    |\n LL |     fn test_error5_fn<T: A>(&self);\n    |     ------------------------------- definition of `test_error5_fn` from trait\n ...\n LL |     fn test_error5_fn<T: B>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |                          ^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:51:5\n+  --> $DIR/traits-misc-mismatch-1.rs:51:30\n    |\n LL |     fn test_error7_fn<T: A>(&self);\n    |     ------------------------------- definition of `test_error7_fn` from trait\n ...\n LL |     fn test_error7_fn<T: A + Eq>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Eq`\n+   |                              ^^ impl has extra requirement `T: Eq`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:54:5\n+  --> $DIR/traits-misc-mismatch-1.rs:54:26\n    |\n LL |     fn test_error8_fn<T: B>(&self);\n    |     ------------------------------- definition of `test_error8_fn` from trait\n ...\n LL |     fn test_error8_fn<T: C>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: C`\n+   |                          ^ impl has extra requirement `T: C`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:67:5\n+  --> $DIR/traits-misc-mismatch-1.rs:67:18\n    |\n LL |     fn method<G:Getter<isize>>(&self);\n    |     ---------------------------------- definition of `method` from trait\n ...\n LL |     fn method<G: Getter<usize>>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n+   |                  ^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "36bb764d40eb45fabdd141125b49800bc07f5be0", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-2.rs:13:5\n+  --> $DIR/traits-misc-mismatch-2.rs:13:18\n    |\n LL |     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n    |     ------------------------------------------------------------------ definition of `zip` from trait\n ...\n LL |     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: Iterator<B>`\n+   |                  ^^^^^^^^^^^ impl has extra requirement `U: Iterator<B>`\n \n error: aborting due to previous error\n "}, {"sha": "2d400f9bbf5219024adacd9e7590d3cb4be7787c", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,11 +12,6 @@ LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n    |\n    = help: the following implementations were found:\n              <() as Trait<3_u8>>\n-note: required by `WhereClause`\n-  --> $DIR/wfness.rs:8:1\n-   |\n-LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n   --> $DIR/wfness.rs:16:13"}, {"sha": "68ce61bd4a374d3118ba39ab1672716dfa178189", "filename": "src/test/ui/const-generics/dont-evaluate-array-len-on-err-1.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `[Adt; _]: Foo` is not satisfied\n    |\n LL |         <[Adt; std::mem::size_of::<Self::Assoc>()] as Foo>::bar()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; _]`\n-   |\n-note: required by `Foo::bar`\n-  --> $DIR/dont-evaluate-array-len-on-err-1.rs:19:5\n-   |\n-LL |     fn bar() {}\n-   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1a8f4abf52aa3fe04891a0753f2fada263f1f79c", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,11 +10,6 @@ LL |     <() as Foo<N>>::test()\n              <() as Foo<101_u8>>\n              <() as Foo<102_u8>>\n            and 252 others\n-note: required by `Foo::test`\n-  --> $DIR/exhaustive-value.rs:2:5\n-   |\n-LL |     fn test() {}\n-   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "02dce4f7a97e829d1f886d0a8025a41a77d81e64", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -41,11 +41,6 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n-note: required by a bound in `True`\n-  --> $DIR/issue-72787.rs:8:1\n-   |\n-LL | pub trait True {}\n-   | ^^^^^^^^^^^^^^ required by this bound in `True`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:21:26\n@@ -54,11 +49,6 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n-note: required by a bound in `True`\n-  --> $DIR/issue-72787.rs:8:1\n-   |\n-LL | pub trait True {}\n-   | ^^^^^^^^^^^^^^ required by this bound in `True`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0332e82fe0727eefc311ff62320d91826f5c82a2", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-83765.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -14,6 +14,11 @@ LL |         self.reference.size()\n    |                        ^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n+note: required by a bound in `TensorSize::size`\n+  --> $DIR/issue-83765.rs:9:31\n+   |\n+LL |     fn size(&self) -> [usize; Self::DIM];\n+   |                               ^^^^^^^^^ required by this bound in `TensorSize::size`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-83765.rs:32:9"}, {"sha": "486a298a9ffe573510cd84273173c418c9751c51", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,13 +6,11 @@ LL |     let _ = A;\n    |\n    = help: the following implementations were found:\n              <A<7_usize> as Bar<N>>\n-note: required by `A`\n-  --> $DIR/unused-substs-1.rs:7:1\n+note: required by a bound in `A`\n+  --> $DIR/unused-substs-1.rs:9:11\n    |\n-LL | / struct A<const N: usize>\n-LL | | where\n-LL | |     A<N>: Bar<N>;\n-   | |_________________^\n+LL |     A<N>: Bar<N>;\n+   |           ^^^^^^ required by this bound in `A`\n \n error: aborting due to previous error\n "}, {"sha": "45a906a39475bd863047bb54a6b3f264e54ba89e", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -13,12 +13,16 @@ LL | struct NotClone;\n LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method cannot be called on `Bar<NotClone>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NotClone: Clone`\n-           which is required by `Bar<NotClone>: Clone`\n+note: the following trait bounds were not satisfied because of the requirements of the implementation of `Clone` for `_`:\n+      `NotClone: Clone`\n+  --> $DIR/derive-assoc-type-not-impl.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NotClone` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]"}, {"sha": "cc874576cb7b95790db4a29a4b0b2f00520c23b1", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Clone)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a4870635de87001579455dc6a29d38689711bddc", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Clone)]\n LL |      Error\n    |      ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "4507eeccc3aee51301a7212b8d4e8eb961b268e5", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a79be7f574d6f77fc83f67fe1d912a168107ebdb", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "dd2cfaf89bb8f7f13923bb9fec194dbef68026ff", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Default` is not implemented for `Error`\n    |\n-note: required by `std::default::Default::default`\n-  --> $SRC_DIR/core/src/default.rs:LL:COL\n-   |\n-LL |     fn default() -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "0674d635d3d0e2c234940954618897321787aeaa", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Default` is not implemented for `Error`\n    |\n-note: required by `std::default::Default::default`\n-  --> $SRC_DIR/core/src/default.rs:LL:COL\n-   |\n-LL |     fn default() -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7f24be959f01930b3b4a859f358d178871c9ad2a", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Hash)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ae2921a16b315a60556a42b319caf7e31ccc681b", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Hash)]\n LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "37b3af702a0c143fbce682529c90bebe6621f4ac", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "18624667d25ee77a798fce38827f50f88cd02deb", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b52c5a0d6a504793f17d3234de0021d36006724b", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2ea0496ea0db784bbc0c2a8101e8aaa8737263f9", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n LL |      Error\n    |      ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "52cf0cf8cd75d9195089c26b7e1a4bc967b1f4ac", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ecdf8d8cb5931e5063c2ecfee74f28aa0b2a5b4a", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "fc8eb1ebfd3e2189576e73111a938400d7315801", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "38053495a0572aa5b3be11fe6d5271341fa6483f", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "1c07b98f983def4d70adb0f9238aaf9447f4fe6a", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "bf01252b07b8def98007e562d40bfb795cca07a1", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "d64b4509b260bc45981e381d7e8bfa933fde6f8e", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -47,11 +47,6 @@ LL | struct C {\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NoCloneOrEq`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "5381a717dc3cfd2312b14e3c2b0fecb6f88c48ae", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,11 +12,6 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<u8>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -31,11 +26,6 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n@@ -51,11 +41,6 @@ LL |     Foo::<i32>::bar(&true);\n              <bool as Foo<u16>>\n              <bool as Foo<u32>>\n            and 2 others\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dfffbb182ad31566d1044c3d306506915dcff60c", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,11 +12,6 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `Bar<T>`\n-note: required by a bound in `Foo`\n-  --> $DIR/E0275.rs:1:1\n-   |\n-LL | trait Foo {}\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "1013f041bbe3c68fd2a64d26b8356e7170f38769", "filename": "src/test/ui/error-codes/E0276.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/E0276.rs:6:5\n+  --> $DIR/E0276.rs:6:30\n    |\n LL |     fn foo<T>(x: T);\n    |     ---------------- definition of `foo` from trait\n ...\n LL |     fn foo<T>(x: T) where T: Copy {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Copy`\n+   |                              ^^^^ impl has extra requirement `T: Copy`\n \n error: aborting due to previous error\n "}, {"sha": "7dcfe96b35c9a04b4a5600bcae3a93717bf76b7a", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     let cont: u32 = Generator::create();\n    |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Generator`\n-note: required by `Generator::create`\n-  --> $DIR/E0283.rs:2:5\n-   |\n-LL |     fn create() -> u32;\n-   |     ^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24"}, {"sha": "53924e24e4638a40107a6c0e31011d9d7b13dbd2", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -20,6 +20,11 @@ LL | |     });\n    | |_____^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`\n    |\n    = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::and_then`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c5d72d7efefb37fcc3b8694e136a372de15fc4e", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -139,13 +139,6 @@ error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is n\n LL |     type A: Iterator<Item: Copy>;\n    |                            ^^^^ the trait `Copy` is not implemented for `<<Self as _Tr3>::A as Iterator>::Item`\n    |\n-note: required by a bound in `Copy`\n-  --> $SRC_DIR/core/src/marker.rs:LL:COL\n-   |\n-LL | / pub trait Copy: Clone {\n-LL | |     // Empty.\n-LL | | }\n-   | |_^ required by this bound in `Copy`\n help: consider further restricting the associated type\n    |\n LL | trait _Tr3 where <<Self as _Tr3>::A as Iterator>::Item: Copy {"}, {"sha": "bee165437cb15152afa821ebf5f69210a9e56b43", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     format!(\"{:X}\", \"3\");\n    |                     ^^^ the trait `UpperHex` is not implemented for `str`\n    |\n    = note: required because of the requirements on the impl of `UpperHex` for `&str`\n-note: required by `std::fmt::UpperHex::fmt`\n-  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL |     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "86a1c1a34e93036fc5213e83faf3c3de4c1239ab", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,8 +6,6 @@ fn main() {\n         //~| NOTE `&str` is not an iterator\n         //~| HELP the trait `Iterator` is not implemented for `&str`\n         //~| NOTE required because of the requirements on the impl of `IntoIterator` for `&str`\n-        //~| NOTE required by `into_iter`\n-        //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop"}, {"sha": "07ddc8ea78f391707e3a8b857fce0d3b0e916c1a", "filename": "src/test/ui/for/for-c-in-str.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |     for c in \"asdf\" {\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0bdd75b3555be2f81d59822b2db16db1eb91fc0b", "filename": "src/test/ui/for/for-loop-bogosity.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |     for x in bogus {\n    |\n    = help: the trait `Iterator` is not implemented for `MyStruct`\n    = note: required because of the requirements on the impl of `IntoIterator` for `MyStruct`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ee1afbe5b5843cf08116f79ad319255531e7f4ac", "filename": "src/test/ui/generator/yield-outside-generator-issue-78653.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -13,11 +13,6 @@ LL |     yield || for i in 0 { }\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1c8a1f09af5a3228c4a9931a5755189a5a9e1a05", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -59,10 +59,10 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:22:5\n+  --> $DIR/impl_bounds.rs:22:24\n    |\n LL |     fn d() where Self: Copy {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                        ^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n   --> $DIR/impl_bounds.rs:11:10"}, {"sha": "2f29cd5d9e900176a6fa820e796b44a66e6db1e1", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,8 +11,9 @@ LL | | {\n ...  |\n LL | |\n LL | | }\n-   | |_^ ...so that the type `T` will meet its required lifetime bounds...\n+   | |_^\n    |\n+   = note: ...so that the type `T` will meet its required lifetime bounds...\n note: ...that is required by this bound\n   --> $DIR/issue-86483.rs:7:16\n    |"}, {"sha": "8b6f7c41a7c66833de3a3a9081f97fd942d0b058", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,6 +12,7 @@ trait M {\n }\n \n impl<T: X<Y<i32> = i32>> M for T {}\n+//~^ NOTE the following trait bounds were not satisfied\n \n struct S;\n //~^ NOTE method `f` not found for this\n@@ -26,7 +27,6 @@ fn f(a: S) {\n     a.f();\n     //~^ ERROR the method `f` exists for struct `S`, but its trait bounds were not satisfied\n     //~| NOTE method cannot be called on `S` due to unsatisfied trait bounds\n-    //~| NOTE the following trait bounds were not satisfied:\n }\n \n fn main() {}"}, {"sha": "3eeb9540e73513440ba56bd48ec36ee0516a7708", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: the method `f` exists for struct `S`, but its trait bounds were not satisfied\n-  --> $DIR/method-unsatified-assoc-type-predicate.rs:26:7\n+  --> $DIR/method-unsatified-assoc-type-predicate.rs:27:7\n    |\n LL | struct S;\n    | ---------\n@@ -11,9 +11,12 @@ LL | struct S;\n LL |     a.f();\n    |       ^ method cannot be called on `S` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `<S as X>::Y<i32> = i32`\n-           which is required by `S: M`\n+note: the following trait bounds were not satisfied because of the requirements of the implementation of `M` for `_`:\n+      `<S as X>::Y<i32> = i32`\n+  --> $DIR/method-unsatified-assoc-type-predicate.rs:14:26\n+   |\n+LL | impl<T: X<Y<i32> = i32>> M for T {}\n+   |                          ^     ^\n \n error: aborting due to previous error\n "}, {"sha": "a497c6257dab65226de295274c21664eabc767e6", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,13 +10,14 @@ LL | pub struct Map<S, F> {\n LL |     let filter = map.filterx(|x: &_| true);\n    |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-           which is required by `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n-           `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-           which is required by `&Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n-           `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-           which is required by `&mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n+note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+  --> $DIR/issue-30786.rs:106:9\n+   |\n+LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n+   |         ^^^^^^^^^     ^\n \n error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:141:24\n@@ -30,13 +31,14 @@ LL | pub struct Filter<S, F> {\n LL |     let count = filter.countx();\n    |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-           which is required by `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n-           `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-           which is required by `&Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n-           `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-           which is required by `&mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+  --> $DIR/issue-30786.rs:106:9\n+   |\n+LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n+   |         ^^^^^^^^^     ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a497c6257dab65226de295274c21664eabc767e6", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,13 +10,14 @@ LL | pub struct Map<S, F> {\n LL |     let filter = map.filterx(|x: &_| true);\n    |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-           which is required by `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n-           `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-           which is required by `&Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n-           `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n-           which is required by `&mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n+note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n+  --> $DIR/issue-30786.rs:106:9\n+   |\n+LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n+   |         ^^^^^^^^^     ^\n \n error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:141:24\n@@ -30,13 +31,14 @@ LL | pub struct Filter<S, F> {\n LL |     let count = filter.countx();\n    |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-           which is required by `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n-           `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-           which is required by `&Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n-           `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n-           which is required by `&mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n+note: the following trait bounds were not satisfied because of the requirements of the implementation of `StreamExt` for `_`:\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n+  --> $DIR/issue-30786.rs:106:9\n+   |\n+LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n+   |         ^^^^^^^^^     ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5db17cb1bf4ec63b8c49109a354762c5dd0d217e", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -2,12 +2,20 @@ error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m(\n-   |                   ^ expected struct `Unit4`, found associated type\n+   |                   ^ expected associated type, found struct `Unit4`\n    |\n-   = note:       expected struct `Unit4`\n-           found associated type `<_ as Ty<'_>>::V`\n-   = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n+   = note: expected associated type `<_ as Ty<'_>>::V`\n+                       found struct `Unit4`\n+   = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4` or calling a method that returns `<_ as Ty<'_>>::V`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `T1::m`\n+  --> $DIR/issue-62203-hrtb-ice.rs:27:51\n+   |\n+LL |     fn m<'a, B: Ty<'a>, F>(&self, f: F) -> Unit1\n+   |        - required by a bound in this\n+LL |     where\n+LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n+   |                                                   ^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:40:9\n@@ -19,13 +27,21 @@ LL | /         L {\n LL | |\n LL | |             f : |x| { drop(x); Unit4 }\n LL | |         });\n-   | |_________^ expected struct `Unit4`, found struct `Unit3`\n+   | |_________^ expected struct `Unit3`, found struct `Unit4`\n    |\n note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16\n    |\n LL | impl<'a, A, T> T0<'a, A> for L<T>\n    |                ^^^^^^^^^     ^^^^\n+note: required by a bound in `T1::m`\n+  --> $DIR/issue-62203-hrtb-ice.rs:27:12\n+   |\n+LL |     fn m<'a, B: Ty<'a>, F>(&self, f: F) -> Unit1\n+   |        - required by a bound in this\n+LL |     where\n+LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2d1142fd0c52cff2e0c8db7b6adf44d6a8f0458c", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:12:5\n+  --> $DIR/issue-55872-1.rs:12:15\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n ...\n LL |     fn foo<T: Default>() -> Self::E {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n+   |               ^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:29"}, {"sha": "0369196c9108eda7de5377a4d9d4563762ada94c", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,6 +10,15 @@ LL |         .get(&\"key\".into())\n            - impl Borrow<str> for String;\n            - impl<T> Borrow<T> for T\n              where T: ?Sized;\n+note: required by a bound in `HashMap::<K, V, S>::get`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL |         K: Borrow<Q>,\n+   |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n+help: consider specifying the type argument in the function call\n+   |\n+LL |         .get::<Q>(&\"key\".into())\n+   |             +++++\n \n error: aborting due to previous error\n "}, {"sha": "2adcf55eca97f9f4c5801774133db7176ea04b61", "filename": "src/test/ui/issues/issue-14853.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-14853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-14853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14853.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-14853.rs:12:5\n+  --> $DIR/issue-14853.rs:12:15\n    |\n LL |     fn yay<T: Debug>(_: Option<Self>, thing: &[T]);\n    |     ----------------------------------------------- definition of `yay` from trait\n ...\n LL |     fn yay<T: Str>(_:Option<X>, thing: &[T]) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Str`\n+   |               ^^^ impl has extra requirement `T: Str`\n \n error: aborting due to previous error\n "}, {"sha": "efaaeeda2fab6798d18b0b99e1f2eee73d8f9597", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,11 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |         required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n-note: required by `Box::<T>::new`\n+note: required by a bound in `Box::<T>::new`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n-LL |     pub fn new(x: T) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T> Box<T> {\n+   |      ^ required by this bound in `Box::<T>::new`\n \n error: aborting due to previous error\n "}, {"sha": "bd18d46223e69162ae8cdd869df402f0d84b35d7", "filename": "src/test/ui/issues/issue-18611.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `isize: HasState` is not satisfied\n    |\n LL | fn add_state(op: <isize as HasState>::State) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasState` is not implemented for `isize`\n-   |\n-note: required by a bound in `HasState`\n-  --> $DIR/issue-18611.rs:5:1\n-   |\n-LL | trait HasState {\n-   | ^^^^^^^^^^^^^^ required by this bound in `HasState`\n \n error: aborting due to previous error\n "}, {"sha": "af85e5b2b02ab3a9295584aabd2dcdb0e03a5ae6", "filename": "src/test/ui/issues/issue-18937.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -16,8 +16,8 @@ trait A<'a> {\n }\n \n impl<'a> A<'a> for B {\n-    fn foo<F>(&mut self, f: F) //~ ERROR impl has stricter\n-        where F: fmt::Debug + 'static,\n+    fn foo<F>(&mut self, f: F)\n+        where F: fmt::Debug + 'static, //~ ERROR impl has stricter\n     {\n         self.list.push(Box::new(f));\n     }"}, {"sha": "5e2ba0ef4fc5ae4547e45f0766fa3e98e33f1828", "filename": "src/test/ui/issues/issue-18937.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-18937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-18937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18937.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,17 +1,13 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-18937.rs:19:5\n+  --> $DIR/issue-18937.rs:20:31\n    |\n LL | /     fn foo<F>(&mut self, f: F)\n LL | |         where F: fmt::Debug + 'a,\n LL | |               Self: Sized;\n    | |__________________________- definition of `foo` from trait\n ...\n-LL | /     fn foo<F>(&mut self, f: F)\n-LL | |         where F: fmt::Debug + 'static,\n-LL | |     {\n-LL | |         self.list.push(Box::new(f));\n-LL | |     }\n-   | |_____^ impl has extra requirement `F: 'static`\n+LL |           where F: fmt::Debug + 'static,\n+   |                                 ^^^^^^^ impl has extra requirement `F: 'static`\n \n error: aborting due to previous error\n "}, {"sha": "6848c3f0d8a546cc01d1b50a7bc78caec63a081d", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,6 +3,12 @@ error[E0277]: the trait bound `X: Ord` is not satisfied\n    |\n LL |     b.sort();\n    |       ^^^^ the trait `Ord` is not implemented for `X`\n+   |\n+note: required by a bound in `slice::<impl [T]>::sort`\n+  --> $SRC_DIR/alloc/src/slice.rs:LL:COL\n+   |\n+LL |         T: Ord,\n+   |            ^^^ required by this bound in `slice::<impl [T]>::sort`\n \n error: aborting due to previous error\n "}, {"sha": "29352141404199317fab24d480df91af27c55fd7", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -21,11 +21,6 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-20413.rs:1:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:36\n@@ -41,11 +36,6 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-20413.rs:1:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:28:42\n@@ -66,11 +56,6 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n-note: required by a bound in `Baz`\n-  --> $DIR/issue-20413.rs:20:1\n-   |\n-LL | trait Baz {\n-   | ^^^^^^^^^ required by this bound in `Baz`\n \n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:28:42\n@@ -91,11 +76,6 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n-note: required by a bound in `Baz`\n-  --> $DIR/issue-20413.rs:20:1\n-   |\n-LL | trait Baz {\n-   | ^^^^^^^^^ required by this bound in `Baz`\n \n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:36:42\n@@ -116,11 +96,6 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n-note: required by a bound in `Bar`\n-  --> $DIR/issue-20413.rs:16:1\n-   |\n-LL | trait Bar {\n-   | ^^^^^^^^^ required by this bound in `Bar`\n \n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:36:42\n@@ -141,11 +116,6 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n-note: required by a bound in `Bar`\n-  --> $DIR/issue-20413.rs:16:1\n-   |\n-LL | trait Bar {\n-   | ^^^^^^^^^ required by this bound in `Bar`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "41eefe3f8e9b54c605ec61a55fe3dbcbd7f6769e", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |     for item in *things { *item = 0 }\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider mutably borrowing here\n    |\n LL |     for item in &mut *things { *item = 0 }"}, {"sha": "300c1272ef6c0eb9d4811a7b00148ffe81ae2ae6", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL | #[derive(Hash)]\n LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    |\n-note: required by a bound in `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "dfabde9abc97809921a2cc60647bd29086df890d", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot satisfy `&'a T: Foo`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-21974.rs:6:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "ae8233d5c76e6aa2011bead773b94998c719182c", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,6 +7,11 @@ LL |     \"\".chars().fold(|_, _| (), ());\n    |                required by a bound introduced by this call\n    |\n    = help: the trait `FnMut<(_, char)>` is not implemented for `()`\n+note: required by a bound in `fold`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(B, Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `fold`\n \n error: aborting due to previous error\n "}, {"sha": "fa59da852f9018019191a59dc7e3ac22efc0b6b0", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : T\n    |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n    = note: cannot satisfy `T0: Trait0<'l0>`\n-note: required by a bound in `Trait0`\n-  --> $DIR/issue-24424.rs:2:1\n-   |\n-LL | trait Trait0<'l0>  {}\n-   | ^^^^^^^^^^^^^^^^^ required by this bound in `Trait0`\n \n error: aborting due to previous error\n "}, {"sha": "3beb9929244bfce2d248251636bbd5e8d299ab12", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:6:14\n@@ -21,11 +16,6 @@ LL |     for _ in false {}\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:9:28\n@@ -36,11 +26,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:2:13\n@@ -59,11 +44,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:22:28\n@@ -74,11 +54,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:25:14\n@@ -88,11 +63,6 @@ LL |     for _ in false {}\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:18:13"}, {"sha": "5570e887edce5752524df39fb77818b891334b27", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,11 +11,6 @@ LL | impl Foo for S5<u32> { fn xxx(&self) {} }\n    | ^^^^^^^^^^^^^^^^^^^^\n LL | impl Foo for S5<u64> { fn xxx(&self) {} }\n    | ^^^^^^^^^^^^^^^^^^^^\n-note: required by `Foo::xxx`\n-  --> $DIR/issue-29147.rs:10:13\n-   |\n-LL | trait Foo { fn xxx(&self); }\n-   |             ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "48061ae54ae206ebff1f353987d860789eee296f", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,8 +9,6 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n     })\n         .cloned()\n         //~^ ERROR type mismatch resolving\n-        //~| expected type `u8`\n-        //~| found reference `&_`\n         .collect(); //~ ERROR the method\n }\n "}, {"sha": "982b6118ce659bb2fe80aea8a5d4f0cfd53aa681", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -2,13 +2,18 @@ error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [\n   --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()\n-   |          ^^^^^^ expected `u8`, found reference\n+   |          ^^^^^^ expected reference, found `u8`\n    |\n-   = note:   expected type `u8`\n-           found reference `&_`\n+   = note: expected reference `&_`\n+                   found type `u8`\n+note: required by a bound in `cloned`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         Self: Sized + Iterator<Item = &'a T>,\n+   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-31173.rs:14:10\n+  --> $DIR/issue-31173.rs:12:10\n    |\n LL |         .collect();\n    |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>` due to unsatisfied trait bounds"}, {"sha": "b4c3f148e32b5e348f69eb422901bc0086e06529", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |     Err(5)?;\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e7263148205d5e75192c61321bce72eba1815a04", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -2,10 +2,15 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n   --> $DIR/issue-33941.rs:4:36\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |                                    ^^^^^^ expected tuple, found reference\n+   |                                    ^^^^^^ expected reference, found tuple\n    |\n-   = note:  expected tuple `(&_, &_)`\n-           found reference `&_`\n+   = note: expected reference `&_`\n+                  found tuple `(&_, &_)`\n+note: required by a bound in `cloned`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         Self: Sized + Iterator<Item = &'a T>,\n+   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14\n@@ -17,11 +22,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n                   found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14\n@@ -32,11 +32,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "71e02f2fd86cc2426b7ee86332938ee673e23e78", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |                     in this derive macro expansion\n    |\n    = help: the trait `PartialOrd` is not implemented for `Comparable`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "49d6709a8601737aec47b3b09c79e884a90470c3", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -14,6 +14,11 @@ LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_rece\n    |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<(u32, _, _)>`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ffcac1f47057104c4e31cd06c3adc6277b0441a7", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,11 +9,6 @@ note: required because of the requirements on the impl of `Visit` for `()`\n    |\n LL | impl Visit for () where\n    |      ^^^^^     ^^\n-note: required by `Visit::visit`\n-  --> $DIR/issue-39970.rs:6:5\n-   |\n-LL |     fn visit() {}\n-   |     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eb0c80f8f0d1ea23554ee1a2dca4c08db7a1d333", "filename": "src/test/ui/issues/issue-47706-trait.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,6 +7,12 @@ LL |         None::<()>.map(Self::f);\n    |                    --- ^^^^^^^ expected function that takes a single 0-tuple as argument\n    |                    |\n    |                    required by a bound introduced by this call\n+   |\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "237b2b9e798593484377335a816f21af0b527eab", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,6 +8,12 @@ LL |         self.foo.map(Foo::new)\n    |                  --- ^^^^^^^^ expected function that takes 1 argument\n    |                  |\n    |                  required by a bound introduced by this call\n+   |\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9"}, {"sha": "efe2ef504a2ba16fcea5c3a274b745f881dfd2f9", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,11 +11,6 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Tt`\n-note: required by a bound in `Tt::const_val`\n-  --> $DIR/issue-54954.rs:5:24\n-   |\n-LL |     const fn const_val<T: Sized>() -> usize {\n-   |                        ^ required by this bound in `Tt::const_val`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0128b70e21643df4f287da95801adf708835f934", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -15,11 +15,6 @@ LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n    |\n    = note: cannot satisfy `_: Foo`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `Foo::SIZE`\n-  --> $DIR/issue-58022.rs:2:5\n-   |\n-LL |     const SIZE: usize;\n-   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3356180974f88920d2c4244e03f9c3a87db00662", "filename": "src/test/ui/issues/issue-66353.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,12 +11,6 @@ LL |     _Func::< <() as _A>::AssocT >::func(());\n    |     ----------------------------------- ^^ the trait `_Func<_>` is not implemented for `()`\n    |     |\n    |     required by a bound introduced by this call\n-   |\n-note: required by `_Func::func`\n-  --> $DIR/issue-66353.rs:4:5\n-   |\n-LL |     fn func(_: Self);\n-   |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6a96709cbacdb5b5afc406f97550db2c82849af0", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,6 +5,11 @@ LL |     let x2: Vec<f64> = x1.into_iter().collect();\n    |                                       ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n@@ -13,6 +18,11 @@ LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n    |                             ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b53923eec1d8868a5d4da3b0e364120811f9801f", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -18,6 +18,14 @@ LL | impl<T> Element<()> for T {\n ...\n LL | impl<T: Element<S>, S> Element<[S; 3]> for T {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `Foo::foo`\n+  --> $DIR/issue-69683.rs:15:9\n+   |\n+LL |     u8: Element<I>,\n+   |         ^^^^^^^^^^ required by this bound in `Foo::foo`\n+LL | {\n+LL |     fn foo(self, x: <u8 as Element<I>>::Array);\n+   |        --- required by a bound in this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "629ccea2577bd70e81155f0666dc50ca3927542d", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:7:22\n@@ -43,11 +38,6 @@ LL |     |x| String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26\n@@ -87,11 +77,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:22:22\n@@ -117,11 +102,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:29:22\n@@ -147,11 +127,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:38:22\n@@ -177,11 +152,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:22\n@@ -207,11 +177,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:54:22\n@@ -237,11 +202,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:63:22"}, {"sha": "5e2744bab95c1819b7bb067bd082df8a236ebc0d", "filename": "src/test/ui/iterators/integral.stderr", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL |     for _ in 42 {}\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u8` is not an iterator\n   --> $DIR/integral.rs:4:14\n@@ -22,11 +17,6 @@ LL |     for _ in 42 as u8 {}\n    = help: the trait `Iterator` is not implemented for `u8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u8`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i8` is not an iterator\n   --> $DIR/integral.rs:6:14\n@@ -37,11 +27,6 @@ LL |     for _ in 42 as i8 {}\n    = help: the trait `Iterator` is not implemented for `i8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i8`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u16` is not an iterator\n   --> $DIR/integral.rs:8:14\n@@ -52,11 +37,6 @@ LL |     for _ in 42 as u16 {}\n    = help: the trait `Iterator` is not implemented for `u16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u16`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i16` is not an iterator\n   --> $DIR/integral.rs:10:14\n@@ -67,11 +47,6 @@ LL |     for _ in 42 as i16 {}\n    = help: the trait `Iterator` is not implemented for `i16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i16`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u32` is not an iterator\n   --> $DIR/integral.rs:12:14\n@@ -82,11 +57,6 @@ LL |     for _ in 42 as u32 {}\n    = help: the trait `Iterator` is not implemented for `u32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u32`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i32` is not an iterator\n   --> $DIR/integral.rs:14:14\n@@ -97,11 +67,6 @@ LL |     for _ in 42 as i32 {}\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i32`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u64` is not an iterator\n   --> $DIR/integral.rs:16:14\n@@ -112,11 +77,6 @@ LL |     for _ in 42 as u64 {}\n    = help: the trait `Iterator` is not implemented for `u64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u64`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i64` is not an iterator\n   --> $DIR/integral.rs:18:14\n@@ -127,11 +87,6 @@ LL |     for _ in 42 as i64 {}\n    = help: the trait `Iterator` is not implemented for `i64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i64`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `usize` is not an iterator\n   --> $DIR/integral.rs:20:14\n@@ -142,11 +97,6 @@ LL |     for _ in 42 as usize {}\n    = help: the trait `Iterator` is not implemented for `usize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `isize` is not an iterator\n   --> $DIR/integral.rs:22:14\n@@ -157,11 +107,6 @@ LL |     for _ in 42 as isize {}\n    = help: the trait `Iterator` is not implemented for `isize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `isize`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `{float}` is not an iterator\n   --> $DIR/integral.rs:24:14\n@@ -171,11 +116,6 @@ LL |     for _ in 42.0 {}\n    |\n    = help: the trait `Iterator` is not implemented for `{float}`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{float}`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "440a8960a4ca3a3543d89c02619de932abeb9520", "filename": "src/test/ui/iterators/ranges.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL |     for _ in ..10 {}\n    = help: the trait `Iterator` is not implemented for `RangeTo<{integer}>`\n    = note: `..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a bounded `Range`: `0..end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `RangeTo<{integer}>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `RangeToInclusive<{integer}>` is not an iterator\n   --> $DIR/ranges.rs:4:14\n@@ -22,11 +17,6 @@ LL |     for _ in ..=10 {}\n    = help: the trait `Iterator` is not implemented for `RangeToInclusive<{integer}>`\n    = note: `..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant to have a bounded `RangeInclusive`: `0..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `RangeToInclusive<{integer}>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d9c40fe1ba6a41aeca44a69db198d48b871a44c5", "filename": "src/test/ui/iterators/string.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |     for _ in \"\".to_owned() {}\n    |\n    = help: the trait `Iterator` is not implemented for `String`\n    = note: required because of the requirements on the impl of `IntoIterator` for `String`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `&str` is not an iterator\n   --> $DIR/string.rs:4:14\n@@ -20,11 +15,6 @@ LL |     for _ in \"\" {}\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "418f780d62c971ea985059fa1074e79b4c72c4d9", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 317, "deletions": 317, "changes": 634, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,345 +1,345 @@\n error: layout_of(E) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [\n-                        Size {\n-                            raw: 4,\n-                        },\n-                        Size {\n-                            raw: 4,\n-                        },\n-                        Size {\n-                            raw: 8,\n-                        },\n-                    ],\n-                    memory_index: [\n-                        0,\n-                        1,\n-                        2,\n-                    ],\n-                },\n-                variants: Single {\n-                    index: 1,\n-                },\n-                abi: Uninhabited,\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 12,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Aggregate {\n-        sized: true,\n-    },\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 0..=0,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 12,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                               Size {\n+                                   raw: 8,\n+                               },\n+                           ],\n+                           memory_index: [\n+                               0,\n+                               1,\n+                               2,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Uninhabited,\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 12,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 0..=0,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 12,\n+           },\n+       }\n   --> $DIR/debug.rs:6:1\n    |\n LL | enum E { Foo, Bar(!, i32, i32) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(S) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-            Size {\n-                raw: 0,\n-            },\n-            Size {\n-                raw: 4,\n-            },\n-        ],\n-        memory_index: [\n-            1,\n-            0,\n-            2,\n-        ],\n-    },\n-    variants: Single {\n-        index: 0,\n-    },\n-    abi: ScalarPair(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-    ),\n-    largest_niche: None,\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 8,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+                   Size {\n+                       raw: 0,\n+                   },\n+                   Size {\n+                       raw: 4,\n+                   },\n+               ],\n+               memory_index: [\n+                   1,\n+                   0,\n+                   2,\n+               ],\n+           },\n+           variants: Single {\n+               index: 0,\n+           },\n+           abi: ScalarPair(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+           ),\n+           largest_niche: None,\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 8,\n+           },\n+       }\n   --> $DIR/debug.rs:9:1\n    |\n LL | struct S { f1: i32, f2: (), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(U) = Layout {\n-    fields: Union(\n-        2,\n-    ),\n-    variants: Single {\n-        index: 0,\n-    },\n-    abi: Aggregate {\n-        sized: true,\n-    },\n-    largest_niche: None,\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 8,\n-    },\n-}\n+           fields: Union(\n+               2,\n+           ),\n+           variants: Single {\n+               index: 0,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           largest_niche: None,\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 8,\n+           },\n+       }\n   --> $DIR/debug.rs:12:1\n    |\n LL | union U { f1: (i32, i32), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(std::result::Result<i32, i32>) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 0..=1,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [\n-                        Size {\n-                            raw: 4,\n-                        },\n-                    ],\n-                    memory_index: [\n-                        0,\n-                    ],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 8,\n-                },\n-            },\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [\n-                        Size {\n-                            raw: 4,\n-                        },\n-                    ],\n-                    memory_index: [\n-                        0,\n-                    ],\n-                },\n-                variants: Single {\n-                    index: 1,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 8,\n-                },\n-            },\n-        ],\n-    },\n-    abi: ScalarPair(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 0..=1,\n-        },\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 0..=1,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 8,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 8,\n+                       },\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 8,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: ScalarPair(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 0..=1,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 8,\n+           },\n+       }\n   --> $DIR/debug.rs:15:1\n    |\n LL | type Test = Result<i32, i32>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(i32) = Layout {\n-    fields: Primitive,\n-    variants: Single {\n-        index: 0,\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-    ),\n-    largest_niche: None,\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Primitive,\n+           variants: Single {\n+               index: 0,\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+           ),\n+           largest_niche: None,\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/debug.rs:18:1\n    |\n LL | type T = impl std::fmt::Debug;"}, {"sha": "39b23cb4b572ef8e3afb75aa22ccab3b605c1099", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 410, "deletions": 410, "changes": 820, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,438 +1,438 @@\n error: layout_of(A) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 0,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 0..=0,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 0,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 0,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 0..=0,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 0,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:16:1\n    |\n LL | enum A { Apple }\n    | ^^^^^^^^^^^^^^^^\n \n error: layout_of(B) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 0,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 255..=255,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 0,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 0,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 255..=255,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 0,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(C) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 1,\n-                    },\n-                    pref: Align {\n-                        pow2: 1,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 2,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I16,\n-                    false,\n-                ),\n-                valid_range: 256..=256,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 1,\n-        },\n-        pref: Align {\n-            pow2: 1,\n-        },\n-    },\n-    size: Size {\n-        raw: 2,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 1,\n+                           },\n+                           pref: Align {\n+                               pow2: 1,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 2,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I16,\n+                           false,\n+                       ),\n+                       valid_range: 256..=256,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 1,\n+               },\n+               pref: Align {\n+                   pow2: 1,\n+               },\n+           },\n+           size: Size {\n+               raw: 2,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(P) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 268435456..=268435456,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 268435456..=268435456,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(T) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    true,\n-                ),\n-                valid_range: 2164260864..=2164260864,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           true,\n+                       ),\n+                       valid_range: 2164260864..=2164260864,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:34:1\n    |\n LL | enum T { Tangerine = TANGERINE as isize }"}, {"sha": "144ab02792e5018020b06ba9e4346ffc35de1a3b", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 410, "deletions": 410, "changes": 820, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,438 +1,438 @@\n error: layout_of(A) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 0..=0,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 0..=0,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:16:1\n    |\n LL | enum A { Apple }\n    | ^^^^^^^^^^^^^^^^\n \n error: layout_of(B) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 255..=255,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 255..=255,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(C) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 1,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 2,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I16,\n-                    false,\n-                ),\n-                valid_range: 256..=256,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 1,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 2,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 1,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 2,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I16,\n+                           false,\n+                       ),\n+                       valid_range: 256..=256,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 1,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 2,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(P) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 268435456..=268435456,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 268435456..=268435456,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(T) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    true,\n-                ),\n-                valid_range: 2164260864..=2164260864,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           true,\n+                       ),\n+                       valid_range: 2164260864..=2164260864,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:34:1\n    |\n LL | enum T { Tangerine = TANGERINE as isize }"}, {"sha": "1b97f8d818a453a0c400ed3211e9742b49b56bb1", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     &'a (): Foo,\n    |             ^^^ cannot infer type for reference `&'a ()`\n    |\n    = note: cannot satisfy `&'a (): Foo`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-34979.rs:1:1\n-   |\n-LL | trait Foo {}\n-   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "2eeab801e3d9c4914ecf8b9405e4f47bbdeabbfa", "filename": "src/test/ui/marker_trait_attr/region-overlap.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,11 +11,6 @@ LL | impl<'a> A for (&'static (), &'a ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `A`\n-  --> $DIR/region-overlap.rs:4:1\n-   |\n-LL | trait A {}\n-   | ^^^^^^^ required by this bound in `A`\n \n error[E0283]: type annotations needed\n   --> $DIR/region-overlap.rs:6:10\n@@ -30,11 +25,6 @@ LL | impl<'a> A for (&'static (), &'a ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `A`\n-  --> $DIR/region-overlap.rs:4:1\n-   |\n-LL | trait A {}\n-   | ^^^^^^^ required by this bound in `A`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fed47e0f1747179ba5fe92d5a06ddabfd0e4074c", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -125,6 +125,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n ...\n LL | fn foo() {}\n    | -------- takes 0 arguments\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:27:57\n@@ -135,6 +141,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n    |                                                     --- ^^^ expected closure that takes a single 2-tuple as argument\n    |                                                     |\n    |                                                     required by a bound introduced by this call\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:29:57\n@@ -146,6 +158,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(qux);\n ...\n LL | fn qux(x: usize, y: usize) {}\n    | -------------------------- takes 2 distinct arguments\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n   --> $DIR/closure-arg-count.rs:32:45\n@@ -154,6 +172,12 @@ LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n    |                                         --- ^^^^^^^^^^^^^^^^^^ expected function that takes 1 argument\n    |                                         |\n    |                                         required by a bound introduced by this call\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:35:10"}, {"sha": "1f46229cb5a6a666f4a7345513f1b3f3178f1eb3", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.nll.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,6 +5,12 @@ LL |     a.iter().map(|_: (u32, u32)| 45);\n    |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n@@ -13,6 +19,12 @@ LL |     a.iter().map(|_: &(u16, u16)| 45);\n    |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n@@ -21,6 +33,12 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f34ac35c75713764f7d76ffc5049dd49a9dea380", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,6 +5,12 @@ LL |     a.iter().map(|_: (u32, u32)| 45);\n    |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n@@ -13,6 +19,12 @@ LL |     a.iter().map(|_: &(u16, u16)| 45);\n    |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n@@ -21,6 +33,12 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n+   |\n+note: required by a bound in `map`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         F: FnMut(Self::Item) -> B,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5"}, {"sha": "a8bcdf5efe91e30214a5f24f844e1d80dfd2f79a", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,6 +5,12 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`\n    |                                |\n    |                                expected signature of `for<'r> fn(&'r &str) -> _`\n+   |\n+note: required by a bound in `filter`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         P: FnMut(&Self::Item) -> bool,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `filter`\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55"}, {"sha": "13606e498ef7def6410991eb7378197788a2d3dc", "filename": "src/test/ui/missing-trait-bounds/auxiliary/issue-69725.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fauxiliary%2Fissue-69725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fauxiliary%2Fissue-69725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fauxiliary%2Fissue-69725.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "previous_filename": "src/test/ui/issues/auxiliary/issue-69725.rs"}, {"sha": "08174d8d8d53ad476ed5212c055012b1a15136ea", "filename": "src/test/ui/missing-trait-bounds/issue-35677.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.fixed?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+use std::collections::HashSet;\n+use std::hash::Hash;\n+\n+fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash {\n+    this.is_subset(other)\n+    //~^ ERROR the method\n+}\n+\n+fn main() {}"}, {"sha": "2cb394386b8aaf95cff763a357852e0974024764", "filename": "src/test/ui/missing-trait-bounds/issue-35677.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+#![allow(dead_code)]\n use std::collections::HashSet;\n+use std::hash::Hash;\n \n fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool {\n     this.is_subset(other)", "previous_filename": "src/test/ui/issues/issue-35677.rs"}, {"sha": "a2201b946a6f0d5352c8db71b2e1e8f9972f7b62", "filename": "src/test/ui/missing-trait-bounds/issue-35677.stderr", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,12 +1,16 @@\n error[E0599]: the method `is_subset` exists for reference `&HashSet<T>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-35677.rs:4:10\n+  --> $DIR/issue-35677.rs:7:10\n    |\n LL |     this.is_subset(other)\n    |          ^^^^^^^^^ method cannot be called on `&HashSet<T>` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `T: Eq`\n            `T: Hash`\n+help: consider restricting the type parameters to satisfy the trait bounds\n+   |\n+LL | fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash {\n+   |                                                                ++++++++++++++++++++\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/issues/issue-35677.stderr"}, {"sha": "d57badcfd8cf83942e9f1994b1394926754bb82c", "filename": "src/test/ui/missing-trait-bounds/issue-69725.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.fixed?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+// aux-build:issue-69725.rs\n+#![allow(dead_code)]\n+\n+extern crate issue_69725;\n+use issue_69725::Struct;\n+\n+fn crash<A>() where A: Clone {\n+    let _ = Struct::<A>::new().clone();\n+    //~^ ERROR: the method\n+}\n+\n+fn main() {}"}, {"sha": "9c88969c5cff8dffd94f7c669cf23f26f8e722ad", "filename": "src/test/ui/missing-trait-bounds/issue-69725.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n // aux-build:issue-69725.rs\n+#![allow(dead_code)]\n \n extern crate issue_69725;\n use issue_69725::Struct;", "previous_filename": "src/test/ui/issues/issue-69725.rs"}, {"sha": "6395bca300c92da47aff438a5ff942e5a919c36c", "filename": "src/test/ui/missing-trait-bounds/issue-69725.stderr", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fissue-69725.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: the method `clone` exists for struct `Struct<A>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-69725.rs:7:32\n+  --> $DIR/issue-69725.rs:9:32\n    |\n LL |     let _ = Struct::<A>::new().clone();\n    |                                ^^^^^ method cannot be called on `Struct<A>` due to unsatisfied trait bounds\n@@ -12,6 +12,10 @@ LL | pub struct Struct<A>(A);\n    = note: the following trait bounds were not satisfied:\n            `A: Clone`\n            which is required by `Struct<A>: Clone`\n+help: consider restricting the type parameter to satisfy the trait bound\n+   |\n+LL | fn crash<A>() where A: Clone {\n+   |               ++++++++++++++\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/issues/issue-69725.stderr"}, {"sha": "6b24375e41503cc5cb14801243ec85ad745ce6df", "filename": "src/test/ui/missing-trait-bounds/missing-trait-bound-for-op.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.fixed?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "previous_filename": "src/test/ui/suggestions/missing-trait-bound-for-op.fixed"}, {"sha": "df47be070c9ea3fa0e03f2edd76d328ef3023eb7", "filename": "src/test/ui/missing-trait-bounds/missing-trait-bound-for-op.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "previous_filename": "src/test/ui/suggestions/missing-trait-bound-for-op.rs"}, {"sha": "cde0755012594c39fc5fbc96952d545cae1c8c05", "filename": "src/test/ui/missing-trait-bounds/missing-trait-bound-for-op.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bound-for-op.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "previous_filename": "src/test/ui/suggestions/missing-trait-bound-for-op.stderr"}, {"sha": "afd47f71c2cbff4531a5fa4dcbf201cca1bff470", "filename": "src/test/ui/missing-trait-bounds/missing-trait-bounds-for-method-call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.rs?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "previous_filename": "src/test/ui/suggestions/missing-trait-bounds-for-method-call.rs"}, {"sha": "2f0fd692a444a23648e85ed22d6bd9b692937842", "filename": "src/test/ui/missing-trait-bounds/missing-trait-bounds-for-method-call.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "previous_filename": "src/test/ui/suggestions/missing-trait-bounds-for-method-call.stderr"}, {"sha": "a14253e384a3a52f9cf27e4068b14099ab83cb93", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |     <E as From<_>>::from(never);\n    |\n    = help: the following implementations were found:\n              <E as From<!>>\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "76aa128e242f922a88fbb099e7139470fa137b81", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:18\n@@ -22,11 +17,6 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:18\n@@ -37,11 +27,6 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:5"}, {"sha": "940763fae51b8096ebbf4591163393c76fe23441", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,6 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/on-impl.rs:9:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:5"}, {"sha": "4b191710c393ad141b0683173bc5f8b48a017146", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -25,11 +25,6 @@ LL | |     }.hi() {\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ce4e1553d28e52b54e970a233bda9994bc3c53b", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,11 +12,6 @@ LL |     for i in false..true {}\n    |\n    = note: required because of the requirements on the impl of `Iterator` for `std::ops::Range<bool>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `std::ops::Range<bool>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n   --> $DIR/range-1.rs:14:17"}, {"sha": "617afc995305e5956e7ce55582f718d7ae094991", "filename": "src/test/ui/range/range_traits-1.stderr", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n@@ -25,11 +20,6 @@ LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n@@ -42,11 +32,6 @@ LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n@@ -59,11 +44,6 @@ LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n@@ -76,11 +56,6 @@ LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n@@ -93,11 +68,6 @@ LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::Range<usize>: Ord` is not satisfied\n@@ -109,11 +79,6 @@ LL | struct AllTheRanges {\n LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::Range<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeTo<usize>: Ord` is not satisfied\n@@ -125,11 +90,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeTo<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFrom<usize>: Ord` is not satisfied\n@@ -141,11 +101,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFrom<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFull: Ord` is not satisfied\n@@ -157,11 +112,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFull`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeInclusive<usize>: Ord` is not satisfied\n@@ -173,11 +123,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeInclusive<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeToInclusive<usize>: Ord` is not satisfied\n@@ -189,11 +134,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeToInclusive<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors"}, {"sha": "318e9d006a1485c4e354b2ebcbdf70606aea0716", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,7 +4,11 @@ error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n LL |     Foo.some_method::<&'a isize>();\n    |         ^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-method-type-parameters.rs:8:22\n+   |\n+LL |     fn some_method<A:'static>(self) { }\n+   |                      ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "512a7ab35fbfdead4e829465ae92baface621df9", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -29,7 +29,13 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^ ...so that the type `T` will meet its required lifetime bounds\n+   |              ^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/regions-close-object-into-object-5.rs:9:17\n+   |\n+LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n+   |                 ^^\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:14"}, {"sha": "3fc5cb1b079734ad94d5a8df71daf9248b1fbaec", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -544,11 +544,6 @@ LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:44:19\n@@ -566,11 +561,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:54:8\n@@ -710,11 +700,6 @@ LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:94:11\n@@ -747,11 +732,6 @@ LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:108:22\n@@ -769,11 +749,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:118:11\n@@ -913,11 +888,6 @@ LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:171:5\n@@ -938,11 +908,6 @@ LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:181:16\n@@ -960,11 +925,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:196:10\n@@ -993,11 +953,6 @@ LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 103 previous errors; 1 warning emitted\n "}, {"sha": "154a6a35a44efdcb25233065f4ef9811b0e9596d", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -31,17 +31,6 @@ note: multiple `impl`s satisfying `i32: Add` found\n LL | impl const std::ops::Add for i32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: and another `impl` found in the `core` crate: `impl Add for i32;`\n-note: required by a bound in `Add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | / pub trait Add<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `+` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `Add`\n \n error[E0283]: type annotations needed\n   --> $DIR/const-and-non-const-impl.rs:14:6\n@@ -57,17 +46,6 @@ LL | impl std::ops::Add for Int {\n ...\n LL | impl const std::ops::Add for Int {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `Add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | / pub trait Add<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `+` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `Add`\n \n error[E0283]: type annotations needed\n   --> $DIR/const-and-non-const-impl.rs:22:12\n@@ -83,17 +61,6 @@ LL | impl std::ops::Add for Int {\n ...\n LL | impl const std::ops::Add for Int {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `Add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL | / pub trait Add<Rhs = Self> {\n-LL | |     /// The resulting type after applying the `+` operator.\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     type Output;\n-...  |\n-LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `Add`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "04c21101e758b62e1058b35812e3060116abd34f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -42,11 +42,11 @@ error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |\n-note: required by `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:1\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n \n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5"}, {"sha": "04c21101e758b62e1058b35812e3060116abd34f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -42,11 +42,11 @@ error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |\n-note: required by `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:1\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n \n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5"}, {"sha": "08d91d7daf85b8ac13c5a110e5ba21736c1e7ee9", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::b`\n-  --> $DIR/trait-where-clause.rs:8:5\n+note: required by a bound in `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:24\n    |\n LL |     fn b() where Self: ~const Bar;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n help: consider further restricting this bound\n    |\n LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n@@ -20,11 +20,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:5\n+note: required by a bound in `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:13\n    |\n LL |     fn c<T: ~const Bar>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n@@ -36,11 +36,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::b`\n-  --> $DIR/trait-where-clause.rs:8:5\n+note: required by a bound in `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:24\n    |\n LL |     fn b() where Self: ~const Bar;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n help: consider further restricting this bound\n    |\n LL | fn test3<T: Foo + Bar>() {\n@@ -52,11 +52,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:5\n+note: required by a bound in `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:13\n    |\n LL |     fn c<T: ~const Bar>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n LL | fn test3<T: Foo + Bar>() {"}, {"sha": "92445e4073130678d69cd3e236409682a31cd079", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `u8: Tr` is not satisfied\n    |\n LL |     let a: u8 = Tr::C;\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n-   |\n-note: required by `Tr::C`\n-  --> $DIR/issue-29595.rs:2:5\n-   |\n-LL |     const C: Self;\n-   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "81e2a9a1ffcc7f44d743159ff907bd2b335123c1", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -20,8 +20,12 @@ LL | struct MyStruct;\n LL |     println!(\"{}\", MyStruct.foo_one());\n    |                             ^^^^^^^ method cannot be called on `MyStruct` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `MyStruct: Foo`\n+note: the following trait bounds were not satisfied because of the requirements of the implementation of `Foo` for `_`:\n+      `MyStruct: Foo`\n+  --> $DIR/specialization-trait-not-implemented.rs:14:17\n+   |\n+LL | default impl<T> Foo for T {\n+   |                 ^^^     ^\n note: the following trait must be implemented\n   --> $DIR/specialization-trait-not-implemented.rs:7:1\n    |"}, {"sha": "9c3c3646139dc2ec955f70a2570e08d08a621b91", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -20,6 +20,11 @@ LL |     let _ = s.get(4);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+   |                   ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n@@ -32,6 +37,11 @@ LL |     let _ = s.get_unchecked(4);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get_unchecked`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n+   |                                    ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:17"}, {"sha": "2559ee9eb49b25f3ff0ad8c8ed4a7c12f9aff049", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -44,6 +44,11 @@ LL |     s.get_mut(1);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get_mut`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+   |                       ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n@@ -56,6 +61,11 @@ LL |     s.get_unchecked_mut(1);\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n+   |                                        ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:5"}, {"sha": "7a80e7270ba36f9682c5b4d7b6707537722b20c8", "filename": "src/test/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `NoClone: Clone` is not satisfied\n LL |     let s = A { a: NoClone };\n    |             ^ the trait `Clone` is not implemented for `NoClone`\n    |\n-note: required by `S`\n-  --> $DIR/struct-path-alias-bounds.rs:3:1\n+note: required by a bound in `S`\n+  --> $DIR/struct-path-alias-bounds.rs:3:13\n    |\n LL | struct S<T: Clone> { a: T }\n-   | ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^ required by this bound in `S`\n \n error: aborting due to previous error\n "}, {"sha": "7ef4895249cec7218f08a5836b9dd9edc0d817c2", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -46,11 +46,11 @@ LL |     Pin::new(x)\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n    |\n    = note: consider using `Box::pin`\n-note: required by `Pin::<P>::new`\n+note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n    |\n-LL |     pub const fn new(pointer: P) -> Pin<P> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n+   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:24:5\n@@ -59,11 +59,11 @@ LL |     Pin::new(Box::new(x))\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n    |\n    = note: consider using `Box::pin`\n-note: required by `Pin::<P>::new`\n+note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n    |\n-LL |     pub const fn new(pointer: P) -> Pin<P> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n+   |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:28:5"}, {"sha": "bc1c69406d139c138add6ee92c32d22ec7292567", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,6 +8,11 @@ LL |     println!(\"{:?}\", line.find(pattern));\n    |\n    = note: the trait bound `String: Pattern<'_>` is not satisfied\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\n+note: required by a bound in `core::str::<impl str>::find`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n+   |                        ^^^^^^^^^^^ required by this bound in `core::str::<impl str>::find`\n help: consider borrowing here\n    |\n LL |     println!(\"{:?}\", line.find(&pattern));"}, {"sha": "f257bb9b0e88744ea061f22a8d9ad939f6a9ea72", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     SadGirl {}.call()?;\n    |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n    = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     SadGirl {}.call().await?;"}, {"sha": "24c989ec3e86d51f2168e8f87988bdbda7353b4b", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,14 @@ LL |     let o = Other::new(f);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-note: required by `Other::<'a, G>::new`\n-  --> $DIR/issue-84973.rs:27:5\n+note: required by a bound in `Other::<'a, G>::new`\n+  --> $DIR/issue-84973.rs:25:8\n    |\n+LL |     G: SomeTrait,\n+   |        ^^^^^^^^^ required by this bound in `Other::<'a, G>::new`\n+LL | {\n LL |     pub fn new(g: G) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            --- required by a bound in this\n help: consider borrowing here\n    |\n LL |     let o = Other::new(&f);"}, {"sha": "adb928aa8a3766e73cf79d6fba51de548f4afffb", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,11 +11,16 @@ note: the parameter type `T` must be valid for the anonymous lifetime defined he\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds...\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n    |\n LL |     foo.bar(move |_| {\n    |         ^^^\n+note: ...that is required by this bound\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:11:12\n+   |\n+LL |         F: 'a,\n+   |            ^^\n \n error: aborting due to previous error\n "}, {"sha": "d121932c842e35324a8a8f1060e4713f8dd8ab0c", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,11 @@ LL |     let fp = BufWriter::new(fp);\n    |              required by a bound introduced by this call\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n-note: required by `BufWriter::<W>::new`\n+note: required by a bound in `BufWriter::<W>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n-LL |     pub fn new(inner: W) -> BufWriter<W> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<W: Write> BufWriter<W> {\n+   |         ^^^^^ required by this bound in `BufWriter::<W>::new`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14"}, {"sha": "fd2a44f9a82ba448f0ad28574d18342cff567635", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |   for _ in v[1..] {\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for _ in &v[1..] {\n@@ -26,11 +21,6 @@ LL |   for _ in v[1..] {\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for _ in &v[1..] {\n@@ -46,11 +36,6 @@ LL |   for i2 in v2[1..] {\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for i2 in &v2[1..] {\n@@ -66,11 +51,6 @@ LL |   for i2 in v2[1..] {\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for i2 in &v2[1..] {"}, {"sha": "2fa69cd5a2c8d51ac988d16af597a23bb93aeb7a", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,11 @@ LL |         let mut stream_reader = BufReader::new(&stream);\n    |                                 |\n    |                                 required by a bound introduced by this call\n    |\n-note: required by `BufReader::<R>::new`\n+note: required by a bound in `BufReader::<R>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n    |\n-LL |     pub fn new(inner: R) -> BufReader<R> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<R: Read> BufReader<R> {\n+   |         ^^^^ required by this bound in `BufReader::<R>::new`\n help: consider removing the leading `&`-reference\n    |\n LL -         let mut stream_reader = BufReader::new(&stream);"}, {"sha": "1083b2f971311c21d28cb86a6feeb2ba11e7eff5", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,11 +9,6 @@ LL |     for (i, _) in &v.iter().enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "197b19a1bffc273fb9b8ec02226c781c9cda2c69", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -9,11 +9,6 @@ LL |     for (i, _) in & & & & &v.iter().enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bb0cceac1db7b6d9a625627575b45a8c547d2f55", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -13,11 +13,6 @@ LL | |          .enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8befa4c5f738ba4c507111f57ea7e4d806ad21df", "filename": "src/test/ui/traits/bad-method-typaram-kind.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,6 +4,11 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n+note: required by a bound in `Bar::bar`\n+  --> $DIR/bad-method-typaram-kind.rs:6:14\n+   |\n+LL |     fn bar<T:Send>(&self);\n+   |              ^^^^ required by this bound in `Bar::bar`\n help: consider further restricting this bound\n    |\n LL | fn foo<T:'static + std::marker::Send>() {"}, {"sha": "6f9113fff516193e80bdca725a5e33454a25cf74", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -29,11 +29,11 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n-note: required by `Vec::<T>::new`\n+note: required by a bound in `Vec::<T>::new`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n-LL |     pub const fn new() -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T> Vec<T> {\n+   |      ^ required by this bound in `Vec::<T>::new`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37"}, {"sha": "c9068a270020d323dade48baed4b3725aa63be0e", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -16,11 +16,11 @@ error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`\n    |\n-note: required by `Foo`\n-  --> $DIR/on-structs-and-enums-locals.rs:5:1\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums-locals.rs:5:14\n    |\n LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^ required by this bound in `Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f4cc64af94f371f5d2fb1b8d7a84827a3b89e19d", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -16,11 +16,11 @@ error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`\n    |\n-note: required by `Foo`\n-  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:1\n+note: required by a bound in `Foo`\n+  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18\n    |\n LL | pub struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^ required by this bound in `Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2bff84363e9e511ee54f0fc5965417474454058c", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -20,24 +20,13 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n    |\n LL |     <dyn CompareToInts>::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n-   |\n-note: required by `CompareTo::same_as`\n-  --> $DIR/repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:38:5\n    |\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n-note: required by `CompareTo::same_as`\n-  --> $DIR/repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {"}, {"sha": "45b1e1095c7d8db9629fb9e906b6787ce679a1cf", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |     the_foos: Vec<Foo>,\n    |     ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Foo`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "3c4a5d95c137ec6e9cdd752ca26ecef24f171c64", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,6 +10,15 @@ LL |     opts.get(opt.as_ref());\n            - impl Borrow<str> for String;\n            - impl<T> Borrow<T> for T\n              where T: ?Sized;\n+note: required by a bound in `HashMap::<K, V, S>::get`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL |         K: Borrow<Q>,\n+   |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n+help: consider specifying the type argument in the function call\n+   |\n+LL |     opts.get::<Q>(opt.as_ref());\n+   |             +++++\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:8:18\n@@ -50,11 +59,6 @@ LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect(\n            - impl From<bool> for u32;\n            - impl From<char> for u32;\n            and 3 more\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:36:16"}, {"sha": "3e83db142e0871cbbd45983b825c8e25470aa539", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,11 +10,6 @@ LL |     bar: &'a mut T\n    = help: the following implementations were found:\n              <&T as Clone>\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "33b12ef09ec26faa87dd7bb15fec57b28fc5917e", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,15 +5,6 @@ LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n    |\n    = note: cannot satisfy `T: FnMut<(&'a (),)>`\n-note: required by a bound in `FnMut`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL | / pub trait FnMut<Args>: FnOnce<Args> {\n-LL | |     /// Performs the call operation.\n-LL | |     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-LL | |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n-LL | | }\n-   | |_^ required by this bound in `FnMut`\n \n error: aborting due to previous error\n "}, {"sha": "c5d4ccc2fcd91105db992968856a6f4fbf3b3f47", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -7,11 +7,11 @@ LL |     Outer(TestType);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `dummy::TestType`\n-note: required by `Outer`\n-  --> $DIR/negated-auto-traits-error.rs:10:1\n+note: required by a bound in `Outer`\n+  --> $DIR/negated-auto-traits-error.rs:10:17\n    |\n LL | struct Outer<T: Send>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^ required by this bound in `Outer`\n \n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:5"}, {"sha": "3d5bf3448bd5d64539c0bfc3067af8e0ef9ee097", "filename": "src/test/ui/traits/reservation-impl/no-use.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |     <() as MyTrait>::foo(&());\n    |\n    = help: the following implementations were found:\n              <() as MyTrait>\n-note: required by `MyTrait::foo`\n-  --> $DIR/no-use.rs:5:17\n-   |\n-LL | trait MyTrait { fn foo(&self); }\n-   |                 ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1a0bcf00a673a6ba1858e2e86b45978ca288922c", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     let _f: base::Foo = base::HasNew::new();\n    |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: HasNew<Foo>`\n-note: required by `HasNew::new`\n-  --> $DIR/static-method-generic-inference.rs:8:9\n-   |\n-LL |         fn new() -> T;\n-   |         ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e2cdd368888a8d6496568e883110a4e3b0f8f4be", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -49,11 +49,6 @@ error[E0277]: the trait bound `u64: From<T>` is not satisfied\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `u64`\n    |\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<T> {\n@@ -65,11 +60,6 @@ error[E0277]: the trait bound `u64: From<<T as Iterator>::Item>` is not satisfie\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<<T as Iterator>::Item>` is not implemented for `u64`\n    |\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<<T as Iterator>::Item> {\n@@ -80,12 +70,6 @@ error[E0277]: the trait bound `Misc<_>: From<T>` is not satisfied\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `Misc<_>`\n-   |\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:28:20"}, {"sha": "2b3e3de9b1ab4bdb6f9d231ecf2eaef20a89f1b2", "filename": "src/test/ui/traits/vtable-res-trait-param.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable-res-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable-res-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable-res-trait-param.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,6 +5,12 @@ LL |     b.gimme_an_a(y)\n    |       ---------- ^ the trait `TraitA` is not implemented for `{integer}`\n    |       |\n    |       required by a bound introduced by this call\n+   |\n+note: required by a bound in `TraitB::gimme_an_a`\n+  --> $DIR/vtable-res-trait-param.rs:6:21\n+   |\n+LL |     fn gimme_an_a<A:TraitA>(&self, a: A) -> isize;\n+   |                     ^^^^^^ required by this bound in `TraitB::gimme_an_a`\n \n error: aborting due to previous error\n "}, {"sha": "f71bed84d5627fdd7d9422e1eb16475207e91e1f", "filename": "src/test/ui/traits/vtable/vtable-diamond.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,13 +1,13 @@\n error: vtable entries for `<S as D>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as B>::foo_b),\n-    Method(<S as C>::foo_c),\n-    TraitVPtr(<S as C>),\n-    Method(<S as D>::foo_d),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as B>::foo_b),\n+           Method(<S as C>::foo_c),\n+           TraitVPtr(<S as C>),\n+           Method(<S as D>::foo_d),\n+       ]\n   --> $DIR/vtable-diamond.rs:21:1\n    |\n LL | / trait D: B + C {\n@@ -17,12 +17,12 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as C>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as C>::foo_c),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as C>::foo_c),\n+       ]\n   --> $DIR/vtable-diamond.rs:15:1\n    |\n LL | / trait C: A {"}, {"sha": "915fd701b03365b8108962905f2cd0fa602fc035", "filename": "src/test/ui/traits/vtable/vtable-multi-level.stderr", "status": "modified", "additions": 104, "deletions": 104, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,34 +1,34 @@\n error: vtable entries for `<S as O>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as B>::foo_b),\n-    TraitVPtr(<S as B>),\n-    Method(<S as C>::foo_c),\n-    Method(<S as D>::foo_d),\n-    TraitVPtr(<S as D>),\n-    Method(<S as E>::foo_e),\n-    TraitVPtr(<S as E>),\n-    Method(<S as F>::foo_f),\n-    TraitVPtr(<S as F>),\n-    Method(<S as G>::foo_g),\n-    Method(<S as H>::foo_h),\n-    TraitVPtr(<S as H>),\n-    Method(<S as I>::foo_i),\n-    TraitVPtr(<S as I>),\n-    Method(<S as J>::foo_j),\n-    TraitVPtr(<S as J>),\n-    Method(<S as K>::foo_k),\n-    TraitVPtr(<S as K>),\n-    Method(<S as L>::foo_l),\n-    TraitVPtr(<S as L>),\n-    Method(<S as M>::foo_m),\n-    TraitVPtr(<S as M>),\n-    Method(<S as N>::foo_n),\n-    TraitVPtr(<S as N>),\n-    Method(<S as O>::foo_o),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as B>::foo_b),\n+           TraitVPtr(<S as B>),\n+           Method(<S as C>::foo_c),\n+           Method(<S as D>::foo_d),\n+           TraitVPtr(<S as D>),\n+           Method(<S as E>::foo_e),\n+           TraitVPtr(<S as E>),\n+           Method(<S as F>::foo_f),\n+           TraitVPtr(<S as F>),\n+           Method(<S as G>::foo_g),\n+           Method(<S as H>::foo_h),\n+           TraitVPtr(<S as H>),\n+           Method(<S as I>::foo_i),\n+           TraitVPtr(<S as I>),\n+           Method(<S as J>::foo_j),\n+           TraitVPtr(<S as J>),\n+           Method(<S as K>::foo_k),\n+           TraitVPtr(<S as K>),\n+           Method(<S as L>::foo_l),\n+           TraitVPtr(<S as L>),\n+           Method(<S as M>::foo_m),\n+           TraitVPtr(<S as M>),\n+           Method(<S as N>::foo_n),\n+           TraitVPtr(<S as N>),\n+           Method(<S as O>::foo_o),\n+       ]\n   --> $DIR/vtable-multi-level.rs:95:1\n    |\n LL | / trait O: G + N {\n@@ -38,11 +38,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as B>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as B>::foo_b),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as B>::foo_b),\n+       ]\n   --> $DIR/vtable-multi-level.rs:19:1\n    |\n LL | / trait B {\n@@ -52,11 +52,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as D>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as D>::foo_d),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as D>::foo_d),\n+       ]\n   --> $DIR/vtable-multi-level.rs:30:1\n    |\n LL | / trait D {\n@@ -66,11 +66,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as E>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as E>::foo_e),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as E>::foo_e),\n+       ]\n   --> $DIR/vtable-multi-level.rs:36:1\n    |\n LL | / trait E {\n@@ -80,14 +80,14 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as F>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as D>::foo_d),\n-    Method(<S as E>::foo_e),\n-    TraitVPtr(<S as E>),\n-    Method(<S as F>::foo_f),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as D>::foo_d),\n+           Method(<S as E>::foo_e),\n+           TraitVPtr(<S as E>),\n+           Method(<S as F>::foo_f),\n+       ]\n   --> $DIR/vtable-multi-level.rs:42:1\n    |\n LL | / trait F: D + E {\n@@ -97,11 +97,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as H>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as H>::foo_h),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as H>::foo_h),\n+       ]\n   --> $DIR/vtable-multi-level.rs:53:1\n    |\n LL | / trait H {\n@@ -111,11 +111,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as I>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as I>::foo_i),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as I>::foo_i),\n+       ]\n   --> $DIR/vtable-multi-level.rs:59:1\n    |\n LL | / trait I {\n@@ -125,14 +125,14 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as J>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as H>::foo_h),\n-    Method(<S as I>::foo_i),\n-    TraitVPtr(<S as I>),\n-    Method(<S as J>::foo_j),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as H>::foo_h),\n+           Method(<S as I>::foo_i),\n+           TraitVPtr(<S as I>),\n+           Method(<S as J>::foo_j),\n+       ]\n   --> $DIR/vtable-multi-level.rs:65:1\n    |\n LL | / trait J: H + I {\n@@ -142,11 +142,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as K>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as K>::foo_k),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as K>::foo_k),\n+       ]\n   --> $DIR/vtable-multi-level.rs:71:1\n    |\n LL | / trait K {\n@@ -156,11 +156,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as L>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as L>::foo_l),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as L>::foo_l),\n+       ]\n   --> $DIR/vtable-multi-level.rs:77:1\n    |\n LL | / trait L {\n@@ -170,14 +170,14 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as M>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as K>::foo_k),\n-    Method(<S as L>::foo_l),\n-    TraitVPtr(<S as L>),\n-    Method(<S as M>::foo_m),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as K>::foo_k),\n+           Method(<S as L>::foo_l),\n+           TraitVPtr(<S as L>),\n+           Method(<S as M>::foo_m),\n+       ]\n   --> $DIR/vtable-multi-level.rs:83:1\n    |\n LL | / trait M: K + L {\n@@ -187,21 +187,21 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as N>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as H>::foo_h),\n-    Method(<S as I>::foo_i),\n-    TraitVPtr(<S as I>),\n-    Method(<S as J>::foo_j),\n-    Method(<S as K>::foo_k),\n-    TraitVPtr(<S as K>),\n-    Method(<S as L>::foo_l),\n-    TraitVPtr(<S as L>),\n-    Method(<S as M>::foo_m),\n-    TraitVPtr(<S as M>),\n-    Method(<S as N>::foo_n),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as H>::foo_h),\n+           Method(<S as I>::foo_i),\n+           TraitVPtr(<S as I>),\n+           Method(<S as J>::foo_j),\n+           Method(<S as K>::foo_k),\n+           TraitVPtr(<S as K>),\n+           Method(<S as L>::foo_l),\n+           TraitVPtr(<S as L>),\n+           Method(<S as M>::foo_m),\n+           TraitVPtr(<S as M>),\n+           Method(<S as N>::foo_n),\n+       ]\n   --> $DIR/vtable-multi-level.rs:89:1\n    |\n LL | / trait N: J + M {"}, {"sha": "f1c8947f9069f76e1b46becaa4fae1b69cb743c9", "filename": "src/test/ui/traits/vtable/vtable-multiple.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,12 +1,12 @@\n error: vtable entries for `<S as C>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as B>::foo_b),\n-    TraitVPtr(<S as B>),\n-    Method(<S as C>::foo_c),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as B>::foo_b),\n+           TraitVPtr(<S as B>),\n+           Method(<S as C>::foo_c),\n+       ]\n   --> $DIR/vtable-multiple.rs:16:1\n    |\n LL | / trait C: A + B {\n@@ -16,11 +16,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as B>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as B>::foo_b),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as B>::foo_b),\n+       ]\n   --> $DIR/vtable-multiple.rs:10:1\n    |\n LL | / trait B {"}, {"sha": "bbfbde222f3344fde1ef1a0b67325f9af535e8eb", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,12 +1,12 @@\n error: vtable entries for `<std::vec::IntoIter<u8> as A>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<std::vec::IntoIter<u8> as Iterator>::next),\n-    Method(<std::vec::IntoIter<u8> as Iterator>::size_hint),\n-    Method(<std::vec::IntoIter<u8> as Iterator>::advance_by),\n-    Method(<std::vec::IntoIter<u8> as Iterator>::nth),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<std::vec::IntoIter<u8> as Iterator>::next),\n+           Method(<std::vec::IntoIter<u8> as Iterator>::size_hint),\n+           Method(<std::vec::IntoIter<u8> as Iterator>::advance_by),\n+           Method(<std::vec::IntoIter<u8> as Iterator>::nth),\n+       ]\n   --> $DIR/vtable-non-object-safe.rs:8:1\n    |\n LL | trait A: Iterator {}"}, {"sha": "c8cf58399723cea1c3bee793631e1e7800a032fa", "filename": "src/test/ui/traits/vtable/vtable-vacant.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -1,12 +1,12 @@\n error: vtable entries for `<S as B>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a1),\n-    Vacant,\n-    Method(<S as B>::foo_b1),\n-    Vacant,\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a1),\n+           Vacant,\n+           Method(<S as B>::foo_b1),\n+           Vacant,\n+       ]\n   --> $DIR/vtable-vacant.rs:15:1\n    |\n LL | / trait B: A {"}, {"sha": "02c5d5d2484039a1f47b43042714d07ee0ed755f", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -27,12 +27,6 @@ LL |     Foo::test(&4i32);\n    |     --------- ^^^^^ the trait `Foo` is not implemented for `i32`\n    |     |\n    |     required by a bound introduced by this call\n-   |\n-note: required by `Foo::test`\n-  --> $DIR/trivial-bounds-leak.rs:5:5\n-   |\n-LL |     fn test(&self);\n-   |     ^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:26:22"}, {"sha": "cf3a07808de684bbcffa5e99e51e34e734f773ba", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -8,11 +8,6 @@ LL |         Err(\"\")?;\n    = help: the following implementations were found:\n              <TryFromSliceError as From<Infallible>>\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<u32, TryFromSliceError>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == &str`\n   --> $DIR/try-block-bad-type.rs:12:9\n@@ -33,11 +28,6 @@ LL |     let res: () = try { };\n    |                         ^ could not wrap the final value of the block as `()` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-note: required by `from_output`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_output(output: Self::Output) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-block-bad-type.rs:20:26\n@@ -46,11 +36,6 @@ LL |     let res: i32 = try { 5 };\n    |                          ^ could not wrap the final value of the block as `i32` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `i32`\n-note: required by `from_output`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_output(output: Self::Output) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "62cc26dd4010d4398dc2c674ea059f211eb31649", "filename": "src/test/ui/try-block/try-block-in-while.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     while try { false } {}\n    |                 ^^^^^ could not wrap the final value of the block as `bool` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `from_output`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_output(output: Self::Output) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "80c5e6f529cd671d459eac7bd7c4c027a42600cf", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -11,11 +11,6 @@ LL |     Ok(Err(123_i32)?)\n              <u8 as From<NonZeroU8>>\n              <u8 as From<bool>>\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:11:12\n@@ -29,11 +24,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:17:31\n@@ -46,11 +36,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n@@ -63,11 +48,6 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:27:33\n@@ -80,11 +60,6 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39\n@@ -97,11 +72,6 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:37:12\n@@ -115,11 +85,6 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s (with the same Break type)\n   --> $DIR/bad-interconversion.rs:43:29\n@@ -134,11 +99,6 @@ LL | | }\n    |\n    = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n    = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "aadfbf61f28f8d600952eb5c7e4c45e57a5f0e31", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,11 +10,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n@@ -28,11 +23,6 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a6badd1903885cfaf9fb503a22de18eb415c9095", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,11 +10,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:14:10\n@@ -29,11 +24,6 @@ LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:26:14\n@@ -46,11 +36,6 @@ LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:39:14\n@@ -63,11 +48,6 @@ LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "27e33bc022efb1fddf8f2218b69e7f866415227a", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -10,11 +10,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option.rs:13:6\n@@ -28,11 +23,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ad55f40b5b6382703bffae17bf321c29d55439c7", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -12,11 +12,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/try-operator-on-main.rs:10:5\n@@ -25,11 +20,6 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-operator-on-main.rs:10:7\n@@ -47,11 +37,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Try` is not satisfied\n   --> $DIR/try-operator-on-main.rs:14:25\n@@ -72,11 +57,6 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2a61547997b63c5c7e5ed67697bb16829874c240", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -29,36 +29,18 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n    |\n LL | struct Bounds<T:Copy=String>(T);\n    |                 ^^^^ the trait `Copy` is not implemented for `String`\n-   |\n-note: required by `Bounds`\n-  --> $DIR/type-check-defaults.rs:11:1\n-   |\n-LL | struct Bounds<T:Copy=String>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:14:42\n    |\n LL | struct WhereClause<T=String>(T) where T: Copy;\n    |                                          ^^^^ the trait `Copy` is not implemented for `String`\n-   |\n-note: required by `WhereClause`\n-  --> $DIR/type-check-defaults.rs:14:1\n-   |\n-LL | struct WhereClause<T=String>(T) where T: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:17:20\n    |\n LL | trait TraitBound<T:Copy=String> {}\n    |                    ^^^^ the trait `Copy` is not implemented for `String`\n-   |\n-note: required by `TraitBound`\n-  --> $DIR/type-check-defaults.rs:17:1\n-   |\n-LL | trait TraitBound<T:Copy=String> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:25\n@@ -83,11 +65,6 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    |                                                                  ^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n-note: required by `ProjectionPred`\n-  --> $DIR/type-check-defaults.rs:24:1\n-   |\n-LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "6d1e490bcf3302a91159001ccd84d5251f05b9ee", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot satisfy `&'a T: Foo`\n-note: required by a bound in `Foo`\n-  --> $DIR/issue-40294.rs:1:1\n-   |\n-LL | trait Foo: Sized {\n-   | ^^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "53610985f31da73e6da9d56cf90e31bc596c1a95", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n-note: required by `Tr::op`\n-  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n-   |\n-LL |     fn op(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n@@ -20,11 +15,6 @@ error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n-note: required by `Tr::op`\n-  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n-   |\n-LL |     fn op(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {"}, {"sha": "d0bc432a1cd18e8788841732319afda3be4f245c", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,11 +5,6 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n-note: required by `add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:6:28"}, {"sha": "03932d5ed03479a5c3a85d1fb7fa2212a702f348", "filename": "src/test/ui/unevaluated_fixed_size_array_len.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -6,11 +6,6 @@ LL |     <[(); 0] as Foo>::foo()\n    |\n    = help: the following implementations were found:\n              <[(); 1] as Foo>\n-note: required by `Foo::foo`\n-  --> $DIR/unevaluated_fixed_size_array_len.rs:4:5\n-   |\n-LL |     fn foo();\n-   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a4f0c400d7310979668bc3f433d6599dc1ad8363", "filename": "src/test/ui/union/union-generic.mirunsafeck.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,23 +4,23 @@ error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:13:13\n    |\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n    |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a4f0c400d7310979668bc3f433d6599dc1ad8363", "filename": "src/test/ui/union/union-generic.thirunsafeck.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -4,23 +4,23 @@ error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:13:13\n    |\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n    |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:6:1\n+note: required by a bound in `U`\n+  --> $DIR/union-generic.rs:6:12\n    |\n LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n+   |            ^^^^ required by this bound in `U`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d7b95f55769fdc600f7b37ff9ec22b43e9844215", "filename": "src/test/ui/unsized/issue-71659.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,6 +3,15 @@ error[E0277]: the trait bound `dyn Foo: CastTo<[i32]>` is not satisfied\n    |\n LL |     let x = x.cast::<[i32]>();\n    |               ^^^^ the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n+   |\n+note: required by a bound in `Cast::cast`\n+  --> $DIR/issue-71659.rs:19:15\n+   |\n+LL |     fn cast<T: ?Sized>(&self) -> &T\n+   |        ---- required by a bound in this\n+LL |     where\n+LL |         Self: CastTo<T>,\n+   |               ^^^^^^^^^ required by this bound in `Cast::cast`\n \n error: aborting due to previous error\n "}, {"sha": "b03023b5fd14f707d69bdeb7c927305ae6a36cac", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `(): Foo` is not satisfied\n    |\n LL |     pub fn lint_me() -> <() as Foo>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n-   |\n-note: required by a bound in `Foo`\n-  --> $DIR/wf-foreign-fn-decl-ret.rs:6:1\n-   |\n-LL | pub trait Foo {\n-   | ^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `u32: Unsatisfied` is not satisfied\n   --> $DIR/wf-foreign-fn-decl-ret.rs:14:32"}, {"sha": "f431deee73f9adc9cd05a56161788d931e6d32ca", "filename": "src/test/ui/where-clauses/where-clause-method-substituion.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -3,6 +3,12 @@ error[E0277]: the trait bound `X: Foo<X>` is not satisfied\n    |\n LL |     1.method::<X>();\n    |       ^^^^^^ the trait `Foo<X>` is not implemented for `X`\n+   |\n+note: required by a bound in `Bar::method`\n+  --> $DIR/where-clause-method-substituion.rs:6:34\n+   |\n+LL |     fn method<B>(&self) where A: Foo<B>;\n+   |                                  ^^^^^^ required by this bound in `Bar::method`\n \n error: aborting due to previous error\n "}, {"sha": "3a4cbb62d5597a5e0f90d283fab6dbc738ea7dfc", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e5ab20ed7a7677a998a163ccf7853764b195e6/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=b8e5ab20ed7a7677a998a163ccf7853764b195e6", "patch": "@@ -5,6 +5,12 @@ LL |     x.equals(&x);\n    |       ------ ^^ the trait `Eq` is not implemented for `Bar`\n    |       |\n    |       required by a bound introduced by this call\n+   |\n+note: required by a bound in `Foo::<T>::equals`\n+  --> $DIR/where-clauses-method-unsatisfied.rs:11:52\n+   |\n+LL |     fn equals(&self, u: &Foo<T>) -> bool where T : Eq {\n+   |                                                    ^^ required by this bound in `Foo::<T>::equals`\n \n error: aborting due to previous error\n "}]}