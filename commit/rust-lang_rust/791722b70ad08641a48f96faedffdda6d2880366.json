{"sha": "791722b70ad08641a48f96faedffdda6d2880366", "node_id": "C_kwDOAAsO6NoAKDc5MTcyMmI3MGFkMDg2NDFhNDhmOTZmYWVkZmZkZGE2ZDI4ODAzNjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-13T18:49:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-13T18:49:06Z"}, "message": "Merge #10998\n\n10998: Add number representation assists r=Veykril a=errx\n\nReimplemented assists from this PR https://github.com/rust-analyzer/rust-analyzer/pull/3683 with current APIs.\r\n![image](https://user-images.githubusercontent.com/462486/145726792-47700215-26f2-4fdc-9520-63d1487901e5.png)\r\n![image](https://user-images.githubusercontent.com/462486/145726802-f528a2f7-9159-41d3-b459-fc3fae033e60.png)\r\n\r\n\r\nI've decided not to add options about size of the groups so behaviour is similar to clippy's. \r\nMinimal number length is also taken from clippy.\r\n\n\nCo-authored-by: Oleg Matrokhin <matrokhin@gmail.com>", "tree": {"sha": "a8752adcb31f316f90ff56488076da20b0085716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8752adcb31f316f90ff56488076da20b0085716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/791722b70ad08641a48f96faedffdda6d2880366", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJht5WiCRBK7hj4Ov3rIwAA0BEIACYMANJ0sE1hNt0Kl3Wp5QLx\n8xq9n8UAEvzJv/bGm6F3SAmk/Yy2ha7p1duT1sxLX57gupdHLM7zifeYAC0gOb9s\nuDrVzxz9sbSYlDfonK7Syk7Zx3j1qrkJqrJzjNb+160GegsKyAsczLSxpwWzSU9d\nKpN7A9IA0S9nayqiB/Qw3pOPl2MFGgIwaQ7MKKoI/+07Jpfu4h3rTmUzh3e5cB83\nBXRK6hM7kn5DM62wgam7XjXbXeIqfW81tkLgQdCYaC9G9esktMXVgm5pirAafsKe\nBBUioG2M+IrcuvQTiBS2cVj46seolOm5S6gb4FnA3hzbVj0NmSiY+0gCbv2fIBE=\n=smUr\n-----END PGP SIGNATURE-----\n", "payload": "tree a8752adcb31f316f90ff56488076da20b0085716\nparent 69500e8c6bad63feec7dc94af844dc30f454a592\nparent 60605a24d404ada4fdfd040ac924926cd699415b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639421346 +0000\ncommitter GitHub <noreply@github.com> 1639421346 +0000\n\nMerge #10998\n\n10998: Add number representation assists r=Veykril a=errx\n\nReimplemented assists from this PR https://github.com/rust-analyzer/rust-analyzer/pull/3683 with current APIs.\r\n![image](https://user-images.githubusercontent.com/462486/145726792-47700215-26f2-4fdc-9520-63d1487901e5.png)\r\n![image](https://user-images.githubusercontent.com/462486/145726802-f528a2f7-9159-41d3-b459-fc3fae033e60.png)\r\n\r\n\r\nI've decided not to add options about size of the groups so behaviour is similar to clippy's. \r\nMinimal number length is also taken from clippy.\r\n\n\nCo-authored-by: Oleg Matrokhin <matrokhin@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/791722b70ad08641a48f96faedffdda6d2880366", "html_url": "https://github.com/rust-lang/rust/commit/791722b70ad08641a48f96faedffdda6d2880366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/791722b70ad08641a48f96faedffdda6d2880366/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69500e8c6bad63feec7dc94af844dc30f454a592", "url": "https://api.github.com/repos/rust-lang/rust/commits/69500e8c6bad63feec7dc94af844dc30f454a592", "html_url": "https://github.com/rust-lang/rust/commit/69500e8c6bad63feec7dc94af844dc30f454a592"}, {"sha": "60605a24d404ada4fdfd040ac924926cd699415b", "url": "https://api.github.com/repos/rust-lang/rust/commits/60605a24d404ada4fdfd040ac924926cd699415b", "html_url": "https://github.com/rust-lang/rust/commit/60605a24d404ada4fdfd040ac924926cd699415b"}], "stats": {"total": 247, "additions": 221, "deletions": 26}, "files": [{"sha": "df017636631e7b816239c5ac3856eee730f661ca", "filename": "crates/ide_assists/src/handlers/number_representation.rs", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs?ref=791722b70ad08641a48f96faedffdda6d2880366", "patch": "@@ -0,0 +1,183 @@\n+use syntax::{ast, ast::Radix, AstToken};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n+\n+const MIN_NUMBER_OF_DIGITS_TO_FORMAT: usize = 5;\n+\n+// Assist: reformat_number_literal\n+//\n+// Adds or removes seprators from integer literal.\n+//\n+// ```\n+// const _: i32 = 1012345$0;\n+// ```\n+// ->\n+// ```\n+// const _: i32 = 1_012_345;\n+// ```\n+pub(crate) fn reformat_number_literal(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let literal = ctx.find_node_at_offset::<ast::Literal>()?;\n+    let literal = match literal.kind() {\n+        ast::LiteralKind::IntNumber(it) => it,\n+        _ => return None,\n+    };\n+\n+    let text = literal.text();\n+    if text.contains('_') {\n+        return remove_separators(acc, literal);\n+    }\n+\n+    let (prefix, value, suffix) = literal.split_into_parts();\n+    if value.len() < MIN_NUMBER_OF_DIGITS_TO_FORMAT {\n+        return None;\n+    }\n+\n+    let radix = literal.radix();\n+    let mut converted = prefix.to_string();\n+    converted.push_str(&add_group_separators(value, group_size(radix)));\n+    converted.push_str(suffix);\n+\n+    let group_id = GroupLabel(\"Reformat number literal\".into());\n+    let label = format!(\"Convert {} to {}\", literal, converted);\n+    let range = literal.syntax().text_range();\n+    acc.add_group(\n+        &group_id,\n+        AssistId(\"reformat_number_literal\", AssistKind::RefactorInline),\n+        label,\n+        range,\n+        |builder| builder.replace(range, converted),\n+    )\n+}\n+\n+fn remove_separators(acc: &mut Assists, literal: ast::IntNumber) -> Option<()> {\n+    let group_id = GroupLabel(\"Reformat number literal\".into());\n+    let range = literal.syntax().text_range();\n+    acc.add_group(\n+        &group_id,\n+        AssistId(\"reformat_number_literal\", AssistKind::RefactorInline),\n+        \"Remove digit seprators\",\n+        range,\n+        |builder| builder.replace(range, literal.text().replace(\"_\", \"\")),\n+    )\n+}\n+\n+const fn group_size(r: Radix) -> usize {\n+    match r {\n+        Radix::Binary => 4,\n+        Radix::Octal => 3,\n+        Radix::Decimal => 3,\n+        Radix::Hexadecimal => 4,\n+    }\n+}\n+\n+fn add_group_separators(s: &str, group_size: usize) -> String {\n+    let mut chars = Vec::new();\n+    for (i, ch) in s.chars().filter(|&ch| ch != '_').rev().enumerate() {\n+        if i > 0 && i % group_size == 0 {\n+            chars.push('_');\n+        }\n+        chars.push(ch);\n+    }\n+\n+    chars.into_iter().rev().collect()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist_by_label, check_assist_not_applicable, check_assist_target};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn group_separators() {\n+        let cases = vec![\n+            (\"\", 4, \"\"),\n+            (\"1\", 4, \"1\"),\n+            (\"12\", 4, \"12\"),\n+            (\"123\", 4, \"123\"),\n+            (\"1234\", 4, \"1234\"),\n+            (\"12345\", 4, \"1_2345\"),\n+            (\"123456\", 4, \"12_3456\"),\n+            (\"1234567\", 4, \"123_4567\"),\n+            (\"12345678\", 4, \"1234_5678\"),\n+            (\"123456789\", 4, \"1_2345_6789\"),\n+            (\"1234567890\", 4, \"12_3456_7890\"),\n+            (\"1_2_3_4_5_6_7_8_9_0_\", 4, \"12_3456_7890\"),\n+            (\"1234567890\", 3, \"1_234_567_890\"),\n+            (\"1234567890\", 2, \"12_34_56_78_90\"),\n+            (\"1234567890\", 1, \"1_2_3_4_5_6_7_8_9_0\"),\n+        ];\n+\n+        for case in cases {\n+            let (input, group_size, expected) = case;\n+            assert_eq!(add_group_separators(input, group_size), expected)\n+        }\n+    }\n+\n+    #[test]\n+    fn good_targets() {\n+        let cases = vec![\n+            (\"const _: i32 = 0b11111$0\", \"0b11111\"),\n+            (\"const _: i32 = 0o77777$0;\", \"0o77777\"),\n+            (\"const _: i32 = 10000$0;\", \"10000\"),\n+            (\"const _: i32 = 0xFFFFF$0;\", \"0xFFFFF\"),\n+            (\"const _: i32 = 10000i32$0;\", \"10000i32\"),\n+            (\"const _: i32 = 0b_10_0i32$0;\", \"0b_10_0i32\"),\n+        ];\n+\n+        for case in cases {\n+            check_assist_target(reformat_number_literal, case.0, case.1);\n+        }\n+    }\n+\n+    #[test]\n+    fn bad_targets() {\n+        let cases = vec![\n+            \"const _: i32 = 0b111$0\",\n+            \"const _: i32 = 0b1111$0\",\n+            \"const _: i32 = 0o77$0;\",\n+            \"const _: i32 = 0o777$0;\",\n+            \"const _: i32 = 10$0;\",\n+            \"const _: i32 = 999$0;\",\n+            \"const _: i32 = 0xFF$0;\",\n+            \"const _: i32 = 0xFFFF$0;\",\n+        ];\n+\n+        for case in cases {\n+            check_assist_not_applicable(reformat_number_literal, case);\n+        }\n+    }\n+\n+    #[test]\n+    fn labels() {\n+        let cases = vec![\n+            (\"const _: i32 = 10000$0\", \"const _: i32 = 10_000\", \"Convert 10000 to 10_000\"),\n+            (\n+                \"const _: i32 = 0xFF0000$0;\",\n+                \"const _: i32 = 0xFF_0000;\",\n+                \"Convert 0xFF0000 to 0xFF_0000\",\n+            ),\n+            (\n+                \"const _: i32 = 0b11111111$0;\",\n+                \"const _: i32 = 0b1111_1111;\",\n+                \"Convert 0b11111111 to 0b1111_1111\",\n+            ),\n+            (\n+                \"const _: i32 = 0o377211$0;\",\n+                \"const _: i32 = 0o377_211;\",\n+                \"Convert 0o377211 to 0o377_211\",\n+            ),\n+            (\n+                \"const _: i32 = 10000i32$0;\",\n+                \"const _: i32 = 10_000i32;\",\n+                \"Convert 10000i32 to 10_000i32\",\n+            ),\n+            (\"const _: i32 = 1_0_0_0_i32$0;\", \"const _: i32 = 1000i32;\", \"Remove digit seprators\"),\n+        ];\n+\n+        for case in cases {\n+            let (before, after, label) = case;\n+            check_assist_by_label(reformat_number_literal, before, after, label);\n+        }\n+    }\n+}"}, {"sha": "067f4d8e14d0dd80a996212453a07b7b4fac603d", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=791722b70ad08641a48f96faedffdda6d2880366", "patch": "@@ -159,6 +159,7 @@ mod handlers {\n     mod move_module_to_file;\n     mod move_to_mod_rs;\n     mod move_from_mod_rs;\n+    mod number_representation;\n     mod promote_local_to_const;\n     mod pull_assignment_up;\n     mod qualify_path;\n@@ -241,6 +242,7 @@ mod handlers {\n             move_module_to_file::move_module_to_file,\n             move_to_mod_rs::move_to_mod_rs,\n             move_from_mod_rs::move_from_mod_rs,\n+            number_representation::reformat_number_literal,\n             pull_assignment_up::pull_assignment_up,\n             promote_local_to_const::promote_local_to_const,\n             qualify_path::qualify_path,"}, {"sha": "ab5ef91657399108134077cd9f14134c0b845cbf", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=791722b70ad08641a48f96faedffdda6d2880366", "patch": "@@ -1607,6 +1607,19 @@ pub mod std { pub mod collections { pub struct HashMap { } } }\n     )\n }\n \n+#[test]\n+fn doctest_reformat_number_literal() {\n+    check_doc_test(\n+        \"reformat_number_literal\",\n+        r#####\"\n+const _: i32 = 1012345$0;\n+\"#####,\n+        r#####\"\n+const _: i32 = 1_012_345;\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_remove_dbg() {\n     check_doc_test("}, {"sha": "c32ab686ccad7d4a878e7ca5184b1e92d3f159f7", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791722b70ad08641a48f96faedffdda6d2880366/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=791722b70ad08641a48f96faedffdda6d2880366", "patch": "@@ -623,41 +623,38 @@ impl ast::IntNumber {\n         }\n     }\n \n-    pub fn value(&self) -> Option<u128> {\n-        let token = self.syntax();\n-\n-        let mut text = token.text();\n-        if let Some(suffix) = self.suffix() {\n-            text = &text[..text.len() - suffix.len()];\n-        }\n-\n+    pub fn split_into_parts(&self) -> (&str, &str, &str) {\n         let radix = self.radix();\n-        text = &text[radix.prefix_len()..];\n+        let (prefix, mut text) = self.text().split_at(radix.prefix_len());\n+\n+        let is_suffix_start: fn(&(usize, char)) -> bool = match radix {\n+            Radix::Hexadecimal => |(_, c)| matches!(c, 'g'..='z' | 'G'..='Z'),\n+            _ => |(_, c)| c.is_ascii_alphabetic(),\n+        };\n \n-        let buf;\n-        if text.contains('_') {\n-            buf = text.replace('_', \"\");\n-            text = buf.as_str();\n+        let mut suffix = \"\";\n+        if let Some((suffix_start, _)) = text.char_indices().find(is_suffix_start) {\n+            let (text2, suffix2) = text.split_at(suffix_start);\n+            text = text2;\n+            suffix = suffix2;\n         };\n \n-        let value = u128::from_str_radix(text, radix as u32).ok()?;\n+        (prefix, text, suffix)\n+    }\n+\n+    pub fn value(&self) -> Option<u128> {\n+        let (_, text, _) = self.split_into_parts();\n+        let value = u128::from_str_radix(&text.replace(\"_\", \"\"), self.radix() as u32).ok()?;\n         Some(value)\n     }\n \n     pub fn suffix(&self) -> Option<&str> {\n-        let text = self.text();\n-        let radix = self.radix();\n-        let mut indices = text.char_indices();\n-        if radix != Radix::Decimal {\n-            indices.next()?;\n-            indices.next()?;\n+        let (_, _, suffix) = self.split_into_parts();\n+        if suffix.is_empty() {\n+            None\n+        } else {\n+            Some(suffix)\n         }\n-        let is_suffix_start: fn(&(usize, char)) -> bool = match radix {\n-            Radix::Hexadecimal => |(_, c)| matches!(c, 'g'..='z' | 'G'..='Z'),\n-            _ => |(_, c)| c.is_ascii_alphabetic(),\n-        };\n-        let (suffix_start, _) = indices.find(is_suffix_start)?;\n-        Some(&text[suffix_start..])\n     }\n }\n "}]}