{"sha": "c5f98b586f9c835e8e3ebecf3db260d2f0ad402a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Zjk4YjU4NmY5YzgzNWU4ZTNlYmVjZjNkYjI2MGQyZjBhZDQwMmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T11:03:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T11:03:02Z"}, "message": "Remove shift amount masking\n\nUnlike the old x75 backend, the new x64 backend masks the shift amount\nitself, matching the specified semantics.", "tree": {"sha": "449843b1383c2e3d3d8d673f2d9b38e4ca1c4fe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449843b1383c2e3d3d8d673f2d9b38e4ca1c4fe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5f98b586f9c835e8e3ebecf3db260d2f0ad402a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f98b586f9c835e8e3ebecf3db260d2f0ad402a", "html_url": "https://github.com/rust-lang/rust/commit/c5f98b586f9c835e8e3ebecf3db260d2f0ad402a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5f98b586f9c835e8e3ebecf3db260d2f0ad402a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f45ea73efb7e92cc1eefd684959300f2b630880", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f45ea73efb7e92cc1eefd684959300f2b630880", "html_url": "https://github.com/rust-lang/rust/commit/4f45ea73efb7e92cc1eefd684959300f2b630880"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "4cce853d4b0c6959352ef9ec2c807fa9825c9c56", "filename": "src/num.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c5f98b586f9c835e8e3ebecf3db260d2f0ad402a/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f98b586f9c835e8e3ebecf3db260d2f0ad402a/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=c5f98b586f9c835e8e3ebecf3db260d2f0ad402a", "patch": "@@ -168,20 +168,12 @@ pub(crate) fn codegen_int_binop<'tcx>(\n         BinOp::BitXor => b.bxor(lhs, rhs),\n         BinOp::BitAnd => b.band(lhs, rhs),\n         BinOp::BitOr => b.bor(lhs, rhs),\n-        BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n-            fx.bcx.ins().ishl(lhs, actual_shift)\n-        }\n+        BinOp::Shl => fx.bcx.ins().ishl(lhs, rhs),\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             if signed {\n-                fx.bcx.ins().sshr(lhs, actual_shift)\n+                fx.bcx.ins().sshr(lhs, rhs)\n             } else {\n-                fx.bcx.ins().ushr(lhs, actual_shift)\n+                fx.bcx.ins().ushr(lhs, rhs)\n             }\n         }\n         // Compare binops handles by `codegen_binop`.\n@@ -303,10 +295,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n             }\n         }\n         BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n-            let val = fx.bcx.ins().ishl(lhs, actual_shift);\n+            let val = fx.bcx.ins().ishl(lhs, rhs);\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx\n@@ -316,13 +305,10 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n             (val, has_overflow)\n         }\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             let val = if !signed {\n-                fx.bcx.ins().ushr(lhs, actual_shift)\n+                fx.bcx.ins().ushr(lhs, rhs)\n             } else {\n-                fx.bcx.ins().sshr(lhs, actual_shift)\n+                fx.bcx.ins().sshr(lhs, rhs)\n             };\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;"}]}