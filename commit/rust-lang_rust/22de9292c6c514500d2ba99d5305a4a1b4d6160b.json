{"sha": "22de9292c6c514500d2ba99d5305a4a1b4d6160b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZGU5MjkyYzZjNTE0NTAwZDJiYTk5ZDUzMDVhNGExYjRkNjE2MGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-17T23:59:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T00:00:39Z"}, "message": "rustdoc: Simplify desc pass", "tree": {"sha": "5a4030e8118ad48d88fa87289a437fd456d815cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4030e8118ad48d88fa87289a437fd456d815cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22de9292c6c514500d2ba99d5305a4a1b4d6160b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22de9292c6c514500d2ba99d5305a4a1b4d6160b", "html_url": "https://github.com/rust-lang/rust/commit/22de9292c6c514500d2ba99d5305a4a1b4d6160b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22de9292c6c514500d2ba99d5305a4a1b4d6160b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2c2afc98761dc57f5516e37f2a5bb5c30a35cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2c2afc98761dc57f5516e37f2a5bb5c30a35cf", "html_url": "https://github.com/rust-lang/rust/commit/ba2c2afc98761dc57f5516e37f2a5bb5c30a35cf"}], "stats": {"total": 74, "additions": 14, "deletions": 60}, "files": [{"sha": "1187c17809d4ae7869f2b32deb1013156cfeb1ae", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 14, "deletions": 60, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/22de9292c6c514500d2ba99d5305a4a1b4d6160b/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22de9292c6c514500d2ba99d5305a4a1b4d6160b/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=22de9292c6c514500d2ba99d5305a4a1b4d6160b", "patch": "@@ -16,14 +16,12 @@ fn run(\n     op: op\n ) -> doc::cratedoc {\n     let fold = fold::fold({\n-        fold_mod: fold_mod,\n-        fold_const: fold_const,\n+        fold_item: fold_item,\n         fold_fn: fold_fn,\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl,\n-        fold_type: fold_type\n+        fold_impl: fold_impl\n         with *fold::default_seq_fold(op)\n     });\n     fold.fold_crate(fold, doc)\n@@ -33,28 +31,12 @@ fn maybe_apply_op(op: op, s: option<str>) -> option<str> {\n     option::map(s) {|s| op(s) }\n }\n \n-fn fold_mod(fold: fold::fold<op>, doc: doc::moddoc) -> doc::moddoc {\n-    let doc = fold::default_seq_fold_mod(fold, doc);\n+fn fold_item(fold: fold::fold<op>, doc: doc::itemdoc) -> doc::itemdoc {\n+    let doc = fold::default_seq_fold_item(fold, doc);\n \n     {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        }\n-        with doc\n-    }\n-}\n-\n-fn fold_const(fold: fold::fold<op>, doc: doc::constdoc) -> doc::constdoc {\n-    let doc = fold::default_seq_fold_const(fold, doc);\n-\n-    {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        }\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc)\n         with doc\n     }\n }\n@@ -63,11 +45,6 @@ fn fold_fn(fold: fold::fold<op>, doc: doc::fndoc) -> doc::fndoc {\n     let doc = fold::default_seq_fold_fn(fold, doc);\n \n     {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        },\n         args: vec::map(doc.args) {|doc|\n             {\n                 desc: maybe_apply_op(fold.ctxt, doc.desc)\n@@ -84,12 +61,9 @@ fn fold_fn(fold: fold::fold<op>, doc: doc::fndoc) -> doc::fndoc {\n }\n \n fn fold_enum(fold: fold::fold<op>, doc: doc::enumdoc) -> doc::enumdoc {\n+    let doc = fold::default_seq_fold_enum(fold, doc);\n+\n     {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        },\n         variants: vec::map(doc.variants) {|variant|\n             {\n                 desc: maybe_apply_op(fold.ctxt, variant.desc)\n@@ -101,12 +75,9 @@ fn fold_enum(fold: fold::fold<op>, doc: doc::enumdoc) -> doc::enumdoc {\n }\n \n fn fold_res(fold: fold::fold<op>, doc: doc::resdoc) -> doc::resdoc {\n+    let doc = fold::default_seq_fold_res(fold, doc);\n+\n     {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        },\n         args: vec::map(doc.args) {|arg|\n             {\n                 desc: maybe_apply_op(fold.ctxt, arg.desc)\n@@ -118,12 +89,9 @@ fn fold_res(fold: fold::fold<op>, doc: doc::resdoc) -> doc::resdoc {\n }\n \n fn fold_iface(fold: fold::fold<op>, doc: doc::ifacedoc) -> doc::ifacedoc {\n+    let doc = fold::default_seq_fold_iface(fold, doc);\n+\n     {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        },\n         methods: apply_to_methods(fold.ctxt, doc.methods)\n         with doc\n     }\n@@ -151,24 +119,10 @@ fn apply_to_methods(op: op, docs: [doc::methoddoc]) -> [doc::methoddoc] {\n }\n \n fn fold_impl(fold: fold::fold<op>, doc: doc::impldoc) -> doc::impldoc {\n-    {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        },\n-        methods: apply_to_methods(fold.ctxt, doc.methods)\n-        with doc\n-    }\n-}\n+    let doc = fold::default_seq_fold_impl(fold, doc);\n \n-fn fold_type(fold: fold::fold<op>, doc: doc::tydoc) -> doc::tydoc {\n     {\n-        item: {\n-            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n-            desc: maybe_apply_op(fold.ctxt, doc.desc())\n-            with doc.item\n-        }\n+        methods: apply_to_methods(fold.ctxt, doc.methods)\n         with doc\n     }\n }"}]}