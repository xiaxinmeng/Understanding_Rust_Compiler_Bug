{"sha": "a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2NjNmZlM2Q2N2Y0ODAyZDU4YTlhNzZhNGYxZDMwOGE4YTk2ZjM=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2017-12-20T09:39:48Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2017-12-20T09:39:48Z"}, "message": "Also suggest as_mut for match_as_ref", "tree": {"sha": "16ba940ccd6cfe92d332b241a234cd06dbf002be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16ba940ccd6cfe92d332b241a234cd06dbf002be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3", "html_url": "https://github.com/rust-lang/rust/commit/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "919601bc511608f1b66fe7c51d4b879e2abdec40", "url": "https://api.github.com/repos/rust-lang/rust/commits/919601bc511608f1b66fe7c51d4b879e2abdec40", "html_url": "https://github.com/rust-lang/rust/commit/919601bc511608f1b66fe7c51d4b879e2abdec40"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "2183c6e4fa675e701bacbd9d9fabe5bc705bb013", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3", "patch": "@@ -148,7 +148,7 @@ declare_lint! {\n /// **What it does:** Checks for match which is used to add a reference to an\n /// `Option` value.\n ///\n-/// **Why is this bad?** Using `as_ref()` instead is shorter.\n+/// **Why is this bad?** Using `as_ref()` or `as_mut()` instead is shorter.\n ///\n /// **Known problems:** None.\n ///\n@@ -163,7 +163,7 @@ declare_lint! {\n declare_lint! {\n     pub MATCH_AS_REF,\n     Warn,\n-    \"a match on an Option value instead of using `as_ref()`\"\n+    \"a match on an Option value instead of using `as_ref()` or `as_mut`\"\n }\n \n #[allow(missing_copy_implementations)]\n@@ -438,15 +438,22 @@ fn check_match_as_ref(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     if arms.len() == 2 &&\n         arms[0].pats.len() == 1 && arms[0].guard.is_none() &&\n         arms[1].pats.len() == 1 && arms[1].guard.is_none() {\n-        if (is_ref_some_arm(&arms[0]) && is_none_arm(&arms[1])) ||\n-            (is_ref_some_arm(&arms[1]) && is_none_arm(&arms[0])) {\n+        let arm_ref: Option<BindingAnnotation> = if is_none_arm(&arms[0]) {\n+            is_ref_some_arm(&arms[1])\n+        } else if is_none_arm(&arms[1]) {\n+            is_ref_some_arm(&arms[0])\n+        } else {\n+            None\n+        };\n+        if let Some(rb) = arm_ref {\n+            let suggestion = if rb == BindingAnnotation::Ref { \"as_ref\" } else { \"as_mut\" };\n             span_lint_and_sugg(\n                 cx,\n                 MATCH_AS_REF,\n                 expr.span,\n-                \"use as_ref() instead\",\n+                &format!(\"use {}() instead\", suggestion),\n                 \"try this\",\n-                format!(\"{}.as_ref()\", snippet(cx, ex.span, \"_\"))\n+                format!(\"{}.{}()\", snippet(cx, ex.span, \"_\"), suggestion)\n             )\n         }\n     }\n@@ -574,7 +581,7 @@ fn is_none_arm(arm: &Arm) -> bool {\n }\n \n // Checks if arm has the form `Some(ref v) => Some(v)` (checks for `ref` and `ref mut`)\n-fn is_ref_some_arm(arm: &Arm) -> bool {\n+fn is_ref_some_arm(arm: &Arm) -> Option<BindingAnnotation> {\n     if_chain! {\n         if let PatKind::TupleStruct(ref path, ref pats, _) = arm.pats[0].node;\n         if pats.len() == 1 && match_qpath(path, &paths::OPTION_SOME);\n@@ -585,12 +592,12 @@ fn is_ref_some_arm(arm: &Arm) -> bool {\n         if match_qpath(some_path, &paths::OPTION_SOME) && args.len() == 1;\n         if let ExprPath(ref qpath) = args[0].node;\n         if let &QPath::Resolved(_, ref path2) = qpath;\n-        if path2.segments.len() == 1;\n+        if path2.segments.len() == 1 && ident.node == path2.segments[0].name;\n         then {\n-            return ident.node == path2.segments[0].name\n+            return Some(rb)\n         }\n     }\n-    false\n+    None\n }\n \n fn has_only_ref_pats(arms: &[Arm]) -> bool {"}, {"sha": "67a901f65b28ddce6ee6bd42f0145975981f7db6", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3", "patch": "@@ -316,14 +316,14 @@ fn match_wild_err_arm() {\n }\n \n fn match_as_ref() {\n-    let owned : Option<()> = None;\n-    let borrowed = match owned {\n+    let owned: Option<()> = None;\n+    let borrowed: Option<&()> = match owned {\n         None => None,\n         Some(ref v) => Some(v),\n     };\n \n-    let mut mut_owned : Option<()> = None;\n-    let mut mut_borrowed = match mut_owned {\n+    let mut mut_owned: Option<()> = None;\n+    let borrow_mut: Option<&mut ()> = match mut_owned {\n         None => None,\n         Some(ref mut v) => Some(v),\n     };"}, {"sha": "62c77c778bebef1749c701febd67d9fe55822525", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=a6ccc6fe3d67f4802d58a9a76a4f1d308a8a96f3", "patch": "@@ -427,24 +427,24 @@ note: consider refactoring into `Ok(3) | Ok(_)`\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: use as_ref() instead\n-   --> $DIR/matches.rs:320:20\n+   --> $DIR/matches.rs:320:33\n     |\n-320 |       let borrowed = match owned {\n-    |  ____________________^\n+320 |       let borrowed: Option<&()> = match owned {\n+    |  _________________________________^\n 321 | |         None => None,\n 322 | |         Some(ref v) => Some(v),\n 323 | |     };\n     | |_____^ help: try this: `owned.as_ref()`\n     |\n     = note: `-D match-as-ref` implied by `-D warnings`\n \n-error: use as_ref() instead\n-   --> $DIR/matches.rs:326:28\n+error: use as_mut() instead\n+   --> $DIR/matches.rs:326:39\n     |\n-326 |       let mut mut_borrowed = match mut_owned {\n-    |  ____________________________^\n+326 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n+    |  _______________________________________^\n 327 | |         None => None,\n 328 | |         Some(ref mut v) => Some(v),\n 329 | |     };\n-    | |_____^ help: try this: `mut_owned.as_ref()`\n+    | |_____^ help: try this: `mut_owned.as_mut()`\n "}]}