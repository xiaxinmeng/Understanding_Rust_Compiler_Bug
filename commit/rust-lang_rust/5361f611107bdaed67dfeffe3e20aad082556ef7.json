{"sha": "5361f611107bdaed67dfeffe3e20aad082556ef7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNjFmNjExMTA3YmRhZWQ2N2RmZWZmZTNlMjBhYWQwODI1NTZlZjc=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-06-12T08:38:03Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-06-12T08:38:03Z"}, "message": "Include git commit and worktree status in version output (#1060)\n\nThis will help in debugging issues as rustfmt gets more users.\r\n\r\nIf the working tree is clean, output looks like\r\n\r\n    $ target/debug/rustfmt -V\r\n    0.5.0 (9f5ed3b)\r\n\r\nIf the working tree is dirty, output looks like\r\n\r\n    $ target/debug/rustfmt -V\r\n    0.5.0 (9f5ed3b worktree dirty)\r\n\r\nIf git is unavailable, output looks like\r\n\r\n    $ target/debug/rustfmt -V\r\n    0.5.0 (git commit unavailable)\r\n\r\nTo avoid rebuilds on changing tests, the build script will only rerun if\r\nfiles under src/ are changed. This means the actual git status may show\r\nchanged files and this would not show up in the version. This should not\r\nbe an issue as files not in src/ should not affect the build output.", "tree": {"sha": "b797442094f119df0df042cd40c4a9da40c201a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b797442094f119df0df042cd40c4a9da40c201a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5361f611107bdaed67dfeffe3e20aad082556ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5361f611107bdaed67dfeffe3e20aad082556ef7", "html_url": "https://github.com/rust-lang/rust/commit/5361f611107bdaed67dfeffe3e20aad082556ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5361f611107bdaed67dfeffe3e20aad082556ef7/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1743f5caf6772e9b13256df49fbe8b4bb5af1e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/1743f5caf6772e9b13256df49fbe8b4bb5af1e28", "html_url": "https://github.com/rust-lang/rust/commit/1743f5caf6772e9b13256df49fbe8b4bb5af1e28"}], "stats": {"total": 90, "additions": 85, "deletions": 5}, "files": [{"sha": "84293a46205f4cf330a96ccbd7829291bebc8396", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5361f611107bdaed67dfeffe3e20aad082556ef7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5361f611107bdaed67dfeffe3e20aad082556ef7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5361f611107bdaed67dfeffe3e20aad082556ef7", "patch": "@@ -17,6 +17,7 @@ dependencies = [\n  \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -190,6 +191,15 @@ name = \"utf8-ranges\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"walkdir\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.7\""}, {"sha": "dbf3e1edee050ad2e2832cee7efe3fc7fcaf0292", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5361f611107bdaed67dfeffe3e20aad082556ef7/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5361f611107bdaed67dfeffe3e20aad082556ef7/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=5361f611107bdaed67dfeffe3e20aad082556ef7", "patch": "@@ -8,6 +8,7 @@ repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n readme = \"README.md\"\n license = \"Apache-2.0/MIT\"\n include = [\"src/*.rs\", \"Cargo.toml\"]\n+build = \"build.rs\"\n \n [features]\n default = [\"cargo-fmt\"]\n@@ -28,6 +29,9 @@ getopts = \"0.2\"\n itertools = \"0.4.15\"\n multimap = \"0.3\"\n \n+[build-dependencies]\n+walkdir = \"0.1.5\"\n+\n [target.'cfg(unix)'.dependencies]\n libc = \"0.2.11\"\n "}, {"sha": "9192426f99ab55778d5c63f670260801fe1cc102", "filename": "build.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5361f611107bdaed67dfeffe3e20aad082556ef7/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5361f611107bdaed67dfeffe3e20aad082556ef7/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=5361f611107bdaed67dfeffe3e20aad082556ef7", "patch": "@@ -0,0 +1,57 @@\n+extern crate walkdir;\n+\n+use std::env;\n+use std::fs::File;\n+use std::io::Write;\n+use std::path::Path;\n+use std::process::Command;\n+\n+use walkdir::WalkDir;\n+\n+fn main() {\n+    let out_dir = env::var(\"OUT_DIR\").unwrap();\n+    let dest_path = Path::new(&out_dir).join(\"git_info.rs\");\n+    let mut f = File::create(&dest_path).unwrap();\n+\n+    writeln!(f,\n+             \"const COMMIT_HASH: Option<&'static str> = {:?};\",\n+             git_head_sha1())\n+        .unwrap();\n+    writeln!(f,\n+             \"const WORKTREE_CLEAN: Option<bool> = {:?};\",\n+             git_tree_is_clean())\n+        .unwrap();\n+\n+    // cargo:rerun-if-changed requires one entry per individual file.\n+    for entry in WalkDir::new(\"src\") {\n+        let entry = entry.unwrap();\n+        println!(\"cargo:rerun-if-changed={}\", entry.path().display());\n+    }\n+}\n+\n+// Returns `None` if git is not available.\n+fn git_head_sha1() -> Option<String> {\n+    Command::new(\"git\")\n+        .arg(\"rev-parse\")\n+        .arg(\"--short\")\n+        .arg(\"HEAD\")\n+        .output()\n+        .ok()\n+        .and_then(|o| String::from_utf8(o.stdout).ok())\n+        .map(|mut s| {\n+            let len = s.trim_right().len();\n+            s.truncate(len);\n+            s\n+        })\n+}\n+\n+// Returns `None` if git is not available.\n+fn git_tree_is_clean() -> Option<bool> {\n+    Command::new(\"git\")\n+        .arg(\"status\")\n+        .arg(\"--porcelain\")\n+        .arg(\"--untracked-files=no\")\n+        .output()\n+        .ok()\n+        .map(|o| o.stdout.is_empty())\n+}"}, {"sha": "30894b9d03c95eb1efec35be4c52972bc3bc6825", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5361f611107bdaed67dfeffe3e20aad082556ef7/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5361f611107bdaed67dfeffe3e20aad082556ef7/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=5361f611107bdaed67dfeffe3e20aad082556ef7", "patch": "@@ -29,6 +29,12 @@ use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n+// Include git commit hash and worktree status; contents are like\n+//   const COMMIT_HASH: Option<&'static str> = Some(\"c31a366\");\n+//   const WORKTREE_CLEAN: Option<bool> = Some(false);\n+// with `None` if running git failed, eg if it is not installed.\n+include!(concat!(env!(\"OUT_DIR\"), \"/git_info.rs\"));\n+\n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n \n@@ -291,11 +297,13 @@ fn print_usage(opts: &Options, reason: &str) {\n }\n \n fn print_version() {\n-    println!(\"{}.{}.{}{}\",\n-             option_env!(\"CARGO_PKG_VERSION_MAJOR\").unwrap_or(\"X\"),\n-             option_env!(\"CARGO_PKG_VERSION_MINOR\").unwrap_or(\"X\"),\n-             option_env!(\"CARGO_PKG_VERSION_PATCH\").unwrap_or(\"X\"),\n-             option_env!(\"CARGO_PKG_VERSION_PRE\").unwrap_or(\"\"));\n+    println!(\"{} ({}{})\",\n+             option_env!(\"CARGO_PKG_VERSION\").unwrap_or(\"unknown\"),\n+             COMMIT_HASH.unwrap_or(\"git commit unavailable\"),\n+             match WORKTREE_CLEAN {\n+                 Some(false) => \" worktree dirty\",\n+                 _ => \"\",\n+             });\n }\n \n fn determine_operation(matches: &Matches) -> FmtResult<Operation> {"}, {"sha": "08ec576f2218d71491ec878c9b5bab39f88c8088", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5361f611107bdaed67dfeffe3e20aad082556ef7/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5361f611107bdaed67dfeffe3e20aad082556ef7/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=5361f611107bdaed67dfeffe3e20aad082556ef7", "patch": "@@ -121,6 +121,7 @@ fn self_tests() {\n         .map(get_path_string);\n     // Hack because there's no `IntoIterator` impl for `[T; N]`.\n     let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n+    let files = files.chain(Some(\"build.rs\".to_owned()).into_iter());\n \n     let (reports, count, fails) = check_files(files);\n     let mut warnings = 0;"}]}