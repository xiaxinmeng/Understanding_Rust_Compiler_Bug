{"sha": "a192a199a8761a8c2b71ba2ca8202091b248716e", "node_id": "C_kwDOAAsO6NoAKGExOTJhMTk5YTg3NjFhOGMyYjcxYmEyY2E4MjAyMDkxYjI0ODcxNmU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-26T09:33:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-26T09:33:20Z"}, "message": "Rename flag, datastructure and messaging around muting stdout and stderr", "tree": {"sha": "a2ac4f5240353ae56bd0ca30215c9a50fd70f49f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ac4f5240353ae56bd0ca30215c9a50fd70f49f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a192a199a8761a8c2b71ba2ca8202091b248716e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a192a199a8761a8c2b71ba2ca8202091b248716e", "html_url": "https://github.com/rust-lang/rust/commit/a192a199a8761a8c2b71ba2ca8202091b248716e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a192a199a8761a8c2b71ba2ca8202091b248716e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d0fe1b6bbf373190465f115777a2d98bb2741bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d0fe1b6bbf373190465f115777a2d98bb2741bd", "html_url": "https://github.com/rust-lang/rust/commit/1d0fe1b6bbf373190465f115777a2d98bb2741bd"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "2fa045b574622514404e0666f10a13a128af4b5e", "filename": "src/bin/miri.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=a192a199a8761a8c2b71ba2ca8202091b248716e", "patch": "@@ -374,8 +374,8 @@ fn main() {\n                     miri_config.tag_raw = true;\n                     miri_config.check_number_validity = true;\n                 }\n-                \"-Zmiri-drop-stdout-stderr\" => {\n-                    miri_config.drop_stdout_stderr = true;\n+                \"-Zmiri-mute-stdout-stderr\" => {\n+                    miri_config.mute_stdout_stderr = true;\n                 }\n                 \"-Zmiri-track-raw-pointers\" => {\n                     eprintln!("}, {"sha": "028c9b97abb37562885db40e3e279e60ef5b3204", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=a192a199a8761a8c2b71ba2ca8202091b248716e", "patch": "@@ -118,7 +118,7 @@ pub struct MiriConfig {\n     pub strict_provenance: bool,\n     /// Whether to ignore any output by the program. This is helpful when debugging miri\n     /// as its messages don't get intermingled with the program messages.\n-    pub drop_stdout_stderr: bool,\n+    pub mute_stdout_stderr: bool,\n }\n \n impl Default for MiriConfig {\n@@ -145,7 +145,7 @@ impl Default for MiriConfig {\n             panic_on_unsupported: false,\n             backtrace_style: BacktraceStyle::Short,\n             strict_provenance: false,\n-            drop_stdout_stderr: false,\n+            mute_stdout_stderr: false,\n         }\n     }\n }"}, {"sha": "1c916220c8c5447a2bf493368c58c024dd9685a1", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=a192a199a8761a8c2b71ba2ca8202091b248716e", "patch": "@@ -292,8 +292,8 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// Failure rate of compare_exchange_weak, between 0.0 and 1.0\n     pub(crate) cmpxchg_weak_failure_rate: f64,\n \n-    /// Corresponds to -Zmiri-drop-stdout-stderr and doesn't write the output but acts as if it succeeded.\n-    pub(crate) drop_stdout_stderr: bool,\n+    /// Corresponds to -Zmiri-mute-stdout-stderr and doesn't write the output but acts as if it succeeded.\n+    pub(crate) mute_stdout_stderr: bool,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -330,7 +330,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             validate: config.validate,\n             enforce_number_validity: config.check_number_validity,\n             enforce_abi: config.check_abi,\n-            file_handler: FileHandler::new(config.drop_stdout_stderr),\n+            file_handler: FileHandler::new(config.mute_stdout_stderr),\n             dir_handler: Default::default(),\n             time_anchor: Instant::now(),\n             layouts,\n@@ -347,7 +347,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             tracked_alloc_ids: config.tracked_alloc_ids.clone(),\n             check_alignment: config.check_alignment,\n             cmpxchg_weak_failure_rate: config.cmpxchg_weak_failure_rate,\n-            drop_stdout_stderr: config.drop_stdout_stderr,\n+            mute_stdout_stderr: config.mute_stdout_stderr,\n         }\n     }\n "}, {"sha": "1b0a94e0ffc9134ce796ef12881db93ff6d1caf1", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=a192a199a8761a8c2b71ba2ca8202091b248716e", "patch": "@@ -252,27 +252,27 @@ impl FileDescriptor for io::Stderr {\n }\n \n #[derive(Debug)]\n-struct DevNull;\n+struct DummyOutput;\n \n-impl FileDescriptor for DevNull {\n+impl FileDescriptor for DummyOutput {\n     fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        throw_unsup_format!(\"/dev/null cannot be used as FileHandle\");\n+        throw_unsup_format!(\"stderr and stdout cannot be used as FileHandle\");\n     }\n \n     fn read<'tcx>(\n         &mut self,\n         _communicate_allowed: bool,\n         _bytes: &mut [u8],\n     ) -> InterpResult<'tcx, io::Result<usize>> {\n-        throw_unsup_format!(\"cannot read from /dev/null\");\n+        throw_unsup_format!(\"cannot read from stderr or stdout\");\n     }\n \n     fn write<'tcx>(\n         &self,\n         _communicate_allowed: bool,\n         bytes: &[u8],\n     ) -> InterpResult<'tcx, io::Result<usize>> {\n-        // We just don't write anything\n+        // We just don't write anything, but report to the user that we did.\n         Ok(Ok(bytes.len()))\n     }\n \n@@ -281,18 +281,18 @@ impl FileDescriptor for DevNull {\n         _communicate_allowed: bool,\n         _offset: SeekFrom,\n     ) -> InterpResult<'tcx, io::Result<u64>> {\n-        throw_unsup_format!(\"cannot seek on /dev/null\");\n+        throw_unsup_format!(\"cannot seek on stderr or stdout\");\n     }\n \n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,\n     ) -> InterpResult<'tcx, io::Result<i32>> {\n-        throw_unsup_format!(\"/dev/null cannot be closed\");\n+        throw_unsup_format!(\"stderr and stdout cannot be closed\");\n     }\n \n     fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n-        Ok(Box::new(DevNull))\n+        Ok(Box::new(DummyOutput))\n     }\n }\n \n@@ -302,11 +302,11 @@ pub struct FileHandler {\n }\n \n impl<'tcx> FileHandler {\n-    pub(crate) fn new(drop_stdout_stderr: bool) -> FileHandler {\n+    pub(crate) fn new(mute_stdout_stderr: bool) -> FileHandler {\n         let mut handles: BTreeMap<_, Box<dyn FileDescriptor>> = BTreeMap::new();\n-        if drop_stdout_stderr {\n-            handles.insert(0i32, Box::new(DevNull));\n-            handles.insert(1i32, Box::new(DevNull));\n+        if mute_stdout_stderr {\n+            handles.insert(0i32, Box::new(DummyOutput));\n+            handles.insert(1i32, Box::new(DummyOutput));\n         } else {\n             handles.insert(0i32, Box::new(io::stdin()));\n             handles.insert(1i32, Box::new(io::stdout()));"}, {"sha": "ddbad8c5affa1b06979527a399e796ff72fa509a", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192a199a8761a8c2b71ba2ca8202091b248716e/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=a192a199a8761a8c2b71ba2ca8202091b248716e", "patch": "@@ -75,7 +75,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     use std::io::{self, Write};\n \n                     let buf_cont = this.read_bytes_ptr(buf, Size::from_bytes(u64::from(n)))?;\n-                    let res = if this.machine.drop_stdout_stderr {\n+                    let res = if this.machine.mute_stdout_stderr {\n                         Ok(buf_cont.len())\n                     } else if handle == -11 {\n                         io::stdout().write(buf_cont)"}, {"sha": "849fce913862e4b1a03a55cd3eb7d15615a75ce8", "filename": "tests/run-pass/hide_stdout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a192a199a8761a8c2b71ba2ca8202091b248716e/tests%2Frun-pass%2Fhide_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192a199a8761a8c2b71ba2ca8202091b248716e/tests%2Frun-pass%2Fhide_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhide_stdout.rs?ref=a192a199a8761a8c2b71ba2ca8202091b248716e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-drop-stdout-stderr\n+// compile-flags: -Zmiri-mute-stdout-stderr\n \n fn main() {\n     println!(\"cake\");"}]}