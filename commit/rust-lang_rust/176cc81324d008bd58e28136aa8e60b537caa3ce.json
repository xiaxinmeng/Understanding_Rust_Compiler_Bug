{"sha": "176cc81324d008bd58e28136aa8e60b537caa3ce", "node_id": "C_kwDOAAsO6NoAKDE3NmNjODEzMjRkMDA4YmQ1OGUyODEzNmFhOGU2MGI1MzdjYWEzY2U", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-08-04T23:31:50Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-10-29T15:55:01Z"}, "message": "Update for new intrinsics", "tree": {"sha": "49464ab6b5abc249d28c1cf53c31ad2b4236d0b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49464ab6b5abc249d28c1cf53c31ad2b4236d0b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/176cc81324d008bd58e28136aa8e60b537caa3ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/176cc81324d008bd58e28136aa8e60b537caa3ce", "html_url": "https://github.com/rust-lang/rust/commit/176cc81324d008bd58e28136aa8e60b537caa3ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/176cc81324d008bd58e28136aa8e60b537caa3ce/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5a5732a1527fbdffbc825ae630d911fc130e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5a5732a1527fbdffbc825ae630d911fc130e2e", "html_url": "https://github.com/rust-lang/rust/commit/8a5a5732a1527fbdffbc825ae630d911fc130e2e"}], "stats": {"total": 210, "additions": 110, "deletions": 100}, "files": [{"sha": "d14b0de5d5e7e4a713faa0ce21b0a32123e0d6ec", "filename": "crates/core_simd/src/cast.rs", "status": "modified", "additions": 21, "deletions": 77, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcast.rs?ref=176cc81324d008bd58e28136aa8e60b537caa3ce", "patch": "@@ -1,79 +1,23 @@\n-use crate::simd::{intrinsics, LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use crate::simd::SimdElement;\n \n /// Supporting trait for `Simd::cast`.  Typically doesn't need to be used directly.\n-pub unsafe trait SimdCast<Target: SimdElement>: SimdElement {\n-    #[doc(hidden)]\n-    fn cast<const LANES: usize>(x: Simd<Self, LANES>) -> Simd<Target, LANES>\n-    where\n-        LaneCount<LANES>: SupportedLaneCount,\n-    {\n-        // Safety: implementing this trait indicates that the types are supported by `simd_as`\n-        unsafe { intrinsics::simd_as(x) }\n-    }\n-\n-    #[doc(hidden)]\n-    unsafe fn cast_unchecked<const LANES: usize>(x: Simd<Self, LANES>) -> Simd<Target, LANES>\n-    where\n-        LaneCount<LANES>: SupportedLaneCount,\n-    {\n-        // Safety: implementing this trait indicates that the types are supported by `simd_cast`\n-        // The caller is responsible for the conversion invariants.\n-        unsafe { intrinsics::simd_cast(x) }\n-    }\n-}\n-\n-macro_rules! into_number {\n-    { unsafe $from:ty as $to:ty } => {\n-        // Safety: casting between numbers is supported by `simd_cast` and `simd_as`\n-        unsafe impl SimdCast<$to> for $from {}\n-    };\n-    { unsafe $($type:ty),* } => {\n-        $(\n-        into_number! { unsafe $type as i8 }\n-        into_number! { unsafe $type as i16 }\n-        into_number! { unsafe $type as i32 }\n-        into_number! { unsafe $type as i64 }\n-        into_number! { unsafe $type as isize }\n-\n-        into_number! { unsafe $type as u8 }\n-        into_number! { unsafe $type as u16 }\n-        into_number! { unsafe $type as u32 }\n-        into_number! { unsafe $type as u64 }\n-        into_number! { unsafe $type as usize }\n-\n-        into_number! { unsafe $type as f32 }\n-        into_number! { unsafe $type as f64 }\n-        )*\n-    }\n-}\n-\n-into_number! { unsafe i8, i16, i32, i64, isize, u8, u16, u32, u64, usize, f32, f64 }\n-\n-// TODO uncomment pending PR to rustc\n-/*\n-macro_rules! into_pointer {\n-    { unsafe $($type:ty),* } => {\n-        $(\n-        // Safety: casting between numbers and pointers is supported by `simd_cast` and `simd_as`\n-        unsafe impl<T> SimdCast<$type> for *const T {}\n-        // Safety: casting between numbers and pointers is supported by `simd_cast` and `simd_as`\n-        unsafe impl<T> SimdCast<$type> for *mut T {}\n-        // Safety: casting between numbers and pointers is supported by `simd_cast` and `simd_as`\n-        unsafe impl<T> SimdCast<*const T> for $type {}\n-        // Safety: casting between numbers and pointers is supported by `simd_cast` and `simd_as`\n-        unsafe impl<T> SimdCast<*mut T> for $type {}\n-        )*\n-    }\n-}\n-\n-into_pointer! { unsafe i8, i16, i32, i64, isize, u8, u16, u32, u64, usize }\n-\n-// Safety: casting between pointers is supported by `simd_cast` and `simd_as`\n-unsafe impl<T, U> SimdCast<*const T> for *const U {}\n-// Safety: casting between pointers is supported by `simd_cast` and `simd_as`\n-unsafe impl<T, U> SimdCast<*const T> for *mut U {}\n-// Safety: casting between pointers is supported by `simd_cast` and `simd_as`\n-unsafe impl<T, U> SimdCast<*mut T> for *const U {}\n-// Safety: casting between pointers is supported by `simd_cast` and `simd_as`\n-unsafe impl<T, U> SimdCast<*mut T> for *mut U {}\n-*/\n+pub unsafe trait SimdCast: SimdElement {}\n+\n+unsafe impl SimdCast for i8 {}\n+unsafe impl SimdCast for i16 {}\n+unsafe impl SimdCast for i32 {}\n+unsafe impl SimdCast for i64 {}\n+unsafe impl SimdCast for isize {}\n+unsafe impl SimdCast for u8 {}\n+unsafe impl SimdCast for u16 {}\n+unsafe impl SimdCast for u32 {}\n+unsafe impl SimdCast for u64 {}\n+unsafe impl SimdCast for usize {}\n+unsafe impl SimdCast for f32 {}\n+unsafe impl SimdCast for f64 {}\n+\n+/// Supporting trait for `Simd::cast_ptr`.  Typically doesn't need to be used directly.\n+pub unsafe trait SimdCastPtr: SimdElement {}\n+\n+unsafe impl<T> SimdCastPtr for *const T {}\n+unsafe impl<T> SimdCastPtr for *mut T {}"}, {"sha": "27b41019dc8cfcfedab316d03942f389a623a061", "filename": "crates/core_simd/src/elements/const_ptr.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs?ref=176cc81324d008bd58e28136aa8e60b537caa3ce", "patch": "@@ -40,6 +40,15 @@ pub trait SimdConstPtr: Copy + Sealed {\n     /// Equivalent to calling [`pointer::with_addr`] on each lane.\n     fn with_addr(self, addr: Self::Usize) -> Self;\n \n+    /// Gets the \"address\" portion of the pointer, and \"exposes\" the provenance part for future use\n+    /// in [`from_exposed_addr`].\n+    fn expose_addr(self) -> Self::Usize;\n+\n+    /// Convert an address back to a pointer, picking up a previously \"exposed\" provenance.\n+    ///\n+    /// Equivalent to calling [`pointer::from_exposed_addr`] on each lane.\n+    fn from_exposed_addr(addr: Self::Usize) -> Self;\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     ///\n     /// Equivalent to calling [`pointer::wrapping_offset`] on each lane.\n@@ -77,8 +86,7 @@ where\n \n     #[inline]\n     fn as_mut(self) -> Self::MutPtr {\n-        unimplemented!()\n-        //self.cast()\n+        unsafe { intrinsics::simd_cast_ptr(self) }\n     }\n \n     #[inline]\n@@ -90,18 +98,25 @@ where\n     }\n \n     #[inline]\n-    fn with_addr(self, _addr: Self::Usize) -> Self {\n-        unimplemented!()\n-        /*\n+    fn with_addr(self, addr: Self::Usize) -> Self {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         //\n         // In the mean-time, this operation is defined to be \"as if\" it was\n         // a wrapping_offset, so we can emulate it as such. This should properly\n         // restore pointer provenance even under today's compiler.\n-        self.cast::<*const u8>()\n+        self.cast_ptr::<*const u8>()\n             .wrapping_offset(addr.cast::<isize>() - self.addr().cast::<isize>())\n-            .cast()\n-        */\n+            .cast_ptr()\n+    }\n+\n+    #[inline]\n+    fn expose_addr(self) -> Self::Usize {\n+        unsafe { intrinsics::simd_expose_addr(self) }\n+    }\n+\n+    #[inline]\n+    fn from_exposed_addr(addr: Self::Usize) -> Self {\n+        unsafe { intrinsics::simd_from_exposed_addr(addr) }\n     }\n \n     #[inline]"}, {"sha": "59a8b6293b5d8b991ab40456e8c7b4a5f4bff623", "filename": "crates/core_simd/src/elements/mut_ptr.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs?ref=176cc81324d008bd58e28136aa8e60b537caa3ce", "patch": "@@ -37,6 +37,15 @@ pub trait SimdMutPtr: Copy + Sealed {\n     /// Equivalent to calling [`pointer::with_addr`] on each lane.\n     fn with_addr(self, addr: Self::Usize) -> Self;\n \n+    /// Gets the \"address\" portion of the pointer, and \"exposes\" the provenance part for future use\n+    /// in [`from_exposed_addr`].\n+    fn expose_addr(self) -> Self::Usize;\n+\n+    /// Convert an address back to a pointer, picking up a previously \"exposed\" provenance.\n+    ///\n+    /// Equivalent to calling [`pointer::from_exposed_addr`] on each lane.\n+    fn from_exposed_addr(addr: Self::Usize) -> Self;\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     ///\n     /// Equivalent to calling [`pointer::wrapping_offset`] on each lane.\n@@ -85,18 +94,25 @@ where\n     }\n \n     #[inline]\n-    fn with_addr(self, _addr: Self::Usize) -> Self {\n-        unimplemented!()\n-        /*\n+    fn with_addr(self, addr: Self::Usize) -> Self {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         //\n         // In the mean-time, this operation is defined to be \"as if\" it was\n         // a wrapping_offset, so we can emulate it as such. This should properly\n         // restore pointer provenance even under today's compiler.\n-        self.cast::<*mut u8>()\n+        self.cast_ptr::<*mut u8>()\n             .wrapping_offset(addr.cast::<isize>() - self.addr().cast::<isize>())\n-            .cast()\n-        */\n+            .cast_ptr()\n+    }\n+\n+    #[inline]\n+    fn expose_addr(self) -> Self::Usize {\n+        unsafe { intrinsics::simd_expose_addr(self) }\n+    }\n+\n+    #[inline]\n+    fn from_exposed_addr(addr: Self::Usize) -> Self {\n+        unsafe { intrinsics::simd_from_exposed_addr(addr) }\n     }\n \n     #[inline]"}, {"sha": "c0fbae2db0841fd732173d817a67d9796f5585d7", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=176cc81324d008bd58e28136aa8e60b537caa3ce", "patch": "@@ -154,4 +154,27 @@ extern \"platform-intrinsic\" {\n \n     // equivalent to wrapping_offset\n     pub(crate) fn simd_arith_offset<T, U>(ptr: T, offset: U) -> T;\n+\n+    /*\n+    /// equivalent to `T as U` semantics, specifically for pointers\n+    pub(crate) fn simd_cast_ptr<T, U>(ptr: T) -> U;\n+\n+    /// expose a pointer as an address\n+    pub(crate) fn simd_expose_addr<T, U>(ptr: T) -> U;\n+\n+    /// convert an exposed address back to a pointer\n+    pub(crate) fn simd_from_exposed_addr<T, U>(addr: T) -> U;\n+    */\n+}\n+\n+pub(crate) unsafe fn simd_cast_ptr<T, U>(_ptr: T) -> U {\n+    unimplemented!()\n+}\n+\n+pub(crate) unsafe fn simd_expose_addr<T, U>(_ptr: T) -> U {\n+    unimplemented!()\n+}\n+\n+pub(crate) unsafe fn simd_from_exposed_addr<T, U>(_addr: T) -> U {\n+    unimplemented!()\n }"}, {"sha": "3c435c4c8059344af06286d822a82f32b542dd73", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176cc81324d008bd58e28136aa8e60b537caa3ce/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=176cc81324d008bd58e28136aa8e60b537caa3ce", "patch": "@@ -1,6 +1,6 @@\n use crate::simd::{\n-    intrinsics, LaneCount, Mask, MaskElement, SimdCast, SimdConstPtr, SimdMutPtr, SimdPartialOrd,\n-    SupportedLaneCount, Swizzle,\n+    intrinsics, LaneCount, Mask, MaskElement, SimdCast, SimdCastPtr, SimdConstPtr, SimdMutPtr,\n+    SimdPartialOrd, SupportedLaneCount, Swizzle,\n };\n \n /// A SIMD vector of `LANES` elements of type `T`. `Simd<T, N>` has the same shape as [`[T; N]`](array), but operates like `T`.\n@@ -209,11 +209,23 @@ where\n     #[must_use]\n     #[inline]\n     #[cfg(not(bootstrap))]\n-    pub fn cast<U: SimdElement>(self) -> Simd<U, LANES>\n+    pub fn cast<U: SimdCast>(self) -> Simd<U, LANES>\n     where\n-        T: SimdCast<U>,\n+        T: SimdCast,\n     {\n-        SimdCast::cast(self)\n+        // Safety: supported types are guaranteed by SimdCast\n+        unsafe { intrinsics::simd_as(self) }\n+    }\n+\n+    /// Lanewise casts pointers to another pointer type.\n+    #[must_use]\n+    #[inline]\n+    pub fn cast_ptr<U: SimdCastPtr>(self) -> Simd<U, LANES>\n+    where\n+        T: SimdCastPtr,\n+    {\n+        // Safety: supported types are guaranteed by SimdCastPtr\n+        unsafe { intrinsics::simd_cast_ptr(self) }\n     }\n \n     /// Rounds toward zero and converts to the same-width integer type, assuming that\n@@ -234,11 +246,11 @@ where\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub unsafe fn to_int_unchecked<I>(self) -> Simd<I, LANES>\n     where\n-        T: core::convert::FloatToInt<I> + SimdCast<I>,\n-        I: SimdElement,\n+        T: core::convert::FloatToInt<I> + SimdCast,\n+        I: SimdCast,\n     {\n-        // Safety: the caller is responsible for the invariants\n-        unsafe { SimdCast::cast_unchecked(self) }\n+        // Safety: supported types are guaranteed by SimdCast, the caller is responsible for the extra invariants\n+        unsafe { intrinsics::simd_cast(self) }\n     }\n \n     /// Reads from potentially discontiguous indices in `slice` to construct a SIMD vector."}]}