{"sha": "b73f1a51dcd1011129dc5c5c55a7577134410dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3M2YxYTUxZGNkMTAxMTEyOWRjNWM1YzU1YTc1NzcxMzQ0MTBkYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T11:08:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T11:08:21Z"}, "message": "better and more consistent variable names", "tree": {"sha": "8a76a9156aaa2f945000134482ae88ae4dd321af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a76a9156aaa2f945000134482ae88ae4dd321af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73f1a51dcd1011129dc5c5c55a7577134410dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73f1a51dcd1011129dc5c5c55a7577134410dbc", "html_url": "https://github.com/rust-lang/rust/commit/b73f1a51dcd1011129dc5c5c55a7577134410dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73f1a51dcd1011129dc5c5c55a7577134410dbc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c0f6011057b5b2f7bd4d74ce63caf8d6630c39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0f6011057b5b2f7bd4d74ce63caf8d6630c39e", "html_url": "https://github.com/rust-lang/rust/commit/8c0f6011057b5b2f7bd4d74ce63caf8d6630c39e"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2a0bad2fa746c81141937f57aaaa57fe3bf21fb7", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1a51dcd1011129dc5c5c55a7577134410dbc/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1a51dcd1011129dc5c5c55a7577134410dbc/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b73f1a51dcd1011129dc5c5c55a7577134410dbc", "patch": "@@ -698,28 +698,28 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // We need to use machine arithmetic.\n                         let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n                         let variants_start_val = ImmTy::from_uint(variants_start, discr_layout);\n-                        let adjusted_discr = self.binary_op(\n+                        let variant_index_relative_val = self.binary_op(\n                             mir::BinOp::Sub,\n                             discr_val,\n                             niche_start_val,\n                         )?;\n-                        let adjusted_discr = self.binary_op(\n+                        let variant_index_val = self.binary_op(\n                             mir::BinOp::Add,\n-                            adjusted_discr,\n+                            variant_index_relative_val,\n                             variants_start_val,\n                         )?;\n-                        let adjusted_discr = adjusted_discr\n+                        let variant_index = variant_index_val\n                             .to_scalar()?\n                             .assert_bits(discr_val.layout.size);\n                         // Check if this is in the range that indicates an actual discriminant.\n-                        if variants_start <= adjusted_discr && adjusted_discr <= variants_end {\n-                            let index = adjusted_discr as usize;\n-                            assert_eq!(index as u128, adjusted_discr);\n+                        if variants_start <= variant_index && variant_index <= variants_end {\n+                            let index = variant_index as usize;\n+                            assert_eq!(index as u128, variant_index);\n                             assert!(index < rval.layout.ty\n                                 .ty_adt_def()\n                                 .expect(\"tagged layout for non adt\")\n                                 .variants.len());\n-                            (adjusted_discr, VariantIdx::from_usize(index))\n+                            (variant_index, VariantIdx::from_usize(index))\n                         } else {\n                             (dataful_variant.as_u32() as u128, dataful_variant)\n                         }"}, {"sha": "636b070a3d8f31855c8cf63dbb47678d1b8098cc", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b73f1a51dcd1011129dc5c5c55a7577134410dbc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73f1a51dcd1011129dc5c5c55a7577134410dbc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b73f1a51dcd1011129dc5c5c55a7577134410dbc", "patch": "@@ -1073,19 +1073,19 @@ where\n                     let variants_start_val = ImmTy::from_uint(variants_start, discr_layout);\n                     let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n                     let variant_index_val = ImmTy::from_uint(variant_index.as_u32(), discr_layout);\n-                    let niche_val = self.binary_op(\n+                    let variant_index_relative_val = self.binary_op(\n                         mir::BinOp::Sub,\n                         variant_index_val,\n                         variants_start_val,\n                     )?;\n-                    let niche_val = self.binary_op(\n+                    let discr_val = self.binary_op(\n                         mir::BinOp::Add,\n-                        niche_val,\n+                        variant_index_relative_val,\n                         niche_start_val,\n                     )?;\n                     // Write result.\n                     let niche_dest = self.place_field(dest, discr_index as u64)?;\n-                    self.write_immediate(*niche_val, niche_dest)?;\n+                    self.write_immediate(*discr_val, niche_dest)?;\n                 }\n             }\n         }"}]}