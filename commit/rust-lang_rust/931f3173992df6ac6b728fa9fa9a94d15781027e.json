{"sha": "931f3173992df6ac6b728fa9fa9a94d15781027e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMWYzMTczOTkyZGY2YWM2YjcyOGZhOWZhOWE5NGQxNTc4MTAyN2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-17T11:01:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-17T11:01:37Z"}, "message": "Merge #4913 #4915 #4916\n\n4913: Remove debugging code for incremental sync r=matklad a=lnicola\n\n\n\n4915: Inspect markdown code fences to determine whether to apply syntax highlighting r=matklad a=ltentrup\n\nFixes #4904 \n\n4916: Warnings as hint or info r=matklad a=GabbeV\n\nFixes #4229 \r\n\r\nThis PR is my second attempt at providing a solution to the above issue. My last PR(#4721) had to be rolled back(#4862) due to it overriding behavior many users expected. This PR solves a broader problem while trying to minimize surprises for the users. \r\n\r\n### Problem description\r\nThe underlying problem this PR tries to solve is the mismatch between [Rustc lint levels](https://doc.rust-lang.org/rustc/lints/levels.html) and [LSP diagnostic severity](https://microsoft.github.io/language-server-protocol/specification#diagnostic). Rustc currently doesn't have a lint level less severe than warning forcing the user to disable warnings if they think they get to noisy. LSP however provides two severitys below warning, information and hint. This allows editors like VSCode to provide more fine grained control over how prominently to show different diagnostics.\r\n\r\nInfo severity shows a blue squiggly underline in code and can be filtered separately from errors and warnings in the problems panel.\r\n![image](https://user-images.githubusercontent.com/13839236/84830640-0bb8d900-b02a-11ea-9e2f-0561b0e8f1ef.png)\r\n![image](https://user-images.githubusercontent.com/13839236/84826931-ffca1880-b023-11ea-8080-5e5b91a6ac0d.png)\r\n\r\nHint severity doesn't show up in the problems panel at all and only show three dots under the affected code or just faded text if the diagnostic also has the unnecessary tag.\r\n![image](https://user-images.githubusercontent.com/13839236/84827165-55062a00-b024-11ea-8bd6-bdbf1217c4c5.png)\r\n\r\n### Solution\r\nThe solution provided by this PR allows the user to configure lists of of warnings to report as info severity and hint severity respectively. I purposefully only convert warnings and not errors as i believe it's a good idea to have the editor show the same severity as the compiler as much as possible.\r\n![image](https://user-images.githubusercontent.com/13839236/84829609-50437500-b028-11ea-80a8-1bbd05680ba7.png)\r\n\r\n### Open questions\r\n#### Discoverability\r\nHow do we teach this to new and existing users? Should a section be added to the user manual? If so  where and what should it say?\r\n\r\n#### Defaults\r\nOther languages such as TypeScript report unused code as hint by default. Should rust-analyzer similarly report some problems as hint/info by default?\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>\nCo-authored-by: Gabriel Valfridsson <gabriel.valfridsson@gmail.com>", "tree": {"sha": "a0f27ea80505d451673e3f035c7a1e8d5b4bc97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f27ea80505d451673e3f035c7a1e8d5b4bc97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931f3173992df6ac6b728fa9fa9a94d15781027e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6fgRCRBK7hj4Ov3rIwAAdHIIAFaOtqVBIdW4ITADxiS9DmBw\nlCa+U4Cul6rMlqC43L5j+ZlDf80JlwwZK/W0cRo6huec5cwyGNuNfCibGm2pxNDj\n4QzJcL4mngByxNvEvIdJ8lpxzWX9TZXbarCNdxZriGyvEa2AdPyTKPKmI3cQu37z\n+clUoQvkkPUsa8dCPBS7oA9jvqFZGJfwG3wckZ54HRZgyL6gwPjb0q7XEIW9P/ap\nZcHUwAZiO79TwLL3mHa293g3NbPkide+xILy5kzTS7/XuLAMxgO9UgHYY+u3B8f0\nZG22LcEyfLM2gLFDDbi0477EujGh/TUOaSKRtD8LO7cUCilrj6kbWtbuFpE0ScA=\n=G79m\n-----END PGP SIGNATURE-----\n", "payload": "tree a0f27ea80505d451673e3f035c7a1e8d5b4bc97c\nparent 09c5cfedff0542d79ae0575955095aa98cc41c16\nparent 2fa0b20ce05a1d6b8f9bf0f0d9f1dfb15b84fb9d\nparent 8ff91cf6b649ea241e886726df91d9bcb6b6c7cb\nparent 656e95211edf26bd82bd66f53ca3bcdfb7296e81\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592391697 +0000\ncommitter GitHub <noreply@github.com> 1592391697 +0000\n\nMerge #4913 #4915 #4916\n\n4913: Remove debugging code for incremental sync r=matklad a=lnicola\n\n\n\n4915: Inspect markdown code fences to determine whether to apply syntax highlighting r=matklad a=ltentrup\n\nFixes #4904 \n\n4916: Warnings as hint or info r=matklad a=GabbeV\n\nFixes #4229 \r\n\r\nThis PR is my second attempt at providing a solution to the above issue. My last PR(#4721) had to be rolled back(#4862) due to it overriding behavior many users expected. This PR solves a broader problem while trying to minimize surprises for the users. \r\n\r\n### Problem description\r\nThe underlying problem this PR tries to solve is the mismatch between [Rustc lint levels](https://doc.rust-lang.org/rustc/lints/levels.html) and [LSP diagnostic severity](https://microsoft.github.io/language-server-protocol/specification#diagnostic). Rustc currently doesn't have a lint level less severe than warning forcing the user to disable warnings if they think they get to noisy. LSP however provides two severitys below warning, information and hint. This allows editors like VSCode to provide more fine grained control over how prominently to show different diagnostics.\r\n\r\nInfo severity shows a blue squiggly underline in code and can be filtered separately from errors and warnings in the problems panel.\r\n![image](https://user-images.githubusercontent.com/13839236/84830640-0bb8d900-b02a-11ea-9e2f-0561b0e8f1ef.png)\r\n![image](https://user-images.githubusercontent.com/13839236/84826931-ffca1880-b023-11ea-8080-5e5b91a6ac0d.png)\r\n\r\nHint severity doesn't show up in the problems panel at all and only show three dots under the affected code or just faded text if the diagnostic also has the unnecessary tag.\r\n![image](https://user-images.githubusercontent.com/13839236/84827165-55062a00-b024-11ea-8bd6-bdbf1217c4c5.png)\r\n\r\n### Solution\r\nThe solution provided by this PR allows the user to configure lists of of warnings to report as info severity and hint severity respectively. I purposefully only convert warnings and not errors as i believe it's a good idea to have the editor show the same severity as the compiler as much as possible.\r\n![image](https://user-images.githubusercontent.com/13839236/84829609-50437500-b028-11ea-80a8-1bbd05680ba7.png)\r\n\r\n### Open questions\r\n#### Discoverability\r\nHow do we teach this to new and existing users? Should a section be added to the user manual? If so  where and what should it say?\r\n\r\n#### Defaults\r\nOther languages such as TypeScript report unused code as hint by default. Should rust-analyzer similarly report some problems as hint/info by default?\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>\nCo-authored-by: Gabriel Valfridsson <gabriel.valfridsson@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931f3173992df6ac6b728fa9fa9a94d15781027e", "html_url": "https://github.com/rust-lang/rust/commit/931f3173992df6ac6b728fa9fa9a94d15781027e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931f3173992df6ac6b728fa9fa9a94d15781027e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c5cfedff0542d79ae0575955095aa98cc41c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/09c5cfedff0542d79ae0575955095aa98cc41c16", "html_url": "https://github.com/rust-lang/rust/commit/09c5cfedff0542d79ae0575955095aa98cc41c16"}, {"sha": "2fa0b20ce05a1d6b8f9bf0f0d9f1dfb15b84fb9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa0b20ce05a1d6b8f9bf0f0d9f1dfb15b84fb9d", "html_url": "https://github.com/rust-lang/rust/commit/2fa0b20ce05a1d6b8f9bf0f0d9f1dfb15b84fb9d"}, {"sha": "8ff91cf6b649ea241e886726df91d9bcb6b6c7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff91cf6b649ea241e886726df91d9bcb6b6c7cb", "html_url": "https://github.com/rust-lang/rust/commit/8ff91cf6b649ea241e886726df91d9bcb6b6c7cb"}, {"sha": "656e95211edf26bd82bd66f53ca3bcdfb7296e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/656e95211edf26bd82bd66f53ca3bcdfb7296e81", "html_url": "https://github.com/rust-lang/rust/commit/656e95211edf26bd82bd66f53ca3bcdfb7296e81"}], "stats": {"total": 460, "additions": 426, "deletions": 34}, "files": [{"sha": "13a5d1b12a2021c1c57a98fb5d78ad028747e6c5", "filename": "crates/ra_ide/src/snapshots/highlight_doctest.html", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -73,9 +73,13 @@\n     <span class=\"comment\">///</span>\n     <span class=\"comment\">/// ```</span>\n     <span class=\"comment\">///</span>\n-    <span class=\"comment\">/// ```</span>\n+    <span class=\"comment\">/// ```rust,no_run</span>\n     <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foobar</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>().<span class=\"function\">bar</span>();\n     <span class=\"comment\">/// ```</span>\n+    <span class=\"comment\">///</span>\n+    <span class=\"comment\">/// ```sh</span>\n+    <span class=\"comment\">/// echo 1</span>\n+    <span class=\"comment\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">bool</span> {\n         <span class=\"bool_literal\">true</span>\n     }"}, {"sha": "929a5cc5c0a08ee0f63a8afe326ec7cd1ca54a52", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -53,6 +53,10 @@ pub(super) fn highlight_injection(\n /// Mapping from extracted documentation code to original code\n type RangesMap = BTreeMap<TextSize, TextSize>;\n \n+const RUSTDOC_FENCE: &'static str = \"```\";\n+const RUSTDOC_FENCE_TOKENS: &[&'static str] =\n+    &[\"\", \"rust\", \"should_panic\", \"ignore\", \"no_run\", \"compile_fail\", \"edition2015\", \"edition2018\"];\n+\n /// Extracts Rust code from documentation comments as well as a mapping from\n /// the extracted source code back to the original source ranges.\n /// Lastly, a vector of new comment highlight ranges (spanning only the\n@@ -67,6 +71,7 @@ pub(super) fn extract_doc_comments(\n     // Mapping from extracted documentation code to original code\n     let mut range_mapping: RangesMap = BTreeMap::new();\n     let mut line_start = TextSize::try_from(prefix.len()).unwrap();\n+    let mut is_codeblock = false;\n     let mut is_doctest = false;\n     // Replace the original, line-spanning comment ranges by new, only comment-prefix\n     // spanning comment ranges.\n@@ -76,8 +81,13 @@ pub(super) fn extract_doc_comments(\n         .filter_map(|el| el.into_token().and_then(ast::Comment::cast))\n         .filter(|comment| comment.kind().doc.is_some())\n         .filter(|comment| {\n-            if comment.text().contains(\"```\") {\n-                is_doctest = !is_doctest;\n+            if let Some(idx) = comment.text().find(RUSTDOC_FENCE) {\n+                is_codeblock = !is_codeblock;\n+                // Check whether code is rust by inspecting fence guards\n+                let guards = &comment.text()[idx + RUSTDOC_FENCE.len()..];\n+                let is_rust =\n+                    guards.split(',').all(|sub| RUSTDOC_FENCE_TOKENS.contains(&sub.trim()));\n+                is_doctest = is_codeblock && is_rust;\n                 false\n             } else {\n                 is_doctest"}, {"sha": "ebf5b50ac0459a4d60babe254d57ccd5c482c207", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -329,9 +329,13 @@ impl Foo {\n     ///\n     /// ```\n     ///\n-    /// ```\n+    /// ```rust,no_run\n     /// let foobar = Foo::new().bar();\n     /// ```\n+    ///\n+    /// ```sh\n+    /// echo 1\n+    /// ```\n     pub fn foo(&self) -> bool {\n         true\n     }"}, {"sha": "0df7427cb974100bca1962586b85e16105a090aa", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -9,6 +9,7 @@\n \n use std::{ffi::OsString, path::PathBuf};\n \n+use crate::diagnostics::DiagnosticsConfig;\n use lsp_types::ClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n use ra_ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n@@ -20,6 +21,7 @@ pub struct Config {\n     pub client_caps: ClientCapsConfig,\n \n     pub publish_diagnostics: bool,\n+    pub diagnostics: DiagnosticsConfig,\n     pub lru_capacity: Option<usize>,\n     pub proc_macro_srv: Option<(PathBuf, Vec<OsString>)>,\n     pub files: FilesConfig,\n@@ -136,6 +138,7 @@ impl Default for Config {\n \n             with_sysroot: true,\n             publish_diagnostics: true,\n+            diagnostics: DiagnosticsConfig::default(),\n             lru_capacity: None,\n             proc_macro_srv: None,\n             files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n@@ -184,6 +187,8 @@ impl Config {\n \n         set(value, \"/withSysroot\", &mut self.with_sysroot);\n         set(value, \"/diagnostics/enable\", &mut self.publish_diagnostics);\n+        set(value, \"/diagnostics/warningsAsInfo\", &mut self.diagnostics.warnings_as_info);\n+        set(value, \"/diagnostics/warningsAsHint\", &mut self.diagnostics.warnings_as_hint);\n         set(value, \"/lruCapacity\", &mut self.lru_capacity);\n         self.files.watcher = match get(value, \"/files/watcher\") {\n             Some(\"client\") => FilesWatcher::Client,"}, {"sha": "290609e7f9b45736ce911f7c5cf1364ff351887b", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -10,6 +10,12 @@ use crate::lsp_ext;\n \n pub type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n \n+#[derive(Debug, Default, Clone)]\n+pub struct DiagnosticsConfig {\n+    pub warnings_as_info: Vec<String>,\n+    pub warnings_as_hint: Vec<String>,\n+}\n+\n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticCollection {\n     pub native: HashMap<FileId, Vec<Diagnostic>>,"}, {"sha": "f0273315e932706b572d3b667faacb8ecdd929a3", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -0,0 +1,86 @@\n+---\n+source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n+expression: diag\n+---\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/driver/subcommand/repl.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n+            related_information: None,\n+            tags: Some(\n+                [\n+                    Unnecessary,\n+                ],\n+            ),\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                id: None,\n+                group: None,\n+                kind: Some(\n+                    \"quickfix\",\n+                ),\n+                command: None,\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                \"file:///test/driver/subcommand/repl.rs\": [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+            },\n+        ],\n+    },\n+]"}, {"sha": "85fd050fd7d59a35d6b765ae6cea95cd22589e3a", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -0,0 +1,86 @@\n+---\n+source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n+expression: diag\n+---\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/driver/subcommand/repl.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+            severity: Some(\n+                Information,\n+            ),\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n+            related_information: None,\n+            tags: Some(\n+                [\n+                    Unnecessary,\n+                ],\n+            ),\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                id: None,\n+                group: None,\n+                kind: Some(\n+                    \"quickfix\",\n+                ),\n+                command: None,\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                \"file:///test/driver/subcommand/repl.rs\": [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+            },\n+        ],\n+    },\n+]"}, {"sha": "ba74f15f3c055a3da7fa292b4ac1c8a489888da9", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 200, "deletions": 13, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -9,14 +9,24 @@ use lsp_types::{\n use ra_flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion};\n use stdx::format_to;\n \n+use super::DiagnosticsConfig;\n use crate::{lsp_ext, to_proto::url_from_abs_path};\n \n-/// Converts a Rust level string to a LSP severity\n-fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n-    let res = match val {\n+/// Determines the LSP severity from a diagnostic\n+fn map_diagnostic_to_severity(\n+    config: &DiagnosticsConfig,\n+    val: &ra_flycheck::Diagnostic,\n+) -> Option<DiagnosticSeverity> {\n+    let res = match val.level {\n         DiagnosticLevel::Ice => DiagnosticSeverity::Error,\n         DiagnosticLevel::Error => DiagnosticSeverity::Error,\n-        DiagnosticLevel::Warning => DiagnosticSeverity::Warning,\n+        DiagnosticLevel::Warning => match &val.code {\n+            Some(code) if config.warnings_as_hint.contains(&code.code) => DiagnosticSeverity::Hint,\n+            Some(code) if config.warnings_as_info.contains(&code.code) => {\n+                DiagnosticSeverity::Information\n+            }\n+            _ => DiagnosticSeverity::Warning,\n+        },\n         DiagnosticLevel::Note => DiagnosticSeverity::Information,\n         DiagnosticLevel::Help => DiagnosticSeverity::Hint,\n         DiagnosticLevel::Unknown => return None,\n@@ -172,6 +182,7 @@ pub(crate) struct MappedRustDiagnostic {\n ///\n /// If the diagnostic has no primary span this will return `None`\n pub(crate) fn map_rust_diagnostic_to_lsp(\n+    config: &DiagnosticsConfig,\n     rd: &ra_flycheck::Diagnostic,\n     workspace_root: &Path,\n ) -> Vec<MappedRustDiagnostic> {\n@@ -180,7 +191,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         return Vec::new();\n     }\n \n-    let severity = map_level_to_severity(rd.level);\n+    let severity = map_diagnostic_to_severity(config, rd);\n \n     let mut source = String::from(\"rustc\");\n     let mut code = rd.code.as_ref().map(|c| c.code.clone());\n@@ -328,7 +339,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -410,7 +421,183 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    #[cfg(not(windows))]\n+    fn snap_rustc_unused_variable_as_info() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"unused variable: `foo`\",\n+    \"code\": {\n+        \"code\": \"unused_variables\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"driver/subcommand/repl.rs\",\n+            \"byte_start\": 9228,\n+            \"byte_end\": 9231,\n+            \"line_start\": 291,\n+            \"line_end\": 291,\n+            \"column_start\": 9,\n+            \"column_end\": 12,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let foo = 42;\",\n+                    \"highlight_start\": 9,\n+                    \"highlight_end\": 12\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"#[warn(unused_variables)] on by default\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider prefixing with an underscore\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"driver/subcommand/repl.rs\",\n+                    \"byte_start\": 9228,\n+                    \"byte_end\": 9231,\n+                    \"line_start\": 291,\n+                    \"line_end\": 291,\n+                    \"column_start\": 9,\n+                    \"column_end\": 12,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let foo = 42;\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 12\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"_foo\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n+    }\"##,\n+        );\n+\n+        let config = DiagnosticsConfig {\n+            warnings_as_info: vec![\"unused_variables\".to_string()],\n+            ..DiagnosticsConfig::default()\n+        };\n+\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    #[cfg(not(windows))]\n+    fn snap_rustc_unused_variable_as_hint() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"unused variable: `foo`\",\n+    \"code\": {\n+        \"code\": \"unused_variables\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"driver/subcommand/repl.rs\",\n+            \"byte_start\": 9228,\n+            \"byte_end\": 9231,\n+            \"line_start\": 291,\n+            \"line_end\": 291,\n+            \"column_start\": 9,\n+            \"column_end\": 12,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let foo = 42;\",\n+                    \"highlight_start\": 9,\n+                    \"highlight_end\": 12\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"#[warn(unused_variables)] on by default\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider prefixing with an underscore\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"driver/subcommand/repl.rs\",\n+                    \"byte_start\": 9228,\n+                    \"byte_end\": 9231,\n+                    \"line_start\": 291,\n+                    \"line_end\": 291,\n+                    \"column_start\": 9,\n+                    \"column_end\": 12,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let foo = 42;\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 12\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"_foo\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n+    }\"##,\n+        );\n+\n+        let config = DiagnosticsConfig {\n+            warnings_as_hint: vec![\"unused_variables\".to_string()],\n+            ..DiagnosticsConfig::default()\n+        };\n+\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -534,7 +721,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -654,7 +841,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -697,7 +884,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -968,7 +1155,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -1197,7 +1384,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -1330,7 +1517,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n }"}, {"sha": "80cfd3c28e8ed4cbf3f68749fbcd248f7f777c52", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -669,14 +669,11 @@ fn apply_document_changes(\n     mut line_index: Cow<'_, LineIndex>,\n     content_changes: Vec<TextDocumentContentChangeEvent>,\n ) {\n-    // Remove when https://github.com/rust-analyzer/rust-analyzer/issues/4263 is fixed.\n-    let backup_text = old_text.clone();\n-    let backup_changes = content_changes.clone();\n-\n     // The changes we got must be applied sequentially, but can cross lines so we\n     // have to keep our line index updated.\n     // Some clients (e.g. Code) sort the ranges in reverse. As an optimization, we\n     // remember the last valid line in the index and only rebuild it if needed.\n+    // The VFS will normalize the end of lines to `\\n`.\n     enum IndexValid {\n         All,\n         UpToLineExclusive(u64),\n@@ -700,19 +697,7 @@ fn apply_document_changes(\n                 }\n                 index_valid = IndexValid::UpToLineExclusive(range.start.line);\n                 let range = from_proto::text_range(&line_index, range);\n-                let mut text = old_text.to_owned();\n-                match std::panic::catch_unwind(move || {\n-                    text.replace_range(Range::<usize>::from(range), &change.text);\n-                    text\n-                }) {\n-                    Ok(t) => *old_text = t,\n-                    Err(e) => {\n-                        eprintln!(\"Bug in incremental text synchronization. Please report the following output on https://github.com/rust-analyzer/rust-analyzer/issues/4263\");\n-                        dbg!(&backup_text);\n-                        dbg!(&backup_changes);\n-                        std::panic::resume_unwind(e);\n-                    }\n-                }\n+                old_text.replace_range(Range::<usize>::from(range), &change.text);\n             }\n             None => {\n                 *old_text = change.text;\n@@ -734,6 +719,7 @@ fn on_check_task(\n \n         CheckTask::AddDiagnostic { workspace_root, diagnostic } => {\n             let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n+                &global_state.config.diagnostics,\n                 &diagnostic,\n                 &workspace_root,\n             );"}, {"sha": "3acc375f6723edfbd799ed315d3ea55e915ea696", "filename": "editors/code/package.json", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/931f3173992df6ac6b728fa9fa9a94d15781027e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/931f3173992df6ac6b728fa9fa9a94d15781027e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=931f3173992df6ac6b728fa9fa9a94d15781027e", "patch": "@@ -525,6 +525,24 @@\n                     \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates\",\n                     \"type\": \"boolean\",\n                     \"default\": true\n+                },\n+                \"rust-analyzer.diagnostics.warningsAsInfo\": {\n+                    \"type\": \"array\",\n+                    \"uniqueItems\": true,\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"description\": \"List of warnings that should be displayed with info severity.\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the problems panel.\",\n+                    \"default\": []\n+                },\n+                \"rust-analyzer.diagnostics.warningsAsHint\": {\n+                    \"type\": \"array\",\n+                    \"uniqueItems\": true,\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"description\": \"List of warnings warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in te problems panel.\",\n+                    \"default\": []\n                 }\n             }\n         },"}]}