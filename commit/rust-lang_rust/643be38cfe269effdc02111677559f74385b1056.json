{"sha": "643be38cfe269effdc02111677559f74385b1056", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0M2JlMzhjZmUyNjllZmZkYzAyMTExNjc3NTU5Zjc0Mzg1YjEwNTY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-19T19:53:05Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-19T19:53:05Z"}, "message": "Hide the once-move-out privilege for stack fns behind '-Z once-fns'", "tree": {"sha": "115d2c06f4010fa7daf36d9fa5050b933cb5cba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/115d2c06f4010fa7daf36d9fa5050b933cb5cba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643be38cfe269effdc02111677559f74385b1056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643be38cfe269effdc02111677559f74385b1056", "html_url": "https://github.com/rust-lang/rust/commit/643be38cfe269effdc02111677559f74385b1056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643be38cfe269effdc02111677559f74385b1056/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1f037e6ac75e05e6bc3f05ec6cab9de8c971e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f037e6ac75e05e6bc3f05ec6cab9de8c971e81", "html_url": "https://github.com/rust-lang/rust/commit/c1f037e6ac75e05e6bc3f05ec6cab9de8c971e81"}], "stats": {"total": 114, "additions": 66, "deletions": 48}, "files": [{"sha": "e4cb614c948ecd85bf7a6a90dfde2558d323e1a0", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/643be38cfe269effdc02111677559f74385b1056/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643be38cfe269effdc02111677559f74385b1056/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=643be38cfe269effdc02111677559f74385b1056", "patch": "@@ -45,32 +45,33 @@ pub struct config {\n     float_type: float_ty\n }\n \n-pub static verbose: uint = 1 << 0;\n-pub static time_passes: uint = 1 << 1;\n-pub static count_llvm_insns: uint = 1 << 2;\n-pub static time_llvm_passes: uint = 1 << 3;\n-pub static trans_stats: uint = 1 << 4;\n-pub static asm_comments: uint = 1 << 5;\n-pub static no_verify: uint = 1 << 6;\n-pub static trace: uint = 1 << 7;\n-pub static coherence: uint = 1 << 8;\n-pub static borrowck_stats: uint = 1 << 9;\n-pub static borrowck_note_pure: uint = 1 << 10;\n-pub static borrowck_note_loan: uint = 1 << 11;\n-pub static no_landing_pads: uint = 1 << 12;\n-pub static debug_llvm: uint = 1 << 13;\n-pub static count_type_sizes: uint = 1 << 14;\n-pub static meta_stats: uint = 1 << 15;\n-pub static no_opt: uint = 1 << 16;\n+pub static verbose:                 uint = 1 <<  0;\n+pub static time_passes:             uint = 1 <<  1;\n+pub static count_llvm_insns:        uint = 1 <<  2;\n+pub static time_llvm_passes:        uint = 1 <<  3;\n+pub static trans_stats:             uint = 1 <<  4;\n+pub static asm_comments:            uint = 1 <<  5;\n+pub static no_verify:               uint = 1 <<  6;\n+pub static trace:                   uint = 1 <<  7;\n+pub static coherence:               uint = 1 <<  8;\n+pub static borrowck_stats:          uint = 1 <<  9;\n+pub static borrowck_note_pure:      uint = 1 << 10;\n+pub static borrowck_note_loan:      uint = 1 << 11;\n+pub static no_landing_pads:         uint = 1 << 12;\n+pub static debug_llvm:              uint = 1 << 13;\n+pub static count_type_sizes:        uint = 1 << 14;\n+pub static meta_stats:              uint = 1 << 15;\n+pub static no_opt:                  uint = 1 << 16;\n pub static no_monomorphic_collapse: uint = 1 << 17;\n-pub static gc: uint = 1 << 18;\n-pub static jit: uint = 1 << 19;\n-pub static debug_info: uint = 1 << 20;\n-pub static extra_debug_info: uint = 1 << 21;\n-pub static statik: uint = 1 << 22;\n-pub static print_link_args: uint = 1 << 23;\n-pub static no_debug_borrows: uint = 1 << 24;\n-pub static lint_llvm : uint = 1 << 25;\n+pub static gc:                      uint = 1 << 18;\n+pub static jit:                     uint = 1 << 19;\n+pub static debug_info:              uint = 1 << 20;\n+pub static extra_debug_info:        uint = 1 << 21;\n+pub static statik:                  uint = 1 << 22;\n+pub static print_link_args:         uint = 1 << 23;\n+pub static no_debug_borrows:        uint = 1 << 24;\n+pub static lint_llvm:               uint = 1 << 25;\n+pub static once_fns:                uint = 1 << 26;\n \n pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n@@ -112,6 +113,9 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n      (~\"lint-llvm\",\n       ~\"Run the LLVM lint pass on the pre-optimization IR\",\n       lint_llvm),\n+     (~\"once-fns\",\n+      ~\"Allow 'once fn' closures to deinitialize captured variables\",\n+      once_fns),\n     ]\n }\n \n@@ -293,6 +297,7 @@ impl Session_ {\n     pub fn debug_borrows(@self) -> bool {\n         self.opts.optimize == No && !self.debugging_opt(no_debug_borrows)\n     }\n+    pub fn once_fns(@self) -> bool { self.debugging_opt(once_fns) }\n \n     // pointless function, now...\n     pub fn str_of(@self, id: ast::ident) -> @str {"}, {"sha": "2eedd35c314a383d73f88314d6cb6c0418a83bf8", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/643be38cfe269effdc02111677559f74385b1056/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643be38cfe269effdc02111677559f74385b1056/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=643be38cfe269effdc02111677559f74385b1056", "patch": "@@ -497,30 +497,41 @@ impl mem_categorization_ctxt {\n               let ty = ty::node_id_to_type(self.tcx, fn_node_id);\n               match ty::get(ty).sty {\n                   ty::ty_closure(ref closure_ty) => {\n-                      match (closure_ty.sigil, closure_ty.onceness) {\n-                          (ast::BorrowedSigil, ast::Many) => {\n-                              let upvar_cmt =\n-                                  self.cat_def(id, span, expr_ty, *inner);\n-                              @cmt_ {\n-                                  id:id,\n-                                  span:span,\n-                                  cat:cat_stack_upvar(upvar_cmt),\n-                                  mutbl:upvar_cmt.mutbl.inherit(),\n-                                  ty:upvar_cmt.ty\n-                              }\n+                      // Decide whether to use implicit reference or by copy/move\n+                      // capture for the upvar. This, combined with the onceness,\n+                      // determines whether the closure can move out of it.\n+                      let var_is_refd = match (closure_ty.sigil, closure_ty.onceness) {\n+                          // Many-shot stack closures can never move out.\n+                          (ast::BorrowedSigil, ast::Many) => true,\n+                          // 1-shot stack closures can move out with \"-Z once-fns\".\n+                          (ast::BorrowedSigil, ast::Once)\n+                              if self.tcx.sess.once_fns() => false,\n+                          (ast::BorrowedSigil, ast::Once) => true,\n+                          // Heap closures always capture by copy/move, and can\n+                          // move out iff they are once.\n+                          (ast::OwnedSigil, _) | (ast::ManagedSigil, _) => false,\n+\n+                      };\n+                      if var_is_refd {\n+                          let upvar_cmt =\n+                              self.cat_def(id, span, expr_ty, *inner);\n+                          @cmt_ {\n+                              id:id,\n+                              span:span,\n+                              cat:cat_stack_upvar(upvar_cmt),\n+                              mutbl:upvar_cmt.mutbl.inherit(),\n+                              ty:upvar_cmt.ty\n                           }\n-                          (ast::BorrowedSigil, ast::Once) |\n-                          (ast::OwnedSigil, _) | (ast::ManagedSigil, _) => {\n-                              // FIXME #2152 allow mutation of moved upvars\n-                              @cmt_ {\n-                                  id:id,\n-                                  span:span,\n-                                  cat:cat_copied_upvar(CopiedUpvar {\n-                                      upvar_id: upvar_id,\n-                                      onceness: closure_ty.onceness}),\n-                                  mutbl:McImmutable,\n-                                  ty:expr_ty\n-                              }\n+                      } else {\n+                          // FIXME #2152 allow mutation of moved upvars\n+                          @cmt_ {\n+                              id:id,\n+                              span:span,\n+                              cat:cat_copied_upvar(CopiedUpvar {\n+                                  upvar_id: upvar_id,\n+                                  onceness: closure_ty.onceness}),\n+                              mutbl:McImmutable,\n+                              ty:expr_ty\n                           }\n                       }\n                   }"}, {"sha": "10877be549e28cede74d551d070309d7508471d7", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/643be38cfe269effdc02111677559f74385b1056/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643be38cfe269effdc02111677559f74385b1056/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=643be38cfe269effdc02111677559f74385b1056", "patch": "@@ -11,6 +11,7 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n+// compile-flags:-Z once-fns\n extern mod extra;\n use extra::arc;\n use std::util;"}, {"sha": "fb8a451729430e5f76c1812bd4c0dc42b3c79ffb", "filename": "src/test/run-pass/once-move-out-on-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/643be38cfe269effdc02111677559f74385b1056/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643be38cfe269effdc02111677559f74385b1056/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs?ref=643be38cfe269effdc02111677559f74385b1056", "patch": "@@ -10,6 +10,7 @@\n \n // Testing guarantees provided by once functions.\n \n+// compile-flags:-Z once-fns\n extern mod extra;\n use extra::arc;\n use std::util;"}]}