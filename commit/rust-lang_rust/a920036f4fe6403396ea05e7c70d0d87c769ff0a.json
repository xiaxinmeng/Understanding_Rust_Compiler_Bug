{"sha": "a920036f4fe6403396ea05e7c70d0d87c769ff0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MjAwMzZmNGZlNjQwMzM5NmVhMDVlN2M3MGQwZDg3Yzc2OWZmMGE=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-09-20T06:56:10Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-11-01T22:15:19Z"}, "message": "move some code around to avoid query cycles", "tree": {"sha": "1c8f887bdf9823ce63d880187c53b935acaa2aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8f887bdf9823ce63d880187c53b935acaa2aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a920036f4fe6403396ea05e7c70d0d87c769ff0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a920036f4fe6403396ea05e7c70d0d87c769ff0a", "html_url": "https://github.com/rust-lang/rust/commit/a920036f4fe6403396ea05e7c70d0d87c769ff0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a920036f4fe6403396ea05e7c70d0d87c769ff0a/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d14af130f60a8e35ea0bf441b33dd9eb6527f859", "url": "https://api.github.com/repos/rust-lang/rust/commits/d14af130f60a8e35ea0bf441b33dd9eb6527f859", "html_url": "https://github.com/rust-lang/rust/commit/d14af130f60a8e35ea0bf441b33dd9eb6527f859"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "0742f377f18c295b7db096193db5af5bdc3bd06a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a920036f4fe6403396ea05e7c70d0d87c769ff0a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a920036f4fe6403396ea05e7c70d0d87c769ff0a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=a920036f4fe6403396ea05e7c70d0d87c769ff0a", "patch": "@@ -2090,18 +2090,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             obligation.self_ty().skip_binder()\n         );\n \n-        // Object-safety candidates are only applicable to object-safe\n-        // traits. Including this check is useful because it helps\n-        // inference in cases of traits like `BorrowFrom`, which are\n-        // not object-safe, and which rely on being able to infer the\n-        // self-type from one of the other inputs. Without this check,\n-        // these cases wind up being considered ambiguous due to a\n-        // (spurious) ambiguity introduced here.\n-        let predicate_trait_ref = obligation.predicate.to_poly_trait_ref();\n-        if !self.tcx().is_object_safe(predicate_trait_ref.def_id()) {\n-            return;\n-        }\n-\n         self.probe(|this, _snapshot| {\n             // the code below doesn't care about regions, and the\n             // self-ty here doesn't escape this probe, so just erase\n@@ -2123,6 +2111,17 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     data.principal().with_self_ty(this.tcx(), self_ty)\n                 }\n                 ty::Infer(ty::TyVar(_)) => {\n+                    // Object-safety candidates are only applicable to object-safe\n+                    // traits. Including this check is useful because it helps\n+                    // inference in cases of traits like `BorrowFrom`, which are\n+                    // not object-safe, and which rely on being able to infer the\n+                    // self-type from one of the other inputs. Without this check,\n+                    // these cases wind up being considered ambiguous due to a\n+                    // (spurious) ambiguity introduced here.\n+                    let predicate_trait_ref = obligation.predicate.to_poly_trait_ref();\n+                    if !this.tcx().is_object_safe(predicate_trait_ref.def_id()) {\n+                        return;\n+                    }\n                     debug!(\"assemble_candidates_from_object_ty: ambiguous\");\n                     candidates.ambiguous = true; // could wind up being an object type\n                     return;"}]}