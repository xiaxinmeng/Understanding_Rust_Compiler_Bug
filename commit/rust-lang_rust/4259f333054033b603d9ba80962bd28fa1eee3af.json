{"sha": "4259f333054033b603d9ba80962bd28fa1eee3af", "node_id": "C_kwDOAAsO6NoAKDQyNTlmMzMzMDU0MDMzYjYwM2Q5YmE4MDk2MmJkMjhmYTFlZWUzYWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-15T17:49:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-15T17:49:32Z"}, "message": "typos", "tree": {"sha": "227f62c9261203bb72ccf772e4d4defa70cba828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/227f62c9261203bb72ccf772e4d4defa70cba828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4259f333054033b603d9ba80962bd28fa1eee3af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4259f333054033b603d9ba80962bd28fa1eee3af", "html_url": "https://github.com/rust-lang/rust/commit/4259f333054033b603d9ba80962bd28fa1eee3af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4259f333054033b603d9ba80962bd28fa1eee3af/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e994de803df1f1a9f2bbd4da1258d03ea05b4231", "url": "https://api.github.com/repos/rust-lang/rust/commits/e994de803df1f1a9f2bbd4da1258d03ea05b4231", "html_url": "https://github.com/rust-lang/rust/commit/e994de803df1f1a9f2bbd4da1258d03ea05b4231"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "60eaad9b498fc49d90be5429be15ed8c799f15f8", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4259f333054033b603d9ba80962bd28fa1eee3af/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4259f333054033b603d9ba80962bd28fa1eee3af/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=4259f333054033b603d9ba80962bd28fa1eee3af", "patch": "@@ -578,18 +578,18 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 // region substs that are synthesized during AST lowering. These are substs\n                 // that are appended to the parent substs (trait and trait method). However,\n                 // we're trying to infer the unsubstituted type value of the RPITIT inside\n-                // the *impl*, so we can later use the impl's method substitutions to normalize\n-                // an RPITIT to a concrete type.\n+                // the *impl*, so we can later use the impl's method substs to normalize\n+                // an RPITIT to a concrete type (`confirm_impl_trait_in_trait_candidate`).\n                 //\n                 // Due to the design of RPITITs, during AST lowering, we have no idea that\n-                // an impl method is satisfying a trait method with RPITITs in it. Therefore,\n-                // we don't have a list ofearly-bound region substs for the RPITIT in the impl.\n+                // an impl method corresponds to a trait method with RPITITs in it. Therefore,\n+                // we don't have a list of early-bound region substs for the RPITIT in the impl.\n                 // Since early region parameters are index-based, we can't just rebase these\n-                // (trait method) early-bound region substs onto the impl, since region\n-                // parameters are index-based, and there's no guarantee that the indices from\n-                // the trait substs and impl substs line up -- so we subtract the number of\n-                // trait substs and add the number of impl substs to *renumber* these early-\n-                // bound regions to their corresponding indices in the impl's substitutions list.\n+                // (trait method) early-bound region substs onto the impl, and there's no\n+                // guarantee that the indices from the trait substs and impl substs line up.\n+                // So to fix this, we subtract the number of trait substs and add the number of\n+                // impl substs to *renumber* these early-bound regions to their corresponding\n+                // indices in the impl's substitutions list.\n                 //\n                 // Also, we only need to account for a difference in trait and impl substs,\n                 // since we previously enforce that the trait method and impl method have the"}]}