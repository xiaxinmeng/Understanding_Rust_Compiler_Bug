{"sha": "7c1634a9c2d76ea8c152c368775391090d62db8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMTYzNGE5YzJkNzZlYThjMTUyYzM2ODc3NTM5MTA5MGQ2MmRiOGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-30T18:08:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-30T18:08:23Z"}, "message": "Merge #2691\n\n2691: Cleanup imports r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3879a92160f2313f54e738812d698d62e298f1a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3879a92160f2313f54e738812d698d62e298f1a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c1634a9c2d76ea8c152c368775391090d62db8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCj0XCRBK7hj4Ov3rIwAAdHIIAHv95kuHrIs529ru1CMMRq0i\n+gBcPB0FKFcRHLPLsZEjX8vcAvAzfod+99sMXp8ED2cDLuF2+LCIP7eb8xAvNPZU\nXlx26X4HJiiFjXMlKazWlHhLqRbfTU19jebPc9vrR5RzAd9AJ1Yd4tQCJ7MZQf4q\nX06HoeoMe5p2M4bBBRUERX0OJqdHRDmp14bV/fCdVIYJpCklRulUus9GWSlwsB7D\nrIT95XJjW6dMeRFR+YF1VF5wbr7RCmxPTsVXP1q0ywJbbfQCDdjvR1UYAZsbKzzS\n9g6xtzrNfXxAj6tZ9HzC/DNSwydTubUdmVytxPehLW5sgQyIpAJaF+RKzrdJtn0=\n=tUYT\n-----END PGP SIGNATURE-----\n", "payload": "tree 3879a92160f2313f54e738812d698d62e298f1a0\nparent b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1\nparent 260df66b7742e76c76184388253552c5055b1945\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577729303 +0000\ncommitter GitHub <noreply@github.com> 1577729303 +0000\n\nMerge #2691\n\n2691: Cleanup imports r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1634a9c2d76ea8c152c368775391090d62db8f", "html_url": "https://github.com/rust-lang/rust/commit/7c1634a9c2d76ea8c152c368775391090d62db8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c1634a9c2d76ea8c152c368775391090d62db8f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1", "html_url": "https://github.com/rust-lang/rust/commit/b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1"}, {"sha": "260df66b7742e76c76184388253552c5055b1945", "url": "https://api.github.com/repos/rust-lang/rust/commits/260df66b7742e76c76184388253552c5055b1945", "html_url": "https://github.com/rust-lang/rust/commit/260df66b7742e76c76184388253552c5055b1945"}], "stats": {"total": 520, "additions": 240, "deletions": 280}, "files": [{"sha": "46d55e32d0f14ff9a4f172f1d12bc5c1a368fd5f", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -19,7 +19,7 @@\n         \"vscode:prepublish\": \"rollup -c\",\n         \"package\": \"vsce package\",\n         \"watch\": \"tsc -watch -p ./\",\n-        \"prettier\": \"prettier --write **/*.ts\"\n+        \"prettier\": \"prettier --write '**/*.ts'\"\n     },\n     \"dependencies\": {\n         \"jsonc-parser\": \"^2.1.0\","}, {"sha": "b2b624b75a7aeb2381063a629ae41a5bcfc1be3c", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,4 +1,5 @@\n import * as vscode from 'vscode';\n+\n import { Ctx, Cmd } from '../ctx';\n // Shows status of rust-analyzer (for debugging)\n \n@@ -23,10 +24,7 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n \n     return async function handle() {\n         if (poller == null) {\n-            poller = setInterval(\n-                () => tdcp.eventEmitter.fire(tdcp.uri),\n-                1000,\n-            );\n+            poller = setInterval(() => tdcp.eventEmitter.fire(tdcp.uri), 1000);\n         }\n         const document = await vscode.workspace.openTextDocument(tdcp.uri);\n         return vscode.window.showTextDocument(\n@@ -39,23 +37,20 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n \n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n-\n+    ctx: Ctx;\n     uri = vscode.Uri.parse('rust-analyzer-status://status');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n-    ctx: Ctx\n-\n     constructor(ctx: Ctx) {\n-        this.ctx = ctx\n+        this.ctx = ctx;\n     }\n \n     provideTextDocumentContent(\n         _uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n-        if (editor == null) {\n-            return '';\n-        }\n+        if (editor == null) return '';\n+\n         return this.ctx.client.sendRequest<string>(\n             'rust-analyzer/analyzerStatus',\n             null,"}, {"sha": "8f91b3b7d32f1e4de4775bf54f1e7f621482c3f9", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,23 +1,23 @@\n-import { Ctx, Cmd } from '../ctx'\n+import { Ctx, Cmd } from '../ctx';\n \n import { analyzerStatus } from './analyzer_status';\n import { matchingBrace } from './matching_brace';\n-import * as applySourceChange from './apply_source_change';\n+import { joinLines } from './join_lines';\n+import { onEnter } from './on_enter';\n+import { parentModule } from './parent_module';\n+import { syntaxTree } from './syntax_tree';\n import * as expandMacro from './expand_macro';\n import * as inlayHints from './inlay_hints';\n-import * as joinLines from './join_lines';\n-import * as onEnter from './on_enter';\n-import * as parentModule from './parent_module';\n import * as runnables from './runnables';\n-import * as syntaxTree from './syntaxTree';\n \n function collectGarbage(ctx: Ctx): Cmd {\n-    return async () => { ctx.client.sendRequest<null>('rust-analyzer/collectGarbage', null) }\n+    return async () => {\n+        ctx.client.sendRequest<null>('rust-analyzer/collectGarbage', null);\n+    };\n }\n \n export {\n     analyzerStatus,\n-    applySourceChange,\n     expandMacro,\n     joinLines,\n     matchingBrace,\n@@ -26,5 +26,5 @@ export {\n     syntaxTree,\n     onEnter,\n     inlayHints,\n-    collectGarbage\n+    collectGarbage,\n };"}, {"sha": "f4f902cf96e89420f7575f0f3ae1377d8c5d5ec6", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,29 +1,26 @@\n-import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n \n-import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n-import { Server } from '../server';\n-import {\n-    handle as applySourceChange,\n-    SourceChange,\n-} from './apply_source_change';\n+import { Ctx, Cmd } from '../ctx';\n+import { applySourceChange, SourceChange } from '../source_change';\n \n-interface JoinLinesParams {\n-    textDocument: TextDocumentIdentifier;\n-    range: Range;\n-}\n+export function joinLines(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return;\n \n-export async function handle() {\n-    const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') {\n-        return;\n-    }\n-    const request: JoinLinesParams = {\n-        range: Server.client.code2ProtocolConverter.asRange(editor.selection),\n-        textDocument: { uri: editor.document.uri.toString() },\n+        const request: JoinLinesParams = {\n+            range: ctx.client.code2ProtocolConverter.asRange(editor.selection),\n+            textDocument: { uri: editor.document.uri.toString() },\n+        };\n+        const change = await ctx.client.sendRequest<SourceChange>(\n+            'rust-analyzer/joinLines',\n+            request,\n+        );\n+        await applySourceChange(ctx, change);\n     };\n-    const change = await Server.client.sendRequest<SourceChange>(\n-        'rust-analyzer/joinLines',\n-        request,\n-    );\n-    await applySourceChange(change);\n+}\n+\n+interface JoinLinesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n }"}, {"sha": "59c253f8866db7a09e33d42619de35fb0b7b1c22", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n-import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n+import * as lc from 'vscode-languageclient';\n+\n import { Ctx, Cmd } from '../ctx';\n \n export function matchingBrace(ctx: Ctx): Cmd {\n@@ -10,9 +11,11 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         }\n         const request: FindMatchingBraceParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n-            offsets: editor.selections.map(s => ctx.client.code2ProtocolConverter.asPosition(s.active)),\n+            offsets: editor.selections.map(s =>\n+                ctx.client.code2ProtocolConverter.asPosition(s.active),\n+            ),\n         };\n-        const response = await ctx.client.sendRequest<Position[]>(\n+        const response = await ctx.client.sendRequest<lc.Position[]>(\n             'rust-analyzer/findMatchingBrace',\n             request,\n         );\n@@ -24,10 +27,10 @@ export function matchingBrace(ctx: Ctx): Cmd {\n             return new vscode.Selection(anchor, active);\n         });\n         editor.revealRange(editor.selection);\n-    }\n+    };\n }\n \n interface FindMatchingBraceParams {\n-    textDocument: TextDocumentIdentifier;\n-    offsets: Position[];\n+    textDocument: lc.TextDocumentIdentifier;\n+    offsets: lc.Position[];\n }"}, {"sha": "8324060e88e7a041cfab5a57403e42ed6501b553", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,33 +1,26 @@\n-import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import { Server } from '../server';\n-import {\n-    handle as applySourceChange,\n-    SourceChange,\n-} from './apply_source_change';\n \n-export async function handle(event: { text: string }): Promise<boolean> {\n-    const editor = vscode.window.activeTextEditor;\n-    if (\n-        editor == null ||\n-        editor.document.languageId !== 'rust' ||\n-        event.text !== '\\n'\n-    ) {\n-        return false;\n-    }\n-    const request: lc.TextDocumentPositionParams = {\n-        textDocument: { uri: editor.document.uri.toString() },\n-        position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n+import { applySourceChange, SourceChange } from '../source_change';\n+import { Cmd, Ctx } from '../ctx';\n+\n+export function onEnter(ctx: Ctx): Cmd {\n+    return async (event: { text: string }) => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor || event.text !== '\\n') return false;\n+\n+        const request: lc.TextDocumentPositionParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position: ctx.client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        };\n+        const change = await ctx.client.sendRequest<undefined | SourceChange>(\n+            'rust-analyzer/onEnter',\n+            request,\n+        );\n+        if (!change) return false;\n+\n+        await applySourceChange(ctx, change);\n+        return true;\n     };\n-    const change = await Server.client.sendRequest<undefined | SourceChange>(\n-        'rust-analyzer/onEnter',\n-        request,\n-    );\n-    if (!change) {\n-        return false;\n-    }\n-    await applySourceChange(change);\n-    return true;\n }"}, {"sha": "258b61b21fe540265cdba243c9c3d8420a2b2845", "filename": "editors/code/src/commands/parent_module.ts", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,32 +1,32 @@\n import * as vscode from 'vscode';\n-\n import * as lc from 'vscode-languageclient';\n-import { Server } from '../server';\n \n-export async function handle() {\n-    const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') {\n-        return;\n-    }\n-    const request: lc.TextDocumentPositionParams = {\n-        textDocument: { uri: editor.document.uri.toString() },\n-        position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n-    };\n-    const response = await Server.client.sendRequest<lc.Location[]>(\n-        'rust-analyzer/parentModule',\n-        request,\n-    );\n-    const loc = response[0];\n-    if (loc == null) {\n-        return;\n-    }\n-    const uri = Server.client.protocol2CodeConverter.asUri(loc.uri);\n-    const range = Server.client.protocol2CodeConverter.asRange(loc.range);\n+import { Ctx, Cmd } from '../ctx';\n+\n+export function parentModule(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return;\n \n-    const doc = await vscode.workspace.openTextDocument(uri);\n-    const e = await vscode.window.showTextDocument(doc);\n-    e.selection = new vscode.Selection(range.start, range.start);\n-    e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n+        const request: lc.TextDocumentPositionParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position: ctx.client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        };\n+        const response = await ctx.client.sendRequest<lc.Location[]>(\n+            'rust-analyzer/parentModule',\n+            request,\n+        );\n+        const loc = response[0];\n+        if (loc == null) return;\n+\n+        const uri = ctx.client.protocol2CodeConverter.asUri(loc.uri);\n+        const range = ctx.client.protocol2CodeConverter.asRange(loc.range);\n+\n+        const doc = await vscode.workspace.openTextDocument(uri);\n+        const e = await vscode.window.showTextDocument(doc);\n+        e.selection = new vscode.Selection(range.start, range.start);\n+        e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n+    };\n }"}, {"sha": "89a80550cee08aafa083f64dbcc2e393a23b2c91", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1", "patch": "@@ -1,76 +0,0 @@\n-import * as vscode from 'vscode';\n-import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n-\n-import { Server } from '../server';\n-\n-export const syntaxTreeUri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n-\n-export class SyntaxTreeContentProvider\n-    implements vscode.TextDocumentContentProvider {\n-    public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-    public syntaxTree: string = 'Not available';\n-\n-    public provideTextDocumentContent(\n-        uri: vscode.Uri,\n-    ): vscode.ProviderResult<string> {\n-        const editor = vscode.window.activeTextEditor;\n-        if (editor == null) {\n-            return '';\n-        }\n-\n-        let range: Range | undefined;\n-\n-        // When the range based query is enabled we take the range of the selection\n-        if (uri.query === 'range=true') {\n-            range = editor.selection.isEmpty\n-                ? undefined\n-                : Server.client.code2ProtocolConverter.asRange(\n-                      editor.selection,\n-                  );\n-        }\n-\n-        const request: SyntaxTreeParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            range,\n-        };\n-        return Server.client.sendRequest<SyntaxTreeResult>(\n-            'rust-analyzer/syntaxTree',\n-            request,\n-        );\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}\n-\n-interface SyntaxTreeParams {\n-    textDocument: TextDocumentIdentifier;\n-    range?: Range;\n-}\n-\n-type SyntaxTreeResult = string;\n-\n-// Opens the virtual file that will show the syntax tree\n-//\n-// The contents of the file come from the `TextDocumentContentProvider`\n-export function createHandle(provider: SyntaxTreeContentProvider) {\n-    return async () => {\n-        const editor = vscode.window.activeTextEditor;\n-        const rangeEnabled = !!(editor && !editor.selection.isEmpty);\n-\n-        const uri = rangeEnabled\n-            ? vscode.Uri.parse(`${syntaxTreeUri.toString()}?range=true`)\n-            : syntaxTreeUri;\n-\n-        const document = await vscode.workspace.openTextDocument(uri);\n-\n-        provider.eventEmitter.fire(uri);\n-\n-        return vscode.window.showTextDocument(\n-            document,\n-            vscode.ViewColumn.Two,\n-            true,\n-        );\n-    };\n-}"}, {"sha": "e61fb36df8254c9120ceb5f80ebeaa7cd57122e1", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -0,0 +1,106 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+\n+import { Ctx, Cmd } from '../ctx';\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function syntaxTree(ctx: Ctx): Cmd {\n+    const stcp = new SyntaxTreeContentProvider(ctx);\n+\n+    ctx.pushCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer',\n+            stcp,\n+        ),\n+    );\n+\n+    vscode.workspace.onDidChangeTextDocument(\n+        (event: vscode.TextDocumentChangeEvent) => {\n+            const doc = event.document;\n+            if (doc.languageId !== 'rust') return;\n+            afterLs(() => stcp.eventEmitter.fire(stcp.uri));\n+        },\n+        ctx.subscriptions,\n+    );\n+\n+    vscode.window.onDidChangeActiveTextEditor(\n+        (editor: vscode.TextEditor | undefined) => {\n+            if (!editor || editor.document.languageId !== 'rust') return;\n+            stcp.eventEmitter.fire(stcp.uri);\n+        },\n+        ctx.subscriptions,\n+    );\n+\n+    return async () => {\n+        const editor = vscode.window.activeTextEditor;\n+        const rangeEnabled = !!(editor && !editor.selection.isEmpty);\n+\n+        const uri = rangeEnabled\n+            ? vscode.Uri.parse(`${stcp.uri.toString()}?range=true`)\n+            : stcp.uri;\n+\n+        const document = await vscode.workspace.openTextDocument(uri);\n+\n+        stcp.eventEmitter.fire(uri);\n+\n+        return vscode.window.showTextDocument(\n+            document,\n+            vscode.ViewColumn.Two,\n+            true,\n+        );\n+    };\n+}\n+\n+// We need to order this after LS updates, but there's no API for that.\n+// Hence, good old setTimeout.\n+function afterLs(f: () => any) {\n+    setTimeout(f, 10);\n+}\n+\n+interface SyntaxTreeParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range?: lc.Range;\n+}\n+\n+export class SyntaxTreeContentProvider\n+    implements vscode.TextDocumentContentProvider {\n+    ctx: Ctx;\n+    uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n+    eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+    syntaxTree: string = 'Not available';\n+\n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n+        const editor = vscode.window.activeTextEditor;\n+        if (editor == null) return '';\n+\n+        let range: lc.Range | undefined;\n+\n+        // When the range based query is enabled we take the range of the selection\n+        if (uri.query === 'range=true') {\n+            range = editor.selection.isEmpty\n+                ? undefined\n+                : this.ctx.client.code2ProtocolConverter.asRange(\n+                      editor.selection,\n+                  );\n+        }\n+\n+        const request: SyntaxTreeParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            range,\n+        };\n+        return this.ctx.client.sendRequest<string>(\n+            'rust-analyzer/syntaxTree',\n+            request,\n+        );\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event;\n+    }\n+}"}, {"sha": "c3a3583b52d9d8e49b7245eb884c07d1a084c6c6", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -27,6 +27,32 @@ export class Ctx {\n         this.pushCleanup(d);\n     }\n \n+    overrideCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n+        const defaultCmd = `default:${name}`;\n+        const override = factory(this);\n+        const original = (...args: any[]) =>\n+            vscode.commands.executeCommand(defaultCmd, ...args);\n+        try {\n+            const d = vscode.commands.registerCommand(\n+                name,\n+                async (...args: any[]) => {\n+                    if (!(await override(...args))) {\n+                        return await original(...args);\n+                    }\n+                },\n+            );\n+            this.pushCleanup(d);\n+        } catch (_) {\n+            vscode.window.showWarningMessage(\n+                'Enhanced typing feature is disabled because of incompatibility with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings',\n+            );\n+        }\n+    }\n+\n+    get subscriptions(): { dispose(): any }[] {\n+        return this.extCtx.subscriptions;\n+    }\n+\n     pushCleanup(d: { dispose(): any }) {\n         this.extCtx.subscriptions.push(d);\n     }"}, {"sha": "4384ee56768c178a62476ec8e760a13ac38e364a", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,21 +1,14 @@\n import { TextEditor } from 'vscode';\n import { TextDocumentIdentifier } from 'vscode-languageclient';\n-\n-import {\n-    SyntaxTreeContentProvider,\n-    syntaxTreeUri,\n-} from '../commands/syntaxTree';\n import { Decoration } from '../highlighting';\n import { Server } from '../server';\n \n-export function makeHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {\n+export function makeHandler() {\n     return async function handle(editor: TextEditor | undefined) {\n         if (!editor || editor.document.languageId !== 'rust') {\n             return;\n         }\n \n-        syntaxTreeProvider.eventEmitter.fire(syntaxTreeUri);\n-\n         if (!Server.config.highlightingOn) {\n             return;\n         }"}, {"sha": "2e998e889ba17db5e22a59ad805e7e2eca1c702b", "filename": "editors/code/src/events/change_text_document.ts", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=b42d3ee3cc22aaa892d15c4ba2219a3bc53907a1", "patch": "@@ -1,24 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-import {\n-    SyntaxTreeContentProvider,\n-    syntaxTreeUri,\n-} from '../commands/syntaxTree';\n-\n-export function createHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {\n-    return (event: vscode.TextDocumentChangeEvent) => {\n-        const doc = event.document;\n-        if (doc.languageId !== 'rust') {\n-            return;\n-        }\n-        afterLs(() => {\n-            syntaxTreeProvider.eventEmitter.fire(syntaxTreeUri);\n-        });\n-    };\n-}\n-\n-// We need to order this after LS updates, but there's no API for that.\n-// Hence, good old setTimeout.\n-function afterLs(f: () => any) {\n-    setTimeout(f, 10);\n-}"}, {"sha": "be135474de620b85ec0e2176525ed7b458b8d155", "filename": "editors/code/src/events/index.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,4 +1,3 @@\n import * as changeActiveTextEditor from './change_active_text_editor';\n-import * as changeTextDocument from './change_text_document';\n \n-export { changeActiveTextEditor, changeTextDocument };\n+export { changeActiveTextEditor };"}, {"sha": "d92cd164fef604cf81f2e935926af603cf8a169e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 6, "deletions": 58, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -4,7 +4,6 @@ import * as lc from 'vscode-languageclient';\n import * as commands from './commands';\n import { ExpandMacroContentProvider } from './commands/expand_macro';\n import { HintsUpdater } from './commands/inlay_hints';\n-import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import { StatusDisplay } from './commands/watch_status';\n import * as events from './events';\n import * as notifications from './notifications';\n@@ -18,6 +17,9 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('collectGarbage', commands.collectGarbage);\n     ctx.registerCommand('matchingBrace', commands.matchingBrace);\n+    ctx.registerCommand('joinLines', commands.joinLines);\n+    ctx.registerCommand('parentModule', commands.parentModule);\n+    ctx.registerCommand('syntaxTree', commands.syntaxTree);\n \n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n@@ -26,45 +28,11 @@ export async function activate(context: vscode.ExtensionContext) {\n     function registerCommand(name: string, f: any) {\n         disposeOnDeactivation(vscode.commands.registerCommand(name, f));\n     }\n-    function overrideCommand(\n-        name: string,\n-        f: (...args: any[]) => Promise<boolean>,\n-    ) {\n-        const defaultCmd = `default:${name}`;\n-        const original = (...args: any[]) =>\n-            vscode.commands.executeCommand(defaultCmd, ...args);\n-\n-        try {\n-            registerCommand(name, async (...args: any[]) => {\n-                const editor = vscode.window.activeTextEditor;\n-                if (\n-                    !editor ||\n-                    !editor.document ||\n-                    editor.document.languageId !== 'rust'\n-                ) {\n-                    return await original(...args);\n-                }\n-                if (!(await f(...args))) {\n-                    return await original(...args);\n-                }\n-            });\n-        } catch (_) {\n-            vscode.window.showWarningMessage(\n-                'Enhanced typing feature is disabled because of incompatibility with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings',\n-            );\n-        }\n-    }\n \n     // Commands are requests from vscode to the language server\n-    registerCommand('rust-analyzer.joinLines', commands.joinLines.handle);\n-    registerCommand('rust-analyzer.parentModule', commands.parentModule.handle);\n     registerCommand('rust-analyzer.run', commands.runnables.handle);\n     // Unlike the above this does not send requests to the language server\n     registerCommand('rust-analyzer.runSingle', commands.runnables.handleSingle);\n-    registerCommand(\n-        'rust-analyzer.applySourceChange',\n-        commands.applySourceChange.handle,\n-    );\n     registerCommand(\n         'rust-analyzer.showReferences',\n         (uri: string, position: lc.Position, locations: lc.Location[]) => {\n@@ -78,7 +46,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     );\n \n     if (Server.config.enableEnhancedTyping) {\n-        overrideCommand('type', commands.onEnter.handle);\n+        ctx.overrideCommand('type', commands.onEnter);\n     }\n \n     const watchStatus = new StatusDisplay(\n@@ -87,10 +55,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     disposeOnDeactivation(watchStatus);\n \n     // Notifications are events triggered by the language server\n-    const allNotifications: Iterable<[\n-        string,\n-        lc.GenericNotificationHandler,\n-    ]> = [\n+    const allNotifications: [string, lc.GenericNotificationHandler][] = [\n         [\n             'rust-analyzer/publishDecorations',\n             notifications.publishDecorations.handle,\n@@ -100,42 +65,25 @@ export async function activate(context: vscode.ExtensionContext) {\n             params => watchStatus.handleProgressNotification(params),\n         ],\n     ];\n-    const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n     const expandMacroContentProvider = new ExpandMacroContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n     vscode.window.onDidChangeActiveTextEditor(\n-        events.changeActiveTextEditor.makeHandler(syntaxTreeContentProvider),\n+        events.changeActiveTextEditor.makeHandler(),\n     );\n \n-    disposeOnDeactivation(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer',\n-            syntaxTreeContentProvider,\n-        ),\n-    );\n     disposeOnDeactivation(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer',\n             expandMacroContentProvider,\n         ),\n     );\n \n-    registerCommand(\n-        'rust-analyzer.syntaxTree',\n-        commands.syntaxTree.createHandle(syntaxTreeContentProvider),\n-    );\n     registerCommand(\n         'rust-analyzer.expandMacro',\n         commands.expandMacro.createHandle(expandMacroContentProvider),\n     );\n \n-    vscode.workspace.onDidChangeTextDocument(\n-        events.changeTextDocument.createHandler(syntaxTreeContentProvider),\n-        null,\n-        context.subscriptions,\n-    );\n-\n     const startServer = () => Server.start(allNotifications);\n     const reloadCommand = () => reloadServer(startServer);\n "}, {"sha": "a4f9068b2741956cf6c4eecff9a4093658b9e1fc", "filename": "editors/code/src/source_change.ts", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c1634a9c2d76ea8c152c368775391090d62db8f/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=7c1634a9c2d76ea8c152c368775391090d62db8f", "patch": "@@ -1,16 +1,16 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n-import { Server } from '../server';\n+import { Ctx } from './ctx';\n \n export interface SourceChange {\n     label: string;\n     workspaceEdit: lc.WorkspaceEdit;\n     cursorPosition?: lc.TextDocumentPositionParams;\n }\n \n-export async function handle(change: SourceChange) {\n-    const wsEdit = Server.client.protocol2CodeConverter.asWorkspaceEdit(\n+export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n+    const wsEdit = ctx.client.protocol2CodeConverter.asWorkspaceEdit(\n         change.workspaceEdit,\n     );\n     let created;\n@@ -32,10 +32,10 @@ export async function handle(change: SourceChange) {\n         const doc = await vscode.workspace.openTextDocument(toOpenUri);\n         await vscode.window.showTextDocument(doc);\n     } else if (toReveal) {\n-        const uri = Server.client.protocol2CodeConverter.asUri(\n+        const uri = ctx.client.protocol2CodeConverter.asUri(\n             toReveal.textDocument.uri,\n         );\n-        const position = Server.client.protocol2CodeConverter.asPosition(\n+        const position = ctx.client.protocol2CodeConverter.asPosition(\n             toReveal.position,\n         );\n         const editor = vscode.window.activeTextEditor;", "previous_filename": "editors/code/src/commands/apply_source_change.ts"}]}