{"sha": "0f2eab6337350851d8eb06e2ef439a3540b85a9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMmVhYjYzMzczNTA4NTFkOGViMDZlMmVmNDM5YTM1NDBiODVhOWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-29T14:32:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-29T14:32:11Z"}, "message": "Merge pull request #3104 from frewsxcv/frewsxcv-ptr-offset-with-cast\n\nNew lint: Suggest `ptr.add([usize])` over `ptr.offset([usize] as isize)`.", "tree": {"sha": "fa37ba8b7840cdb74868d5bd8421bd2b13534efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa37ba8b7840cdb74868d5bd8421bd2b13534efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f2eab6337350851d8eb06e2ef439a3540b85a9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbhq5rCRBK7hj4Ov3rIwAAdHIIAFIdDUTm2RpiMJJTEwXOsenO\nixj76bGeg13z8YbBJ+0XegplfzlE+jBzGWtH317oRPN3HHXav3D8+Dyo2CRotpCx\nIgKDbovWSAIy+fuxttPrZZw7BS+rjUvegv8Ro/6vvFWn0un6YdQyXx8YOK1uI1jn\nkukgvNkSwwbzLQCo3XrYxDabO4yv9uavqhZK8DvC18+IyVmu7wLA1X30IUq2yeu+\n+P3mVb0xDrYZT7MMJh1hLawRx0KhSo+LWQ4AheDsGSd22WJeAZGreOuPA+CYA53U\nMoonLkzOXWQWklh/Ju3MB9rv2XZ2NuJ4V4QASai+bA9Zu1AIz/FScJBdniVU44U=\n=yGzk\n-----END PGP SIGNATURE-----\n", "payload": "tree fa37ba8b7840cdb74868d5bd8421bd2b13534efa\nparent d99cea0f16633556871a59500c610782b07233b9\nparent f42442b6e07a8eafc711d708bb70d6065b4f8c5d\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1535553131 +0200\ncommitter GitHub <noreply@github.com> 1535553131 +0200\n\nMerge pull request #3104 from frewsxcv/frewsxcv-ptr-offset-with-cast\n\nNew lint: Suggest `ptr.add([usize])` over `ptr.offset([usize] as isize)`."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2eab6337350851d8eb06e2ef439a3540b85a9e", "html_url": "https://github.com/rust-lang/rust/commit/0f2eab6337350851d8eb06e2ef439a3540b85a9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f2eab6337350851d8eb06e2ef439a3540b85a9e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99cea0f16633556871a59500c610782b07233b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99cea0f16633556871a59500c610782b07233b9", "html_url": "https://github.com/rust-lang/rust/commit/d99cea0f16633556871a59500c610782b07233b9"}, {"sha": "f42442b6e07a8eafc711d708bb70d6065b4f8c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42442b6e07a8eafc711d708bb70d6065b4f8c5d", "html_url": "https://github.com/rust-lang/rust/commit/f42442b6e07a8eafc711d708bb70d6065b4f8c5d"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "7d429ce492385514e535ad73cea7e1064689764e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eab6337350851d8eb06e2ef439a3540b85a9e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eab6337350851d8eb06e2ef439a3540b85a9e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0f2eab6337350851d8eb06e2ef439a3540b85a9e", "patch": "@@ -142,6 +142,7 @@ pub mod panic_unimplemented;\n pub mod partialeq_ne_impl;\n pub mod precedence;\n pub mod ptr;\n+pub mod ptr_offset_with_cast;\n pub mod question_mark;\n pub mod ranges;\n pub mod redundant_field_names;\n@@ -408,6 +409,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n     reg.register_late_lint_pass(box indexing_slicing::IndexingSlicing);\n     reg.register_late_lint_pass(box non_copy_const::NonCopyConst);\n+    reg.register_late_lint_pass(box ptr_offset_with_cast::Pass);\n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -631,6 +633,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         ptr::CMP_NULL,\n         ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,\n+        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n         question_mark::QUESTION_MARK,\n         ranges::ITERATOR_STEP_BY_ZERO,\n         ranges::RANGE_MINUS_ONE,\n@@ -815,6 +818,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n         precedence::PRECEDENCE,\n+        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n         ranges::RANGE_MINUS_ONE,\n         ranges::RANGE_PLUS_ONE,\n         ranges::RANGE_ZIP_WITH_LEN,"}, {"sha": "9f475473c616c3a72619dc9cc3d9dad01c746537", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eab6337350851d8eb06e2ef439a3540b85a9e/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eab6337350851d8eb06e2ef439a3540b85a9e/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=0f2eab6337350851d8eb06e2ef439a3540b85a9e", "patch": "@@ -0,0 +1,151 @@\n+use rustc::{declare_lint, hir, lint, lint_array};\n+use crate::utils;\n+use std::fmt;\n+\n+/// **What it does:** Checks for usage of the `offset` pointer method with a `usize` casted to an\n+/// `isize`.\n+///\n+/// **Why is this bad?** If we\u2019re always increasing the pointer address, we can avoid the numeric\n+/// cast by using the `add` method instead.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let vec = vec![b'a', b'b', b'c'];\n+/// let ptr = vec.as_ptr();\n+/// let offset = 1_usize;\n+///\n+/// unsafe { ptr.offset(offset as isize); }\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// let vec = vec![b'a', b'b', b'c'];\n+/// let ptr = vec.as_ptr();\n+/// let offset = 1_usize;\n+///\n+/// unsafe { ptr.add(offset); }\n+/// ```\n+declare_clippy_lint! {\n+    pub PTR_OFFSET_WITH_CAST,\n+    complexity,\n+    \"uneeded pointer offset cast\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Pass;\n+\n+impl lint::LintPass for Pass {\n+    fn get_lints(&self) -> lint::LintArray {\n+        lint_array!(PTR_OFFSET_WITH_CAST)\n+    }\n+}\n+\n+impl<'a, 'tcx> lint::LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &lint::LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        // Check if the expressions is a ptr.offset or ptr.wrapping_offset method call\n+        let (receiver_expr, arg_expr, method) = match expr_as_ptr_offset_call(cx, expr) {\n+            Some(call_arg) => call_arg,\n+            None => return,\n+        };\n+\n+        // Check if the argument to the method call is a cast from usize\n+        let cast_lhs_expr = match expr_as_cast_from_usize(cx, arg_expr) {\n+            Some(cast_lhs_expr) => cast_lhs_expr,\n+            None => return,\n+        };\n+\n+        let msg = format!(\"use of `{}` with a `usize` casted to an `isize`\", method);\n+        if let Some(sugg) = build_suggestion(cx, method, receiver_expr, cast_lhs_expr) {\n+            utils::span_lint_and_sugg(cx, PTR_OFFSET_WITH_CAST, expr.span, &msg, \"try\", sugg);\n+        } else {\n+            utils::span_lint(cx, PTR_OFFSET_WITH_CAST, expr.span, &msg);\n+        }\n+\n+    }\n+}\n+\n+// If the given expression is a cast from a usize, return the lhs of the cast\n+fn expr_as_cast_from_usize<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+) -> Option<&'tcx hir::Expr> {\n+    if let hir::ExprKind::Cast(ref cast_lhs_expr, _) = expr.node {\n+        if is_expr_ty_usize(cx, &cast_lhs_expr) {\n+            return Some(cast_lhs_expr);\n+        }\n+    }\n+    None\n+}\n+\n+// If the given expression is a ptr::offset  or ptr::wrapping_offset method call, return the\n+// receiver, the arg of the method call, and the method.\n+fn expr_as_ptr_offset_call<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+) -> Option<(&'tcx hir::Expr, &'tcx hir::Expr, Method)> {\n+    if let hir::ExprKind::MethodCall(ref path_segment, _, ref args) = expr.node {\n+        if is_expr_ty_raw_ptr(cx, &args[0]) {\n+            if path_segment.ident.name == \"offset\" {\n+                return Some((&args[0], &args[1], Method::Offset));\n+            }\n+            if path_segment.ident.name == \"wrapping_offset\" {\n+                return Some((&args[0], &args[1], Method::WrappingOffset));\n+            }\n+        }\n+    }\n+    None\n+}\n+\n+// Is the type of the expression a usize?\n+fn is_expr_ty_usize<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &hir::Expr,\n+) -> bool {\n+    cx.tables.expr_ty(expr) == cx.tcx.types.usize\n+}\n+\n+// Is the type of the expression a raw pointer?\n+fn is_expr_ty_raw_ptr<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &hir::Expr,\n+) -> bool {\n+    cx.tables.expr_ty(expr).is_unsafe_ptr()\n+}\n+\n+fn build_suggestion<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    method: Method,\n+    receiver_expr: &hir::Expr,\n+    cast_lhs_expr: &hir::Expr,\n+) -> Option<String> {\n+    let receiver = utils::snippet_opt(cx, receiver_expr.span)?;\n+    let cast_lhs = utils::snippet_opt(cx, cast_lhs_expr.span)?;\n+    Some(format!(\"{}.{}({})\", receiver, method.suggestion(), cast_lhs))\n+}\n+\n+#[derive(Copy, Clone)]\n+enum Method {\n+    Offset,\n+    WrappingOffset,\n+}\n+\n+impl Method {\n+    fn suggestion(self) -> &'static str {\n+        match self {\n+            Method::Offset => \"add\",\n+            Method::WrappingOffset => \"wrapping_add\",\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Method {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Method::Offset => write!(f, \"offset\"),\n+            Method::WrappingOffset => write!(f, \"wrapping_offset\"),\n+        }\n+    }\n+}"}, {"sha": "4549f960ca0d4bba2eed2f880e40b3bd274aed18", "filename": "tests/ui/ptr_offset_with_cast.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fui%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fui%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.rs?ref=0f2eab6337350851d8eb06e2ef439a3540b85a9e", "patch": "@@ -0,0 +1,18 @@\n+fn main() {\n+    let vec = vec![b'a', b'b', b'c'];\n+    let ptr = vec.as_ptr();\n+\n+    let offset_u8 = 1_u8;\n+    let offset_usize = 1_usize;\n+    let offset_isize = 1_isize;\n+\n+    unsafe {\n+        ptr.offset(offset_usize as isize);\n+        ptr.offset(offset_isize as isize);\n+        ptr.offset(offset_u8 as isize);\n+\n+        ptr.wrapping_offset(offset_usize as isize);\n+        ptr.wrapping_offset(offset_isize as isize);\n+        ptr.wrapping_offset(offset_u8 as isize);\n+    }\n+}"}, {"sha": "16bbf328b3375e4d9ff00e8a9e1603a2a191f7be", "filename": "tests/ui/ptr_offset_with_cast.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fui%2Fptr_offset_with_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f2eab6337350851d8eb06e2ef439a3540b85a9e/tests%2Fui%2Fptr_offset_with_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.stderr?ref=0f2eab6337350851d8eb06e2ef439a3540b85a9e", "patch": "@@ -0,0 +1,16 @@\n+error: use of `offset` with a `usize` casted to an `isize`\n+  --> $DIR/ptr_offset_with_cast.rs:10:9\n+   |\n+10 |         ptr.offset(offset_usize as isize);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.add(offset_usize)`\n+   |\n+   = note: `-D ptr-offset-with-cast` implied by `-D warnings`\n+\n+error: use of `wrapping_offset` with a `usize` casted to an `isize`\n+  --> $DIR/ptr_offset_with_cast.rs:14:9\n+   |\n+14 |         ptr.wrapping_offset(offset_usize as isize);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.wrapping_add(offset_usize)`\n+\n+error: aborting due to 2 previous errors\n+"}]}