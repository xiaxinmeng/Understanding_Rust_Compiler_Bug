{"sha": "3068af79ffd23656ff2d46ac92d9192ce6c813fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNjhhZjc5ZmZkMjM2NTZmZjJkNDZhYzkyZDkxOTJjZTZjODEzZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T07:27:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T07:29:32Z"}, "message": "Introduce owned ast nodes\n\nast::FooNode is an owned 'static counterpart to ast::Foo<'a>", "tree": {"sha": "bce803cd3f48489eee785c726fb09906f8a5f36a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce803cd3f48489eee785c726fb09906f8a5f36a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3068af79ffd23656ff2d46ac92d9192ce6c813fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3068af79ffd23656ff2d46ac92d9192ce6c813fb", "html_url": "https://github.com/rust-lang/rust/commit/3068af79ffd23656ff2d46ac92d9192ce6c813fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3068af79ffd23656ff2d46ac92d9192ce6c813fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032d15c392e8de7936c8729e03e6229313f3b054", "url": "https://api.github.com/repos/rust-lang/rust/commits/032d15c392e8de7936c8729e03e6229313f3b054", "html_url": "https://github.com/rust-lang/rust/commit/032d15c392e8de7936c8729e03e6229313f3b054"}], "stats": {"total": 1305, "additions": 1303, "deletions": 2}, "files": [{"sha": "9ba775e1c332f732574b3cb15baea0e2c4bf041d", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1288, "deletions": 1, "changes": 1289, "blob_url": "https://github.com/rust-lang/rust/blob/3068af79ffd23656ff2d46ac92d9192ce6c813fb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3068af79ffd23656ff2d46ac92d9192ce6c813fb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=3068af79ffd23656ff2d46ac92d9192ce6c813fb", "patch": "@@ -5,11 +5,24 @@\n \n use crate::{\n     ast,\n-    SyntaxNodeRef, AstNode,\n+    SyntaxNode, SyntaxNodeRef, AstNode,\n     SyntaxKind::*,\n };\n \n // ArgList\n+\n+#[derive(Debug, Clone)]\n+pub struct ArgListNode(SyntaxNode);\n+\n+impl ArgListNode {\n+    pub fn new(&self, ast: ArgList) -> ArgListNode {\n+        let syntax = ast.syntax().owned();\n+        ArgListNode(syntax)\n+    }\n+    pub fn ast(&self) -> ArgList {\n+        ArgList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ArgList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -32,6 +45,19 @@ impl<'a> ArgList<'a> {\n }\n \n // ArrayExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct ArrayExprNode(SyntaxNode);\n+\n+impl ArrayExprNode {\n+    pub fn new(&self, ast: ArrayExpr) -> ArrayExprNode {\n+        let syntax = ast.syntax().owned();\n+        ArrayExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> ArrayExpr {\n+        ArrayExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ArrayExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -50,6 +76,19 @@ impl<'a> AstNode<'a> for ArrayExpr<'a> {\n impl<'a> ArrayExpr<'a> {}\n \n // ArrayType\n+\n+#[derive(Debug, Clone)]\n+pub struct ArrayTypeNode(SyntaxNode);\n+\n+impl ArrayTypeNode {\n+    pub fn new(&self, ast: ArrayType) -> ArrayTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ArrayTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> ArrayType {\n+        ArrayType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ArrayType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -68,6 +107,19 @@ impl<'a> AstNode<'a> for ArrayType<'a> {\n impl<'a> ArrayType<'a> {}\n \n // Attr\n+\n+#[derive(Debug, Clone)]\n+pub struct AttrNode(SyntaxNode);\n+\n+impl AttrNode {\n+    pub fn new(&self, ast: Attr) -> AttrNode {\n+        let syntax = ast.syntax().owned();\n+        AttrNode(syntax)\n+    }\n+    pub fn ast(&self) -> Attr {\n+        Attr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Attr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -90,6 +142,19 @@ impl<'a> Attr<'a> {\n }\n \n // BinExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct BinExprNode(SyntaxNode);\n+\n+impl BinExprNode {\n+    pub fn new(&self, ast: BinExpr) -> BinExprNode {\n+        let syntax = ast.syntax().owned();\n+        BinExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> BinExpr {\n+        BinExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BinExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -108,6 +173,19 @@ impl<'a> AstNode<'a> for BinExpr<'a> {\n impl<'a> BinExpr<'a> {}\n \n // BindPat\n+\n+#[derive(Debug, Clone)]\n+pub struct BindPatNode(SyntaxNode);\n+\n+impl BindPatNode {\n+    pub fn new(&self, ast: BindPat) -> BindPatNode {\n+        let syntax = ast.syntax().owned();\n+        BindPatNode(syntax)\n+    }\n+    pub fn ast(&self) -> BindPat {\n+        BindPat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BindPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -127,6 +205,19 @@ impl<'a> ast::NameOwner<'a> for BindPat<'a> {}\n impl<'a> BindPat<'a> {}\n \n // Block\n+\n+#[derive(Debug, Clone)]\n+pub struct BlockNode(SyntaxNode);\n+\n+impl BlockNode {\n+    pub fn new(&self, ast: Block) -> BlockNode {\n+        let syntax = ast.syntax().owned();\n+        BlockNode(syntax)\n+    }\n+    pub fn ast(&self) -> Block {\n+        Block::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Block<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -153,6 +244,19 @@ impl<'a> Block<'a> {\n }\n \n // BlockExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct BlockExprNode(SyntaxNode);\n+\n+impl BlockExprNode {\n+    pub fn new(&self, ast: BlockExpr) -> BlockExprNode {\n+        let syntax = ast.syntax().owned();\n+        BlockExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> BlockExpr {\n+        BlockExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BlockExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -175,6 +279,19 @@ impl<'a> BlockExpr<'a> {\n }\n \n // BreakExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct BreakExprNode(SyntaxNode);\n+\n+impl BreakExprNode {\n+    pub fn new(&self, ast: BreakExpr) -> BreakExprNode {\n+        let syntax = ast.syntax().owned();\n+        BreakExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> BreakExpr {\n+        BreakExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct BreakExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -193,6 +310,19 @@ impl<'a> AstNode<'a> for BreakExpr<'a> {\n impl<'a> BreakExpr<'a> {}\n \n // CallExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct CallExprNode(SyntaxNode);\n+\n+impl CallExprNode {\n+    pub fn new(&self, ast: CallExpr) -> CallExprNode {\n+        let syntax = ast.syntax().owned();\n+        CallExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> CallExpr {\n+        CallExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct CallExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -216,6 +346,19 @@ impl<'a> CallExpr<'a> {\n }\n \n // CastExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct CastExprNode(SyntaxNode);\n+\n+impl CastExprNode {\n+    pub fn new(&self, ast: CastExpr) -> CastExprNode {\n+        let syntax = ast.syntax().owned();\n+        CastExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> CastExpr {\n+        CastExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct CastExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -234,6 +377,19 @@ impl<'a> AstNode<'a> for CastExpr<'a> {\n impl<'a> CastExpr<'a> {}\n \n // Comment\n+\n+#[derive(Debug, Clone)]\n+pub struct CommentNode(SyntaxNode);\n+\n+impl CommentNode {\n+    pub fn new(&self, ast: Comment) -> CommentNode {\n+        let syntax = ast.syntax().owned();\n+        CommentNode(syntax)\n+    }\n+    pub fn ast(&self) -> Comment {\n+        Comment::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Comment<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -252,6 +408,19 @@ impl<'a> AstNode<'a> for Comment<'a> {\n impl<'a> Comment<'a> {}\n \n // Condition\n+\n+#[derive(Debug, Clone)]\n+pub struct ConditionNode(SyntaxNode);\n+\n+impl ConditionNode {\n+    pub fn new(&self, ast: Condition) -> ConditionNode {\n+        let syntax = ast.syntax().owned();\n+        ConditionNode(syntax)\n+    }\n+    pub fn ast(&self) -> Condition {\n+        Condition::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Condition<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -278,6 +447,19 @@ impl<'a> Condition<'a> {\n }\n \n // ConstDef\n+\n+#[derive(Debug, Clone)]\n+pub struct ConstDefNode(SyntaxNode);\n+\n+impl ConstDefNode {\n+    pub fn new(&self, ast: ConstDef) -> ConstDefNode {\n+        let syntax = ast.syntax().owned();\n+        ConstDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> ConstDef {\n+        ConstDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ConstDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -299,6 +481,19 @@ impl<'a> ast::AttrsOwner<'a> for ConstDef<'a> {}\n impl<'a> ConstDef<'a> {}\n \n // ContinueExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct ContinueExprNode(SyntaxNode);\n+\n+impl ContinueExprNode {\n+    pub fn new(&self, ast: ContinueExpr) -> ContinueExprNode {\n+        let syntax = ast.syntax().owned();\n+        ContinueExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> ContinueExpr {\n+        ContinueExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ContinueExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -317,6 +512,19 @@ impl<'a> AstNode<'a> for ContinueExpr<'a> {\n impl<'a> ContinueExpr<'a> {}\n \n // DynTraitType\n+\n+#[derive(Debug, Clone)]\n+pub struct DynTraitTypeNode(SyntaxNode);\n+\n+impl DynTraitTypeNode {\n+    pub fn new(&self, ast: DynTraitType) -> DynTraitTypeNode {\n+        let syntax = ast.syntax().owned();\n+        DynTraitTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> DynTraitType {\n+        DynTraitType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct DynTraitType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -335,6 +543,19 @@ impl<'a> AstNode<'a> for DynTraitType<'a> {\n impl<'a> DynTraitType<'a> {}\n \n // EnumDef\n+\n+#[derive(Debug, Clone)]\n+pub struct EnumDefNode(SyntaxNode);\n+\n+impl EnumDefNode {\n+    pub fn new(&self, ast: EnumDef) -> EnumDefNode {\n+        let syntax = ast.syntax().owned();\n+        EnumDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> EnumDef {\n+        EnumDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct EnumDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -356,6 +577,19 @@ impl<'a> ast::AttrsOwner<'a> for EnumDef<'a> {}\n impl<'a> EnumDef<'a> {}\n \n // Expr\n+\n+#[derive(Debug, Clone)]\n+pub struct ExprNode(SyntaxNode);\n+\n+impl ExprNode {\n+    pub fn new(&self, ast: Expr) -> ExprNode {\n+        let syntax = ast.syntax().owned();\n+        ExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> Expr {\n+        Expr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum Expr<'a> {\n     TupleExpr(TupleExpr<'a>),\n@@ -471,6 +705,19 @@ impl<'a> AstNode<'a> for Expr<'a> {\n impl<'a> Expr<'a> {}\n \n // ExprStmt\n+\n+#[derive(Debug, Clone)]\n+pub struct ExprStmtNode(SyntaxNode);\n+\n+impl ExprStmtNode {\n+    pub fn new(&self, ast: ExprStmt) -> ExprStmtNode {\n+        let syntax = ast.syntax().owned();\n+        ExprStmtNode(syntax)\n+    }\n+    pub fn ast(&self) -> ExprStmt {\n+        ExprStmt::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ExprStmt<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -493,6 +740,19 @@ impl<'a> ExprStmt<'a> {\n }\n \n // ExternCrateItem\n+\n+#[derive(Debug, Clone)]\n+pub struct ExternCrateItemNode(SyntaxNode);\n+\n+impl ExternCrateItemNode {\n+    pub fn new(&self, ast: ExternCrateItem) -> ExternCrateItemNode {\n+        let syntax = ast.syntax().owned();\n+        ExternCrateItemNode(syntax)\n+    }\n+    pub fn ast(&self) -> ExternCrateItem {\n+        ExternCrateItem::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ExternCrateItem<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -511,6 +771,19 @@ impl<'a> AstNode<'a> for ExternCrateItem<'a> {\n impl<'a> ExternCrateItem<'a> {}\n \n // FieldExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct FieldExprNode(SyntaxNode);\n+\n+impl FieldExprNode {\n+    pub fn new(&self, ast: FieldExpr) -> FieldExprNode {\n+        let syntax = ast.syntax().owned();\n+        FieldExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> FieldExpr {\n+        FieldExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FieldExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -529,6 +802,19 @@ impl<'a> AstNode<'a> for FieldExpr<'a> {\n impl<'a> FieldExpr<'a> {}\n \n // FieldPatList\n+\n+#[derive(Debug, Clone)]\n+pub struct FieldPatListNode(SyntaxNode);\n+\n+impl FieldPatListNode {\n+    pub fn new(&self, ast: FieldPatList) -> FieldPatListNode {\n+        let syntax = ast.syntax().owned();\n+        FieldPatListNode(syntax)\n+    }\n+    pub fn ast(&self) -> FieldPatList {\n+        FieldPatList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FieldPatList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -547,6 +833,19 @@ impl<'a> AstNode<'a> for FieldPatList<'a> {\n impl<'a> FieldPatList<'a> {}\n \n // FnDef\n+\n+#[derive(Debug, Clone)]\n+pub struct FnDefNode(SyntaxNode);\n+\n+impl FnDefNode {\n+    pub fn new(&self, ast: FnDef) -> FnDefNode {\n+        let syntax = ast.syntax().owned();\n+        FnDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> FnDef {\n+        FnDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FnDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -580,6 +879,19 @@ impl<'a> FnDef<'a> {\n }\n \n // FnPointerType\n+\n+#[derive(Debug, Clone)]\n+pub struct FnPointerTypeNode(SyntaxNode);\n+\n+impl FnPointerTypeNode {\n+    pub fn new(&self, ast: FnPointerType) -> FnPointerTypeNode {\n+        let syntax = ast.syntax().owned();\n+        FnPointerTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> FnPointerType {\n+        FnPointerType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct FnPointerType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -598,6 +910,19 @@ impl<'a> AstNode<'a> for FnPointerType<'a> {\n impl<'a> FnPointerType<'a> {}\n \n // ForExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct ForExprNode(SyntaxNode);\n+\n+impl ForExprNode {\n+    pub fn new(&self, ast: ForExpr) -> ForExprNode {\n+        let syntax = ast.syntax().owned();\n+        ForExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> ForExpr {\n+        ForExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ForExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -625,6 +950,19 @@ impl<'a> ForExpr<'a> {\n }\n \n // ForType\n+\n+#[derive(Debug, Clone)]\n+pub struct ForTypeNode(SyntaxNode);\n+\n+impl ForTypeNode {\n+    pub fn new(&self, ast: ForType) -> ForTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ForTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> ForType {\n+        ForType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ForType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -643,6 +981,19 @@ impl<'a> AstNode<'a> for ForType<'a> {\n impl<'a> ForType<'a> {}\n \n // IfExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct IfExprNode(SyntaxNode);\n+\n+impl IfExprNode {\n+    pub fn new(&self, ast: IfExpr) -> IfExprNode {\n+        let syntax = ast.syntax().owned();\n+        IfExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> IfExpr {\n+        IfExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct IfExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -665,6 +1016,19 @@ impl<'a> IfExpr<'a> {\n }\n \n // ImplItem\n+\n+#[derive(Debug, Clone)]\n+pub struct ImplItemNode(SyntaxNode);\n+\n+impl ImplItemNode {\n+    pub fn new(&self, ast: ImplItem) -> ImplItemNode {\n+        let syntax = ast.syntax().owned();\n+        ImplItemNode(syntax)\n+    }\n+    pub fn ast(&self) -> ImplItem {\n+        ImplItem::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ImplItem<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -683,6 +1047,19 @@ impl<'a> AstNode<'a> for ImplItem<'a> {\n impl<'a> ImplItem<'a> {}\n \n // ImplTraitType\n+\n+#[derive(Debug, Clone)]\n+pub struct ImplTraitTypeNode(SyntaxNode);\n+\n+impl ImplTraitTypeNode {\n+    pub fn new(&self, ast: ImplTraitType) -> ImplTraitTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ImplTraitTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> ImplTraitType {\n+        ImplTraitType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ImplTraitType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -701,6 +1078,19 @@ impl<'a> AstNode<'a> for ImplTraitType<'a> {\n impl<'a> ImplTraitType<'a> {}\n \n // IndexExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct IndexExprNode(SyntaxNode);\n+\n+impl IndexExprNode {\n+    pub fn new(&self, ast: IndexExpr) -> IndexExprNode {\n+        let syntax = ast.syntax().owned();\n+        IndexExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> IndexExpr {\n+        IndexExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct IndexExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -719,6 +1109,19 @@ impl<'a> AstNode<'a> for IndexExpr<'a> {\n impl<'a> IndexExpr<'a> {}\n \n // ItemList\n+\n+#[derive(Debug, Clone)]\n+pub struct ItemListNode(SyntaxNode);\n+\n+impl ItemListNode {\n+    pub fn new(&self, ast: ItemList) -> ItemListNode {\n+        let syntax = ast.syntax().owned();\n+        ItemListNode(syntax)\n+    }\n+    pub fn ast(&self) -> ItemList {\n+        ItemList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ItemList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -739,6 +1142,19 @@ impl<'a> ast::ModuleItemOwner<'a> for ItemList<'a> {}\n impl<'a> ItemList<'a> {}\n \n // Label\n+\n+#[derive(Debug, Clone)]\n+pub struct LabelNode(SyntaxNode);\n+\n+impl LabelNode {\n+    pub fn new(&self, ast: Label) -> LabelNode {\n+        let syntax = ast.syntax().owned();\n+        LabelNode(syntax)\n+    }\n+    pub fn ast(&self) -> Label {\n+        Label::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Label<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -757,6 +1173,19 @@ impl<'a> AstNode<'a> for Label<'a> {\n impl<'a> Label<'a> {}\n \n // LambdaExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct LambdaExprNode(SyntaxNode);\n+\n+impl LambdaExprNode {\n+    pub fn new(&self, ast: LambdaExpr) -> LambdaExprNode {\n+        let syntax = ast.syntax().owned();\n+        LambdaExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> LambdaExpr {\n+        LambdaExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LambdaExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -783,6 +1212,19 @@ impl<'a> LambdaExpr<'a> {\n }\n \n // LetStmt\n+\n+#[derive(Debug, Clone)]\n+pub struct LetStmtNode(SyntaxNode);\n+\n+impl LetStmtNode {\n+    pub fn new(&self, ast: LetStmt) -> LetStmtNode {\n+        let syntax = ast.syntax().owned();\n+        LetStmtNode(syntax)\n+    }\n+    pub fn ast(&self) -> LetStmt {\n+        LetStmt::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LetStmt<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -809,6 +1251,19 @@ impl<'a> LetStmt<'a> {\n }\n \n // Lifetime\n+\n+#[derive(Debug, Clone)]\n+pub struct LifetimeNode(SyntaxNode);\n+\n+impl LifetimeNode {\n+    pub fn new(&self, ast: Lifetime) -> LifetimeNode {\n+        let syntax = ast.syntax().owned();\n+        LifetimeNode(syntax)\n+    }\n+    pub fn ast(&self) -> Lifetime {\n+        Lifetime::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Lifetime<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -827,6 +1282,19 @@ impl<'a> AstNode<'a> for Lifetime<'a> {\n impl<'a> Lifetime<'a> {}\n \n // LifetimeParam\n+\n+#[derive(Debug, Clone)]\n+pub struct LifetimeParamNode(SyntaxNode);\n+\n+impl LifetimeParamNode {\n+    pub fn new(&self, ast: LifetimeParam) -> LifetimeParamNode {\n+        let syntax = ast.syntax().owned();\n+        LifetimeParamNode(syntax)\n+    }\n+    pub fn ast(&self) -> LifetimeParam {\n+        LifetimeParam::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LifetimeParam<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -849,6 +1317,19 @@ impl<'a> LifetimeParam<'a> {\n }\n \n // Literal\n+\n+#[derive(Debug, Clone)]\n+pub struct LiteralNode(SyntaxNode);\n+\n+impl LiteralNode {\n+    pub fn new(&self, ast: Literal) -> LiteralNode {\n+        let syntax = ast.syntax().owned();\n+        LiteralNode(syntax)\n+    }\n+    pub fn ast(&self) -> Literal {\n+        Literal::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Literal<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -867,6 +1348,19 @@ impl<'a> AstNode<'a> for Literal<'a> {\n impl<'a> Literal<'a> {}\n \n // LoopExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct LoopExprNode(SyntaxNode);\n+\n+impl LoopExprNode {\n+    pub fn new(&self, ast: LoopExpr) -> LoopExprNode {\n+        let syntax = ast.syntax().owned();\n+        LoopExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> LoopExpr {\n+        LoopExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct LoopExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -886,6 +1380,19 @@ impl<'a> ast::LoopBodyOwner<'a> for LoopExpr<'a> {}\n impl<'a> LoopExpr<'a> {}\n \n // MatchArm\n+\n+#[derive(Debug, Clone)]\n+pub struct MatchArmNode(SyntaxNode);\n+\n+impl MatchArmNode {\n+    pub fn new(&self, ast: MatchArm) -> MatchArmNode {\n+        let syntax = ast.syntax().owned();\n+        MatchArmNode(syntax)\n+    }\n+    pub fn ast(&self) -> MatchArm {\n+        MatchArm::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchArm<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -916,6 +1423,19 @@ impl<'a> MatchArm<'a> {\n }\n \n // MatchArmList\n+\n+#[derive(Debug, Clone)]\n+pub struct MatchArmListNode(SyntaxNode);\n+\n+impl MatchArmListNode {\n+    pub fn new(&self, ast: MatchArmList) -> MatchArmListNode {\n+        let syntax = ast.syntax().owned();\n+        MatchArmListNode(syntax)\n+    }\n+    pub fn ast(&self) -> MatchArmList {\n+        MatchArmList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchArmList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -938,6 +1458,19 @@ impl<'a> MatchArmList<'a> {\n }\n \n // MatchExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct MatchExprNode(SyntaxNode);\n+\n+impl MatchExprNode {\n+    pub fn new(&self, ast: MatchExpr) -> MatchExprNode {\n+        let syntax = ast.syntax().owned();\n+        MatchExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> MatchExpr {\n+        MatchExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -964,6 +1497,19 @@ impl<'a> MatchExpr<'a> {\n }\n \n // MatchGuard\n+\n+#[derive(Debug, Clone)]\n+pub struct MatchGuardNode(SyntaxNode);\n+\n+impl MatchGuardNode {\n+    pub fn new(&self, ast: MatchGuard) -> MatchGuardNode {\n+        let syntax = ast.syntax().owned();\n+        MatchGuardNode(syntax)\n+    }\n+    pub fn ast(&self) -> MatchGuard {\n+        MatchGuard::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MatchGuard<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -982,6 +1528,19 @@ impl<'a> AstNode<'a> for MatchGuard<'a> {\n impl<'a> MatchGuard<'a> {}\n \n // MethodCallExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct MethodCallExprNode(SyntaxNode);\n+\n+impl MethodCallExprNode {\n+    pub fn new(&self, ast: MethodCallExpr) -> MethodCallExprNode {\n+        let syntax = ast.syntax().owned();\n+        MethodCallExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> MethodCallExpr {\n+        MethodCallExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct MethodCallExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1005,6 +1564,19 @@ impl<'a> MethodCallExpr<'a> {\n }\n \n // Module\n+\n+#[derive(Debug, Clone)]\n+pub struct ModuleNode(SyntaxNode);\n+\n+impl ModuleNode {\n+    pub fn new(&self, ast: Module) -> ModuleNode {\n+        let syntax = ast.syntax().owned();\n+        ModuleNode(syntax)\n+    }\n+    pub fn ast(&self) -> Module {\n+        Module::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Module<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1029,6 +1601,19 @@ impl<'a> Module<'a> {\n }\n \n // ModuleItem\n+\n+#[derive(Debug, Clone)]\n+pub struct ModuleItemNode(SyntaxNode);\n+\n+impl ModuleItemNode {\n+    pub fn new(&self, ast: ModuleItem) -> ModuleItemNode {\n+        let syntax = ast.syntax().owned();\n+        ModuleItemNode(syntax)\n+    }\n+    pub fn ast(&self) -> ModuleItem {\n+        ModuleItem::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum ModuleItem<'a> {\n     StructDef(StructDef<'a>),\n@@ -1081,6 +1666,19 @@ impl<'a> AstNode<'a> for ModuleItem<'a> {\n impl<'a> ModuleItem<'a> {}\n \n // Name\n+\n+#[derive(Debug, Clone)]\n+pub struct NameNode(SyntaxNode);\n+\n+impl NameNode {\n+    pub fn new(&self, ast: Name) -> NameNode {\n+        let syntax = ast.syntax().owned();\n+        NameNode(syntax)\n+    }\n+    pub fn ast(&self) -> Name {\n+        Name::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Name<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1099,6 +1697,19 @@ impl<'a> AstNode<'a> for Name<'a> {\n impl<'a> Name<'a> {}\n \n // NameRef\n+\n+#[derive(Debug, Clone)]\n+pub struct NameRefNode(SyntaxNode);\n+\n+impl NameRefNode {\n+    pub fn new(&self, ast: NameRef) -> NameRefNode {\n+        let syntax = ast.syntax().owned();\n+        NameRefNode(syntax)\n+    }\n+    pub fn ast(&self) -> NameRef {\n+        NameRef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NameRef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1117,6 +1728,19 @@ impl<'a> AstNode<'a> for NameRef<'a> {\n impl<'a> NameRef<'a> {}\n \n // NamedField\n+\n+#[derive(Debug, Clone)]\n+pub struct NamedFieldNode(SyntaxNode);\n+\n+impl NamedFieldNode {\n+    pub fn new(&self, ast: NamedField) -> NamedFieldNode {\n+        let syntax = ast.syntax().owned();\n+        NamedFieldNode(syntax)\n+    }\n+    pub fn ast(&self) -> NamedField {\n+        NamedField::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NamedField<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1135,6 +1759,19 @@ impl<'a> AstNode<'a> for NamedField<'a> {\n impl<'a> NamedField<'a> {}\n \n // NamedFieldDef\n+\n+#[derive(Debug, Clone)]\n+pub struct NamedFieldDefNode(SyntaxNode);\n+\n+impl NamedFieldDefNode {\n+    pub fn new(&self, ast: NamedFieldDef) -> NamedFieldDefNode {\n+        let syntax = ast.syntax().owned();\n+        NamedFieldDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> NamedFieldDef {\n+        NamedFieldDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NamedFieldDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1155,6 +1792,19 @@ impl<'a> ast::AttrsOwner<'a> for NamedFieldDef<'a> {}\n impl<'a> NamedFieldDef<'a> {}\n \n // NamedFieldList\n+\n+#[derive(Debug, Clone)]\n+pub struct NamedFieldListNode(SyntaxNode);\n+\n+impl NamedFieldListNode {\n+    pub fn new(&self, ast: NamedFieldList) -> NamedFieldListNode {\n+        let syntax = ast.syntax().owned();\n+        NamedFieldListNode(syntax)\n+    }\n+    pub fn ast(&self) -> NamedFieldList {\n+        NamedFieldList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NamedFieldList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1173,6 +1823,19 @@ impl<'a> AstNode<'a> for NamedFieldList<'a> {\n impl<'a> NamedFieldList<'a> {}\n \n // NeverType\n+\n+#[derive(Debug, Clone)]\n+pub struct NeverTypeNode(SyntaxNode);\n+\n+impl NeverTypeNode {\n+    pub fn new(&self, ast: NeverType) -> NeverTypeNode {\n+        let syntax = ast.syntax().owned();\n+        NeverTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> NeverType {\n+        NeverType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct NeverType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1191,6 +1854,19 @@ impl<'a> AstNode<'a> for NeverType<'a> {\n impl<'a> NeverType<'a> {}\n \n // NominalDef\n+\n+#[derive(Debug, Clone)]\n+pub struct NominalDefNode(SyntaxNode);\n+\n+impl NominalDefNode {\n+    pub fn new(&self, ast: NominalDef) -> NominalDefNode {\n+        let syntax = ast.syntax().owned();\n+        NominalDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> NominalDef {\n+        NominalDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum NominalDef<'a> {\n     StructDef(StructDef<'a>),\n@@ -1219,6 +1895,19 @@ impl<'a> ast::AttrsOwner<'a> for NominalDef<'a> {}\n impl<'a> NominalDef<'a> {}\n \n // Param\n+\n+#[derive(Debug, Clone)]\n+pub struct ParamNode(SyntaxNode);\n+\n+impl ParamNode {\n+    pub fn new(&self, ast: Param) -> ParamNode {\n+        let syntax = ast.syntax().owned();\n+        ParamNode(syntax)\n+    }\n+    pub fn ast(&self) -> Param {\n+        Param::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Param<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1241,6 +1930,19 @@ impl<'a> Param<'a> {\n }\n \n // ParamList\n+\n+#[derive(Debug, Clone)]\n+pub struct ParamListNode(SyntaxNode);\n+\n+impl ParamListNode {\n+    pub fn new(&self, ast: ParamList) -> ParamListNode {\n+        let syntax = ast.syntax().owned();\n+        ParamListNode(syntax)\n+    }\n+    pub fn ast(&self) -> ParamList {\n+        ParamList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ParamList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1267,6 +1969,19 @@ impl<'a> ParamList<'a> {\n }\n \n // ParenExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct ParenExprNode(SyntaxNode);\n+\n+impl ParenExprNode {\n+    pub fn new(&self, ast: ParenExpr) -> ParenExprNode {\n+        let syntax = ast.syntax().owned();\n+        ParenExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> ParenExpr {\n+        ParenExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ParenExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1285,6 +2000,19 @@ impl<'a> AstNode<'a> for ParenExpr<'a> {\n impl<'a> ParenExpr<'a> {}\n \n // ParenType\n+\n+#[derive(Debug, Clone)]\n+pub struct ParenTypeNode(SyntaxNode);\n+\n+impl ParenTypeNode {\n+    pub fn new(&self, ast: ParenType) -> ParenTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ParenTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> ParenType {\n+        ParenType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ParenType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1303,6 +2031,19 @@ impl<'a> AstNode<'a> for ParenType<'a> {\n impl<'a> ParenType<'a> {}\n \n // Pat\n+\n+#[derive(Debug, Clone)]\n+pub struct PatNode(SyntaxNode);\n+\n+impl PatNode {\n+    pub fn new(&self, ast: Pat) -> PatNode {\n+        let syntax = ast.syntax().owned();\n+        PatNode(syntax)\n+    }\n+    pub fn ast(&self) -> Pat {\n+        Pat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum Pat<'a> {\n     RefPat(RefPat<'a>),\n@@ -1352,6 +2093,19 @@ impl<'a> AstNode<'a> for Pat<'a> {\n impl<'a> Pat<'a> {}\n \n // Path\n+\n+#[derive(Debug, Clone)]\n+pub struct PathNode(SyntaxNode);\n+\n+impl PathNode {\n+    pub fn new(&self, ast: Path) -> PathNode {\n+        let syntax = ast.syntax().owned();\n+        PathNode(syntax)\n+    }\n+    pub fn ast(&self) -> Path {\n+        Path::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Path<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1378,6 +2132,19 @@ impl<'a> Path<'a> {\n }\n \n // PathExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct PathExprNode(SyntaxNode);\n+\n+impl PathExprNode {\n+    pub fn new(&self, ast: PathExpr) -> PathExprNode {\n+        let syntax = ast.syntax().owned();\n+        PathExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> PathExpr {\n+        PathExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1400,6 +2167,19 @@ impl<'a> PathExpr<'a> {\n }\n \n // PathPat\n+\n+#[derive(Debug, Clone)]\n+pub struct PathPatNode(SyntaxNode);\n+\n+impl PathPatNode {\n+    pub fn new(&self, ast: PathPat) -> PathPatNode {\n+        let syntax = ast.syntax().owned();\n+        PathPatNode(syntax)\n+    }\n+    pub fn ast(&self) -> PathPat {\n+        PathPat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1418,6 +2198,19 @@ impl<'a> AstNode<'a> for PathPat<'a> {\n impl<'a> PathPat<'a> {}\n \n // PathSegment\n+\n+#[derive(Debug, Clone)]\n+pub struct PathSegmentNode(SyntaxNode);\n+\n+impl PathSegmentNode {\n+    pub fn new(&self, ast: PathSegment) -> PathSegmentNode {\n+        let syntax = ast.syntax().owned();\n+        PathSegmentNode(syntax)\n+    }\n+    pub fn ast(&self) -> PathSegment {\n+        PathSegment::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathSegment<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1440,6 +2233,19 @@ impl<'a> PathSegment<'a> {\n }\n \n // PathType\n+\n+#[derive(Debug, Clone)]\n+pub struct PathTypeNode(SyntaxNode);\n+\n+impl PathTypeNode {\n+    pub fn new(&self, ast: PathType) -> PathTypeNode {\n+        let syntax = ast.syntax().owned();\n+        PathTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> PathType {\n+        PathType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PathType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1458,6 +2264,19 @@ impl<'a> AstNode<'a> for PathType<'a> {\n impl<'a> PathType<'a> {}\n \n // PlaceholderPat\n+\n+#[derive(Debug, Clone)]\n+pub struct PlaceholderPatNode(SyntaxNode);\n+\n+impl PlaceholderPatNode {\n+    pub fn new(&self, ast: PlaceholderPat) -> PlaceholderPatNode {\n+        let syntax = ast.syntax().owned();\n+        PlaceholderPatNode(syntax)\n+    }\n+    pub fn ast(&self) -> PlaceholderPat {\n+        PlaceholderPat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PlaceholderPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1476,6 +2295,19 @@ impl<'a> AstNode<'a> for PlaceholderPat<'a> {\n impl<'a> PlaceholderPat<'a> {}\n \n // PlaceholderType\n+\n+#[derive(Debug, Clone)]\n+pub struct PlaceholderTypeNode(SyntaxNode);\n+\n+impl PlaceholderTypeNode {\n+    pub fn new(&self, ast: PlaceholderType) -> PlaceholderTypeNode {\n+        let syntax = ast.syntax().owned();\n+        PlaceholderTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> PlaceholderType {\n+        PlaceholderType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PlaceholderType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1494,6 +2326,19 @@ impl<'a> AstNode<'a> for PlaceholderType<'a> {\n impl<'a> PlaceholderType<'a> {}\n \n // PointerType\n+\n+#[derive(Debug, Clone)]\n+pub struct PointerTypeNode(SyntaxNode);\n+\n+impl PointerTypeNode {\n+    pub fn new(&self, ast: PointerType) -> PointerTypeNode {\n+        let syntax = ast.syntax().owned();\n+        PointerTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> PointerType {\n+        PointerType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PointerType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1512,6 +2357,19 @@ impl<'a> AstNode<'a> for PointerType<'a> {\n impl<'a> PointerType<'a> {}\n \n // PrefixExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct PrefixExprNode(SyntaxNode);\n+\n+impl PrefixExprNode {\n+    pub fn new(&self, ast: PrefixExpr) -> PrefixExprNode {\n+        let syntax = ast.syntax().owned();\n+        PrefixExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> PrefixExpr {\n+        PrefixExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct PrefixExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1530,6 +2388,19 @@ impl<'a> AstNode<'a> for PrefixExpr<'a> {\n impl<'a> PrefixExpr<'a> {}\n \n // RangeExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct RangeExprNode(SyntaxNode);\n+\n+impl RangeExprNode {\n+    pub fn new(&self, ast: RangeExpr) -> RangeExprNode {\n+        let syntax = ast.syntax().owned();\n+        RangeExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> RangeExpr {\n+        RangeExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RangeExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1548,6 +2419,19 @@ impl<'a> AstNode<'a> for RangeExpr<'a> {\n impl<'a> RangeExpr<'a> {}\n \n // RangePat\n+\n+#[derive(Debug, Clone)]\n+pub struct RangePatNode(SyntaxNode);\n+\n+impl RangePatNode {\n+    pub fn new(&self, ast: RangePat) -> RangePatNode {\n+        let syntax = ast.syntax().owned();\n+        RangePatNode(syntax)\n+    }\n+    pub fn ast(&self) -> RangePat {\n+        RangePat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RangePat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1566,6 +2450,19 @@ impl<'a> AstNode<'a> for RangePat<'a> {\n impl<'a> RangePat<'a> {}\n \n // RefExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct RefExprNode(SyntaxNode);\n+\n+impl RefExprNode {\n+    pub fn new(&self, ast: RefExpr) -> RefExprNode {\n+        let syntax = ast.syntax().owned();\n+        RefExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> RefExpr {\n+        RefExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RefExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1584,6 +2481,19 @@ impl<'a> AstNode<'a> for RefExpr<'a> {\n impl<'a> RefExpr<'a> {}\n \n // RefPat\n+\n+#[derive(Debug, Clone)]\n+pub struct RefPatNode(SyntaxNode);\n+\n+impl RefPatNode {\n+    pub fn new(&self, ast: RefPat) -> RefPatNode {\n+        let syntax = ast.syntax().owned();\n+        RefPatNode(syntax)\n+    }\n+    pub fn ast(&self) -> RefPat {\n+        RefPat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RefPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1602,6 +2512,19 @@ impl<'a> AstNode<'a> for RefPat<'a> {\n impl<'a> RefPat<'a> {}\n \n // ReferenceType\n+\n+#[derive(Debug, Clone)]\n+pub struct ReferenceTypeNode(SyntaxNode);\n+\n+impl ReferenceTypeNode {\n+    pub fn new(&self, ast: ReferenceType) -> ReferenceTypeNode {\n+        let syntax = ast.syntax().owned();\n+        ReferenceTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> ReferenceType {\n+        ReferenceType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ReferenceType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1620,6 +2543,19 @@ impl<'a> AstNode<'a> for ReferenceType<'a> {\n impl<'a> ReferenceType<'a> {}\n \n // RetType\n+\n+#[derive(Debug, Clone)]\n+pub struct RetTypeNode(SyntaxNode);\n+\n+impl RetTypeNode {\n+    pub fn new(&self, ast: RetType) -> RetTypeNode {\n+        let syntax = ast.syntax().owned();\n+        RetTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> RetType {\n+        RetType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct RetType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1638,6 +2574,19 @@ impl<'a> AstNode<'a> for RetType<'a> {\n impl<'a> RetType<'a> {}\n \n // ReturnExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct ReturnExprNode(SyntaxNode);\n+\n+impl ReturnExprNode {\n+    pub fn new(&self, ast: ReturnExpr) -> ReturnExprNode {\n+        let syntax = ast.syntax().owned();\n+        ReturnExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> ReturnExpr {\n+        ReturnExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct ReturnExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1656,6 +2605,19 @@ impl<'a> AstNode<'a> for ReturnExpr<'a> {\n impl<'a> ReturnExpr<'a> {}\n \n // Root\n+\n+#[derive(Debug, Clone)]\n+pub struct RootNode(SyntaxNode);\n+\n+impl RootNode {\n+    pub fn new(&self, ast: Root) -> RootNode {\n+        let syntax = ast.syntax().owned();\n+        RootNode(syntax)\n+    }\n+    pub fn ast(&self) -> Root {\n+        Root::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Root<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1680,6 +2642,19 @@ impl<'a> Root<'a> {\n }\n \n // SelfParam\n+\n+#[derive(Debug, Clone)]\n+pub struct SelfParamNode(SyntaxNode);\n+\n+impl SelfParamNode {\n+    pub fn new(&self, ast: SelfParam) -> SelfParamNode {\n+        let syntax = ast.syntax().owned();\n+        SelfParamNode(syntax)\n+    }\n+    pub fn ast(&self) -> SelfParam {\n+        SelfParam::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct SelfParam<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1698,6 +2673,19 @@ impl<'a> AstNode<'a> for SelfParam<'a> {\n impl<'a> SelfParam<'a> {}\n \n // SlicePat\n+\n+#[derive(Debug, Clone)]\n+pub struct SlicePatNode(SyntaxNode);\n+\n+impl SlicePatNode {\n+    pub fn new(&self, ast: SlicePat) -> SlicePatNode {\n+        let syntax = ast.syntax().owned();\n+        SlicePatNode(syntax)\n+    }\n+    pub fn ast(&self) -> SlicePat {\n+        SlicePat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct SlicePat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1716,6 +2704,19 @@ impl<'a> AstNode<'a> for SlicePat<'a> {\n impl<'a> SlicePat<'a> {}\n \n // SliceType\n+\n+#[derive(Debug, Clone)]\n+pub struct SliceTypeNode(SyntaxNode);\n+\n+impl SliceTypeNode {\n+    pub fn new(&self, ast: SliceType) -> SliceTypeNode {\n+        let syntax = ast.syntax().owned();\n+        SliceTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> SliceType {\n+        SliceType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct SliceType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1734,6 +2735,19 @@ impl<'a> AstNode<'a> for SliceType<'a> {\n impl<'a> SliceType<'a> {}\n \n // StaticDef\n+\n+#[derive(Debug, Clone)]\n+pub struct StaticDefNode(SyntaxNode);\n+\n+impl StaticDefNode {\n+    pub fn new(&self, ast: StaticDef) -> StaticDefNode {\n+        let syntax = ast.syntax().owned();\n+        StaticDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> StaticDef {\n+        StaticDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StaticDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1755,6 +2769,19 @@ impl<'a> ast::AttrsOwner<'a> for StaticDef<'a> {}\n impl<'a> StaticDef<'a> {}\n \n // Stmt\n+\n+#[derive(Debug, Clone)]\n+pub struct StmtNode(SyntaxNode);\n+\n+impl StmtNode {\n+    pub fn new(&self, ast: Stmt) -> StmtNode {\n+        let syntax = ast.syntax().owned();\n+        StmtNode(syntax)\n+    }\n+    pub fn ast(&self) -> Stmt {\n+        Stmt::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum Stmt<'a> {\n     ExprStmt(ExprStmt<'a>),\n@@ -1780,6 +2807,19 @@ impl<'a> AstNode<'a> for Stmt<'a> {\n impl<'a> Stmt<'a> {}\n \n // StructDef\n+\n+#[derive(Debug, Clone)]\n+pub struct StructDefNode(SyntaxNode);\n+\n+impl StructDefNode {\n+    pub fn new(&self, ast: StructDef) -> StructDefNode {\n+        let syntax = ast.syntax().owned();\n+        StructDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> StructDef {\n+        StructDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StructDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1805,6 +2845,19 @@ impl<'a> StructDef<'a> {\n }\n \n // StructLit\n+\n+#[derive(Debug, Clone)]\n+pub struct StructLitNode(SyntaxNode);\n+\n+impl StructLitNode {\n+    pub fn new(&self, ast: StructLit) -> StructLitNode {\n+        let syntax = ast.syntax().owned();\n+        StructLitNode(syntax)\n+    }\n+    pub fn ast(&self) -> StructLit {\n+        StructLit::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StructLit<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1823,6 +2876,19 @@ impl<'a> AstNode<'a> for StructLit<'a> {\n impl<'a> StructLit<'a> {}\n \n // StructPat\n+\n+#[derive(Debug, Clone)]\n+pub struct StructPatNode(SyntaxNode);\n+\n+impl StructPatNode {\n+    pub fn new(&self, ast: StructPat) -> StructPatNode {\n+        let syntax = ast.syntax().owned();\n+        StructPatNode(syntax)\n+    }\n+    pub fn ast(&self) -> StructPat {\n+        StructPat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct StructPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1841,6 +2907,19 @@ impl<'a> AstNode<'a> for StructPat<'a> {\n impl<'a> StructPat<'a> {}\n \n // TokenTree\n+\n+#[derive(Debug, Clone)]\n+pub struct TokenTreeNode(SyntaxNode);\n+\n+impl TokenTreeNode {\n+    pub fn new(&self, ast: TokenTree) -> TokenTreeNode {\n+        let syntax = ast.syntax().owned();\n+        TokenTreeNode(syntax)\n+    }\n+    pub fn ast(&self) -> TokenTree {\n+        TokenTree::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TokenTree<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1859,6 +2938,19 @@ impl<'a> AstNode<'a> for TokenTree<'a> {\n impl<'a> TokenTree<'a> {}\n \n // TraitDef\n+\n+#[derive(Debug, Clone)]\n+pub struct TraitDefNode(SyntaxNode);\n+\n+impl TraitDefNode {\n+    pub fn new(&self, ast: TraitDef) -> TraitDefNode {\n+        let syntax = ast.syntax().owned();\n+        TraitDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> TraitDef {\n+        TraitDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TraitDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1879,6 +2971,19 @@ impl<'a> ast::AttrsOwner<'a> for TraitDef<'a> {}\n impl<'a> TraitDef<'a> {}\n \n // TryExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct TryExprNode(SyntaxNode);\n+\n+impl TryExprNode {\n+    pub fn new(&self, ast: TryExpr) -> TryExprNode {\n+        let syntax = ast.syntax().owned();\n+        TryExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> TryExpr {\n+        TryExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TryExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1897,6 +3002,19 @@ impl<'a> AstNode<'a> for TryExpr<'a> {\n impl<'a> TryExpr<'a> {}\n \n // TupleExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct TupleExprNode(SyntaxNode);\n+\n+impl TupleExprNode {\n+    pub fn new(&self, ast: TupleExpr) -> TupleExprNode {\n+        let syntax = ast.syntax().owned();\n+        TupleExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> TupleExpr {\n+        TupleExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TupleExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1915,6 +3033,19 @@ impl<'a> AstNode<'a> for TupleExpr<'a> {\n impl<'a> TupleExpr<'a> {}\n \n // TuplePat\n+\n+#[derive(Debug, Clone)]\n+pub struct TuplePatNode(SyntaxNode);\n+\n+impl TuplePatNode {\n+    pub fn new(&self, ast: TuplePat) -> TuplePatNode {\n+        let syntax = ast.syntax().owned();\n+        TuplePatNode(syntax)\n+    }\n+    pub fn ast(&self) -> TuplePat {\n+        TuplePat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TuplePat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1933,6 +3064,19 @@ impl<'a> AstNode<'a> for TuplePat<'a> {\n impl<'a> TuplePat<'a> {}\n \n // TupleStructPat\n+\n+#[derive(Debug, Clone)]\n+pub struct TupleStructPatNode(SyntaxNode);\n+\n+impl TupleStructPatNode {\n+    pub fn new(&self, ast: TupleStructPat) -> TupleStructPatNode {\n+        let syntax = ast.syntax().owned();\n+        TupleStructPatNode(syntax)\n+    }\n+    pub fn ast(&self) -> TupleStructPat {\n+        TupleStructPat::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TupleStructPat<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1951,6 +3095,19 @@ impl<'a> AstNode<'a> for TupleStructPat<'a> {\n impl<'a> TupleStructPat<'a> {}\n \n // TupleType\n+\n+#[derive(Debug, Clone)]\n+pub struct TupleTypeNode(SyntaxNode);\n+\n+impl TupleTypeNode {\n+    pub fn new(&self, ast: TupleType) -> TupleTypeNode {\n+        let syntax = ast.syntax().owned();\n+        TupleTypeNode(syntax)\n+    }\n+    pub fn ast(&self) -> TupleType {\n+        TupleType::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TupleType<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1969,6 +3126,19 @@ impl<'a> AstNode<'a> for TupleType<'a> {\n impl<'a> TupleType<'a> {}\n \n // TypeDef\n+\n+#[derive(Debug, Clone)]\n+pub struct TypeDefNode(SyntaxNode);\n+\n+impl TypeDefNode {\n+    pub fn new(&self, ast: TypeDef) -> TypeDefNode {\n+        let syntax = ast.syntax().owned();\n+        TypeDefNode(syntax)\n+    }\n+    pub fn ast(&self) -> TypeDef {\n+        TypeDef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TypeDef<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -1990,6 +3160,19 @@ impl<'a> ast::AttrsOwner<'a> for TypeDef<'a> {}\n impl<'a> TypeDef<'a> {}\n \n // TypeParam\n+\n+#[derive(Debug, Clone)]\n+pub struct TypeParamNode(SyntaxNode);\n+\n+impl TypeParamNode {\n+    pub fn new(&self, ast: TypeParam) -> TypeParamNode {\n+        let syntax = ast.syntax().owned();\n+        TypeParamNode(syntax)\n+    }\n+    pub fn ast(&self) -> TypeParam {\n+        TypeParam::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TypeParam<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2009,6 +3192,19 @@ impl<'a> ast::NameOwner<'a> for TypeParam<'a> {}\n impl<'a> TypeParam<'a> {}\n \n // TypeParamList\n+\n+#[derive(Debug, Clone)]\n+pub struct TypeParamListNode(SyntaxNode);\n+\n+impl TypeParamListNode {\n+    pub fn new(&self, ast: TypeParamList) -> TypeParamListNode {\n+        let syntax = ast.syntax().owned();\n+        TypeParamListNode(syntax)\n+    }\n+    pub fn ast(&self) -> TypeParamList {\n+        TypeParamList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct TypeParamList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2035,6 +3231,19 @@ impl<'a> TypeParamList<'a> {\n }\n \n // TypeRef\n+\n+#[derive(Debug, Clone)]\n+pub struct TypeRefNode(SyntaxNode);\n+\n+impl TypeRefNode {\n+    pub fn new(&self, ast: TypeRef) -> TypeRefNode {\n+        let syntax = ast.syntax().owned();\n+        TypeRefNode(syntax)\n+    }\n+    pub fn ast(&self) -> TypeRef {\n+        TypeRef::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub enum TypeRef<'a> {\n     ParenType(ParenType<'a>),\n@@ -2093,6 +3302,19 @@ impl<'a> AstNode<'a> for TypeRef<'a> {\n impl<'a> TypeRef<'a> {}\n \n // UseItem\n+\n+#[derive(Debug, Clone)]\n+pub struct UseItemNode(SyntaxNode);\n+\n+impl UseItemNode {\n+    pub fn new(&self, ast: UseItem) -> UseItemNode {\n+        let syntax = ast.syntax().owned();\n+        UseItemNode(syntax)\n+    }\n+    pub fn ast(&self) -> UseItem {\n+        UseItem::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct UseItem<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2115,6 +3337,19 @@ impl<'a> UseItem<'a> {\n }\n \n // UseTree\n+\n+#[derive(Debug, Clone)]\n+pub struct UseTreeNode(SyntaxNode);\n+\n+impl UseTreeNode {\n+    pub fn new(&self, ast: UseTree) -> UseTreeNode {\n+        let syntax = ast.syntax().owned();\n+        UseTreeNode(syntax)\n+    }\n+    pub fn ast(&self) -> UseTree {\n+        UseTree::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct UseTree<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2141,6 +3376,19 @@ impl<'a> UseTree<'a> {\n }\n \n // UseTreeList\n+\n+#[derive(Debug, Clone)]\n+pub struct UseTreeListNode(SyntaxNode);\n+\n+impl UseTreeListNode {\n+    pub fn new(&self, ast: UseTreeList) -> UseTreeListNode {\n+        let syntax = ast.syntax().owned();\n+        UseTreeListNode(syntax)\n+    }\n+    pub fn ast(&self) -> UseTreeList {\n+        UseTreeList::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct UseTreeList<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2163,6 +3411,19 @@ impl<'a> UseTreeList<'a> {\n }\n \n // WhereClause\n+\n+#[derive(Debug, Clone)]\n+pub struct WhereClauseNode(SyntaxNode);\n+\n+impl WhereClauseNode {\n+    pub fn new(&self, ast: WhereClause) -> WhereClauseNode {\n+        let syntax = ast.syntax().owned();\n+        WhereClauseNode(syntax)\n+    }\n+    pub fn ast(&self) -> WhereClause {\n+        WhereClause::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct WhereClause<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2181,6 +3442,19 @@ impl<'a> AstNode<'a> for WhereClause<'a> {\n impl<'a> WhereClause<'a> {}\n \n // WhileExpr\n+\n+#[derive(Debug, Clone)]\n+pub struct WhileExprNode(SyntaxNode);\n+\n+impl WhileExprNode {\n+    pub fn new(&self, ast: WhileExpr) -> WhileExprNode {\n+        let syntax = ast.syntax().owned();\n+        WhileExprNode(syntax)\n+    }\n+    pub fn ast(&self) -> WhileExpr {\n+        WhileExpr::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct WhileExpr<'a> {\n     syntax: SyntaxNodeRef<'a>,\n@@ -2204,6 +3478,19 @@ impl<'a> WhileExpr<'a> {\n }\n \n // Whitespace\n+\n+#[derive(Debug, Clone)]\n+pub struct WhitespaceNode(SyntaxNode);\n+\n+impl WhitespaceNode {\n+    pub fn new(&self, ast: Whitespace) -> WhitespaceNode {\n+        let syntax = ast.syntax().owned();\n+        WhitespaceNode(syntax)\n+    }\n+    pub fn ast(&self) -> Whitespace {\n+        Whitespace::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n #[derive(Debug, Clone, Copy)]\n pub struct Whitespace<'a> {\n     syntax: SyntaxNodeRef<'a>,"}, {"sha": "c61c3e80bec126d8955e791a105be53873aaf04b", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3068af79ffd23656ff2d46ac92d9192ce6c813fb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/3068af79ffd23656ff2d46ac92d9192ce6c813fb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=3068af79ffd23656ff2d46ac92d9192ce6c813fb", "patch": "@@ -7,11 +7,25 @@ the below applies to the result of this template\n \n use crate::{\n     ast,\n-    SyntaxNodeRef, AstNode,\n+    SyntaxNode, SyntaxNodeRef, AstNode,\n     SyntaxKind::*,\n };\n {% for node, methods in ast %}\n // {{ node }}\n+\n+#[derive(Debug, Clone)]\n+pub struct {{ node }}Node(SyntaxNode);\n+\n+impl {{ node }}Node {\n+    pub fn new(&self, ast: {{ node }}) -> {{ node }}Node {\n+        let syntax = ast.syntax().owned();\n+        {{ node }}Node(syntax)\n+    }\n+    pub fn ast(&self) -> {{ node }} {\n+        {{ node }}::cast(self.0.borrowed()).unwrap()\n+    }\n+}\n+\n {%- if methods.enum %}\n #[derive(Debug, Clone, Copy)]\n pub enum {{ node }}<'a> {"}]}