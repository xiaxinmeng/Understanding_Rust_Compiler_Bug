{"sha": "2932d4e63493378710bb0aa27187e8dd33260c4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MzJkNGU2MzQ5MzM3ODcxMGJiMGFhMjcxODdlOGRkMzMyNjBjNGE=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-20T07:20:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-20T07:20:46Z"}, "message": "Remove duplicated alloc vec bench push_all_move\n\npush_all_move is the same as extend", "tree": {"sha": "4bc3f159517a4f7240cd72e1299649ab8c67c791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc3f159517a4f7240cd72e1299649ab8c67c791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2932d4e63493378710bb0aa27187e8dd33260c4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPiROCRBK7hj4Ov3rIwAAdHIIABIe/6lnw6o1CRtYIu+8XWOb\nokmzL04aqudStHGCpVoUnk+bGmOfOhzPYOLVQfZdCLA4YCiTyz7TD7HYpxVHhTZM\nT9iN8XuBJxH09E9VIlsw2ssz2or4C04hdJgN8idvPkja/3oXwp2gvishvMkbVXFA\nT7Zx5qas6dh/hFGhczLs/dYPjFooyY1OzYGSIccpYAoKQTB6vxjY/4gXlAFgmr1X\ntTX1RQpFlFVpps5B0KGK7qWku/qK9SS6RiLVjxU06OmEkdZigEgeEPHLNhAGeg48\nhF/BLSbiql35Ra2r6rFxbYrkZtD8BAUeBBiSHjw9TSafkJBF/8ml0McnTSUm5RE=\n=500Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 4bc3f159517a4f7240cd72e1299649ab8c67c791\nparent 1a22a0ff93d63f738151f096434e732466b4a42e\nauthor Ivan Tham <pickfire@riseup.net> 1597908046 +0800\ncommitter GitHub <noreply@github.com> 1597908046 +0800\n\nRemove duplicated alloc vec bench push_all_move\n\npush_all_move is the same as extend"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2932d4e63493378710bb0aa27187e8dd33260c4a", "html_url": "https://github.com/rust-lang/rust/commit/2932d4e63493378710bb0aa27187e8dd33260c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2932d4e63493378710bb0aa27187e8dd33260c4a/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a22a0ff93d63f738151f096434e732466b4a42e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a22a0ff93d63f738151f096434e732466b4a42e", "html_url": "https://github.com/rust-lang/rust/commit/1a22a0ff93d63f738151f096434e732466b4a42e"}], "stats": {"total": 49, "additions": 0, "deletions": 49}, "files": [{"sha": "b91138818e556bbe78c7c84d25fdce91d8f10b0e", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2932d4e63493378710bb0aa27187e8dd33260c4a/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2932d4e63493378710bb0aa27187e8dd33260c4a/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=2932d4e63493378710bb0aa27187e8dd33260c4a", "patch": "@@ -262,55 +262,6 @@ fn bench_push_all_1000_1000(b: &mut Bencher) {\n     do_bench_push_all(b, 1000, 1000)\n }\n \n-fn do_bench_push_all_move(b: &mut Bencher, dst_len: usize, src_len: usize) {\n-    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n-    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let mut dst = dst.clone();\n-        dst.extend(src.clone());\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0010_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0100_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_1000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 1000, 1000)\n-}\n-\n fn do_bench_clone(b: &mut Bencher, src_len: usize) {\n     let src: Vec<usize> = FromIterator::from_iter(0..src_len);\n "}]}