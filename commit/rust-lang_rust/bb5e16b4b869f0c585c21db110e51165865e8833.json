{"sha": "bb5e16b4b869f0c585c21db110e51165865e8833", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNWUxNmI0Yjg2OWYwYzU4NWMyMWRiMTEwZTUxMTY1ODY1ZTg4MzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:38:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:38:51Z"}, "message": "rollup merge of #20554: huonw/mut-pattern\n\nConflicts:\n\tsrc/librustc_typeck/check/_match.rs", "tree": {"sha": "5ad6a32f888d7036f31f88928f982986467a55bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ad6a32f888d7036f31f88928f982986467a55bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb5e16b4b869f0c585c21db110e51165865e8833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5e16b4b869f0c585c21db110e51165865e8833", "html_url": "https://github.com/rust-lang/rust/commit/bb5e16b4b869f0c585c21db110e51165865e8833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb5e16b4b869f0c585c21db110e51165865e8833/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca3a8cca718d6715a73fd0931cda3135d68ebd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca3a8cca718d6715a73fd0931cda3135d68ebd1", "html_url": "https://github.com/rust-lang/rust/commit/0ca3a8cca718d6715a73fd0931cda3135d68ebd1"}, {"sha": "bf6c007760169e9c382d3700fd1cdd20037e4343", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6c007760169e9c382d3700fd1cdd20037e4343", "html_url": "https://github.com/rust-lang/rust/commit/bf6c007760169e9c382d3700fd1cdd20037e4343"}], "stats": {"total": 118, "additions": 92, "deletions": 26}, "files": [{"sha": "635e216831fead8e1c817bd604028d0164c4b79d", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -3484,8 +3484,9 @@ fn main() {\n \n ```\n \n-Patterns can also dereference pointers by using the `&`, `box` symbols,\n-as appropriate. For example, these two matches on `x: &int` are equivalent:\n+Patterns can also dereference pointers by using the `&`, `&mut` and `box`\n+symbols, as appropriate. For example, these two matches on `x: &int` are\n+equivalent:\n \n ```\n # let x = &3i;"}, {"sha": "f93a5114dcffcef74552d2fa9d686792b7fca3c7", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -230,7 +230,7 @@ impl<F> CharEq for F where F: FnMut(char) -> bool {\n impl<'a> CharEq for &'a [char] {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool {\n-        self.iter().any(|&mut m| m.matches(c))\n+        self.iter().any(|&m| { let mut m = m; m.matches(c) })\n     }\n \n     #[inline]"}, {"sha": "3c672d0fdb6fa01057a9d69af99c66ed51c8be7b", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             ast::PatBox(ref subpat) |\n-            ast::PatRegion(ref subpat) |\n+            ast::PatRegion(ref subpat, _) |\n             ast::PatIdent(_, _, Some(ref subpat)) => {\n                 let subpat_exit = self.pat(&**subpat, pred);\n                 self.add_node(pat.id, &[subpat_exit])"}, {"sha": "f2b9ecb5ec4322aa8af50c7a0d780aad0bee7682", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -473,7 +473,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             }\n         }\n \n-        ty::ty_rptr(_, ty::mt { ty, .. }) => {\n+        ty::ty_rptr(_, ty::mt { ty, mutbl }) => {\n             match ty.sty {\n                ty::ty_vec(_, Some(n)) => match ctor {\n                     &Single => {\n@@ -493,7 +493,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n \n                 _ => {\n                     assert_eq!(pats_len, 1);\n-                    ast::PatRegion(pats.nth(0).unwrap())\n+                    ast::PatRegion(pats.nth(0).unwrap(), mutbl)\n                 }\n             }\n         }\n@@ -860,7 +860,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n         ast::PatTup(ref args) =>\n             Some(args.iter().map(|p| &**p).collect()),\n \n-        ast::PatBox(ref inner) | ast::PatRegion(ref inner) =>\n+        ast::PatBox(ref inner) | ast::PatRegion(ref inner, _) =>\n             Some(vec![&**inner]),\n \n         ast::PatLit(ref expr) => {"}, {"sha": "2b8c9b532e593270e035fbac2fde45769f3a6e42", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -1235,8 +1235,10 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             }\n           }\n \n-          ast::PatBox(ref subpat) | ast::PatRegion(ref subpat) => {\n-            // @p1, ~p1, ref p1\n+          ast::PatBox(ref subpat) | ast::PatRegion(ref subpat, _) => {\n+            // box p1, &p1, &mut p1.  we can ignore the mutability of\n+            // PatRegion since that information is already contained\n+            // in the type.\n             let subcmt = try!(self.cat_deref(pat, cmt, 0, false));\n               try!(self.cat_pattern_(subcmt, &**subpat, op));\n           }"}, {"sha": "fed0931cab71d52f071ed5429356ce99ed19fbd9", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -683,7 +683,7 @@ fn any_uniq_pat(m: &[Match], col: uint) -> bool {\n }\n \n fn any_region_pat(m: &[Match], col: uint) -> bool {\n-    any_pat!(m, col, ast::PatRegion(_))\n+    any_pat!(m, col, ast::PatRegion(..))\n }\n \n fn any_irrefutable_adt_pat(tcx: &ty::ctxt, m: &[Match], col: uint) -> bool {\n@@ -1725,7 +1725,7 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let llbox = Load(bcx, val);\n             bcx = bind_irrefutable_pat(bcx, &**inner, llbox, cleanup_scope);\n         }\n-        ast::PatRegion(ref inner) => {\n+        ast::PatRegion(ref inner, _) => {\n             let loaded_val = Load(bcx, val);\n             bcx = bind_irrefutable_pat(bcx, &**inner, loaded_val, cleanup_scope);\n         }"}, {"sha": "3f0f7fd9bd3032564c37beff27febf777b1aecb3", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -3442,7 +3442,7 @@ fn create_scope_map(cx: &CrateContext,\n                 }\n             }\n \n-            ast::PatBox(ref sub_pat) | ast::PatRegion(ref sub_pat) => {\n+            ast::PatBox(ref sub_pat) | ast::PatRegion(ref sub_pat, _) => {\n                 scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);\n                 walk_pattern(cx, &**sub_pat, scope_stack, scope_map);\n             }"}, {"sha": "c5b5325e9d441ca980ce914701fb3d04ff3da955", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -192,12 +192,16 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 check_pat(pcx, &**inner, tcx.types.err);\n             }\n         }\n-        ast::PatRegion(ref inner) => {\n+        ast::PatRegion(ref inner, mutbl) => {\n             let inner_ty = fcx.infcx().next_ty_var();\n \n-            let mutbl =\n-                ty::deref(fcx.infcx().shallow_resolve(expected), true).map(|mt| mt.mutbl)\n-                                                                      .unwrap_or(ast::MutImmutable);\n+            // SNAP c894171 remove this `if`-`else` entirely after next snapshot\n+            let mutbl = if mutbl == ast::MutImmutable {\n+                ty::deref(fcx.infcx().shallow_resolve(expected), true)\n+                   .map(|mt| mt.mutbl).unwrap_or(ast::MutImmutable);\n+            } else {\n+                mutbl\n+            };\n \n             let mt = ty::mt { ty: inner_ty, mutbl: mutbl };\n             let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));"}, {"sha": "bb9a9ac430340642d193d21293af34296674a4a0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -2220,7 +2220,7 @@ fn name_from_pat(p: &ast::Pat) -> String {\n         PatTup(ref elts) => format!(\"({})\", elts.iter().map(|p| name_from_pat(&**p))\n                                             .collect::<Vec<String>>().connect(\", \")),\n         PatBox(ref p) => name_from_pat(&**p),\n-        PatRegion(ref p) => name_from_pat(&**p),\n+        PatRegion(ref p, _) => name_from_pat(&**p),\n         PatLit(..) => {\n             warn!(\"tried to get argument name from PatLit, \\\n                   which is silly in function arguments\");"}, {"sha": "727f4157c1e44b36ee01fd8afbf4c67e3082499f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -572,7 +572,7 @@ pub enum Pat_ {\n     PatStruct(Path, Vec<Spanned<FieldPat>>, bool),\n     PatTup(Vec<P<Pat>>),\n     PatBox(P<Pat>),\n-    PatRegion(P<Pat>), // reference pattern\n+    PatRegion(P<Pat>, Mutability), // reference pattern\n     PatLit(P<Expr>),\n     PatRange(P<Expr>, P<Expr>),\n     /// [a, b, ..i, y, z] is represented as:"}, {"sha": "5e03afec16cf8709e1e5a92a047e87d39ef9a6b5", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -633,7 +633,7 @@ pub fn walk_pat<F>(pat: &Pat, mut it: F) -> bool where F: FnMut(&Pat) -> bool {\n             PatEnum(_, Some(ref s)) | PatTup(ref s) => {\n                 s.iter().all(|p| walk_pat_(&**p, it))\n             }\n-            PatBox(ref s) | PatRegion(ref s) => {\n+            PatBox(ref s) | PatRegion(ref s, _) => {\n                 walk_pat_(&**s, it)\n             }\n             PatVec(ref before, ref slice, ref after) => {"}, {"sha": "1aa430c4a08299b325ec73fd42dbb8934ffa4443", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -937,7 +937,7 @@ impl<'a> MethodDef<'a> {\n                                                                          &**variant,\n                                                                          self_arg_name,\n                                                                          ast::MutImmutable);\n-                    (cx.pat(sp, ast::PatRegion(p)), idents)\n+                    (cx.pat(sp, ast::PatRegion(p, ast::MutImmutable)), idents)\n                 };\n \n                 // A single arm has form (&VariantK, &VariantK, ...) => BodyK"}, {"sha": "2999ef7ee86a68790e23d6164bac902729fc5d79", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -1257,7 +1257,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             }\n             PatTup(elts) => PatTup(elts.move_map(|x| folder.fold_pat(x))),\n             PatBox(inner) => PatBox(folder.fold_pat(inner)),\n-            PatRegion(inner) => PatRegion(folder.fold_pat(inner)),\n+            PatRegion(inner, mutbl) => PatRegion(folder.fold_pat(inner), mutbl),\n             PatRange(e1, e2) => {\n                 PatRange(folder.fold_expr(e1), folder.fold_expr(e2))\n             },"}, {"sha": "9b3df7443179edac52d31bc10ba309acf91b9df9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -3351,11 +3351,16 @@ impl<'a> Parser<'a> {\n             })\n           }\n           token::BinOp(token::And) | token::AndAnd => {\n-            // parse &pat\n+            // parse &pat and &mut pat\n             let lo = self.span.lo;\n             self.expect_and();\n+            let mutability = if self.eat_keyword(keywords::Mut) {\n+                ast::MutMutable\n+            } else {\n+                ast::MutImmutable\n+            };\n             let sub = self.parse_pat();\n-            pat = PatRegion(sub);\n+            pat = PatRegion(sub, mutability);\n             hi = self.last_span.hi;\n             return P(ast::Pat {\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "553e717f6921dcdbd60d959cb1390b10db3e4139", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -2082,8 +2082,11 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"box \"));\n                 try!(self.print_pat(&**inner));\n             }\n-            ast::PatRegion(ref inner) => {\n+            ast::PatRegion(ref inner, mutbl) => {\n                 try!(word(&mut self.s, \"&\"));\n+                if mutbl == ast::MutMutable {\n+                    try!(word(&mut self.s, \"mut \"));\n+                }\n                 try!(self.print_pat(&**inner));\n             }\n             ast::PatLit(ref e) => try!(self.print_expr(&**e)),"}, {"sha": "cc71bafbbe5e2a0d2a70b6a40963a0d14d3fc01e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -511,7 +511,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             }\n         }\n         PatBox(ref subpattern) |\n-        PatRegion(ref subpattern) => {\n+        PatRegion(ref subpattern, _) => {\n             visitor.visit_pat(&**subpattern)\n         }\n         PatIdent(_, ref pth1, ref optional_subpattern) => {"}, {"sha": "9f9a24d24269f545ebf37c8f9086e92285558fab", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -169,7 +169,8 @@ impl<T: FloatMath + FromPrimitive> Stats<T> for [T] {\n     fn sum(&self) -> T {\n         let mut partials = vec![];\n \n-        for &mut x in self.iter() {\n+        for &x in self.iter() {\n+            let mut x = x;\n             let mut j = 0;\n             // This inner loop applies `hi`/`lo` summation to each\n             // partial so that the list of partial sums remains exact."}, {"sha": "05c6c4a96557cc122d460feb2870da794b558a0f", "filename": "src/test/compile-fail/mut-pattern-internal-mutability.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let foo = &mut 1i;\n+\n+    let &mut x = foo;\n+    x += 1; //~ ERROR re-assignment of immutable variable\n+\n+    // explicitly mut-ify internals\n+    let &mut mut x = foo;\n+    x += 1;\n+\n+    // check borrowing is detected successfully\n+    let &mut ref x = foo;\n+    *foo += 1; //~ ERROR cannot assign to `*foo` because it is borrowed\n+}"}, {"sha": "74e6141a2b3ff20cc0c1852062ac1b0effc8a8df", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e16b4b869f0c585c21db110e51165865e8833/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=bb5e16b4b869f0c585c21db110e51165865e8833", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let foo = &mut 1i;\n+\n+    // (separate lines to ensure the spans are accurate)\n+\n+    // SNAP c894171 uncomment this after the next snapshot\n+    // NOTE(stage0) just in case tidy doesn't check SNAP's in tests\n+    // let &_ // ~ ERROR expected `&mut int`, found `&_`\n+    //    = foo;\n+    let &mut _ = foo;\n+\n+    let bar = &1i;\n+    let &_ = bar;\n+    let &mut _ //~ ERROR expected `&int`, found `&mut _`\n+         = bar;\n+}"}]}