{"sha": "a1286f6835ade2d46b936100acd82d44093b3b68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMjg2ZjY4MzVhZGUyZDQ2YjkzNjEwMGFjZDgyZDQ0MDkzYjNiNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T01:15:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T01:15:36Z"}, "message": "Auto merge of #48989 - ExpHP:path-prefix, r=dtolnay\n\nMake signature of Path::strip_prefix accept non-references\n\nI did this a while back but didn't submit a PR. Might as well see what happens.\n\nFixes #48390.\n\n**Note: This has the potential to cause regressions in type inference.**  However, in order for code to break, it would need to be relying on the signature to determine that a type is `&_`, while still being able to figure out what the `_` is.  I'm having a hard time imagining such a scenario in real code.", "tree": {"sha": "82dd0fe4ec36797dc742c20aebce18889332720d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82dd0fe4ec36797dc742c20aebce18889332720d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1286f6835ade2d46b936100acd82d44093b3b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1286f6835ade2d46b936100acd82d44093b3b68", "html_url": "https://github.com/rust-lang/rust/commit/a1286f6835ade2d46b936100acd82d44093b3b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1286f6835ade2d46b936100acd82d44093b3b68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "725c9b0ede0b222cd64a8dc87cbeed052ecad157", "url": "https://api.github.com/repos/rust-lang/rust/commits/725c9b0ede0b222cd64a8dc87cbeed052ecad157", "html_url": "https://github.com/rust-lang/rust/commit/725c9b0ede0b222cd64a8dc87cbeed052ecad157"}, {"sha": "7cbc93b14f0c5b39003a95f6cfbb74bd4fa04f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbc93b14f0c5b39003a95f6cfbb74bd4fa04f40", "html_url": "https://github.com/rust-lang/rust/commit/7cbc93b14f0c5b39003a95f6cfbb74bd4fa04f40"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "955a6af1ae67eaac5a78975499cf329658003667", "filename": "src/libstd/path.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1286f6835ade2d46b936100acd82d44093b3b68/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1286f6835ade2d46b936100acd82d44093b3b68/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=a1286f6835ade2d46b936100acd82d44093b3b68", "patch": "@@ -298,10 +298,9 @@ pub const MAIN_SEPARATOR: char = ::sys::path::MAIN_SEP;\n // Iterate through `iter` while it matches `prefix`; return `None` if `prefix`\n // is not a prefix of `iter`, otherwise return `Some(iter_after_prefix)` giving\n // `iter` after having exhausted `prefix`.\n-fn iter_after<A, I, J>(mut iter: I, mut prefix: J) -> Option<I>\n-    where I: Iterator<Item = A> + Clone,\n-          J: Iterator<Item = A>,\n-          A: PartialEq\n+fn iter_after<'a, 'b, I, J>(mut iter: I, mut prefix: J) -> Option<I>\n+    where I: Iterator<Item = Component<'a>> + Clone,\n+          J: Iterator<Item = Component<'b>>,\n {\n     loop {\n         let mut iter_next = iter.clone();\n@@ -1967,7 +1966,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::path::Path;\n+    /// use std::path::{Path, PathBuf};\n     ///\n     /// let path = Path::new(\"/test/haha/foo.txt\");\n     ///\n@@ -1978,17 +1977,20 @@ impl Path {\n     /// assert_eq!(path.strip_prefix(\"/test/haha/foo.txt/\"), Ok(Path::new(\"\")));\n     /// assert_eq!(path.strip_prefix(\"test\").is_ok(), false);\n     /// assert_eq!(path.strip_prefix(\"/haha\").is_ok(), false);\n+    ///\n+    /// let prefix = PathBuf::from(\"/test/\");\n+    /// assert_eq!(path.strip_prefix(prefix), Ok(Path::new(\"haha/foo.txt\")));\n     /// ```\n     #[stable(since = \"1.7.0\", feature = \"path_strip_prefix\")]\n-    pub fn strip_prefix<'a, P: ?Sized>(&'a self, base: &'a P)\n-                                       -> Result<&'a Path, StripPrefixError>\n+    pub fn strip_prefix<P>(&self, base: P)\n+                           -> Result<&Path, StripPrefixError>\n         where P: AsRef<Path>\n     {\n         self._strip_prefix(base.as_ref())\n     }\n \n-    fn _strip_prefix<'a>(&'a self, base: &'a Path)\n-                         -> Result<&'a Path, StripPrefixError> {\n+    fn _strip_prefix(&self, base: &Path)\n+                     -> Result<&Path, StripPrefixError> {\n         iter_after(self.components(), base.components())\n             .map(|c| c.as_path())\n             .ok_or(StripPrefixError(()))"}]}