{"sha": "2938be612dce1d2976bebf80812d713257a3b501", "node_id": "C_kwDOAAsO6NoAKDI5MzhiZTYxMmRjZTFkMjk3NmJlYmY4MDgxMmQ3MTMyNTdhM2I1MDE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-18T15:56:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-19T10:18:17Z"}, "message": "Correctly handle starts in block doc comments", "tree": {"sha": "5233b516f4b68779c110c4d9dcb7538d39e5b7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5233b516f4b68779c110c4d9dcb7538d39e5b7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2938be612dce1d2976bebf80812d713257a3b501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2938be612dce1d2976bebf80812d713257a3b501", "html_url": "https://github.com/rust-lang/rust/commit/2938be612dce1d2976bebf80812d713257a3b501", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2938be612dce1d2976bebf80812d713257a3b501/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7531d2fdd49966d83830a7b4596c95587b1e9573", "url": "https://api.github.com/repos/rust-lang/rust/commits/7531d2fdd49966d83830a7b4596c95587b1e9573", "html_url": "https://github.com/rust-lang/rust/commit/7531d2fdd49966d83830a7b4596c95587b1e9573"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "6a0ace04d4b618066d683a949d5f1ed4bdc74f4c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=2938be612dce1d2976bebf80812d713257a3b501", "patch": "@@ -242,6 +242,17 @@ impl Attribute {\n         }\n     }\n \n+    pub fn doc_str_and_comment_kind(&self) -> Option<(Symbol, CommentKind)> {\n+        match self.kind {\n+            AttrKind::DocComment(kind, data) => Some((data, kind)),\n+            AttrKind::Normal(ref item, _) if item.path == sym::doc => item\n+                .meta_kind()\n+                .and_then(|kind| kind.value_str())\n+                .map(|data| (data, CommentKind::Line)),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn doc_str(&self) -> Option<Symbol> {\n         match self.kind {\n             AttrKind::DocComment(.., data) => Some(data),"}, {"sha": "612ee71f350f16e31b218607a8dabdd2bdbea7d4", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=2938be612dce1d2976bebf80812d713257a3b501", "patch": "@@ -1,3 +1,4 @@\n+use crate::token::CommentKind;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, CharPos, FileName, Pos, Symbol};\n \n@@ -25,7 +26,7 @@ pub struct Comment {\n \n /// Makes a doc string more presentable to users.\n /// Used by rustdoc and perhaps other tools, but not by rustc.\n-pub fn beautify_doc_string(data: Symbol) -> Symbol {\n+pub fn beautify_doc_string(data: Symbol, kind: CommentKind) -> Symbol {\n     fn get_vertical_trim(lines: &[&str]) -> Option<(usize, usize)> {\n         let mut i = 0;\n         let mut j = lines.len();\n@@ -42,10 +43,28 @@ pub fn beautify_doc_string(data: Symbol) -> Symbol {\n         if i != 0 || j != lines.len() { Some((i, j)) } else { None }\n     }\n \n-    fn get_horizontal_trim(lines: &[&str]) -> Option<usize> {\n+    fn get_horizontal_trim(lines: &[&str], kind: CommentKind) -> Option<usize> {\n         let mut i = usize::MAX;\n         let mut first = true;\n \n+        // In case we have doc comments like `/**` or `/*!`, we want to remove stars if they are\n+        // present. However, we first need to strip the empty lines so they don't get in the middle\n+        // when we try to compute the \"horizontal trim\".\n+        let lines = if kind == CommentKind::Block {\n+            let mut i = 0;\n+            let mut j = lines.len();\n+\n+            while i < j && lines[i].trim().is_empty() {\n+                i += 1;\n+            }\n+            while j > i && lines[j - 1].trim().is_empty() {\n+                j -= 1;\n+            }\n+            &lines[i..j]\n+        } else {\n+            lines\n+        };\n+\n         for line in lines {\n             for (j, c) in line.chars().enumerate() {\n                 if j > i || !\"* \\t\".contains(c) {\n@@ -79,11 +98,13 @@ pub fn beautify_doc_string(data: Symbol) -> Symbol {\n         } else {\n             &mut lines\n         };\n-        if let Some(horizontal) = get_horizontal_trim(&lines) {\n+        if let Some(horizontal) = get_horizontal_trim(&lines, kind) {\n             changes = true;\n             // remove a \"[ \\t]*\\*\" block from each line, if possible\n             for line in lines.iter_mut() {\n-                *line = &line[horizontal + 1..];\n+                if horizontal + 1 < line.len() {\n+                    *line = &line[horizontal + 1..];\n+                }\n             }\n         }\n         if changes {"}, {"sha": "98f692a7724e2778b9410ff4e8d85ae8e59273dd", "filename": "compiler/rustc_ast/src/util/comments/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs?ref=2938be612dce1d2976bebf80812d713257a3b501", "patch": "@@ -5,7 +5,7 @@ use rustc_span::create_default_session_globals_then;\n fn test_block_doc_comment_1() {\n     create_default_session_globals_then(|| {\n         let comment = \"\\n * Test \\n **  Test\\n *   Test\\n\";\n-        let stripped = beautify_doc_string(Symbol::intern(comment));\n+        let stripped = beautify_doc_string(Symbol::intern(comment), CommentKind::Block);\n         assert_eq!(stripped.as_str(), \" Test \\n*  Test\\n   Test\");\n     })\n }\n@@ -14,7 +14,7 @@ fn test_block_doc_comment_1() {\n fn test_block_doc_comment_2() {\n     create_default_session_globals_then(|| {\n         let comment = \"\\n * Test\\n *  Test\\n\";\n-        let stripped = beautify_doc_string(Symbol::intern(comment));\n+        let stripped = beautify_doc_string(Symbol::intern(comment), CommentKind::Block);\n         assert_eq!(stripped.as_str(), \" Test\\n  Test\");\n     })\n }\n@@ -23,21 +23,21 @@ fn test_block_doc_comment_2() {\n fn test_block_doc_comment_3() {\n     create_default_session_globals_then(|| {\n         let comment = \"\\n let a: *i32;\\n *a = 5;\\n\";\n-        let stripped = beautify_doc_string(Symbol::intern(comment));\n+        let stripped = beautify_doc_string(Symbol::intern(comment), CommentKind::Block);\n         assert_eq!(stripped.as_str(), \" let a: *i32;\\n *a = 5;\");\n     })\n }\n \n #[test]\n fn test_line_doc_comment() {\n     create_default_session_globals_then(|| {\n-        let stripped = beautify_doc_string(Symbol::intern(\" test\"));\n+        let stripped = beautify_doc_string(Symbol::intern(\" test\"), CommentKind::Line);\n         assert_eq!(stripped.as_str(), \" test\");\n-        let stripped = beautify_doc_string(Symbol::intern(\"! test\"));\n+        let stripped = beautify_doc_string(Symbol::intern(\"! test\"), CommentKind::Line);\n         assert_eq!(stripped.as_str(), \"! test\");\n-        let stripped = beautify_doc_string(Symbol::intern(\"test\"));\n+        let stripped = beautify_doc_string(Symbol::intern(\"test\"), CommentKind::Line);\n         assert_eq!(stripped.as_str(), \"test\");\n-        let stripped = beautify_doc_string(Symbol::intern(\"!test\"));\n+        let stripped = beautify_doc_string(Symbol::intern(\"!test\"), CommentKind::Line);\n         assert_eq!(stripped.as_str(), \"!test\");\n     })\n }"}, {"sha": "b95fe1b0549bd68232e4dc96374d42c49e66dcf7", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2938be612dce1d2976bebf80812d713257a3b501/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=2938be612dce1d2976bebf80812d713257a3b501", "patch": "@@ -821,9 +821,9 @@ impl<'tcx> SaveContext<'tcx> {\n         let mut result = String::new();\n \n         for attr in attrs {\n-            if let Some(val) = attr.doc_str() {\n+            if let Some((val, kind)) = attr.doc_str_and_comment_kind() {\n                 // FIXME: Should save-analysis beautify doc strings itself or leave it to users?\n-                result.push_str(beautify_doc_string(val).as_str());\n+                result.push_str(beautify_doc_string(val, kind).as_str());\n                 result.push('\\n');\n             }\n         }"}, {"sha": "8e60473140a57f7183fcb556e74e99683f27ecf4", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2938be612dce1d2976bebf80812d713257a3b501/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2938be612dce1d2976bebf80812d713257a3b501/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2938be612dce1d2976bebf80812d713257a3b501", "patch": "@@ -1040,9 +1040,9 @@ impl Attributes {\n     ) -> Attributes {\n         let mut doc_strings: Vec<DocFragment> = vec![];\n         let clean_attr = |(attr, parent_module): (&ast::Attribute, Option<DefId>)| {\n-            if let Some(value) = attr.doc_str() {\n+            if let Some((value, kind)) = attr.doc_str_and_comment_kind() {\n                 trace!(\"got doc_str={:?}\", value);\n-                let value = beautify_doc_string(value);\n+                let value = beautify_doc_string(value, kind);\n                 let kind = if attr.is_doc_comment() {\n                     DocFragmentKind::SugaredDoc\n                 } else {"}]}