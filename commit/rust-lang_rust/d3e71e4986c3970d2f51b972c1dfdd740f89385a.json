{"sha": "d3e71e4986c3970d2f51b972c1dfdd740f89385a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTcxZTQ5ODZjMzk3MGQyZjUxYjk3MmMxZGZkZDc0MGY4OTM4NWE=", "commit": {"author": {"name": "James Duley", "email": "james.duley@arm.com", "date": "2018-09-21T14:13:39Z"}, "committer": {"name": "James Duley", "email": "james.duley@arm.com", "date": "2018-10-30T22:54:35Z"}, "message": "thread::unpark: Avoid notifying with mutex locked.\n\nThis means when the other thread wakes it can continue right away\ninstead of having to wait for the mutex.\n\nAlso add some comments explaining why the mutex needs to be locked in\nthe first place.", "tree": {"sha": "015f2820023fbd47b658eb30850f42ca63c5cecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015f2820023fbd47b658eb30850f42ca63c5cecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e71e4986c3970d2f51b972c1dfdd740f89385a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e71e4986c3970d2f51b972c1dfdd740f89385a", "html_url": "https://github.com/rust-lang/rust/commit/d3e71e4986c3970d2f51b972c1dfdd740f89385a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e71e4986c3970d2f51b972c1dfdd740f89385a/comments", "author": null, "committer": null, "parents": [{"sha": "e8aef7cae14bc7a56859408c90253e9bcc07fcff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8aef7cae14bc7a56859408c90253e9bcc07fcff", "html_url": "https://github.com/rust-lang/rust/commit/e8aef7cae14bc7a56859408c90253e9bcc07fcff"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "a57b8dc7237678489baf2476a7350cc6f26e7b09", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3e71e4986c3970d2f51b972c1dfdd740f89385a/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e71e4986c3970d2f51b972c1dfdd740f89385a/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d3e71e4986c3970d2f51b972c1dfdd740f89385a", "patch": "@@ -1149,8 +1149,18 @@ impl Thread {\n             _ => panic!(\"inconsistent state in unpark\"),\n         }\n \n-        // Coordinate wakeup through the mutex and a condvar notification\n-        let _lock = self.inner.lock.lock().unwrap();\n+        // There is a period between when the parked thread sets `state` to\n+        // `PARKED` (or last checked `state` in the case of a spurious wake\n+        // up) and when it actually waits on `cvar`. If we were to notify\n+        // during this period it would be ignored and then when the parked\n+        // thread went to sleep it would never wake up. Fortunately, it has\n+        // `lock` locked at this stage so we can acquire `lock` to wait until\n+        // it is ready to receive the notification.\n+        //\n+        // Releasing `lock` before the call to `notify_one` means that when the\n+        // parked thread wakes it doesn't get woken only to have to wait for us\n+        // to release `lock`.\n+        drop(self.inner.lock.lock().unwrap());\n         self.inner.cvar.notify_one()\n     }\n "}]}