{"sha": "65228686649c68f491d3b763e9dde52c23fea9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MjI4Njg2NjQ5YzY4ZjQ5MWQzYjc2M2U5ZGRlNTJjMjNmZWE5ZDc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-02T22:31:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-02T22:31:12Z"}, "message": "Rollup merge of #77251 - dtolnay:drop, r=Aaron1011\n\nBypass const_item_mutation if const's type has Drop impl\n\nFollow-up to #75573. This PR disables the const_item_mutation lint in cases that the const has a Drop impl which observes the mutation.\n\n```rust\nstruct Log { msg: &'static str }\nconst LOG: Log = Log { msg: \"\" };\nimpl Drop for Log {\n    fn drop(&mut self) { println!(\"{}\", self.msg); }\n}\n\nLOG.msg = \"wow\";  // prints \"wow\"\n```\n\nr? @Aaron1011", "tree": {"sha": "f2868cb1c2c8fb3c56235745a1232c4b76b7501a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2868cb1c2c8fb3c56235745a1232c4b76b7501a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65228686649c68f491d3b763e9dde52c23fea9d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfd6owCRBK7hj4Ov3rIwAAdHIIAH9t7NbmLZy6HGIznRbcjQYs\n7w8Iv7Xerg1iRy/SGRagWMK6MbAnqo+dGe0YKoMvZM9P7mGJHac26xJGuewyNVn5\nxqGHnhFxlaktlff6PXB3tPV7EY57CrMAS7QVIrCq6kvzx+29U7zao2FDu2TLQtbB\npGefIioWBXR0oWmnyU5Nj3wCbHxP9+42E55cSDF84GJdP7KdpdKvQDt5OPZ6pbhm\nhPXCDcNy+JaFZzj8gTkZB3d0j4R/dpaocFRXU/iC83LnXAXVQtQXzgGDUok7DiBE\n3NUNvvhPExsnt+5UdX1rRl/Fdb19ors5l/xkW88IeCrWzsyRnowQsIvZUfCveJE=\n=CN6C\n-----END PGP SIGNATURE-----\n", "payload": "tree f2868cb1c2c8fb3c56235745a1232c4b76b7501a\nparent ccc020ab42b4209940b821ba4fd0e1240d3f7561\nparent 804d159c6276025e26ade90a6ef013bda33207c3\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601677872 +0200\ncommitter GitHub <noreply@github.com> 1601677872 +0200\n\nRollup merge of #77251 - dtolnay:drop, r=Aaron1011\n\nBypass const_item_mutation if const's type has Drop impl\n\nFollow-up to #75573. This PR disables the const_item_mutation lint in cases that the const has a Drop impl which observes the mutation.\n\n```rust\nstruct Log { msg: &'static str }\nconst LOG: Log = Log { msg: \"\" };\nimpl Drop for Log {\n    fn drop(&mut self) { println!(\"{}\", self.msg); }\n}\n\nLOG.msg = \"wow\";  // prints \"wow\"\n```\n\nr? @Aaron1011\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65228686649c68f491d3b763e9dde52c23fea9d7", "html_url": "https://github.com/rust-lang/rust/commit/65228686649c68f491d3b763e9dde52c23fea9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65228686649c68f491d3b763e9dde52c23fea9d7/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc020ab42b4209940b821ba4fd0e1240d3f7561", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc020ab42b4209940b821ba4fd0e1240d3f7561", "html_url": "https://github.com/rust-lang/rust/commit/ccc020ab42b4209940b821ba4fd0e1240d3f7561"}, {"sha": "804d159c6276025e26ade90a6ef013bda33207c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/804d159c6276025e26ade90a6ef013bda33207c3", "html_url": "https://github.com/rust-lang/rust/commit/804d159c6276025e26ade90a6ef013bda33207c3"}], "stats": {"total": 116, "additions": 102, "deletions": 14}, "files": [{"sha": "b6d57b899ddab28a562e05725b82e7152e5af784", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/65228686649c68f491d3b763e9dde52c23fea9d7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65228686649c68f491d3b763e9dde52c23fea9d7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=65228686649c68f491d3b763e9dde52c23fea9d7", "patch": "@@ -31,6 +31,35 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n             None\n         }\n     }\n+\n+    fn is_const_item_without_destructor(&self, local: Local) -> Option<DefId> {\n+        let def_id = self.is_const_item(local)?;\n+        let mut any_dtor = |_tcx, _def_id| Ok(());\n+\n+        // We avoid linting mutation of a const item if the const's type has a\n+        // Drop impl. The Drop logic observes the mutation which was performed.\n+        //\n+        //     pub struct Log { msg: &'static str }\n+        //     pub const LOG: Log = Log { msg: \"\" };\n+        //     impl Drop for Log {\n+        //         fn drop(&mut self) { println!(\"{}\", self.msg); }\n+        //     }\n+        //\n+        //     LOG.msg = \"wow\";  // prints \"wow\"\n+        //\n+        // FIXME(https://github.com/rust-lang/rust/issues/77425):\n+        // Drop this exception once there is a stable attribute to suppress the\n+        // const item mutation lint for a single specific const only. Something\n+        // equivalent to:\n+        //\n+        //     #[const_mutation_allowed]\n+        //     pub const LOG: Log = Log { msg: \"\" };\n+        match self.tcx.calculate_dtor(def_id, &mut any_dtor) {\n+            Some(_) => None,\n+            None => Some(def_id),\n+        }\n+    }\n+\n     fn lint_const_item_usage(\n         &self,\n         const_item: DefId,\n@@ -59,7 +88,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n             // Assigning directly to a constant (e.g. `FOO = true;`) is a hard error,\n             // so emitting a lint would be redundant.\n             if !lhs.projection.is_empty() {\n-                if let Some(def_id) = self.is_const_item(lhs.local) {\n+                if let Some(def_id) = self.is_const_item_without_destructor(lhs.local) {\n                     // Don't lint on writes through a pointer\n                     // (e.g. `unsafe { *FOO = 0; *BAR.field = 1; }`)\n                     if !matches!(lhs.projection.last(), Some(PlaceElem::Deref)) {"}, {"sha": "c49a13f1065b5c7c9921577a5480d0c2f8d7fa00", "filename": "src/test/ui/lint/lint-const-item-mutation.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65228686649c68f491d3b763e9dde52c23fea9d7/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65228686649c68f491d3b763e9dde52c23fea9d7/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs?ref=65228686649c68f491d3b763e9dde52c23fea9d7", "patch": "@@ -9,9 +9,26 @@ impl MyStruct {\n     fn use_mut(&mut self) {}\n }\n \n+struct Mutable {\n+    msg: &'static str,\n+}\n+impl Drop for Mutable {\n+    fn drop(&mut self) {\n+        println!(\"{}\", self.msg);\n+    }\n+}\n+\n+struct Mutable2 { // this one has drop glue but not a Drop impl\n+    msg: &'static str,\n+    other: String,\n+}\n+\n const ARRAY: [u8; 1] = [25];\n const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n const RAW_PTR: *mut u8 = 1 as *mut u8;\n+const MUTABLE: Mutable = Mutable { msg: \"\" };\n+const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n+const VEC: Vec<i32> = Vec::new();\n \n fn main() {\n     ARRAY[0] = 5; //~ WARN attempting to modify\n@@ -29,4 +46,8 @@ fn main() {\n         *RAW_PTR = 0;\n         *MY_STRUCT.raw_ptr = 0;\n     }\n+\n+    MUTABLE.msg = \"wow\"; // no warning, because Drop observes the mutation\n+    MUTABLE2.msg = \"wow\"; //~ WARN attempting to modify\n+    VEC.push(0); //~ WARN taking a mutable reference to a `const` item\n }"}, {"sha": "11b5124b2d26ab956b5e18a2ad56666e545a108f", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/65228686649c68f491d3b763e9dde52c23fea9d7/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65228686649c68f491d3b763e9dde52c23fea9d7/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=65228686649c68f491d3b763e9dde52c23fea9d7", "patch": "@@ -1,45 +1,45 @@\n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:17:5\n+  --> $DIR/lint-const-item-mutation.rs:34:5\n    |\n LL |     ARRAY[0] = 5;\n    |     ^^^^^^^^^^^^\n    |\n    = note: `#[warn(const_item_mutation)]` on by default\n    = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:12:1\n+  --> $DIR/lint-const-item-mutation.rs:26:1\n    |\n LL | const ARRAY: [u8; 1] = [25];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:18:5\n+  --> $DIR/lint-const-item-mutation.rs:35:5\n    |\n LL |     MY_STRUCT.field = false;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:13:1\n+  --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:19:5\n+  --> $DIR/lint-const-item-mutation.rs:36:5\n    |\n LL |     MY_STRUCT.inner_array[0] = 'b';\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:13:1\n+  --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:20:5\n+  --> $DIR/lint-const-item-mutation.rs:37:5\n    |\n LL |     MY_STRUCT.use_mut();\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -52,38 +52,76 @@ note: mutable reference created due to call to this method\n LL |     fn use_mut(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:13:1\n+  --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:21:5\n+  --> $DIR/lint-const-item-mutation.rs:38:5\n    |\n LL |     &mut MY_STRUCT;\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:13:1\n+  --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:22:5\n+  --> $DIR/lint-const-item-mutation.rs:39:5\n    |\n LL |     (&mut MY_STRUCT).use_mut();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:13:1\n+  --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: 6 warnings emitted\n+warning: attempting to modify a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:51:5\n+   |\n+LL |     MUTABLE2.msg = \"wow\";\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:30:1\n+   |\n+LL | const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:52:5\n+   |\n+LL |     VEC.push(0);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: mutable reference created due to call to this method\n+  --> $SRC_DIR/alloc/src/vec.rs:LL:COL\n+   |\n+LL | /     pub fn push(&mut self, value: T) {\n+LL | |         // This will panic or abort if we would allocate > isize::MAX bytes\n+LL | |         // or if the length increment would overflow for zero-sized types.\n+LL | |         if self.len == self.buf.capacity() {\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:31:1\n+   |\n+LL | const VEC: Vec<i32> = Vec::new();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 8 warnings emitted\n "}]}