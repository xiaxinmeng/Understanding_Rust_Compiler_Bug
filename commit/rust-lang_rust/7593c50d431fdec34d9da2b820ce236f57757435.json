{"sha": "7593c50d431fdec34d9da2b820ce236f57757435", "node_id": "C_kwDOAAsO6NoAKDc1OTNjNTBkNDMxZmRlYzM0ZDlkYTJiODIwY2UyMzZmNTc3NTc0MzU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-02-14T03:39:32Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-18T02:47:51Z"}, "message": "bootstrap: add split-debuginfo config\n\nReplace `run-dysutil` option with more general `split-debuginfo` option\nthat works on all platforms.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "75dc9f6553f18f7f50d039e89d878fa3a65cc0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75dc9f6553f18f7f50d039e89d878fa3a65cc0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7593c50d431fdec34d9da2b820ce236f57757435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7593c50d431fdec34d9da2b820ce236f57757435", "html_url": "https://github.com/rust-lang/rust/commit/7593c50d431fdec34d9da2b820ce236f57757435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7593c50d431fdec34d9da2b820ce236f57757435/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27d9df4319bd822e64f620676543d31e9c7ae2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27d9df4319bd822e64f620676543d31e9c7ae2c", "html_url": "https://github.com/rust-lang/rust/commit/e27d9df4319bd822e64f620676543d31e9c7ae2c"}], "stats": {"total": 99, "additions": 78, "deletions": 21}, "files": [{"sha": "b3946b67b0d4e3e35c75b9dbf00e418d497cba1d", "filename": "config.toml.example", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7593c50d431fdec34d9da2b820ce236f57757435/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/7593c50d431fdec34d9da2b820ce236f57757435/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=7593c50d431fdec34d9da2b820ce236f57757435", "patch": "@@ -473,13 +473,28 @@ changelog-seen = 2\n # FIXME(#61117): Some tests fail when this option is enabled.\n #debuginfo-level-tests = 0\n \n-# Whether to run `dsymutil` on Apple platforms to gather debug info into .dSYM\n-# bundles. `dsymutil` adds time to builds for no clear benefit, and also makes\n-# it more difficult for debuggers to find debug info. The compiler currently\n-# defaults to running `dsymutil` to preserve its historical default, but when\n-# compiling the compiler itself, we skip it by default since we know it's safe\n-# to do so in that case.\n-#run-dsymutil = false\n+# Should rustc be build with split debuginfo? Default is platform dependent.\n+# Valid values are the same as those accepted by `-C split-debuginfo`\n+# (`off`/`unpacked`/`packed`).\n+#\n+# On Linux, packed split debuginfo is used by default, which splits debuginfo\n+# into a separate `rustc.dwp` file. Split DWARF on Linux results in lower\n+# linking times (there's less debuginfo for the linker to process),\n+# `split-debuginfo` is enabled on default for Linux. Unpacked debuginfo could\n+# technically work too, but the cost of running the DWARF packager is marginal\n+# and results in debuginfo being in a single file.\n+#\n+# On Apple platforms, unpacked split debuginfo is used by default. Unpacked\n+# debuginfo does not run `dsymutil`, which packages debuginfo from disparate\n+# object files into a single `.dSYM` file. `dsymutil` adds time to builds for\n+# no clear benefit, and also makes it more difficult for debuggers to find\n+# debug info. The compiler currently defaults to running `dsymutil` to preserve\n+# its historical default, but when compiling the compiler itself, we skip it by\n+# default since we know it's safe to do so in that case.\n+#\n+# On Windows platforms, packed debuginfo is the only supported option,\n+# producing a `.pdb` file.\n+#split-debuginfo = if linux { packed } else if windows { packed } else if apple { unpacked }\n \n # Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n #backtrace = true"}, {"sha": "02d4dedec5fbe2be3f6facac5141a60f7e4da768", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7593c50d431fdec34d9da2b820ce236f57757435/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7593c50d431fdec34d9da2b820ce236f57757435/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7593c50d431fdec34d9da2b820ce236f57757435", "patch": "@@ -14,7 +14,7 @@ use std::time::{Duration, Instant};\n use crate::cache::{Cache, Interned, INTERNER};\n use crate::check;\n use crate::compile;\n-use crate::config::TargetSelection;\n+use crate::config::{SplitDebuginfo, TargetSelection};\n use crate::dist;\n use crate::doc;\n use crate::flags::{Color, Subcommand};\n@@ -1365,18 +1365,14 @@ impl<'a> Builder<'a> {\n             },\n         );\n \n-        // `dsymutil` adds time to builds on Apple platforms for no clear benefit, and also makes\n-        // it more difficult for debuggers to find debug info. The compiler currently defaults to\n-        // running `dsymutil` to preserve its historical default, but when compiling the compiler\n-        // itself, we skip it by default since we know it's safe to do so in that case.\n-        // See https://github.com/rust-lang/rust/issues/79361 for more info on this flag.\n-        if target.contains(\"apple\") {\n-            if self.config.rust_run_dsymutil {\n-                rustflags.arg(\"-Csplit-debuginfo=packed\");\n-            } else {\n-                rustflags.arg(\"-Csplit-debuginfo=unpacked\");\n-            }\n+        if target.contains(\"linux\") || target.contains(\"windows\") {\n+            rustflags.arg(\"-Zunstable-options\");\n         }\n+        match self.config.rust_split_debuginfo {\n+            SplitDebuginfo::Packed => rustflags.arg(\"-Csplit-debuginfo=packed\"),\n+            SplitDebuginfo::Unpacked => rustflags.arg(\"-Csplit-debuginfo=unpacked\"),\n+            SplitDebuginfo::Off => rustflags.arg(\"-Csplit-debuginfo=off\"),\n+        };\n \n         if self.config.cmd.bless() {\n             // Bless `expect!` tests."}, {"sha": "a0c260780554d1b518cb2d210b5655905e932bd5", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7593c50d431fdec34d9da2b820ce236f57757435/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7593c50d431fdec34d9da2b820ce236f57757435/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7593c50d431fdec34d9da2b820ce236f57757435", "patch": "@@ -130,7 +130,7 @@ pub struct Config {\n     pub rust_debuginfo_level_std: u32,\n     pub rust_debuginfo_level_tools: u32,\n     pub rust_debuginfo_level_tests: u32,\n-    pub rust_run_dsymutil: bool,\n+    pub rust_split_debuginfo: SplitDebuginfo,\n     pub rust_rpath: bool,\n     pub rustc_parallel: bool,\n     pub rustc_default_linker: Option<String>,\n@@ -221,6 +221,46 @@ impl FromStr for LlvmLibunwind {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub enum SplitDebuginfo {\n+    Packed,\n+    Unpacked,\n+    Off,\n+}\n+\n+impl Default for SplitDebuginfo {\n+    fn default() -> Self {\n+        SplitDebuginfo::Off\n+    }\n+}\n+\n+impl std::str::FromStr for SplitDebuginfo {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"packed\" => Ok(SplitDebuginfo::Packed),\n+            \"unpacked\" => Ok(SplitDebuginfo::Unpacked),\n+            \"off\" => Ok(SplitDebuginfo::Off),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl SplitDebuginfo {\n+    /// Returns the default `-Csplit-debuginfo` value for the current target. See the comment for\n+    /// `rust.split-debuginfo` in `config.toml.example`.\n+    fn default_for_platform(target: &str) -> Self {\n+        if target.contains(\"apple\") {\n+            SplitDebuginfo::Unpacked\n+        } else if target.contains(\"windows\") {\n+            SplitDebuginfo::Packed\n+        } else {\n+            SplitDebuginfo::Unpacked\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n@@ -586,6 +626,7 @@ define_config! {\n         debuginfo_level_std: Option<u32> = \"debuginfo-level-std\",\n         debuginfo_level_tools: Option<u32> = \"debuginfo-level-tools\",\n         debuginfo_level_tests: Option<u32> = \"debuginfo-level-tests\",\n+        split_debuginfo: Option<String> = \"split-debuginfo\",\n         run_dsymutil: Option<bool> = \"run-dsymutil\",\n         backtrace: Option<bool> = \"backtrace\",\n         incremental: Option<bool> = \"incremental\",\n@@ -992,7 +1033,12 @@ impl Config {\n             debuginfo_level_std = rust.debuginfo_level_std;\n             debuginfo_level_tools = rust.debuginfo_level_tools;\n             debuginfo_level_tests = rust.debuginfo_level_tests;\n-            config.rust_run_dsymutil = rust.run_dsymutil.unwrap_or(false);\n+            config.rust_split_debuginfo = rust\n+                .split_debuginfo\n+                .as_deref()\n+                .map(SplitDebuginfo::from_str)\n+                .map(|v| v.expect(\"invalid value for rust.split_debuginfo\"))\n+                .unwrap_or(SplitDebuginfo::default_for_platform(&config.build.triple));\n             optimize = rust.optimize;\n             ignore_git = rust.ignore_git;\n             config.rust_new_symbol_mangling = rust.new_symbol_mangling;"}]}