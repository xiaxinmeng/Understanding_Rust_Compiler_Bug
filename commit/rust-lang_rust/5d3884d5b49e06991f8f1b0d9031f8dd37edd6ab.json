{"sha": "5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMzg4NGQ1YjQ5ZTA2OTkxZjhmMWIwZDkwMzFmOGRkMzdlZGQ2YWI=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-14T13:51:54Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-16T14:37:42Z"}, "message": "Fix Ty::Array", "tree": {"sha": "e38b29f467f7f9d412cad1a297dcd1a8b6d65df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e38b29f467f7f9d412cad1a297dcd1a8b6d65df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab", "html_url": "https://github.com/rust-lang/rust/commit/5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3262c75792d90341e21c241b2f95ef8cdccb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3262c75792d90341e21c241b2f95ef8cdccb23", "html_url": "https://github.com/rust-lang/rust/commit/2a3262c75792d90341e21c241b2f95ef8cdccb23"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "d3373644d45c9f508d5e5769cc7003afe8b5b007", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5d3884d5b49e06991f8f1b0d9031f8dd37edd6ab", "patch": "@@ -181,11 +181,12 @@ pub enum Ty {\n     /// The pointee of a string slice. Written as `str`.\n     Str,\n \n-    // An array with the given length. Written as `[T; n]`.\n-    // Array(Ty, ty::Const),\n     /// The pointee of an array slice.  Written as `[T]`.\n     Slice(Arc<Ty>),\n \n+    // An array with the given length. Written as `[T; n]`.\n+    Array(Arc<Ty>),\n+\n     /// A raw pointer. Written as `*mut T` or `*const T`\n     RawPtr(Arc<Ty>, Mutability),\n \n@@ -227,9 +228,6 @@ pub enum Ty {\n     /// A tuple type.  For example, `(i32, bool)`.\n     Tuple(Arc<[Ty]>),\n \n-    /// A array type.  For example, `[i32]`.\n-    Array(Arc<[Ty]>),\n-\n     // The projection of an associated type.  For example,\n     // `<T as Trait<..>>::N`.pub\n     // Projection(ProjectionTy),\n@@ -279,7 +277,10 @@ impl Ty {\n                 let inner_ty = Ty::from_hir(db, module, impl_block, inner);\n                 Ty::RawPtr(Arc::new(inner_ty), *mutability)\n             }\n-            TypeRef::Array(_inner) => Ty::Unknown, // TODO\n+            TypeRef::Array(inner) => {\n+                let inner_ty = Ty::from_hir(db, module, impl_block, inner);\n+                Ty::Array(Arc::new(inner_ty))\n+            }\n             TypeRef::Slice(inner) => {\n                 let inner_ty = Ty::from_hir(db, module, impl_block, inner);\n                 Ty::Slice(Arc::new(inner_ty))\n@@ -403,7 +404,7 @@ impl fmt::Display for Ty {\n             Ty::Int(t) => write!(f, \"{}\", t.ty_to_string()),\n             Ty::Float(t) => write!(f, \"{}\", t.ty_to_string()),\n             Ty::Str => write!(f, \"str\"),\n-            Ty::Slice(t) => write!(f, \"[{}]\", t),\n+            Ty::Slice(t) | Ty::Array(t) => write!(f, \"[{}]\", t),\n             Ty::RawPtr(t, m) => write!(f, \"*{}{}\", m.as_keyword_for_ptr(), t),\n             Ty::Ref(t, m) => write!(f, \"&{}{}\", m.as_keyword_for_ref(), t),\n             Ty::Never => write!(f, \"!\"),\n@@ -417,16 +418,6 @@ impl fmt::Display for Ty {\n                         .to_fmt(f)\n                 }\n             }\n-            Ty::Array(ts) => {\n-                if ts.len() == 1 {\n-                    write!(f, \"[{},]\", ts[0])\n-                } else {\n-                    join(ts.iter())\n-                        .surround_with(\"[\", \"]\")\n-                        .separator(\", \")\n-                        .to_fmt(f)\n-                }\n-            }\n             Ty::FnPtr(sig) => {\n                 join(sig.input.iter())\n                     .surround_with(\"fn(\", \")\")\n@@ -1116,12 +1107,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 Ty::Tuple(Arc::from(ty_vec))\n             },\n             Expr::Array { exprs } => {\n-                let mut ty_vec = Vec::with_capacity(exprs.len());\n-                for arg in exprs.iter() {\n-                    ty_vec.push(self.infer_expr(*arg, &Expectation::none()));\n+                let mut elem_ty = match &expected.ty {\n+                    Ty::Slice(inner) | Ty::Array(inner) => Ty::clone(&inner),\n+                    _ => self.new_type_var(),\n+                };\n+\n+                for expr in exprs.iter() {\n+                    elem_ty = self.infer_expr(*expr, &Expectation::has_type(elem_ty.clone()));\n                 }\n \n-                Ty::Array(Arc::from(ty_vec))\n+                Ty::Array(Arc::new(elem_ty))\n             },\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => Ty::Bool,"}]}