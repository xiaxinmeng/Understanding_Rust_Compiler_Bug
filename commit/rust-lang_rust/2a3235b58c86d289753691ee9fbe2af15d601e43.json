{"sha": "2a3235b58c86d289753691ee9fbe2af15d601e43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzIzNWI1OGM4NmQyODk3NTM2OTFlZTlmYmUyYWYxNWQ2MDFlNDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-04T18:25:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-04T18:25:46Z"}, "message": "rustc: Actually emit shapes", "tree": {"sha": "e5ea26d328cb3ac14206f2a42a7558367682b468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5ea26d328cb3ac14206f2a42a7558367682b468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3235b58c86d289753691ee9fbe2af15d601e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3235b58c86d289753691ee9fbe2af15d601e43", "html_url": "https://github.com/rust-lang/rust/commit/2a3235b58c86d289753691ee9fbe2af15d601e43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3235b58c86d289753691ee9fbe2af15d601e43/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b55b80ed1123fa7429ac27089a522d6d9fdaba1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b55b80ed1123fa7429ac27089a522d6d9fdaba1b", "html_url": "https://github.com/rust-lang/rust/commit/b55b80ed1123fa7429ac27089a522d6d9fdaba1b"}], "stats": {"total": 110, "additions": 59, "deletions": 51}, "files": [{"sha": "6a53767491fce3ef4c0cc747ecf72a1ec92b6e21", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3235b58c86d289753691ee9fbe2af15d601e43/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3235b58c86d289753691ee9fbe2af15d601e43/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=2a3235b58c86d289753691ee9fbe2af15d601e43", "patch": "@@ -47,30 +47,21 @@ const vec_elt_pad: int = 3;\n const vec_elt_data: int = 4;\n \n const tydesc_field_first_param: int = 0;\n-\n const tydesc_field_size: int = 1;\n-\n const tydesc_field_align: int = 2;\n-\n const tydesc_field_copy_glue: int = 3;\n-\n const tydesc_field_drop_glue: int = 4;\n-\n const tydesc_field_free_glue: int = 5;\n-\n const tydesc_field_sever_glue: int = 6;\n-\n const tydesc_field_mark_glue: int = 7;\n-\n-\n // FIXME no longer used in rustc, drop when rustboot is gone\n const tydesc_field_obj_drop_glue: int = 8;\n-\n const tydesc_field_is_stateful: int = 9;\n-\n const tydesc_field_cmp_glue: int = 10;\n-\n-const n_tydesc_fields: int = 11;\n+const tydesc_field_shape: int = 11;\n+const tydesc_field_shape_tables: int = 12;\n+const tydesc_field_n_params: int = 13;\n+const n_tydesc_fields: int = 14;\n \n const cmp_glue_op_eq: uint = 0u;\n "}, {"sha": "91218fb95ad6417fa38016127d309b47559b5da6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2a3235b58c86d289753691ee9fbe2af15d601e43/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3235b58c86d289753691ee9fbe2af15d601e43/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2a3235b58c86d289753691ee9fbe2af15d601e43", "patch": "@@ -895,7 +895,8 @@ fn linearize_ty_params(cx: &@block_ctxt, t: &ty::t) ->\n \n fn trans_stack_local_derived_tydesc(cx: &@block_ctxt, llsz: ValueRef,\n                                     llalign: ValueRef, llroottydesc: ValueRef,\n-                                    llparamtydescs: ValueRef) -> ValueRef {\n+                                    llparamtydescs: ValueRef,\n+                                    n_params: uint) -> ValueRef {\n     let llmyroottydesc = alloca(cx, bcx_ccx(cx).tydesc_type);\n     // By convention, desc 0 is the root descriptor.\n \n@@ -904,11 +905,14 @@ fn trans_stack_local_derived_tydesc(cx: &@block_ctxt, llsz: ValueRef,\n     // Store a pointer to the rest of the descriptors.\n \n     let llfirstparam = cx.build.GEP(llparamtydescs, ~[C_int(0), C_int(0)]);\n-    cx.build.Store(llfirstparam,\n-                   cx.build.GEP(llmyroottydesc, ~[C_int(0), C_int(0)]));\n-    cx.build.Store(llsz, cx.build.GEP(llmyroottydesc, ~[C_int(0), C_int(1)]));\n-    cx.build.Store(llalign,\n-                   cx.build.GEP(llmyroottydesc, ~[C_int(0), C_int(2)]));\n+    store_inbounds(cx, llfirstparam, llmyroottydesc,\n+                   ~[C_int(0), C_int(abi::tydesc_field_first_param)]);\n+    store_inbounds(cx, C_uint(n_params), llmyroottydesc,\n+                   ~[C_int(0), C_int(abi::tydesc_field_n_params)]);\n+    store_inbounds(cx, llsz, llmyroottydesc,\n+                   ~[C_int(0), C_int(abi::tydesc_field_size)]);\n+    store_inbounds(cx, llalign, llmyroottydesc,\n+                   ~[C_int(0), C_int(abi::tydesc_field_align)]);\n     ret llmyroottydesc;\n }\n \n@@ -964,7 +968,8 @@ fn get_derived_tydesc(cx: &@block_ctxt, t: &ty::t, escapes: bool,\n         v = td_val;\n     } else {\n         let llparamtydescs =\n-            alloca(bcx, T_array(T_ptr(bcx_ccx(bcx).tydesc_type), n_params));\n+            alloca(bcx, T_array(T_ptr(bcx_ccx(bcx).tydesc_type),\n+                                n_params + 1u));\n         let i = 0;\n         for td: ValueRef  in tys.descs {\n             let tdp = bcx.build.GEP(llparamtydescs, ~[C_int(0), C_int(i)]);\n@@ -973,7 +978,7 @@ fn get_derived_tydesc(cx: &@block_ctxt, t: &ty::t, escapes: bool,\n         }\n         v =\n             trans_stack_local_derived_tydesc(bcx, sz.val, align.val, root,\n-                                             llparamtydescs);\n+                                             llparamtydescs, n_params);\n     }\n     bcx.fcx.derived_tydescs.insert(t, {lltydesc: v, escapes: escapes});\n     ret rslt(cx, v);\n@@ -1191,20 +1196,28 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n               none. { ccx.stats.n_null_glues += 1u; C_null(cmp_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n-        let  // copy_glue\n-             // drop_glue\n-             // free_glue\n-             // sever_glue\n-             // mark_glue\n-             // obj_drop_glue\n-             // is_stateful\n-            tydesc =\n+\n+        let shape = shape::shape_of(ccx, pair.key);\n+        let shape_tables =\n+            llvm::LLVMConstPointerCast(ccx.shape_cx.llshapetables,\n+                                       T_ptr(T_i8()));\n+\n+        let tydesc =\n             C_named_struct(ccx.tydesc_type,\n-                           ~[C_null(T_ptr(T_ptr(ccx.tydesc_type))), ti.size,\n-                             ti.align, copy_glue, drop_glue, free_glue,\n-                             C_null(glue_fn_ty), C_null(glue_fn_ty),\n-                             C_null(glue_fn_ty), C_null(glue_fn_ty),\n-                             cmp_glue]); // cmp_glue\n+                           ~[C_null(T_ptr(T_ptr(ccx.tydesc_type))),\n+                             ti.size,               // size\n+                             ti.align,              // align\n+                             copy_glue,             // copy_glue\n+                             drop_glue,             // drop_glue\n+                             free_glue,             // free_glue\n+                             C_null(glue_fn_ty),    // sever_glue\n+                             C_null(glue_fn_ty),    // mark_glue\n+                             C_null(glue_fn_ty),    // obj_drop_glue\n+                             C_null(glue_fn_ty),    // is_stateful\n+                             cmp_glue,              // cmp_glue\n+                             C_shape(ccx, shape),   // shape\n+                             shape_tables,          // shape_tables\n+                             C_int(0)]);            // n_params\n \n         let gvar = ti.tydesc;\n         llvm::LLVMSetInitializer(gvar, tydesc);\n@@ -2288,16 +2301,17 @@ fn call_cmp_glue(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: &ty::t,\n     let ti = none[@tydesc_info];\n     let r = get_tydesc(cx, t, false, ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_cmp_glue, ti);\n+    let lltydesc = r.val;\n     let lltydescs =\n-        r.bcx.build.GEP(r.val,\n+        r.bcx.build.GEP(lltydesc,\n                         ~[C_int(0), C_int(abi::tydesc_field_first_param)]);\n     lltydescs = r.bcx.build.Load(lltydescs);\n \n     let llfn;\n     alt ti {\n       none. {\n         let llfnptr =\n-            r.bcx.build.GEP(r.val,\n+            r.bcx.build.GEP(lltydesc,\n                             ~[C_int(0), C_int(abi::tydesc_field_cmp_glue)]);\n         llfn = r.bcx.build.Load(llfnptr);\n       }\n@@ -2306,7 +2320,7 @@ fn call_cmp_glue(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: &ty::t,\n \n     let llcmpresultptr = alloca(r.bcx, T_i1());\n     let llargs: ValueRef[] =\n-        ~[llcmpresultptr, r.bcx.fcx.lltaskptr, C_null(T_ptr(T_nil())),\n+        ~[llcmpresultptr, r.bcx.fcx.lltaskptr, lltydesc,\n           lltydescs, llrawlhsptr, llrawrhsptr, llop];\n     r.bcx.build.Call(llfn, llargs);\n     ret rslt(r.bcx, r.bcx.build.Load(llcmpresultptr));\n@@ -8000,8 +8014,9 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n     trans_mod(cx, crate.node.module);\n     create_crate_map(ccx);\n     emit_tydescs(ccx);\n-    // Translate the metadata:\n+    shape::gen_shape_tables(ccx);\n \n+    // Translate the metadata.\n     write_metadata(cx.ccx, crate);\n     if ccx.sess.get_opts().stats {\n         log_err \"--- trans stats ---\";"}, {"sha": "e0b26a97c9fcb63ece38be4abc0914ff024070bb", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a3235b58c86d289753691ee9fbe2af15d601e43/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3235b58c86d289753691ee9fbe2af15d601e43/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=2a3235b58c86d289753691ee9fbe2af15d601e43", "patch": "@@ -597,22 +597,13 @@ fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n         T_ptr(T_fn(~[T_ptr(T_nil()), taskptr_type, T_ptr(T_nil()), tydescpp,\n                      pvoid], T_void()));\n     let cmp_glue_fn_ty =\n-        T_ptr(T_fn(~[T_ptr(T_i1()), taskptr_type, T_ptr(T_nil()), tydescpp,\n+        T_ptr(T_fn(~[T_ptr(T_i1()), taskptr_type, T_ptr(tydesc), tydescpp,\n                      pvoid, pvoid, T_i8()], T_void()));\n \n-    let  // first_param\n-         // size\n-         // align\n-         // copy_glue\n-         // drop_glue\n-         // free_glue\n-         // sever_glue\n-         // mark_glue\n-         // obj_drop_glue\n-         // is_stateful\n-        elems =\n+    let elems =\n         ~[tydescpp, T_int(), T_int(), glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-          glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty];\n+          glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n+          T_ptr(T_i8()), T_ptr(T_i8()), T_int()];\n     set_struct_body(tydesc, elems);\n     ret tydesc;\n }\n@@ -874,3 +865,14 @@ fn C_bytes(bytes : &u8[]) -> ValueRef {\n                               ivec::len(bytes), False);\n }\n \n+fn C_shape(ccx : &@crate_ctxt, bytes : &u8[]) -> ValueRef {\n+    let llshape = C_bytes(bytes);\n+    let llglobal = llvm::LLVMAddGlobal(ccx.llmod, val_ty(llshape),\n+                                       str::buf(ccx.names.next(\"shape\")));\n+    llvm::LLVMSetInitializer(llglobal, llshape);\n+    llvm::LLVMSetGlobalConstant(llglobal, True);\n+    llvm::LLVMSetLinkage(llglobal,\n+                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    ret llvm::LLVMConstPointerCast(llglobal, T_ptr(T_i8()));\n+}\n+"}]}