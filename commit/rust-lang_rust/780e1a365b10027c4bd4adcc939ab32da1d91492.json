{"sha": "780e1a365b10027c4bd4adcc939ab32da1d91492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MGUxYTM2NWIxMDAyN2M0YmQ0YWRjYzkzOWFiMzJkYTFkOTE0OTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T15:38:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T15:38:14Z"}, "message": "somewhat better name", "tree": {"sha": "549695a76379384898d49fc8eeb41d08ea55ef93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549695a76379384898d49fc8eeb41d08ea55ef93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/780e1a365b10027c4bd4adcc939ab32da1d91492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/780e1a365b10027c4bd4adcc939ab32da1d91492", "html_url": "https://github.com/rust-lang/rust/commit/780e1a365b10027c4bd4adcc939ab32da1d91492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/780e1a365b10027c4bd4adcc939ab32da1d91492/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb55111c209a9d3a6249cab35308a506b7f22d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb55111c209a9d3a6249cab35308a506b7f22d53", "html_url": "https://github.com/rust-lang/rust/commit/bb55111c209a9d3a6249cab35308a506b7f22d53"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "347bcf27db3550f2418757c1ac9659ae3c62153c", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=780e1a365b10027c4bd4adcc939ab32da1d91492", "patch": "@@ -165,7 +165,11 @@ impl Resolver {\n \n     /// Returns the fully resolved path if we were able to resolve it.\n     /// otherwise returns `PerNs::none`\n-    pub(crate) fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> PerNs<Resolution> {\n+    pub(crate) fn resolve_path_without_assoc_items(\n+        &self,\n+        db: &impl HirDatabase,\n+        path: &Path,\n+    ) -> PerNs<Resolution> {\n         // into_fully_resolved() returns the fully resolved path or PerNs::none() otherwise\n         self.resolve_path_segments(db, path).into_fully_resolved()\n     }"}, {"sha": "63ec5931490b586cb83958057847a909b8db620c", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=780e1a365b10027c4bd4adcc939ab32da1d91492", "patch": "@@ -277,7 +277,7 @@ impl SourceAnalyzer {\n         db: &impl HirDatabase,\n         path: &crate::Path,\n     ) -> PerNs<crate::Resolution> {\n-        self.resolver.resolve_path(db, path)\n+        self.resolver.resolve_path_without_assoc_items(db, path)\n     }\n \n     pub fn resolve_path(&self, db: &impl HirDatabase, path: &ast::Path) -> Option<PathResolution> {\n@@ -294,7 +294,7 @@ impl SourceAnalyzer {\n             }\n         }\n         let hir_path = crate::Path::from_ast(path)?;\n-        let res = self.resolver.resolve_path(db, &hir_path);\n+        let res = self.resolver.resolve_path_without_assoc_items(db, &hir_path);\n         let res = res.clone().take_types().or_else(|| res.take_values())?;\n         let res = match res {\n             crate::Resolution::Def(it) => PathResolution::Def(it),"}, {"sha": "6aa727ea10453e00e9350a6011cc573c9bb205be", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=780e1a365b10027c4bd4adcc939ab32da1d91492", "patch": "@@ -610,23 +610,26 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             None => return (Ty::Unknown, None),\n         };\n         let resolver = &self.resolver;\n-        let typable: Option<TypableDef> = match resolver.resolve_path(self.db, &path).take_types() {\n-            Some(Resolution::Def(def)) => def.into(),\n-            Some(Resolution::LocalBinding(..)) => {\n-                // this cannot happen\n-                log::error!(\"path resolved to local binding in type ns\");\n-                return (Ty::Unknown, None);\n-            }\n-            Some(Resolution::GenericParam(..)) => {\n-                // generic params can't be used in struct literals\n-                return (Ty::Unknown, None);\n-            }\n-            Some(Resolution::SelfType(..)) => {\n-                // FIXME this is allowed in an impl for a struct, handle this\n-                return (Ty::Unknown, None);\n-            }\n-            None => return (Ty::Unknown, None),\n-        };\n+        let typable: Option<TypableDef> =\n+            // FIXME: this should resolve assoc items as well, see this example:\n+            // https://play.rust-lang.org/?gist=087992e9e22495446c01c0d4e2d69521\n+            match resolver.resolve_path_without_assoc_items(self.db, &path).take_types() {\n+                Some(Resolution::Def(def)) => def.into(),\n+                Some(Resolution::LocalBinding(..)) => {\n+                    // this cannot happen\n+                    log::error!(\"path resolved to local binding in type ns\");\n+                    return (Ty::Unknown, None);\n+                }\n+                Some(Resolution::GenericParam(..)) => {\n+                    // generic params can't be used in struct literals\n+                    return (Ty::Unknown, None);\n+                }\n+                Some(Resolution::SelfType(..)) => {\n+                    // FIXME this is allowed in an impl for a struct, handle this\n+                    return (Ty::Unknown, None);\n+                }\n+                None => return (Ty::Unknown, None),\n+            };\n         let def = match typable {\n             None => return (Ty::Unknown, None),\n             Some(it) => it,"}, {"sha": "26c213a416878eff356accd1cd7f9bdaeedc7c52", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780e1a365b10027c4bd4adcc939ab32da1d91492/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=780e1a365b10027c4bd4adcc939ab32da1d91492", "patch": "@@ -65,7 +65,7 @@ impl Ty {\n \n     pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Self {\n         // Resolve the path (in type namespace)\n-        let resolution = resolver.resolve_path(db, path).take_types();\n+        let resolution = resolver.resolve_path_without_assoc_items(db, path).take_types();\n \n         let def = match resolution {\n             Some(Resolution::Def(def)) => def,\n@@ -216,7 +216,7 @@ impl TraitRef {\n         path: &Path,\n         explicit_self_ty: Option<Ty>,\n     ) -> Option<Self> {\n-        let resolved = match resolver.resolve_path(db, &path).take_types()? {\n+        let resolved = match resolver.resolve_path_without_assoc_items(db, &path).take_types()? {\n             Resolution::Def(ModuleDef::Trait(tr)) => tr,\n             _ => return None,\n         };"}]}