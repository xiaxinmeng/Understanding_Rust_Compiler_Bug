{"sha": "40b6bccd6431e5d3032279ec5f6d269cacc7fe9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYjZiY2NkNjQzMWU1ZDMwMzIyNzllYzVmNmQyNjljYWNjN2ZlOWI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-22T11:01:55Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-22T15:02:59Z"}, "message": "no need to polymorphize", "tree": {"sha": "af8c9b13e3cfbc20bedff793f257b0e2fc8c4a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af8c9b13e3cfbc20bedff793f257b0e2fc8c4a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40b6bccd6431e5d3032279ec5f6d269cacc7fe9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40b6bccd6431e5d3032279ec5f6d269cacc7fe9b", "html_url": "https://github.com/rust-lang/rust/commit/40b6bccd6431e5d3032279ec5f6d269cacc7fe9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40b6bccd6431e5d3032279ec5f6d269cacc7fe9b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9c5fb4cc499bc828422e32689c8f098542f821", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9c5fb4cc499bc828422e32689c8f098542f821", "html_url": "https://github.com/rust-lang/rust/commit/6a9c5fb4cc499bc828422e32689c8f098542f821"}], "stats": {"total": 1, "additions": 0, "deletions": 1}, "files": [{"sha": "0b5f27fc17a72fd12562c1e304874e7edcc437e1", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40b6bccd6431e5d3032279ec5f6d269cacc7fe9b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b6bccd6431e5d3032279ec5f6d269cacc7fe9b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=40b6bccd6431e5d3032279ec5f6d269cacc7fe9b", "patch": "@@ -1197,7 +1197,6 @@ fn collect_miri<'tcx>(\n             }\n         }\n         GlobalAlloc::Function(fn_instance) => {\n-            let fn_instance = fn_instance.polymorphize(tcx);\n             if should_codegen_locally(tcx, &fn_instance) {\n                 trace!(\"collecting {:?} with {:#?}\", alloc_id, fn_instance);\n                 output.push(create_fn_mono_item(tcx, fn_instance, DUMMY_SP));"}]}