{"sha": "28af355b9ffa7fdd1761caa4dd323eacd68ee0ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YWYzNTViOWZmYTdmZGQxNzYxY2FhNGRkMzIzZWFjZDY4ZWUwZWQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-08T20:15:18Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-14T11:03:23Z"}, "message": "BTreeMap: improve gdb introspection of BTreeMap with ZST keys or values", "tree": {"sha": "fbf5529cc0a18254b7c5789ffdf679d9624fd0b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf5529cc0a18254b7c5789ffdf679d9624fd0b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed", "html_url": "https://github.com/rust-lang/rust/commit/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5565241f65cf402c3dbcb55dd492f172c473d4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5565241f65cf402c3dbcb55dd492f172c473d4ce", "html_url": "https://github.com/rust-lang/rust/commit/5565241f65cf402c3dbcb55dd492f172c473d4ce"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "6864cd06cb7bb976ff715a3fb7bed2ef7a0999d7", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=28af355b9ffa7fdd1761caa4dd323eacd68ee0ed", "patch": "@@ -87,7 +87,6 @@ impl<K, V> LeafNode<K, V> {\n #[repr(C)]\n // gdb_providers.py uses this type name for introspection.\n struct InternalNode<K, V> {\n-    // gdb_providers.py uses this field name for introspection.\n     data: LeafNode<K, V>,\n \n     /// The pointers to the children of this node. `len + 1` of these are considered"}, {"sha": "eec3027085c91290b67805b535db184bce259d3b", "filename": "src/etc/gdb_providers.py", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed/src%2Fetc%2Fgdb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed/src%2Fetc%2Fgdb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_providers.py?ref=28af355b9ffa7fdd1761caa4dd323eacd68ee0ed", "patch": "@@ -229,8 +229,8 @@ def cast_to_internal(node):\n                 yield child\n         if i < length:\n             # Avoid \"Cannot perform pointer math on incomplete type\" on zero-sized arrays.\n-            key = keys[i][\"value\"][\"value\"] if keys.type.sizeof > 0 else None\n-            val = vals[i][\"value\"][\"value\"] if vals.type.sizeof > 0 else None\n+            key = keys[i][\"value\"][\"value\"] if keys.type.sizeof > 0 else \"()\"\n+            val = vals[i][\"value\"][\"value\"] if vals.type.sizeof > 0 else \"()\"\n             yield key, val\n \n \n@@ -242,11 +242,8 @@ def children_of_map(map):\n             root = root.cast(gdb.lookup_type(root.type.name[21:-1]))\n         boxed_root_node = root[\"node\"]\n         height = root[\"height\"]\n-        for i, (key, val) in enumerate(children_of_node(boxed_root_node, height)):\n-            if key is not None:\n-                yield \"key{}\".format(i), key\n-            if val is not None:\n-                yield \"val{}\".format(i), val\n+        for child in children_of_node(boxed_root_node, height):\n+            yield child\n \n \n class StdBTreeSetProvider:\n@@ -258,8 +255,8 @@ def to_string(self):\n \n     def children(self):\n         inner_map = self.valobj[\"map\"]\n-        for child in children_of_map(inner_map):\n-            yield child\n+        for i, (child, _) in enumerate(children_of_map(inner_map)):\n+            yield \"[{}]\".format(i), child\n \n     @staticmethod\n     def display_hint():\n@@ -274,8 +271,9 @@ def to_string(self):\n         return \"BTreeMap(size={})\".format(self.valobj[\"length\"])\n \n     def children(self):\n-        for child in children_of_map(self.valobj):\n-            yield child\n+        for i, (key, val) in enumerate(children_of_map(self.valobj)):\n+            yield \"key{}\".format(i), key\n+            yield \"val{}\".format(i), val\n \n     @staticmethod\n     def display_hint():"}, {"sha": "cc2a3a345102aace498beff496b51269d4145ced", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28af355b9ffa7fdd1761caa4dd323eacd68ee0ed/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=28af355b9ffa7fdd1761caa4dd323eacd68ee0ed", "patch": "@@ -34,20 +34,26 @@\n // gdb-check:$6 = BTreeMap(size=15) = {[0] = pretty_std_collections::MyLeafNode (0), [...]}\n // (abbreviated because it's boring but we need enough elements to include internal nodes)\n \n-// gdb-command: print zst_btree_map\n-// gdb-check:$7 = BTreeMap(size=1)\n+// gdb-command: print zst_key_btree_map\n+// gdb-check:$7 = BTreeMap(size=1) = {[()] = 1}\n+\n+// gdb-command: print zst_val_btree_map\n+// gdb-check:$8 = BTreeMap(size=1) = {[1] = ()}\n+\n+// gdb-command: print zst_key_val_btree_map\n+// gdb-check:$9 = BTreeMap(size=1) = {[()] = ()}\n \n // gdb-command: print vec_deque\n-// gdb-check:$8 = VecDeque(size=3) = {5, 3, 7}\n+// gdb-check:$10 = VecDeque(size=3) = {5, 3, 7}\n \n // gdb-command: print vec_deque2\n-// gdb-check:$9 = VecDeque(size=7) = {2, 3, 4, 5, 6, 7, 8}\n+// gdb-check:$11 = VecDeque(size=7) = {2, 3, 4, 5, 6, 7, 8}\n \n // gdb-command: print hash_map\n-// gdb-check:$10 = HashMap(size=4) = {[1] = 10, [2] = 20, [3] = 30, [4] = 40}\n+// gdb-check:$12 = HashMap(size=4) = {[1] = 10, [2] = 20, [3] = 30, [4] = 40}\n \n // gdb-command: print hash_set\n-// gdb-check:$11 = HashSet(size=4) = {1, 2, 3, 4}\n+// gdb-check:$13 = HashSet(size=4) = {1, 2, 3, 4}\n \n // === LLDB TESTS ==================================================================================\n \n@@ -114,8 +120,14 @@ fn main() {\n         nasty_btree_map.insert(i, MyLeafNode(i));\n     }\n \n-    let mut zst_btree_map: BTreeMap<(), ()> = BTreeMap::new();\n-    zst_btree_map.insert((), ());\n+    let mut zst_key_btree_map: BTreeMap<(), i32> = BTreeMap::new();\n+    zst_key_btree_map.insert((), 1);\n+\n+    let mut zst_val_btree_map: BTreeMap<i32, ()> = BTreeMap::new();\n+    zst_val_btree_map.insert(1, ());\n+\n+    let mut zst_key_val_btree_map: BTreeMap<(), ()> = BTreeMap::new();\n+    zst_key_val_btree_map.insert((), ());\n \n     // VecDeque\n     let mut vec_deque = VecDeque::new();"}]}