{"sha": "a804e38ddece7a3b1d8a1d5d4e197f747056ac49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MDRlMzhkZGVjZTdhM2IxZDhhMWQ1ZDRlMTk3Zjc0NzA1NmFjNDk=", "commit": {"author": {"name": "oliver", "email": "16816606+o752d@users.noreply.github.com", "date": "2020-11-23T02:47:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-23T02:47:45Z"}, "message": "doc typo\n\nplus a small edit for clarity", "tree": {"sha": "625e0ad44f8714654d95880374819c76128eaf84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625e0ad44f8714654d95880374819c76128eaf84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a804e38ddece7a3b1d8a1d5d4e197f747056ac49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfuyLRCRBK7hj4Ov3rIwAAdHIIAA4vEe1W++iKP29S3wFgFlq4\nbAOub+Hi05sYnnBueWZJOuFacQCu4UDcgN8WCEigtPazhqjWh6v1VUrjtrhGH2wB\nB+X/mdInQ87EUWFdWCrjaMygagNIvBfpCzVZTF3008WafyK/Ffmo2BT2frQsXB17\n80DlbkH2NM9eGG0yX5DS+onMmxAAtXJRJWpDGsPhrOJMuRCzaWEGqslIfn5hz26q\nSFjbVbz7fJJaBpPgsPhj9OnWFGnr2/KdzTJ9RltqogpwUKKOPr8ljk/9jYXDVKaG\nHSaUCERFpuAuYckwiiIYaq2AFoeEQosXzQiwapQUjX3MqxDMYfiuXRpUTAJZLBY=\n=4o8N\n-----END PGP SIGNATURE-----\n", "payload": "tree 625e0ad44f8714654d95880374819c76128eaf84\nparent 32da90b431919eedb3e281a91caea063ba4edb77\nauthor oliver <16816606+o752d@users.noreply.github.com> 1606099665 +0000\ncommitter GitHub <noreply@github.com> 1606099665 +0000\n\ndoc typo\n\nplus a small edit for clarity"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a804e38ddece7a3b1d8a1d5d4e197f747056ac49", "html_url": "https://github.com/rust-lang/rust/commit/a804e38ddece7a3b1d8a1d5d4e197f747056ac49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a804e38ddece7a3b1d8a1d5d4e197f747056ac49/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32da90b431919eedb3e281a91caea063ba4edb77", "url": "https://api.github.com/repos/rust-lang/rust/commits/32da90b431919eedb3e281a91caea063ba4edb77", "html_url": "https://github.com/rust-lang/rust/commit/32da90b431919eedb3e281a91caea063ba4edb77"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "eb32cef24a1ea5b735057ee571d5d1945f1ba6a2", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a804e38ddece7a3b1d8a1d5d4e197f747056ac49/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804e38ddece7a3b1d8a1d5d4e197f747056ac49/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=a804e38ddece7a3b1d8a1d5d4e197f747056ac49", "patch": "@@ -1551,12 +1551,12 @@ where\n     pred: F,\n     inner: DrainFilterInner<'a, K, V>,\n }\n-/// Most of the implementation of DrainFilter, independent of the type\n+/// Most of the implementation of DrainFilter are generic over the type\n /// of the predicate, thus also serving for BTreeSet::DrainFilter.\n pub(super) struct DrainFilterInner<'a, K: 'a, V: 'a> {\n     /// Reference to the length field in the borrowed map, updated live.\n     length: &'a mut usize,\n-    /// Burried reference to the root field in the borrowed map.\n+    /// Buried reference to the root field in the borrowed map.\n     /// Wrapped in `Option` to allow drop handler to `take` it.\n     dormant_root: Option<DormantMutRef<'a, Root<K, V>>>,\n     /// Contains a leaf edge preceding the next element to be returned, or the last leaf edge."}]}