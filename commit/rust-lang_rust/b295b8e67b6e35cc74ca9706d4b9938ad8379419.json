{"sha": "b295b8e67b6e35cc74ca9706d4b9938ad8379419", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOTViOGU2N2I2ZTM1Y2M3NGNhOTcwNmQ0Yjk5MzhhZDgzNzk0MTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-25T02:39:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-25T02:39:36Z"}, "message": "Rollup merge of #80274 - pierwill:lintlevelsource, r=petrochenkov\n\nRename rustc_middle::lint::LintSource\n\nRename [`rustc_middle::lint::LintSource`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/lint/enum.LintSource.html) to `rustc_middle::lint::LintLevelSource`.\n\nThis enum represents the source of a *lint level*, not a lint. This should improve code readability.\n\nUpdate: Also documents `rustc_middle::lint::LevelSource` to clarify.", "tree": {"sha": "1d6601a68f69d71b2b63d8592f77e649d9407c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6601a68f69d71b2b63d8592f77e649d9407c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b295b8e67b6e35cc74ca9706d4b9938ad8379419", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5VDpCRBK7hj4Ov3rIwAAdHIIAEFMXH9/FaDM2XmgmTisvptE\n38JuTtSx97+LtMP1husczVgJzqHG8vKAK7YyBmsdx537D86kWXWb5vsKZvxxJNfU\nm5rwNEx+UiaSrq0OVPv5/1hdqW9Q/m/RYlEBxrJ1VQWANC+TLiWJ7UXrBipf7RvX\nixQyuj9g/LTAqHC4xB+ZOQI1uDUR0cnabdqicCh5pqD6vQmFm7FnGRgURZuJkMmJ\nDOjW2L9KNbSvPB6GK4a4bMHpkjPI1Xd3W9htb1nvHJB6iK2HtonQ8gXweznuUyyk\nqZa4ygSKSYWelOOdpj1nzalwR4xCP6NWtQMQtJpUR8WM8FM5hmH18M1v0+yZBzw=\n=2B0E\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d6601a68f69d71b2b63d8592f77e649d9407c0e\nparent 299c2fc69554998e8991715d09a611376a5b9cf3\nparent d3900d3775c665237b83ea87e01838da9cf0da87\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608863976 +0100\ncommitter GitHub <noreply@github.com> 1608863976 +0100\n\nRollup merge of #80274 - pierwill:lintlevelsource, r=petrochenkov\n\nRename rustc_middle::lint::LintSource\n\nRename [`rustc_middle::lint::LintSource`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/lint/enum.LintSource.html) to `rustc_middle::lint::LintLevelSource`.\n\nThis enum represents the source of a *lint level*, not a lint. This should improve code readability.\n\nUpdate: Also documents `rustc_middle::lint::LevelSource` to clarify.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b295b8e67b6e35cc74ca9706d4b9938ad8379419", "html_url": "https://github.com/rust-lang/rust/commit/b295b8e67b6e35cc74ca9706d4b9938ad8379419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b295b8e67b6e35cc74ca9706d4b9938ad8379419/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299c2fc69554998e8991715d09a611376a5b9cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/299c2fc69554998e8991715d09a611376a5b9cf3", "html_url": "https://github.com/rust-lang/rust/commit/299c2fc69554998e8991715d09a611376a5b9cf3"}, {"sha": "d3900d3775c665237b83ea87e01838da9cf0da87", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3900d3775c665237b83ea87e01838da9cf0da87", "html_url": "https://github.com/rust-lang/rust/commit/d3900d3775c665237b83ea87e01838da9cf0da87"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "5cece569903c77aa8d02e88b6c286ede650321e1", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b295b8e67b6e35cc74ca9706d4b9938ad8379419/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b295b8e67b6e35cc74ca9706d4b9938ad8379419/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=b295b8e67b6e35cc74ca9706d4b9938ad8379419", "patch": "@@ -12,7 +12,9 @@ use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::LevelSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n-use rustc_middle::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n+use rustc_middle::lint::{\n+    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet,\n+};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::{builtin, Level, Lint, LintId};\n@@ -91,7 +93,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             };\n             for id in ids {\n                 self.check_gated_lint(id, DUMMY_SP);\n-                let src = LintSource::CommandLine(lint_flag_val, orig_level);\n+                let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n                 specs.insert(id, (level, src));\n             }\n         }\n@@ -128,19 +130,19 @@ impl<'s> LintLevelsBuilder<'s> {\n                 );\n                 diag_builder.span_label(src.span(), \"overruled by previous forbid\");\n                 match old_src {\n-                    LintSource::Default => {\n+                    LintLevelSource::Default => {\n                         diag_builder.note(&format!(\n                             \"`forbid` lint level is the default for {}\",\n                             id.to_string()\n                         ));\n                     }\n-                    LintSource::Node(_, forbid_source_span, reason) => {\n+                    LintLevelSource::Node(_, forbid_source_span, reason) => {\n                         diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n                         if let Some(rationale) = reason {\n                             diag_builder.note(&rationale.as_str());\n                         }\n                     }\n-                    LintSource::CommandLine(_, _) => {\n+                    LintLevelSource::CommandLine(_, _) => {\n                         diag_builder.note(\"`forbid` lint level was set on command line\");\n                     }\n                 }\n@@ -276,7 +278,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 let name = meta_item.path.segments.last().expect(\"empty lint name\").ident.name;\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n-                        let src = LintSource::Node(name, li.span(), reason);\n+                        let src = LintLevelSource::Node(name, li.span(), reason);\n                         for &id in ids {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n@@ -287,7 +289,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         match result {\n                             Ok(ids) => {\n                                 let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n-                                let src = LintSource::Node(\n+                                let src = LintLevelSource::Node(\n                                     Symbol::intern(complete_name),\n                                     li.span(),\n                                     reason,\n@@ -324,7 +326,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     },\n                                 );\n \n-                                let src = LintSource::Node(\n+                                let src = LintLevelSource::Node(\n                                     Symbol::intern(&new_lint_name),\n                                     li.span(),\n                                     reason,\n@@ -403,7 +405,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n \n                 let (lint_attr_name, lint_attr_span) = match *src {\n-                    LintSource::Node(name, span, _) => (name, span),\n+                    LintLevelSource::Node(name, span, _) => (name, span),\n                     _ => continue,\n                 };\n \n@@ -460,7 +462,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n \n     /// Find the lint level for a lint.\n-    pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintSource) {\n+    pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintLevelSource) {\n         self.sets.get_lint_level(lint, self.cur, None, self.sess)\n     }\n "}, {"sha": "64d850192f4493b8e0d51fe609d5be3ec39ffce6", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b295b8e67b6e35cc74ca9706d4b9938ad8379419/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b295b8e67b6e35cc74ca9706d4b9938ad8379419/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=b295b8e67b6e35cc74ca9706d4b9938ad8379419", "patch": "@@ -13,7 +13,7 @@ use rustc_span::{symbol, Span, Symbol, DUMMY_SP};\n \n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n-pub enum LintSource {\n+pub enum LintLevelSource {\n     /// Lint is at the default level as declared\n     /// in rustc or a plugin.\n     Default,\n@@ -27,25 +27,26 @@ pub enum LintSource {\n     CommandLine(Symbol, Level),\n }\n \n-impl LintSource {\n+impl LintLevelSource {\n     pub fn name(&self) -> Symbol {\n         match *self {\n-            LintSource::Default => symbol::kw::Default,\n-            LintSource::Node(name, _, _) => name,\n-            LintSource::CommandLine(name, _) => name,\n+            LintLevelSource::Default => symbol::kw::Default,\n+            LintLevelSource::Node(name, _, _) => name,\n+            LintLevelSource::CommandLine(name, _) => name,\n         }\n     }\n \n     pub fn span(&self) -> Span {\n         match *self {\n-            LintSource::Default => DUMMY_SP,\n-            LintSource::Node(_, span, _) => span,\n-            LintSource::CommandLine(_, _) => DUMMY_SP,\n+            LintLevelSource::Default => DUMMY_SP,\n+            LintLevelSource::Node(_, span, _) => span,\n+            LintLevelSource::CommandLine(_, _) => DUMMY_SP,\n         }\n     }\n }\n \n-pub type LevelSource = (Level, LintSource);\n+/// A tuple of a lint level and its source.\n+pub type LevelSource = (Level, LintLevelSource);\n \n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n@@ -113,7 +114,7 @@ impl LintLevelSets {\n         id: LintId,\n         mut idx: u32,\n         aux: Option<&FxHashMap<LintId, LevelSource>>,\n-    ) -> (Option<Level>, LintSource) {\n+    ) -> (Option<Level>, LintLevelSource) {\n         if let Some(specs) = aux {\n             if let Some(&(level, src)) = specs.get(&id) {\n                 return (Some(level), src);\n@@ -125,7 +126,7 @@ impl LintLevelSets {\n                     if let Some(&(level, src)) = specs.get(&id) {\n                         return (Some(level), src);\n                     }\n-                    return (None, LintSource::Default);\n+                    return (None, LintLevelSource::Default);\n                 }\n                 LintSet::Node { ref specs, parent } => {\n                     if let Some(&(level, src)) = specs.get(&id) {\n@@ -213,7 +214,7 @@ pub fn struct_lint_level<'s, 'd>(\n     sess: &'s Session,\n     lint: &'static Lint,\n     level: Level,\n-    src: LintSource,\n+    src: LintLevelSource,\n     span: Option<MultiSpan>,\n     decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>) + 'd,\n ) {\n@@ -223,7 +224,7 @@ pub fn struct_lint_level<'s, 'd>(\n         sess: &'s Session,\n         lint: &'static Lint,\n         level: Level,\n-        src: LintSource,\n+        src: LintLevelSource,\n         span: Option<MultiSpan>,\n         decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b>) + 'd>,\n     ) {\n@@ -274,14 +275,14 @@ pub fn struct_lint_level<'s, 'd>(\n \n         let name = lint.name_lower();\n         match src {\n-            LintSource::Default => {\n+            LintLevelSource::Default => {\n                 sess.diag_note_once(\n                     &mut err,\n                     DiagnosticMessageId::from(lint),\n                     &format!(\"`#[{}({})]` on by default\", level.as_str(), name),\n                 );\n             }\n-            LintSource::CommandLine(lint_flag_val, orig_level) => {\n+            LintLevelSource::CommandLine(lint_flag_val, orig_level) => {\n                 let flag = match orig_level {\n                     Level::Warn => \"-W\",\n                     Level::Deny => \"-D\",\n@@ -310,7 +311,7 @@ pub fn struct_lint_level<'s, 'd>(\n                     );\n                 }\n             }\n-            LintSource::Node(lint_attr_name, src, reason) => {\n+            LintLevelSource::Node(lint_attr_name, src, reason) => {\n                 if let Some(rationale) = reason {\n                     err.note(&rationale.as_str());\n                 }"}, {"sha": "9b944f202a9376ad6dce3a9300edfe1db4830e51", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b295b8e67b6e35cc74ca9706d4b9938ad8379419/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b295b8e67b6e35cc74ca9706d4b9938ad8379419/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b295b8e67b6e35cc74ca9706d4b9938ad8379419", "patch": "@@ -5,7 +5,7 @@ use crate::dep_graph::{self, DepGraph, DepKind, DepNode, DepNodeExt};\n use crate::hir::exports::ExportMap;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n-use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintSource};\n+use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle;\n use crate::middle::cstore::{CrateStoreDyn, EncodedMetadata};\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n@@ -2559,7 +2559,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         lint: &'static Lint,\n         mut id: hir::HirId,\n-    ) -> (Level, LintSource) {\n+    ) -> (Level, LintLevelSource) {\n         let sets = self.lint_levels(LOCAL_CRATE);\n         loop {\n             if let Some(pair) = sets.level_and_source(lint, id, self.sess) {"}, {"sha": "af5121d6b1be79f32742be194912e3c9df2b5dce", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b295b8e67b6e35cc74ca9706d4b9938ad8379419/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b295b8e67b6e35cc74ca9706d4b9938ad8379419/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=b295b8e67b6e35cc74ca9706d4b9938ad8379419", "patch": "@@ -5,7 +5,7 @@ use crate::html::markdown::{find_testable_code, ErrorCodes};\n use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n use rustc_lint::builtin::MISSING_DOCS;\n-use rustc_middle::lint::LintSource;\n+use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n@@ -254,7 +254,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 // `missing_docs` is allow-by-default, so don't treat this as ignoring the item\n                 // unless the user had an explicit `allow`\n                 let should_have_docs =\n-                    level != lint::Level::Allow || matches!(source, LintSource::Default);\n+                    level != lint::Level::Allow || matches!(source, LintLevelSource::Default);\n                 debug!(\"counting {:?} {:?} in {}\", i.type_(), i.name, filename);\n                 self.items.entry(filename).or_default().count_item(\n                     has_docs,"}, {"sha": "17d2847913d4b76dec4b3eb87f856a41a01b594d", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b295b8e67b6e35cc74ca9706d4b9938ad8379419/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b295b8e67b6e35cc74ca9706d4b9938ad8379419/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=b295b8e67b6e35cc74ca9706d4b9938ad8379419", "patch": "@@ -9,7 +9,7 @@ use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::{find_testable_code, ErrorCodes, Ignore, LangString};\n-use rustc_middle::lint::LintSource;\n+use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n \n crate const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n@@ -77,7 +77,7 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_local());\n     let (level, source) =\n         cx.tcx.lint_level_at_node(lint::builtin::MISSING_DOC_CODE_EXAMPLES, hir_id);\n-    level != lint::Level::Allow || matches!(source, LintSource::Default)\n+    level != lint::Level::Allow || matches!(source, LintLevelSource::Default)\n }\n \n crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {"}]}