{"sha": "6d86163ffb0209aca8bf097c07304291e0f10a28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkODYxNjNmZmIwMjA5YWNhOGJmMDk3YzA3MzA0MjkxZTBmMTBhMjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-30T07:35:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-30T07:35:33Z"}, "message": "const-eval tests: make all unions repr(C)", "tree": {"sha": "214c1a120e30578b206964f698642ae4d750d0b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/214c1a120e30578b206964f698642ae4d750d0b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d86163ffb0209aca8bf097c07304291e0f10a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d86163ffb0209aca8bf097c07304291e0f10a28", "html_url": "https://github.com/rust-lang/rust/commit/6d86163ffb0209aca8bf097c07304291e0f10a28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d86163ffb0209aca8bf097c07304291e0f10a28/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7fed140a4db638562077afc0ec5ef174a25bcc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fed140a4db638562077afc0ec5ef174a25bcc0", "html_url": "https://github.com/rust-lang/rust/commit/e7fed140a4db638562077afc0ec5ef174a25bcc0"}], "stats": {"total": 138, "additions": 79, "deletions": 59}, "files": [{"sha": "a2196db780ce046b0307d91e5cde45d1b08f6603", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,6 @@\n // only-x86_64\n \n+#[repr(C)]\n union Nonsense {\n     u: usize,\n     int_32_ref: &'static i32,"}, {"sha": "3333ffac4c9b0a9282697e66c8303a8676581a61", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:24:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:25:5\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:27:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:28:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -17,215 +17,215 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n    = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:30:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:31:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:33:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:36:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:37:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:39:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:40:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:42:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:43:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:45:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:46:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:48:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:49:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:51:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:52:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:54:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:55:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:57:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:58:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:60:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:61:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:63:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:64:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:66:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:67:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:69:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:70:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:72:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:73:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:75:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:76:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:78:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:79:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:81:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:82:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:84:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:85:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:87:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:90:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:91:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:93:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:94:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:96:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:97:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:99:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:100:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:102:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:103:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:105:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:106:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:108:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:109:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}, {"sha": "4a7d8490ef25f4463a1d32c7cb830b743c7d77d3", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_fn_union)]\n \n+#[repr(C)]\n union Transmute<T: Copy, U: Copy> {\n     t: T,\n     u: U,"}, {"sha": "ff2fff7fb790eca482646e3e210c6d9dd31847a0", "filename": "src/test/ui/consts/const-eval/double_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -8,6 +8,7 @@ enum Bar {\n     C = 42,\n     D = 99,\n }\n+#[repr(C)]\n union Union {\n     foo: &'static Foo,\n     bar: &'static Bar,"}, {"sha": "7c222b113cd7d866d11022f671b98bfc0d38b582", "filename": "src/test/ui/consts/const-eval/double_check2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -6,6 +6,7 @@ enum Bar {\n     C = 42,\n     D = 99,\n }\n+#[repr(C)]\n union Union {\n     foo: &'static Foo,\n     bar: &'static Bar,"}, {"sha": "9c56f1995208f7d8b6a3e00610846d3799a8a77b", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/double_check2.rs:15:1\n+  --> $DIR/double_check2.rs:16:1\n    |\n LL | / static FOO: (&Foo, &Bar) = unsafe {(\n LL | |     Union { u8: &BAR }.foo,"}, {"sha": "3f7bab065869a26f5900d80bd9c8dafbeab35eab", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -2,6 +2,7 @@\n \n fn main() {}\n \n+#[repr(C)]\n union Foo {\n     u: u32,\n     i: i32,"}, {"sha": "6899b7b82c5323d947d2aad5ae51a0683c6a5583", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: unions in const fn are unstable\n-  --> $DIR/feature-gate-const_fn_union.rs:11:5\n+  --> $DIR/feature-gate-const_fn_union.rs:12:5\n    |\n LL |     Foo { u }.i\n    |     ^^^^^^^^^^^"}, {"sha": "c6caeeffd22dd05bc96455d79da9067cff6d8aab", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -4,6 +4,7 @@\n #![feature(const_fn_union)]\n \n const unsafe fn transmute<T: Copy, U: Copy>(t: T) -> U {\n+    #[repr(C)]\n     union Transmute<T: Copy, U: Copy> {\n         from: T,\n         to: U,"}, {"sha": "48809e0ae649ca01f98c17ebe04022fc9c73dd9f", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-49296.rs:18:16\n+  --> $DIR/issue-49296.rs:19:16\n    |\n LL | const X: u64 = *wat(42);\n    | ---------------^^^^^^^^-"}, {"sha": "3edd4e086867baa5a1818017498c030349efd3c2", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(const_err)]\n \n+#[repr(C)]\n union Bar {\n     a: &'static u8,\n     b: usize,"}, {"sha": "6618f1cd1c0b534f006b4e581bbedbb3770c33de", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail.rs:20:27\n+  --> $DIR/promoted_const_fn_fail.rs:21:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "7887e426534640123a9cd6b9106f138e6da0505f", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -2,6 +2,7 @@\n \n #![deny(const_err)]\n \n+#[repr(C)]\n union Bar {\n     a: &'static u8,\n     b: usize,"}, {"sha": "5f9f3bda87b15f077e022a8b902de7872439750f", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:21:27\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:22:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "45ce040fb9eef8b127713987f54ed26670e0d657", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -9,6 +9,7 @@ fn main() {\n     }\n }\n \n+#[repr(C)]\n union Foo {\n     f: Int,\n     r: &'static u32,"}, {"sha": "0be82e3434142dbfd8148d46cfdf9da8ad7c5701", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ref_to_int_match.rs:23:1\n+  --> $DIR/ref_to_int_match.rs:24:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes"}, {"sha": "483285aa4e12342b8a2b2aa6e50956c211b1c4e6", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -10,6 +10,7 @@ struct Wrap<T>(T);\n enum Enum {\n     A = 0,\n }\n+#[repr(C)]\n union TransmuteEnum {\n     in1: &'static u8,\n     in2: usize,\n@@ -35,6 +36,7 @@ enum Enum2 {\n     A = 2,\n }\n \n+#[repr(C)]\n union TransmuteEnum2 {\n     in1: usize,\n     in2: &'static u8,\n@@ -60,6 +62,7 @@ const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.\n \n // Invalid enum field content (mostly to test printing of paths for enum tuple\n // variants and tuples).\n+#[repr(C)]\n union TransmuteChar {\n     a: u32,\n     b: char,"}, {"sha": "30dd86592d4699c7407380020360097e3185c346", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,69 +1,69 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:22:1\n+  --> $DIR/ub-enum.rs:23:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { in2: 1 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 1, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:25:1\n+  --> $DIR/ub-enum.rs:26:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { TransmuteEnum { in1: &1 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:28:1\n+  --> $DIR/ub-enum.rs:29:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { TransmuteEnum { in1: &1 }.out2 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be equal to 0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:46:1\n+  --> $DIR/ub-enum.rs:48:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { TransmuteEnum2 { in1: 0 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:48:1\n+  --> $DIR/ub-enum.rs:50:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { TransmuteEnum2 { in2: &0 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:50:1\n+  --> $DIR/ub-enum.rs:52:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out2 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be equal to 2\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:54:1\n+  --> $DIR/ub-enum.rs:56:1\n    |\n LL | const BAD_ENUM2_UNDEF : Enum2 = unsafe { TransmuteEnum2 { in3: () }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:58:1\n+  --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:68:1\n+  --> $DIR/ub-enum.rs:71:1\n    |\n LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .<downcast-variant(Some)>.0.1, but expected something less or equal to 1114111"}, {"sha": "8ce64ced7dff4c02b004fb6d8637e94d82e2086a", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -24,6 +24,7 @@ const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+#[repr(C)]\n union Transmute {\n     uninit: (),\n     out: NonZeroU8,"}, {"sha": "de20c3d0b8cfe042378510e4ba021f00b6d62594", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -41,23 +41,23 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:31:1\n+  --> $DIR/ub-nonnull.rs:32:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { Transmute { uninit: () }.out };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:39:1\n+  --> $DIR/ub-nonnull.rs:40:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:45:1\n+  --> $DIR/ub-nonnull.rs:46:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "cd3cc38467c36fdfc28b5f82d19fb6595c01eef7", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -15,23 +15,23 @@ LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:14:1\n+  --> $DIR/ub-ref.rs:17:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:17:1\n+  --> $DIR/ub-ref.rs:20:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:20:1\n+  --> $DIR/ub-ref.rs:23:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (created from integer)"}, {"sha": "d2745d71bdb2f74b693d1d8c0d6e617798057ac2", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -6,6 +6,7 @@ use std::mem;\n #[derive(Copy, Clone)]\n enum Bar {}\n \n+#[repr(C)]\n union TransmuteUnion<A: Clone + Copy, B: Clone + Copy> {\n     a: A,\n     b: B,"}, {"sha": "43d91483797bffcbb23da64b4f11fcd250e6223b", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,21 +1,21 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:14:1\n+  --> $DIR/ub-uninhabit.rs:15:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { (TransmuteUnion::<(), Bar> { a: () }).b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:17:1\n+  --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:20:1\n+  --> $DIR/ub-uninhabit.rs:21:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { (TransmuteUnion::<(), [Bar; 1]> { a: () }).b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type"}, {"sha": "7f29a5bc24e4e28c69f9f9b03d572fc7b0746ed3", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -4,6 +4,7 @@ type Field1 = i32;\n type Field2 = f32;\n type Field3 = i64;\n \n+#[repr(C)]\n union DummyUnion {\n     field1: Field1,\n     field2: Field2,"}, {"sha": "4d008a0e02ad78393f8c6523d67374d3490f25a4", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-const-eval-field.rs:27:5\n+  --> $DIR/union-const-eval-field.rs:28:5\n    |\n LL |     const FIELD3: Field3 = unsafe { UNION.field3 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes"}, {"sha": "5a14c7fd99345f1497d6a09a6e12a4cff62c1ae0", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -3,6 +3,7 @@\n type Field1 = i32;\n type Field3 = i64;\n \n+#[repr(C)]\n union DummyUnion {\n     field1: Field1,\n     field3: Field3,"}, {"sha": "8d950e86d27fc92f314ad8b6c93810a48f1fdd61", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:13:1\n+  --> $DIR/union-ice.rs:14:1\n    |\n LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:15:1\n+  --> $DIR/union-ice.rs:16:1\n    |\n LL | / const FIELD_PATH: Struct = Struct {\n LL | |     a: 42,\n@@ -18,7 +18,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:25:1\n+  --> $DIR/union-ice.rs:26:1\n    |\n LL | / const FIELD_PATH2: Struct2 = Struct2 {\n LL | |     b: ["}, {"sha": "848826e6ef7f2f6d2cf67670c58a913d36cadff0", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,6 @@\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n+#[repr(C)]\n union DummyUnion {\n     u8: u8,\n     bool: bool,\n@@ -14,11 +15,13 @@ enum Enum {\n }\n \n #[derive(Copy, Clone)]\n+#[repr(C)]\n union Foo {\n     a: bool,\n     b: Enum,\n }\n \n+#[repr(C)]\n union Bar {\n     foo: Foo,\n     u8: u8,"}, {"sha": "6a3a397585c899803f41cc50c4ed4334fd78509e", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:28:1\n+  --> $DIR/union-ub.rs:31:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something less or equal to 1"}, {"sha": "7167f88a1185be1b2609077048f54b6237bcca5f", "filename": "src/test/ui/consts/const-eval/union_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,6 @@\n #![allow(const_err)]\n \n+#[repr(C)]\n union Foo {\n     a: &'static u32,\n     b: usize,"}, {"sha": "ed186e3ebd2f5bd6068248186ec87a918c728e34", "filename": "src/test/ui/consts/const-eval/union_promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d86163ffb0209aca8bf097c07304291e0f10a28/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr?ref=6d86163ffb0209aca8bf097c07304291e0f10a28", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/union_promotion.rs:9:29\n+  --> $DIR/union_promotion.rs:10:29\n    |\n LL |       let x: &'static bool = &unsafe {\n    |  ____________-------------____^"}]}