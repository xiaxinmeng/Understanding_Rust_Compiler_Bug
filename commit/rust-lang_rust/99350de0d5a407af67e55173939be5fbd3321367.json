{"sha": "99350de0d5a407af67e55173939be5fbd3321367", "node_id": "C_kwDOAAsO6NoAKDk5MzUwZGUwZDVhNDA3YWY2N2U1NTE3MzkzOWJlNWZiZDMzMjEzNjc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-26T08:56:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-26T08:56:57Z"}, "message": "Rollup merge of #99666 - compiler-errors:issue-99663, r=lcnr\n\nRestore `Opaque` behavior to coherence check\n\nFixes #99663.\n\nThis broke in 84c3fcd2a0285c06a682c9b064640084e4c7271b. I'm not exactly certain that adding this behavior back is necessarily correct, but at least the UI test I provided may stimulate some thoughts.\n\nI think delaying a bug here is certainly not correct in the case of opaques -- if we want to change coherence behavior for opaques, then we should at least be emitting a new error.\n\nr? ``@lcnr``", "tree": {"sha": "989177e8b112826e6b1d76dfd7162a83cd4663d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989177e8b112826e6b1d76dfd7162a83cd4663d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99350de0d5a407af67e55173939be5fbd3321367", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi36xaCRBK7hj4Ov3rIwAAlpUIAFTUMHwGw0U9hCqzTlysHr5x\nPnQWfD6k1ag5trAsA64Jtq/CnU7axPBYruNPcswVgVzVnPj/x3FrWWuvUusSYkJg\nMpUWXslSg5p6SM+i4W8Oy6VuAXJ01SrLFvlZwDP3OFEvOKsPxy0N9u/KubJ+djjI\ngZDxgKyFVo7WxttwzlNysxOdnbVduQHjyTxM1Svxdwl8S0p67OTuiLjzOjYruD0j\nizGoVTq+wtWKGdbs3GroCWelIYOkCmjWpU2G4VqScatpAKHZQ21/E8aZBI3LTKRw\nwSdmuWF3dibFmZ8xO7Bqu2/f29QAWkBf7zBoBYv+LXslHoXVkn3/eqwjv0so9yg=\n=kG/B\n-----END PGP SIGNATURE-----\n", "payload": "tree 989177e8b112826e6b1d76dfd7162a83cd4663d0\nparent a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c\nparent b7cf9f72f647f05cc2b028c569735a91caf2a79a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658825817 +0530\ncommitter GitHub <noreply@github.com> 1658825817 +0530\n\nRollup merge of #99666 - compiler-errors:issue-99663, r=lcnr\n\nRestore `Opaque` behavior to coherence check\n\nFixes #99663.\n\nThis broke in 84c3fcd2a0285c06a682c9b064640084e4c7271b. I'm not exactly certain that adding this behavior back is necessarily correct, but at least the UI test I provided may stimulate some thoughts.\n\nI think delaying a bug here is certainly not correct in the case of opaques -- if we want to change coherence behavior for opaques, then we should at least be emitting a new error.\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99350de0d5a407af67e55173939be5fbd3321367", "html_url": "https://github.com/rust-lang/rust/commit/99350de0d5a407af67e55173939be5fbd3321367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99350de0d5a407af67e55173939be5fbd3321367/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "html_url": "https://github.com/rust-lang/rust/commit/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c"}, {"sha": "b7cf9f72f647f05cc2b028c569735a91caf2a79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cf9f72f647f05cc2b028c569735a91caf2a79a", "html_url": "https://github.com/rust-lang/rust/commit/b7cf9f72f647f05cc2b028c569735a91caf2a79a"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "fa94aa19abda594386bf61b758c515621a5a3ec6", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/99350de0d5a407af67e55173939be5fbd3321367/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99350de0d5a407af67e55173939be5fbd3321367/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=99350de0d5a407af67e55173939be5fbd3321367", "patch": "@@ -703,13 +703,42 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n                 }\n             }\n             ty::Error(_) => ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty)),\n-            ty::Opaque(..) | ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n+            ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n                 self.tcx.sess.delay_span_bug(\n                     DUMMY_SP,\n                     format!(\"ty_is_local invoked on closure or generator: {:?}\", ty),\n                 );\n                 ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty))\n             }\n+            ty::Opaque(..) => {\n+                // This merits some explanation.\n+                // Normally, opaque types are not involved when performing\n+                // coherence checking, since it is illegal to directly\n+                // implement a trait on an opaque type. However, we might\n+                // end up looking at an opaque type during coherence checking\n+                // if an opaque type gets used within another type (e.g. as\n+                // the type of a field) when checking for auto trait or `Sized`\n+                // impls. This requires us to decide whether or not an opaque\n+                // type should be considered 'local' or not.\n+                //\n+                // We choose to treat all opaque types as non-local, even\n+                // those that appear within the same crate. This seems\n+                // somewhat surprising at first, but makes sense when\n+                // you consider that opaque types are supposed to hide\n+                // the underlying type *within the same crate*. When an\n+                // opaque type is used from outside the module\n+                // where it is declared, it should be impossible to observe\n+                // anything about it other than the traits that it implements.\n+                //\n+                // The alternative would be to look at the underlying type\n+                // to determine whether or not the opaque type itself should\n+                // be considered local. However, this could make it a breaking change\n+                // to switch the underlying ('defining') type from a local type\n+                // to a remote type. This would violate the rule that opaque\n+                // types should be completely opaque apart from the traits\n+                // that they implement, so we don't use this behavior.\n+                self.found_non_local_ty(ty)\n+            }\n         };\n         // A bit of a hack, the `OrphanChecker` is only used to visit a `TraitRef`, so\n         // the first type we visit is always the self type."}, {"sha": "10a0a568849bff343f500fccf4046f07cf9a4092", "filename": "src/test/ui/coherence/issue-99663-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99350de0d5a407af67e55173939be5fbd3321367/src%2Ftest%2Fui%2Fcoherence%2Fissue-99663-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99350de0d5a407af67e55173939be5fbd3321367/src%2Ftest%2Fui%2Fcoherence%2Fissue-99663-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-99663-2.rs?ref=99350de0d5a407af67e55173939be5fbd3321367", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+struct Outer<T: ?Sized> {\n+    i: InnerSend<T>,\n+}\n+\n+type InnerSend<T: ?Sized> = impl Send;\n+\n+fn constrain<T: ?Sized>() -> InnerSend<T> {\n+    ()\n+}\n+\n+trait SendMustNotImplDrop {}\n+\n+#[allow(drop_bounds)]\n+impl<T: ?Sized + Send + Drop> SendMustNotImplDrop for T {}\n+\n+impl<T: ?Sized> SendMustNotImplDrop for Outer<T> {}\n+\n+fn main() {}"}, {"sha": "a2d4d398ce1d58c59485644cb747f9d2d9f08330", "filename": "src/test/ui/coherence/issue-99663.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99350de0d5a407af67e55173939be5fbd3321367/src%2Ftest%2Fui%2Fcoherence%2Fissue-99663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99350de0d5a407af67e55173939be5fbd3321367/src%2Ftest%2Fui%2Fcoherence%2Fissue-99663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-99663.rs?ref=99350de0d5a407af67e55173939be5fbd3321367", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+struct Send<T> {\n+    i: InnerSend<T>,\n+}\n+\n+type InnerSend<T> = impl Sized;\n+\n+fn constrain<T>() -> InnerSend<T> {\n+    ()\n+}\n+\n+trait SendMustNotImplDrop {}\n+\n+#[allow(drop_bounds)]\n+impl<T: Drop> SendMustNotImplDrop for T {}\n+\n+impl<T> SendMustNotImplDrop for Send<T> {}\n+\n+fn main() {}"}, {"sha": "479b451855d5517fb2a7fe6edf8358d15130874c", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99350de0d5a407af67e55173939be5fbd3321367/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99350de0d5a407af67e55173939be5fbd3321367/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=99350de0d5a407af67e55173939be5fbd3321367", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n LL | impl AnotherTrait for D<OpaqueType> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n    |\n-   = note: downstream crates may implement trait `std::fmt::Debug` for type `OpaqueType`\n+   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n \n error: cannot implement trait on type alias impl trait\n   --> $DIR/negative-reasoning.rs:19:25"}]}