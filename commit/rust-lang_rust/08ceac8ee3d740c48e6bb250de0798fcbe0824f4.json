{"sha": "08ceac8ee3d740c48e6bb250de0798fcbe0824f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Y2VhYzhlZTNkNzQwYzQ4ZTZiYjI1MGRlMDc5OGZjYmUwODI0ZjQ=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-21T19:29:11Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-21T23:15:09Z"}, "message": "Add cross-crate tuple field count error test", "tree": {"sha": "de94c8b139e11125e2e009def3655a2c2f8f83b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de94c8b139e11125e2e009def3655a2c2f8f83b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ceac8ee3d740c48e6bb250de0798fcbe0824f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ceac8ee3d740c48e6bb250de0798fcbe0824f4", "html_url": "https://github.com/rust-lang/rust/commit/08ceac8ee3d740c48e6bb250de0798fcbe0824f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ceac8ee3d740c48e6bb250de0798fcbe0824f4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02ed23c0318da7f1125f01b5437ae9e809587f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02ed23c0318da7f1125f01b5437ae9e809587f0c", "html_url": "https://github.com/rust-lang/rust/commit/02ed23c0318da7f1125f01b5437ae9e809587f0c"}], "stats": {"total": 613, "additions": 613, "deletions": 0}, "files": [{"sha": "f7373c453966c1fa1ad25534deea38c6b34f649f", "filename": "src/test/ui/pattern/auxiliary/declarations-for-tuple-field-count-errors.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08ceac8ee3d740c48e6bb250de0798fcbe0824f4/src%2Ftest%2Fui%2Fpattern%2Fauxiliary%2Fdeclarations-for-tuple-field-count-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ceac8ee3d740c48e6bb250de0798fcbe0824f4/src%2Ftest%2Fui%2Fpattern%2Fauxiliary%2Fdeclarations-for-tuple-field-count-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fauxiliary%2Fdeclarations-for-tuple-field-count-errors.rs?ref=08ceac8ee3d740c48e6bb250de0798fcbe0824f4", "patch": "@@ -0,0 +1,20 @@\n+pub struct Z0;\n+pub struct Z1();\n+\n+pub struct S(pub u8, pub u8, pub u8);\n+pub struct M(\n+    pub u8,\n+    pub u8,\n+    pub u8,\n+);\n+\n+pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+\n+pub enum E2 {\n+    S(u8, u8, u8),\n+    M(\n+        u8,\n+        u8,\n+        u8,\n+    ),\n+}"}, {"sha": "b63da4e154f73d1be6e1f57c6f96c21878e01297", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/08ceac8ee3d740c48e6bb250de0798fcbe0824f4/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ceac8ee3d740c48e6bb250de0798fcbe0824f4/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.rs?ref=08ceac8ee3d740c48e6bb250de0798fcbe0824f4", "patch": "@@ -0,0 +1,57 @@\n+// aux-build:declarations-for-tuple-field-count-errors.rs\n+\n+extern crate declarations_for_tuple_field_count_errors;\n+\n+use declarations_for_tuple_field_count_errors::*;\n+\n+fn main() {\n+    match Z0 {\n+        Z0() => {} //~ ERROR expected tuple struct or tuple variant, found unit struct `Z0`\n+        Z0(x) => {} //~ ERROR expected tuple struct or tuple variant, found unit struct `Z0`\n+    }\n+    match Z1() {\n+        Z1 => {} //~ ERROR match bindings cannot shadow tuple structs\n+        Z1(x) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple struct has 0 fields\n+    }\n+\n+    match S(1, 2, 3) {\n+        S() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+        S(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+        S(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+        S(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+    }\n+    match M(1, 2, 3) {\n+        M() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+        M(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+        M(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+        M(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+    }\n+\n+    match E1::Z0 {\n+        E1::Z0() => {} //~ ERROR expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+        E1::Z0(x) => {} //~ ERROR expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+    }\n+    match E1::Z1() {\n+        E1::Z1 => {} //~ ERROR expected unit struct, unit variant or constant, found tuple variant `E1::Z1`\n+        E1::Z1(x) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 0 fields\n+    }\n+    match E1::S(1, 2, 3) {\n+        E1::S() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+        E1::S(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+        E1::S(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+        E1::S(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+    }\n+\n+    match E2::S(1, 2, 3) {\n+        E2::S() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+        E2::S(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+        E2::S(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+        E2::S(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+    }\n+    match E2::M(1, 2, 3) {\n+        E2::M() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+        E2::M(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+        E2::M(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+        E2::M(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+    }\n+}"}, {"sha": "570bf0cbc0810cc37e4e64c91ea38822cfb49dab", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.stderr", "status": "added", "additions": 536, "deletions": 0, "changes": 536, "blob_url": "https://github.com/rust-lang/rust/blob/08ceac8ee3d740c48e6bb250de0798fcbe0824f4/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ceac8ee3d740c48e6bb250de0798fcbe0824f4/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr?ref=08ceac8ee3d740c48e6bb250de0798fcbe0824f4", "patch": "@@ -0,0 +1,536 @@\n+error[E0530]: match bindings cannot shadow tuple structs\n+  --> $DIR/pat-tuple-field-count-cross.rs:13:9\n+   |\n+LL | use declarations_for_tuple_field_count_errors::*;\n+   |     -------------------------------------------- the tuple struct `Z1` is imported here\n+...\n+LL |         Z1 => {}\n+   |         ^^ cannot be named the same as a tuple struct\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:9:9\n+   |\n+LL |         Z0() => {}\n+   |         ^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:1:1\n+   |\n+LL | pub struct Z0;\n+   | -------------- `Z0` defined here\n+LL | pub struct Z1();\n+   | ---------------- similarly named tuple struct `Z1` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Z0 => {}\n+   |         ~~\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         Z1() => {}\n+   |         ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:10:9\n+   |\n+LL |         Z0(x) => {}\n+   |         ^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:1:1\n+   |\n+LL | pub struct Z0;\n+   | -------------- `Z0` defined here\n+LL | pub struct Z1();\n+   | ---------------- similarly named tuple struct `Z1` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Z0 => {}\n+   |         ~~\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         Z1(x) => {}\n+   |         ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:31:9\n+   |\n+LL |         E1::Z0() => {}\n+   |         ^^^^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:15\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |               --  ---- similarly named tuple variant `Z1` defined here\n+   |               |\n+   |               `E1::Z0` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         E1::Z0 => {}\n+   |         ~~~~~~\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         E1::Z1() => {}\n+   |             ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:32:9\n+   |\n+LL |         E1::Z0(x) => {}\n+   |         ^^^^^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:15\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |               --  ---- similarly named tuple variant `Z1` defined here\n+   |               |\n+   |               `E1::Z0` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         E1::Z0 => {}\n+   |         ~~~~~~\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         E1::Z1(x) => {}\n+   |             ~~\n+\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `E1::Z1`\n+  --> $DIR/pat-tuple-field-count-cross.rs:35:9\n+   |\n+LL |         E1::Z1 => {}\n+   |         ^^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:19\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |               --  ---- `E1::Z1` defined here\n+   |               |\n+   |               similarly named unit variant `Z0` defined here\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         E1::Z1(/* fields */) => {}\n+   |         ~~~~~~~~~~~~~~~~~~~~\n+help: a unit variant with a similar name exists\n+   |\n+LL |         E1::Z0 => {}\n+   |             ~~\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 0 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:14:12\n+   |\n+LL |         Z1(x) => {}\n+   |         -- ^ expected 0 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:2:1\n+   |\n+LL | pub struct Z1();\n+   | ---------------- tuple struct has 0 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:18:10\n+   |\n+LL |         S() => {}\n+   |         -^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(_, _, _) => {}\n+   |           +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         S(..) => {}\n+   |           ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:19:11\n+   |\n+LL |         S(1) => {}\n+   |         - ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(1, _, _) => {}\n+   |            ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         S(1, ..) => {}\n+   |            ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:20:11\n+   |\n+LL |         S(xyz, abc) => {}\n+   |         - ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(xyz, abc, _) => {}\n+   |                   +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:21:11\n+   |\n+LL |         S(1, 2, 3, 4) => {}\n+   |         - ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:24:10\n+   |\n+LL |           M() => {}\n+   |           -^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         M(_, _, _) => {}\n+   |           +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         M(..) => {}\n+   |           ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:25:11\n+   |\n+LL |           M(1) => {}\n+   |           - ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         M(1, _, _) => {}\n+   |            ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         M(1, ..) => {}\n+   |            ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:26:11\n+   |\n+LL |           M(xyz, abc) => {}\n+   |           - ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         M(xyz, abc, _) => {}\n+   |                   +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:27:11\n+   |\n+LL |           M(1, 2, 3, 4) => {}\n+   |           - ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 0 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:36:16\n+   |\n+LL |         E1::Z1(x) => {}\n+   |         ------ ^ expected 0 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:19\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                   ---- tuple variant has 0 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:39:14\n+   |\n+LL |         E1::S() => {}\n+   |         -----^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E1::S(_, _, _) => {}\n+   |               +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         E1::S(..) => {}\n+   |               ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:40:15\n+   |\n+LL |         E1::S(1) => {}\n+   |         ----- ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E1::S(1, _, _) => {}\n+   |                ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         E1::S(1, ..) => {}\n+   |                ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:41:15\n+   |\n+LL |         E1::S(xyz, abc) => {}\n+   |         ----- ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E1::S(xyz, abc, _) => {}\n+   |                       +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:42:15\n+   |\n+LL |         E1::S(1, 2, 3, 4) => {}\n+   |         ----- ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:46:14\n+   |\n+LL |         E2::S() => {}\n+   |         -----^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::S(_, _, _) => {}\n+   |               +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         E2::S(..) => {}\n+   |               ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:47:15\n+   |\n+LL |         E2::S(1) => {}\n+   |         ----- ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::S(1, _, _) => {}\n+   |                ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         E2::S(1, ..) => {}\n+   |                ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:48:15\n+   |\n+LL |         E2::S(xyz, abc) => {}\n+   |         ----- ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::S(xyz, abc, _) => {}\n+   |                       +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:49:15\n+   |\n+LL |         E2::S(1, 2, 3, 4) => {}\n+   |         ----- ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:52:14\n+   |\n+LL |           E2::M() => {}\n+   |           -----^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::M(_, _, _) => {}\n+   |               +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         E2::M(..) => {}\n+   |               ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:53:15\n+   |\n+LL |           E2::M(1) => {}\n+   |           ----- ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::M(1, _, _) => {}\n+   |                ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         E2::M(1, ..) => {}\n+   |                ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:54:15\n+   |\n+LL |           E2::M(xyz, abc) => {}\n+   |           ----- ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::M(xyz, abc, _) => {}\n+   |                       +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:55:15\n+   |\n+LL |           E2::M(1, 2, 3, 4) => {}\n+   |           ----- ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+\n+error: aborting due to 28 previous errors\n+\n+Some errors have detailed explanations: E0023, E0530, E0532.\n+For more information about an error, try `rustc --explain E0023`."}]}