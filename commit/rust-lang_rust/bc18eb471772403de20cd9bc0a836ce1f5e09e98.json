{"sha": "bc18eb471772403de20cd9bc0a836ce1f5e09e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMThlYjQ3MTc3MjQwM2RlMjBjZDliYzBhODM2Y2UxZjVlMDllOTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-22T13:12:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-04T22:33:43Z"}, "message": "expand: Remove obsolete `DirectoryOwnership::UnownedViaMod`\n\nThis ownership kind is only constructed in the case of path attributes like `#[path = \"..\"]` without a file name segment, which always represent some kind of directories and will produce and error on attempt to parse them as a module file.", "tree": {"sha": "9a09fa564a81a76fbc7831c3eeabc49e0d6d63a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a09fa564a81a76fbc7831c3eeabc49e0d6d63a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc18eb471772403de20cd9bc0a836ce1f5e09e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc18eb471772403de20cd9bc0a836ce1f5e09e98", "html_url": "https://github.com/rust-lang/rust/commit/bc18eb471772403de20cd9bc0a836ce1f5e09e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc18eb471772403de20cd9bc0a836ce1f5e09e98/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b3c28518e4c45dfd12bc2c4400c0d0e9639927", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b3c28518e4c45dfd12bc2c4400c0d0e9639927", "html_url": "https://github.com/rust-lang/rust/commit/45b3c28518e4c45dfd12bc2c4400c0d0e9639927"}], "stats": {"total": 76, "additions": 24, "deletions": 52}, "files": [{"sha": "99c1591d40a817a351712d574b388c8aec7c25ec", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 9, "deletions": 52, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bc18eb471772403de20cd9bc0a836ce1f5e09e98/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc18eb471772403de20cd9bc0a836ce1f5e09e98/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=bc18eb471772403de20cd9bc0a836ce1f5e09e98", "patch": "@@ -22,7 +22,6 @@ pub enum DirectoryOwnership {\n         relative: Option<Ident>,\n     },\n     UnownedViaBlock,\n-    UnownedViaMod,\n }\n \n /// Information about the path to a module.\n@@ -134,23 +133,20 @@ fn submod_path<'a>(\n     dir_path: &Path,\n ) -> PResult<'a, ModulePathSuccess> {\n     if let Some(path) = submod_path_from_attr(sess, attrs, dir_path) {\n-        let ownership = match path.file_name().and_then(|s| s.to_str()) {\n-            // All `#[path]` files are treated as though they are a `mod.rs` file.\n-            // This means that `mod foo;` declarations inside `#[path]`-included\n-            // files are siblings,\n-            //\n-            // Note that this will produce weirdness when a file named `foo.rs` is\n-            // `#[path]` included and contains a `mod foo;` declaration.\n-            // If you encounter this, it's your own darn fault :P\n-            Some(_) => DirectoryOwnership::Owned { relative: None },\n-            _ => DirectoryOwnership::UnownedViaMod,\n-        };\n+        // All `#[path]` files are treated as though they are a `mod.rs` file.\n+        // This means that `mod foo;` declarations inside `#[path]`-included\n+        // files are siblings,\n+        //\n+        // Note that this will produce weirdness when a file named `foo.rs` is\n+        // `#[path]` included and contains a `mod foo;` declaration.\n+        // If you encounter this, it's your own darn fault :P\n+        let ownership = DirectoryOwnership::Owned { relative: None };\n         return Ok(ModulePathSuccess { ownership, path });\n     }\n \n     let relative = match ownership {\n         DirectoryOwnership::Owned { relative } => relative,\n-        DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n+        DirectoryOwnership::UnownedViaBlock => None,\n     };\n     let ModulePath { path_exists, name, result } =\n         default_submod_path(&sess.parse_sess, id, span, relative, dir_path);\n@@ -160,10 +156,6 @@ fn submod_path<'a>(\n             let _ = result.map_err(|mut err| err.cancel());\n             error_decl_mod_in_block(&sess.parse_sess, span, path_exists, &name)\n         }\n-        DirectoryOwnership::UnownedViaMod => {\n-            let _ = result.map_err(|mut err| err.cancel());\n-            error_cannot_declare_mod_here(&sess.parse_sess, span, path_exists, &name)\n-        }\n     }\n }\n \n@@ -182,41 +174,6 @@ fn error_decl_mod_in_block<'a, T>(\n     Err(err)\n }\n \n-fn error_cannot_declare_mod_here<'a, T>(\n-    sess: &'a ParseSess,\n-    span: Span,\n-    path_exists: bool,\n-    name: &str,\n-) -> PResult<'a, T> {\n-    let mut err =\n-        sess.span_diagnostic.struct_span_err(span, \"cannot declare a new module at this location\");\n-    if !span.is_dummy() {\n-        if let FileName::Real(src_name) = sess.source_map().span_to_filename(span) {\n-            let src_path = src_name.into_local_path();\n-            if let Some(stem) = src_path.file_stem() {\n-                let mut dest_path = src_path.clone();\n-                dest_path.set_file_name(stem);\n-                dest_path.push(\"mod.rs\");\n-                err.span_note(\n-                    span,\n-                    &format!(\n-                        \"maybe move this module `{}` to its own directory via `{}`\",\n-                        src_path.display(),\n-                        dest_path.display()\n-                    ),\n-                );\n-            }\n-        }\n-    }\n-    if path_exists {\n-        err.span_note(\n-            span,\n-            &format!(\"... or maybe `use` the module `{}` instead of possibly redeclaring it\", name),\n-        );\n-    }\n-    Err(err)\n-}\n-\n /// Derive a submodule path from the first found `#[path = \"path_string\"]`.\n /// The provided `dir_path` is joined with the `path_string`.\n pub(super) fn submod_path_from_attr("}, {"sha": "f62cd2a9eb4e42e6a2b60a481b4e21b46535b76b", "filename": "src/test/ui/modules/path-no-file-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc18eb471772403de20cd9bc0a836ce1f5e09e98/src%2Ftest%2Fui%2Fmodules%2Fpath-no-file-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc18eb471772403de20cd9bc0a836ce1f5e09e98/src%2Ftest%2Fui%2Fmodules%2Fpath-no-file-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-no-file-name.rs?ref=bc18eb471772403de20cd9bc0a836ce1f5e09e98", "patch": "@@ -0,0 +1,7 @@\n+// normalize-stderr-test: \"\\.:.*\\(\" -> \".: $$ACCESS_DENIED_MSG (\"\n+// normalize-stderr-test: \"os error \\d+\" -> \"os error $$ACCESS_DENIED_CODE\"\n+\n+#[path = \".\"]\n+mod m; //~ ERROR couldn't read\n+\n+fn main() {}"}, {"sha": "32a213c68f654c2754d944a263c23919f6b161db", "filename": "src/test/ui/modules/path-no-file-name.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc18eb471772403de20cd9bc0a836ce1f5e09e98/src%2Ftest%2Fui%2Fmodules%2Fpath-no-file-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc18eb471772403de20cd9bc0a836ce1f5e09e98/src%2Ftest%2Fui%2Fmodules%2Fpath-no-file-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-no-file-name.stderr?ref=bc18eb471772403de20cd9bc0a836ce1f5e09e98", "patch": "@@ -0,0 +1,8 @@\n+error: couldn't read $DIR/.: $ACCESS_DENIED_MSG (os error $ACCESS_DENIED_CODE)\n+  --> $DIR/path-no-file-name.rs:5:1\n+   |\n+LL | mod m;\n+   | ^^^^^^\n+\n+error: aborting due to previous error\n+"}]}