{"sha": "70c8fe5539f6a7888e631f2b1a0e59be7260389f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzhmZTU1MzlmNmE3ODg4ZTYzMWYyYjFhMGU1OWJlNzI2MDM4OWY=", "commit": {"author": {"name": "Frederick Zhang", "email": "frederick888@tsundere.moe", "date": "2017-08-25T07:30:21Z"}, "committer": {"name": "Frederick Zhang", "email": "frederick888@tsundere.moe", "date": "2017-08-25T09:38:28Z"}, "message": "fix PathParameters usage", "tree": {"sha": "7a3205ffcd6e9ff815bdc9d41241c6014045b4bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3205ffcd6e9ff815bdc9d41241c6014045b4bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c8fe5539f6a7888e631f2b1a0e59be7260389f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c8fe5539f6a7888e631f2b1a0e59be7260389f", "html_url": "https://github.com/rust-lang/rust/commit/70c8fe5539f6a7888e631f2b1a0e59be7260389f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c8fe5539f6a7888e631f2b1a0e59be7260389f/comments", "author": {"login": "Frederick888", "id": 4507647, "node_id": "MDQ6VXNlcjQ1MDc2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4507647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frederick888", "html_url": "https://github.com/Frederick888", "followers_url": "https://api.github.com/users/Frederick888/followers", "following_url": "https://api.github.com/users/Frederick888/following{/other_user}", "gists_url": "https://api.github.com/users/Frederick888/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frederick888/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frederick888/subscriptions", "organizations_url": "https://api.github.com/users/Frederick888/orgs", "repos_url": "https://api.github.com/users/Frederick888/repos", "events_url": "https://api.github.com/users/Frederick888/events{/privacy}", "received_events_url": "https://api.github.com/users/Frederick888/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Frederick888", "id": 4507647, "node_id": "MDQ6VXNlcjQ1MDc2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4507647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frederick888", "html_url": "https://github.com/Frederick888", "followers_url": "https://api.github.com/users/Frederick888/followers", "following_url": "https://api.github.com/users/Frederick888/following{/other_user}", "gists_url": "https://api.github.com/users/Frederick888/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frederick888/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frederick888/subscriptions", "organizations_url": "https://api.github.com/users/Frederick888/orgs", "repos_url": "https://api.github.com/users/Frederick888/repos", "events_url": "https://api.github.com/users/Frederick888/events{/privacy}", "received_events_url": "https://api.github.com/users/Frederick888/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab362031ed2a4897b6010f2004472d1860ba3872", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab362031ed2a4897b6010f2004472d1860ba3872", "html_url": "https://github.com/rust-lang/rust/commit/ab362031ed2a4897b6010f2004472d1860ba3872"}], "stats": {"total": 101, "additions": 48, "deletions": 53}, "files": [{"sha": "4cb386471c9cb95ada9278c30f225ff92cf2060f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=70c8fe5539f6a7888e631f2b1a0e59be7260389f", "patch": "@@ -104,14 +104,14 @@ fn check_fn_inner<'a, 'tcx>(\n     for typ in &generics.ty_params {\n         for bound in &typ.bounds {\n             if let TraitTyParamBound(ref trait_ref, _) = *bound {\n-                let bounds = trait_ref\n+                let bounds = &trait_ref\n                     .trait_ref\n                     .path\n                     .segments\n                     .last()\n                     .expect(\"a path must have at least one segment\")\n                     .parameters\n-                    .lifetimes();\n+                    .lifetimes;\n                 for bound in bounds {\n                     if bound.name != \"'static\" && !bound.is_elided() {\n                         return;\n@@ -282,25 +282,23 @@ impl<'v, 't> RefVisitor<'v, 't> {\n \n     fn collect_anonymous_lifetimes(&mut self, qpath: &QPath, ty: &Ty) {\n         let last_path_segment = &last_path_segment(qpath).parameters;\n-        if let AngleBracketedParameters(ref params) = *last_path_segment {\n-            if params.lifetimes.is_empty() {\n-                let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n-                match self.cx.tables.qpath_def(qpath, hir_id) {\n-                    Def::TyAlias(def_id) |\n-                    Def::Struct(def_id) => {\n-                        let generics = self.cx.tcx.generics_of(def_id);\n-                        for _ in generics.regions.as_slice() {\n-                            self.record(&None);\n-                        }\n-                    },\n-                    Def::Trait(def_id) => {\n-                        let trait_def = self.cx.tcx.trait_def(def_id);\n-                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n-                            self.record(&None);\n-                        }\n-                    },\n-                    _ => (),\n-                }\n+        if !last_path_segment.parenthesized && last_path_segment.lifetimes.is_empty() {\n+            let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n+            match self.cx.tables.qpath_def(qpath, hir_id) {\n+                Def::TyAlias(def_id) |\n+                Def::Struct(def_id) => {\n+                    let generics = self.cx.tcx.generics_of(def_id);\n+                    for _ in generics.regions.as_slice() {\n+                        self.record(&None);\n+                    }\n+                },\n+                Def::Trait(def_id) => {\n+                    let trait_def = self.cx.tcx.trait_def(def_id);\n+                    for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n+                        self.record(&None);\n+                    }\n+                },\n+                _ => (),\n             }\n         }\n     }"}, {"sha": "bb3ab92047e85ec596f49b825a2ca7b294a2f572", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=70c8fe5539f6a7888e631f2b1a0e59be7260389f", "patch": "@@ -1464,11 +1464,11 @@ fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Gener\n                         let path = &ptr.trait_ref.path;\n                         match_path_old(path, name) &&\n                             path.segments.last().map_or(false, |s| {\n-                                if let hir::PathParameters::AngleBracketedParameters(ref data) = s.parameters {\n-                                    data.types.len() == 1 &&\n-                                        (is_self_ty(&data.types[0]) || is_ty(&*data.types[0], self_ty))\n-                                } else {\n+                                if s.parameters.parenthesized {\n                                     false\n+                                } else {\n+                                    s.parameters.types.len() == 1 &&\n+                                        (is_self_ty(&s.parameters.types[0]) || is_ty(&*s.parameters.types[0], self_ty))\n                                 }\n                             })\n                     } else {"}, {"sha": "15ebe648500088f6d625d92e98e08dde36e10a74", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=70c8fe5539f6a7888e631f2b1a0e59be7260389f", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         let TyPath(QPath::Resolved(_, ref path)) = input.node,\n                         let Some(elem_ty) = path.segments.iter()\n                             .find(|seg| seg.name == \"Vec\")\n-                            .map(|ps| ps.parameters.types()[0]),\n+                            .map(|ps| &ps.parameters.types[0]),\n                     ], {\n                         let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n                         db.span_suggestion(input.span,"}, {"sha": "83e212c36d151822fad17310988655c980797278", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=70c8fe5539f6a7888e631f2b1a0e59be7260389f", "patch": "@@ -208,8 +208,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n fn get_type_snippet(cx: &LateContext, path: &QPath, to_rty: Ty) -> String {\n     let seg = last_path_segment(path);\n     if_let_chain!{[\n-        let PathParameters::AngleBracketedParameters(ref ang) = seg.parameters,\n-        let Some(to_ty) = ang.types.get(1),\n+        !seg.parameters.parenthesized,\n+        let Some(to_ty) = seg.parameters.types.get(1),\n         let TyRptr(_, ref to_ty) = to_ty.node,\n     ], {\n         return snippet(cx, to_ty.ty.span, &to_rty.to_string()).to_string();"}, {"sha": "7c68eab801dc4f4c0f6e784373aec7f1d1f98135", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=70c8fe5539f6a7888e631f2b1a0e59be7260389f", "patch": "@@ -155,8 +155,8 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                 if Some(def_id) == cx.tcx.lang_items.owned_box() {\n                     let last = last_path_segment(qpath);\n                     if_let_chain! {[\n-                        let PathParameters::AngleBracketedParameters(ref ag) = last.parameters,\n-                        let Some(vec) = ag.types.get(0),\n+                        !last.parameters.parenthesized,\n+                        let Some(vec) = last.parameters.types.get(0),\n                         let TyPath(ref qpath) = vec.node,\n                         let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id))),\n                         match_def_path(cx.tcx, did, &paths::VEC),\n@@ -182,18 +182,18 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n             match *qpath {\n                 QPath::Resolved(Some(ref ty), ref p) => {\n                     check_ty(cx, ty, is_local);\n-                    for ty in p.segments.iter().flat_map(|seg| seg.parameters.types()) {\n+                    for ty in p.segments.iter().flat_map(|seg| seg.parameters.types.iter()) {\n                         check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::Resolved(None, ref p) => {\n-                    for ty in p.segments.iter().flat_map(|seg| seg.parameters.types()) {\n+                    for ty in p.segments.iter().flat_map(|seg| seg.parameters.types.iter()) {\n                         check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::TypeRelative(ref ty, ref seg) => {\n                     check_ty(cx, ty, is_local);\n-                    for ty in seg.parameters.types() {\n+                    for ty in seg.parameters.types.iter() {\n                         check_ty(cx, ty, is_local);\n                     }\n                 },\n@@ -209,8 +209,8 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                         Some(def_id) == cx.tcx.lang_items.owned_box(),\n                         let QPath::Resolved(None, ref path) = *qpath,\n                         let [ref bx] = *path.segments,\n-                        let PathParameters::AngleBracketedParameters(ref ab_data) = bx.parameters,\n-                        let [ref inner] = *ab_data.types\n+                        !bx.parameters.parenthesized,\n+                        let [ref inner] = *bx.parameters.types\n                     ], {\n                         if is_any_trait(inner) {\n                             // Ignore `Box<Any>` types, see #1884 for details."}, {"sha": "fffeb3bb69955b86ef18496a1d82f388b92effcf", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=70c8fe5539f6a7888e631f2b1a0e59be7260389f", "patch": "@@ -56,16 +56,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n         if_let_chain!([\n             let ItemImpl(.., ref item_type, ref refs) = item.node,\n             let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,\n-            let PathParameters::AngleBracketedParameters(ref param_data)\n-              = item_path.segments.last().expect(SEGMENTS_MSG).parameters,\n-            param_data.lifetimes.len() == 0,\n         ], {\n-            let visitor = &mut UseSelfVisitor {\n-                item_path: item_path,\n-                cx: cx,\n-            };\n-            for impl_item_ref in refs {\n-                visitor.visit_impl_item(cx.tcx.hir.impl_item(impl_item_ref.id));\n+            let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).parameters;\n+            if !parameters.parenthesized && parameters.lifetimes.len() == 0 {\n+                let visitor = &mut UseSelfVisitor {\n+                    item_path: item_path,\n+                    cx: cx,\n+                };\n+                for impl_item_ref in refs {\n+                    visitor.visit_impl_item(cx.tcx.hir.impl_item(impl_item_ref.id));\n+                }\n             }\n         })\n     }"}, {"sha": "4890bb81dc3beeb8a9edcd1aec3cf9a8dc88a04d", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8fe5539f6a7888e631f2b1a0e59be7260389f/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=70c8fe5539f6a7888e631f2b1a0e59be7260389f", "patch": "@@ -195,18 +195,15 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     }\n \n     fn eq_path_parameters(&self, left: &PathParameters, right: &PathParameters) -> bool {\n-        match (left, right) {\n-            (&AngleBracketedParameters(ref left), &AngleBracketedParameters(ref right)) => {\n+        if !(left.parenthesized || right.parenthesized) {\n                 over(&left.lifetimes, &right.lifetimes, |l, r| self.eq_lifetime(l, r)) &&\n                     over(&left.types, &right.types, |l, r| self.eq_ty(l, r)) &&\n                     over(&left.bindings, &right.bindings, |l, r| self.eq_type_binding(l, r))\n-            },\n-            (&ParenthesizedParameters(ref left), &ParenthesizedParameters(ref right)) => {\n-                over(&left.inputs, &right.inputs, |l, r| self.eq_ty(l, r)) &&\n-                    both(&left.output, &right.output, |l, r| self.eq_ty(l, r))\n-            },\n-            (&AngleBracketedParameters(_), &ParenthesizedParameters(_)) |\n-            (&ParenthesizedParameters(_), &AngleBracketedParameters(_)) => false,\n+        } else if left.parenthesized && right.parenthesized {\n+                over(left.inputs(), right.inputs(), |l, r| self.eq_ty(l, r)) &&\n+                    both(&Some(&left.bindings[0].ty), &Some(&right.bindings[0].ty), |l, r| self.eq_ty(l, r))\n+        } else {\n+            false\n         }\n     }\n "}]}