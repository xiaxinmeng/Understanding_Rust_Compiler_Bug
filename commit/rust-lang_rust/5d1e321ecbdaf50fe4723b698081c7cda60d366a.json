{"sha": "5d1e321ecbdaf50fe4723b698081c7cda60d366a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMWUzMjFlY2JkYWY1MGZlNDcyM2I2OTgwODFjN2NkYTYwZDM2NmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T19:46:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T20:11:21Z"}, "message": "rt: Remove rust_chan", "tree": {"sha": "b9d5bc27f8787a81a67647db4543ed3204040721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d5bc27f8787a81a67647db4543ed3204040721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d1e321ecbdaf50fe4723b698081c7cda60d366a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1e321ecbdaf50fe4723b698081c7cda60d366a", "html_url": "https://github.com/rust-lang/rust/commit/5d1e321ecbdaf50fe4723b698081c7cda60d366a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d1e321ecbdaf50fe4723b698081c7cda60d366a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716", "url": "https://api.github.com/repos/rust-lang/rust/commits/39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716", "html_url": "https://github.com/rust-lang/rust/commit/39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716"}], "stats": {"total": 169, "additions": 29, "deletions": 140}, "files": [{"sha": "0208fe7ab55536047e8c26537ccdd25030afa4c5", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e321ecbdaf50fe4723b698081c7cda60d366a/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e321ecbdaf50fe4723b698081c7cda60d366a/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=5d1e321ecbdaf50fe4723b698081c7cda60d366a", "patch": "@@ -45,7 +45,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_scheduler.cpp \\\n               rt/rust_task.cpp \\\n               rt/rust_task_list.cpp \\\n-              rt/rust_chan.cpp \\\n               rt/rust_port.cpp \\\n               rt/rust_upcall.cpp \\\n               rt/rust_log.cpp \\\n@@ -78,7 +77,6 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust_gc.h \\\n                rt/rust_internal.h \\\n                rt/rust_util.h \\\n-               rt/rust_chan.h \\\n                rt/rust_env.h \\\n                rt/rust_obstack.h \\\n                rt/rust_unwind.h \\"}, {"sha": "3b69fcf946615d86d857c0606cb3d8329d9e435a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=5d1e321ecbdaf50fe4723b698081c7cda60d366a", "patch": "@@ -463,20 +463,15 @@ new_port(size_t unit_sz) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n-    // take a reference on behalf of the port\n-    task->ref();\n+    // port starts with refcount == 1\n     return new (task->kernel, \"rust_port\") rust_port(task, unit_sz);\n }\n \n extern \"C\" CDECL void\n del_port(rust_port *port) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n-    I(task->sched, !port->ref_count);\n-    delete port;\n-\n-    // FIXME: this should happen in the port.\n-    task->deref();\n+    port->deref();\n }\n \n extern \"C\" CDECL rust_port_id\n@@ -486,7 +481,6 @@ get_port_id(rust_port *port) {\n \n extern \"C\" CDECL\n void drop_port(rust_port *port) {\n-    port->ref_count--;\n }\n \n extern \"C\" CDECL void\n@@ -497,10 +491,11 @@ chan_id_send(type_desc *t, rust_task_id target_task_id,\n     rust_task *target_task = task->kernel->get_task_by_id(target_task_id);\n     if(target_task) {\n         rust_port *port = target_task->get_port_by_id(target_port_id);\n+        target_task->deref();\n         if(port) {\n             port->send(sptr);\n+            port->deref();\n         }\n-        target_task->deref();\n     }\n }\n "}, {"sha": "9a41dacc3231a51ace0f2a6b671b76fb9de3ce66", "filename": "src/rt/rust_chan.cpp", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716", "patch": "@@ -1,53 +0,0 @@\n-#include \"rust_internal.h\"\n-#include \"rust_chan.h\"\n-\n-/**\n- * Create a new rust channel and associate it with the specified port.\n- */\n-rust_chan::rust_chan(rust_kernel *kernel, rust_port *port,\n-                     size_t unit_sz)\n-    : ref_count(0),\n-      kernel(kernel),\n-      port(port),\n-      buffer(kernel, unit_sz) {\n-    KLOG(kernel, comm, \"new rust_chan(task=0x%\" PRIxPTR\n-        \", port=0x%\" PRIxPTR \") -> chan=0x%\" PRIxPTR,\n-        (uintptr_t) task, (uintptr_t) port, (uintptr_t) this);\n-\n-    A(kernel, port != NULL, \"Port must not be null\");\n-    this->task = port->task;\n-    this->task->ref();\n-}\n-\n-rust_chan::~rust_chan() {\n-    KLOG(kernel, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n-         (uintptr_t) this);\n-\n-    I(this->kernel, !is_associated());\n-\n-    A(kernel, is_associated() == false,\n-      \"Channel must be disassociated before being freed.\");\n-\n-    task->deref();\n-    task = NULL;\n-}\n-\n-bool rust_chan::is_associated() {\n-    return port != NULL;\n-}\n-\n-rust_chan *rust_chan::clone(rust_task *target) {\n-    return new (target->kernel, \"cloned chan\")\n-        rust_chan(kernel, port, buffer.unit_sz);\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}, {"sha": "4fb78e062c7a733016a542ce47d3e80a45d924b1", "filename": "src/rt/rust_chan.h", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716/src%2Frt%2Frust_chan.h", "raw_url": "https://github.com/rust-lang/rust/raw/39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716/src%2Frt%2Frust_chan.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.h?ref=39084fb881a1a0fd2db6c8df04ccd5cc0a9c6716", "patch": "@@ -1,35 +0,0 @@\n-#ifndef RUST_CHAN_H\n-#define RUST_CHAN_H\n-\n-class rust_chan : public kernel_owned<rust_chan>,\n-                  public rust_cond {\n-    ~rust_chan();\n-\n-public:\n-    RUST_ATOMIC_REFCOUNT();\n-    rust_chan(rust_kernel *kernel, rust_port *port,\n-              size_t unit_sz);\n-\n-    rust_kernel *kernel;\n-    rust_task *task;\n-    rust_port *port;\n-    size_t idx;\n-    circular_buffer buffer;\n-\n-    bool is_associated();\n-\n-    rust_chan *clone(rust_task *target);\n-};\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//\n-\n-#endif /* RUST_CHAN_H */"}, {"sha": "1e65d701e8f31958083f3c8fa55c5430b6f32b79", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=5d1e321ecbdaf50fe4723b698081c7cda60d366a", "patch": "@@ -55,7 +55,6 @@ struct rust_scheduler;\n struct rust_task;\n class rust_log;\n class rust_port;\n-class rust_chan;\n class rust_kernel;\n class rust_crate_cache;\n \n@@ -282,7 +281,6 @@ struct type_desc {\n \n #include \"circular_buffer.h\"\n #include \"rust_task.h\"\n-#include \"rust_chan.h\"\n #include \"rust_port.h\"\n #include \"memory.h\"\n "}, {"sha": "5daf5e40033c2b7641c8eb229b2a158fe6dc9642", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=5d1e321ecbdaf50fe4723b698081c7cda60d366a", "patch": "@@ -1,61 +1,47 @@\n #include \"rust_internal.h\"\n #include \"rust_port.h\"\n-#include \"rust_chan.h\"\n \n \n rust_port::rust_port(rust_task *task, size_t unit_sz)\n     : ref_count(1), kernel(task->kernel), task(task),\n-      unit_sz(unit_sz) {\n+      unit_sz(unit_sz), buffer(kernel, unit_sz) {\n \n     LOG(task, comm,\n         \"new rust_port(task=0x%\" PRIxPTR \", unit_sz=%d) -> port=0x%\"\n         PRIxPTR, (uintptr_t)task, unit_sz, (uintptr_t)this);\n \n+    task->ref();\n     id = task->register_port(this);\n-    remote_chan = new (task->kernel, \"rust_chan\")\n-        rust_chan(task->kernel, this, unit_sz);\n-    remote_chan->ref();\n-    remote_chan->port = this;\n }\n \n rust_port::~rust_port() {\n     LOG(task, comm, \"~rust_port 0x%\" PRIxPTR, (uintptr_t) this);\n \n-    {\n-        scoped_lock with(lock);\n-        remote_chan->port = NULL;\n-        remote_chan->deref();\n-        remote_chan = NULL;\n-    }\n-\n     task->release_port(id);\n+    task->deref();\n }\n \n void rust_port::send(void *sptr) {\n-    if (!remote_chan->is_associated()) {\n-        W(kernel, remote_chan->is_associated(),\n-          \"rust_chan::transmit with no associated port.\");\n-        return;\n-    }\n-\n+    // FIXME: Is this lock really necessary? Why do we send with the lock\n+    // but not receive with the lock?\n     scoped_lock with(lock);\n \n-    remote_chan->buffer.enqueue(sptr);\n+    buffer.enqueue(sptr);\n \n-    A(kernel, !remote_chan->buffer.is_empty(),\n+    A(kernel, !buffer.is_empty(),\n       \"rust_chan::transmit with nothing to send.\");\n \n     if (task->blocked_on(this)) {\n         KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n-        remote_chan->buffer.dequeue(task->rendezvous_ptr);\n+        buffer.dequeue(task->rendezvous_ptr);\n         task->rendezvous_ptr = 0;\n         task->wakeup(this);\n     }\n }\n \n bool rust_port::receive(void *dptr) {\n-    if (remote_chan->buffer.is_empty() == false) {\n-        remote_chan->buffer.dequeue(dptr);\n+    if (buffer.is_empty() == false) {\n+        buffer.dequeue(dptr);\n         LOG(task, comm, \"<=== read data ===\");\n         return true;\n     }\n@@ -64,9 +50,8 @@ bool rust_port::receive(void *dptr) {\n \n void rust_port::log_state() {\n     LOG(task, comm,\n-        \"\\tchan: 0x%\" PRIxPTR \", size: %d\",\n-        remote_chan,\n-        remote_chan->buffer.size());\n+        \"port size: %d\",\n+        buffer.size());\n }\n \n //"}, {"sha": "4f735c59b63e1e0cf66a00c89d2893adbc285b7c", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=5d1e321ecbdaf50fe4723b698081c7cda60d366a", "patch": "@@ -3,14 +3,14 @@\n \n class rust_port : public kernel_owned<rust_port>, public rust_cond {\n public:\n-    RUST_REFCOUNTED(rust_port);\n+    RUST_ATOMIC_REFCOUNT();\n \n     rust_port_id id;\n \n     rust_kernel *kernel;\n     rust_task *task;\n-    rust_chan *remote_chan;\n     size_t unit_sz;\n+    circular_buffer buffer;\n \n     lock_and_signal lock;\n "}, {"sha": "493f16355106f2c8f545a01b269a15aa5fa6e1fc", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=5d1e321ecbdaf50fe4723b698081c7cda60d366a", "patch": "@@ -122,21 +122,20 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n rust_task::~rust_task()\n {\n     I(sched, !sched->lock.lock_held_by_current_thread());\n+    I(sched, port_table.is_empty());\n     DLOG(sched, task, \"~rust_task %s @0x%\" PRIxPTR \", refcnt=%d\",\n          name, (uintptr_t)this, ref_count);\n \n     if(user.notify_enabled) {\n-        rust_chan *target =\n-            get_chan_by_handle(&user.notify_chan);\n+        rust_port *target =\n+            get_port_by_chan_handle(&user.notify_chan);\n         if(target) {\n             task_notification msg;\n             msg.id = user.id;\n             msg.result = failed ? tr_failure : tr_success;\n \n-            if (target->is_associated()) {\n-                target->port->send(&msg);\n-                target->deref();\n-            }\n+            target->send(&msg);\n+            target->deref();\n         }\n     }\n \n@@ -552,16 +551,18 @@ rust_port *rust_task::get_port_by_id(rust_port_id id) {\n     scoped_lock with(lock);\n     rust_port *port = NULL;\n     port_table.get(id, &port);\n+    if (port) {\n+        port->ref();\n+    }\n     return port;\n }\n \n-rust_chan *rust_task::get_chan_by_handle(chan_handle *handle) {\n+rust_port *rust_task::get_port_by_chan_handle(chan_handle *handle) {\n     rust_task *target_task = kernel->get_task_by_id(handle->task);\n     if(target_task) {\n         rust_port *port = target_task->get_port_by_id(handle->port);\n         target_task->deref();\n-        port->remote_chan->ref();\n-        return port->remote_chan;\n+        return port;\n     }\n     return NULL;\n }"}, {"sha": "3bdc900250d349dca63fd0a041d332e97e8857e9", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e321ecbdaf50fe4723b698081c7cda60d366a/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=5d1e321ecbdaf50fe4723b698081c7cda60d366a", "patch": "@@ -209,7 +209,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // not at all safe.\n     intptr_t get_ref_count() const { return ref_count; }\n \n-    rust_chan *get_chan_by_handle(chan_handle *handle);\n+    rust_port *get_port_by_chan_handle(chan_handle *handle);\n \n     // FIXME: These functions only exist to get the tasking system off the\n     // ground. We should never be migrating shared boxes between tasks."}]}