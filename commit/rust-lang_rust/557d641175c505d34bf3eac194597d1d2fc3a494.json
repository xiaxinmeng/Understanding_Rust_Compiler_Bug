{"sha": "557d641175c505d34bf3eac194597d1d2fc3a494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1N2Q2NDExNzVjNTA1ZDM0YmYzZWFjMTk0NTk3ZDFkMmZjM2E0OTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-23T22:05:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-23T22:06:28Z"}, "message": "rt: Get RUST_TRACK_ORIGINS working. You can now call 'debug::dump_origin' in gdb and get a backtrace saying where a box came from.", "tree": {"sha": "3682443763943603f4afc8c52e166d313475ce19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3682443763943603f4afc8c52e166d313475ce19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/557d641175c505d34bf3eac194597d1d2fc3a494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/557d641175c505d34bf3eac194597d1d2fc3a494", "html_url": "https://github.com/rust-lang/rust/commit/557d641175c505d34bf3eac194597d1d2fc3a494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/557d641175c505d34bf3eac194597d1d2fc3a494/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b1a3bb8e6296541f0200e42d54a77363709a9bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1a3bb8e6296541f0200e42d54a77363709a9bd", "html_url": "https://github.com/rust-lang/rust/commit/7b1a3bb8e6296541f0200e42d54a77363709a9bd"}], "stats": {"total": 86, "additions": 51, "deletions": 35}, "files": [{"sha": "3fba1ada3f3dea503620648b8c27a310aea01836", "filename": "src/rt/rust_abi.cpp", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/557d641175c505d34bf3eac194597d1d2fc3a494/src%2Frt%2Frust_abi.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/557d641175c505d34bf3eac194597d1d2fc3a494/src%2Frt%2Frust_abi.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.cpp?ref=557d641175c505d34bf3eac194597d1d2fc3a494", "patch": "@@ -1,10 +1,19 @@\n // ABI-specific routines.\n \n+#include <sstream>\n+#include <string>\n #include <vector>\n #include <cstdlib>\n #include <stdint.h>\n #include \"rust_abi.h\"\n \n+#if defined(__APPLE__) || defined(__linux__)\n+#define HAVE_DLFCN_H\n+#include <dlfcn.h>\n+#elif defined(_WIN32)\n+// TODO\n+#endif\n+\n #define END_OF_STACK_RA     (void (*)())0xdeadbeef\n \n weak_symbol<uint32_t> abi_version(\"rust_abi_version\");\n@@ -15,6 +24,29 @@ uint32_t get_abi_version() {\n \n namespace stack_walk {\n \n+#ifdef HAVE_DLFCN_H\n+std::string\n+frame::symbol() const {\n+    std::stringstream ss;\n+\n+    Dl_info info;\n+    if (!dladdr((void *)ra, &info))\n+        ss << \"??\";\n+    else\n+        ss << info.dli_sname;\n+\n+    ss << \" @ \" << std::hex << (uintptr_t)ra;\n+    return ss.str();\n+}\n+#else\n+std::string\n+frame::symbol() {\n+    std::stringstream ss;\n+    ss << std::hex << (uintptr_t)ra;\n+    return ss.str();\n+}\n+#endif\n+\n std::vector<frame>\n backtrace() {\n     std::vector<frame> frames;\n@@ -31,5 +63,17 @@ backtrace() {\n     return frames;\n }\n \n+std::string\n+symbolicate(const std::vector<frame> &frames) {\n+    std::stringstream ss;\n+    std::vector<frame>::const_iterator begin(frames.begin()),\n+                                       end(frames.end());\n+    while (begin != end) {\n+        ss << begin->symbol() << std::endl;\n+        ++begin;\n+    }\n+    return ss.str();\n+}\n+\n }   // end namespace stack_walk\n "}, {"sha": "c533d372b7271981df121cac35b53cf30df07be9", "filename": "src/rt/rust_abi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/557d641175c505d34bf3eac194597d1d2fc3a494/src%2Frt%2Frust_abi.h", "raw_url": "https://github.com/rust-lang/rust/raw/557d641175c505d34bf3eac194597d1d2fc3a494/src%2Frt%2Frust_abi.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.h?ref=557d641175c505d34bf3eac194597d1d2fc3a494", "patch": "@@ -4,6 +4,7 @@\n #define RUST_ABI_H\n \n #include <cstdlib>\n+#include <string>\n #include <vector>\n \n #ifdef __WIN32__\n@@ -51,9 +52,12 @@ struct frame {\n         ra = *(void (**)())(bp + sizeof(void *));\n         bp = *(uint8_t **)bp;\n     }\n+\n+    std::string symbol() const;\n };\n \n std::vector<frame> backtrace();\n+std::string symbolicate(const std::vector<frame> &frames);\n \n }   // end namespace stack_walk\n "}, {"sha": "9591d9ade070feb322161bf8a0fe8260c8e1cac0", "filename": "src/rt/rust_debug.cpp", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/557d641175c505d34bf3eac194597d1d2fc3a494/src%2Frt%2Frust_debug.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/557d641175c505d34bf3eac194597d1d2fc3a494/src%2Frt%2Frust_debug.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_debug.cpp?ref=557d641175c505d34bf3eac194597d1d2fc3a494", "patch": "@@ -1,5 +1,6 @@\n // Routines useful when debugging the Rust runtime.\n \n+#include \"rust_abi.h\"\n #include \"rust_debug.h\"\n #include \"rust_internal.h\"\n \n@@ -8,13 +9,6 @@\n #include <sstream>\n #include <stdint.h>\n \n-#if defined(__APPLE__) || defined(__linux__)\n-#define HAVE_BACKTRACE\n-#include <execinfo.h>\n-#elif defined(_WIN32)\n-#include <windows.h>\n-#endif\n-\n namespace {\n \n debug::flag track_origins(\"RUST_TRACK_ORIGINS\");\n@@ -23,38 +17,12 @@ debug::flag track_origins(\"RUST_TRACK_ORIGINS\");\n \n namespace debug {\n \n-#ifdef HAVE_BACKTRACE\n-std::string\n-backtrace() {\n-    void *call_stack[128];\n-    int n_frames = ::backtrace(call_stack, 128);\n-    char **syms = backtrace_symbols(call_stack, n_frames);\n-\n-    std::cerr << \"n_frames: \" << n_frames << std::endl;\n-\n-    std::stringstream ss;\n-    for (int i = 0; i < n_frames; i++) {\n-        std::cerr << syms[i] << std::endl;\n-        ss << syms[i] << std::endl;\n-    }\n-\n-    free(syms);\n-\n-    return ss.str();\n-}\n-#else\n-std::string\n-backtrace() {\n-    std::string s;\n-    return s;\n-}\n-#endif\n-\n void\n maybe_track_origin(rust_task *task, void *ptr) {\n     if (!*track_origins)\n         return;\n-    task->debug.origins[ptr] = backtrace();\n+    task->debug.origins[ptr] =\n+        stack_walk::symbolicate(stack_walk::backtrace());\n }\n \n void"}]}