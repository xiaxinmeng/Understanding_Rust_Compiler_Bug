{"sha": "0fa70c3b1272c986eed27f838b645892ad435772", "node_id": "C_kwDOAAsO6NoAKDBmYTcwYzNiMTI3MmM5ODZlZWQyN2Y4MzhiNjQ1ODkyYWQ0MzU3NzI", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-20T20:21:57Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-27T17:33:56Z"}, "message": "safe transmute: revise `Hash`, `PartialEq` impls on `VariantDef`, `FieldDef`\n\nExhaustively destructure parameter(s) so that changes to type\ndefinitions will lead to compile errors, thus reminding contributors\nto re-assess the assumptions underpinning these impls.\n\nref: https://github.com/rust-lang/rust/pull/92268/#discussion_r925241377\nref: https://github.com/rust-lang/rust/pull/92268/#discussion_r925241718", "tree": {"sha": "fbc2f3d8bce5d3c71cb87debfcb7a2697253d1be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbc2f3d8bce5d3c71cb87debfcb7a2697253d1be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa70c3b1272c986eed27f838b645892ad435772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa70c3b1272c986eed27f838b645892ad435772", "html_url": "https://github.com/rust-lang/rust/commit/0fa70c3b1272c986eed27f838b645892ad435772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa70c3b1272c986eed27f838b645892ad435772/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c5c291882d3cafd26757bb1326fc3b3135a87f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5c291882d3cafd26757bb1326fc3b3135a87f5", "html_url": "https://github.com/rust-lang/rust/commit/8c5c291882d3cafd26757bb1326fc3b3135a87f5"}], "stats": {"total": 73, "additions": 61, "deletions": 12}, "files": [{"sha": "ce931d0fcd3be2232560f4091f682232d8da7657", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 61, "deletions": 12, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0fa70c3b1272c986eed27f838b645892ad435772/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa70c3b1272c986eed27f838b645892ad435772/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0fa70c3b1272c986eed27f838b645892ad435772", "patch": "@@ -1724,23 +1724,56 @@ impl VariantDef {\n     }\n }\n \n-/// There should be only one VariantDef for each `def_id`, therefore\n-/// it is fine to implement `PartialEq` only based on `def_id`.\n impl PartialEq for VariantDef {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n-        self.def_id == other.def_id\n+        // There should be only one `VariantDef` for each `def_id`, therefore\n+        // it is fine to implement `PartialEq` only based on `def_id`.\n+        //\n+        // Below, we exhaustively destructure `self` and `other` so that if the\n+        // definition of `VariantDef` changes, a compile-error will be produced,\n+        // reminding us to revisit this assumption.\n+\n+        let Self {\n+            def_id: lhs_def_id,\n+            ctor_def_id: _,\n+            name: _,\n+            discr: _,\n+            fields: _,\n+            ctor_kind: _,\n+            flags: _,\n+        } = &self;\n+\n+        let Self {\n+            def_id: rhs_def_id,\n+            ctor_def_id: _,\n+            name: _,\n+            discr: _,\n+            fields: _,\n+            ctor_kind: _,\n+            flags: _,\n+        } = other;\n+\n+        lhs_def_id == rhs_def_id\n     }\n }\n \n impl Eq for VariantDef {}\n \n-/// There should be only one VariantDef for each `def_id`, therefore\n-/// it is fine to implement `Hash` only based on `def_id`.\n impl Hash for VariantDef {\n     #[inline]\n     fn hash<H: Hasher>(&self, s: &mut H) {\n-        self.def_id.hash(s)\n+        // There should be only one `VariantDef` for each `def_id`, therefore\n+        // it is fine to implement `Hash` only based on `def_id`.\n+        //\n+        // Below, we exhaustively destructure `self` so that if the definition\n+        // of `VariantDef` changes, a compile-error will be produced, reminding\n+        // us to revisit this assumption.\n+\n+        let Self { def_id, ctor_def_id: _, name: _, discr: _, fields: _, ctor_kind: _, flags: _ } =\n+            &self;\n+\n+        def_id.hash(s)\n     }\n }\n \n@@ -1764,23 +1797,39 @@ pub struct FieldDef {\n     pub vis: Visibility,\n }\n \n-/// There should be only one FieldDef for each `did`, therefore\n-/// it is fine to implement `PartialEq` only based on `did`.\n impl PartialEq for FieldDef {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n-        self.did == other.did\n+        // There should be only one `FieldDef` for each `did`, therefore it is\n+        // fine to implement `PartialEq` only based on `did`.\n+        //\n+        // Below, we exhaustively destructure `self` so that if the definition\n+        // of `FieldDef` changes, a compile-error will be produced, reminding\n+        // us to revisit this assumption.\n+\n+        let Self { did: lhs_did, name: _, vis: _ } = &self;\n+\n+        let Self { did: rhs_did, name: _, vis: _ } = other;\n+\n+        lhs_did == rhs_did\n     }\n }\n \n impl Eq for FieldDef {}\n \n-/// There should be only one FieldDef for each `did`, therefore\n-/// it is fine to implement `Hash` only based on `did`.\n impl Hash for FieldDef {\n     #[inline]\n     fn hash<H: Hasher>(&self, s: &mut H) {\n-        self.did.hash(s)\n+        // There should be only one `FieldDef` for each `did`, therefore it is\n+        // fine to implement `Hash` only based on `did`.\n+        //\n+        // Below, we exhaustively destructure `self` so that if the definition\n+        // of `FieldDef` changes, a compile-error will be produced, reminding\n+        // us to revisit this assumption.\n+\n+        let Self { did, name: _, vis: _ } = &self;\n+\n+        did.hash(s)\n     }\n }\n "}]}