{"sha": "8ec3696b37ef6508650f6df727f6d92b7bef06c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzM2OTZiMzdlZjY1MDg2NTBmNmRmNzI3ZjZkOTJiN2JlZjA2YzQ=", "commit": {"author": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-01-01T23:36:49Z"}, "committer": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-01-07T01:30:21Z"}, "message": "Made eddyb's suggested change\n\nThe adjusted type is now used instead in cases of autoderefs.", "tree": {"sha": "423a13324eb2762806fb86ac5acff22a87f5ff9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423a13324eb2762806fb86ac5acff22a87f5ff9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec3696b37ef6508650f6df727f6d92b7bef06c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec3696b37ef6508650f6df727f6d92b7bef06c4", "html_url": "https://github.com/rust-lang/rust/commit/8ec3696b37ef6508650f6df727f6d92b7bef06c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec3696b37ef6508650f6df727f6d92b7bef06c4/comments", "author": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf199d49652df2561459f39ff4f6f9ea02989999", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf199d49652df2561459f39ff4f6f9ea02989999", "html_url": "https://github.com/rust-lang/rust/commit/bf199d49652df2561459f39ff4f6f9ea02989999"}], "stats": {"total": 91, "additions": 26, "deletions": 65}, "files": [{"sha": "93f9590a83e43c059c491a3ac28451f914bd88f6", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 26, "deletions": 65, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8ec3696b37ef6508650f6df727f6d92b7bef06c4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec3696b37ef6508650f6df727f6d92b7bef06c4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=8ec3696b37ef6508650f6df727f6d92b7bef06c4", "patch": "@@ -12,12 +12,12 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-use check::{FnCtxt, LvalueOp};\n+use check::FnCtxt;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::InferCtxt;\n-use rustc::ty::{self, LvaluePreference, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::adjustment::{Adjust, Adjustment};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::util::nodemap::DefIdSet;\n@@ -167,73 +167,34 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     // usize-ish\n     fn fix_index_builtin_expr(&mut self, e: &hir::Expr) {\n         if let hir::ExprIndex(ref base, ref index) = e.node {\n-            let base_ty = self.fcx.node_ty(base.hir_id);\n+            let mut tables = self.fcx.tables.borrow_mut();\n+            \n+            let base_ty = tables.expr_ty_adjusted(&base);\n             let base_ty = self.fcx.resolve_type_vars_if_possible(&base_ty);\n-            let index_ty = self.fcx.node_ty(index.hir_id);\n+            let index_ty = tables.expr_ty_adjusted(&index);\n             let index_ty = self.fcx.resolve_type_vars_if_possible(&index_ty);\n \n-            if index_ty.is_uint() {\n-                // HACK: the *actual* type being indexed is not stored anywhere\n-                // so we try to find it again here by derefs\n-                let mut autoderef = self.fcx.autoderef(e.span, base_ty);\n-                let builtin_ty : Option<_> = {\n-                    loop {\n-                        // This is essentially a duplicate of the index discovery\n-                        // logic in typechecking code\n-                        // Find the first type dereffable to which has builtin \n-                        // indexing - this \n-                        if let Some(_) = autoderef.next() {\n-                            let current_ty = autoderef.unambiguous_final_ty();\n-\n-                            if current_ty.builtin_index().is_some() {\n-                                // If there is a builtin index, use it\n-                                break Some(current_ty);\n-                            } else {\n-                                // If there's an overloaded index which happens\n-                                // to take a uint, stop looking - otherwise we\n-                                // might incorrectly deref further\n-                                let overloaded_method = \n-                                    self.fcx.try_overloaded_lvalue_op(\n-                                        e.span,\n-                                        base_ty,\n-                                        &[index_ty],\n-                                        LvaluePreference::NoPreference,\n-                                        LvalueOp::Index\n-                                    );\n-\n-                                if overloaded_method.is_some() {\n-                                    break None;\n-                                }\n-                            }\n-                        } else {\n-                            break None;\n-                        }\n+            if base_ty.builtin_index().is_some() && index_ty.is_uint() {\n+                \n+                // Remove the method call record, which blocks use in\n+                // constant or static cases\n+                tables.type_dependent_defs_mut().remove(e.hir_id);\n+                tables.node_substs_mut().remove(e.hir_id);\n+\n+                tables.adjustments_mut().get_mut(base.hir_id).map(|a| {\n+                    // Discard the need for a mutable borrow\n+                    match a.pop() {\n+                        // Extra adjustment made when indexing causes a drop\n+                        // of size information - we need to get rid of it\n+                        // Since this is \"after\" the other adjustment to be\n+                        // discarded, we do an extra `pop()`\n+                        Some(Adjustment { kind: Adjust::Unsize, .. }) => {\n+                            // So the borrow discard actually happens here\n+                            a.pop();\n+                        },\n+                        _ => {}\n                     }\n-                };\n-\n-                if builtin_ty.is_some() {\n-                    let mut tables = self.fcx.tables.borrow_mut();\n-                 \n-                    // Remove the method call record, which blocks use in\n-                    // constant or static cases\n-                    tables.type_dependent_defs_mut().remove(e.hir_id);\n-                    tables.node_substs_mut().remove(e.hir_id);\n-\n-                    tables.adjustments_mut().get_mut(base.hir_id).map(|a| {\n-                        // Discard the need for a mutable borrow\n-                        match a.pop() {\n-                            // Extra adjustment made when indexing causes a drop\n-                            // of size information - we need to get rid of it\n-                            // Since this is \"after\" the other adjustment to be\n-                            // discarded, we do an extra `pop()`\n-                            Some(Adjustment { kind: Adjust::Unsize, .. }) => {\n-                                // So the borrow discard actually happens here\n-                                a.pop();\n-                            },\n-                            _ => {}\n-                        }\n-                    });\n-                }\n+                });\n             }\n         }\n     }"}]}