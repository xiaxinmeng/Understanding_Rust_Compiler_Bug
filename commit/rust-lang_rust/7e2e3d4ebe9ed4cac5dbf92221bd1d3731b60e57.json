{"sha": "7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "node_id": "C_kwDOAAsO6NoAKDdlMmUzZDRlYmU5ZWQ0Y2FjNWRiZjkyMjIxYmQxZDM3MzFiNjBlNTc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T08:50:32Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T08:50:32Z"}, "message": "Don't lose an obligation cause", "tree": {"sha": "87e0b48571653fa189eef94dbf82454d0b514724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87e0b48571653fa189eef94dbf82454d0b514724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "html_url": "https://github.com/rust-lang/rust/commit/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312d27d0a2aa0c47a00b6803c54a9281d2038c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/312d27d0a2aa0c47a00b6803c54a9281d2038c68", "html_url": "https://github.com/rust-lang/rust/commit/312d27d0a2aa0c47a00b6803c54a9281d2038c68"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "9752e8e73e79ebece79e111985182179d2243603", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "patch": "@@ -309,8 +309,6 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     }\n                     .into()\n                 });\n-            } else {\n-                cause = traits::ObligationCause::misc(self.span, self.body_id);\n             }\n             extend_cause_with_original_assoc_item_obligation(\n                 tcx, trait_ref, item, &mut cause, predicate,"}, {"sha": "a65f84ae58eadd479dffcd1d22aac7e643993330", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "patch": "@@ -2,10 +2,18 @@ error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n   --> $DIR/hr-associated-type-projection-1.rs:13:33\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-   |      - this type parameter      ^^^^^^^^^^^^^^^^^ expected associated type, found type parameter `T`\n+   |      - this type parameter      ^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n-   = note: expected associated type `<T as Deref>::Target`\n-               found type parameter `T`\n+   = note: expected type parameter `T`\n+             found associated type `<T as Deref>::Target`\n+note: required by a bound in `UnsafeCopy`\n+  --> $DIR/hr-associated-type-projection-1.rs:3:64\n+   |\n+LL | trait UnsafeCopy<'a, T: Copy>\n+   |       ---------- required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n+   |                                                                ^^^^^^^^^^ required by this bound in `UnsafeCopy`\n help: consider further restricting this bound\n    |\n LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<'_, T> for T {"}, {"sha": "e2b177b951cc9a2c2bda0f492468fc4e97faa295", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "patch": "@@ -2,8 +2,13 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/builtin-superkinds-self-type.rs:10:16\n    |\n LL | impl <T: Sync> Foo for T { }\n-   |                ^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                ^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n+note: ...that is required by this bound\n+  --> $DIR/builtin-superkinds-self-type.rs:6:24\n+   |\n+LL | trait Foo : Sized+Sync+'static {\n+   |                        ^^^^^^^\n help: consider adding an explicit lifetime bound...\n    |\n LL | impl <T: Sync + 'static> Foo for T { }"}, {"sha": "f36947914179cc45e0f017f6dc32ef4ceb6e35c5", "filename": "src/test/ui/traits/assoc-type-in-superbad.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr?ref=7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "patch": "@@ -2,7 +2,13 @@ error[E0271]: type mismatch resolving `<std::vec::IntoIter<i32> as Iterator>::It\n   --> $DIR/assoc-type-in-superbad.rs:12:16\n    |\n LL |     type Key = u32;\n-   |                ^^^ expected `i32`, found `u32`\n+   |                ^^^ expected `u32`, found `i32`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/assoc-type-in-superbad.rs:7:25\n+   |\n+LL | pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}]}