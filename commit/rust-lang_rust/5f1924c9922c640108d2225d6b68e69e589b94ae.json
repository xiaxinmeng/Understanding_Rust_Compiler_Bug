{"sha": "5f1924c9922c640108d2225d6b68e69e589b94ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTkyNGM5OTIyYzY0MDEwOGQyMjI1ZDZiNjhlNjllNTg5Yjk0YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-11T12:25:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-11T12:25:11Z"}, "message": "Auto merge of #60714 - varkor:existential-global-lift-ice, r=oli-obk\n\nFix ICE with un-feature-gated existential type\n\nFixes https://github.com/rust-lang/rust/issues/60371.\n\nr? @oli-obk", "tree": {"sha": "9c82d71d54414451e9b7b18ee3089fd569556a47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c82d71d54414451e9b7b18ee3089fd569556a47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1924c9922c640108d2225d6b68e69e589b94ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1924c9922c640108d2225d6b68e69e589b94ae", "html_url": "https://github.com/rust-lang/rust/commit/5f1924c9922c640108d2225d6b68e69e589b94ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1924c9922c640108d2225d6b68e69e589b94ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af39a1fd73de7f4b9c895d3377e03f8fa3221449", "url": "https://api.github.com/repos/rust-lang/rust/commits/af39a1fd73de7f4b9c895d3377e03f8fa3221449", "html_url": "https://github.com/rust-lang/rust/commit/af39a1fd73de7f4b9c895d3377e03f8fa3221449"}, {"sha": "aa9369c7a4f463ea9e2d1f5ceecccbeb026baa41", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9369c7a4f463ea9e2d1f5ceecccbeb026baa41", "html_url": "https://github.com/rust-lang/rust/commit/aa9369c7a4f463ea9e2d1f5ceecccbeb026baa41"}], "stats": {"total": 89, "additions": 70, "deletions": 19}, "files": [{"sha": "bf978352faee93b10d07a6bac1eb112377c42220", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5f1924c9922c640108d2225d6b68e69e589b94ae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1924c9922c640108d2225d6b68e69e589b94ae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=5f1924c9922c640108d2225d6b68e69e589b94ae", "patch": "@@ -611,26 +611,33 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            let new = ty::ResolvedOpaqueTy {\n-                concrete_type: definition_ty,\n-                substs: self.tcx().lift_to_global(&opaque_defn.substs).unwrap(),\n-            };\n-\n-            let old = self.tables\n-                .concrete_existential_types\n-                .insert(def_id, new);\n-            if let Some(old) = old {\n-                if old.concrete_type != definition_ty || old.substs != opaque_defn.substs {\n-                    span_bug!(\n-                        span,\n-                        \"visit_opaque_types tried to write \\\n-                        different types for the same existential type: {:?}, {:?}, {:?}, {:?}\",\n-                        def_id,\n-                        definition_ty,\n-                        opaque_defn,\n-                        old,\n-                    );\n+            if let Some(substs) = self.tcx().lift_to_global(&opaque_defn.substs) {\n+                let new = ty::ResolvedOpaqueTy {\n+                    concrete_type: definition_ty,\n+                    substs,\n+                };\n+\n+                let old = self.tables\n+                    .concrete_existential_types\n+                    .insert(def_id, new);\n+                if let Some(old) = old {\n+                    if old.concrete_type != definition_ty || old.substs != opaque_defn.substs {\n+                        span_bug!(\n+                            span,\n+                            \"visit_opaque_types tried to write \\\n+                            different types for the same existential type: {:?}, {:?}, {:?}, {:?}\",\n+                            def_id,\n+                            definition_ty,\n+                            opaque_defn,\n+                            old,\n+                        );\n+                    }\n                 }\n+            } else {\n+                self.tcx().sess.delay_span_bug(\n+                    span,\n+                    \"cannot lift `opaque_defn` substs to global type context\",\n+                );\n             }\n         }\n     }"}, {"sha": "f9def11d1932dec2e6ea56f3fdb98389061176bd", "filename": "src/test/ui/existential-type/issue-60371.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f1924c9922c640108d2225d6b68e69e589b94ae/src%2Ftest%2Fui%2Fexistential-type%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1924c9922c640108d2225d6b68e69e589b94ae/src%2Ftest%2Fui%2Fexistential-type%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential-type%2Fissue-60371.rs?ref=5f1924c9922c640108d2225d6b68e69e589b94ae", "patch": "@@ -0,0 +1,15 @@\n+trait Bug {\n+    type Item: Bug;\n+\n+    const FUN: fn() -> Self::Item;\n+}\n+\n+impl Bug for &() {\n+    existential type Item: Bug; //~ ERROR existential types are unstable\n+    //~^ ERROR the trait bound `(): Bug` is not satisfied\n+    //~^^ ERROR could not find defining uses\n+\n+    const FUN: fn() -> Self::Item = || ();\n+}\n+\n+fn main() {}"}, {"sha": "2560e01047aad1accacfcdc1e509992cddd3e66c", "filename": "src/test/ui/existential-type/issue-60371.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5f1924c9922c640108d2225d6b68e69e589b94ae/src%2Ftest%2Fui%2Fexistential-type%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f1924c9922c640108d2225d6b68e69e589b94ae/src%2Ftest%2Fui%2Fexistential-type%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential-type%2Fissue-60371.stderr?ref=5f1924c9922c640108d2225d6b68e69e589b94ae", "patch": "@@ -0,0 +1,29 @@\n+error[E0658]: existential types are unstable\n+  --> $DIR/issue-60371.rs:8:5\n+   |\n+LL |     existential type Item: Bug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/34511\n+   = help: add #![feature(existential_type)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `(): Bug` is not satisfied\n+  --> $DIR/issue-60371.rs:8:5\n+   |\n+LL |     existential type Item: Bug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bug` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <&() as Bug>\n+   = note: the return type of a function must have a statically known size\n+\n+error: could not find defining uses\n+  --> $DIR/issue-60371.rs:8:5\n+   |\n+LL |     existential type Item: Bug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0658.\n+For more information about an error, try `rustc --explain E0277`."}]}