{"sha": "de792ad690a1a72d3c29dbfdc159128b004a8b9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNzkyYWQ2OTBhMWE3MmQzYzI5ZGJmZGMxNTkxMjhiMDA0YThiOWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-15T14:34:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-15T14:34:16Z"}, "message": "Rustup to rustc 1.35.0-nightly (aa99abeb2 2019-04-14)", "tree": {"sha": "03163a6355a8f2a6f1a8c700205d3c6c7a436cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03163a6355a8f2a6f1a8c700205d3c6c7a436cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de792ad690a1a72d3c29dbfdc159128b004a8b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de792ad690a1a72d3c29dbfdc159128b004a8b9c", "html_url": "https://github.com/rust-lang/rust/commit/de792ad690a1a72d3c29dbfdc159128b004a8b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de792ad690a1a72d3c29dbfdc159128b004a8b9c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f36416fc91686c8fd82dae883d11fd8a3fdadbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f36416fc91686c8fd82dae883d11fd8a3fdadbb", "html_url": "https://github.com/rust-lang/rust/commit/2f36416fc91686c8fd82dae883d11fd8a3fdadbb"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "97ed483f7d7882f18722acf2e0c440cc6c64cb09", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de792ad690a1a72d3c29dbfdc159128b004a8b9c/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/de792ad690a1a72d3c29dbfdc159128b004a8b9c/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=de792ad690a1a72d3c29dbfdc159128b004a8b9c", "patch": "@@ -281,6 +281,9 @@ index 828d572..bc04fb1 100644\n  #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n -pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n +pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroUsize};\n+ #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n+-pub use core::num::{NonZeroI8, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI128, NonZeroIsize};\n++pub use core::num::{NonZeroI8, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroIsize};\n  \n  #[cfg(test)] use crate::fmt;\n  #[cfg(test)] use crate::ops::{Add, Sub, Mul, Div, Rem};"}, {"sha": "2f104ad5b25e895aa4b9145638413aac4d68f106", "filename": "patches/0015-Remove-usage-of-unsized-locals.patch", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de792ad690a1a72d3c29dbfdc159128b004a8b9c/patches%2F0015-Remove-usage-of-unsized-locals.patch", "raw_url": "https://github.com/rust-lang/rust/raw/de792ad690a1a72d3c29dbfdc159128b004a8b9c/patches%2F0015-Remove-usage-of-unsized-locals.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0015-Remove-usage-of-unsized-locals.patch?ref=de792ad690a1a72d3c29dbfdc159128b004a8b9c", "patch": "@@ -62,7 +62,7 @@ index 1181b86..20f9251 100644\n  }\n +*/\n  \n- pub fn push(f: Box<dyn FnBox()>) -> bool {\n+ pub fn push(f: Box<dyn FnOnce()>) -> bool {\n      unsafe {\n diff --git a/src/libstd/sys_common/mod.rs b/src/libstd/sys_common/mod.rs\n index 6260c3b..611ed7e 100644\n@@ -89,7 +89,7 @@ index b2142e7..718bb1c 100644\n -    let _handler = stack_overflow::Handler::new();\n -\n -    // Finally, let's run some code.\n--    Box::from_raw(main as *mut Box<dyn FnBox()>)()\n+-    Box::from_raw(main as *mut Box<dyn FnOnce()>)()\n +    panic!(\"Threads are not yet supported, because cranelift doesn't support atomics.\");\n  }\n  "}, {"sha": "0fb69e2a1e35f975c3a0c4ab8746ddf88154593e", "filename": "src/base.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de792ad690a1a72d3c29dbfdc159128b004a8b9c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de792ad690a1a72d3c29dbfdc159128b004a8b9c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=de792ad690a1a72d3c29dbfdc159128b004a8b9c", "patch": "@@ -410,8 +410,13 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 layout::Variants::Single { index } => {\n                     assert_eq!(index, *variant_index);\n                 }\n-                layout::Variants::Multiple { discr_kind: layout::DiscriminantKind::Tag, .. } => {\n-                    let ptr = place.place_field(fx, mir::Field::new(0));\n+                layout::Variants::Multiple {\n+                    discr: _,\n+                    discr_index,\n+                    discr_kind: layout::DiscriminantKind::Tag,\n+                    variants: _,\n+                } => {\n+                    let ptr = place.place_field(fx, mir::Field::new(discr_index));\n                     let to = layout\n                         .ty\n                         .ty_adt_def()\n@@ -422,15 +427,17 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     ptr.write_cvalue(fx, discr);\n                 }\n                 layout::Variants::Multiple {\n+                    discr: _,\n+                    discr_index,\n                     discr_kind: layout::DiscriminantKind::Niche {\n                         dataful_variant,\n                         ref niche_variants,\n                         niche_start,\n                     },\n-                    ..\n+                    variants: _,\n                 } => {\n                     if *variant_index != dataful_variant {\n-                        let niche = place.place_field(fx, mir::Field::new(0));\n+                        let niche = place.place_field(fx, mir::Field::new(discr_index));\n                         //let niche_llty = niche.layout.immediate_llvm_type(bx.cx);\n                         let niche_value =\n                             ((variant_index.as_u32() - niche_variants.start().as_u32()) as u128)\n@@ -767,7 +774,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n         return trap_unreachable_ret_value(fx, dest_layout, \"[panic] Tried to get discriminant for uninhabited type.\");\n     }\n \n-    let (discr_scalar, discr_kind) = match &layout.variants {\n+    let (discr_scalar, discr_index, discr_kind) = match &layout.variants {\n         layout::Variants::Single { index } => {\n             let discr_val = layout\n                 .ty\n@@ -777,10 +784,12 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                 });\n             return CValue::const_val(fx, dest_layout.ty, discr_val as u64 as i64);\n         }\n-        layout::Variants::Multiple { discr, discr_kind, variants: _ } => (discr, discr_kind),\n+        layout::Variants::Multiple { discr, discr_index, discr_kind, variants: _ } => {\n+            (discr, *discr_index, discr_kind)\n+        }\n     };\n \n-    let discr = place.place_field(fx, mir::Field::new(0)).to_cvalue(fx);\n+    let discr = place.place_field(fx, mir::Field::new(discr_index)).to_cvalue(fx);\n     let discr_ty = discr.layout().ty;\n     let lldiscr = discr.load_scalar(fx);\n     match discr_kind {"}, {"sha": "8fb35c6e34212d935d559b0a5f702ffd0bae10fa", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de792ad690a1a72d3c29dbfdc159128b004a8b9c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de792ad690a1a72d3c29dbfdc159128b004a8b9c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=de792ad690a1a72d3c29dbfdc159128b004a8b9c", "patch": "@@ -173,7 +173,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         if sess.opts.cg.rpath {\n             sess.err(\"rpath is not yet supported\");\n         }\n-        if sess.opts.debugging_opts.pgo_gen.is_some() {\n+        if sess.opts.debugging_opts.pgo_gen.enabled() {\n             sess.err(\"pgo is not supported\");\n         }\n     }"}, {"sha": "4f0a15cdf00e5e03e77937853a73f85546ad7e16", "filename": "src/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de792ad690a1a72d3c29dbfdc159128b004a8b9c/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de792ad690a1a72d3c29dbfdc159128b004a8b9c/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=de792ad690a1a72d3c29dbfdc159128b004a8b9c", "patch": "@@ -448,7 +448,7 @@ fn link_args(cmd: &mut dyn Linker,\n         cmd.build_static_executable();\n     }\n \n-    if sess.opts.debugging_opts.pgo_gen.is_some() {\n+    if sess.opts.debugging_opts.pgo_gen.enabled() {\n         cmd.pgo_gen();\n     }\n "}]}