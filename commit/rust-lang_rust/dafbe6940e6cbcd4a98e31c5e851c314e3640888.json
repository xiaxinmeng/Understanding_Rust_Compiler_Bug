{"sha": "dafbe6940e6cbcd4a98e31c5e851c314e3640888", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZmJlNjk0MGU2Y2JjZDRhOThlMzFjNWU4NTFjMzE0ZTM2NDA4ODg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T13:34:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T13:42:11Z"}, "message": "Wrap inlined closures in parens when inlined in an expression in `inline_call`", "tree": {"sha": "c8c43999ea220fa950d491233419efca85efb7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c43999ea220fa950d491233419efca85efb7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dafbe6940e6cbcd4a98e31c5e851c314e3640888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dafbe6940e6cbcd4a98e31c5e851c314e3640888", "html_url": "https://github.com/rust-lang/rust/commit/dafbe6940e6cbcd4a98e31c5e851c314e3640888", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dafbe6940e6cbcd4a98e31c5e851c314e3640888/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2579dc6d82dff5d2b86f490121fe8b087216b74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2579dc6d82dff5d2b86f490121fe8b087216b74e", "html_url": "https://github.com/rust-lang/rust/commit/2579dc6d82dff5d2b86f490121fe8b087216b74e"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "f6840a27b3074a057126713116ec7f495687479c", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=dafbe6940e6cbcd4a98e31c5e851c314e3640888", "patch": "@@ -14,7 +14,9 @@ use crate::{\n \n // Assist: inline_call\n //\n-// Inlines a function or method body.\n+// Inlines a function or method body creating a `let` statement per parameter unless the parameter\n+// can be inlined. The parameter will be inlined either if it the supplied argument is a simple local\n+// or if the parameter is only accessed inside the function body once.\n //\n // ```\n // # //- minicore: option\n@@ -132,7 +134,7 @@ pub(crate) fn inline_(\n                                 .covering_element(range)\n                                 .ancestors()\n                                 .nth(3)\n-                                .filter(|it| ast::PathExpr::can_cast(it.kind())),\n+                                .and_then(ast::PathExpr::cast),\n                             _ => None,\n                         })\n                         .collect::<Option<Vec<_>>>()\n@@ -158,7 +160,14 @@ pub(crate) fn inline_(\n                 match &*usages {\n                     // inline single use parameters\n                     [usage] => {\n-                        ted::replace(usage, expr.syntax().clone_for_update());\n+                        let expr = if matches!(expr, ast::Expr::ClosureExpr(_))\n+                            && usage.syntax().parent().and_then(ast::Expr::cast).is_some()\n+                        {\n+                            make::expr_paren(expr)\n+                        } else {\n+                            expr\n+                        };\n+                        ted::replace(usage.syntax(), expr.syntax().clone_for_update());\n                     }\n                     // inline parameters whose expression is a simple local reference\n                     [_, ..]\n@@ -168,7 +177,7 @@ pub(crate) fn inline_(\n                         ) =>\n                     {\n                         usages.into_iter().for_each(|usage| {\n-                            ted::replace(usage, &expr.syntax().clone_for_update());\n+                            ted::replace(usage.syntax(), &expr.syntax().clone_for_update());\n                         });\n                     }\n                     // cant inline, emit a let statement\n@@ -535,6 +544,56 @@ impl Foo {\n         };\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn wraps_closure_in_paren() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    foo$0(|| {})\n+}\n+\"#,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    {\n+        (|| {})();\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    foo$0(main)\n+}\n+\"#,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    {\n+        main();\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "e16021c82ffcfdc4e0159081eccd15ab3f897d0a", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=dafbe6940e6cbcd4a98e31c5e851c314e3640888", "patch": "@@ -1,4 +1,7 @@\n //! Handle syntactic aspects of inserting a new `use`.\n+#[cfg(test)]\n+mod tests;\n+\n use std::cmp::Ordering;\n \n use hir::Semantics;\n@@ -378,5 +381,3 @@ fn is_inner_comment(token: SyntaxToken) -> bool {\n     ast::Comment::cast(token).and_then(|comment| comment.kind().doc)\n         == Some(ast::CommentPlacement::Inner)\n }\n-#[cfg(test)]\n-mod tests;"}, {"sha": "c5420f4679651060bb5b046b4bd0ddd282b8dbd0", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=dafbe6940e6cbcd4a98e31c5e851c314e3640888", "patch": "@@ -14,7 +14,7 @@ fn foo() {$0}\n         r#\"\n #[cfg(test)]\n fn foo() {\n-use bar::Bar;\n+    use bar::Bar;\n }\n \"#,\n         ImportGranularity::Crate,\n@@ -32,7 +32,7 @@ const FOO: Bar = {$0};\n         r#\"\n #[cfg(test)]\n const FOO: Bar = {\n-use bar::Bar;\n+    use bar::Bar;\n };\n \"#,\n         ImportGranularity::Crate,"}]}