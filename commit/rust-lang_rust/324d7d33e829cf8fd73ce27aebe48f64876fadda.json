{"sha": "324d7d33e829cf8fd73ce27aebe48f64876fadda", "node_id": "C_kwDOAAsO6NoAKDMyNGQ3ZDMzZTgyOWNmOGZkNzNjZTI3YWViZTQ4ZjY0ODc2ZmFkZGE", "commit": {"author": {"name": "Terry Sun", "email": "terrynsun@gmail.com", "date": "2021-10-24T20:34:02Z"}, "committer": {"name": "Terry Sun", "email": "terrynsun@gmail.com", "date": "2021-10-25T00:38:45Z"}, "message": "Add assist for replacing turbofish with explicit type.\n\nConverts `::<_>` to an explicit type assignment.\n\n```\nlet args = args.collect::<Vec<String>>();\n```\n->\n```\nlet args: Vec<String> = args.collect();\n```\n\nCloses #10285", "tree": {"sha": "5f3b3381e39a05ac12f2cb9f02e16c76eecb4a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f3b3381e39a05ac12f2cb9f02e16c76eecb4a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/324d7d33e829cf8fd73ce27aebe48f64876fadda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/324d7d33e829cf8fd73ce27aebe48f64876fadda", "html_url": "https://github.com/rust-lang/rust/commit/324d7d33e829cf8fd73ce27aebe48f64876fadda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/324d7d33e829cf8fd73ce27aebe48f64876fadda/comments", "author": {"login": "terrynsun", "id": 2858750, "node_id": "MDQ6VXNlcjI4NTg3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2858750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrynsun", "html_url": "https://github.com/terrynsun", "followers_url": "https://api.github.com/users/terrynsun/followers", "following_url": "https://api.github.com/users/terrynsun/following{/other_user}", "gists_url": "https://api.github.com/users/terrynsun/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrynsun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrynsun/subscriptions", "organizations_url": "https://api.github.com/users/terrynsun/orgs", "repos_url": "https://api.github.com/users/terrynsun/repos", "events_url": "https://api.github.com/users/terrynsun/events{/privacy}", "received_events_url": "https://api.github.com/users/terrynsun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "terrynsun", "id": 2858750, "node_id": "MDQ6VXNlcjI4NTg3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2858750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrynsun", "html_url": "https://github.com/terrynsun", "followers_url": "https://api.github.com/users/terrynsun/followers", "following_url": "https://api.github.com/users/terrynsun/following{/other_user}", "gists_url": "https://api.github.com/users/terrynsun/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrynsun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrynsun/subscriptions", "organizations_url": "https://api.github.com/users/terrynsun/orgs", "repos_url": "https://api.github.com/users/terrynsun/repos", "events_url": "https://api.github.com/users/terrynsun/events{/privacy}", "received_events_url": "https://api.github.com/users/terrynsun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f47693e02809c97db61b51247ae4e4d46744c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f47693e02809c97db61b51247ae4e4d46744c61", "html_url": "https://github.com/rust-lang/rust/commit/1f47693e02809c97db61b51247ae4e4d46744c61"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "b02596daede7b14267abd6b73f91311db18ae71b", "filename": "crates/ide_assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/324d7d33e829cf8fd73ce27aebe48f64876fadda/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324d7d33e829cf8fd73ce27aebe48f64876fadda/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=324d7d33e829cf8fd73ce27aebe48f64876fadda", "patch": "@@ -0,0 +1,184 @@\n+use syntax::{\n+    ast::Expr,\n+    ast::{LetStmt, Type::InferType},\n+    AstNode, TextRange,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: replace_turbofish_with_explicit_type\n+//\n+// Converts `::<_>` to an explicit type assignment.\n+//\n+// ```\n+// fn make<T>() -> T { ) }\n+// fn main() {\n+//     let a = make$0::<i32>();\n+// }\n+// ```\n+// ->\n+// ```\n+// fn make<T>() -> T { ) }\n+// fn main() {\n+//     let a: i32 = make();\n+// }\n+// ```\n+pub(crate) fn replace_turbofish_with_explicit_type(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+) -> Option<()> {\n+    let let_stmt = ctx.find_node_at_offset::<LetStmt>()?;\n+\n+    let initializer = let_stmt.initializer()?;\n+\n+    let (turbofish_start, turbofish_type, turbofish_end) = if let Expr::CallExpr(ce) = initializer {\n+        if let Expr::PathExpr(pe) = ce.expr()? {\n+            let path = pe.path()?;\n+\n+            let generic_args = path.segment()?.generic_arg_list()?;\n+\n+            let colon2 = generic_args.coloncolon_token()?;\n+            let r_angle = generic_args.r_angle_token()?;\n+\n+            let turbofish_args_as_string = generic_args\n+                .generic_args()\n+                .into_iter()\n+                .map(|a| -> String { a.to_string() })\n+                .collect::<Vec<String>>()\n+                .join(\", \");\n+\n+            (colon2.text_range().start(), turbofish_args_as_string, r_angle.text_range().end())\n+        } else {\n+            cov_mark::hit!(not_applicable_if_non_path_function_call);\n+            return None;\n+        }\n+    } else {\n+        cov_mark::hit!(not_applicable_if_non_function_call_initializer);\n+        return None;\n+    };\n+\n+    let turbofish_range = TextRange::new(turbofish_start, turbofish_end);\n+\n+    if let None = let_stmt.colon_token() {\n+        // If there's no colon in a let statement, then there is no explicit type.\n+        // let x = fn::<...>();\n+        let ident_range = let_stmt.pat()?.syntax().text_range();\n+\n+        return acc.add(\n+            AssistId(\"replace_turbofish_with_explicit_type\", AssistKind::RefactorRewrite),\n+            format!(\"Replace turbofish with explicit type `: <{}>`\", turbofish_type),\n+            turbofish_range,\n+            |builder| {\n+                builder.insert(ident_range.end(), format!(\": {}\", turbofish_type));\n+                builder.delete(turbofish_range);\n+            },\n+        );\n+    } else if let Some(InferType(t)) = let_stmt.ty() {\n+        // If there's a type inferrence underscore, we can offer to replace it with the type in\n+        // the turbofish.\n+        // let x: _ = fn::<...>();\n+        let underscore_range = t.syntax().text_range();\n+\n+        return acc.add(\n+            AssistId(\"replace_turbofish_with_explicit_type\", AssistKind::RefactorRewrite),\n+            format!(\"Replace `_` with turbofish type `{}`\", turbofish_type),\n+            turbofish_range,\n+            |builder| {\n+                builder.replace(underscore_range, turbofish_type);\n+                builder.delete(turbofish_range);\n+            },\n+        );\n+    }\n+\n+    None\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    #[test]\n+    fn replaces_turbofish_for_vec_string() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = make$0::<Vec<String>>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: Vec<String> = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_turbofish_target() {\n+        check_assist_target(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = $0make::<Vec<String>>();\n+}\n+\"#,\n+            r#\"::<Vec<String>>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_inferred_type_placeholder() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: _ = make$0::<Vec<String>>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: Vec<String> = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_constant_initializer() {\n+        cov_mark::check!(not_applicable_if_non_function_call_initializer);\n+        check_assist_not_applicable(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = \"foo\"$0;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_path_function_call() {\n+        cov_mark::check!(not_applicable_if_non_path_function_call);\n+        check_assist_not_applicable(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    $0let a = (|| {})();\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "5d4c1532dbe2d05f1c5fb2f80e799834c1e9cf0e", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/324d7d33e829cf8fd73ce27aebe48f64876fadda/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324d7d33e829cf8fd73ce27aebe48f64876fadda/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=324d7d33e829cf8fd73ce27aebe48f64876fadda", "patch": "@@ -175,6 +175,7 @@ mod handlers {\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n     mod replace_string_with_char;\n+    mod replace_turbofish_with_explicit_type;\n     mod split_import;\n     mod sort_items;\n     mod toggle_ignore;\n@@ -257,6 +258,7 @@ mod handlers {\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,\n             replace_let_with_if_let::replace_let_with_if_let,\n+            replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             sort_items::sort_items,\n             split_import::split_import,"}, {"sha": "e30f98bcd1369b9f890a00fe04fa58936d1e4657", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/324d7d33e829cf8fd73ce27aebe48f64876fadda/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324d7d33e829cf8fd73ce27aebe48f64876fadda/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=324d7d33e829cf8fd73ce27aebe48f64876fadda", "patch": "@@ -1876,6 +1876,25 @@ fn handle() {\n     )\n }\n \n+#[test]\n+fn doctest_replace_turbofish_with_explicit_type() {\n+    check_doc_test(\n+        \"replace_turbofish_with_explicit_type\",\n+        r#####\"\n+fn make<T>() -> T { ) }\n+fn main() {\n+    let a = make$0::<i32>();\n+}\n+\"#####,\n+        r#####\"\n+fn make<T>() -> T { ) }\n+fn main() {\n+    let a: i32 = make();\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_sort_items() {\n     check_doc_test("}]}