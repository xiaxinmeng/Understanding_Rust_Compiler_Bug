{"sha": "91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZTVhMWM4YjNjNTY5NzliMGQ3MDI1ZTgzZGMzNzhmM2QwNWIyMDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T01:42:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T01:43:19Z"}, "message": "core: Remove the nearly empty math module\n\nThis mod only had two functions, all of whose users have been changed\nto use the uint module.", "tree": {"sha": "95c31beaa7f2bb39f6306c6555e92173237bb2e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c31beaa7f2bb39f6306c6555e92173237bb2e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "html_url": "https://github.com/rust-lang/rust/commit/91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035197609a7f5c604797e5fbbdc6e14c579a026f", "url": "https://api.github.com/repos/rust-lang/rust/commits/035197609a7f5c604797e5fbbdc6e14c579a026f", "html_url": "https://github.com/rust-lang/rust/commit/035197609a7f5c604797e5fbbdc6e14c579a026f"}], "stats": {"total": 325, "additions": 8, "deletions": 317}, "files": [{"sha": "b984c6fce6e63fa03d7d25ad131dc9a280069ead", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -254,9 +254,9 @@ fn check_variants_T<T: copy>(\n     let L = vec::len(things);\n \n     if L < 100u {\n-        under(math::min(L, 20u)) {|i|\n+        under(uint::min(L, 20u)) {|i|\n             log(error, \"Replacing... #\" + uint::str(i));\n-            under(math::min(L, 30u)) {|j|\n+            under(uint::min(L, 30u)) {|j|\n                 log(error, \"With... \" + stringifier(@things[j]));\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but testing the"}, {"sha": "0b3729fac31a7979ceae816dee3a13926c035134", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -34,7 +34,7 @@ export either, option, result, iter;\n export libc, os, ctypes, sys, unsafe, logging;\n export comm, task, future;\n export extfmt;\n-export math, bessel;\n+export bessel;\n export tuple;\n export to_str;\n \n@@ -84,7 +84,6 @@ mod os;\n mod path;\n \n mod ctypes;\n-mod math;\n mod cmath;\n mod sys;\n mod unsafe;"}, {"sha": "9e14091a5329ad14169d9f3158d8c3bf5d52c8a8", "filename": "src/libcore/math.rs", "status": "removed", "additions": 0, "deletions": 307, "changes": 307, "blob_url": "https://github.com/rust-lang/rust/blob/035197609a7f5c604797e5fbbdc6e14c579a026f/src%2Flibcore%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035197609a7f5c604797e5fbbdc6e14c579a026f/src%2Flibcore%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmath.rs?ref=035197609a7f5c604797e5fbbdc6e14c579a026f", "patch": "@@ -1,307 +0,0 @@\n-#[doc = \"\n-Generic functions that have been defined for all numeric types\n-\n-(may very well go away again soon)\n-\"];\n-\n-#[doc = \"Returns the minimum of two values\"]\n-pure fn min<T: copy>(x: T, y: T) -> T { if x < y { x } else { y} }\n-\n-#[doc = \"Returns the maximum of two values\"]\n-pure fn max<T: copy>(x: T, y: T) -> T { if x < y { y } else { x } }\n-\n-#[test]\n-fn test_max_min() {\n-    assert max(0, 1) == 1;\n-    assert min(0, 1) == 0;\n-    assert max(0, -1) == 0;\n-    assert min(0, -1) == -1;\n-    assert max(0.0, 1.0) == 1.0;\n-    assert min(0.0, 1.0) == 0.0;\n-}\n-\n-// FIXME use macros to execute the tests below for all float types\n-\n-/*\n-#[test]\n-fn test_trig() {\n-    assert sin(0.0) == 0.0;\n-    assert sin(-0.0) == 0.0;\n-\n-    assert float::isNaN(sin(float::infinity));\n-    assert float::isNaN(sin(float::neg_infinity));\n-\n-    assert cos(0.0) == 1.0;\n-    assert cos(-0.0) == 1.0;\n-    assert float::isNaN(cos(float::infinity));\n-    assert float::isNaN(cos(float::neg_infinity));\n-\n-    assert tan(0.0) == 0.0;\n-    assert tan(-0.0) == 0.0;;\n-    assert float::isNaN(tan(float::infinity));\n-    assert float::isNaN(tan(float::neg_infinity));\n-}\n-\n-#[test]\n-fn test_inv_trig() {\n-    assert asin(0.0) == 0.0;\n-    assert asin(-0.0) == -0.0;\n-    assert float::isNaN(asin(1.1));\n-    assert float::isNaN(asin(-1.1));\n-\n-    assert acos(1.0) == 0.0;\n-    assert float::isNaN(acos(1.1));\n-    assert float::isNaN(acos(-1.1));\n-\n-    assert atan(0.0) == 0.0;\n-    assert atan(-0.0) == 0.0;\n-    assert atan(float::infinity) == consts::frac_pi_2;\n-    assert atan(float::neg_infinity) == - consts::frac_pi_2;\n-\n-    assert atan2(0.0, -0.0) == consts::pi;\n-    assert atan2(-0.0, -0.0) == -consts::pi;\n-\n-    assert atan2(0.0, 0.0) == 0.0;\n-    assert atan2(-0.0, 0.0) == -0.0;\n-\n-    assert atan2(0.0, -1.0) == consts::pi;\n-    assert atan2(-0.0, -1.0) == -consts::pi;\n-\n-    assert atan2(0.0, 1.0) == 0.0;\n-    assert atan2(-0.0, 1.0) == -0.0;\n-\n-    assert atan2(1.0, 0.0) == consts::frac_pi_2;\n-    assert atan2(1.0, -0.0) == consts::frac_pi_2;\n-}\n-\n-// FIXME (1222): The commented-out tests give different results on windows\n-#[test]\n-fn test_pow() {\n-    assert pow(2.0, 4.0) == 16.0;\n-\n-    assert pow(0.0, -3.0) == float::infinity;\n-    assert pow(-0.0, -3.0) == float::neg_infinity;\n-\n-    assert pow(0.0, -4.0) == float::infinity;\n-    assert pow(-0.0, -4.0) == float::infinity;\n-\n-    assert pow(0.0, 3.0) == 0.0;\n-    assert pow(-0.0, 3.0) == -0.0;\n-    assert pow(0.0, 4.0) == 0.0;\n-    assert pow(-0.0, 4.0) == 0.0;\n-\n-    assert pow(-1.0, float::infinity) == 1.0;\n-    //assert pow(-1.0, float::neg_infinity) == 1.0;\n-\n-    assert pow(1.0, 4.0) == 1.0;\n-    assert pow(1.0, 0.0) == 1.0;\n-    assert pow(1.0, -0.0) == 1.0;\n-    //assert pow(1.0, float::NaN) == 1.0;\n-    assert pow(1.0, float::infinity) == 1.0;\n-    //assert pow(1.0, float::neg_infinity) == 1.0;\n-    assert pow(1.0, -3.0) == 1.0;\n-    assert pow(1.0, -4.0) == 1.0;\n-\n-    assert pow(4.0, 0.0) == 1.0;\n-    assert pow(0.0, 0.0) == 1.0;\n-    assert pow(-0.0, 0.0) == 1.0;\n-    //assert pow(float::NaN, 0.0) == 1.0;\n-    assert pow(float::infinity, 0.0) == 1.0;\n-    assert pow(float::neg_infinity, 0.0) == 1.0;\n-    assert pow(-3.0, 0.0) == 1.0;\n-    assert pow(-4.0, 0.0) == 1.0;\n-\n-    assert pow(4.0, -0.0) == 1.0;\n-    assert pow(0.0, -0.0) == 1.0;\n-    assert pow(-0.0, -0.0) == 1.0;\n-    //assert pow(float::NaN, -0.0) == 1.0;\n-    assert pow(float::infinity, -0.0) == 1.0;\n-    assert pow(float::neg_infinity, -0.0) == 1.0;\n-    assert pow(-3.0, -0.0) == 1.0;\n-    assert pow(-4.0, -0.0) == 1.0;\n-\n-    assert float::isNaN(pow(-1.0, -1.5));\n-    assert float::isNaN(pow(-1.0, 1.5));\n-\n-    assert float::isNaN(pow(-1.2, -1.5));\n-    assert float::isNaN(pow(-1.2, 1.5));\n-\n-    assert pow(0.5, float::neg_infinity) == float::infinity;\n-    assert pow(-0.5, float::neg_infinity) == float::infinity;\n-\n-    assert pow(1.5, float::neg_infinity) == 0.0;\n-    assert pow(-1.5, float::neg_infinity) == 0.0;\n-\n-    assert pow(0.5, float::infinity) == 0.0;\n-    assert pow(-0.5, float::infinity) == 0.0;\n-\n-    assert pow(-1.5, float::infinity) == float::infinity;\n-    assert pow(1.5, float::infinity) == float::infinity;\n-\n-    assert pow(float::neg_infinity, -3.0) == -0.0;\n-    assert pow(float::neg_infinity, -4.0) == 0.0;\n-\n-    assert pow(float::neg_infinity, 3.0) == float::neg_infinity;\n-    assert pow(float::neg_infinity, 4.0) == float::infinity;\n-\n-    assert pow(float::infinity, -16.0) == 0.0;\n-    assert pow(float::infinity, 16.0) == float::infinity;\n-}\n-\n-// FIXME (1222): The commented-out tests give different results on windows\n-#[test]\n-fn test_exp_and_mod() {\n-    assert exp(0.0) == 1.0;\n-    assert exp(-0.0) == 1.0;\n-    assert exp(float::neg_infinity) == 0.0;\n-    assert exp(float::infinity) == float::infinity;\n-\n-    let d1: c_int = 1 as c_int;\n-    assert frexp(0.0, d1) == 0.0;\n-    assert frexp(-0.0, d1) == 0.0;\n-    //assert frexp(float::infinity, d1) == float::infinity;\n-    //assert frexp(float::neg_infinity, d1) == float::neg_infinity;\n-    assert float::isNaN(frexp(float::NaN, d1));\n-\n-    let d2: float = 1.0;\n-    assert modf(float::infinity, d2) == 0.0;\n-    assert d2 == float::infinity;\n-    assert modf(float::neg_infinity, d2) == -0.0;\n-    assert d2 == float::neg_infinity;\n-    assert float::isNaN(modf(float::NaN, d2));\n-    assert float::isNaN(d2);\n-}\n-\n-#[test]\n-fn test_round_and_abs() {\n-    assert abs(0.0) == 0.0;\n-    assert abs(-0.0) == 0.0;\n-    assert abs(float::infinity) == float::infinity;\n-    assert abs(float::neg_infinity) == float::infinity;\n-\n-    assert abs(-2.5) == 2.5;\n-    assert abs(2.5) == 2.5;\n-\n-    assert ceil(0.0) == 0.0;\n-    assert ceil(-0.0) == -0.0;\n-    assert ceil(float::infinity) == float::infinity;\n-    assert ceil(float::neg_infinity) == float::neg_infinity;\n-\n-    assert ceil(1.9) == 2.0;\n-    assert ceil(-1.9) == -1.0;\n-\n-    assert floor(0.0) == 0.0;\n-    assert floor(-0.0) == -0.0;\n-    assert floor(float::infinity) == float::infinity;\n-    assert floor(float::neg_infinity) == float::neg_infinity;\n-\n-    assert floor(1.9) == 1.0;\n-    assert floor(-1.9) == -2.0;\n-\n-    assert trunc(0.0) == 0.0;\n-    assert trunc(-0.0) == -0.0;\n-    assert trunc(float::infinity) == float::infinity;\n-    assert trunc(float::neg_infinity) == float::neg_infinity;\n-\n-    assert trunc(1.5) == 1.0;\n-    assert trunc(1.2) == 1.0;\n-    assert trunc(1.0) == 1.0;\n-    assert trunc(1.9) == 1.0;\n-    assert trunc(-1.5) == -1.0;\n-    assert trunc(-1.2) == -1.0;\n-    assert trunc(-1.0) == -1.0;\n-    assert trunc(-1.9) == -1.0;\n-\n-    assert round(0.0) == 0.0;\n-    assert round(-0.0) == -0.0;\n-    assert round(float::infinity) == float::infinity;\n-    assert round(float::neg_infinity) == float::neg_infinity;\n-\n-    assert rint(0.0) == 0.0;\n-    assert rint(-0.0) == -0.0;\n-    assert rint(float::infinity) == float::infinity;\n-    assert rint(float::neg_infinity) == float::neg_infinity;\n-}\n-\n-#[test]\n-fn test_hyp_trig() {\n-    assert sinh(0.0) == 0.0;\n-    assert sinh(-0.0) == 0.0;\n-    assert sinh(float::infinity) == float::infinity;\n-    assert sinh(float::neg_infinity) == float::neg_infinity;\n-\n-    assert cosh(0.0) == 1.0;\n-    assert cosh(-0.0) == 1.0;\n-    assert cosh(float::infinity) == float::infinity;\n-    assert cosh(float::neg_infinity) == float::infinity;\n-\n-    assert tanh(0.0) == 0.0;\n-    assert tanh(-0.0) == 0.0;\n-    assert tanh(float::infinity) == 1.0;\n-    assert tanh(float::neg_infinity) == -1.0;\n-}\n-\n-#[test]\n-fn test_sqrt() {\n-    assert sqrt(9.0) == 3.0;\n-    assert sqrt(4.0) == 2.0;\n-    assert sqrt(1.0) == 1.0;\n-    assert sqrt(0.0) == 0.0;\n-}\n-\n-\n-#[test]\n-fn test_angle() {\n-    fn angle(vec: (float, float)) -> float {\n-        alt vec {\n-          (0f, y) if y < 0f { 1.5 * consts::pi }\n-          (0f, y) { 0.5 * consts::pi }\n-          (x, y) { float::atan(y / x) }\n-        }\n-    }\n-    assert angle((1f, 0f)) == 0f;\n-    assert angle((1f, 1f)) == 0.25 * consts::pi;\n-    assert angle((0f, 1f)) == 0.5 * consts::pi;\n-}\n-\n-\n-#[test]\n-fn test_log_functions() {\n-    assert ln(1.0) == 0.0;\n-    assert log2(1.0) == 0.0;\n-    assert log10(1.0) == 0.0;\n-\n-    // FIXME remove round-up due to valgrind weirdness\n-    assert ceil(ln(consts::e)) == 1.0; /* ln(e) == 0.999.. under valgrind */\n-    assert log2(2.0) == 1.0;\n-    assert log10(10.0) == 1.0;\n-\n-    // FIXME remove round-up due to valgrind weirdness\n-    assert ceil(ln(consts::e*consts::e*consts::e*consts::e)) == 4.0;\n-    assert log2(256.0) == 8.0;\n-    assert log10(1000.0) == 3.0;\n-\n-    assert ln(0.0) == float::neg_infinity;\n-    assert log2(0.0) == float::neg_infinity;\n-    assert log10(0.0) == float::neg_infinity;\n-\n-    assert ln(-0.0) == float::neg_infinity;\n-    assert log2(-0.0) == float::neg_infinity;\n-    assert log10(-0.0) == float::neg_infinity;\n-\n-    assert float::isNaN(ln(-1.0));\n-    assert float::isNaN(log2(-1.0));\n-    assert float::isNaN(log10(-1.0));\n-\n-    assert ln(float::infinity) == float::infinity;\n-    assert log2(float::infinity) == float::infinity;\n-    assert log10(float::infinity) == float::infinity;\n-\n-    assert ln1p(0.0) == 0.0;\n-    assert ln1p(-0.0) == 0.0;\n-    assert ln1p(-1.0) == float::neg_infinity;\n-    assert float::isNaN(ln1p(-2.0f));\n-    assert ln1p(float::infinity) == float::infinity;\n-}\n-\n-*/"}, {"sha": "2b3829dd91011977aabe17c142e2409d2a2699a6", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -912,7 +912,7 @@ mod u8 {\n     pure fn cmp(&&a: [u8], &&b: [u8]) -> int unsafe {\n         let a_len = len(a);\n         let b_len = len(b);\n-        let n = math::min(a_len, b_len) as ctypes::size_t;\n+        let n = uint::min(a_len, b_len) as ctypes::size_t;\n         let r = libc::memcmp(unsafe::to_ptr(a) as *libc::c_void,\n                              unsafe::to_ptr(b) as *libc::c_void, n) as int;\n "}, {"sha": "b9656df7e2f4ccbf3552389801196d8d90f6b733", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -1006,7 +1006,7 @@ mod node {\n                      right   : right,\n              char_len: char_len(left) + char_len(right),\n                      byte_len: byte_len(left) + byte_len(right),\n-             height: math::max(height(left), height(right)) + 1u\n+             height: uint::max(height(left), height(right)) + 1u\n                     })\n     }\n "}, {"sha": "cfe3e63c4e254080ce1b716e58e567000c68f395", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -129,7 +129,7 @@ fn get_relative_to(abs1: fs::path, abs2: fs::path) -> fs::path {\n     assert len1 > 0u;\n     assert len2 > 0u;\n \n-    let max_common_path = math::min(len1, len2) - 1u;\n+    let max_common_path = uint::min(len1, len2) - 1u;\n     let start_idx = 0u;\n     while start_idx < max_common_path\n         && split1[start_idx] == split2[start_idx] {"}, {"sha": "ea8de5b8b77af3ada1d571e984750f39f2a13be6", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -1568,7 +1568,7 @@ mod unify {\n             _ { cx.tcx.sess.bug(\"someone forgot to document an invariant \\\n                          in union\"); }\n         };\n-        ufind::grow(vb.sets, math::max(set_a, set_b) + 1u);\n+        ufind::grow(vb.sets, uint::max(set_a, set_b) + 1u);\n         let root_a = ufind::find(vb.sets, set_a);\n         let root_b = ufind::find(vb.sets, set_b);\n "}, {"sha": "12bf9d6b960611308e4b6c1a5fa71a0a320f6207", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -1,4 +1,3 @@\n-import math::{max, min};\n import std::map::hashmap;\n import syntax::ast;\n import ast::{ty, pat};"}, {"sha": "48d7b595f5ff0f860edf8767e64e76ec3fb070ba", "filename": "src/rustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5a1c8b3c56979b0d7025e83dc378f3d05b208/src%2Frustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Funindent_pass.rs?ref=91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "patch": "@@ -57,7 +57,7 @@ fn unindent(s: str) -> str {\n                     false\n                 }\n             };\n-            math::min(min_indent, spaces)\n+            uint::min(min_indent, spaces)\n         }\n     };\n "}]}