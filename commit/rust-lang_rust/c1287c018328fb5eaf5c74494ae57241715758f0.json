{"sha": "c1287c018328fb5eaf5c74494ae57241715758f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjg3YzAxODMyOGZiNWVhZjVjNzQ0OTRhZTU3MjQxNzE1NzU4ZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T01:06:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T01:06:33Z"}, "message": "Auto merge of #51220 - nikomatsakis:issue-51008-false-positive-lifetime-must-be-declared, r=cramertj\n\nreset anonymous-lifetime-mode as we enter `()` scopes\n\nBackground:\n\nThe anonymous lifetime mode is used to prohibit elided lifetimes where\nthey didn't used to be permitted, and instead require that `'_` be\nused. For example:\n\n```rust\nimpl Trait for Ref<T> { .. }\n//             ^^^^^^ ERROR: should be `Ref<'_, T>`\n```\n\nWhen we are parsing the parts of the impl header, we enter into an alternate mode called `CreateParameter`. In this mode, we give an error for things like `Ref<T>`, but for elided lifetimes in a reference type like `&T` we make the elided lifetime into an in-band lifetime:\n\nhttps://github.com/rust-lang/rust/blob/4f99f37b7e213d69a489884f651adfc6d217cef5/src/librustc/hir/lowering.rs#L4017-L4035\n\nThis was not intended to change behavior because we only enter into that mode in contexts where elision was not historically permitted. However, the problem is that we fail to reset the mode when we enter into bounds like `Fn(&u32)`, where elision *was* allowed -- the same occurs for fn types like `fn(&u32`). This PR restores the original mode in those contexts.\n\nFixes #51008\n\nr? @cramertj", "tree": {"sha": "f819caa73016e9192c29d28c8364931b49dd4d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f819caa73016e9192c29d28c8364931b49dd4d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1287c018328fb5eaf5c74494ae57241715758f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1287c018328fb5eaf5c74494ae57241715758f0", "html_url": "https://github.com/rust-lang/rust/commit/c1287c018328fb5eaf5c74494ae57241715758f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1287c018328fb5eaf5c74494ae57241715758f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1eed38fed677017cc504f4f01a7f2b2b52b6718", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1eed38fed677017cc504f4f01a7f2b2b52b6718", "html_url": "https://github.com/rust-lang/rust/commit/e1eed38fed677017cc504f4f01a7f2b2b52b6718"}, {"sha": "da69bbce68b8c477701a07ed8fcf0c9d29e74c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/da69bbce68b8c477701a07ed8fcf0c9d29e74c42", "html_url": "https://github.com/rust-lang/rust/commit/da69bbce68b8c477701a07ed8fcf0c9d29e74c42"}], "stats": {"total": 180, "additions": 132, "deletions": 48}, "files": [{"sha": "f816ba9ab8143b68e3b06a83ab21f99153b8c90d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 75, "deletions": 48, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c1287c018328fb5eaf5c74494ae57241715758f0", "patch": "@@ -594,6 +594,18 @@ impl<'a> LoweringContext<'a> {\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     }\n \n+    fn with_anonymous_lifetime_mode<R>(\n+        &mut self,\n+        anonymous_lifetime_mode: AnonymousLifetimeMode,\n+        op: impl FnOnce(&mut Self) -> R,\n+    ) -> R {\n+        let old_anonymous_lifetime_mode = self.anonymous_lifetime_mode;\n+        self.anonymous_lifetime_mode = anonymous_lifetime_mode;\n+        let result = op(self);\n+        self.anonymous_lifetime_mode = old_anonymous_lifetime_mode;\n+        result\n+    }\n+\n     /// Creates a new hir::GenericParam for every new lifetime and\n     /// type parameter encountered while evaluating `f`. Definitions\n     /// are created with the parent provided. If no `parent_id` is\n@@ -1021,17 +1033,22 @@ impl<'a> LoweringContext<'a> {\n                     _ => None,\n                 }),\n                 |this| {\n-                    hir::TyBareFn(P(hir::BareFnTy {\n-                        generic_params: this.lower_generic_params(\n-                            &f.generic_params,\n-                            &NodeMap(),\n-                            ImplTraitContext::Disallowed,\n-                        ),\n-                        unsafety: this.lower_unsafety(f.unsafety),\n-                        abi: f.abi,\n-                        decl: this.lower_fn_decl(&f.decl, None, false),\n-                        arg_names: this.lower_fn_args_to_names(&f.decl),\n-                    }))\n+                    this.with_anonymous_lifetime_mode(\n+                        AnonymousLifetimeMode::PassThrough,\n+                        |this| {\n+                            hir::TyBareFn(P(hir::BareFnTy {\n+                                generic_params: this.lower_generic_params(\n+                                    &f.generic_params,\n+                                    &NodeMap(),\n+                                    ImplTraitContext::Disallowed,\n+                                ),\n+                                unsafety: this.lower_unsafety(f.unsafety),\n+                                abi: f.abi,\n+                                decl: this.lower_fn_decl(&f.decl, None, false),\n+                                arg_names: this.lower_fn_args_to_names(&f.decl),\n+                            }))\n+                        },\n+                    )\n                 },\n             ),\n             TyKind::Never => hir::TyNever,\n@@ -1623,44 +1640,54 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         data: &ParenthesizedParameterData,\n     ) -> (hir::PathParameters, bool) {\n-        const DISALLOWED: ImplTraitContext = ImplTraitContext::Disallowed;\n-        let &ParenthesizedParameterData {\n-            ref inputs,\n-            ref output,\n-            span,\n-        } = data;\n-        let inputs = inputs\n-            .iter()\n-            .map(|ty| self.lower_ty(ty, DISALLOWED))\n-            .collect();\n-        let mk_tup = |this: &mut Self, tys, span| {\n-            let LoweredNodeId { node_id, hir_id } = this.next_id();\n-            P(hir::Ty {\n-                node: hir::TyTup(tys),\n-                id: node_id,\n-                hir_id,\n-                span,\n-            })\n-        };\n+        // Switch to `PassThrough` mode for anonymous lifetimes: this\n+        // means that we permit things like `&Ref<T>`, where `Ref` has\n+        // a hidden lifetime parameter. This is needed for backwards\n+        // compatibility, even in contexts like an impl header where\n+        // we generally don't permit such things (see #51008).\n+        self.with_anonymous_lifetime_mode(\n+            AnonymousLifetimeMode::PassThrough,\n+            |this| {\n+                const DISALLOWED: ImplTraitContext = ImplTraitContext::Disallowed;\n+                let &ParenthesizedParameterData {\n+                    ref inputs,\n+                    ref output,\n+                    span,\n+                } = data;\n+                let inputs = inputs\n+                    .iter()\n+                    .map(|ty| this.lower_ty(ty, DISALLOWED))\n+                    .collect();\n+                let mk_tup = |this: &mut Self, tys, span| {\n+                    let LoweredNodeId { node_id, hir_id } = this.next_id();\n+                    P(hir::Ty {\n+                        node: hir::TyTup(tys),\n+                        id: node_id,\n+                        hir_id,\n+                        span,\n+                    })\n+                };\n \n-        (\n-            hir::PathParameters {\n-                lifetimes: hir::HirVec::new(),\n-                types: hir_vec![mk_tup(self, inputs, span)],\n-                bindings: hir_vec![\n-                    hir::TypeBinding {\n-                        id: self.next_id().node_id,\n-                        name: Symbol::intern(FN_OUTPUT_NAME),\n-                        ty: output\n-                            .as_ref()\n-                            .map(|ty| self.lower_ty(&ty, DISALLOWED))\n-                            .unwrap_or_else(|| mk_tup(self, hir::HirVec::new(), span)),\n-                        span: output.as_ref().map_or(span, |ty| ty.span),\n-                    }\n-                ],\n-                parenthesized: true,\n-            },\n-            false,\n+                (\n+                    hir::PathParameters {\n+                        lifetimes: hir::HirVec::new(),\n+                        types: hir_vec![mk_tup(this, inputs, span)],\n+                        bindings: hir_vec![\n+                            hir::TypeBinding {\n+                                id: this.next_id().node_id,\n+                                name: Symbol::intern(FN_OUTPUT_NAME),\n+                                ty: output\n+                                    .as_ref()\n+                                    .map(|ty| this.lower_ty(&ty, DISALLOWED))\n+                                    .unwrap_or_else(|| mk_tup(this, hir::HirVec::new(), span)),\n+                                span: output.as_ref().map_or(span, |ty| ty.span),\n+                            }\n+                        ],\n+                        parenthesized: true,\n+                    },\n+                    false,\n+                )\n+            }\n         )\n     }\n "}, {"sha": "14c1993e28e152ed1023394ffc99f7054b8aa49c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c1287c018328fb5eaf5c74494ae57241715758f0", "patch": "@@ -101,6 +101,13 @@ impl Region {\n         let depth = ty::DebruijnIndex::INNERMOST;\n         let def_id = hir_map.local_def_id(def.lifetime.id);\n         let origin = LifetimeDefOrigin::from_is_in_band(def.in_band);\n+        debug!(\n+            \"Region::late: def={:?} depth={:?} def_id={:?} origin={:?}\",\n+            def,\n+            depth,\n+            def_id,\n+            origin,\n+        );\n         (def.lifetime.name, Region::LateBound(depth, def_id, origin))\n     }\n "}, {"sha": "4a76d683d6e5033de72cef177c0e62674f5be8b1", "filename": "src/test/ui/rust-2018/issue-51008-1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-51008-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-51008-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-51008-1.rs?ref=c1287c018328fb5eaf5c74494ae57241715758f0", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #51008 -- the anonymous lifetime in `&i32` was\n+// being incorrectly considered part of the \"elided lifetimes\" from\n+// the impl.\n+//\n+// run-pass\n+\n+#![feature(rust_2018_preview)]\n+\n+trait A {\n+\n+}\n+\n+impl<F> A for F where F: PartialEq<fn(&i32)> { }\n+\n+fn main() {}"}, {"sha": "eb2673857e2f42dc33dfda9c58bf657f622ff623", "filename": "src/test/ui/rust-2018/issue-51008.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-51008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1287c018328fb5eaf5c74494ae57241715758f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-51008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-51008.rs?ref=c1287c018328fb5eaf5c74494ae57241715758f0", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #51008 -- the anonymous lifetime in `&i32` was\n+// being incorrectly considered part of the \"elided lifetimes\" from\n+// the impl.\n+//\n+// run-pass\n+\n+#![feature(rust_2018_preview)]\n+\n+trait A {\n+\n+}\n+\n+impl<F> A for F where F: FnOnce(&i32) {}\n+\n+fn main() {}"}]}