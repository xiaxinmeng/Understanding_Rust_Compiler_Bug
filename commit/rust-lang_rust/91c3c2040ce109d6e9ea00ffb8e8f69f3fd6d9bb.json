{"sha": "91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "node_id": "C_kwDOAAsO6NoAKDkxYzNjMjA0MGNlMTA5ZDZlOWVhMDBmZmI4ZThmNjlmM2ZkNmQ5YmI", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:22:14Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:22:14Z"}, "message": "Make `#[max]` an attribute in `newtype_index`", "tree": {"sha": "626f4cb52fe019aa00ad7a52c1f7501351474dd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/626f4cb52fe019aa00ad7a52c1f7501351474dd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "html_url": "https://github.com/rust-lang/rust/commit/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93429948cf0e6fe8aac3802a8fbc73a121463994", "url": "https://api.github.com/repos/rust-lang/rust/commits/93429948cf0e6fe8aac3802a8fbc73a121463994", "html_url": "https://github.com/rust-lang/rust/commit/93429948cf0e6fe8aac3802a8fbc73a121463994"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "e72863f6de11d47fa46f661888c5df4225af8835", "filename": "compiler/rustc_index/src/vec/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs?ref=91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "patch": "@@ -3,7 +3,10 @@\n // Allows the macro invocation below to work\n use crate as rustc_index;\n \n-rustc_macros::newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n+rustc_macros::newtype_index! {\n+    #[max = 0xFFFF_FFFA]\n+    struct MyIdx { }\n+}\n \n #[test]\n fn index_size_is_optimized() {"}, {"sha": "99f3f638d2f4f848357b7108268be0b8662bfef4", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "patch": "@@ -59,6 +59,17 @@ impl Parse for Newtype {\n                     ord = false;\n                     false\n                 }\n+                \"max\" => {\n+                    let Ok(Meta::NameValue(literal) )= attr.parse_meta() else {\n+                        panic!(\"#[max = NUMBER] attribute requires max value\");\n+                    };\n+\n+                    if let Some(old) = max.replace(literal.lit) {\n+                        panic!(\"Specified multiple MAX: {:?}\", old);\n+                    }\n+\n+                    false\n+                }\n                 _ => true,\n             },\n             _ => true,\n@@ -84,16 +95,6 @@ impl Parse for Newtype {\n                     }\n                     continue;\n                 }\n-                if body.lookahead1().peek(kw::MAX) {\n-                    body.parse::<kw::MAX>()?;\n-                    body.parse::<Token![=]>()?;\n-                    let val: Lit = body.parse()?;\n-                    try_comma()?;\n-                    if let Some(old) = max.replace(val) {\n-                        panic!(\"Specified multiple MAX: {:?}\", old);\n-                    }\n-                    continue;\n-                }\n \n                 // We've parsed everything that the user provided, so we're done\n                 if body.is_empty() {"}, {"sha": "3025e2dd1342c40bd1abc80b5edce0d2ade36772", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "patch": "@@ -11,9 +11,9 @@ rustc_index::newtype_index! {\n     /// (which _*descend*_ from u32::MAX). Id value `0` (zero) represents a virtual counter with a\n     /// constant value of `0`.\n     #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n     pub struct ExpressionOperandId {\n         DEBUG_FORMAT = \"ExpressionOperandId({})\",\n-        MAX = 0xFFFF_FFFF,\n     }\n }\n \n@@ -33,9 +33,9 @@ impl ExpressionOperandId {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n     pub struct CounterValueReference {\n         DEBUG_FORMAT = \"CounterValueReference({})\",\n-        MAX = 0xFFFF_FFFF,\n     }\n }\n \n@@ -57,9 +57,9 @@ rustc_index::newtype_index! {\n     ///\n     /// Values descend from u32::MAX.\n     #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n     pub struct InjectedExpressionId {\n         DEBUG_FORMAT = \"InjectedExpressionId({})\",\n-        MAX = 0xFFFF_FFFF,\n     }\n }\n \n@@ -68,9 +68,9 @@ rustc_index::newtype_index! {\n     ///\n     /// Values ascend from 0.\n     #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n     pub struct InjectedExpressionIndex {\n         DEBUG_FORMAT = \"InjectedExpressionIndex({})\",\n-        MAX = 0xFFFF_FFFF,\n     }\n }\n \n@@ -79,9 +79,9 @@ rustc_index::newtype_index! {\n     /// array position in the LLVM coverage map \"Expressions\" array, which is assembled during the\n     /// \"mapgen\" process. They cannot be computed algorithmically, from the other `newtype_index`s.\n     #[derive(HashStable)]\n+    #[max = 0xFFFF_FFFF]\n     pub struct MappedExpressionIndex {\n         DEBUG_FORMAT = \"MappedExpressionIndex({})\",\n-        MAX = 0xFFFF_FFFF,\n     }\n }\n "}, {"sha": "fbc0aeb6c802079e29d2b5bfc2deb94461b30ca1", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "patch": "@@ -27,8 +27,8 @@ use smallvec::SmallVec;\n // unused so that we can store multiple index types in `CompressedHybridIndex`,\n // and use those bits to encode which index type it contains.\n rustc_index::newtype_index! {\n+    #[max = 0x7FFF_FFFF]\n     pub struct SerializedDepNodeIndex {\n-        MAX = 0x7FFF_FFFF\n     }\n }\n "}]}