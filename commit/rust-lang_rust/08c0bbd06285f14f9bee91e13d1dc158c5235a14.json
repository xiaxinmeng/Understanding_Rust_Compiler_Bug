{"sha": "08c0bbd06285f14f9bee91e13d1dc158c5235a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YzBiYmQwNjI4NWYxNGY5YmVlOTFlMTNkMWRjMTU4YzUyMzVhMTQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-08-02T01:22:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-02T01:22:28Z"}, "message": "Rollup merge of #43585 - frewsxcv:frewsxcv-hashset-docs, r=steveklabnik,quietmisdreavus\n\nImprove docs & doc examples for HashSet.\n\nNone", "tree": {"sha": "e243ccfb31eb8a94920ed343a977195c32d6cfbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e243ccfb31eb8a94920ed343a977195c32d6cfbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08c0bbd06285f14f9bee91e13d1dc158c5235a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08c0bbd06285f14f9bee91e13d1dc158c5235a14", "html_url": "https://github.com/rust-lang/rust/commit/08c0bbd06285f14f9bee91e13d1dc158c5235a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08c0bbd06285f14f9bee91e13d1dc158c5235a14/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c96ce4064a830b06c113b496c7409a28aca3fccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c96ce4064a830b06c113b496c7409a28aca3fccf", "html_url": "https://github.com/rust-lang/rust/commit/c96ce4064a830b06c113b496c7409a28aca3fccf"}, {"sha": "d9df2963ad40b67aecde95cbfe98599a45351352", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9df2963ad40b67aecde95cbfe98599a45351352", "html_url": "https://github.com/rust-lang/rust/commit/d9df2963ad40b67aecde95cbfe98599a45351352"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "80a223c7d74eaae6dcf72231c747749c063afe4b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/08c0bbd06285f14f9bee91e13d1dc158c5235a14/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c0bbd06285f14f9bee91e13d1dc158c5235a14/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=08c0bbd06285f14f9bee91e13d1dc158c5235a14", "patch": "@@ -123,13 +123,13 @@ pub struct HashSet<T, S = RandomState> {\n }\n \n impl<T: Hash + Eq> HashSet<T, RandomState> {\n-    /// Creates an empty HashSet.\n+    /// Creates an empty `HashSet`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let mut set: HashSet<i32> = HashSet::new();\n+    /// let set: HashSet<i32> = HashSet::new();\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -146,7 +146,8 @@ impl<T: Hash + Eq> HashSet<T, RandomState> {\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let mut set: HashSet<i32> = HashSet::with_capacity(10);\n+    /// let set: HashSet<i32> = HashSet::with_capacity(10);\n+    /// assert!(set.capacity() >= 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -215,6 +216,17 @@ impl<T, S> HashSet<T, S>\n     /// Returns a reference to the set's [`BuildHasher`].\n     ///\n     /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let hasher = RandomState::new();\n+    /// let set: HashSet<i32> = HashSet::with_hasher(hasher);\n+    /// let hasher: &RandomState = set.hasher();\n+    /// ```\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n     pub fn hasher(&self) -> &S {\n         self.map.hasher()\n@@ -249,6 +261,7 @@ impl<T, S> HashSet<T, S>\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<i32> = HashSet::new();\n     /// set.reserve(10);\n+    /// assert!(set.capacity() >= 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n@@ -312,13 +325,13 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x); // Print 1\n     /// }\n     ///\n-    /// let diff: HashSet<_> = a.difference(&b).cloned().collect();\n-    /// assert_eq!(diff, [1].iter().cloned().collect());\n+    /// let diff: HashSet<_> = a.difference(&b).collect();\n+    /// assert_eq!(diff, [1].iter().collect());\n     ///\n     /// // Note that difference is not symmetric,\n     /// // and `b - a` means something else:\n-    /// let diff: HashSet<_> = b.difference(&a).cloned().collect();\n-    /// assert_eq!(diff, [4].iter().cloned().collect());\n+    /// let diff: HashSet<_> = b.difference(&a).collect();\n+    /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n@@ -343,11 +356,11 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let diff1: HashSet<_> = a.symmetric_difference(&b).cloned().collect();\n-    /// let diff2: HashSet<_> = b.symmetric_difference(&a).cloned().collect();\n+    /// let diff1: HashSet<_> = a.symmetric_difference(&b).collect();\n+    /// let diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n     ///\n     /// assert_eq!(diff1, diff2);\n-    /// assert_eq!(diff1, [1, 4].iter().cloned().collect());\n+    /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(&'a self,\n@@ -371,8 +384,8 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let intersection: HashSet<_> = a.intersection(&b).cloned().collect();\n-    /// assert_eq!(intersection, [2, 3].iter().cloned().collect());\n+    /// let intersection: HashSet<_> = a.intersection(&b).collect();\n+    /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n@@ -397,8 +410,8 @@ impl<T, S> HashSet<T, S>\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let union: HashSet<_> = a.union(&b).cloned().collect();\n-    /// assert_eq!(union, [1, 2, 3, 4].iter().cloned().collect());\n+    /// let union: HashSet<_> = a.union(&b).collect();\n+    /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n@@ -440,6 +453,22 @@ impl<T, S> HashSet<T, S>\n     }\n \n     /// Clears the set, returning all elements in an iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert!(!set.is_empty());\n+    ///\n+    /// // print 1, 2, 3 in an arbitrary order\n+    /// for i in set.drain() {\n+    ///     println!(\"{}\", i);\n+    /// }\n+    ///\n+    /// assert!(set.is_empty());\n+    /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<T> {"}]}