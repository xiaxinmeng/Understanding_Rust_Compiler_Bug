{"sha": "07e9426efba69e8b662f2a896326b157f5d0ba2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTk0MjZlZmJhNjllOGI2NjJmMmE4OTYzMjZiMTU3ZjVkMGJhMmQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-24T03:26:15Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-03T22:11:37Z"}, "message": "Make `length_limit` a `usize`", "tree": {"sha": "756fbbdfde3447b5145ee1b0aa790581fc165d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/756fbbdfde3447b5145ee1b0aa790581fc165d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e9426efba69e8b662f2a896326b157f5d0ba2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e9426efba69e8b662f2a896326b157f5d0ba2d", "html_url": "https://github.com/rust-lang/rust/commit/07e9426efba69e8b662f2a896326b157f5d0ba2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e9426efba69e8b662f2a896326b157f5d0ba2d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e178030ea4d1b3a1e38cc53141188d2249d33cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e178030ea4d1b3a1e38cc53141188d2249d33cf5", "html_url": "https://github.com/rust-lang/rust/commit/e178030ea4d1b3a1e38cc53141188d2249d33cf5"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "0e4c5410abe1e17255a1ec1dc9687967e1f63f2a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e9426efba69e8b662f2a896326b157f5d0ba2d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e9426efba69e8b662f2a896326b157f5d0ba2d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=07e9426efba69e8b662f2a896326b157f5d0ba2d", "patch": "@@ -1043,13 +1043,11 @@ impl MarkdownSummaryLine<'_> {\n ///\n /// Returns a tuple of the rendered HTML string and whether the output was shortened\n /// due to the provided `length_limit`.\n-fn markdown_summary_with_limit(md: &str, length_limit: Option<u16>) -> (String, bool) {\n+fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool) {\n     if md.is_empty() {\n         return (String::new(), false);\n     }\n \n-    let length_limit = length_limit.unwrap_or(u16::MAX) as usize;\n-\n     let mut s = String::with_capacity(md.len() * 3 / 2);\n     let mut text_length = 0;\n     let mut stopped_early = false;\n@@ -1115,7 +1113,7 @@ fn markdown_summary_with_limit(md: &str, length_limit: Option<u16>) -> (String,\n ///\n /// See [`markdown_summary_with_limit`] for details about what is rendered and what is not.\n crate fn short_markdown_summary(markdown: &str) -> String {\n-    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, Some(59));\n+    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, 59);\n \n     if was_shortened {\n         s.push('\u2026');"}]}