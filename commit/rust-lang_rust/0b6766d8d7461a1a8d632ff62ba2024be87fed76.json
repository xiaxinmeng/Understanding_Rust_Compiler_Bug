{"sha": "0b6766d8d7461a1a8d632ff62ba2024be87fed76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNjc2NmQ4ZDc0NjFhMWE4ZDYzMmZmNjJiYTIwMjRiZTg3ZmVkNzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-09T17:17:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-23T16:34:44Z"}, "message": "Allow adding `RUSTFLAGS` after `Builder::cargo`\n\nThis commit changes the return type of `Builder::cargo` to return a\nbuilder that allows dynamically adding more `RUSTFLAGS` values\nafter-the-fact. While not used yet, this will later be used to delete\nmore of `rustc.rs`", "tree": {"sha": "f4bb04ece502e2bbaa0a80f758ad5a6b815a30aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4bb04ece502e2bbaa0a80f758ad5a6b815a30aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b6766d8d7461a1a8d632ff62ba2024be87fed76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6766d8d7461a1a8d632ff62ba2024be87fed76", "html_url": "https://github.com/rust-lang/rust/commit/0b6766d8d7461a1a8d632ff62ba2024be87fed76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b6766d8d7461a1a8d632ff62ba2024be87fed76/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc6eb40827c5a03c378766770c1320ac73d13ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc6eb40827c5a03c378766770c1320ac73d13ed", "html_url": "https://github.com/rust-lang/rust/commit/5cc6eb40827c5a03c378766770c1320ac73d13ed"}], "stats": {"total": 154, "additions": 95, "deletions": 59}, "files": [{"sha": "a039f7b8c85e6a38830e7a51e5349d9a1bb6ad77", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0b6766d8d7461a1a8d632ff62ba2024be87fed76", "patch": "@@ -3,6 +3,7 @@ use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n use std::collections::HashMap;\n use std::env;\n+use std::ffi::OsStr;\n use std::fmt::Debug;\n use std::fs;\n use std::hash::Hash;\n@@ -682,15 +683,15 @@ impl<'a> Builder<'a> {\n \n     /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic\n     /// library lookup path.\n-    pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Command) {\n+    pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Cargo) {\n         // Windows doesn't need dylib path munging because the dlls for the\n         // compiler live next to the compiler and the system will find them\n         // automatically.\n         if cfg!(windows) {\n             return;\n         }\n \n-        add_lib_path(vec![self.rustc_libdir(compiler)], cmd);\n+        add_lib_path(vec![self.rustc_libdir(compiler)], &mut cmd.command);\n     }\n \n     /// Gets a path to the compiler specified.\n@@ -752,7 +753,7 @@ impl<'a> Builder<'a> {\n         mode: Mode,\n         target: Interned<String>,\n         cmd: &str,\n-    ) -> Command {\n+    ) -> Cargo {\n         let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n \n@@ -1225,9 +1226,10 @@ impl<'a> Builder<'a> {\n \n         self.ci_env.force_coloring_in_ci(&mut cargo);\n \n-        cargo.env(\"RUSTFLAGS\", &rustflags.0);\n-\n-        cargo\n+        Cargo {\n+            command: cargo,\n+            rustflags,\n+        }\n     }\n \n     /// Ensure that a given step is built, returning its output. This will\n@@ -1328,6 +1330,7 @@ impl<'a> Builder<'a> {\n #[cfg(test)]\n mod tests;\n \n+#[derive(Debug)]\n struct Rustflags(String);\n \n impl Rustflags {\n@@ -1364,3 +1367,37 @@ impl Rustflags {\n         self\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct Cargo {\n+    command: Command,\n+    rustflags: Rustflags,\n+}\n+\n+impl Cargo {\n+    pub fn arg(&mut self, arg: impl AsRef<OsStr>) -> &mut Cargo {\n+        self.command.arg(arg.as_ref());\n+        self\n+    }\n+\n+    pub fn args<I, S>(&mut self, args: I) -> &mut Cargo\n+        where I: IntoIterator<Item=S>, S: AsRef<OsStr>\n+    {\n+        for arg in args {\n+            self.arg(arg.as_ref());\n+        }\n+        self\n+    }\n+\n+    pub fn env(&mut self, key: impl AsRef<OsStr>, value: impl AsRef<OsStr>) -> &mut Cargo {\n+        self.command.env(key.as_ref(), value.as_ref());\n+        self\n+    }\n+}\n+\n+impl From<Cargo> for Command {\n+    fn from(mut cargo: Cargo) -> Command {\n+        cargo.command.env(\"RUSTFLAGS\", &cargo.rustflags.0);\n+        cargo.command\n+    }\n+}"}, {"sha": "cadb9a7e441f24b1adcdd38f6f0407bb2767449c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=0b6766d8d7461a1a8d632ff62ba2024be87fed76", "patch": "@@ -52,7 +52,7 @@ impl Step for Std {\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &libstd_stamp(builder, compiler, target),\n                   true);\n@@ -100,7 +100,7 @@ impl Step for Rustc {\n \n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &librustc_stamp(builder, compiler, target),\n                   true);\n@@ -152,7 +152,7 @@ impl Step for CodegenBackend {\n         // We won't build LLVM if it's not available, as it shouldn't affect `check`.\n \n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n@@ -185,18 +185,18 @@ impl Step for Rustdoc {\n \n         builder.ensure(Rustc { target });\n \n-        let mut cargo = prepare_tool_cargo(builder,\n-                                           compiler,\n-                                           Mode::ToolRustc,\n-                                           target,\n-                                           cargo_subcommand(builder.kind),\n-                                           \"src/tools/rustdoc\",\n-                                           SourceType::InTree,\n-                                           &[]);\n+        let cargo = prepare_tool_cargo(builder,\n+                                       compiler,\n+                                       Mode::ToolRustc,\n+                                       target,\n+                                       cargo_subcommand(builder.kind),\n+                                       \"src/tools/rustdoc\",\n+                                       SourceType::InTree,\n+                                       &[]);\n \n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &rustdoc_stamp(builder, compiler, target),\n                   true);"}, {"sha": "c63856b6f6e26435019073287728be7e5f963c87", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0b6766d8d7461a1a8d632ff62ba2024be87fed76", "patch": "@@ -21,6 +21,7 @@ use serde::Deserialize;\n use serde_json;\n \n use crate::dist;\n+use crate::builder::Cargo;\n use crate::util::{exe, is_dylib};\n use crate::{Compiler, Mode, GitRepo};\n use crate::native;\n@@ -98,7 +99,7 @@ impl Step for Std {\n         builder.info(&format!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   false);\n@@ -156,7 +157,7 @@ fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target:\n pub fn std_cargo(builder: &Builder<'_>,\n                  compiler: &Compiler,\n                  target: Interned<String>,\n-                 cargo: &mut Command) {\n+                 cargo: &mut Cargo) {\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n@@ -430,7 +431,7 @@ impl Step for Rustc {\n         builder.info(&format!(\"Building stage{} compiler artifacts ({} -> {})\",\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   false);\n@@ -443,14 +444,14 @@ impl Step for Rustc {\n     }\n }\n \n-pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Command) {\n+pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo) {\n     cargo.arg(\"--features\").arg(builder.rustc_features())\n          .arg(\"--manifest-path\")\n          .arg(builder.src.join(\"src/rustc/Cargo.toml\"));\n     rustc_cargo_env(builder, cargo);\n }\n \n-pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Command) {\n+pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo) {\n     // Set some configuration variables picked up by build scripts and\n     // the compiler alike\n     cargo.env(\"CFG_RELEASE\", builder.rust_release())\n@@ -577,14 +578,11 @@ impl Step for CodegenBackend {\n         rustc_cargo_env(builder, &mut cargo);\n \n         let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n+        cargo.arg(\"--features\").arg(features);\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n-        let files = run_cargo(builder,\n-                              cargo.arg(\"--features\").arg(features),\n-                              vec![],\n-                              &tmp_stamp,\n-                              false);\n+        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, false);\n         if builder.config.dry_run {\n             return;\n         }\n@@ -609,7 +607,7 @@ impl Step for CodegenBackend {\n }\n \n pub fn build_codegen_backend(builder: &Builder<'_>,\n-                             cargo: &mut Command,\n+                             cargo: &mut Cargo,\n                              compiler: &Compiler,\n                              target: Interned<String>,\n                              backend: Interned<String>) -> String {\n@@ -949,7 +947,7 @@ pub fn add_to_sysroot(\n }\n \n pub fn run_cargo(builder: &Builder<'_>,\n-                 cargo: &mut Command,\n+                 cargo: Cargo,\n                  tail_args: Vec<String>,\n                  stamp: &Path,\n                  is_check: bool)\n@@ -1081,10 +1079,11 @@ pub fn run_cargo(builder: &Builder<'_>,\n \n pub fn stream_cargo(\n     builder: &Builder<'_>,\n-    cargo: &mut Command,\n+    cargo: Cargo,\n     tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage<'_>),\n ) -> bool {\n+    let mut cargo = Command::from(cargo);\n     if builder.config.dry_run {\n         return true;\n     }"}, {"sha": "4ee8cd2485c02d34f2f142343364d65e774a7370", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=0b6766d8d7461a1a8d632ff62ba2024be87fed76", "patch": "@@ -475,7 +475,7 @@ impl Step for Std {\n                  .arg(\"--resource-suffix\").arg(crate::channel::CFG_RELEASE_NUM)\n                  .arg(\"--index-page\").arg(&builder.src.join(\"src/doc/index.md\"));\n \n-            builder.run(&mut cargo);\n+            builder.run(&mut cargo.into());\n         };\n         for krate in &[\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"] {\n             run_cargo_rustdoc_for(krate);\n@@ -561,7 +561,7 @@ impl Step for Rustc {\n             cargo.arg(\"-p\").arg(krate);\n         }\n \n-        builder.run(&mut cargo);\n+        builder.run(&mut cargo.into());\n     }\n }\n \n@@ -656,7 +656,7 @@ impl Step for Rustdoc {\n         cargo.arg(\"-p\").arg(\"rustdoc\");\n \n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n-        builder.run(&mut cargo);\n+        builder.run(&mut cargo.into());\n     }\n }\n "}, {"sha": "90d1d9d6b7cef666a963f6b015987f146aa7e44c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0b6766d8d7461a1a8d632ff62ba2024be87fed76", "patch": "@@ -233,10 +233,9 @@ impl Step for Cargo {\n         // those features won't be able to land.\n         cargo.env(\"CARGO_TEST_DISABLE_NIGHTLY\", \"1\");\n \n-        try_run(\n-            builder,\n-            cargo.env(\"PATH\", &path_for_cargo(builder, compiler)),\n-        );\n+        cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n+\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n@@ -290,7 +289,7 @@ impl Step for Rls {\n         cargo.arg(\"--\")\n             .args(builder.config.cmd.test_args());\n \n-        if try_run(builder, &mut cargo) {\n+        if try_run(builder, &mut cargo.into()) {\n             builder.save_toolstate(\"rls\", ToolState::TestPass);\n         }\n     }\n@@ -348,7 +347,7 @@ impl Step for Rustfmt {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        if try_run(builder, &mut cargo) {\n+        if try_run(builder, &mut cargo.into()) {\n             builder.save_toolstate(\"rustfmt\", ToolState::TestPass);\n         }\n     }\n@@ -418,6 +417,7 @@ impl Step for Miri {\n             cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out); // cargo adds a `bin/`\n             cargo.env(\"XARGO\", builder.out.join(\"bin\").join(\"xargo\"));\n \n+            let mut cargo = Command::from(cargo);\n             if !try_run(builder, &mut cargo) {\n                 return;\n             }\n@@ -467,7 +467,7 @@ impl Step for Miri {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if !try_run(builder, &mut cargo) {\n+            if !try_run(builder, &mut cargo.into()) {\n                 return;\n             }\n \n@@ -502,16 +502,16 @@ impl Step for CompiletestTest {\n         let host = self.host;\n         let compiler = builder.compiler(0, host);\n \n-        let mut cargo = tool::prepare_tool_cargo(builder,\n-                                                 compiler,\n-                                                 Mode::ToolBootstrap,\n-                                                 host,\n-                                                 \"test\",\n-                                                 \"src/tools/compiletest\",\n-                                                 SourceType::InTree,\n-                                                 &[]);\n+        let cargo = tool::prepare_tool_cargo(builder,\n+                                             compiler,\n+                                             Mode::ToolBootstrap,\n+                                             host,\n+                                             \"test\",\n+                                             \"src/tools/compiletest\",\n+                                             SourceType::InTree,\n+                                             &[]);\n \n-        try_run(builder, &mut cargo);\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n@@ -571,7 +571,7 @@ impl Step for Clippy {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run(builder, &mut cargo) {\n+            if try_run(builder, &mut cargo.into()) {\n                 builder.save_toolstate(\"clippy-driver\", ToolState::TestPass);\n             }\n         } else {\n@@ -1841,7 +1841,7 @@ impl Step for Crate {\n             test_kind, krate, compiler.stage, &compiler.host, target\n         ));\n         let _time = util::timeit(&builder);\n-        try_run(builder, &mut cargo);\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n@@ -1909,7 +1909,7 @@ impl Step for CrateRustdoc {\n         ));\n         let _time = util::timeit(&builder);\n \n-        try_run(builder, &mut cargo);\n+        try_run(builder, &mut cargo.into());\n     }\n }\n "}, {"sha": "553adb0ebb64c15e5f2c23c2fe10ea4c5f3ffd10", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6766d8d7461a1a8d632ff62ba2024be87fed76/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=0b6766d8d7461a1a8d632ff62ba2024be87fed76", "patch": "@@ -8,7 +8,7 @@ use build_helper::t;\n \n use crate::Mode;\n use crate::Compiler;\n-use crate::builder::{Step, RunConfig, ShouldRun, Builder};\n+use crate::builder::{Step, RunConfig, ShouldRun, Builder, Cargo as CargoCommand};\n use crate::util::{exe, add_lib_path, CiEnv};\n use crate::compile;\n use crate::channel::GitInfo;\n@@ -63,7 +63,7 @@ impl Step for ToolBuild {\n             _ => panic!(\"unexpected Mode for tool build\")\n         }\n \n-        let mut cargo = prepare_tool_cargo(\n+        let cargo = prepare_tool_cargo(\n             builder,\n             compiler,\n             self.mode,\n@@ -76,7 +76,7 @@ impl Step for ToolBuild {\n \n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 | \"rls\"\n@@ -229,7 +229,7 @@ pub fn prepare_tool_cargo(\n     path: &'static str,\n     source_type: SourceType,\n     extra_features: &[String],\n-) -> Command {\n+) -> CargoCommand {\n     let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n@@ -517,7 +517,7 @@ impl Step for Rustdoc {\n         // libraries here. The intuition here is that If we've built a compiler, we should be able\n         // to build rustdoc.\n \n-        let mut cargo = prepare_tool_cargo(\n+        let cargo = prepare_tool_cargo(\n             builder,\n             build_compiler,\n             Mode::ToolRustc,\n@@ -530,7 +530,7 @@ impl Step for Rustdoc {\n \n         builder.info(&format!(\"Building rustdoc for stage{} ({})\",\n             target_compiler.stage, target_compiler.host));\n-        builder.run(&mut cargo);\n+        builder.run(&mut cargo.into());\n \n         // Cargo adds a number of paths to the dylib search path on windows, which results in\n         // the wrong rustdoc being executed. To avoid the conflicting rustdocs, we name the \"tool\""}]}