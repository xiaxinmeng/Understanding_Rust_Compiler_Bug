{"sha": "a931fb1ef633473e272bb3f9ba86968dd90f44a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MzFmYjFlZjYzMzQ3M2UyNzJiYjNmOWJhODY5NjhkZDkwZjQ0YTc=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-06-14T19:03:17Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-06-14T19:03:17Z"}, "message": "Get rid of failure: gen_lsp_server", "tree": {"sha": "c412d82041686c7cd8033ff0bdc7ae5545c50cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c412d82041686c7cd8033ff0bdc7ae5545c50cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a931fb1ef633473e272bb3f9ba86968dd90f44a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE84DWFaalCZAXJAejN68UFUDeVX0FAl0D73YACgkQN68UFUDe\nVX1MtxAAwF9NgtR8wSS/VBjm72bhA5oQmH8lJb+ktICK83J9NQCo5oxvCWOCFiSA\nLmmotbQUtPgNyS0n9IR55mCRTW5FmqGbeKdG8fgY7S+LRwRXrLIyQbkXltgcm9gs\n1UUWb74KayMeMXAGzeRI9CqNFsgME1cuyaLaA9C5/XPboevZvy31HWUOPo+p58dM\nX11WCpVdxuKWd/1Zv8LGHO9ZMDzqYyL3f4HvXMYeesxIFDyBY4G78Pa7pFvaSbZL\nNaS7ZkUa2xoO1jbNMAvHZaEUph3XVqFBX1YheiwfEgdGSPRv9X4y5RelPfJQhMyM\nUfCtXrF25CG7Jq49L5Q7nCFjbukZk53c3HQ/niYo3VR2vkE49Bsj/JIJuvXhlixO\nJ+BCL399+xb4p0+W+5mJZR27kYFA/lZE+abat9Nc639i6XAtn1dqT3tmZRsePPt9\nYO0DnfcR6S280buBSh6nBRmNOz47Zbhm0gH6om73XckMZPNEA8mQcPsDjIZvK+FU\nQeBk29JO/y2R/R6+AackLkQrIzonKDsG2l1r5uwbTacrwP8fts+19o15UwgFSnLP\ni+iValLZ36TBpqrNcVIoWomsrOsFmgSvNoGZQZDJWBGrXvB1nzi4CR2qsU9kC7uq\n73WwMdoHIRS9cv59Nu99oBZRx6y9g7Rc4jLbxqm/24NRG9FwI9M=\n=0kDe\n-----END PGP SIGNATURE-----", "payload": "tree c412d82041686c7cd8033ff0bdc7ae5545c50cea\nparent 84b66107828365d02fd29641fe32b3c42f036864\nauthor Muhammad Mominul Huque <mominul2082@gmail.com> 1560538997 +0600\ncommitter Muhammad Mominul Huque <mominul2082@gmail.com> 1560538997 +0600\n\nGet rid of failure: gen_lsp_server\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a931fb1ef633473e272bb3f9ba86968dd90f44a7", "html_url": "https://github.com/rust-lang/rust/commit/a931fb1ef633473e272bb3f9ba86968dd90f44a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a931fb1ef633473e272bb3f9ba86968dd90f44a7/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b66107828365d02fd29641fe32b3c42f036864", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b66107828365d02fd29641fe32b3c42f036864", "html_url": "https://github.com/rust-lang/rust/commit/84b66107828365d02fd29641fe32b3c42f036864"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "08690c8c3aa293309023f8a7cb7abae730543b30", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a931fb1ef633473e272bb3f9ba86968dd90f44a7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a931fb1ef633473e272bb3f9ba86968dd90f44a7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a931fb1ef633473e272bb3f9ba86968dd90f44a7", "patch": "@@ -490,7 +490,6 @@ name = \"gen_lsp_server\"\n version = \"0.2.0\"\n dependencies = [\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.11.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.57.2 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "d375606d0ba0298eeacceed81d039ea13b066788", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=a931fb1ef633473e272bb3f9ba86968dd90f44a7", "patch": "@@ -10,7 +10,6 @@ description = \"Generic LSP server scaffold.\"\n [dependencies]\n lsp-types = \"0.57.0\"\n log = \"0.4.3\"\n-failure = \"0.1.4\"\n serde_json = \"1.0.34\"\n serde = { version = \"1.0.83\", features = [\"derive\"] }\n crossbeam-channel = \"0.3.5\""}, {"sha": "bc497f74a1e6bdf054308c63c43e377b1e18ab47", "filename": "crates/gen_lsp_server/examples/01_gen_lsp_server.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs?ref=a931fb1ef633473e272bb3f9ba86968dd90f44a7", "patch": "@@ -1,11 +1,13 @@\n+use std::error::Error;\r\n+\r\n use crossbeam_channel::{Sender, Receiver};\r\n use lsp_types::{\r\n     ServerCapabilities, InitializeParams,\r\n     request::{GotoDefinition, GotoDefinitionResponse},\r\n };\r\n use gen_lsp_server::{run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse};\r\n \r\n-fn main() -> Result<(), failure::Error> {\r\n+fn main() -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     let (receiver, sender, io_threads) = stdio_transport();\r\n     run_server(ServerCapabilities::default(), receiver, sender, main_loop)?;\r\n     io_threads.join()?;\r\n@@ -16,7 +18,7 @@ fn main_loop(\n     _params: InitializeParams,\r\n     receiver: &Receiver<RawMessage>,\r\n     sender: &Sender<RawMessage>,\r\n-) -> Result<(), failure::Error> {\r\n+) -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     for msg in receiver {\r\n         match msg {\r\n             RawMessage::Request(req) => {\r"}, {"sha": "1a6174462cf7e69f191a6731c9dbab067ca1196b", "filename": "crates/gen_lsp_server/examples/02_gen_lsp_server_with_logging.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs?ref=a931fb1ef633473e272bb3f9ba86968dd90f44a7", "patch": "@@ -42,6 +42,8 @@\n //! {\"jsonrpc\": \"2.0\", \"method\": \"exit\", \"params\": null}\r\n //! ```\r\n \r\n+use std::error::Error;\r\n+\r\n use crossbeam_channel::{Sender, Receiver};\r\n use lsp_types::{\r\n     ServerCapabilities, InitializeParams,\r\n@@ -52,7 +54,7 @@ use gen_lsp_server::{\n     run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse, RawRequest,\r\n };\r\n \r\n-fn main() -> Result<(), failure::Error> {\r\n+fn main() -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     // Set up logging. Because `stdio_transport` gets a lock on stdout and stdin, we must have\r\n     // our logging only write out to stderr.\r\n     flexi_logger::Logger::with_str(\"info\").start().unwrap();\r\n@@ -75,7 +77,7 @@ fn main_loop(\n     _params: InitializeParams,\r\n     receiver: &Receiver<RawMessage>,\r\n     sender: &Sender<RawMessage>,\r\n-) -> Result<(), failure::Error> {\r\n+) -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     info!(\"starting example main loop\");\r\n     for msg in receiver {\r\n         info!(\"got msg: {:?}\", msg);\r"}, {"sha": "7643dcacc81b139ce871e3f9f30a74f51ea79778", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=a931fb1ef633473e272bb3f9ba86968dd90f44a7", "patch": "@@ -54,7 +54,7 @@\n //! }\n //! ```\n \n-use failure::{bail, format_err};\n+use std::error::Error;\n \n mod msg;\n mod stdio;\n@@ -66,7 +66,7 @@ use lsp_types::{\n     InitializeParams, InitializeResult, ServerCapabilities,\n };\n \n-pub type Result<T> = ::std::result::Result<T, failure::Error>;\n+pub type Result<T> = ::std::result::Result<T, Box<dyn Error + Send + Sync>>;\n pub use crate::{\n     msg::{ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse, RawResponseError},\n     stdio::{stdio_transport, Threads},\n@@ -92,8 +92,8 @@ pub fn run_server(\n     match receiver.recv() {\n         Ok(RawMessage::Notification(n)) => n\n             .cast::<Exit>()\n-            .map_err(|n| format_err!(\"unexpected notification during shutdown: {:?}\", n))?,\n-        m => bail!(\"unexpected message during shutdown: {:?}\", m),\n+            .map_err(|n| format!(\"unexpected notification during shutdown: {:?}\", n))?,\n+        m => Err(format!(\"unexpected message during shutdown: {:?}\", m))?,\n     }\n     log::info!(\"lsp server shutdown complete\");\n     Ok(())\n@@ -118,19 +118,19 @@ fn initialize(\n ) -> Result<InitializeParams> {\n     let (id, params) = match receiver.recv() {\n         Ok(RawMessage::Request(req)) => match req.cast::<Initialize>() {\n-            Err(req) => bail!(\"expected initialize request, got {:?}\", req),\n+            Err(req) => Err(format!(\"expected initialize request, got {:?}\", req))?,\n             Ok(req) => req,\n         },\n-        msg => bail!(\"expected initialize request, got {:?}\", msg),\n+        msg => Err(format!(\"expected initialize request, got {:?}\", msg))?,\n     };\n     let resp = RawResponse::ok::<Initialize>(id, &InitializeResult { capabilities: caps });\n     sender.send(RawMessage::Response(resp)).unwrap();\n     match receiver.recv() {\n         Ok(RawMessage::Notification(n)) => {\n             n.cast::<Initialized>()\n-                .map_err(|_| format_err!(\"expected initialized notification\"))?;\n+                .map_err(|_| \"expected initialized notification\")?;\n         }\n-        _ => bail!(\"expected initialized notification\"),\n+        _ => Err(format!(\"expected initialized notification\"))?,\n     }\n     Ok(params)\n }"}, {"sha": "8138b84eb192618cba9ef3872613fdda08a37b0d", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=a931fb1ef633473e272bb3f9ba86968dd90f44a7", "patch": "@@ -3,7 +3,6 @@ use std::io::{BufRead, Write};\n use lsp_types::{notification::Notification, request::Request};\n use serde::{Deserialize, Serialize};\n use serde_json::{from_str, from_value, to_string, to_value, Value};\n-use failure::{bail, format_err};\n \n use crate::Result;\n \n@@ -175,7 +174,7 @@ fn read_msg_text(inp: &mut impl BufRead) -> Result<Option<String>> {\n             return Ok(None);\n         }\n         if !buf.ends_with(\"\\r\\n\") {\n-            bail!(\"malformed header: {:?}\", buf);\n+            Err(format!(\"malformed header: {:?}\", buf))?;\n         }\n         let buf = &buf[..buf.len() - 2];\n         if buf.is_empty() {\n@@ -184,12 +183,12 @@ fn read_msg_text(inp: &mut impl BufRead) -> Result<Option<String>> {\n         let mut parts = buf.splitn(2, \": \");\n         let header_name = parts.next().unwrap();\n         let header_value =\n-            parts.next().ok_or_else(|| format_err!(\"malformed header: {:?}\", buf))?;\n+            parts.next().ok_or_else(|| format!(\"malformed header: {:?}\", buf))?;\n         if header_name == \"Content-Length\" {\n             size = Some(header_value.parse::<usize>()?);\n         }\n     }\n-    let size = size.ok_or_else(|| format_err!(\"no Content-Length\"))?;\n+    let size = size.ok_or(\"no Content-Length\")?;\n     let mut buf = buf.into_bytes();\n     buf.resize(size, 0);\n     inp.read_exact(&mut buf)?;"}, {"sha": "f8931f2dcea7fdea2fe40ecdbed7c7b2fcb16ac5", "filename": "crates/gen_lsp_server/src/stdio.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a931fb1ef633473e272bb3f9ba86968dd90f44a7/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs?ref=a931fb1ef633473e272bb3f9ba86968dd90f44a7", "patch": "@@ -4,7 +4,6 @@ use std::{\n };\n \n use crossbeam_channel::{bounded, Receiver, Sender};\n-use failure::bail;\n use lsp_types::notification::Exit;\n \n use crate::{RawMessage, Result};\n@@ -48,11 +47,11 @@ impl Threads {\n     pub fn join(self) -> Result<()> {\n         match self.reader.join() {\n             Ok(r) => r?,\n-            Err(_) => bail!(\"reader panicked\"),\n+            Err(_) => Err(\"reader panicked\")?,\n         }\n         match self.writer.join() {\n             Ok(r) => r,\n-            Err(_) => bail!(\"writer panicked\"),\n+            Err(_) => Err(\"writer panicked\")?,\n         }\n     }\n }"}]}