{"sha": "d8e5265309cf92857c996d4f55372e3b431468bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZTUyNjUzMDljZjkyODU3Yzk5NmQ0ZjU1MzcyZTNiNDMxNDY4YmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-02T09:42:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-02T09:42:03Z"}, "message": "Merge #5954\n\n5954: Add flexible configuration for runnables r=popzxc a=popzxc\n\nThis PR introduces two new configuration options for runnables: `overrideCargo` and `cargoExtraArgs`.\r\nThese options are applied to all the \"run\" tasks of rust analyzer, such as binaries and tests.\r\n\r\nOverall motivation is that rust-analyzer provides similar options, for example, for `rustfmt`, but not for runnables.\r\n\r\n## `overrideCargo`\r\n\r\nThis option allows user to replace `cargo` command with something else (well, something that is compatible with the cargo arguments).\r\n\r\nMotivation is that some projects may have wrappers around cargo (or even whole alternatives to cargo), which do something related to the project, and only then run `cargo`. With this feature, such users will be able to use lens and run tests directly from the IDE rather than from terminal.\r\n\r\n![cargo_override](https://user-images.githubusercontent.com/12111581/92306622-2f404f80-ef99-11ea-9bb7-6c6192a2c54a.gif)\r\n\r\n## `cargoExtraArgs`\r\n\r\nThis option allows user to add any additional arguments for `cargo`, such as `--release`.\r\n\r\nIt may be useful, for example, if project has big integration tests which take too long in debug mode, or if any other `cargo` flag has to be passed.\r\n\r\n![cargo_extra_args](https://user-images.githubusercontent.com/12111581/92306658-821a0700-ef99-11ea-8be9-bf0aff78e154.gif)\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "101f5f55c324d7cb7bf3c7ae22a553ca4f7bf66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/101f5f55c324d7cb7bf3c7ae22a553ca4f7bf66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8e5265309cf92857c996d4f55372e3b431468bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfdvXrCRBK7hj4Ov3rIwAAdHIIALKFq6hHSR46oi7V+l/xHQvy\n0BGheztxOhIFpi8u2XNYtmr05zuZRXcY2xOIs7RHY/aGRypssgti3uemweJZLS8d\nsM5vEPiqCLA1/TWC0IlZo3XQYQQiMte+/UrKa1kM4iC+B3a46ke1iK9u35V3Aaiv\ncSRxsAoI0wgptYa7f2K1Ims2dVkyNr4w15jk5xzUa/kickwysJFSorTuuyWY718T\nfORSewzEJmbSsW7bZC1QmTJEZiJceMDBZ7ydAWREIwnF1CysLuPyFhaYPKDtp/KM\nyksUKTuj7QCJ7YNXAwBSjhSnqdjp9axvPWxcRGEJdfD+/XXShLupUuVUhg1hFs0=\n=/c3R\n-----END PGP SIGNATURE-----\n", "payload": "tree 101f5f55c324d7cb7bf3c7ae22a553ca4f7bf66c\nparent 40a028c9a837f4f189b7db82cd4034536af87322\nparent 4ebacf9024d82349c4b95826a4a791bdf384d0df\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601631723 +0000\ncommitter GitHub <noreply@github.com> 1601631723 +0000\n\nMerge #5954\n\n5954: Add flexible configuration for runnables r=popzxc a=popzxc\n\nThis PR introduces two new configuration options for runnables: `overrideCargo` and `cargoExtraArgs`.\r\nThese options are applied to all the \"run\" tasks of rust analyzer, such as binaries and tests.\r\n\r\nOverall motivation is that rust-analyzer provides similar options, for example, for `rustfmt`, but not for runnables.\r\n\r\n## `overrideCargo`\r\n\r\nThis option allows user to replace `cargo` command with something else (well, something that is compatible with the cargo arguments).\r\n\r\nMotivation is that some projects may have wrappers around cargo (or even whole alternatives to cargo), which do something related to the project, and only then run `cargo`. With this feature, such users will be able to use lens and run tests directly from the IDE rather than from terminal.\r\n\r\n![cargo_override](https://user-images.githubusercontent.com/12111581/92306622-2f404f80-ef99-11ea-9bb7-6c6192a2c54a.gif)\r\n\r\n## `cargoExtraArgs`\r\n\r\nThis option allows user to add any additional arguments for `cargo`, such as `--release`.\r\n\r\nIt may be useful, for example, if project has big integration tests which take too long in debug mode, or if any other `cargo` flag has to be passed.\r\n\r\n![cargo_extra_args](https://user-images.githubusercontent.com/12111581/92306658-821a0700-ef99-11ea-8be9-bf0aff78e154.gif)\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e5265309cf92857c996d4f55372e3b431468bf", "html_url": "https://github.com/rust-lang/rust/commit/d8e5265309cf92857c996d4f55372e3b431468bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8e5265309cf92857c996d4f55372e3b431468bf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40a028c9a837f4f189b7db82cd4034536af87322", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a028c9a837f4f189b7db82cd4034536af87322", "html_url": "https://github.com/rust-lang/rust/commit/40a028c9a837f4f189b7db82cd4034536af87322"}, {"sha": "4ebacf9024d82349c4b95826a4a791bdf384d0df", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ebacf9024d82349c4b95826a4a791bdf384d0df", "html_url": "https://github.com/rust-lang/rust/commit/4ebacf9024d82349c4b95826a4a791bdf384d0df"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "0ab4c37bfffbab8befed5bc332dc9b45b6b136c2", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -38,6 +38,7 @@ pub struct Config {\n     pub cargo: CargoConfig,\n     pub rustfmt: RustfmtConfig,\n     pub flycheck: Option<FlycheckConfig>,\n+    pub runnables: RunnablesConfig,\n \n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n@@ -124,6 +125,15 @@ pub enum RustfmtConfig {\n     CustomCommand { command: String, args: Vec<String> },\n }\n \n+/// Configuration for runnable items, such as `main` function or tests.\n+#[derive(Debug, Clone, Default)]\n+pub struct RunnablesConfig {\n+    /// Custom command to be executed instead of `cargo` for runnables.\n+    pub override_cargo: Option<String>,\n+    /// Additional arguments for the `cargo`, e.g. `--release`.\n+    pub cargo_extra_args: Vec<String>,\n+}\n+\n #[derive(Debug, Clone, Default)]\n pub struct ClientCapsConfig {\n     pub location_link: bool,\n@@ -164,6 +174,7 @@ impl Config {\n                 extra_args: Vec::new(),\n                 features: Vec::new(),\n             }),\n+            runnables: RunnablesConfig::default(),\n \n             inlay_hints: InlayHintsConfig {\n                 type_hints: true,\n@@ -220,6 +231,10 @@ impl Config {\n             load_out_dirs_from_check: data.cargo_loadOutDirsFromCheck,\n             target: data.cargo_target.clone(),\n         };\n+        self.runnables = RunnablesConfig {\n+            override_cargo: data.runnables_overrideCargo,\n+            cargo_extra_args: data.runnables_cargoExtraArgs,\n+        };\n \n         self.proc_macro_srv = if data.procMacro_enable {\n             std::env::current_exe().ok().map(|path| (path, vec![\"proc-macro\".into()]))\n@@ -474,6 +489,9 @@ config_data! {\n         notifications_cargoTomlNotFound: bool      = true,\n         procMacro_enable: bool                     = false,\n \n+        runnables_overrideCargo: Option<String> = None,\n+        runnables_cargoExtraArgs: Vec<String>   = Vec::new(),\n+\n         rustfmt_extraArgs: Vec<String>               = Vec::new(),\n         rustfmt_overrideCommand: Option<Vec<String>> = None,\n "}, {"sha": "e970abb7c083eda59763faa21f47b5133ae0b022", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -491,6 +491,7 @@ pub(crate) fn handle_runnables(\n     }\n \n     // Add `cargo check` and `cargo test` for all targets of the whole package\n+    let config = &snap.config.runnables;\n     match cargo_spec {\n         Some(spec) => {\n             for &cmd in [\"check\", \"test\"].iter() {\n@@ -500,12 +501,14 @@ pub(crate) fn handle_runnables(\n                     kind: lsp_ext::RunnableKind::Cargo,\n                     args: lsp_ext::CargoRunnable {\n                         workspace_root: Some(spec.workspace_root.clone().into()),\n+                        override_cargo: config.override_cargo.clone(),\n                         cargo_args: vec![\n                             cmd.to_string(),\n                             \"--package\".to_string(),\n                             spec.package.clone(),\n                             \"--all-targets\".to_string(),\n                         ],\n+                        cargo_extra_args: config.cargo_extra_args.clone(),\n                         executable_args: Vec::new(),\n                         expect_test: None,\n                     },\n@@ -519,7 +522,9 @@ pub(crate) fn handle_runnables(\n                 kind: lsp_ext::RunnableKind::Cargo,\n                 args: lsp_ext::CargoRunnable {\n                     workspace_root: None,\n+                    override_cargo: config.override_cargo.clone(),\n                     cargo_args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n+                    cargo_extra_args: config.cargo_extra_args.clone(),\n                     executable_args: Vec::new(),\n                     expect_test: None,\n                 },"}, {"sha": "fee0bb69c70bb53535d95a333f9743c17107baff", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -171,10 +171,14 @@ pub enum RunnableKind {\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct CargoRunnable {\n+    // command to be executed instead of cargo\n+    pub override_cargo: Option<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub workspace_root: Option<PathBuf>,\n     // command, --package and --lib stuff\n     pub cargo_args: Vec<String>,\n+    // user-specified additional cargo args, like `--release`.\n+    pub cargo_extra_args: Vec<String>,\n     // stuff after --\n     pub executable_args: Vec<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]"}, {"sha": "aeacde0f7a2db1c67b3819ba3575d3d151b033a6", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -740,6 +740,7 @@ pub(crate) fn runnable(\n     file_id: FileId,\n     runnable: Runnable,\n ) -> Result<lsp_ext::Runnable> {\n+    let config = &snap.config.runnables;\n     let spec = CargoTargetSpec::for_file(snap, file_id)?;\n     let workspace_root = spec.as_ref().map(|it| it.workspace_root.clone());\n     let target = spec.as_ref().map(|s| s.target.clone());\n@@ -754,7 +755,9 @@ pub(crate) fn runnable(\n         kind: lsp_ext::RunnableKind::Cargo,\n         args: lsp_ext::CargoRunnable {\n             workspace_root: workspace_root.map(|it| it.into()),\n+            override_cargo: config.override_cargo.clone(),\n             cargo_args,\n+            cargo_extra_args: config.cargo_extra_args.clone(),\n             executable_args,\n             expect_test: None,\n         },"}, {"sha": "e51eb26261586927984c8f3ba12d23ee3370c352", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -107,6 +107,8 @@ fn main() {}\n             \"args\": {\n               \"cargoArgs\": [\"test\", \"--package\", \"foo\", \"--test\", \"spam\"],\n               \"executableArgs\": [\"test_eggs\", \"--exact\", \"--nocapture\"],\n+              \"cargoExtraArgs\": [],\n+              \"overrideCargo\": null,\n               \"workspaceRoot\": server.path().join(\"foo\")\n             },\n             \"kind\": \"cargo\",\n@@ -127,6 +129,8 @@ fn main() {}\n             \"args\": {\n               \"cargoArgs\": [\"check\", \"--package\", \"foo\", \"--all-targets\"],\n               \"executableArgs\": [],\n+              \"cargoExtraArgs\": [],\n+              \"overrideCargo\": null,\n               \"workspaceRoot\": server.path().join(\"foo\")\n             },\n             \"kind\": \"cargo\",\n@@ -136,6 +140,8 @@ fn main() {}\n             \"args\": {\n               \"cargoArgs\": [\"test\", \"--package\", \"foo\", \"--all-targets\"],\n               \"executableArgs\": [],\n+              \"cargoExtraArgs\": [],\n+              \"overrideCargo\": null,\n               \"workspaceRoot\": server.path().join(\"foo\")\n             },\n             \"kind\": \"cargo\","}, {"sha": "cc2ac3bd2696457654a48414c047a0ae91aaafef", "filename": "editors/code/package.json", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -651,6 +651,22 @@\n                     ],\n                     \"default\": \"full\",\n                     \"description\": \"The strategy to use when inserting new imports or merging imports.\"\n+                },\n+                \"rust-analyzer.runnables.overrideCargo\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Command to be executed instead of 'cargo' for runnables.\"\n+                },\n+                \"rust-analyzer.runnables.cargoExtraArgs\": {\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"default\": [],\n+                    \"description\": \"Additional arguments to be passed to cargo for runnables such as tests or binaries.\\nFor example, it may be '--release'\"\n                 }\n             }\n         },"}, {"sha": "f286b68a68585848337268bce17dcce38dc2f76b", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -69,8 +69,10 @@ export interface Runnable {\n     args: {\n         workspaceRoot?: string;\n         cargoArgs: string[];\n+        cargoExtraArgs: string[];\n         executableArgs: string[];\n         expectTest?: boolean;\n+        overrideCargo?: string;\n     };\n }\n export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\"experimental/runnables\");"}, {"sha": "459b7f250d289219a5127261a7bfa6babf097095", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -129,6 +129,7 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n     }\n \n     const args = [...runnable.args.cargoArgs]; // should be a copy!\n+    args.push(...runnable.args.cargoExtraArgs); // Append user-specified cargo options.\n     if (runnable.args.executableArgs.length > 0) {\n         args.push('--', ...runnable.args.executableArgs);\n     }\n@@ -139,6 +140,7 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n         args: args.slice(1),\n         cwd: runnable.args.workspaceRoot || \".\",\n         env: prepareEnv(runnable, config.runnableEnv),\n+        overrideCargo: runnable.args.overrideCargo,\n     };\n \n     const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()"}, {"sha": "a3ff1510256602665a8ed602f6f5e68245537e95", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -13,6 +13,7 @@ export interface CargoTaskDefinition extends vscode.TaskDefinition {\n     args?: string[];\n     cwd?: string;\n     env?: { [key: string]: string };\n+    overrideCargo?: string;\n }\n \n class CargoTaskProvider implements vscode.TaskProvider {\n@@ -98,7 +99,14 @@ export async function buildCargoTask(\n     }\n \n     if (!exec) {\n-        exec = new vscode.ShellExecution(toolchain.cargoPath(), args, definition);\n+        // Check whether we must use a user-defined substitute for cargo.\n+        const cargoCommand = definition.overrideCargo ? definition.overrideCargo : toolchain.cargoPath();\n+\n+        // Prepare the whole command as one line. It is required if user has provided override command which contains spaces,\n+        // for example \"wrapper cargo\". Without manual preparation the overridden command will be quoted and fail to execute.\n+        const fullCommand = [cargoCommand, ...args].join(\" \");\n+\n+        exec = new vscode.ShellExecution(fullCommand, definition);\n     }\n \n     return new vscode.Task("}, {"sha": "c5600cf64f3888d376f534f795303ae38087bd79", "filename": "editors/code/tests/unit/runnable_env.test.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d8e5265309cf92857c996d4f55372e3b431468bf/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts?ref=d8e5265309cf92857c996d4f55372e3b431468bf", "patch": "@@ -9,7 +9,8 @@ function makeRunnable(label: string): ra.Runnable {\n         kind: \"cargo\",\n         args: {\n             cargoArgs: [],\n-            executableArgs: []\n+            executableArgs: [],\n+            cargoExtraArgs: []\n         }\n     };\n }"}]}