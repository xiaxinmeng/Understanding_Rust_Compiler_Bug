{"sha": "bfbe8870d706af095bf61d759d6eacecac4d5745", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYmU4ODcwZDcwNmFmMDk1YmY2MWQ3NTlkNmVhY2VjYWM0ZDU3NDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T03:24:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T18:05:04Z"}, "message": "Refactor import lookup in middle:resolve\n\nIssue #817", "tree": {"sha": "abc1ea7db70dff429ff9c5541381356ebd6318d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc1ea7db70dff429ff9c5541381356ebd6318d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfbe8870d706af095bf61d759d6eacecac4d5745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbe8870d706af095bf61d759d6eacecac4d5745", "html_url": "https://github.com/rust-lang/rust/commit/bfbe8870d706af095bf61d759d6eacecac4d5745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfbe8870d706af095bf61d759d6eacecac4d5745/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd54e7772040cd268f911e9dfd088ad5f659f552", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd54e7772040cd268f911e9dfd088ad5f659f552", "html_url": "https://github.com/rust-lang/rust/commit/cd54e7772040cd268f911e9dfd088ad5f659f552"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "33575a073cdd38dcebb36b743afeffbba39a5439", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bfbe8870d706af095bf61d759d6eacecac4d5745/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbe8870d706af095bf61d759d6eacecac4d5745/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=bfbe8870d706af095bf61d759d6eacecac4d5745", "patch": "@@ -92,7 +92,7 @@ fn new_ext_hash() -> ext_hash {\n \n tag mod_index_entry {\n     mie_view_item(@ast::view_item);\n-    mie_import_ident(node_id);\n+    mie_import_ident(node_id, syntax::codemap::span);\n     mie_item(@ast::item);\n     mie_native_item(@ast::native_item);\n     mie_tag_variant(/* tag item */@ast::item, /* variant index */uint);\n@@ -949,9 +949,6 @@ fn found_view_item(e: &env, vi: @ast::view_item, ns: namespace) ->\n         let cnum = cstore::get_use_stmt_cnum(e.cstore, id);\n         ret some(ast::def_mod({crate: cnum, node: -1}));\n       }\n-      ast::view_item_import(_, _, id) {\n-        ret lookup_import(e, local_def(id), ns);\n-      }\n       ast::view_item_import_glob(_, defid) {\n         ret none::<def>; //will be handled in the fallback glob pass\n \n@@ -1073,7 +1070,7 @@ fn lookup_in_mie(e: &env, mie: &mod_index_entry, ns: namespace) ->\n    option::t<def> {\n     alt mie {\n       mie_view_item(view_item) { ret found_view_item(e, view_item, ns); }\n-      mie_import_ident(id) { ret lookup_import(e, local_def(id), ns); }\n+      mie_import_ident(id, _) { ret lookup_import(e, local_def(id), ns); }\n       mie_item(item) { ret found_def_item(item, ns); }\n       mie_tag_variant(item, variant_idx) {\n         alt item.node {\n@@ -1118,15 +1115,19 @@ fn index_mod(md: &ast::_mod) -> mod_index {\n     let index = new_str_hash::<list<mod_index_entry>>();\n     for it: @ast::view_item in md.view_items {\n         alt it.node {\n-          ast::view_item_import(ident, _, _) | ast::view_item_use(ident, _, _)\n+          ast::view_item_use(ident, _, _)\n           {\n             add_to_index(index, ident, mie_view_item(it));\n           }\n \n+          ast::view_item_import(ident, _, id) {\n+            add_to_index(index, ident, mie_import_ident(id, it.span));\n+          }\n+\n           ast::view_item_import_from(_, idents, _) {\n             for ident in idents {\n                 add_to_index(index, ident.node.name,\n-                             mie_import_ident(ident.node.id));\n+                             mie_import_ident(ident.node.id, ident.span));\n             }\n           }\n \n@@ -1160,14 +1161,16 @@ fn index_nmod(md: &ast::native_mod) -> mod_index {\n     let index = new_str_hash::<list<mod_index_entry>>();\n     for it: @ast::view_item in md.view_items {\n         alt it.node {\n-          ast::view_item_use(ident, _, _) | ast::view_item_import(ident, _, _)\n-          {\n+          ast::view_item_use(ident, _, _) {\n             add_to_index(index, ident, mie_view_item(it));\n           }\n+          ast::view_item_import(ident, _, id) {\n+            add_to_index(index, ident, mie_import_ident(id, it.span));\n+          }\n           ast::view_item_import_from(_, idents, _) {\n             for ident in idents {\n                 add_to_index(index, ident.node.name,\n-                             mie_import_ident(ident.node.id));\n+                             mie_import_ident(ident.node.id, ident.span));\n             }\n           }\n           ast::view_item_import_glob(_, _) | ast::view_item_export(_, _) { }\n@@ -1265,6 +1268,7 @@ fn check_mod_name(e: &env, name: &ident, entries: list<mod_index_entry>) {\n fn mie_span(mie: &mod_index_entry) -> span {\n     ret alt mie {\n           mie_view_item(item) { item.span }\n+          mie_import_ident(_, span) { span }\n           mie_item(item) { item.span }\n           mie_tag_variant(item, _) { item.span }\n           mie_native_item(item) { item.span }"}, {"sha": "729622c8b5a359419f1555a97c1a15c0e0ad598e", "filename": "src/test/compile-fail/import-from-dup.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bfbe8870d706af095bf61d759d6eacecac4d5745/src%2Ftest%2Fcompile-fail%2Fimport-from-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbe8870d706af095bf61d759d6eacecac4d5745/src%2Ftest%2Fcompile-fail%2Fimport-from-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-dup.rs?ref=bfbe8870d706af095bf61d759d6eacecac4d5745", "patch": "@@ -0,0 +1,14 @@\n+// error-pattern:duplicate definition of f\n+\n+import m1::{f};\n+import m2::{f};\n+\n+mod m1 {\n+    fn f() {}\n+}\n+\n+mod m2 {\n+    fn f() {}\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}]}