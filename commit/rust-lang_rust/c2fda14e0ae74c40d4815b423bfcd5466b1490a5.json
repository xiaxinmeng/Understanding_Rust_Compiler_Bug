{"sha": "c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZmRhMTRlMGFlNzRjNDBkNDgxNWI0MjNiZmNkNTQ2NmIxNDkwYTU=", "commit": {"author": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2018-02-12T22:43:37Z"}, "committer": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2018-02-12T22:43:37Z"}, "message": "Merge remote-tracking branch 'origin/master' into difflines_mode", "tree": {"sha": "5bd89fe60b3c8d3088b7b7d4ef8aa209f584e8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd89fe60b3c8d3088b7b7d4ef8aa209f584e8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "html_url": "https://github.com/rust-lang/rust/commit/c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/comments", "author": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f669091e0895851a92972d634f8afa44c372589", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f669091e0895851a92972d634f8afa44c372589", "html_url": "https://github.com/rust-lang/rust/commit/6f669091e0895851a92972d634f8afa44c372589"}, {"sha": "67d36c70199322b262479aca949871ff97ec6358", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d36c70199322b262479aca949871ff97ec6358", "html_url": "https://github.com/rust-lang/rust/commit/67d36c70199322b262479aca949871ff97ec6358"}], "stats": {"total": 4540, "additions": 2775, "deletions": 1765}, "files": [{"sha": "e35f0e48f816e44f0d821c772f684093164203ec", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -2,6 +2,11 @@\n \n ## [Unreleased]\n \n+### Added\n+\n+- Add `use_field_init_shorthand` config option.\n+- Add `reorder_modules` configuration option.\n+\n ## [0.3.6] 2018-01-18\n \n ### Fixed"}, {"sha": "4d5d4d05aa0640094f0cc63cc44c6f6a69f5e775", "filename": "Cargo.lock", "status": "modified", "additions": 111, "deletions": 42, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -32,6 +32,15 @@ name = \"bitflags\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"cargo-fmt\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"cargo_metadata 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.4.1\"\n@@ -106,9 +115,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"getopts\"\n-version = \"0.2.15\"\n+version = \"0.2.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"git-rustfmt\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt-config 0.4.0\",\n+ \"rustfmt-core 0.4.0\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.3.4\"\n@@ -159,7 +179,15 @@ dependencies = [\n \n [[package]]\n name = \"num-traits\"\n-version = \"0.1.41\"\n+version = \"0.1.43\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -185,7 +213,7 @@ version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -197,11 +225,22 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rand\"\n-version = \"0.3.20\"\n+version = \"0.3.22\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -223,7 +262,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"12.0.0\"\n+version = \"29.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -232,57 +271,57 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"12.0.0\"\n+version = \"29.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"12.0.0\"\n+version = \"29.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"12.0.0\"\n+version = \"29.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"12.0.0\"\n+version = \"29.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"12.0.0\"\n+version = \"29.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -293,30 +332,58 @@ version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"rustfmt-nightly\"\n-version = \"0.3.6\"\n+name = \"rustfmt-bin\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt-config 0.4.0\",\n+ \"rustfmt-core 0.4.0\",\n+]\n+\n+[[package]]\n+name = \"rustfmt-config\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"rustc-ap-syntax 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustfmt-core\"\n+version = \"0.4.0\"\n dependencies = [\n- \"cargo_metadata 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt-config 0.4.0\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustfmt-format-diff\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"semver\"\n version = \"0.8.0\"\n@@ -362,7 +429,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -497,28 +564,30 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff511d5dc435d703f4971bc399647c9bc38e20cb41452e3b9feb4765419ed3f3\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n-\"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n+\"checksum getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b900c08c1939860ce8b54dc6a89e26e00c04c380fd0e09796799bd7f12861e05\"\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8f31047daa365f19be14b47c29df4f7c3b581832407daabe6ae77397619237d\"\n \"checksum libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e5d97d6708edaa407429faa671b942dc0f2727222fb6b6539bf1db936e4b121\"\n \"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n \"checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n-\"checksum num-traits 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cacfcab5eb48250ee7d0c7896b51a2c5eec99c1feea5f32025635f5ae4b00070\"\n+\"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n+\"checksum num-traits 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7de20f146db9d920c45ee8ed8f71681fd9ade71909b48c3acbd766aa504cf10\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e7f7c9857874e54afeb950eebeae662b1e51a2493666d2ea4c0a5d91dcf0412\"\n \"checksum parking_lot_core 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f35048d735bb93dd115a0030498785971aab3234d311fbe273d020084d26bd8\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n-\"checksum rand 0.3.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"512870020642bb8c221bf68baa1b2573da814f6ccfe5c9699b1c303047abe9b1\"\n+\"checksum rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15a732abf9d20f0ad8eeb6f909bf6868722d9a06e1e50802b6a70351f40b4eb1\"\n+\"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\n \"checksum regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"744554e01ccbd98fff8c457c3b092cd67af62a555a43bfe97ae8a0451f7799fa\"\n \"checksum regex-syntax 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e931c58b93d86f080c734bfd2bce7dd0079ae2331235818133c8be7f422e20e\"\n-\"checksum rustc-ap-rustc_cratesio_shim 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1a51c10af5abd5d698b7e3487e869e6d15f6feb04cbedb5c792e2824f9d845e\"\n-\"checksum rustc-ap-rustc_data_structures 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1aa227490501072780d57f74b1164d361833ff8e172f817da0da2cdf2e4280cc\"\n-\"checksum rustc-ap-rustc_errors 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"21ff6c6e13ac4fc04b7d4d398828b024c4b6577045cb3175b33d35fea35ff6d0\"\n-\"checksum rustc-ap-serialize 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b4e7f51e298675c2bf830f7265621a8936fb09e63b825b58144cbaac969e604\"\n-\"checksum rustc-ap-syntax 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8bf5639869ba2f7fa581939cd217cb71a85506b82ad0ea520614fb0dceb2386c\"\n-\"checksum rustc-ap-syntax_pos 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1c020cdb7379e1c733ae0a311ae47c748337ba584d2dd7b7f53baaae78de6f8b\"\n+\"checksum rustc-ap-rustc_cratesio_shim 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ad5e562044ea78a6764dd75ae8afe4b21fde49f4548024b5fdf6345c21fb524\"\n+\"checksum rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c0d65325492aba7db72899e3edbab34d39af98c42ab7c7e450c9a288ffe4ad\"\n+\"checksum rustc-ap-rustc_errors 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87d4ab2e06a671b5b5c5b0359dac346f164c99d059dce6a22feb08f2f56bd182\"\n+\"checksum rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e0745fa445ff41c4b6699936cf35ce3ca49502377dd7b3929c829594772c3a7b\"\n+\"checksum rustc-ap-syntax 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82efedabe30f393161e11214a9130edfa01ad476372d1c6f3fec1f8d30488c9d\"\n+\"checksum rustc-ap-syntax_pos 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db9de2e927e280c75b8efab9c5f591ad31082d5d2c4c562c68fdba2ee77286b0\"\n \"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\"\n \"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\""}, {"sha": "63d3c534221942fd62f4db4adc66ef9668e1f476", "filename": "Cargo.toml", "status": "modified", "additions": 9, "deletions": 58, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -1,58 +1,9 @@\n-[package]\n-\n-name = \"rustfmt-nightly\"\n-version = \"0.3.6\"\n-authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n-description = \"Tool to find and fix Rust formatting issues\"\n-repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n-readme = \"README.md\"\n-license = \"Apache-2.0/MIT\"\n-build = \"build.rs\"\n-categories = [\"development-tools\"]\n-\n-[lib]\n-doctest = false\n-\n-[[bin]]\n-name = \"rustfmt\"\n-\n-[[bin]]\n-name = \"cargo-fmt\"\n-\n-[[bin]]\n-name = \"rustfmt-format-diff\"\n-\n-[[bin]]\n-name = \"git-rustfmt\"\n-\n-[features]\n-default = [\"cargo-fmt\", \"rustfmt-format-diff\"]\n-cargo-fmt = []\n-rustfmt-format-diff = []\n-\n-[dependencies]\n-toml = \"0.4\"\n-serde = \"1.0\"\n-serde_derive = \"1.0\"\n-serde_json = \"1.0\"\n-unicode-segmentation = \"1.0.0\"\n-regex = \"0.2\"\n-term = \"0.4\"\n-diff = \"0.1\"\n-log = \"0.3\"\n-env_logger = \"0.4\"\n-getopts = \"0.2\"\n-derive-new = \"0.5\"\n-cargo_metadata = \"0.4\"\n-rustc-ap-syntax = \"12.0.0\"\n-rustc-ap-rustc_errors = \"12.0.0\"\n-\n-[dev-dependencies]\n-lazy_static = \"1.0.0\"\n-\n-[target.'cfg(unix)'.dependencies]\n-libc = \"0.2.11\"\n-\n-[target.'cfg(windows)'.dependencies]\n-kernel32-sys = \"0.2.2\"\n-winapi = \"0.2.7\"\n+[workspace]\n+members = [\n+    \"cargo-fmt\",\n+    \"git-rustfmt\",\n+    \"rustfmt-bin\",\n+    \"rustfmt-config\",\n+    \"rustfmt-core\",\n+    \"rustfmt-format-diff\",\n+]"}, {"sha": "b908120d051d13ccc5b874ac0cfa0f5196a116c1", "filename": "Configurations.md", "status": "modified", "additions": 372, "deletions": 219, "changes": 591, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -31,49 +31,56 @@ Indent on expressions or items.\n #### `\"Block\"` (default):\n \n ```rust\n-let lorem = vec![\n-    \"ipsum\",\n-    \"dolor\",\n-    \"sit\",\n-    \"amet\",\n-    \"consectetur\",\n-    \"adipiscing\",\n-    \"elit\",\n-];\n+fn main() {\n+    let lorem = vec![\n+        \"ipsum\",\n+        \"dolor\",\n+        \"sit\",\n+        \"amet\",\n+        \"consectetur\",\n+        \"adipiscing\",\n+        \"elit\",\n+    ];\n+}\n ```\n \n #### `\"Visual\"`:\n \n ```rust\n-let lorem = vec![\"ipsum\",\n-                 \"dolor\",\n-                 \"sit\",\n-                 \"amet\",\n-                 \"consectetur\",\n-                 \"adipiscing\",\n-                 \"elit\"];\n+fn main() {\n+    let lorem = vec![\"ipsum\",\n+                     \"dolor\",\n+                     \"sit\",\n+                     \"amet\",\n+                     \"consectetur\",\n+                     \"adipiscing\",\n+                     \"elit\"];\n+}\n ```\n \n ### Control flow\n \n #### `\"Block\"` (default):\n \n ```rust\n-if lorem_ipsum &&\n-    dolor_sit &&\n-    amet_consectetur\n-{\n-    // ...\n+fn main() {\n+    if lorem_ipsum && dolor_sit && amet_consectetur && lorem_sit && dolor_consectetur && amet_ipsum\n+        && lorem_consectetur\n+    {\n+        // ...\n+    }\n }\n ```\n \n #### `\"Visual\"`:\n \n ```rust\n-if lorem_ipsum &&\n-   dolor_sit &&\n-   amet_consectetur {\n-    // ...\n+fn main() {\n+    if lorem_ipsum && dolor_sit && amet_consectetur && lorem_sit && dolor_consectetur && amet_ipsum\n+       && lorem_consectetur\n+    {\n+        // ...\n+    }\n }\n ```\n \n@@ -124,29 +131,33 @@ fn lorem(ipsum: usize,\n #### `\"Block\"` (default):\n \n ```rust\n-lorem(\n-    \"lorem\",\n-    \"ipsum\",\n-    \"dolor\",\n-    \"sit\",\n-    \"amet\",\n-    \"consectetur\",\n-    \"adipiscing\",\n-    \"elit\",\n-);\n+fn main() {\n+    lorem(\n+        \"lorem\",\n+        \"ipsum\",\n+        \"dolor\",\n+        \"sit\",\n+        \"amet\",\n+        \"consectetur\",\n+        \"adipiscing\",\n+        \"elit\",\n+    );\n+}\n ```\n \n #### `\"Visual\"`:\n \n ```rust\n-lorem(\"lorem\",\n-      \"ipsum\",\n-      \"dolor\",\n-      \"sit\",\n-      \"amet\",\n-      \"consectetur\",\n-      \"adipiscing\",\n-      \"elit\");\n+fn main() {\n+    lorem(\"lorem\",\n+          \"ipsum\",\n+          \"dolor\",\n+          \"sit\",\n+          \"amet\",\n+          \"consectetur\",\n+          \"adipiscing\",\n+          \"elit\");\n+}\n ```\n \n ### Generics\n@@ -161,7 +172,7 @@ fn lorem<\n     Amet: Eq = usize,\n     Adipiscing: Eq = usize,\n     Consectetur: Eq = usize,\n-    Elit: Eq = usize\n+    Elit: Eq = usize,\n >(\n     ipsum: Ipsum,\n     dolor: Dolor,\n@@ -184,15 +195,15 @@ fn lorem<Ipsum: Eq = usize,\n          Amet: Eq = usize,\n          Adipiscing: Eq = usize,\n          Consectetur: Eq = usize,\n-         Elit: Eq = usize>\n-    (ipsum: Ipsum,\n-     dolor: Dolor,\n-     sit: Sit,\n-     amet: Amet,\n-     adipiscing: Adipiscing,\n-     consectetur: Consectetur,\n-     elit: Elit)\n-     -> T {\n+         Elit: Eq = usize>(\n+    ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet,\n+    adipiscing: Adipiscing,\n+    consectetur: Consectetur,\n+    elit: Elit)\n+    -> T {\n     // body\n }\n ```\n@@ -202,17 +213,21 @@ fn lorem<Ipsum: Eq = usize,\n #### `\"Block\"` (default):\n \n ```rust\n-let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};\n+fn main() {\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+}\n ```\n \n #### `\"Visual\"`:\n \n ```rust\n-let lorem = Lorem { ipsum: dolor,\n-                    sit: amet, };\n+fn main() {\n+    let lorem = Lorem { ipsum: dolor,\n+                        sit: amet, };\n+}\n ```\n \n See also: [`struct_lit_single_line`](#struct_lit_single_line), [`indent_style`](#indent_style).\n@@ -227,7 +242,7 @@ where\n     Ipsum: Eq,\n     Dolor: Eq,\n     Sit: Eq,\n-    Amet: Eq\n+    Amet: Eq,\n {\n     // body\n }\n@@ -274,7 +289,11 @@ fn main() {\n         \"adipiscing\",\n     );\n \n-    let lorem = Lorem { ipsum: dolor, sit: amet };\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+    let lorem = Lorem { ipsum: dolor };\n \n     let lorem = if ipsum { dolor } else { sit };\n }\n@@ -319,16 +338,16 @@ Where to put a binary operator when a binary expression goes multiline.\n #### `\"Front\"` (default):\n \n ```rust\n-let or = foo\n-    || bar\n-    || foobar;\n+fn main() {\n+    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo\n+        || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n \n-let sum = 1234\n-    + 5678\n-    + 910;\n+    let sum = 123456789012345678901234567890 + 123456789012345678901234567890\n+        + 123456789012345678901234567890;\n \n-let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n-    ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+        ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+}\n ```\n \n #### `\"Back\"`:\n@@ -488,13 +507,18 @@ Replace strings of _ wildcards by a single .. in tuple patterns\n #### `false` (default):\n \n ```rust\n-let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n+fn main() {\n+    let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n+    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let (lorem, ipsum, ..) = (1, 2, 3, 4);\n+fn main() {\n+    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n+}\n ```\n \n ## `control_brace_style`\n@@ -508,34 +532,40 @@ Brace style for control flow constructs\n #### `\"AlwaysSameLine\"` (default):\n \n ```rust\n-if lorem {\n-    println!(\"ipsum!\");\n-} else {\n-    println!(\"dolor!\");\n+fn main() {\n+    if lorem {\n+        println!(\"ipsum!\");\n+    } else {\n+        println!(\"dolor!\");\n+    }\n }\n ```\n \n #### `\"AlwaysNextLine\"`:\n \n ```rust\n-if lorem\n-{\n-    println!(\"ipsum!\");\n-}\n-else\n-{\n-    println!(\"dolor!\");\n+fn main() {\n+    if lorem\n+    {\n+        println!(\"ipsum!\");\n+    }\n+    else\n+    {\n+        println!(\"dolor!\");\n+    }\n }\n ```\n \n #### `\"ClosingNextLine\"`:\n \n ```rust\n-if lorem {\n-    println!(\"ipsum!\");\n-}\n-else {\n-    println!(\"dolor!\");\n+fn main() {\n+    if lorem {\n+        println!(\"ipsum!\");\n+    }\n+    else {\n+        println!(\"dolor!\");\n+    }\n }\n ```\n \n@@ -637,33 +667,41 @@ trait Lorem {\n \n ```rust\n trait Lorem {\n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet);\n-\n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    ) {\n         // body\n     }\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: Consectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit);\n-\n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: Consectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    ) {\n         // body\n     }\n }\n@@ -748,7 +786,8 @@ struct Lorem {\n }\n \n struct Dolor<T>\n-    where T: Eq\n+where\n+    T: Eq,\n {\n     sit: T,\n }\n@@ -763,7 +802,8 @@ struct Lorem\n }\n \n struct Dolor<T>\n-    where T: Eq\n+where\n+    T: Eq,\n {\n     sit: T,\n }\n@@ -777,7 +817,8 @@ struct Lorem {\n }\n \n struct Dolor<T>\n-    where T: Eq {\n+where\n+    T: Eq, {\n     sit: T,\n }\n ```\n@@ -862,16 +903,17 @@ impl<T> Lorem for T\n where\n     Option<T>: Ipsum,\n {\n-    ...\n+    // body\n }\n ```\n \n #### `true`:\n \n ```rust\n impl<T> Lorem for T\n-where Option<T>: Ipsum {\n-    ...\n+where Option<T>: Ipsum\n+{\n+    // body\n }\n ```\n \n@@ -915,15 +957,19 @@ Format string literals where necessary\n #### `false` (default):\n \n ```rust\n-let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n+fn main() {\n+    let lorem =\n+        \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet consectetur adipiscing\";\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let lorem =\n-    \"ipsum dolor sit amet consectetur \\\n-     adipiscing elit lorem ipsum dolor sit\";\n+fn main() {\n+    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet \\\n+                 consectetur adipiscing\";\n+}\n ```\n \n See also [`max_width`](#max_width).\n@@ -966,18 +1012,16 @@ Indent style of imports\n #### `\"Visual\"` (default):\n \n ```rust\n-use foo::{xxx,\n-          yyy,\n-          zzz};\n+use foo::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+          zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz};\n ```\n \n #### `\"Block\"`:\n \n ```rust\n use foo::{\n-    xxx,\n-    yyy,\n-    zzz,\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,\n };\n ```\n \n@@ -994,10 +1038,10 @@ Item layout inside a imports block\n #### `\"Mixed\"` (default):\n \n ```rust\n-use foo::{xxx, yyy, zzz};\n+use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n \n-use foo::{aaa, bbb, ccc,\n-          ddd, eee, fff};\n+use foo::{aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n+          eeeeeeeeeeeeeeeeee, ffffffffffffffffff};\n ```\n \n #### `\"Horizontal\"`:\n@@ -1013,14 +1057,14 @@ use foo::{aaa, bbb, ccc, ddd, eee, fff};\n #### `\"HorizontalVertical\"`:\n \n ```rust\n-use foo::{xxx, yyy, zzz};\n+use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n \n-use foo::{aaa,\n-          bbb,\n-          ccc,\n-          ddd,\n-          eee,\n-          fff};\n+use foo::{aaaaaaaaaaaaaaaaaa,\n+          bbbbbbbbbbbbbbbbbb,\n+          cccccccccccccccccc,\n+          dddddddddddddddddd,\n+          eeeeeeeeeeeeeeeeee,\n+          ffffffffffffffffff};\n ```\n \n #### `\"Vertical\"`:\n@@ -1050,22 +1094,26 @@ Put a trailing comma after a block based match arm (non-block arms are not affec\n #### `false` (default):\n \n ```rust\n-match lorem {\n-    Lorem::Ipsum => {\n-        println!(\"ipsum\");\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            println!(\"ipsum\");\n+        }\n+        Lorem::Dolor => println!(\"dolor\"),\n     }\n-    Lorem::Dolor => println!(\"dolor\"),\n }\n ```\n \n #### `true`:\n \n ```rust\n-match lorem {\n-    Lorem::Ipsum => {\n-        println!(\"ipsum\");\n-    },\n-    Lorem::Dolor => println!(\"dolor\"),\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            println!(\"ipsum\");\n+        },\n+        Lorem::Dolor => println!(\"dolor\"),\n+    }\n }\n ```\n \n@@ -1116,37 +1164,40 @@ Force multiline closure and match arm bodies to be wrapped in a block\n #### `false` (default):\n \n ```rust\n-result.and_then(|maybe_value| match maybe_value {\n-    None => ...,\n-    Some(value) => ...,\n-})\n+fn main() {\n+    result.and_then(|maybe_value| match maybe_value {\n+        None => foo(),\n+        Some(value) => bar(),\n+    });\n \n-match lorem {\n-    None => if ipsum {\n-        println!(\"Hello World\");\n-    },\n-    Some(dolor) => ...,\n+    match lorem {\n+        None => if ipsum {\n+            println!(\"Hello World\");\n+        },\n+        Some(dolor) => foo(),\n+    }\n }\n ```\n \n #### `true`:\n \n ```rust\n+fn main() {\n+    result.and_then(|maybe_value| {\n+        match maybe_value {\n+            None => foo(),\n+            Some(value) => bar(),\n+        }\n+    });\n \n-result.and_then(|maybe_value| {\n-    match maybe_value {\n-        None => ...,\n-        Some(value) => ...,\n-    }\n-})\n-\n-match lorem {\n-    None => {\n-        if ipsum {\n-            println!(\"Hello World\");\n+    match lorem {\n+        None => {\n+            if ipsum {\n+                println!(\"Hello World\");\n+            }\n         }\n+        Some(dolor) => foo(),\n     }\n-    Some(dolor) => ...,\n }\n ```\n \n@@ -1468,7 +1519,7 @@ struct Foo {\n \n ## `spaces_around_ranges`\n \n-Put spaces around the .. and ... range operators\n+Put spaces around the .., ..=, and ... range operators\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n@@ -1477,13 +1528,49 @@ Put spaces around the .. and ... range operators\n #### `false` (default):\n \n ```rust\n-let lorem = 0..10;\n+fn main() {\n+    let lorem = 0..10;\n+    let ipsum = 0..=10;\n+\n+    match lorem {\n+        1..5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1..=5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1...5 => foo(),\n+        _ => bar,\n+    }\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let lorem = 0 .. 10;\n+fn main() {\n+    let lorem = 0 .. 10;\n+    let ipsum = 0 ..= 10;\n+\n+    match lorem {\n+        1 .. 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ..= 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ... 5 => foo(),\n+        _ => bar,\n+    }\n+}\n ```\n \n ## `spaces_within_parens_and_brackets`\n@@ -1508,24 +1595,28 @@ fn lorem<T: Eq>(t: T) {\n }\n \n // non-empty square brackets\n-let lorem: [usize; 2] = [ipsum, dolor];\n+fn lorem<T: Eq>(t: T) {\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}\n ```\n \n #### `true`:\n \n ```rust\n // generic arguments\n-fn lorem< T: Eq >(t: T) {\n+fn lorem< T: Eq >( t: T ) {\n     // body\n }\n \n // non-empty parentheses\n-fn lorem<T: Eq>( t: T ) {\n+fn lorem< T: Eq >( t: T ) {\n     let lorem = ( ipsum, dolor );\n }\n \n // non-empty square brackets\n-let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+fn lorem< T: Eq >( t: T ) {\n+    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+}\n ```\n \n ## `struct_lit_single_line`\n@@ -1545,10 +1636,12 @@ let lorem = Lorem { ipsum: dolor, sit: amet };\n #### `false`:\n \n ```rust\n-let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};\n+fn main() {\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+}\n ```\n \n See also: [`indent_style`](#indent_style).\n@@ -1568,7 +1661,7 @@ Number of spaces per tab\n fn lorem() {\n     let ipsum = dolor();\n     let sit = vec![\n-        \"amet consectetur adipiscing elit.\"\n+        \"amet consectetur adipiscing elit amet consectetur adipiscing elit amet consectetur.\",\n     ];\n }\n ```\n@@ -1579,7 +1672,7 @@ fn lorem() {\n fn lorem() {\n   let ipsum = dolor();\n   let sit = vec![\n-    \"amet consectetur adipiscing elit.\"\n+    \"amet consectetur adipiscing elit amet consectetur adipiscing elit amet consectetur.\",\n   ];\n }\n ```\n@@ -1598,43 +1691,49 @@ How to handle trailing commas for lists\n #### `\"Vertical\"` (default):\n \n ```rust\n-let Lorem { ipsum, dolor, sit } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing,\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing,\n+    } = elit;\n+}\n ```\n \n #### `\"Always\"`:\n \n ```rust\n-let Lorem { ipsum, dolor, sit, } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing,\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit, } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing,\n+    } = elit;\n+}\n ```\n \n #### `\"Never\"`:\n \n ```rust\n-let Lorem { ipsum, dolor, sit } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing\n+    } = elit;\n+}\n ```\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n@@ -1673,15 +1772,57 @@ Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n \n ```rust\n fn lorem<Ipsum: Dolor + Sit = Amet>() {\n-\t// body\n+    // body\n }\n ```\n \n #### `\"Compressed\"`:\n \n ```rust\n fn lorem<Ipsum: Dolor+Sit=Amet>() {\n-\t// body\n+    // body\n+}\n+```\n+\n+## `use_field_init_shorthand`\n+\n+Use field initialize shorthand if possible.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `false` (default):\n+\n+```rust\n+struct Foo {\n+    x: u32,\n+    y: u32,\n+    z: u32,\n+}\n+\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    let z = 3;\n+    let a = Foo { x: x, y: y, z: z };\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+struct Foo {\n+    x: u32,\n+    y: u32,\n+    z: u32,\n+}\n+\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    let z = 3;\n+    let a = Foo { x, y, z };\n }\n ```\n \n@@ -1696,13 +1837,17 @@ Replace uses of the try! macro by the ? shorthand\n #### `false` (default):\n \n ```rust\n-let lorem = try!(ipsum.map(|dolor|dolor.sit()));\n+fn main() {\n+    let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let lorem = ipsum.map(|dolor| dolor.sit())?;\n+fn main() {\n+    let lorem = ipsum.map(|dolor| dolor.sit())?;\n+}\n ```\n \n \n@@ -1741,21 +1886,25 @@ Wrap the body of arms in blocks when it does not fit on the same line with the p\n #### `true` (default):\n \n ```rust\n-match lorem {\n-    true => {\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n+fn main() {\n+    match lorem {\n+        true => {\n+            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n+        }\n+        false => println!(\"{}\", sit),\n     }\n-    false => println!(\"{}\", sit),\n }\n ```\n \n #### `false`:\n \n ```rust\n-match lorem {\n-    true =>\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n-    false => println!(\"{}\", sit),\n+fn main() {\n+    match lorem {\n+        true =>\n+            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n+        false => println!(\"{}\", sit),\n+    }\n }\n ```\n \n@@ -1782,6 +1931,8 @@ lines are found, they are trimmed down to match this integer.\n Original Code:\n \n ```rust\n+#![rustfmt_skip]\n+\n fn foo() {\n     println!(\"a\");\n }\n@@ -1839,6 +1990,8 @@ them, additional blank lines are inserted.\n Original Code (rustfmt will not change it with the default value of `0`):\n \n ```rust\n+#![rustfmt_skip]\n+\n fn foo() {\n     println!(\"a\");\n }"}, {"sha": "86dc4dd8d3003afda22098e410dcbb1557d8ddfd", "filename": "README.md", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -21,31 +21,29 @@ to be a bit out of date). Version 0.1 of rustfmt-nightly is forked from version\n \n ## Quick start\n \n-You must be using the latest nightly compiler toolchain.\n+Currently, you can use `rustfmt` on nightly and beta. Rust 1.24 stable will work,\n+but we're not quite there yet!\n \n To install:\n \n ```\n-cargo install rustfmt-nightly\n+rustup component add rustfmt-preview --toolchain=nightly\n ```\n \n+If `nightly` is your default toolchain, you can leave the `--toolchain` off.\n+\n to run on a cargo project in the current working directory:\n \n ```\n-cargo fmt\n+cargo +nightly fmt\n ```\n \n-## Installation\n-\n-```\n-cargo install rustfmt-nightly\n-```\n+If `nightly` is your default toolchain, you can leave off the `+nightly`.\n \n-or if you're using [Rustup](https://www.rustup.rs/)\n+## Installation\n \n ```\n-rustup update\n-rustup run nightly cargo install rustfmt-nightly\n+rustup component add rustfmt-preview --toolchain=nightly\n ```\n \n If you don't have a nightly toolchain, you can add it using rustup:\n@@ -63,12 +61,6 @@ rustup default nightly\n If you choose not to do that you'll have to run rustfmt using `rustup run ...`\n or by adding `+nightly` to the cargo invocation.\n \n-Usually cargo-fmt, which enables usage of Cargo subcommand `cargo fmt`, is\n-installed alongside rustfmt. To only install rustfmt run\n-\n-```\n-cargo install --no-default-features rustfmt-nightly\n-```\n ## Installing from source\n \n To install from source, first checkout to the tag or branch you want to install, then issue\n@@ -151,25 +143,20 @@ when a pull request contains unformatted code. Using `--write-mode=diff` instruc\n rustfmt to exit with an error code if the input is not formatted correctly.\n It will also print any found differences.\n \n-(These instructions use the nightly version of Rustfmt. If you want to use the\n-Syntex version replace `install rustfmt-nightly` with `install rustfmt`).\n-\n A minimal Travis setup could look like this:\n \n ```yaml\n language: rust\n-cache: cargo\n before_script:\n-- export PATH=\"$PATH:$HOME/.cargo/bin\"\n-- which rustfmt || cargo install rustfmt-nightly\n+- rustup toolchain install nightly\n+- rustup component add --toolchain nightly rustfmt-preview\n+- which rustfmt || cargo install --force rustfmt-nightly\n script:\n-- cargo fmt -- --write-mode=diff\n+- cargo +nightly fmt --all -- --write-mode=diff\n - cargo build\n - cargo test\n ```\n \n-Note that using `cache: cargo` is optional but highly recommended to speed up the installation.\n-\n ## How to build and test\n \n `cargo build` to build."}, {"sha": "87c1773ce8eb1617436a3fcba7bb48b98df859be", "filename": "appveyor.yml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -47,9 +47,6 @@ install:\n # ???\r\n build: false\r\n \r\n-# Build rustfmt, run the executables as\r\n test_script:\r\n   - cargo build --verbose\r\n-  - cargo run --bin rustfmt -- --help\r\n-  - cargo run --bin cargo-fmt -- --help\r\n   - cargo test\r"}, {"sha": "8714265723161798766a043632d25ade8b7a220b", "filename": "cargo-fmt/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/cargo-fmt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/cargo-fmt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-fmt%2FCargo.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+name = \"cargo-fmt\"\n+version = \"0.4.0\"\n+authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n+description = \"Cargo frontend for rustfmt\"\n+repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n+readme = \"README.md\"\n+license = \"Apache-2.0/MIT\"\n+categories = [\"development-tools\"]\n+\n+[[bin]]\n+name = \"cargo-fmt\"\n+\n+[dependencies]\n+cargo_metadata = \"0.4\"\n+getopts = \"0.2\"\n+serde_json = \"1.0\""}, {"sha": "1acad99688a25cc8563813acd7cbc505e7fdb1eb", "filename": "cargo-fmt/src/main.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/cargo-fmt%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/cargo-fmt%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-fmt%2Fsrc%2Fmain.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -97,14 +97,14 @@ fn execute() -> i32 {\n }\n \n macro_rules! print_usage {\n-    ($print:ident, $opts:ident, $reason:expr) => ({\n+    ($print: ident, $opts: ident, $reason: expr) => {{\n         let msg = format!(\"{}\\nusage: cargo fmt [options]\", $reason);\n         $print!(\n             \"{}\\nThis utility formats all bin and lib files of the current crate using rustfmt. \\\n              Arguments after `--` are passed to rustfmt.\",\n             $opts.usage(&msg)\n         );\n-    })\n+    }};\n }\n \n fn print_usage_to_stdout(opts: &Options, reason: &str) {", "previous_filename": "src/bin/cargo-fmt.rs"}, {"sha": "1fcd1ccc613b9953a4987fcbb436dfa51cc7a023", "filename": "git-rustfmt/Cargo.toml", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/git-rustfmt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/git-rustfmt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/git-rustfmt%2FCargo.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,19 @@\n+[package]\n+name = \"git-rustfmt\"\n+version = \"0.4.0\"\n+authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n+description = \"Run rustfmt against git diff\"\n+repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n+readme = \"README.md\"\n+license = \"Apache-2.0/MIT\"\n+categories = [\"development-tools\"]\n+\n+[[bin]]\n+name = \"git-rustfmt\"\n+\n+[dependencies]\n+env_logger = \"0.4\"\n+getopts = \"0.2\"\n+log = \"0.3\"\n+rustfmt-config = { path = \"../rustfmt-config\" }\n+rustfmt-core = { path = \"../rustfmt-core\" }\n\\ No newline at end of file"}, {"sha": "558efbf0c0f4b1094b6eaa8f845331498d09c797", "filename": "git-rustfmt/src/main.rs", "status": "renamed", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/git-rustfmt%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/git-rustfmt%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/git-rustfmt%2Fsrc%2Fmain.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -1,8 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n extern crate env_logger;\n extern crate getopts;\n #[macro_use]\n extern crate log;\n-extern crate rustfmt_nightly as rustfmt;\n+extern crate rustfmt_config as config;\n+extern crate rustfmt_core as rustfmt;\n \n use std::env;\n use std::path::{Path, PathBuf};\n@@ -12,7 +23,6 @@ use std::str::FromStr;\n use getopts::{Matches, Options};\n \n use rustfmt::{run, Input};\n-use rustfmt::config;\n \n fn prune_files(files: Vec<&str>) -> Vec<&str> {\n     let prefixes: Vec<_> = files", "previous_filename": "src/bin/git-rustfmt.rs"}, {"sha": "c07146dcb01967b57a035d90453f5f6cd5e7701b", "filename": "rustfmt-bin/Cargo.toml", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-bin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-bin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-bin%2FCargo.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,20 @@\n+[package]\n+name = \"rustfmt-bin\"\n+version = \"0.4.0\"\n+authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n+description = \"Tool to find and fix Rust formatting issues\"\n+repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n+readme = \"README.md\"\n+license = \"Apache-2.0/MIT\"\n+build = \"build.rs\"\n+categories = [\"development-tools\"]\n+\n+[[bin]]\n+name = \"rustfmt\"\n+path = \"src/main.rs\"\n+\n+[dependencies]\n+env_logger = \"0.4\"\n+getopts = \"0.2\"\n+rustfmt-config = { path = \"../rustfmt-config\" }\n+rustfmt-core = { path = \"../rustfmt-core\" }\n\\ No newline at end of file"}, {"sha": "2643946236d6c2a52a5172046806a7851ff9ab3c", "filename": "rustfmt-bin/build.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-bin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-bin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-bin%2Fbuild.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::env;\n+use std::fs::File;\n+use std::io::Write;\n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+fn main() {\n+    let out_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n+\n+    File::create(out_dir.join(\"commit-info.txt\"))\n+        .unwrap()\n+        .write_all(commit_info().as_bytes())\n+        .unwrap();\n+}\n+\n+// Try to get hash and date of the last commit on a best effort basis. If anything goes wrong\n+// (git not installed or if this is not a git repository) just return an empty string.\n+fn commit_info() -> String {\n+    match (commit_hash(), commit_date()) {\n+        (Some(hash), Some(date)) => format!(\" ({} {})\", hash.trim_right(), date),\n+        _ => String::new(),\n+    }\n+}\n+\n+fn commit_hash() -> Option<String> {\n+    Command::new(\"git\")\n+        .args(&[\"rev-parse\", \"--short\", \"HEAD\"])\n+        .output()\n+        .ok()\n+        .and_then(|r| String::from_utf8(r.stdout).ok())\n+}\n+\n+fn commit_date() -> Option<String> {\n+    Command::new(\"git\")\n+        .args(&[\"log\", \"-1\", \"--date=short\", \"--pretty=format:%cd\"])\n+        .output()\n+        .ok()\n+        .and_then(|r| String::from_utf8(r.stdout).ok())\n+}"}, {"sha": "fbaacc69bdfa3ce262ae2e71be439e6ad79694bb", "filename": "rustfmt-bin/src/main.rs", "status": "renamed", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-bin%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-bin%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-bin%2Fsrc%2Fmain.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -8,24 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private)]\n #![cfg(not(test))]\n \n extern crate env_logger;\n extern crate getopts;\n-extern crate rustfmt_nightly as rustfmt;\n+extern crate rustfmt_config as config;\n+extern crate rustfmt_core as rustfmt;\n \n use std::{env, error};\n use std::fs::File;\n use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n-use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n+use config::{get_toml_path, Color, Config, WriteMode};\n+use config::file_lines::FileLines;\n use rustfmt::{run, FileName, Input, Summary};\n-use rustfmt::config::{get_toml_path, Color, Config, WriteMode};\n-use rustfmt::file_lines::FileLines;\n+\n+use std::str::FromStr;\n \n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n@@ -387,7 +388,7 @@ fn print_usage_to_stdout(opts: &Options, reason: &str) {\n fn print_version() {\n     println!(\n         \"{}-nightly{}\",\n-        env!(\"CARGO_PKG_VERSION\"),\n+        option_env!(\"CARGO_PKG_VERSION\").unwrap_or(\"unknown\"),\n         include_str!(concat!(env!(\"OUT_DIR\"), \"/commit-info.txt\"))\n     )\n }\n@@ -453,7 +454,7 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n \n         return Ok(Operation::Stdin {\n             input: buffer,\n-            config_path: config_path,\n+            config_path,\n         });\n     }\n \n@@ -469,8 +470,8 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         .collect();\n \n     Ok(Operation::Format {\n-        files: files,\n-        config_path: config_path,\n-        minimal_config_path: minimal_config_path,\n+        files,\n+        config_path,\n+        minimal_config_path,\n     })\n }", "previous_filename": "src/bin/rustfmt.rs"}, {"sha": "c7e5c9d83158fd1cd0782548e8f06d425a28cfd2", "filename": "rustfmt-config/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2FCargo.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+name = \"rustfmt-config\"\n+version = \"0.4.0\"\n+authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n+description = \"A library for configuring and customizing rustfmt\"\n+repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n+readme = \"README.md\"\n+license = \"Apache-2.0/MIT\"\n+categories = [\"development-tools\"]\n+\n+[dependencies]\n+rustc-ap-syntax = \"29.0.0\"\n+serde = \"1.0\"\n+serde_derive = \"1.0\"\n+serde_json = \"1.0\"\n+toml = \"0.4\"\n\\ No newline at end of file"}, {"sha": "1f78b8af9d2658a79a8abd9c4d12ff1b3fde0a13", "filename": "rustfmt-config/src/config_type.rs", "status": "added", "additions": 380, "deletions": 0, "changes": 380, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Fconfig_type.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,380 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use file_lines::FileLines;\n+use options::WidthHeuristics;\n+\n+/// Trait for types that can be used in `Config`.\n+pub trait ConfigType: Sized {\n+    /// Returns hint text for use in `Config::print_docs()`. For enum types, this is a\n+    /// pipe-separated list of variants; for other types it returns \"<type>\".\n+    fn doc_hint() -> String;\n+}\n+\n+impl ConfigType for bool {\n+    fn doc_hint() -> String {\n+        String::from(\"<boolean>\")\n+    }\n+}\n+\n+impl ConfigType for usize {\n+    fn doc_hint() -> String {\n+        String::from(\"<unsigned integer>\")\n+    }\n+}\n+\n+impl ConfigType for isize {\n+    fn doc_hint() -> String {\n+        String::from(\"<signed integer>\")\n+    }\n+}\n+\n+impl ConfigType for String {\n+    fn doc_hint() -> String {\n+        String::from(\"<string>\")\n+    }\n+}\n+\n+impl ConfigType for FileLines {\n+    fn doc_hint() -> String {\n+        String::from(\"<json>\")\n+    }\n+}\n+\n+impl ConfigType for WidthHeuristics {\n+    fn doc_hint() -> String {\n+        String::new()\n+    }\n+}\n+\n+/// Check if we're in a nightly build.\n+///\n+/// The environment variable `CFG_RELEASE_CHANNEL` is set during the rustc bootstrap\n+/// to \"stable\", \"beta\", or \"nightly\" depending on what toolchain is being built.\n+/// If we are being built as part of the stable or beta toolchains, we want\n+/// to disable unstable configuration options.\n+///\n+/// If we're being built by cargo (e.g. `cargo +nightly install rustfmt-nightly`),\n+/// `CFG_RELEASE_CHANNEL` is not set. As we only support being built against the\n+/// nightly compiler when installed from crates.io, default to nightly mode.\n+macro_rules! is_nightly_channel {\n+    () => {\n+        option_env!(\"CFG_RELEASE_CHANNEL\")\n+            .map(|c| c == \"nightly\")\n+            .unwrap_or(true)\n+    };\n+}\n+\n+macro_rules! create_config {\n+    ($($i:ident: $ty:ty, $def:expr, $stb:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n+        #[derive(Clone)]\n+        pub struct Config {\n+            // For each config item, we store a bool indicating whether it has\n+            // been accessed and the value, and a bool whether the option was\n+            // manually initialised, or taken from the default,\n+            $($i: (Cell<bool>, bool, $ty, bool)),+\n+        }\n+\n+        // Just like the Config struct but with each property wrapped\n+        // as Option<T>. This is used to parse a rustfmt.toml that doesn't\n+        // specify all properties of `Config`.\n+        // We first parse into `PartialConfig`, then create a default `Config`\n+        // and overwrite the properties with corresponding values from `PartialConfig`.\n+        #[derive(Deserialize, Serialize, Clone)]\n+        pub struct PartialConfig {\n+            $(pub $i: Option<$ty>),+\n+        }\n+\n+        impl PartialConfig {\n+            pub fn to_toml(&self) -> Result<String, String> {\n+                // Non-user-facing options can't be specified in TOML\n+                let mut cloned = self.clone();\n+                cloned.file_lines = None;\n+                cloned.verbose = None;\n+                cloned.width_heuristics = None;\n+\n+                toml::to_string(&cloned)\n+                    .map_err(|e| format!(\"Could not output config: {}\", e.to_string()))\n+            }\n+        }\n+\n+        // Macro hygiene won't allow us to make `set_$i()` methods on Config\n+        // for each item, so this struct is used to give the API to set values:\n+        // `config.set().option(false)`. It's pretty ugly. Consider replacing\n+        // with `config.set_option(false)` if we ever get a stable/usable\n+        // `concat_idents!()`.\n+        pub struct ConfigSetter<'a>(&'a mut Config);\n+\n+        impl<'a> ConfigSetter<'a> {\n+            $(\n+            pub fn $i(&mut self, value: $ty) {\n+                (self.0).$i.2 = value;\n+                if stringify!($i) == \"use_small_heuristics\" {\n+                    self.0.set_heuristics();\n+                }\n+            }\n+            )+\n+        }\n+\n+        // Query each option, returns true if the user set the option, false if\n+        // a default was used.\n+        pub struct ConfigWasSet<'a>(&'a Config);\n+\n+        impl<'a> ConfigWasSet<'a> {\n+            $(\n+            pub fn $i(&self) -> bool {\n+                (self.0).$i.1\n+            }\n+            )+\n+        }\n+\n+        impl Config {\n+            pub fn version_meets_requirement(&self, error_summary: &mut Summary) -> bool {\n+                if self.was_set().required_version() {\n+                    let version = env!(\"CARGO_PKG_VERSION\");\n+                    let required_version = self.required_version();\n+                    if version != required_version {\n+                        println!(\n+                            \"Error: rustfmt version ({}) doesn't match the required version ({})\",\n+                            version,\n+                            required_version,\n+                        );\n+                        error_summary.add_formatting_error();\n+                        return false;\n+                    }\n+                }\n+\n+                true\n+            }\n+\n+            $(\n+            pub fn $i(&self) -> $ty {\n+                self.$i.0.set(true);\n+                self.$i.2.clone()\n+            }\n+            )+\n+\n+            pub fn set<'a>(&'a mut self) -> ConfigSetter<'a> {\n+                ConfigSetter(self)\n+            }\n+\n+            pub fn was_set<'a>(&'a self) -> ConfigWasSet<'a> {\n+                ConfigWasSet(self)\n+            }\n+\n+            fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n+            $(\n+                if let Some(val) = parsed.$i {\n+                    if self.$i.3 {\n+                        self.$i.1 = true;\n+                        self.$i.2 = val;\n+                    } else {\n+                        if is_nightly_channel!() {\n+                            self.$i.1 = true;\n+                            self.$i.2 = val;\n+                        } else {\n+                            eprintln!(\"Warning: can't set `{} = {:?}`, unstable features are only \\\n+                                       available in nightly channel.\", stringify!($i), val);\n+                        }\n+                    }\n+                }\n+            )+\n+                self.set_heuristics();\n+                self\n+            }\n+\n+            pub fn from_toml(toml: &str) -> Result<Config, String> {\n+                let parsed: toml::Value =\n+                    toml.parse().map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n+                let mut err: String = String::new();\n+                {\n+                    let table = parsed\n+                        .as_table()\n+                        .ok_or(String::from(\"Parsed config was not table\"))?;\n+                    for key in table.keys() {\n+                        match &**key {\n+                            $(\n+                                stringify!($i) => (),\n+                            )+\n+                            _ => {\n+                                let msg =\n+                                    &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n+                                err.push_str(msg)\n+                            }\n+                        }\n+                    }\n+                }\n+                match parsed.try_into() {\n+                    Ok(parsed_config) => {\n+                        if !err.is_empty() {\n+                            eprint!(\"{}\", err);\n+                        }\n+                        Ok(Config::default().fill_from_parsed_config(parsed_config))\n+                    }\n+                    Err(e) => {\n+                        err.push_str(\"Error: Decoding config file failed:\\n\");\n+                        err.push_str(format!(\"{}\\n\", e).as_str());\n+                        err.push_str(\"Please check your config file.\");\n+                        Err(err)\n+                    }\n+                }\n+            }\n+\n+            pub fn used_options(&self) -> PartialConfig {\n+                PartialConfig {\n+                    $(\n+                        $i: if self.$i.0.get() {\n+                                Some(self.$i.2.clone())\n+                            } else {\n+                                None\n+                            },\n+                    )+\n+                }\n+            }\n+\n+            pub fn all_options(&self) -> PartialConfig {\n+                PartialConfig {\n+                    $(\n+                        $i: Some(self.$i.2.clone()),\n+                    )+\n+                }\n+            }\n+\n+            pub fn override_value(&mut self, key: &str, val: &str)\n+            {\n+                match key {\n+                    $(\n+                        stringify!($i) => {\n+                            self.$i.2 = val.parse::<$ty>()\n+                                .expect(&format!(\"Failed to parse override for {} (\\\"{}\\\") as a {}\",\n+                                                 stringify!($i),\n+                                                 val,\n+                                                 stringify!($ty)));\n+                        }\n+                    )+\n+                    _ => panic!(\"Unknown config key in override: {}\", key)\n+                }\n+\n+                if key == \"use_small_heuristics\" {\n+                    self.set_heuristics();\n+                }\n+            }\n+\n+            /// Construct a `Config` from the toml file specified at `file_path`.\n+            ///\n+            /// This method only looks at the provided path, for a method that\n+            /// searches parents for a `rustfmt.toml` see `from_resolved_toml_path`.\n+            ///\n+            /// Return a `Config` if the config could be read and parsed from\n+            /// the file, Error otherwise.\n+            pub fn from_toml_path(file_path: &Path) -> Result<Config, Error> {\n+                let mut file = File::open(&file_path)?;\n+                let mut toml = String::new();\n+                file.read_to_string(&mut toml)?;\n+                Config::from_toml(&toml).map_err(|err| Error::new(ErrorKind::InvalidData, err))\n+            }\n+\n+            /// Resolve the config for input in `dir`.\n+            ///\n+            /// Searches for `rustfmt.toml` beginning with `dir`, and\n+            /// recursively checking parents of `dir` if no config file is found.\n+            /// If no config file exists in `dir` or in any parent, a\n+            /// default `Config` will be returned (and the returned path will be empty).\n+            ///\n+            /// Returns the `Config` to use, and the path of the project file if there was\n+            /// one.\n+            pub fn from_resolved_toml_path(dir: &Path) -> Result<(Config, Option<PathBuf>), Error> {\n+\n+                /// Try to find a project file in the given directory and its parents.\n+                /// Returns the path of a the nearest project file if one exists,\n+                /// or `None` if no project file was found.\n+                fn resolve_project_file(dir: &Path) -> Result<Option<PathBuf>, Error> {\n+                    let mut current = if dir.is_relative() {\n+                        env::current_dir()?.join(dir)\n+                    } else {\n+                        dir.to_path_buf()\n+                    };\n+\n+                    current = fs::canonicalize(current)?;\n+\n+                    loop {\n+                        match get_toml_path(&current) {\n+                            Ok(Some(path)) => return Ok(Some(path)),\n+                            Err(e) => return Err(e),\n+                            _ => ()\n+                        }\n+\n+                        // If the current directory has no parent, we're done searching.\n+                        if !current.pop() {\n+                            return Ok(None);\n+                        }\n+                    }\n+                }\n+\n+                match resolve_project_file(dir)? {\n+                    None => Ok((Config::default(), None)),\n+                    Some(path) => Config::from_toml_path(&path).map(|config| (config, Some(path))),\n+                }\n+            }\n+\n+\n+            pub fn print_docs() {\n+                use std::cmp;\n+                const HIDE_OPTIONS: [&str; 3] = [\"verbose\", \"file_lines\", \"width_heuristics\"];\n+                let max = 0;\n+                $( let max = cmp::max(max, stringify!($i).len()+1); )+\n+                let mut space_str = String::with_capacity(max);\n+                for _ in 0..max {\n+                    space_str.push(' ');\n+                }\n+                println!(\"Configuration Options:\");\n+                $(\n+                    let name_raw = stringify!($i);\n+\n+                    if !HIDE_OPTIONS.contains(&name_raw) {\n+                        let mut name_out = String::with_capacity(max);\n+                        for _ in name_raw.len()..max-1 {\n+                            name_out.push(' ')\n+                        }\n+                        name_out.push_str(name_raw);\n+                        name_out.push(' ');\n+                        println!(\"{}{} Default: {:?}\",\n+                                name_out,\n+                                <$ty>::doc_hint(),\n+                                $def);\n+                        $(\n+                            println!(\"{}{}\", space_str, $dstring);\n+                        )+\n+                        println!();\n+                    }\n+                )+\n+            }\n+\n+            fn set_heuristics(&mut self) {\n+                if self.use_small_heuristics.2 {\n+                    self.set().width_heuristics(WidthHeuristics::default());\n+                } else {\n+                    self.set().width_heuristics(WidthHeuristics::null());\n+                }\n+            }\n+        }\n+\n+        // Template for the default configuration\n+        impl Default for Config {\n+            fn default() -> Config {\n+                Config {\n+                    $(\n+                        $i: (Cell::new(false), false, $def, $stb),\n+                    )+\n+                }\n+            }\n+        }\n+    )\n+}"}, {"sha": "87e201345deefdb587e31eb44d11b27c165e6378", "filename": "rustfmt-config/src/file_lines.rs", "status": "renamed", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Ffile_lines.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -12,12 +12,25 @@\n \n use std::{cmp, iter, str};\n use std::collections::HashMap;\n+use std::rc::Rc;\n \n use serde::de::{Deserialize, Deserializer};\n use serde_json as json;\n \n-use codemap::LineRange;\n-use syntax::codemap::FileName;\n+use syntax::codemap::{FileMap, FileName};\n+\n+/// A range of lines in a file, inclusive of both ends.\n+pub struct LineRange {\n+    pub file: Rc<FileMap>,\n+    pub lo: usize,\n+    pub hi: usize,\n+}\n+\n+impl LineRange {\n+    pub fn file_name(&self) -> &FileName {\n+        &self.file.name\n+    }\n+}\n \n /// A range that is inclusive of both ends.\n #[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord, Deserialize)]\n@@ -34,7 +47,7 @@ impl<'a> From<&'a LineRange> for Range {\n \n impl Range {\n     pub fn new(lo: usize, hi: usize) -> Range {\n-        Range { lo: lo, hi: hi }\n+        Range { lo, hi }\n     }\n \n     fn is_empty(self) -> bool {", "previous_filename": "src/file_lines.rs"}, {"sha": "cbfd236dc37e8a4610331ffd2b1cd583c42c2d42", "filename": "rustfmt-config/src/lib.rs", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Flib.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,252 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate serde;\n+#[macro_use]\n+extern crate serde_derive;\n+extern crate serde_json;\n+extern crate syntax;\n+extern crate toml;\n+\n+use std::{env, fs};\n+use std::cell::Cell;\n+use std::default::Default;\n+use std::fs::File;\n+use std::io::{Error, ErrorKind, Read};\n+use std::path::{Path, PathBuf};\n+\n+#[macro_use]\n+mod config_type;\n+#[macro_use]\n+mod options;\n+\n+pub mod file_lines;\n+pub mod lists;\n+pub mod summary;\n+\n+use config_type::ConfigType;\n+use file_lines::FileLines;\n+pub use lists::*;\n+pub use options::*;\n+use summary::Summary;\n+\n+/// This macro defines configuration options used in rustfmt. Each option\n+/// is defined as follows:\n+///\n+/// `name: value type, default value, is stable, description;`\n+create_config! {\n+    // Fundamental stuff\n+    max_width: usize, 100, true, \"Maximum width of each line\";\n+    hard_tabs: bool, false, true, \"Use tab characters for indentation, spaces for alignment\";\n+    tab_spaces: usize, 4, true, \"Number of spaces per tab\";\n+    newline_style: NewlineStyle, NewlineStyle::Unix, true, \"Unix or Windows line endings\";\n+    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items.\";\n+    use_small_heuristics: bool, true, false, \"Whether to use different formatting for items and\\\n+        expressions if they satisfy a heuristic notion of 'small'.\";\n+\n+    // strings and comments\n+    format_strings: bool, false, false, \"Format string literals where necessary\";\n+    wrap_comments: bool, false, true, \"Break comments to fit on the line\";\n+    comment_width: usize, 80, false,\n+        \"Maximum length of comments. No effect unless wrap_comments = true\";\n+    normalize_comments: bool, false, true, \"Convert /* */ comments to // comments where possible\";\n+\n+    // Single line expressions and items.\n+    empty_item_single_line: bool, true, false,\n+        \"Put empty-body functions and impls on a single line\";\n+    struct_lit_single_line: bool, true, false,\n+        \"Put small struct literals on a single line\";\n+    fn_single_line: bool, false, false, \"Put single-expression functions on a single line\";\n+    where_single_line: bool, false, false, \"To force single line where layout\";\n+\n+    // Imports\n+    imports_indent: IndentStyle, IndentStyle::Visual, false, \"Indent of imports\";\n+    imports_layout: ListTactic, ListTactic::Mixed, false, \"Item layout inside a import block\";\n+\n+    // Ordering\n+    reorder_extern_crates: bool, true, false, \"Reorder extern crate statements alphabetically\";\n+    reorder_extern_crates_in_group: bool, true, false, \"Reorder extern crate statements in group\";\n+    reorder_imports: bool, false, false, \"Reorder import statements alphabetically\";\n+    reorder_imports_in_group: bool, false, false, \"Reorder import statements in group\";\n+    reorder_imported_names: bool, true, false,\n+        \"Reorder lists of names in import statements alphabetically\";\n+    reorder_modules: bool, false, false, \"Reorder module statemtents alphabetically in group\";\n+\n+    // Spaces around punctuation\n+    binop_separator: SeparatorPlace, SeparatorPlace::Front, false,\n+        \"Where to put a binary operator when a binary expression goes multiline.\";\n+    type_punctuation_density: TypeDensity, TypeDensity::Wide, false,\n+        \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n+    space_before_colon: bool, false, false, \"Leave a space before the colon\";\n+    space_after_colon: bool, true, false, \"Leave a space after the colon\";\n+    spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ... range operators\";\n+    spaces_within_parens_and_brackets: bool, false, false,\n+        \"Put spaces within non-empty parentheses or brackets\";\n+\n+    // Misc.\n+    combine_control_expr: bool, true, false, \"Combine control expressions with function calls.\";\n+    struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n+                                             threshold.\";\n+    remove_blank_lines_at_start_or_end_of_block: bool, true, false,\n+        \"Remove blank lines at start or end of a block\";\n+    match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\\n+        the same line with the pattern of arms\";\n+    force_multiline_blocks: bool, false, false,\n+        \"Force multiline closure bodies and match arms to be wrapped in a block\";\n+    fn_args_density: Density, Density::Tall, false, \"Argument density in functions\";\n+    brace_style: BraceStyle, BraceStyle::SameLineWhere, false, \"Brace style for items\";\n+    control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine, false,\n+        \"Brace style for control flow constructs\";\n+    trailing_comma: SeparatorTactic, SeparatorTactic::Vertical, false,\n+        \"How to handle trailing commas for lists\";\n+    trailing_semicolon: bool, true, false,\n+        \"Add trailing semicolon after break, continue and return\";\n+    match_block_trailing_comma: bool, false, false,\n+        \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n+    blank_lines_upper_bound: usize, 1, false,\n+        \"Maximum number of blank lines which can be put between items.\";\n+    blank_lines_lower_bound: usize, 0, false,\n+        \"Minimum number of blank lines which must be put between items.\";\n+\n+    // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n+    merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";\n+    use_try_shorthand: bool, false, false, \"Replace uses of the try! macro by the ? shorthand\";\n+    condense_wildcard_suffixes: bool, false, false, \"Replace strings of _ wildcards by a single .. \\\n+                                              in tuple patterns\";\n+    force_explicit_abi: bool, true, true, \"Always print the abi for extern items\";\n+    use_field_init_shorthand: bool, false, false, \"Use field initialization shorthand if possible\";\n+\n+    // Control options (changes the operation of rustfmt, rather than the formatting)\n+    write_mode: WriteMode, WriteMode::Overwrite, false,\n+        \"What Write Mode to use when none is supplied: \\\n+         Replace, Overwrite, Display, Plain, Diff, Coverage\";\n+    color: Color, Color::Auto, false,\n+        \"What Color option to use when none is supplied: Always, Never, Auto\";\n+    required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n+        \"Require a specific version of rustfmt.\";\n+    unstable_features: bool, false, true,\n+            \"Enables unstable features. Only available on nightly channel\";\n+    disable_all_formatting: bool, false, false, \"Don't reformat anything\";\n+    skip_children: bool, false, false, \"Don't reformat out of line modules\";\n+    hide_parse_errors: bool, false, false, \"Hide errors from the parser\";\n+    error_on_line_overflow: bool, true, false, \"Error if unable to get all lines within max_width\";\n+    error_on_unformatted: bool, false, false,\n+        \"Error if unable to get comments or string literals within max_width, \\\n+         or they are left with trailing whitespaces\";\n+    report_todo: ReportTactic, ReportTactic::Never, false,\n+        \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n+    report_fixme: ReportTactic, ReportTactic::Never, false,\n+        \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n+\n+    // Not user-facing.\n+    verbose: bool, false, false, \"Use verbose output\";\n+    file_lines: FileLines, FileLines::all(), false,\n+        \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n+         via the --file-lines option\";\n+    width_heuristics: WidthHeuristics, WidthHeuristics::default(), false,\n+        \"'small' heuristic values\";\n+}\n+\n+/// Check for the presence of known config file names (`rustfmt.toml, `.rustfmt.toml`) in `dir`\n+///\n+/// Return the path if a config file exists, empty if no file exists, and Error for IO errors\n+pub fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n+    const CONFIG_FILE_NAMES: [&str; 2] = [\".rustfmt.toml\", \"rustfmt.toml\"];\n+    for config_file_name in &CONFIG_FILE_NAMES {\n+        let config_file = dir.join(config_file_name);\n+        match fs::metadata(&config_file) {\n+            // Only return if it's a file to handle the unlikely situation of a directory named\n+            // `rustfmt.toml`.\n+            Ok(ref md) if md.is_file() => return Ok(Some(config_file)),\n+            // Return the error if it's something other than `NotFound`; otherwise we didn't\n+            // find the project file yet, and continue searching.\n+            Err(e) => {\n+                if e.kind() != ErrorKind::NotFound {\n+                    return Err(e);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+    Ok(None)\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::Config;\n+\n+    #[test]\n+    fn test_config_set() {\n+        let mut config = Config::default();\n+        config.set().verbose(false);\n+        assert_eq!(config.verbose(), false);\n+        config.set().verbose(true);\n+        assert_eq!(config.verbose(), true);\n+    }\n+\n+    #[test]\n+    fn test_config_used_to_toml() {\n+        let config = Config::default();\n+\n+        let merge_derives = config.merge_derives();\n+        let skip_children = config.skip_children();\n+\n+        let used_options = config.used_options();\n+        let toml = used_options.to_toml().unwrap();\n+        assert_eq!(\n+            toml,\n+            format!(\n+                \"merge_derives = {}\\nskip_children = {}\\n\",\n+                merge_derives, skip_children,\n+            )\n+        );\n+    }\n+\n+    #[test]\n+    fn test_was_set() {\n+        let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n+\n+        assert_eq!(config.was_set().hard_tabs(), true);\n+        assert_eq!(config.was_set().verbose(), false);\n+    }\n+\n+    // FIXME(#2183) these tests cannot be run in parallel because they use env vars\n+    // #[test]\n+    // fn test_as_not_nightly_channel() {\n+    //     let mut config = Config::default();\n+    //     assert_eq!(config.was_set().unstable_features(), false);\n+    //     config.set().unstable_features(true);\n+    //     assert_eq!(config.was_set().unstable_features(), false);\n+    // }\n+\n+    // #[test]\n+    // fn test_as_nightly_channel() {\n+    //     let v = ::std::env::var(\"CFG_RELEASE_CHANNEL\").unwrap_or(String::from(\"\"));\n+    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", \"nightly\");\n+    //     let mut config = Config::default();\n+    //     config.set().unstable_features(true);\n+    //     assert_eq!(config.was_set().unstable_features(), false);\n+    //     config.set().unstable_features(true);\n+    //     assert_eq!(config.unstable_features(), true);\n+    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", v);\n+    // }\n+\n+    // #[test]\n+    // fn test_unstable_from_toml() {\n+    //     let mut config = Config::from_toml(\"unstable_features = true\").unwrap();\n+    //     assert_eq!(config.was_set().unstable_features(), false);\n+    //     let v = ::std::env::var(\"CFG_RELEASE_CHANNEL\").unwrap_or(String::from(\"\"));\n+    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", \"nightly\");\n+    //     config = Config::from_toml(\"unstable_features = true\").unwrap();\n+    //     assert_eq!(config.was_set().unstable_features(), true);\n+    //     assert_eq!(config.unstable_features(), true);\n+    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", v);\n+    // }\n+}"}, {"sha": "2ddc2e59261258af744b1109aaf2d5249460fea0", "filename": "rustfmt-config/src/lists.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Flists.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,105 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Configuration options related to rewriting a list.\n+\n+use IndentStyle;\n+use config_type::ConfigType;\n+\n+/// The definitive formatting tactic for lists.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+pub enum DefinitiveListTactic {\n+    Vertical,\n+    Horizontal,\n+    Mixed,\n+    /// Special case tactic for `format!()`, `write!()` style macros.\n+    SpecialMacro(usize),\n+}\n+\n+impl DefinitiveListTactic {\n+    pub fn ends_with_newline(&self, indent_style: IndentStyle) -> bool {\n+        match indent_style {\n+            IndentStyle::Block => *self != DefinitiveListTactic::Horizontal,\n+            IndentStyle::Visual => false,\n+        }\n+    }\n+}\n+\n+/// Formatting tactic for lists. This will be cast down to a\n+/// `DefinitiveListTactic` depending on the number and length of the items and\n+/// their comments.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+pub enum ListTactic {\n+    // One item per row.\n+    Vertical,\n+    // All items on one row.\n+    Horizontal,\n+    // Try Horizontal layout, if that fails then vertical.\n+    HorizontalVertical,\n+    // HorizontalVertical with a soft limit of n characters.\n+    LimitedHorizontalVertical(usize),\n+    // Pack as many items as possible per row over (possibly) many rows.\n+    Mixed,\n+}\n+\n+impl_enum_serialize_and_deserialize!(ListTactic, Vertical, Horizontal, HorizontalVertical, Mixed);\n+\n+#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+pub enum SeparatorTactic {\n+    Always,\n+    Never,\n+    Vertical,\n+}\n+\n+impl_enum_serialize_and_deserialize!(SeparatorTactic, Always, Never, Vertical);\n+\n+impl SeparatorTactic {\n+    pub fn from_bool(b: bool) -> SeparatorTactic {\n+        if b {\n+            SeparatorTactic::Always\n+        } else {\n+            SeparatorTactic::Never\n+        }\n+    }\n+}\n+\n+/// Where to put separator.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+pub enum SeparatorPlace {\n+    Front,\n+    Back,\n+}\n+\n+impl_enum_serialize_and_deserialize!(SeparatorPlace, Front, Back);\n+\n+impl SeparatorPlace {\n+    pub fn is_front(&self) -> bool {\n+        *self == SeparatorPlace::Front\n+    }\n+\n+    pub fn is_back(&self) -> bool {\n+        *self == SeparatorPlace::Back\n+    }\n+\n+    pub fn from_tactic(\n+        default: SeparatorPlace,\n+        tactic: DefinitiveListTactic,\n+        sep: &str,\n+    ) -> SeparatorPlace {\n+        match tactic {\n+            DefinitiveListTactic::Vertical => default,\n+            _ => if sep == \",\" {\n+                SeparatorPlace::Back\n+            } else {\n+                default\n+            },\n+        }\n+    }\n+}"}, {"sha": "6391db85dc5134bdf64adad0dd08d3289261add7", "filename": "rustfmt-config/src/macros.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Fmacros.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+"}, {"sha": "b6a28b9b58c466e61aea650b0601913597426868", "filename": "rustfmt-config/src/options.rs", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Foptions.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,246 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use config_type::ConfigType;\n+use lists::*;\n+\n+/// Macro for deriving implementations of Serialize/Deserialize for enums\n+#[macro_export]\n+macro_rules! impl_enum_serialize_and_deserialize {\n+    ( $e:ident, $( $x:ident ),* ) => {\n+        impl ::serde::ser::Serialize for $e {\n+            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+                where S: ::serde::ser::Serializer\n+            {\n+                use serde::ser::Error;\n+\n+                // We don't know whether the user of the macro has given us all options.\n+                #[allow(unreachable_patterns)]\n+                match *self {\n+                    $(\n+                        $e::$x => serializer.serialize_str(stringify!($x)),\n+                    )*\n+                    _ => {\n+                        Err(S::Error::custom(format!(\"Cannot serialize {:?}\", self)))\n+                    }\n+                }\n+            }\n+        }\n+\n+        impl<'de> ::serde::de::Deserialize<'de> for $e {\n+            fn deserialize<D>(d: D) -> Result<Self, D::Error>\n+                    where D: ::serde::Deserializer<'de> {\n+                use serde::de::{Error, Visitor};\n+                use std::marker::PhantomData;\n+                use std::fmt;\n+                struct StringOnly<T>(PhantomData<T>);\n+                impl<'de, T> Visitor<'de> for StringOnly<T>\n+                        where T: ::serde::Deserializer<'de> {\n+                    type Value = String;\n+                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+                        formatter.write_str(\"string\")\n+                    }\n+                    fn visit_str<E>(self, value: &str) -> Result<String, E> {\n+                        Ok(String::from(value))\n+                    }\n+                }\n+                let s = d.deserialize_string(StringOnly::<D>(PhantomData))?;\n+                $(\n+                    if stringify!($x).eq_ignore_ascii_case(&s) {\n+                      return Ok($e::$x);\n+                    }\n+                )*\n+                static ALLOWED: &'static[&str] = &[$(stringify!($x),)*];\n+                Err(D::Error::unknown_variant(&s, ALLOWED))\n+            }\n+        }\n+\n+        impl ::std::str::FromStr for $e {\n+            type Err = &'static str;\n+\n+            fn from_str(s: &str) -> Result<Self, Self::Err> {\n+                $(\n+                    if stringify!($x).eq_ignore_ascii_case(s) {\n+                        return Ok($e::$x);\n+                    }\n+                )*\n+                Err(\"Bad variant\")\n+            }\n+        }\n+\n+        impl ConfigType for $e {\n+            fn doc_hint() -> String {\n+                let mut variants = Vec::new();\n+                $(\n+                    variants.push(stringify!($x));\n+                )*\n+                format!(\"[{}]\", variants.join(\"|\"))\n+            }\n+        }\n+    };\n+}\n+\n+macro_rules! configuration_option_enum{\n+    ($e:ident: $( $x:ident ),+ $(,)*) => {\n+        #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+        pub enum $e {\n+            $( $x ),+\n+        }\n+\n+        impl_enum_serialize_and_deserialize!($e, $( $x ),+);\n+    }\n+}\n+\n+configuration_option_enum! { NewlineStyle:\n+    Windows, // \\r\\n\n+    Unix, // \\n\n+    Native, // \\r\\n in Windows, \\n on other platforms\n+}\n+\n+configuration_option_enum! { BraceStyle:\n+    AlwaysNextLine,\n+    PreferSameLine,\n+    // Prefer same line except where there is a where clause, in which case force\n+    // the brace to the next line.\n+    SameLineWhere,\n+}\n+\n+configuration_option_enum! { ControlBraceStyle:\n+    // K&R style, Rust community default\n+    AlwaysSameLine,\n+    // Stroustrup style\n+    ClosingNextLine,\n+    // Allman style\n+    AlwaysNextLine,\n+}\n+\n+configuration_option_enum! { IndentStyle:\n+    // First line on the same line as the opening brace, all lines aligned with\n+    // the first line.\n+    Visual,\n+    // First line is on a new line and all lines align with block indent.\n+    Block,\n+}\n+\n+configuration_option_enum! { Density:\n+    // Fit as much on one line as possible.\n+    Compressed,\n+    // Use more lines.\n+    Tall,\n+    // Place every item on a separate line.\n+    Vertical,\n+}\n+\n+configuration_option_enum! { TypeDensity:\n+    // No spaces around \"=\" and \"+\"\n+    Compressed,\n+    // Spaces around \" = \" and \" + \"\n+    Wide,\n+}\n+\n+impl Density {\n+    pub fn to_list_tactic(self) -> ListTactic {\n+        match self {\n+            Density::Compressed => ListTactic::Mixed,\n+            Density::Tall => ListTactic::HorizontalVertical,\n+            Density::Vertical => ListTactic::Vertical,\n+        }\n+    }\n+}\n+\n+configuration_option_enum! { ReportTactic:\n+    Always,\n+    Unnumbered,\n+    Never,\n+}\n+\n+configuration_option_enum! { WriteMode:\n+    // Backs the original file up and overwrites the original.\n+    Replace,\n+    // Overwrites original file without backup.\n+    Overwrite,\n+    // Writes the output to stdout.\n+    Display,\n+    // Writes the diff to stdout.\n+    Diff,\n+    // Displays how much of the input file was processed\n+    Coverage,\n+    // Unfancy stdout\n+    Plain,\n+    // Outputs a checkstyle XML file.\n+    Checkstyle,\n+    // Output the changed lines\n+    Modified,\n+}\n+\n+configuration_option_enum! { Color:\n+    // Always use color, whether it is a piped or terminal output\n+    Always,\n+    // Never use color\n+    Never,\n+    // Automatically use color, if supported by terminal\n+    Auto,\n+}\n+\n+#[derive(Deserialize, Serialize, Clone, Debug)]\n+pub struct WidthHeuristics {\n+    // Maximum width of the args of a function call before falling back\n+    // to vertical formatting.\n+    pub fn_call_width: usize,\n+    // Maximum width in the body of a struct lit before falling back to\n+    // vertical formatting.\n+    pub struct_lit_width: usize,\n+    // Maximum width in the body of a struct variant before falling back\n+    // to vertical formatting.\n+    pub struct_variant_width: usize,\n+    // Maximum width of an array literal before falling back to vertical\n+    // formatting.\n+    pub array_width: usize,\n+    // Maximum length of a chain to fit on a single line.\n+    pub chain_width: usize,\n+    // Maximum line length for single line if-else expressions. A value\n+    // of zero means always break if-else expressions.\n+    pub single_line_if_else_max_width: usize,\n+}\n+\n+impl WidthHeuristics {\n+    // Using this WidthHeuristics means we ignore heuristics.\n+    pub fn null() -> WidthHeuristics {\n+        WidthHeuristics {\n+            fn_call_width: usize::max_value(),\n+            struct_lit_width: 0,\n+            struct_variant_width: 0,\n+            array_width: usize::max_value(),\n+            chain_width: usize::max_value(),\n+            single_line_if_else_max_width: 0,\n+        }\n+    }\n+}\n+\n+impl Default for WidthHeuristics {\n+    fn default() -> WidthHeuristics {\n+        WidthHeuristics {\n+            fn_call_width: 60,\n+            struct_lit_width: 18,\n+            struct_variant_width: 35,\n+            array_width: 60,\n+            chain_width: 60,\n+            single_line_if_else_max_width: 50,\n+        }\n+    }\n+}\n+\n+impl ::std::str::FromStr for WidthHeuristics {\n+    type Err = &'static str;\n+\n+    fn from_str(_: &str) -> Result<Self, Self::Err> {\n+        Err(\"WidthHeuristics is not parsable\")\n+    }\n+}"}, {"sha": "b0be5678a0b5382a383118b684a742d7d86d1d22", "filename": "rustfmt-config/src/summary.rs", "status": "renamed", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-config%2Fsrc%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Fsummary.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use std::time::{Duration, Instant};\n use std::default::Default;\n ", "previous_filename": "src/summary.rs"}, {"sha": "2cf72e3f210641fb697c453485144bba91858252", "filename": "rustfmt-core/Cargo.toml", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2FCargo.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,33 @@\n+[package]\n+name = \"rustfmt-core\"\n+version = \"0.4.0\"\n+authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n+description = \"A core library of rustfmt\"\n+repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n+readme = \"README.md\"\n+license = \"Apache-2.0/MIT\"\n+categories = [\"development-tools\"]\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+derive-new = \"0.5\"\n+diff = \"0.1\"\n+log = \"0.3\"\n+regex = \"0.2\"\n+rustc-ap-syntax = \"29.0.0\"\n+rustc-ap-rustc_errors = \"29.0.0\"\n+rustfmt-config = { path = \"../rustfmt-config\" }\n+term = \"0.4\"\n+unicode-segmentation = \"1.0.0\"\n+\n+[dev-dependencies]\n+lazy_static = \"1.0.0\"\n+\n+[target.'cfg(unix)'.dependencies]\n+libc = \"0.2.11\"\n+\n+[target.'cfg(windows)'.dependencies]\n+kernel32-sys = \"0.2.2\"\n+winapi = \"0.2.7\""}, {"sha": "383e7077d660d3997495db66fbbde3b6cec54bd6", "filename": "rustfmt-core/src/chains.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fchains.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "src/chains.rs"}, {"sha": "7f6e650ad220295e9539484d5b4c28f88b42de54", "filename": "rustfmt-core/src/checkstyle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcheckstyle.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "src/checkstyle.rs"}, {"sha": "be1681c7671678f47a64e3ef0f9197796b7feef1", "filename": "rustfmt-core/src/closures.rs", "status": "renamed", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fclosures.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use config::lists::*;\n use syntax::{ast, ptr};\n use syntax::codemap::Span;\n use syntax::parse::classify;\n \n use codemap::SpanUtils;\n use expr::{block_contains_comment, is_simple_block, is_unsafe_block, rewrite_cond, ToExpr};\n use items::{span_hi_for_arg, span_lo_for_arg};\n-use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n-            ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use utils::{last_line_width, left_most_sub_expr, stmt_expr};\n@@ -33,6 +33,7 @@ use utils::{last_line_width, left_most_sub_expr, stmt_expr};\n \n pub fn rewrite_closure(\n     capture: ast::CaptureBy,\n+    movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n     span: Span,\n@@ -42,7 +43,7 @@ pub fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) =\n-        rewrite_closure_fn_decl(capture, fn_decl, body, span, context, shape)?;\n+        rewrite_closure_fn_decl(capture, movability, fn_decl, body, span, context, shape)?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n \n@@ -194,6 +195,7 @@ fn rewrite_closure_block(\n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n     capture: ast::CaptureBy,\n+    movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n     span: Span,\n@@ -205,9 +207,17 @@ fn rewrite_closure_fn_decl(\n     } else {\n         \"\"\n     };\n+\n+    let immovable = if movability == ast::Movability::Static {\n+        \"static \"\n+    } else {\n+        \"\"\n+    };\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n-    let nested_shape = shape.shrink_left(mover.len())?.sub_width(4)?;\n+    let nested_shape = shape\n+        .shrink_left(mover.len() + immovable.len())?\n+        .sub_width(4)?;\n \n     // 1 = |\n     let argument_offset = nested_shape.indent + 1;\n@@ -244,7 +254,7 @@ fn rewrite_closure_fn_decl(\n     };\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,\n@@ -254,7 +264,7 @@ fn rewrite_closure_fn_decl(\n         config: context.config,\n     };\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}|{}|\", mover, list_str);\n+    let mut prefix = format!(\"{}{}|{}|\", immovable, mover, list_str);\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -278,7 +288,7 @@ pub fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) = expr.node {\n+    if let ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) = expr.node {\n         let body = match body.node {\n             ast::ExprKind::Block(ref block)\n                 if !is_unsafe_block(block) && is_simple_block(block, context.codemap) =>\n@@ -287,8 +297,15 @@ pub fn rewrite_last_closure(\n             }\n             _ => body,\n         };\n-        let (prefix, extra_offset) =\n-            rewrite_closure_fn_decl(capture, fn_decl, body, expr.span, context, shape)?;\n+        let (prefix, extra_offset) = rewrite_closure_fn_decl(\n+            capture,\n+            movability,\n+            fn_decl,\n+            body,\n+            expr.span,\n+            context,\n+            shape,\n+        )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {\n             return None;", "previous_filename": "src/closures.rs"}, {"sha": "85716f73615539c354b286027c8916471d43bf16", "filename": "rustfmt-core/src/codemap.rs", "status": "renamed", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcodemap.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -11,25 +11,11 @@\n //! This module contains utilities that work with the `CodeMap` from `libsyntax` / `syntex_syntax`.\n //! This includes extension traits and methods for looking up spans and line ranges for AST nodes.\n \n-use std::rc::Rc;\n-\n-use syntax::codemap::{BytePos, CodeMap, FileMap, FileName, Span};\n+use config::file_lines::LineRange;\n+use syntax::codemap::{BytePos, CodeMap, Span};\n \n use comment::FindUncommented;\n \n-/// A range of lines in a file, inclusive of both ends.\n-pub struct LineRange {\n-    pub file: Rc<FileMap>,\n-    pub lo: usize,\n-    pub hi: usize,\n-}\n-\n-impl LineRange {\n-    pub fn file_name(&self) -> &FileName {\n-        &self.file.name\n-    }\n-}\n-\n pub trait SpanUtils {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos;\n     fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n@@ -48,8 +34,8 @@ pub trait LineRangeUtils {\n \n impl SpanUtils for CodeMap {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let offset = snippet.find_uncommented(needle).unwrap() + needle.len();\n+        let snippet = self.span_to_snippet(original).expect(\"Bad snippet\");\n+        let offset = snippet.find_uncommented(needle).expect(\"Bad offset\") + needle.len();\n \n         original.lo() + BytePos(offset as u32)\n     }", "previous_filename": "src/codemap.rs"}, {"sha": "9c0322bcaeb194cd040cf94069e996210ae21f60", "filename": "rustfmt-core/src/comment.rs", "status": "renamed", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcomment.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -134,6 +134,11 @@ fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n     }\n }\n \n+/// Combine `prev_str` and `next_str` into a single `String`. `span` may contain\n+/// comments between two strings. If there are such comments, then that will be\n+/// recovered. If `allow_extend` is true and there is no comment between the two\n+/// strings, then they will be put on a single line as long as doing so does not\n+/// exceed max width.\n pub fn combine_strs_with_missing_comments(\n     context: &RewriteContext,\n     prev_str: &str,\n@@ -285,11 +290,11 @@ fn rewrite_comment_inner(\n     let mut fmt = StringFormat {\n         opener: \"\",\n         closer: \"\",\n-        line_start: line_start,\n+        line_start,\n         line_end: \"\",\n         shape: Shape::legacy(max_chars, fmt_indent),\n         trim_end: true,\n-        config: config,\n+        config,\n     };\n \n     let line_breaks = count_newlines(orig.trim_right());\n@@ -328,7 +333,7 @@ fn rewrite_comment_inner(\n         while let Some(line) = iter.next() {\n             result.push_str(line);\n             result.push_str(match iter.peek() {\n-                Some(ref next_line) if next_line.is_empty() => comment_line_separator.trim_right(),\n+                Some(next_line) if next_line.is_empty() => comment_line_separator.trim_right(),\n                 Some(..) => &comment_line_separator,\n                 None => \"\",\n             });\n@@ -895,7 +900,7 @@ pub struct CommentCodeSlices<'a> {\n impl<'a> CommentCodeSlices<'a> {\n     pub fn new(slice: &'a str) -> CommentCodeSlices<'a> {\n         CommentCodeSlices {\n-            slice: slice,\n+            slice,\n             last_slice_kind: CodeCharKind::Comment,\n             last_slice_end: 0,\n         }\n@@ -1019,7 +1024,7 @@ impl<'a> CommentReducer<'a> {\n         let is_block = comment.starts_with(\"/*\");\n         let comment = remove_comment_header(comment);\n         CommentReducer {\n-            is_block: is_block,\n+            is_block,\n             at_start_line: false, // There are no supplementary '*' on the first line\n             iter: comment.chars(),\n         }", "previous_filename": "src/comment.rs"}, {"sha": "1d572f642e23658df4a86832ba0fc806d2874ace", "filename": "rustfmt-core/src/expr.rs", "status": "renamed", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fexpr.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -12,6 +12,7 @@ use std::borrow::Cow;\n use std::cmp::min;\n use std::iter::repeat;\n \n+use config::lists::*;\n use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, CodeMap, Span};\n \n@@ -22,8 +23,7 @@ use comment::{combine_strs_with_missing_comments, contains_comment, recover_comm\n               rewrite_comment, rewrite_missing_comment, FindUncommented};\n use config::{Config, ControlBraceStyle, IndentStyle};\n use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n-            struct_lit_shape, struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n+            struct_lit_shape, struct_lit_tactic, write_list, ListFormatting, ListItem, Separator};\n use macros::{rewrite_macro, MacroArg, MacroPosition};\n use patterns::{can_be_overflowed_pat, TuplePatField};\n use rewrite::{Rewrite, RewriteContext};\n@@ -135,16 +135,16 @@ pub fn format_expr(\n         ast::ExprKind::AssignOp(ref op, ref lhs, ref rhs) => {\n             rewrite_assignment(context, lhs, rhs, Some(op), shape)\n         }\n-        ast::ExprKind::Continue(ref opt_ident) => {\n-            let id_str = match *opt_ident {\n-                Some(ident) => format!(\" {}\", ident.node),\n+        ast::ExprKind::Continue(ref opt_label) => {\n+            let id_str = match *opt_label {\n+                Some(label) => format!(\" {}\", label.ident),\n                 None => String::new(),\n             };\n             Some(format!(\"continue{}\", id_str))\n         }\n-        ast::ExprKind::Break(ref opt_ident, ref opt_expr) => {\n-            let id_str = match *opt_ident {\n-                Some(ident) => format!(\" {}\", ident.node),\n+        ast::ExprKind::Break(ref opt_label, ref opt_expr) => {\n+            let id_str = match *opt_label {\n+                Some(label) => format!(\" {}\", label.ident),\n                 None => String::new(),\n             };\n \n@@ -159,8 +159,16 @@ pub fn format_expr(\n         } else {\n             Some(\"yield\".to_string())\n         },\n-        ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n-            closures::rewrite_closure(capture, fn_decl, body, expr.span, context, shape)\n+        ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) => {\n+            closures::rewrite_closure(\n+                capture,\n+                movability,\n+                fn_decl,\n+                body,\n+                expr.span,\n+                context,\n+                shape,\n+            )\n         }\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n@@ -441,7 +449,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n     let ends_with_newline = tactic.ends_with_newline(context.config.indent_style());\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if trailing_comma {\n             SeparatorTactic::Always\n@@ -462,7 +470,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n-        ends_with_newline: ends_with_newline,\n+        ends_with_newline,\n         preserve_newline: false,\n         config: context.config,\n     };\n@@ -718,7 +726,7 @@ struct ControlFlow<'a> {\n     cond: Option<&'a ast::Expr>,\n     block: &'a ast::Block,\n     else_block: Option<&'a ast::Expr>,\n-    label: Option<ast::SpannedIdent>,\n+    label: Option<ast::Label>,\n     pat: Option<&'a ast::Pat>,\n     keyword: &'a str,\n     matcher: &'a str,\n@@ -779,55 +787,51 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n-            else_block: else_block,\n+            block,\n+            else_block,\n             label: None,\n-            pat: pat,\n+            pat,\n             keyword: \"if\",\n             matcher: match pat {\n                 Some(..) => \"let\",\n                 None => \"\",\n             },\n             connector: \" =\",\n-            allow_single_line: allow_single_line,\n-            nested_if: nested_if,\n-            span: span,\n+            allow_single_line,\n+            nested_if,\n+            span,\n         }\n     }\n \n-    fn new_loop(\n-        block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n-        span: Span,\n-    ) -> ControlFlow<'a> {\n+    fn new_loop(block: &'a ast::Block, label: Option<ast::Label>, span: Span) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: None,\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n+            label,\n             pat: None,\n             keyword: \"loop\",\n             matcher: \"\",\n             connector: \"\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n     fn new_while(\n         pat: Option<&'a ast::Pat>,\n         cond: &'a ast::Expr,\n         block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n+        label: Option<ast::Label>,\n         span: Span,\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n-            pat: pat,\n+            label,\n+            pat,\n             keyword: \"while\",\n             matcher: match pat {\n                 Some(..) => \"let\",\n@@ -836,29 +840,29 @@ impl<'a> ControlFlow<'a> {\n             connector: \" =\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n     fn new_for(\n         pat: &'a ast::Pat,\n         cond: &'a ast::Expr,\n         block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n+        label: Option<ast::Label>,\n         span: Span,\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n+            label,\n             pat: Some(pat),\n             keyword: \"for\",\n             matcher: \"\",\n             connector: \" in\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -1166,9 +1170,9 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     }\n }\n \n-fn rewrite_label(label: Option<ast::SpannedIdent>) -> Cow<'static, str> {\n-    match label {\n-        Some(ident) => Cow::from(format!(\"{}: \", ident.node)),\n+fn rewrite_label(opt_label: Option<ast::Label>) -> Cow<'static, str> {\n+    match opt_label {\n+        Some(label) => Cow::from(format!(\"{}: \", label.ident)),\n         None => Cow::from(\"\"),\n     }\n }\n@@ -1484,7 +1488,7 @@ fn rewrite_match_pattern(\n         )\n     };\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \" |\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: context.config.binop_separator(),\n@@ -1988,7 +1992,7 @@ where\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if force_trailing_comma {\n             SeparatorTactic::Always\n@@ -2565,9 +2569,13 @@ pub fn rewrite_field(\n     if contains_skip(&field.attrs) {\n         return Some(context.snippet(field.span()).to_owned());\n     }\n-    let name = &field.ident.node.to_string();\n+    let mut attrs_str = field.attrs.rewrite(context, shape)?;\n+    if !attrs_str.is_empty() {\n+        attrs_str.push_str(&format!(\"\\n{}\", shape.indent.to_string(context.config)));\n+    };\n+    let name = field.ident.node.to_string();\n     if field.is_shorthand {\n-        Some(name.to_string())\n+        Some(attrs_str + &name)\n     } else {\n         let mut separator = String::from(struct_lit_field_separator(context.config));\n         for _ in 0..prefix_max_width.checked_sub(name.len()).unwrap_or(0) {\n@@ -2577,12 +2585,10 @@ pub fn rewrite_field(\n         let expr_shape = shape.offset_left(overhead)?;\n         let expr = field.expr.rewrite(context, expr_shape);\n \n-        let mut attrs_str = field.attrs.rewrite(context, shape)?;\n-        if !attrs_str.is_empty() {\n-            attrs_str.push_str(&format!(\"\\n{}\", shape.indent.to_string(context.config)));\n-        };\n-\n         match expr {\n+            Some(ref e) if e.as_str() == name && context.config.use_field_init_shorthand() => {\n+                Some(attrs_str + &name)\n+            }\n             Some(e) => Some(format!(\"{}{}{}{}\", attrs_str, name, separator, e)),\n             None => {\n                 let expr_offset = shape.indent.block_indent(context.config);\n@@ -2671,11 +2677,11 @@ where\n         nested_shape.width,\n     );\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: false,\n         preserve_newline: false,\n         config: context.config,", "previous_filename": "src/expr.rs"}, {"sha": "ee2253043a12deffbfce61f0d5be66cfa3f52624", "filename": "rustfmt-core/src/filemap.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Ffilemap.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -19,10 +19,7 @@ use config::{Config, NewlineStyle, WriteMode};\n use rustfmt_diff::{make_diff, output_modified, print_diff, Mismatch};\n use syntax::codemap::FileName;\n \n-// A map of the files of a crate, with their new content\n-pub type FileMap = Vec<FileRecord>;\n-\n-pub type FileRecord = (FileName, String);\n+use FileRecord;\n \n // Append a newline to the end of each file.\n pub fn append_newline(s: &mut String) {", "previous_filename": "src/filemap.rs"}, {"sha": "31ff4229ae2073a9f373c0945d248085abf32bef", "filename": "rustfmt-core/src/imports.rs", "status": "renamed", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fimports.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -10,14 +10,14 @@\n \n use std::cmp::Ordering;\n \n+use config::lists::*;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n use codemap::SpanUtils;\n use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;\n-use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, Separator, SeparatorPlace, SeparatorTactic};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n@@ -105,10 +105,13 @@ fn compare_use_trees(a: &ast::UseTree, b: &ast::UseTree, nested: bool) -> Orderi\n     }\n }\n \n-fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n+fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n     match (&a.node, &b.node) {\n+        (&ast::ItemKind::Mod(..), &ast::ItemKind::Mod(..)) => {\n+            a.ident.name.as_str().cmp(&b.ident.name.as_str())\n+        }\n         (&ast::ItemKind::Use(ref a_tree), &ast::ItemKind::Use(ref b_tree)) => {\n-            Some(compare_use_trees(a_tree, b_tree, false))\n+            compare_use_trees(a_tree, b_tree, false)\n         }\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n@@ -119,20 +122,19 @@ fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n                 b_name.map_or_else(|| b.ident.name.as_str(), |symbol| symbol.as_str());\n             let result = a_orig_name.cmp(&b_orig_name);\n             if result != Ordering::Equal {\n-                return Some(result);\n+                return result;\n             }\n \n             // `extern crate foo as bar;`\n             //                      ^^^ Comparing this.\n-            let result = match (a_name, b_name) {\n+            match (a_name, b_name) {\n                 (Some(..), None) => Ordering::Greater,\n                 (None, Some(..)) => Ordering::Less,\n                 (None, None) => Ordering::Equal,\n-                (Some(..), Some(..)) => a.ident.name.cmp(&b.ident.name),\n-            };\n-            Some(result)\n+                (Some(..), Some(..)) => a.ident.name.as_str().cmp(&b.ident.name.as_str()),\n+            }\n         }\n-        _ => None,\n+        _ => unreachable!(),\n     }\n }\n \n@@ -232,6 +234,16 @@ fn rewrite_import(\n     }\n }\n \n+/// Rewrite an inline mod.\n+fn rewrite_mod(item: &ast::Item) -> String {\n+    let mut result = String::with_capacity(32);\n+    result.push_str(&*format_visibility(&item.vis));\n+    result.push_str(\"mod \");\n+    result.push_str(&item.ident.to_string());\n+    result.push(';');\n+    result\n+}\n+\n fn rewrite_imports(\n     context: &RewriteContext,\n     use_items: &[&ast::Item],\n@@ -246,19 +258,21 @@ fn rewrite_imports(\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| {\n-            let attrs_str = item.attrs.rewrite(context, shape)?;\n+            let attrs = ::visitor::filter_inline_attrs(&item.attrs, item.span());\n+            let attrs_str = attrs.rewrite(context, shape)?;\n \n-            let missed_span = if item.attrs.is_empty() {\n+            let missed_span = if attrs.is_empty() {\n                 mk_sp(item.span.lo(), item.span.lo())\n             } else {\n-                mk_sp(item.attrs.last().unwrap().span.hi(), item.span.lo())\n+                mk_sp(attrs.last().unwrap().span.hi(), item.span.lo())\n             };\n \n             let item_str = match item.node {\n                 ast::ItemKind::Use(ref tree) => {\n                     rewrite_import(context, &item.vis, tree, &item.attrs, shape)?\n                 }\n                 ast::ItemKind::ExternCrate(..) => rewrite_extern_crate(context, item)?,\n+                ast::ItemKind::Mod(..) => rewrite_mod(item),\n                 _ => return None,\n             };\n \n@@ -276,15 +290,15 @@ fn rewrite_imports(\n         false,\n     );\n     let mut item_pair_vec: Vec<_> = items.zip(use_items.iter()).collect();\n-    item_pair_vec.sort_by(|a, b| compare_use_items(a.1, b.1).unwrap());\n+    item_pair_vec.sort_by(|a, b| compare_use_items(a.1, b.1));\n     let item_vec: Vec<_> = item_pair_vec.into_iter().map(|pair| pair.0).collect();\n \n     let fmt = ListFormatting {\n         tactic: DefinitiveListTactic::Vertical,\n         separator: \"\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: true,\n         preserve_newline: false,\n         config: context.config,\n@@ -537,7 +551,7 @@ fn rewrite_nested_use_tree(\n         && tactic != DefinitiveListTactic::Horizontal;\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if ends_with_newline {\n             context.config.trailing_comma()\n@@ -546,7 +560,7 @@ fn rewrite_nested_use_tree(\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n-        ends_with_newline: ends_with_newline,\n+        ends_with_newline,\n         preserve_newline: true,\n         config: context.config,\n     };", "previous_filename": "src/imports.rs"}, {"sha": "353f8349d2a15ef624782d632e059925638d7c9b", "filename": "rustfmt-core/src/issues.rs", "status": "renamed", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fissues.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -14,17 +14,15 @@\n \n use std::fmt;\n \n-pub use config::ReportTactic;\n+use config::ReportTactic;\n \n const TO_DO_CHARS: &[char] = &['t', 'o', 'd', 'o'];\n const FIX_ME_CHARS: &[char] = &['f', 'i', 'x', 'm', 'e'];\n \n // Enabled implementation detail is here because it is\n // irrelevant outside the issues module\n-impl ReportTactic {\n-    fn is_enabled(&self) -> bool {\n-        *self != ReportTactic::Never\n-    }\n+fn is_enabled(report_tactic: ReportTactic) -> bool {\n+    report_tactic != ReportTactic::Never\n }\n \n #[derive(Clone, Copy)]\n@@ -90,8 +88,8 @@ impl BadIssueSeeker {\n                 todo_idx: 0,\n                 fixme_idx: 0,\n             },\n-            report_todo: report_todo,\n-            report_fixme: report_fixme,\n+            report_todo,\n+            report_fixme,\n         }\n     }\n \n@@ -128,7 +126,7 @@ impl BadIssueSeeker {\n \n     fn inspect_issue(&mut self, c: char, mut todo_idx: usize, mut fixme_idx: usize) -> Seeking {\n         if let Some(lower_case_c) = c.to_lowercase().next() {\n-            if self.report_todo.is_enabled() && lower_case_c == TO_DO_CHARS[todo_idx] {\n+            if is_enabled(self.report_todo) && lower_case_c == TO_DO_CHARS[todo_idx] {\n                 todo_idx += 1;\n                 if todo_idx == TO_DO_CHARS.len() {\n                     return Seeking::Number {\n@@ -144,7 +142,7 @@ impl BadIssueSeeker {\n                     };\n                 }\n                 fixme_idx = 0;\n-            } else if self.report_fixme.is_enabled() && lower_case_c == FIX_ME_CHARS[fixme_idx] {\n+            } else if is_enabled(self.report_fixme) && lower_case_c == FIX_ME_CHARS[fixme_idx] {\n                 // Exploit the fact that the character sets of todo and fixme\n                 // are disjoint by adding else.\n                 fixme_idx += 1;\n@@ -169,8 +167,8 @@ impl BadIssueSeeker {\n         }\n \n         Seeking::Issue {\n-            todo_idx: todo_idx,\n-            fixme_idx: fixme_idx,\n+            todo_idx,\n+            fixme_idx,\n         }\n     }\n \n@@ -213,10 +211,7 @@ impl BadIssueSeeker {\n             NumberPart::CloseParen => {}\n         }\n \n-        self.state = Seeking::Number {\n-            part: part,\n-            issue: issue,\n-        };\n+        self.state = Seeking::Number { part, issue };\n \n         IssueClassification::None\n     }", "previous_filename": "src/issues.rs"}, {"sha": "9f3b0a1e6b2efe6b5921662a4c62088349fbece0", "filename": "rustfmt-core/src/items.rs", "status": "renamed", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fitems.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -13,6 +13,7 @@\n use std::borrow::Cow;\n use std::cmp::min;\n \n+use config::lists::*;\n use syntax::{abi, ast, ptr, symbol};\n use syntax::ast::{CrateSugar, ImplItem};\n use syntax::codemap::{BytePos, Span};\n@@ -24,8 +25,7 @@ use comment::{combine_strs_with_missing_comments, contains_comment, recover_comm\n use config::{BraceStyle, Config, Density, IndentStyle};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n-use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n@@ -138,7 +138,7 @@ impl<'a> Item<'a> {\n                 .iter()\n                 .map(|i| BodyElement::ForeignItem(i))\n                 .collect(),\n-            span: span,\n+            span,\n         }\n     }\n }\n@@ -169,8 +169,8 @@ impl<'a> FnSig<'a> {\n         vis: ast::Visibility,\n     ) -> FnSig<'a> {\n         FnSig {\n-            decl: decl,\n-            generics: generics,\n+            decl,\n+            generics,\n             abi: abi::Abi::Rust,\n             constness: ast::Constness::NotConst,\n             defaultness: ast::Defaultness::Final,\n@@ -189,7 +189,7 @@ impl<'a> FnSig<'a> {\n             defaultness: ast::Defaultness::Final,\n             abi: method_sig.abi,\n             decl: &*method_sig.decl,\n-            generics: generics,\n+            generics,\n             visibility: ast::Visibility::Inherited,\n         }\n     }\n@@ -202,12 +202,12 @@ impl<'a> FnSig<'a> {\n     ) -> FnSig<'a> {\n         match *fn_kind {\n             visit::FnKind::ItemFn(_, unsafety, constness, abi, visibility, _) => FnSig {\n-                decl: decl,\n-                generics: generics,\n-                abi: abi,\n+                decl,\n+                generics,\n+                abi,\n                 constness: constness.node,\n                 defaultness: defualtness,\n-                unsafety: unsafety,\n+                unsafety,\n                 visibility: visibility.clone(),\n             },\n             visit::FnKind::Method(_, method_sig, vis, _) => {\n@@ -504,13 +504,13 @@ impl<'a> FmtVisitor<'a> {\n             items = itemize_list_with(0);\n         }\n \n-        let shape = self.shape().sub_width(2).unwrap();\n+        let shape = self.shape().sub_width(2)?;\n         let fmt = ListFormatting {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n             trailing_separator: self.config.trailing_comma(),\n             separator_place: SeparatorPlace::Back,\n-            shape: shape,\n+            shape,\n             ends_with_newline: true,\n             preserve_newline: true,\n             config: self.config,\n@@ -558,14 +558,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n         };\n \n-        combine_strs_with_missing_comments(\n-            &context,\n-            &attrs_str,\n-            &variant_body,\n-            span,\n-            shape,\n-            is_attributes_extendable(&attrs_str),\n-        )\n+        combine_strs_with_missing_comments(&context, &attrs_str, &variant_body, span, shape, false)\n     }\n }\n \n@@ -895,10 +888,10 @@ impl<'a> StructParts<'a> {\n             _ => unreachable!(),\n         };\n         StructParts {\n-            prefix: prefix,\n+            prefix,\n             ident: item.ident,\n             vis: &item.vis,\n-            def: def,\n+            def,\n             generics: Some(generics),\n             span: item.span,\n         }\n@@ -1509,11 +1502,11 @@ impl<'a> StaticParts<'a> {\n             _ => unreachable!(),\n         };\n         StaticParts {\n-            prefix: prefix,\n+            prefix,\n             vis: &item.vis,\n             ident: item.ident,\n-            ty: ty,\n-            mutability: mutability,\n+            ty,\n+            mutability,\n             expr_opt: Some(expr),\n             defaultness: None,\n             span: item.span,\n@@ -1529,7 +1522,7 @@ impl<'a> StaticParts<'a> {\n             prefix: \"const\",\n             vis: &ast::Visibility::Inherited,\n             ident: ti.ident,\n-            ty: ty,\n+            ty,\n             mutability: ast::Mutability::Immutable,\n             expr_opt: expr_opt.as_ref(),\n             defaultness: None,\n@@ -1546,7 +1539,7 @@ impl<'a> StaticParts<'a> {\n             prefix: \"const\",\n             vis: &ii.vis,\n             ident: ii.ident,\n-            ty: ty,\n+            ty,\n             mutability: ast::Mutability::Immutable,\n             expr_opt: Some(expr),\n             defaultness: Some(ii.defaultness),\n@@ -1818,7 +1811,7 @@ fn rewrite_fn_base(\n     let one_line_budget = context.budget(used_width + overhead);\n     let shape = Shape {\n         width: one_line_budget,\n-        indent: indent,\n+        indent,\n         offset: used_width,\n     };\n     let fd = fn_sig.decl;\n@@ -2085,8 +2078,8 @@ struct WhereClauseOption {\n impl WhereClauseOption {\n     pub fn new(suppress_comma: bool, snuggle: bool) -> WhereClauseOption {\n         WhereClauseOption {\n-            suppress_comma: suppress_comma,\n-            snuggle: snuggle,\n+            suppress_comma,\n+            snuggle,\n             compress_where: false,\n         }\n     }\n@@ -2233,7 +2226,7 @@ fn rewrite_args(\n     debug!(\"rewrite_args: budget: {}, tactic: {:?}\", budget, tactic);\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if variadic {\n             SeparatorTactic::Never\n@@ -2404,15 +2397,15 @@ where\n         one_line_budget,\n     );\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if context.config.indent_style() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n         preserve_newline: true,\n         config: context.config,\n@@ -2637,7 +2630,7 @@ fn rewrite_where_clause(\n     }\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: comma_tactic,\n         separator_place: SeparatorPlace::Back,", "previous_filename": "src/items.rs"}, {"sha": "e53db8a4b464405f132d4efcf84d1ea841cb8f31", "filename": "rustfmt-core/src/lib.rs", "status": "renamed", "additions": 42, "deletions": 31, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Flib.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(decl_macro)]\n #![feature(match_default_bindings)]\n-#![feature(rustc_private)]\n #![feature(type_ascription)]\n \n #[macro_use]\n@@ -19,10 +19,7 @@ extern crate diff;\n extern crate log;\n extern crate regex;\n extern crate rustc_errors as errors;\n-extern crate serde;\n-#[macro_use]\n-extern crate serde_derive;\n-extern crate serde_json;\n+extern crate rustfmt_config as config;\n extern crate syntax;\n extern crate term;\n extern crate unicode_segmentation;\n@@ -44,43 +41,44 @@ use syntax::parse::{self, ParseSess};\n \n use checkstyle::{output_footer, output_header};\n use comment::{CharClasses, FullCodeCharKind};\n-pub use config::Config;\n-use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n use shape::Indent;\n use utils::use_colored_tty;\n use visitor::{FmtVisitor, SnippetProvider};\n \n-pub use self::summary::Summary;\n+pub use config::Config;\n+pub use config::summary::Summary;\n \n #[macro_use]\n mod utils;\n-mod shape;\n-mod spanned;\n-pub mod config;\n-pub mod codemap;\n-pub mod filemap;\n-pub mod file_lines;\n-pub mod visitor;\n+mod chains;\n mod checkstyle;\n mod closures;\n-mod items;\n-mod missed_spans;\n-mod lists;\n-mod types;\n+pub mod codemap;\n+mod comment;\n mod expr;\n+pub mod filemap;\n mod imports;\n mod issues;\n-mod rewrite;\n-mod string;\n-mod comment;\n-pub mod modules;\n-pub mod rustfmt_diff;\n-mod chains;\n+mod items;\n+mod lists;\n mod macros;\n+mod missed_spans;\n+pub mod modules;\n mod patterns;\n-mod summary;\n+mod rewrite;\n+pub mod rustfmt_diff;\n+mod shape;\n+mod spanned;\n+mod string;\n+mod types;\n mod vertical;\n+pub mod visitor;\n+\n+// A map of the files of a crate, with their new content\n+pub type FileMap = Vec<FileRecord>;\n+\n+pub type FileRecord = (FileName, String);\n \n #[derive(Clone, Copy)]\n pub enum ErrorKind {\n@@ -165,7 +163,7 @@ impl FormatReport {\n         self.file_error_map\n             .iter()\n             .map(|(_, errors)| errors.len())\n-            .fold(0, |acc, x| acc + x)\n+            .sum()\n     }\n \n     pub fn has_warnings(&self) -> bool {\n@@ -448,7 +446,7 @@ fn format_lines(\n                         line: cur_line,\n                         kind: error_kind,\n                         is_comment: kind.is_comment(),\n-                        is_string: is_string,\n+                        is_string,\n                         line_buffer: line_buffer.clone(),\n                     });\n                 }\n@@ -463,7 +461,7 @@ fn format_lines(\n             is_string = false;\n         } else {\n             newline_count = 0;\n-            line_len += 1;\n+            line_len += if c == '\\t' { config.tab_spaces() } else { 1 };\n             if c.is_whitespace() {\n                 if last_wspace.is_none() {\n                     last_wspace = Some(b);\n@@ -570,7 +568,12 @@ pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String>\n                     let indent_str =\n                         Indent::from_width(config, config.tab_spaces()).to_string(config);\n                     if line.starts_with(indent_str.as_ref()) {\n-                        &line[config.tab_spaces()..]\n+                        let offset = if config.hard_tabs() {\n+                            1\n+                        } else {\n+                            config.tab_spaces()\n+                        };\n+                        &line[offset..]\n                     } else {\n                         line\n                     }\n@@ -605,10 +608,17 @@ pub fn format_input<T: Write>(\n             Box::new(Vec::new()),\n             Some(codemap.clone()),\n             false,\n+            false,\n         ));\n         Handler::with_emitter(true, false, silent_emitter)\n     } else {\n-        Handler::with_tty_emitter(ColorConfig::Auto, true, false, Some(codemap.clone()))\n+        let supports_color = term::stderr().map_or(false, |term| term.supports_color());\n+        let color_cfg = if supports_color {\n+            ColorConfig::Auto\n+        } else {\n+            ColorConfig::Never\n+        };\n+        Handler::with_tty_emitter(color_cfg, true, false, Some(codemap.clone()))\n     };\n     let mut parse_session = ParseSess::with_span_handler(tty_handler, codemap.clone());\n \n@@ -639,6 +649,7 @@ pub fn format_input<T: Write>(\n         Box::new(Vec::new()),\n         Some(codemap.clone()),\n         false,\n+        false,\n     ));\n     parse_session.span_diagnostic = Handler::with_emitter(true, false, silent_emitter);\n ", "previous_filename": "src/lib.rs"}, {"sha": "a67088042c8a8a14988a94764fb7ed6b7790edbe", "filename": "rustfmt-core/src/lists.rs", "status": "renamed", "additions": 19, "deletions": 107, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Flists.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Format list-like expressions and items.\n+\n use std::cmp;\n use std::iter::Peekable;\n \n+use config::lists::*;\n use syntax::codemap::{BytePos, CodeMap};\n \n use comment::{find_comment_end, rewrite_comment, FindUncommented};\n@@ -19,44 +22,6 @@ use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n use utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline};\n \n-/// Formatting tactic for lists. This will be cast down to a\n-/// `DefinitiveListTactic` depending on the number and length of the items and\n-/// their comments.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n-pub enum ListTactic {\n-    // One item per row.\n-    Vertical,\n-    // All items on one row.\n-    Horizontal,\n-    // Try Horizontal layout, if that fails then vertical.\n-    HorizontalVertical,\n-    // HorizontalVertical with a soft limit of n characters.\n-    LimitedHorizontalVertical(usize),\n-    // Pack as many items as possible per row over (possibly) many rows.\n-    Mixed,\n-}\n-\n-impl_enum_serialize_and_deserialize!(ListTactic, Vertical, Horizontal, HorizontalVertical, Mixed);\n-\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n-pub enum SeparatorTactic {\n-    Always,\n-    Never,\n-    Vertical,\n-}\n-\n-impl_enum_serialize_and_deserialize!(SeparatorTactic, Always, Never, Vertical);\n-\n-impl SeparatorTactic {\n-    pub fn from_bool(b: bool) -> SeparatorTactic {\n-        if b {\n-            SeparatorTactic::Always\n-        } else {\n-            SeparatorTactic::Never\n-        }\n-    }\n-}\n-\n pub struct ListFormatting<'a> {\n     pub tactic: DefinitiveListTactic,\n     pub separator: &'a str,\n@@ -154,25 +119,6 @@ impl ListItem {\n     }\n }\n \n-/// The definitive formatting tactic for lists.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n-pub enum DefinitiveListTactic {\n-    Vertical,\n-    Horizontal,\n-    Mixed,\n-    /// Special case tactic for `format!()`, `write!()` style macros.\n-    SpecialMacro(usize),\n-}\n-\n-impl DefinitiveListTactic {\n-    pub fn ends_with_newline(&self, indent_style: IndentStyle) -> bool {\n-        match indent_style {\n-            IndentStyle::Block => *self != DefinitiveListTactic::Horizontal,\n-            IndentStyle::Visual => false,\n-        }\n-    }\n-}\n-\n /// The type of separator for lists.\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n pub enum Separator {\n@@ -191,40 +137,6 @@ impl Separator {\n     }\n }\n \n-/// Where to put separator.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n-pub enum SeparatorPlace {\n-    Front,\n-    Back,\n-}\n-\n-impl_enum_serialize_and_deserialize!(SeparatorPlace, Front, Back);\n-\n-impl SeparatorPlace {\n-    pub fn is_front(&self) -> bool {\n-        *self == SeparatorPlace::Front\n-    }\n-\n-    pub fn is_back(&self) -> bool {\n-        *self == SeparatorPlace::Back\n-    }\n-\n-    pub fn from_tactic(\n-        default: SeparatorPlace,\n-        tactic: DefinitiveListTactic,\n-        sep: &str,\n-    ) -> SeparatorPlace {\n-        match tactic {\n-            DefinitiveListTactic::Vertical => default,\n-            _ => if sep == \",\" {\n-                SeparatorPlace::Back\n-            } else {\n-                default\n-            },\n-        }\n-    }\n-}\n-\n pub fn definitive_tactic<I, T>(\n     items: I,\n     tactic: ListTactic,\n@@ -690,15 +602,15 @@ where\n             };\n \n             ListItem {\n-                pre_comment: pre_comment,\n-                pre_comment_style: pre_comment_style,\n+                pre_comment,\n+                pre_comment_style,\n                 item: if self.inner.peek().is_none() && self.leave_last {\n                     None\n                 } else {\n                     (self.get_item_string)(&item)\n                 },\n-                post_comment: post_comment,\n-                new_lines: new_lines,\n+                post_comment,\n+                new_lines,\n             }\n         })\n     }\n@@ -724,16 +636,16 @@ where\n     F3: Fn(&T) -> Option<String>,\n {\n     ListItems {\n-        codemap: codemap,\n+        codemap,\n         inner: inner.peekable(),\n-        get_lo: get_lo,\n-        get_hi: get_hi,\n-        get_item_string: get_item_string,\n-        prev_span_end: prev_span_end,\n-        next_span_start: next_span_start,\n-        terminator: terminator,\n-        separator: separator,\n-        leave_last: leave_last,\n+        get_lo,\n+        get_hi,\n+        get_item_string,\n+        prev_span_end,\n+        next_span_start,\n+        terminator,\n+        separator,\n+        leave_last,\n     }\n }\n \n@@ -841,16 +753,16 @@ pub fn struct_lit_formatting<'a>(\n     let ends_with_newline = context.config.indent_style() != IndentStyle::Visual\n         && tactic == DefinitiveListTactic::Vertical;\n     ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if force_no_trailing_comma {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n-        ends_with_newline: ends_with_newline,\n+        shape,\n+        ends_with_newline,\n         preserve_newline: true,\n         config: context.config,\n     }", "previous_filename": "src/lists.rs"}, {"sha": "535a82c81de471fabf450e65219b8fad0a32406c", "filename": "rustfmt-core/src/macros.rs", "status": "renamed", "additions": 168, "deletions": 81, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fmacros.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -20,6 +20,8 @@\n // and those with brackets will be formatted as array literals.\n \n use std::collections::HashMap;\n+\n+use config::lists::*;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n use syntax::parse::new_parser_from_tts;\n@@ -33,6 +35,7 @@ use syntax::util::ThinVec;\n use codemap::SpanUtils;\n use comment::{contains_comment, remove_trailing_white_spaces, FindUncommented};\n use expr::{rewrite_array, rewrite_call_inner};\n+use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use utils::{format_visibility, mk_sp};\n@@ -101,7 +104,7 @@ fn parse_macro_arg(parser: &mut Parser) -> Option<MacroArg> {\n                     parser.sess.span_diagnostic.reset_err_count();\n                 }\n             }\n-        }\n+        };\n     }\n \n     parse_macro_arg!(Expr, parse_expr);\n@@ -283,6 +286,7 @@ pub fn rewrite_macro(\n \n pub fn rewrite_macro_def(\n     context: &RewriteContext,\n+    shape: Shape,\n     indent: Indent,\n     def: &ast::MacroDef,\n     ident: ast::Ident,\n@@ -291,93 +295,75 @@ pub fn rewrite_macro_def(\n ) -> Option<String> {\n     let snippet = Some(remove_trailing_white_spaces(context.snippet(span)));\n \n-    if def.legacy {\n-        return snippet;\n-    }\n-\n     let mut parser = MacroParser::new(def.stream().into_trees());\n-    let mut parsed_def = match parser.parse() {\n+    let parsed_def = match parser.parse() {\n         Some(def) => def,\n         None => return snippet,\n     };\n \n-    // Only attempt to format function-like macros.\n-    if parsed_def.branches.len() != 1 || parsed_def.branches[0].args_paren_kind != DelimToken::Paren\n-    {\n-        // FIXME(#1539): implement for non-sugared macros.\n-        return snippet;\n-    }\n-\n-    let branch = parsed_def.branches.remove(0);\n-    let args_str = format_macro_args(branch.args)?;\n+    let mut result = if def.legacy {\n+        String::from(\"macro_rules!\")\n+    } else {\n+        format!(\"{}macro\", format_visibility(vis))\n+    };\n \n-    // The macro body is the most interesting part. It might end up as various\n-    // AST nodes, but also has special variables (e.g, `$foo`) which can't be\n-    // parsed as regular Rust code (and note that these can be escaped using\n-    // `$$`). We'll try and format like an AST node, but we'll substitute\n-    // variables for new names with the same length first.\n+    result += \" \";\n+    result += &ident.name.as_str();\n \n-    let old_body = context.snippet(branch.body).trim();\n-    let (body_str, substs) = replace_names(old_body);\n+    let multi_branch_style = def.legacy || parsed_def.branches.len() != 1;\n \n-    // We'll hack the indent below, take this into account when formatting,\n-    let mut config = context.config.clone();\n-    let new_width = config.max_width() - indent.block_indent(&config).width();\n-    config.set().max_width(new_width);\n-    config.set().hide_parse_errors(true);\n+    let arm_shape = if multi_branch_style {\n+        shape\n+            .block_indent(context.config.tab_spaces())\n+            .with_max_width(context.config)\n+    } else {\n+        shape\n+    };\n \n-    // First try to format as items, then as statements.\n-    let new_body = match ::format_snippet(&body_str, &config) {\n-        Some(new_body) => new_body,\n-        None => match ::format_code_block(&body_str, &config) {\n-            Some(new_body) => new_body,\n-            None => return snippet,\n-        },\n+    let branch_items = itemize_list(\n+        context.codemap,\n+        parsed_def.branches.iter(),\n+        \"}\",\n+        \";\",\n+        |branch| branch.span.lo(),\n+        |branch| branch.span.hi(),\n+        |branch| branch.rewrite(context, arm_shape, multi_branch_style),\n+        context.codemap.span_after(span, \"{\"),\n+        span.hi(),\n+        false,\n+    ).collect::<Vec<_>>();\n+\n+    let fmt = ListFormatting {\n+        tactic: DefinitiveListTactic::Vertical,\n+        separator: if def.legacy { \";\" } else { \"\" },\n+        trailing_separator: SeparatorTactic::Always,\n+        separator_place: SeparatorPlace::Back,\n+        shape: arm_shape,\n+        ends_with_newline: true,\n+        preserve_newline: true,\n+        config: context.config,\n     };\n \n-    // Indent the body since it is in a block.\n-    let indent_str = indent.block_indent(&config).to_string(&config);\n-    let mut new_body = new_body\n-        .lines()\n-        .map(|l| {\n-            if l.is_empty() {\n-                l.to_owned()\n-            } else {\n-                format!(\"{}{}\", indent_str, l)\n-            }\n-        })\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n-\n-    // Undo our replacement of macro variables.\n-    // FIXME: this could be *much* more efficient.\n-    for (old, new) in substs.iter() {\n-        if old_body.find(new).is_some() {\n-            debug!(\n-                \"rewrite_macro_def: bailing matching variable: `{}` in `{}`\",\n-                new, ident\n-            );\n-            return snippet;\n-        }\n-        new_body = new_body.replace(new, old);\n+    if multi_branch_style {\n+        result += \" {\\n\";\n+        result += &arm_shape.indent.to_string(context.config);\n     }\n \n-    let result = format!(\n-        \"{}macro {}({}) {{\\n{}\\n{}}}\",\n-        format_visibility(vis),\n-        ident,\n-        args_str,\n-        new_body,\n-        indent.to_string(&context.config),\n-    );\n+    result += write_list(&branch_items, &fmt)?.as_str();\n+\n+    if multi_branch_style {\n+        result += \"\\n\";\n+        result += &indent.to_string(context.config);\n+        result += \"}\";\n+    }\n \n     Some(result)\n }\n \n // Replaces `$foo` with `zfoo`. We must check for name overlap to ensure we\n // aren't causing problems.\n // This should also work for escaped `$` variables, where we leave earlier `$`s.\n-fn replace_names(input: &str) -> (String, HashMap<String, String>) {\n+fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n     // Each substitution will require five or six extra bytes.\n     let mut result = String::with_capacity(input.len() + 64);\n     let mut substs = HashMap::new();\n@@ -409,6 +395,9 @@ fn replace_names(input: &str) -> (String, HashMap<String, String>) {\n \n             dollar_count = 0;\n             cur_name = String::new();\n+        } else if c == '(' && cur_name.is_empty() {\n+            // FIXME: Support macro def with repeat.\n+            return None;\n         } else if c.is_alphanumeric() {\n             cur_name.push(c);\n         }\n@@ -433,7 +422,7 @@ fn replace_names(input: &str) -> (String, HashMap<String, String>) {\n \n     debug!(\"replace_names `{}` {:?}\", result, substs);\n \n-    (result, substs)\n+    Some((result, substs))\n }\n \n // This is a bit sketchy. The token rules probably need tweaking, but it works\n@@ -467,13 +456,10 @@ fn format_macro_args(toks: ThinTokenStream) -> Option<String> {\n                 insert_space = next_space(&t);\n             }\n             TokenTree::Delimited(_, d) => {\n-                let formatted = format_macro_args(d.tts)?;\n-                match insert_space {\n-                    SpaceState::Always => {\n-                        result.push(' ');\n-                    }\n-                    _ => {}\n+                if let SpaceState::Always = insert_space {\n+                    result.push(' ');\n                 }\n+                let formatted = format_macro_args(d.tts)?;\n                 match d.delim {\n                     DelimToken::Paren => {\n                         result.push_str(&format!(\"({})\", formatted));\n@@ -711,24 +697,34 @@ impl MacroParser {\n \n     // `(` ... `)` `=>` `{` ... `}`\n     fn parse_branch(&mut self) -> Option<MacroBranch> {\n-        let (args_paren_kind, args) = match self.toks.next()? {\n+        let tok = self.toks.next()?;\n+        let (lo, args_paren_kind) = match tok {\n             TokenTree::Token(..) => return None,\n-            TokenTree::Delimited(_, ref d) => (d.delim, d.tts.clone().into()),\n+            TokenTree::Delimited(sp, ref d) => (sp.lo(), d.delim),\n         };\n+        let args = tok.joint().into();\n         match self.toks.next()? {\n             TokenTree::Token(_, Token::FatArrow) => {}\n             _ => return None,\n         }\n-        let body = match self.toks.next()? {\n+        let (mut hi, body) = match self.toks.next()? {\n             TokenTree::Token(..) => return None,\n             TokenTree::Delimited(sp, _) => {\n                 let data = sp.data();\n-                Span::new(data.lo + BytePos(1), data.hi - BytePos(1), data.ctxt)\n+                (\n+                    data.hi,\n+                    Span::new(data.lo + BytePos(1), data.hi - BytePos(1), data.ctxt),\n+                )\n             }\n         };\n+        if let Some(TokenTree::Token(sp, Token::Semi)) = self.toks.look_ahead(0) {\n+            self.toks.next();\n+            hi = sp.hi();\n+        }\n         Some(MacroBranch {\n-            args,\n+            span: mk_sp(lo, hi),\n             args_paren_kind,\n+            args,\n             body,\n         })\n     }\n@@ -742,11 +738,102 @@ struct Macro {\n // FIXME: it would be more efficient to use references to the token streams\n // rather than clone them, if we can make the borrowing work out.\n struct MacroBranch {\n-    args: ThinTokenStream,\n+    span: Span,\n     args_paren_kind: DelimToken,\n+    args: ThinTokenStream,\n     body: Span,\n }\n \n+impl MacroBranch {\n+    fn rewrite(\n+        &self,\n+        context: &RewriteContext,\n+        shape: Shape,\n+        multi_branch_style: bool,\n+    ) -> Option<String> {\n+        // Only attempt to format function-like macros.\n+        if self.args_paren_kind != DelimToken::Paren {\n+            // FIXME(#1539): implement for non-sugared macros.\n+            return None;\n+        }\n+\n+        let mut result = format_macro_args(self.args.clone())?;\n+\n+        if multi_branch_style {\n+            result += \" =>\";\n+        }\n+\n+        // The macro body is the most interesting part. It might end up as various\n+        // AST nodes, but also has special variables (e.g, `$foo`) which can't be\n+        // parsed as regular Rust code (and note that these can be escaped using\n+        // `$$`). We'll try and format like an AST node, but we'll substitute\n+        // variables for new names with the same length first.\n+\n+        let old_body = context.snippet(self.body).trim();\n+        let (body_str, substs) = replace_names(old_body)?;\n+\n+        let mut config = context.config.clone();\n+        config.set().hide_parse_errors(true);\n+\n+        result += \" {\";\n+\n+        let has_block_body = old_body.starts_with('{');\n+\n+        let body_indent = if has_block_body {\n+            shape.indent\n+        } else {\n+            // We'll hack the indent below, take this into account when formatting,\n+            let body_indent = shape.indent.block_indent(&config);\n+            let new_width = config.max_width() - body_indent.width();\n+            config.set().max_width(new_width);\n+            body_indent\n+        };\n+\n+        // First try to format as items, then as statements.\n+        let new_body = match ::format_snippet(&body_str, &config) {\n+            Some(new_body) => new_body,\n+            None => match ::format_code_block(&body_str, &config) {\n+                Some(new_body) => new_body,\n+                None => return None,\n+            },\n+        };\n+\n+        // Indent the body since it is in a block.\n+        let indent_str = body_indent.to_string(&config);\n+        let mut new_body = new_body\n+            .trim_right()\n+            .lines()\n+            .fold(String::new(), |mut s, l| {\n+                if !l.is_empty() {\n+                    s += &indent_str;\n+                }\n+                s + l + \"\\n\"\n+            });\n+\n+        // Undo our replacement of macro variables.\n+        // FIXME: this could be *much* more efficient.\n+        for (old, new) in &substs {\n+            if old_body.find(new).is_some() {\n+                debug!(\"rewrite_macro_def: bailing matching variable: `{}`\", new);\n+                return None;\n+            }\n+            new_body = new_body.replace(new, old);\n+        }\n+\n+        if has_block_body {\n+            result += new_body.trim();\n+        } else if !new_body.is_empty() {\n+            result += \"\\n\";\n+            result += &new_body;\n+            result += &shape.indent.to_string(&config);\n+        }\n+\n+        result += \"}\";\n+\n+        Some(result)\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;", "previous_filename": "src/macros.rs"}, {"sha": "dff6b94bd756455dd88e76e0999352a1141d1f7f", "filename": "rustfmt-core/src/missed_spans.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fmissed_spans.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "src/missed_spans.rs"}, {"sha": "0f439910324e997429af6bb1a499b1426a7b8119", "filename": "rustfmt-core/src/modules.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fmodules.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "src/modules.rs"}, {"sha": "dc20a6644ff596ac7844edc9fabf9ddf4cdb3c8d", "filename": "rustfmt-core/src/patterns.rs", "status": "renamed", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fpatterns.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use config::lists::*;\n use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::codemap::{self, BytePos, Span};\n use syntax::ptr;\n@@ -17,7 +18,7 @@ use comment::FindUncommented;\n use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,\n            wrap_struct_field, PairParts};\n use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n-            struct_lit_tactic, write_list, DefinitiveListTactic, SeparatorPlace, SeparatorTactic};\n+            struct_lit_tactic, write_list};\n use macros::{rewrite_macro, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n@@ -65,10 +66,15 @@ impl Rewrite for Pat {\n                     RangeEnd::Included(RangeSyntax::DotDotEq) => \"..=\",\n                     RangeEnd::Excluded => \"..\",\n                 };\n+                let infix = if context.config.spaces_around_ranges() {\n+                    format!(\" {} \", infix)\n+                } else {\n+                    infix.to_owned()\n+                };\n                 rewrite_pair(\n                     &**lhs,\n                     &**rhs,\n-                    PairParts::new(\"\", infix, \"\"),\n+                    PairParts::new(\"\", &infix, \"\"),\n                     context,\n                     shape,\n                     SeparatorPlace::Front,", "previous_filename": "src/patterns.rs"}, {"sha": "708e31d86dd9e3d0875b2566ae8e3ea6908d81eb", "filename": "rustfmt-core/src/rewrite.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Frewrite.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "src/rewrite.rs"}, {"sha": "f99191576209b401c52be3c9ab15c6267439afe7", "filename": "rustfmt-core/src/rustfmt_diff.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Frustfmt_diff.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -36,8 +36,8 @@ pub struct Mismatch {\n impl Mismatch {\n     fn new(line_number: u32, line_number_orig: u32) -> Mismatch {\n         Mismatch {\n-            line_number: line_number,\n-            line_number_orig: line_number_orig,\n+            line_number,\n+            line_number_orig,\n             lines: Vec::new(),\n         }\n     }", "previous_filename": "src/rustfmt_diff.rs"}, {"sha": "8fe2e2b18c0b1e7b653a6ad485041fd0ffc1e98d", "filename": "rustfmt-core/src/shape.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fshape.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -29,8 +29,8 @@ const INDENT_BUFFER: &str =\n impl Indent {\n     pub fn new(block_indent: usize, alignment: usize) -> Indent {\n         Indent {\n-            block_indent: block_indent,\n-            alignment: alignment,\n+            block_indent,\n+            alignment,\n         }\n     }\n \n@@ -161,16 +161,16 @@ impl Shape {\n     //        |<--->|    width\n     pub fn legacy(width: usize, indent: Indent) -> Shape {\n         Shape {\n-            width: width,\n-            indent: indent,\n+            width,\n+            indent,\n             offset: indent.alignment,\n         }\n     }\n \n     pub fn indented(indent: Indent, config: &Config) -> Shape {\n         Shape {\n             width: config.max_width().checked_sub(indent.width()).unwrap_or(0),\n-            indent: indent,\n+            indent,\n             offset: indent.alignment,\n         }\n     }\n@@ -187,9 +187,9 @@ impl Shape {\n \n     pub fn offset(width: usize, indent: Indent, offset: usize) -> Shape {\n         Shape {\n-            width: width,\n-            indent: indent,\n-            offset: offset,\n+            width,\n+            indent,\n+            offset,\n         }\n     }\n ", "previous_filename": "src/shape.rs"}, {"sha": "a431f3a544a6e39e23a30a9c89bf93013765e3c4", "filename": "rustfmt-core/src/spanned.rs", "status": "renamed", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fspanned.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -20,32 +20,30 @@ pub trait Spanned {\n }\n \n macro_rules! span_with_attrs_lo_hi {\n-    ($this:ident, $lo:expr, $hi:expr) => {\n-        {\n-            let attrs = outer_attributes(&$this.attrs);\n-            if attrs.is_empty() {\n-                mk_sp($lo, $hi)\n-            } else {\n-                mk_sp(attrs[0].span.lo(), $hi)\n-            }\n+    ($this: ident, $lo: expr, $hi: expr) => {{\n+        let attrs = outer_attributes(&$this.attrs);\n+        if attrs.is_empty() {\n+            mk_sp($lo, $hi)\n+        } else {\n+            mk_sp(attrs[0].span.lo(), $hi)\n         }\n-    }\n+    }};\n }\n \n macro_rules! span_with_attrs {\n-    ($this:ident) => {\n+    ($this: ident) => {\n         span_with_attrs_lo_hi!($this, $this.span.lo(), $this.span.hi())\n-    }\n+    };\n }\n \n macro_rules! implement_spanned {\n-    ($this:ty) => {\n+    ($this: ty) => {\n         impl Spanned for $this {\n             fn span(&self) -> Span {\n                 span_with_attrs!(self)\n             }\n         }\n-    }\n+    };\n }\n \n // Implement `Spanned` for structs with `attrs` field.", "previous_filename": "src/spanned.rs"}, {"sha": "2386d90ec8af8e581f19f862b74f4d7530d638fb", "filename": "rustfmt-core/src/string.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fstring.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -36,9 +36,9 @@ impl<'a> StringFormat<'a> {\n             closer: \"\\\"\",\n             line_start: \" \",\n             line_end: \"\\\\\",\n-            shape: shape,\n+            shape,\n             trim_end: false,\n-            config: config,\n+            config,\n         }\n     }\n }", "previous_filename": "src/string.rs"}, {"sha": "f6f80ba312be08ce3e8fac43522f3013263aff4f", "filename": "rustfmt-core/src/types.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Ftypes.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -11,6 +11,7 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n+use config::lists::*;\n use syntax::ast::{self, FunctionRetTy, Mutability};\n use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n@@ -20,8 +21,7 @@ use codemap::SpanUtils;\n use config::{IndentStyle, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens, PairParts};\n use items::{format_generics_item_list, generics_shape_from_config};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n-            SeparatorPlace, SeparatorTactic};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use macros::{rewrite_macro, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n@@ -352,7 +352,7 @@ where\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if !context.use_block_indent() || variadic {\n             SeparatorTactic::Never", "previous_filename": "src/types.rs"}, {"sha": "d1bb7e26f5ee89e732e7f5483e2a8cbccdb8338b", "filename": "rustfmt-core/src/utils.rs", "status": "renamed", "additions": 11, "deletions": 86, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Futils.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -178,7 +178,7 @@ pub fn last_line_extendable(s: &str) -> bool {\n     }\n     for c in s.chars().rev() {\n         match c {\n-            ')' | ']' | '}' | '?' | '>' => continue,\n+            '(' | ')' | ']' | '}' | '?' | '>' => continue,\n             '\\n' => break,\n             _ if c.is_whitespace() => continue,\n             _ => return false,\n@@ -254,82 +254,6 @@ pub fn count_newlines(input: &str) -> usize {\n     input.chars().filter(|&c| c == '\\n').count()\n }\n \n-// Macro for deriving implementations of Serialize/Deserialize for enums\n-#[macro_export]\n-macro_rules! impl_enum_serialize_and_deserialize {\n-    ( $e:ident, $( $x:ident ),* ) => {\n-        impl ::serde::ser::Serialize for $e {\n-            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n-                where S: ::serde::ser::Serializer\n-            {\n-                use serde::ser::Error;\n-\n-                // We don't know whether the user of the macro has given us all options.\n-                #[allow(unreachable_patterns)]\n-                match *self {\n-                    $(\n-                        $e::$x => serializer.serialize_str(stringify!($x)),\n-                    )*\n-                    _ => {\n-                        Err(S::Error::custom(format!(\"Cannot serialize {:?}\", self)))\n-                    }\n-                }\n-            }\n-        }\n-\n-        impl<'de> ::serde::de::Deserialize<'de> for $e {\n-            fn deserialize<D>(d: D) -> Result<Self, D::Error>\n-                    where D: ::serde::Deserializer<'de> {\n-                use serde::de::{Error, Visitor};\n-                use std::marker::PhantomData;\n-                use std::fmt;\n-                struct StringOnly<T>(PhantomData<T>);\n-                impl<'de, T> Visitor<'de> for StringOnly<T>\n-                        where T: ::serde::Deserializer<'de> {\n-                    type Value = String;\n-                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-                        formatter.write_str(\"string\")\n-                    }\n-                    fn visit_str<E>(self, value: &str) -> Result<String, E> {\n-                        Ok(String::from(value))\n-                    }\n-                }\n-                let s = d.deserialize_string(StringOnly::<D>(PhantomData))?;\n-                $(\n-                    if stringify!($x).eq_ignore_ascii_case(&s) {\n-                      return Ok($e::$x);\n-                    }\n-                )*\n-                static ALLOWED: &'static[&str] = &[$(stringify!($x),)*];\n-                Err(D::Error::unknown_variant(&s, ALLOWED))\n-            }\n-        }\n-\n-        impl ::std::str::FromStr for $e {\n-            type Err = &'static str;\n-\n-            fn from_str(s: &str) -> Result<Self, Self::Err> {\n-                $(\n-                    if stringify!($x).eq_ignore_ascii_case(s) {\n-                        return Ok($e::$x);\n-                    }\n-                )*\n-                Err(\"Bad variant\")\n-            }\n-        }\n-\n-        impl ::config::ConfigType for $e {\n-            fn doc_hint() -> String {\n-                let mut variants = Vec::new();\n-                $(\n-                    variants.push(stringify!($x));\n-                )*\n-                format!(\"[{}]\", variants.join(\"|\"))\n-            }\n-        }\n-    };\n-}\n-\n macro_rules! msg {\n     ($($arg:tt)*) => (\n         match writeln!(&mut ::std::io::stderr(), $($arg)* ) {\n@@ -342,9 +266,9 @@ macro_rules! msg {\n // For format_missing and last_pos, need to use the source callsite (if applicable).\n // Required as generated code spans aren't guaranteed to follow on from the last span.\n macro_rules! source {\n-    ($this:ident, $sp: expr) => {\n+    ($this: ident, $sp: expr) => {\n         $sp.source_callsite()\n-    }\n+    };\n }\n \n pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n@@ -353,28 +277,29 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n \n // Return true if the given span does not intersect with file lines.\n macro_rules! out_of_file_lines_range {\n-    ($self:ident, $span:expr) => {\n-        !$self.config\n+    ($self: ident, $span: expr) => {\n+        !$self\n+            .config\n             .file_lines()\n             .intersects(&$self.codemap.lookup_line_range($span))\n-    }\n+    };\n }\n \n macro_rules! skip_out_of_file_lines_range {\n-    ($self:ident, $span:expr) => {\n+    ($self: ident, $span: expr) => {\n         if out_of_file_lines_range!($self, $span) {\n             return None;\n         }\n-    }\n+    };\n }\n \n macro_rules! skip_out_of_file_lines_range_visitor {\n-    ($self:ident, $span:expr) => {\n+    ($self: ident, $span: expr) => {\n         if out_of_file_lines_range!($self, $span) {\n             $self.push_rewrite($span, None);\n             return;\n         }\n-    }\n+    };\n }\n \n // Wraps String in an Option. Returns Some when the string adheres to the", "previous_filename": "src/utils.rs"}, {"sha": "e7fc03d41b1cf61cfc773a547c6cbc6d44fd554e", "filename": "rustfmt-core/src/vertical.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvertical.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -12,15 +12,15 @@\n \n use std::cmp;\n \n+use config::lists::*;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n use codemap::SpanUtils;\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n use items::{rewrite_struct_field, rewrite_struct_field_prefix};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n-            SeparatorPlace};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n@@ -247,7 +247,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: context.config.trailing_comma(),\n         separator_place: SeparatorPlace::Back,", "previous_filename": "src/vertical.rs"}, {"sha": "0a0d59d0f02c8db2bc99799d294c26b78d7a7e4e", "filename": "rustfmt-core/src/visitor.rs", "status": "renamed", "additions": 91, "deletions": 66, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvisitor.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -10,8 +10,9 @@\n \n use std::cmp;\n \n+use config::lists::*;\n use syntax::{ast, visit};\n-use syntax::attr::HasAttrs;\n+use syntax::attr::{self, HasAttrs};\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n@@ -23,29 +24,64 @@ use config::{BraceStyle, Config};\n use expr::rewrite_literal;\n use items::{format_impl, format_trait, format_trait_alias, rewrite_associated_impl_type,\n             rewrite_associated_type, rewrite_type_alias, FnSig, StaticParts, StructParts};\n-use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n-            SeparatorTactic};\n+use lists::{itemize_list, write_list, ListFormatting};\n use macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n+/// Returns attributes that are within `outer_span`.\n+pub fn filter_inline_attrs(attrs: &[ast::Attribute], outer_span: Span) -> Vec<ast::Attribute> {\n+    attrs\n+        .iter()\n+        .filter(|a| outer_span.lo() <= a.span.lo() && a.span.hi() <= outer_span.hi())\n+        .cloned()\n+        .collect()\n+}\n+\n+/// Returns true for `mod foo;`, false for `mod foo { .. }`.\n+fn is_mod_decl(item: &ast::Item) -> bool {\n+    match item.node {\n+        ast::ItemKind::Mod(ref m) => m.inner.hi() != item.span.hi(),\n+        _ => false,\n+    }\n+}\n+\n+fn contains_macro_use_attr(attrs: &[ast::Attribute], span: Span) -> bool {\n+    attr::contains_name(&filter_inline_attrs(attrs, span), \"macro_use\")\n+}\n+\n+/// Returns true for `mod foo;` without any inline attributes.\n+/// We cannot reorder modules with attributes because doing so can break the code.\n+/// e.g. `#[macro_use]`.\n+fn is_mod_decl_without_attr(item: &ast::Item) -> bool {\n+    is_mod_decl(item) && !contains_macro_use_attr(&item.attrs, item.span())\n+}\n+\n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n         ast::ItemKind::Use(_) => true,\n         _ => false,\n     }\n }\n \n+fn is_use_item_without_attr(item: &ast::Item) -> bool {\n+    is_use_item(item) && !contains_macro_use_attr(&item.attrs, item.span())\n+}\n+\n fn is_extern_crate(item: &ast::Item) -> bool {\n     match item.node {\n         ast::ItemKind::ExternCrate(..) => true,\n         _ => false,\n     }\n }\n \n+fn is_extern_crate_without_attr(item: &ast::Item) -> bool {\n+    is_extern_crate(item) && !contains_macro_use_attr(&item.attrs, item.span())\n+}\n+\n /// Creates a string slice corresponding to the specified span.\n pub struct SnippetProvider<'a> {\n     /// A pointer to the content of the file we are formatting.\n@@ -318,39 +354,26 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let filtered_attrs;\n         let mut attrs = &item.attrs;\n         match item.node {\n-            ast::ItemKind::Mod(ref m) => {\n-                let outer_file = self.codemap.lookup_char_pos(item.span.lo()).file;\n-                let inner_file = self.codemap.lookup_char_pos(m.inner.lo()).file;\n-                if outer_file.name == inner_file.name {\n-                    // Module is inline, in this case we treat modules like any\n-                    // other item.\n-                    if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                        self.push_skipped_with_span(item.span());\n-                        return;\n-                    }\n-                } else if contains_skip(&item.attrs) {\n-                    // Module is not inline, but should be skipped.\n+            // Module is inline, in this case we treat it like any other item.\n+            _ if !is_mod_decl(item) => {\n+                if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n+                    self.push_skipped_with_span(item.span());\n                     return;\n-                } else {\n-                    // Module is not inline and should not be skipped. We want\n-                    // to process only the attributes in the current file.\n-                    filtered_attrs = item.attrs\n-                        .iter()\n-                        .filter_map(|a| {\n-                            let attr_file = self.codemap.lookup_char_pos(a.span.lo()).file;\n-                            if attr_file.name == outer_file.name {\n-                                Some(a.clone())\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .collect::<Vec<_>>();\n-                    // Assert because if we should skip it should be caught by\n-                    // the above case.\n-                    assert!(!self.visit_attrs(&filtered_attrs, ast::AttrStyle::Outer));\n-                    attrs = &filtered_attrs;\n                 }\n             }\n+            // Module is not inline, but should be skipped.\n+            ast::ItemKind::Mod(..) if contains_skip(&item.attrs) => {\n+                return;\n+            }\n+            // Module is not inline and should not be skipped. We want\n+            // to process only the attributes in the current file.\n+            ast::ItemKind::Mod(..) => {\n+                filtered_attrs = filter_inline_attrs(&item.attrs, item.span());\n+                // Assert because if we should skip it should be caught by\n+                // the above case.\n+                assert!(!self.visit_attrs(&filtered_attrs, ast::AttrStyle::Outer));\n+                attrs = &filtered_attrs;\n+            }\n             _ => {\n                 if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n                     self.push_skipped_with_span(item.span());\n@@ -397,8 +420,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.last_pos = source!(self, item.span).hi();\n             }\n             ast::ItemKind::Mod(ref module) => {\n+                let is_inline = !is_mod_decl(item);\n                 self.format_missing_with_indent(source!(self, item.span).lo());\n-                self.format_mod(module, &item.vis, item.span, item.ident, attrs);\n+                self.format_mod(module, &item.vis, item.span, item.ident, attrs, is_inline);\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.visit_mac(mac, Some(item.ident), MacroPosition::Item);\n@@ -439,6 +463,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ast::ItemKind::MacroDef(ref def) => {\n                 let rewrite = rewrite_macro_def(\n                     &self.get_context(),\n+                    self.shape(),\n                     self.block_indent,\n                     def,\n                     item.ident,\n@@ -576,14 +601,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         snippet_provider: &'a SnippetProvider,\n     ) -> FmtVisitor<'a> {\n         FmtVisitor {\n-            parse_session: parse_session,\n+            parse_session,\n             codemap: parse_session.codemap(),\n             buffer: String::with_capacity(snippet_provider.big_snippet.len() * 2),\n             last_pos: BytePos(0),\n             block_indent: Indent::empty(),\n-            config: config,\n+            config,\n             is_if_else_block: false,\n-            snippet_provider: snippet_provider,\n+            snippet_provider,\n             line_number: 0,\n             skipped_range: vec![],\n         }\n@@ -649,33 +674,38 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     fn walk_items(&mut self, mut items_left: &[&ast::Item]) {\n-        while !items_left.is_empty() {\n-            // If the next item is a `use` declaration, then extract it and any subsequent `use`s\n-            // to be potentially reordered within `format_imports`. Otherwise, just format the\n-            // next item for output.\n-            if self.config.reorder_imports() && is_use_item(&*items_left[0]) {\n-                let used_items_len = self.reorder_items(\n-                    items_left,\n-                    &is_use_item,\n-                    self.config.reorder_imports_in_group(),\n-                );\n+        macro try_reorder_items_with($reorder: ident, $in_group: ident, $pred: ident) {\n+            if self.config.$reorder() && $pred(&*items_left[0]) {\n+                let used_items_len =\n+                    self.reorder_items(items_left, &$pred, self.config.$in_group());\n                 let (_, rest) = items_left.split_at(used_items_len);\n                 items_left = rest;\n-            } else if self.config.reorder_extern_crates() && is_extern_crate(&*items_left[0]) {\n-                let used_items_len = self.reorder_items(\n-                    items_left,\n-                    &is_extern_crate,\n-                    self.config.reorder_extern_crates_in_group(),\n+                continue;\n+            }\n+        }\n+\n+        while !items_left.is_empty() {\n+            // If the next item is a `use`, `extern crate` or `mod`, then extract it and any\n+            // subsequent items that have the same item kind to be reordered within\n+            // `format_imports`. Otherwise, just format the next item for output.\n+            {\n+                try_reorder_items_with!(\n+                    reorder_imports,\n+                    reorder_imports_in_group,\n+                    is_use_item_without_attr\n                 );\n-                let (_, rest) = items_left.split_at(used_items_len);\n-                items_left = rest;\n-            } else {\n-                // `unwrap()` is safe here because we know `items_left`\n-                // has elements from the loop condition\n-                let (item, rest) = items_left.split_first().unwrap();\n-                self.visit_item(item);\n-                items_left = rest;\n+                try_reorder_items_with!(\n+                    reorder_extern_crates,\n+                    reorder_extern_crates_in_group,\n+                    is_extern_crate_without_attr\n+                );\n+                try_reorder_items_with!(reorder_modules, reorder_modules, is_mod_decl_without_attr);\n             }\n+            // Reaching here means items were not reordered. There must be at least\n+            // one item left in `items_left`, so calling `unwrap()` here is safe.\n+            let (item, rest) = items_left.split_first().unwrap();\n+            self.visit_item(item);\n+            items_left = rest;\n         }\n     }\n \n@@ -722,13 +752,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         s: Span,\n         ident: ast::Ident,\n         attrs: &[ast::Attribute],\n+        is_internal: bool,\n     ) {\n-        // Decide whether this is an inline mod or an external mod.\n-        let local_file_name = self.codemap.span_to_filename(s);\n-        let inner_span = source!(self, m.inner);\n-        let is_internal = !(inner_span.lo().0 == 0 && inner_span.hi().0 == 0)\n-            && local_file_name == self.codemap.span_to_filename(inner_span);\n-\n         self.push_str(&*utils::format_visibility(vis));\n         self.push_str(\"mod \");\n         self.push_str(&ident.to_string());", "previous_filename": "src/visitor.rs"}, {"sha": "c7ad93bafe36c0080f9361212af31837849fbbc5", "filename": "rustfmt-core/tests/config/disable_all_formatting.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fconfig%2Fdisable_all_formatting.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fconfig%2Fdisable_all_formatting.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fconfig%2Fdisable_all_formatting.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/config/disable_all_formatting.toml"}, {"sha": "44148a2d3c3ed6bc75e28e1c55eec63f4d720698", "filename": "rustfmt-core/tests/config/issue-1111.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fconfig%2Fissue-1111.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fconfig%2Fissue-1111.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fconfig%2Fissue-1111.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/config/issue-1111.toml"}, {"sha": "d03ac281acb03fe5a6dac454d00e63a9beae6fee", "filename": "rustfmt-core/tests/config/small_tabs.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fconfig%2Fsmall_tabs.toml?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/config/small_tabs.toml"}, {"sha": "e79557af713e511b792d078dea66aa975bf7f6b2", "filename": "rustfmt-core/tests/coverage/source/comments.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fcoverage%2Fsource%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fcoverage%2Fsource%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fcoverage%2Fsource%2Fcomments.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/coverage/source/comments.rs"}, {"sha": "8f9c223aef29c678aa42f4c1b8bde9a54cc050a5", "filename": "rustfmt-core/tests/coverage/target/comments.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fcoverage%2Ftarget%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fcoverage%2Ftarget%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fcoverage%2Ftarget%2Fcomments.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/coverage/target/comments.rs"}, {"sha": "6a310d175b199108ad5ad893f9c84090fe299c50", "filename": "rustfmt-core/tests/lib.rs", "status": "renamed", "additions": 63, "deletions": 27, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Flib.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private)]\n-\n #[macro_use]\n extern crate lazy_static;\n #[macro_use]\n extern crate log;\n extern crate regex;\n-extern crate rustfmt_nightly as rustfmt;\n+extern crate rustfmt_config as config;\n+extern crate rustfmt_core as rustfmt;\n extern crate term;\n \n use std::collections::HashMap;\n@@ -26,8 +25,9 @@ use std::path::{Path, PathBuf};\n use std::str::Chars;\n \n use rustfmt::*;\n-use rustfmt::config::{Color, Config, ReportTactic};\n-use rustfmt::filemap::{write_system_newlines, FileMap};\n+use config::{Color, Config, ReportTactic};\n+use config::summary::Summary;\n+use rustfmt::filemap::write_system_newlines;\n use rustfmt::rustfmt_diff::*;\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n@@ -95,7 +95,7 @@ fn verify_config_test_names() {\n                 let config_name = path.file_name().unwrap().to_str().unwrap();\n \n                 // Make sure that config name is used in the files in the directory.\n-                verify_config_used(&path, &config_name);\n+                verify_config_used(&path, config_name);\n             }\n         }\n     }\n@@ -105,7 +105,7 @@ fn verify_config_test_names() {\n // println!) that is used by `rustfmt::rustfmt_diff::print_diff`. Writing\n // using only one or the other will cause the output order to differ when\n // `print_diff` selects the approach not used.\n-fn write_message(msg: String) {\n+fn write_message(msg: &str) {\n     let mut writer = OutputWriter::new(Color::Auto);\n     writer.writeln(&format!(\"{}\", msg), None);\n }\n@@ -210,10 +210,26 @@ fn idempotence_tests() {\n // no warnings are emitted.\n #[test]\n fn self_tests() {\n-    let mut files = get_test_files(Path::new(\"src/bin\"), false);\n-    files.append(&mut get_test_files(Path::new(\"tests\"), false));\n-    files.push(PathBuf::from(\"src/lib.rs\"));\n-    files.push(PathBuf::from(\"build.rs\"));\n+    let mut files = get_test_files(Path::new(\"tests\"), false);\n+    let bin_directories = vec![\n+        \"cargo-fmt\",\n+        \"git-rustfmt\",\n+        \"rustfmt-bin\",\n+        \"rustfmt-format-diff\",\n+    ];\n+    for dir in bin_directories {\n+        let mut path = PathBuf::from(\"..\");\n+        path.push(dir);\n+        path.push(\"src/main.rs\");\n+        files.push(path);\n+    }\n+    let lib_directories = vec![\"rustfmt-core\", \"rustfmt-config\"];\n+    for dir in lib_directories {\n+        let mut path = PathBuf::from(\"..\");\n+        path.push(dir);\n+        path.push(\"src/lib.rs\");\n+        files.push(path);\n+    }\n \n     let (reports, count, fails) = check_files(files);\n     let mut warnings = 0;\n@@ -285,6 +301,16 @@ fn format_lines_errors_are_reported() {\n     assert!(error_summary.has_formatting_errors());\n }\n \n+#[test]\n+fn format_lines_errors_are_reported_with_tabs() {\n+    let long_identifier = String::from_utf8(vec![b'a'; 97]).unwrap();\n+    let input = Input::Text(format!(\"fn a() {{\\n\\t{}\\n}}\", long_identifier));\n+    let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n+    let (error_summary, _file_map, _report) =\n+        format_input::<io::Stdout>(input, &config, None).unwrap();\n+    assert!(error_summary.has_formatting_errors());\n+}\n+\n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n fn check_files(files: Vec<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n@@ -373,8 +399,8 @@ pub enum IdempotentCheckError {\n }\n \n pub fn idempotent_check(filename: &PathBuf) -> Result<FormatReport, IdempotentCheckError> {\n-    let sig_comments = read_significant_comments(&filename);\n-    let config = read_config(&filename);\n+    let sig_comments = read_significant_comments(filename);\n+    let config = read_config(filename);\n     let (error_summary, file_map, format_report) = format_file(filename, &config);\n     if error_summary.has_parsing_errors() {\n         return Err(IdempotentCheckError::Parse);\n@@ -663,27 +689,37 @@ impl ConfigCodeBlock {\n \n     fn get_block_config(&self) -> Config {\n         let mut config = Config::default();\n-        config.override_value(\n-            self.config_name.as_ref().unwrap(),\n-            self.config_value.as_ref().unwrap(),\n-        );\n+        if self.config_value.is_some() && self.config_value.is_some() {\n+            config.override_value(\n+                self.config_name.as_ref().unwrap(),\n+                self.config_value.as_ref().unwrap(),\n+            );\n+        }\n         config\n     }\n \n     fn code_block_valid(&self) -> bool {\n         // We never expect to not have a code block.\n         assert!(self.code_block.is_some() && self.code_block_start.is_some());\n \n-        if self.config_name.is_none() {\n-            write_message(format!(\n+        // See if code block begins with #![rustfmt_skip].\n+        let fmt_skip = self.code_block\n+            .as_ref()\n+            .unwrap()\n+            .split(\"\\n\")\n+            .nth(0)\n+            .unwrap_or(\"\") == \"#![rustfmt_skip]\";\n+\n+        if self.config_name.is_none() && !fmt_skip {\n+            write_message(&format!(\n                 \"No configuration name for {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n             ));\n             return false;\n         }\n-        if self.config_value.is_none() {\n-            write_message(format!(\n+        if self.config_value.is_none() && !fmt_skip {\n+            write_message(&format!(\n                 \"No configuration value for {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n@@ -695,7 +731,7 @@ impl ConfigCodeBlock {\n \n     fn has_parsing_errors(&self, error_summary: Summary) -> bool {\n         if error_summary.has_parsing_errors() {\n-            write_message(format!(\n+            write_message(&format!(\n                 \"\\u{261d}\\u{1f3fd} Cannot format {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n@@ -718,7 +754,7 @@ impl ConfigCodeBlock {\n         });\n     }\n \n-    fn formatted_has_diff(&self, file_map: FileMap) -> bool {\n+    fn formatted_has_diff(&self, file_map: &FileMap) -> bool {\n         let &(ref _file_name, ref text) = file_map.first().unwrap();\n         let compare = make_diff(self.code_block.as_ref().unwrap(), text, DIFF_CONTEXT_SIZE);\n         if !compare.is_empty() {\n@@ -744,14 +780,14 @@ impl ConfigCodeBlock {\n         let (error_summary, file_map, _report) =\n             format_input::<io::Stdout>(input, &config, None).unwrap();\n \n-        !self.has_parsing_errors(error_summary) && !self.formatted_has_diff(file_map)\n+        !self.has_parsing_errors(error_summary) && !self.formatted_has_diff(&file_map)\n     }\n \n     // Extract a code block from the iterator. Behavior:\n     // - Rust code blocks are identifed by lines beginning with \"```rust\".\n     // - One explicit configuration setting is supported per code block.\n     // - Rust code blocks with no configuration setting are illegal and cause an\n-    //   assertion failure.\n+    //   assertion failure, unless the snippet begins with #![rustfmt_skip].\n     // - Configuration names in Configurations.md must be in the form of\n     //   \"## `NAME`\".\n     // - Configuration values in Configurations.md must be in the form of\n@@ -761,7 +797,7 @@ impl ConfigCodeBlock {\n         prev: Option<&ConfigCodeBlock>,\n     ) -> Option<ConfigCodeBlock> {\n         let mut code_block = ConfigCodeBlock::new();\n-        code_block.config_name = prev.map_or(None, |cb| cb.config_name.clone());\n+        code_block.config_name = prev.and_then(|cb| cb.config_name.clone());\n \n         loop {\n             match ConfigurationSection::get_section(file) {\n@@ -790,7 +826,7 @@ fn configuration_snippet_tests() {\n     // entry for each Rust code block found.\n     fn get_code_blocks() -> Vec<ConfigCodeBlock> {\n         let mut file_iter = BufReader::new(\n-            fs::File::open(CONFIGURATIONS_FILE_NAME)\n+            fs::File::open(Path::new(\"..\").join(CONFIGURATIONS_FILE_NAME))\n                 .expect(&format!(\"Couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n         ).lines()\n             .map(|l| l.unwrap())", "previous_filename": "tests/system.rs"}, {"sha": "d5860532086fb26295d4da6322bc07574e2a659c", "filename": "rustfmt-core/tests/source/assignment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fassignment.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/assignment.rs"}, {"sha": "8f5e21725691c108331525fd9c35eb29a7b1ef20", "filename": "rustfmt-core/tests/source/associated-types-bounds-wrapping.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fassociated-types-bounds-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fassociated-types-bounds-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fassociated-types-bounds-wrapping.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/associated-types-bounds-wrapping.rs"}, {"sha": "6653dd2daa97f927efe03c2b3fd238f948fa18dd", "filename": "rustfmt-core/tests/source/attrib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fattrib.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/attrib.rs"}, {"sha": "737dd5aeb6a7bd1748df777f2dcc7523212f5315", "filename": "rustfmt-core/tests/source/big-impl-rfc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fbig-impl-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fbig-impl-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fbig-impl-rfc.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/big-impl-rfc.rs"}, {"sha": "c36b7e6cadb1acc5f3f90e471d12ae4767560c4d", "filename": "rustfmt-core/tests/source/big-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fbig-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fbig-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fbig-impl.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/big-impl.rs"}, {"sha": "c01d8a0784556d93b4b6af8c00f8aecf5906ce4a", "filename": "rustfmt-core/tests/source/break-and-continue.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fbreak-and-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fbreak-and-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fbreak-and-continue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/break-and-continue.rs"}, {"sha": "64cc9e7a207974fa34d5bc12b4dbbd2218d5a303", "filename": "rustfmt-core/tests/source/catch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcatch.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/catch.rs"}, {"sha": "6a9a40cb98f1988650963833c73362e87b918622", "filename": "rustfmt-core/tests/source/chains-indent-tabbed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains-indent-tabbed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains-indent-tabbed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fchains-indent-tabbed.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/chains-indent-tabbed.rs"}, {"sha": "8fdd3c4cabf3a490c7453d35b070920a653d17d5", "filename": "rustfmt-core/tests/source/chains-indent-visual.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains-indent-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains-indent-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fchains-indent-visual.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/chains-indent-visual.rs"}, {"sha": "466f684088785095d4bbd8c5088e79d43b86a592", "filename": "rustfmt-core/tests/source/chains-visual.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fchains-visual.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/chains-visual.rs"}, {"sha": "0ed52ae61becee572b995f974cb3ea880f648491", "filename": "rustfmt-core/tests/source/chains.rs", "status": "renamed", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fchains.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -214,3 +214,18 @@ impl Foo {\n         }).collect();\n     }\n }\n+\n+// #2415\n+// Avoid orphan in chain\n+fn issue2415() {\n+    let base_url = (|| {\n+        // stuff\n+\n+        Ok((|| {\n+            // stuff\n+            Some(value.to_string())\n+        })()\n+           .ok_or(\"\")?)\n+    })()\n+        .unwrap_or_else(|_: Box<::std::error::Error>| String::from(\"\"));\n+}", "previous_filename": "tests/source/chains.rs"}, {"sha": "c1260592083a67763511d2ad27c424415ab20b1a", "filename": "rustfmt-core/tests/source/closure-block-inside-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fclosure-block-inside-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fclosure-block-inside-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fclosure-block-inside-macro.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/closure-block-inside-macro.rs"}, {"sha": "e93cc3fb40f59f55b21d46594e01a3513c22d908", "filename": "rustfmt-core/tests/source/closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fclosure.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/closure.rs"}, {"sha": "b6ce5267fcb1d3594e2ada500e9e8660dfd01b1f", "filename": "rustfmt-core/tests/source/comment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcomment.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/comment.rs"}, {"sha": "d68bb5483dc837f4553e63a2a4f7001d0a013485", "filename": "rustfmt-core/tests/source/comment2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcomment2.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/comment2.rs"}, {"sha": "f19a85863344738ff0d81d112480fed661bd2969", "filename": "rustfmt-core/tests/source/comment3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcomment3.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/comment3.rs"}, {"sha": "ff1445378d7b60da62ceeb5c42e0a463b691d78f", "filename": "rustfmt-core/tests/source/comment4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcomment4.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/comment4.rs"}, {"sha": "2835d8b2578564de09d1e9bf536d5c2949b4fdfb", "filename": "rustfmt-core/tests/source/comment5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcomment5.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/comment5.rs"}, {"sha": "7a65f762f6c92929f377b4f37915d0fbddcba0fe", "filename": "rustfmt-core/tests/source/comment_crlf_newline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment_crlf_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcomment_crlf_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcomment_crlf_newline.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/comment_crlf_newline.rs"}, {"sha": "c6058a55b0aeed72d6f3d3df4078ca270b4e2685", "filename": "rustfmt-core/tests/source/configs/blank_lines_lower_bound/1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fblank_lines_lower_bound%2F1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fblank_lines_lower_bound%2F1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fblank_lines_lower_bound%2F1.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/blank_lines_lower_bound/1.rs"}, {"sha": "d3bd9ac09aa6d6a0e105e5cb1a3d02fd1a23f8b8", "filename": "rustfmt-core/tests/source/configs/brace_style/fn_always_next_line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_always_next_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_always_next_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_always_next_line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/brace_style/fn_always_next_line.rs"}, {"sha": "78a4495243d882925383b56056050086de3b4ada", "filename": "rustfmt-core/tests/source/configs/brace_style/fn_prefer_same_line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_prefer_same_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_prefer_same_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_prefer_same_line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/brace_style/fn_prefer_same_line.rs"}, {"sha": "3b78932e1776ab10ba75e274ee0337cfbc40e511", "filename": "rustfmt-core/tests/source/configs/brace_style/fn_same_line_where.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_same_line_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_same_line_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Ffn_same_line_where.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/brace_style/fn_same_line_where.rs"}, {"sha": "0cc19b34da7ef8dc726d95f7dcb50e204ca3a052", "filename": "rustfmt-core/tests/source/configs/brace_style/item_always_next_line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_always_next_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_always_next_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_always_next_line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/brace_style/item_always_next_line.rs"}, {"sha": "4412bc869a268bb230eafec8a83637f5d28bf32b", "filename": "rustfmt-core/tests/source/configs/brace_style/item_prefer_same_line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_prefer_same_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_prefer_same_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_prefer_same_line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/brace_style/item_prefer_same_line.rs"}, {"sha": "b8e69147dc5a8159600c1ae6c3304a9d8086483c", "filename": "rustfmt-core/tests/source/configs/brace_style/item_same_line_where.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_same_line_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_same_line_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fbrace_style%2Fitem_same_line_where.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/brace_style/item_same_line_where.rs"}, {"sha": "36187ce0af4cbb7861a819671ac334abfc8ab902", "filename": "rustfmt-core/tests/source/configs/comment_width/above.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fabove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fabove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fabove.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/comment_width/above.rs"}, {"sha": "abbc5930c4ce1124ce9c1cf0f05690d116a26eb7", "filename": "rustfmt-core/tests/source/configs/comment_width/below.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fbelow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fbelow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fbelow.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/comment_width/below.rs"}, {"sha": "c86e71c28981b178d7d2b949b3e00d3dd5138ae4", "filename": "rustfmt-core/tests/source/configs/comment_width/ignore.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcomment_width%2Fignore.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/comment_width/ignore.rs"}, {"sha": "3b967f35a8e8faedf72da4bf90a7eb653b21a663", "filename": "rustfmt-core/tests/source/configs/condense_wildcard_suffixes/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcondense_wildcard_suffixes%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcondense_wildcard_suffixes%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcondense_wildcard_suffixes%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/condense_wildcard_suffixes/false.rs"}, {"sha": "3798a6b9902043e5b1112ad323bf392d2e05becb", "filename": "rustfmt-core/tests/source/configs/condense_wildcard_suffixes/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcondense_wildcard_suffixes%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcondense_wildcard_suffixes%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcondense_wildcard_suffixes%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/condense_wildcard_suffixes/true.rs"}, {"sha": "c4ddad9ce273463426a83f00ff10d18ae408b7e8", "filename": "rustfmt-core/tests/source/configs/control_brace_style/always_next_line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Falways_next_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Falways_next_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Falways_next_line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/control_brace_style/always_next_line.rs"}, {"sha": "a9c699d27e3e22fe3e2545c20e501303487d4398", "filename": "rustfmt-core/tests/source/configs/control_brace_style/always_same_line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Falways_same_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Falways_same_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Falways_same_line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/control_brace_style/always_same_line.rs"}, {"sha": "1a74a28f26a9f6240b245a5dc5d40b008317775e", "filename": "rustfmt-core/tests/source/configs/control_brace_style/closing_next_line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Fclosing_next_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Fclosing_next_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fcontrol_brace_style%2Fclosing_next_line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/control_brace_style/closing_next_line.rs"}, {"sha": "834ca7a3c89e58b57be2dda5e259842e138511af", "filename": "rustfmt-core/tests/source/configs/disable_all_formatting/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fdisable_all_formatting%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fdisable_all_formatting%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fdisable_all_formatting%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/disable_all_formatting/false.rs"}, {"sha": "56955bf384d6b2b7df5bfcb556ddc80a4902e507", "filename": "rustfmt-core/tests/source/configs/disable_all_formatting/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fdisable_all_formatting%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fdisable_all_formatting%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fdisable_all_formatting%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/disable_all_formatting/true.rs"}, {"sha": "8fa74f288023d4fe2c54178658c4de4c080e68ef", "filename": "rustfmt-core/tests/source/configs/empty_item_single_line/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/empty_item_single_line/false.rs"}, {"sha": "02e703d19048cad10ba39256ef02346aa88df04b", "filename": "rustfmt-core/tests/source/configs/empty_item_single_line/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/empty_item_single_line/true.rs"}, {"sha": "fa70ae78352f991a536520f137eed88cf7353b1a", "filename": "rustfmt-core/tests/source/configs/error_on_line_overflow/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ferror_on_line_overflow%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ferror_on_line_overflow%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ferror_on_line_overflow%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/error_on_line_overflow/false.rs"}, {"sha": "86c0b42e53c69446917db168f602eb7f8c332a34", "filename": "rustfmt-core/tests/source/configs/fn_args_density/compressed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Fcompressed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Fcompressed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Fcompressed.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/fn_args_density/compressed.rs"}, {"sha": "fc400e1c1134905c7c55064fab6920e2b89ecf3a", "filename": "rustfmt-core/tests/source/configs/fn_args_density/tall.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Ftall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Ftall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Ftall.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/fn_args_density/tall.rs"}, {"sha": "20b1427d83dce0ab8d785fb4ce6a650f0db17aeb", "filename": "rustfmt-core/tests/source/configs/fn_args_density/vertical.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_args_density%2Fvertical.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/fn_args_density/vertical.rs"}, {"sha": "3d092f0c0bf5a5d4dd23896c0a116112c8b9da49", "filename": "rustfmt-core/tests/source/configs/fn_single_line/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_single_line%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_single_line%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_single_line%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/fn_single_line/false.rs"}, {"sha": "3cb0fdedf0b61d4c6a75ce5cc5069d22b87bec67", "filename": "rustfmt-core/tests/source/configs/fn_single_line/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_single_line%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_single_line%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ffn_single_line%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/fn_single_line/true.rs"}, {"sha": "3c48f8e0c78dba9a3e7ebc8781e5a6d338197997", "filename": "rustfmt-core/tests/source/configs/force_explicit_abi/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_explicit_abi%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_explicit_abi%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_explicit_abi%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/force_explicit_abi/false.rs"}, {"sha": "e5ff6cf7dd7e1fd3762e331456e52153a94ae8a3", "filename": "rustfmt-core/tests/source/configs/force_explicit_abi/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_explicit_abi%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_explicit_abi%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_explicit_abi%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/force_explicit_abi/true.rs"}, {"sha": "b97e348e5da12a0be98855d7d1b4373e65f896d1", "filename": "rustfmt-core/tests/source/configs/force_multiline_block/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_multiline_block%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_multiline_block%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_multiline_block%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/force_multiline_block/false.rs"}, {"sha": "db9d3de46141ecac6581c1b09ca1a3af269332cb", "filename": "rustfmt-core/tests/source/configs/force_multiline_block/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_multiline_block%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_multiline_block%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fforce_multiline_block%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/force_multiline_block/true.rs"}, {"sha": "ecca0d7d1fca583c1fd6bdfda680bc588800e88a", "filename": "rustfmt-core/tests/source/configs/format_strings/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fformat_strings%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fformat_strings%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fformat_strings%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/format_strings/false.rs"}, {"sha": "337314478212e57bb5a01c192f43d8b70fe22aa1", "filename": "rustfmt-core/tests/source/configs/format_strings/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fformat_strings%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fformat_strings%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fformat_strings%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/format_strings/true.rs"}, {"sha": "bf92162b4240a1a44a65522952a8ca24cb8f38eb", "filename": "rustfmt-core/tests/source/configs/hard_tabs/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fhard_tabs%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fhard_tabs%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fhard_tabs%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/hard_tabs/false.rs"}, {"sha": "738922a4dfb0400451874fa7a74ab76e13f0733f", "filename": "rustfmt-core/tests/source/configs/hard_tabs/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fhard_tabs%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fhard_tabs%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fhard_tabs%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/hard_tabs/true.rs"}, {"sha": "4d2d280a16bc5aca82ca1be6ac7220c7c3f53e83", "filename": "rustfmt-core/tests/source/configs/indent_style/block_args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_args.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_args.rs"}, {"sha": "8404f65f471c3608096375a6baf859eb73ea535a", "filename": "rustfmt-core/tests/source/configs/indent_style/block_array.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_array.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_array.rs"}, {"sha": "c82b6b8e38f8316a373fd236be816c18ad63b969", "filename": "rustfmt-core/tests/source/configs/indent_style/block_call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_call.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_call.rs"}, {"sha": "41d91469114c9afec7971da29a9635027bdb109c", "filename": "rustfmt-core/tests/source/configs/indent_style/block_chain.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_chain.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_chain.rs"}, {"sha": "2cf17be56eff2e2b75a515169308e1b851bd78cd", "filename": "rustfmt-core/tests/source/configs/indent_style/block_generic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_generic.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_generic.rs"}, {"sha": "47a6994f40ca29322a9c2ad0a558d55bede5febd", "filename": "rustfmt-core/tests/source/configs/indent_style/block_struct_lit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_struct_lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_struct_lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_struct_lit.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_struct_lit.rs"}, {"sha": "c907ec50d4580dfa1b9dc814789d6c35878d7cca", "filename": "rustfmt-core/tests/source/configs/indent_style/block_trailing_comma_call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_trailing_comma_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_trailing_comma_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_trailing_comma_call.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_trailing_comma_call.rs"}, {"sha": "450491f02705e39a1a8355bca09568c849f68fe1", "filename": "rustfmt-core/tests/source/configs/indent_style/block_where_pred.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_where_pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_where_pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fblock_where_pred.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/block_where_pred.rs"}, {"sha": "f08f5c64460a7c7c4c818e6d7d745f9bedadbaaa", "filename": "rustfmt-core/tests/source/configs/indent_style/default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fdefault.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/default.rs"}, {"sha": "012840be28dccb7bba867e2d26d0073de836f6e9", "filename": "rustfmt-core/tests/source/configs/indent_style/rfc_where.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Frfc_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Frfc_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Frfc_where.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/rfc_where.rs"}, {"sha": "5aa28a62b9cef0324a279a9f7c53181a04b5b9b0", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_args.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_args.rs"}, {"sha": "05bbf00b1d27d5acec8136683fd5ca9c42b32376", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_array.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_array.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_array.rs"}, {"sha": "9a679d6bb4c98d863dcdbb2c08fc7745fe5188fc", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_call.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_call.rs"}, {"sha": "b74948753980354d1424e5468121e4ffac2be237", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_chain.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_chain.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_chain.rs"}, {"sha": "1f910d32d87a06746a7a951893346ce4a4da4b25", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_generics.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_generics.rs"}, {"sha": "45538e70482d28bd6dd45d85dd1733d0229b1bf5", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_struct_lit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_struct_lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_struct_lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_struct_lit.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_struct_lit.rs"}, {"sha": "9738d397dbf6305182ad58152cbf74fcf5b3d4a5", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_trailing_comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_trailing_comma.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_trailing_comma.rs"}, {"sha": "055806b68629e18a4808c87e96b092fda68c4faf", "filename": "rustfmt-core/tests/source/configs/indent_style/visual_where_pred.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_where_pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_where_pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Findent_style%2Fvisual_where_pred.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/indent_style/visual_where_pred.rs"}, {"sha": "53e37e13c4f2bfac9545df94c524a76c32fbd870", "filename": "rustfmt-core/tests/source/configs/match_arm_blocks/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_blocks%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_blocks%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_blocks%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/match_arm_blocks/false.rs"}, {"sha": "a452b13cd27db3aeb874b074cc4d68846c118f90", "filename": "rustfmt-core/tests/source/configs/match_arm_blocks/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_blocks%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_blocks%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_blocks%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/match_arm_blocks/true.rs"}, {"sha": "70e02955fb01d4345614ed7f56bc82d7e0ef2976", "filename": "rustfmt-core/tests/source/configs/match_block_trailing_comma/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_block_trailing_comma%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_block_trailing_comma%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_block_trailing_comma%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/match_block_trailing_comma/false.rs"}, {"sha": "b9af3d47202fc1e1aa36591455b194fdfb9e7f01", "filename": "rustfmt-core/tests/source/configs/match_block_trailing_comma/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_block_trailing_comma%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_block_trailing_comma%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmatch_block_trailing_comma%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/match_block_trailing_comma/true.rs"}, {"sha": "18b8443f0d7bb586465bfc12826e7e27a54eabc1", "filename": "rustfmt-core/tests/source/configs/merge_derives/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmerge_derives%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmerge_derives%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fmerge_derives%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/merge_derives/true.rs"}, {"sha": "488962ed9362d52c6060d589620fa8ad48a6811a", "filename": "rustfmt-core/tests/source/configs/normalize_comments/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fnormalize_comments%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fnormalize_comments%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fnormalize_comments%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/normalize_comments/false.rs"}, {"sha": "c74a9808e61db4bc19313e116c55c4a520b365d8", "filename": "rustfmt-core/tests/source/configs/normalize_comments/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fnormalize_comments%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fnormalize_comments%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fnormalize_comments%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/normalize_comments/true.rs"}, {"sha": "6bef132e5c322599cf2d4ccc52fb882316599853", "filename": "rustfmt-core/tests/source/configs/reorder_extern_crates/false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-reorder_extern_crates: false\n+\n+extern crate foo;\n+extern crate bar;\n+extern crate foobar;\n+\n+#[macro_use]\n+extern crate nom;\n+extern crate regex;\n+#[macro_use]\n+extern crate log;"}, {"sha": "bdf00f57cdada8dbb27d1dddb5dad45f164ec3ac", "filename": "rustfmt-core/tests/source/configs/reorder_extern_crates/true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-reorder_extern_crates: true\n+\n+extern crate foo;\n+extern crate bar;\n+extern crate foobar;\n+\n+#[macro_use]\n+extern crate nom;\n+extern crate regex;\n+#[macro_use]\n+extern crate log;"}, {"sha": "91db89ceeaa2238c43837b2e71979b871f2dd022", "filename": "rustfmt-core/tests/source/configs/reorder_imported_names/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/reorder_imported_names/false.rs"}, {"sha": "69da6186d5a0545288c8f958da720a57142517c6", "filename": "rustfmt-core/tests/source/configs/reorder_imported_names/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/reorder_imported_names/true.rs"}, {"sha": "4b85684dc013d0a087c7a09eb2a2a78ff334ad57", "filename": "rustfmt-core/tests/source/configs/reorder_imports/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/reorder_imports/false.rs"}, {"sha": "2a40f6d069f9375ed1f6be508bf3ce34ea87b8e6", "filename": "rustfmt-core/tests/source/configs/reorder_imports/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/reorder_imports/true.rs"}, {"sha": "87711bb142b4c418b3a491d2ed4c9d0c15cfd103", "filename": "rustfmt-core/tests/source/configs/reorder_imports_in_group/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/reorder_imports_in_group/false.rs"}, {"sha": "b5690b89cc0ef2075ef9e899b0ae644a558d5a2a", "filename": "rustfmt-core/tests/source/configs/reorder_imports_in_group/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/reorder_imports_in_group/true.rs"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "rustfmt-core/tests/source/configs/reorder_modules/dolor/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fdolor%2Fmod.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/target/empty_file.rs"}, {"sha": "56b1aa03ed795f9a690bc34bf1cbe30a7c8468b8", "filename": "rustfmt-core/tests/source/configs/reorder_modules/false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: false\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "rustfmt-core/tests/source/configs/reorder_modules/ipsum/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fipsum%2Fmod.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "rustfmt-core/tests/source/configs/reorder_modules/lorem/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Florem%2Fmod.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "rustfmt-core/tests/source/configs/reorder_modules/sit/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Fsit%2Fmod.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "79b0ab1e35546ad25c94363bd272c219ff2bf219", "filename": "rustfmt-core/tests/source/configs/reorder_modules/true.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Freorder_modules%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-reorder_modules: true\n+// Reorder modules\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;"}, {"sha": "0a597602528a4caf931433d27ae09dc3c9066708", "filename": "rustfmt-core/tests/source/configs/space_before_colon/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspace_before_colon%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspace_before_colon%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspace_before_colon%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/space_before_colon/true.rs"}, {"sha": "11ca76b1345c09c54dc7dfbfa25b2fbbadbd11a7", "filename": "rustfmt-core/tests/source/configs/spaces_around_ranges/false.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,22 @@\n+// rustfmt-spaces_around_ranges: false\n+// Spaces around ranges\n+\n+fn main() {\n+    let lorem = 0 .. 10;\n+    let ipsum = 0 ..= 10;\n+\n+    match lorem {\n+        1 .. 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ..= 5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1 ... 5 => foo(),\n+        _ => bar,\n+    }\n+}"}, {"sha": "501708921306f0e3adc9f0c36963fb61fc2ebc7c", "filename": "rustfmt-core/tests/source/configs/spaces_around_ranges/true.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_around_ranges%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,22 @@\n+// rustfmt-spaces_around_ranges: true\n+// Spaces around ranges\n+\n+fn main() {\n+    let lorem = 0..10;\n+    let ipsum = 0..=10;\n+\n+    match lorem {\n+        1..5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1..=5 => foo(),\n+        _ => bar,\n+    }\n+\n+    match lorem {\n+        1...5 => foo(),\n+        _ => bar,\n+    }\n+}"}, {"sha": "908373ca9b05b1cb44895e3417b4336e14d5ec40", "filename": "rustfmt-core/tests/source/configs/spaces_within_parens_and_brackets/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/spaces_within_parens_and_brackets/false.rs"}, {"sha": "2e3c92da2fc3b842fd5023a91df17f71e2b3fea9", "filename": "rustfmt-core/tests/source/configs/spaces_within_parens_and_brackets/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/spaces_within_parens_and_brackets/true.rs"}, {"sha": "e68340b027d8897168ef3a8474fd841e683c784e", "filename": "rustfmt-core/tests/source/configs/struct_field_align_threshold/20.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/struct_field_align_threshold/20.rs"}, {"sha": "17cad8dde290d1cf68943588c39ab26cfac9b4ea", "filename": "rustfmt-core/tests/source/configs/struct_lit_single_line/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fstruct_lit_single_line%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fstruct_lit_single_line%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fstruct_lit_single_line%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/struct_lit_single_line/false.rs"}, {"sha": "5c2667bc2c792d07214643db3a7382b6d29029af", "filename": "rustfmt-core/tests/source/configs/tab_spaces/2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftab_spaces%2F2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftab_spaces%2F2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftab_spaces%2F2.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/tab_spaces/2.rs"}, {"sha": "da61bbd42a7c75267c9a7731406b4ff92712487e", "filename": "rustfmt-core/tests/source/configs/tab_spaces/4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftab_spaces%2F4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftab_spaces%2F4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftab_spaces%2F4.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/tab_spaces/4.rs"}, {"sha": "57e874cd822c66e2ebcd67b9009da4c5fdc40438", "filename": "rustfmt-core/tests/source/configs/trailing_comma/always.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Falways.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Falways.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Falways.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/trailing_comma/always.rs"}, {"sha": "4da3b996f2994fdf3f7020e5b704f6a433108e84", "filename": "rustfmt-core/tests/source/configs/trailing_comma/never.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Fnever.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Fnever.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Fnever.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/trailing_comma/never.rs"}, {"sha": "c903e82215891302512fdeaba10c2c7960e13d10", "filename": "rustfmt-core/tests/source/configs/trailing_comma/vertical.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftrailing_comma%2Fvertical.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/trailing_comma/vertical.rs"}, {"sha": "6e16e61056691ab0fd7636b8a5de955e3efa1594", "filename": "rustfmt-core/tests/source/configs/type_punctuation_density/compressed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftype_punctuation_density%2Fcompressed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftype_punctuation_density%2Fcompressed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftype_punctuation_density%2Fcompressed.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/type_punctuation_density/compressed.rs"}, {"sha": "1fcdddf0f9aaf49770e761d5880d09d0eedd2b05", "filename": "rustfmt-core/tests/source/configs/type_punctuation_density/wide.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftype_punctuation_density%2Fwide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftype_punctuation_density%2Fwide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Ftype_punctuation_density%2Fwide.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/type_punctuation_density/wide.rs"}, {"sha": "16ce740f1b9d625a40a902003449471166b4816c", "filename": "rustfmt-core/tests/source/configs/use_field_init_shorthand/false.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,19 @@\n+// rustfmt-use_field_init_shorthand: false\n+// Use field initialization shorthand if possible.\n+\n+fn main() {\n+    let a = Foo {\n+        x: x,\n+        y: y,\n+        z: z,\n+    };\n+\n+    let b = Bar {\n+        x: x,\n+        y: y,\n+        #[attr]\n+        z: z,\n+        #[rustfmt_skip]\n+        skipped: skipped,\n+    };\n+}"}, {"sha": "1e36c6cff354df5047f8e2c00ea6a0a60a5020a4", "filename": "rustfmt-core/tests/source/configs/use_field_init_shorthand/true.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,19 @@\n+// rustfmt-use_field_init_shorthand: true\n+// Use field initialization shorthand if possible.\n+\n+fn main() {\n+    let a = Foo {\n+        x: x,\n+        y: y,\n+        z: z,\n+    };\n+\n+    let b = Bar {\n+        x: x,\n+        y: y,\n+        #[attr]\n+        z: z,\n+        #[rustfmt_skip]\n+        skipped: skipped,\n+    };\n+}"}, {"sha": "de7f8b4a5e248e100354baade46c0cf1af90026d", "filename": "rustfmt-core/tests/source/configs/use_try_shorthand/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_try_shorthand%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_try_shorthand%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_try_shorthand%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/use_try_shorthand/false.rs"}, {"sha": "9015ec41e5e49474a14a3f707fab1a221caa61cc", "filename": "rustfmt-core/tests/source/configs/use_try_shorthand/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_try_shorthand%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_try_shorthand%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fuse_try_shorthand%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/use_try_shorthand/true.rs"}, {"sha": "daaab865af219298a5d42efbea39e64d479c07cf", "filename": "rustfmt-core/tests/source/configs/where_single_line/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwhere_single_line%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwhere_single_line%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwhere_single_line%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/where_single_line/true.rs"}, {"sha": "48ecd88accbf91d509def947d021d12cb7cd0b9c", "filename": "rustfmt-core/tests/source/configs/wrap_comments/false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwrap_comments%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwrap_comments%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwrap_comments%2Ffalse.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/wrap_comments/false.rs"}, {"sha": "39a79a4cacc4685a70ec777c0de9c3bb91f51826", "filename": "rustfmt-core/tests/source/configs/wrap_comments/true.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwrap_comments%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwrap_comments%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fconfigs%2Fwrap_comments%2Ftrue.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/configs/wrap_comments/true.rs"}, {"sha": "9079fb46c0cd7d6a1e5683fe8cfceb7add9b15f7", "filename": "rustfmt-core/tests/source/control-brace-style-always-next-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcontrol-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcontrol-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcontrol-brace-style-always-next-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/control-brace-style-always-next-line.rs"}, {"sha": "1c8f487e7cdaabf3653e3c585611314e9ccf3daa", "filename": "rustfmt-core/tests/source/control-brace-style-always-same-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcontrol-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fcontrol-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fcontrol-brace-style-always-same-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/control-brace-style-always-same-line.rs"}, {"sha": "e03933e4516109a1553fe6abce81b431f64367ef", "filename": "rustfmt-core/tests/source/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fdoc.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/doc.rs"}, {"sha": "7b4870fc65aa07a8714a627d0c609da1b6094bd9", "filename": "rustfmt-core/tests/source/else-if-brace-style-always-next-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-always-next-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/else-if-brace-style-always-next-line.rs"}, {"sha": "41f5305bf8c404538306e6d49142d86c2bf46352", "filename": "rustfmt-core/tests/source/else-if-brace-style-always-same-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-always-same-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/else-if-brace-style-always-same-line.rs"}, {"sha": "3b885b3faaa5da0c6112b2374e4fe818730e9f40", "filename": "rustfmt-core/tests/source/else-if-brace-style-closing-next-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-closing-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-closing-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Felse-if-brace-style-closing-next-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/else-if-brace-style-closing-next-line.rs"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "rustfmt-core/tests/source/empty_file.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fempty_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fempty_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fempty_file.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/empty_file.rs"}, {"sha": "f3dbae4b84de4ce56ec4c8ac84e658574d097326", "filename": "rustfmt-core/tests/source/enum.rs", "status": "renamed", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fenum.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -180,3 +180,15 @@ enum WidthOf101 {\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n }\n+\n+// #2389\n+pub enum QlError {\n+    #[fail(display = \"Parsing error: {}\", 0)] LexError(parser::lexer::LexError),\n+    #[fail(display = \"Parsing error: {:?}\", 0)] ParseError(parser::ParseError),\n+    #[fail(display = \"Validation error: {:?}\", 0)] ValidationError(Vec<validation::Error>),\n+    #[fail(display = \"Execution error: {}\", 0)] ExecutionError(String),\n+    // (from, to)\n+    #[fail(display = \"Translation error: from {} to {}\", 0, 1)] TranslationError(String, String),\n+    // (kind, input, expected)\n+    #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)] ResolveError(&'static str, String, Option<String>),\n+}", "previous_filename": "tests/source/enum.rs"}, {"sha": "a2e7ac8fc4418c5bbd1e1fe4d53b12b3fe9863b1", "filename": "rustfmt-core/tests/source/expr-block.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fexpr-block.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/expr-block.rs"}, {"sha": "f87c950735f70fd98fa581320944469838d6b2ed", "filename": "rustfmt-core/tests/source/expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fexpr.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/expr.rs"}, {"sha": "187e698607ac0a19e304b3eed8a198e2574f0fb0", "filename": "rustfmt-core/tests/source/extern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fextern.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/extern.rs"}, {"sha": "9d6c4c2a1cd52f82b259dce2229836577241a5e8", "filename": "rustfmt-core/tests/source/extern_not_explicit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fextern_not_explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fextern_not_explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fextern_not_explicit.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/extern_not_explicit.rs"}, {"sha": "0164e30a854c5d61c596ce4ffa04b42d95f6adc7", "filename": "rustfmt-core/tests/source/file-lines-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-1.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/file-lines-1.rs"}, {"sha": "6f44ec6e69d1bc24bd4e9553fb3f0880df35960b", "filename": "rustfmt-core/tests/source/file-lines-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-2.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/file-lines-2.rs"}, {"sha": "c4f3e21b1ae2a58a02429582a05fad73bdab3d9a", "filename": "rustfmt-core/tests/source/file-lines-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-3.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/file-lines-3.rs"}, {"sha": "83928bf6fecfac4d39929a807c03763e7569410e", "filename": "rustfmt-core/tests/source/file-lines-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-4.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/file-lines-4.rs"}, {"sha": "8ec2c67bc4446cbd5b86a668ccaa372ba7fce040", "filename": "rustfmt-core/tests/source/file-lines-5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-5.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/file-lines-5.rs"}, {"sha": "2eacc8a0e75226ce4313f7fd1472dd1557986818", "filename": "rustfmt-core/tests/source/file-lines-6.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-6.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/file-lines-6.rs"}, {"sha": "0ed4b93df5f0be940fae9f83175c275f2201848c", "filename": "rustfmt-core/tests/source/file-lines-item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffile-lines-item.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/file-lines-item.rs"}, {"sha": "72d841544a8d9bb32f6b5483ddb4265cf9cdf226", "filename": "rustfmt-core/tests/source/fn-custom-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-2.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-custom-2.rs"}, {"sha": "9934fb61efdac96dd3e145926312a5450610aed5", "filename": "rustfmt-core/tests/source/fn-custom-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-3.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-custom-3.rs"}, {"sha": "01c00aecb8681153e4a917a069d8dfd7824014ec", "filename": "rustfmt-core/tests/source/fn-custom-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-4.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-custom-4.rs"}, {"sha": "8e8bb6c274e05b997bffd13af3e086e898eee372", "filename": "rustfmt-core/tests/source/fn-custom-6.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-6.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-custom-6.rs"}, {"sha": "f7670e07fc8ce11eb5604e107da9021107d8ca0e", "filename": "rustfmt-core/tests/source/fn-custom-7.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-7.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-custom-7.rs"}, {"sha": "d3deb20a51c18bf021fd38eb589118b9289a65e5", "filename": "rustfmt-core/tests/source/fn-custom-8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-custom-8.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-custom-8.rs"}, {"sha": "b8d734bfbafdeba691c14546c1a2b7948311eaaa", "filename": "rustfmt-core/tests/source/fn-custom.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-custom.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-custom.rs"}, {"sha": "f1ce503ab0ad85bf245d30841e798edbe0f3bef3", "filename": "rustfmt-core/tests/source/fn-simple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-simple.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-simple.rs"}, {"sha": "6d7f764d28002150f69a6e58e1cbccafce703263", "filename": "rustfmt-core/tests/source/fn-single-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn-single-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn-single-line.rs"}, {"sha": "b61c337dfb957243bc13cf6bae2c40841d1b1466", "filename": "rustfmt-core/tests/source/fn_args_density-vertical.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn_args_density-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn_args_density-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn_args_density-vertical.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn_args_density-vertical.rs"}, {"sha": "b056fcb56fe6d051cd307a9c518c11522e586e2f", "filename": "rustfmt-core/tests/source/fn_args_indent-block.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn_args_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ffn_args_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ffn_args_indent-block.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/fn_args_indent-block.rs"}, {"sha": "b8fd09f879247951789ecfbc4bfaa69541fefbaf", "filename": "rustfmt-core/tests/source/hard-tabs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fhard-tabs.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/hard-tabs.rs"}, {"sha": "f892e6debb10d81831174f295e7177d73c37cdd9", "filename": "rustfmt-core/tests/source/hello.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fhello.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/hello.rs"}, {"sha": "48af7de3887474f0d9452370431940692284382c", "filename": "rustfmt-core/tests/source/hello2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fhello2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fhello2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fhello2.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/hello2.rs"}, {"sha": "c57a1e14483492ea7326bec1500d0cdc11d1d4f1", "filename": "rustfmt-core/tests/source/immovable_generators.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimmovable_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimmovable_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fimmovable_generators.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,7 @@\n+#![feature(generators)]\n+\n+unsafe fn foo() {\n+    let mut ga = static || { \n+        yield 1;\n+    };\n+}"}, {"sha": "ca8e486646a1ebaf7d26d355d99c4b4bbd1fdc5a", "filename": "rustfmt-core/tests/source/impls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fimpls.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/impls.rs"}, {"sha": "3c71f9984febfcd0df5bacd823c432fea8375f6b", "filename": "rustfmt-core/tests/source/imports-reorder-lines-and-items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder-lines-and-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder-lines-and-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder-lines-and-items.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/imports-reorder-lines-and-items.rs"}, {"sha": "a855a9642351eae382d93b16e2de41b4d1d26b53", "filename": "rustfmt-core/tests/source/imports-reorder-lines.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder-lines.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/imports-reorder-lines.rs"}, {"sha": "200cad2d13cae967790b2ef2fb3a19681440c307", "filename": "rustfmt-core/tests/source/imports-reorder.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fimports-reorder.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/imports-reorder.rs"}, {"sha": "73d1419f47d2ae66dfaf7bee6ff951ff57bafce2", "filename": "rustfmt-core/tests/source/imports.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fimports.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/imports.rs"}, {"sha": "380e24cc0b02365c14ee2dfa23158f1862f522ae", "filename": "rustfmt-core/tests/source/issue-1021.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1021.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1021.rs"}, {"sha": "bcfba41e7687d93d077d5343d910eabf1bafaa11", "filename": "rustfmt-core/tests/source/issue-1049.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1049.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1049.rs"}, {"sha": "2e1a89ad78eb93ae5e9217779e8acbffe172dced", "filename": "rustfmt-core/tests/source/issue-1111.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1111.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1111.rs"}, {"sha": "e85c9af99d457e2174ed8dbd99fbb2d624243d70", "filename": "rustfmt-core/tests/source/issue-1120.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1120.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1120.rs"}, {"sha": "69aa1bb1c5993dab56f5cc1be68adcbcbbd19a07", "filename": "rustfmt-core/tests/source/issue-1124.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1124.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1124.rs"}, {"sha": "9996c194818796b74575018e80ab99373b9238ea", "filename": "rustfmt-core/tests/source/issue-1127.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1127.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1127.rs"}, {"sha": "6742e17459efe395c6b85287e3ed4d1e77e174bc", "filename": "rustfmt-core/tests/source/issue-1158.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1158.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1158.rs"}, {"sha": "3ac423c5aef9b8c6b9e0e6ebe077a162ff12b01e", "filename": "rustfmt-core/tests/source/issue-1177.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1177.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1177.rs"}, {"sha": "4e39fbf9a366836123bc31ce3b1a4faefa0d3f26", "filename": "rustfmt-core/tests/source/issue-1192.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1192.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1192.rs"}, {"sha": "5818736bf6bafa70556233904ffe45b57854520f", "filename": "rustfmt-core/tests/source/issue-1211.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1211.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1211.rs"}, {"sha": "d727c158ab8e51666098f050af973394e8229978", "filename": "rustfmt-core/tests/source/issue-1216.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1216.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1216.rs"}, {"sha": "913058257ed3d939b57a3a17d7f8d4023a8582ba", "filename": "rustfmt-core/tests/source/issue-1239.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1239.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1239.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1239.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1239.rs"}, {"sha": "e25376561a94990ad99de4fa15e161c6b1ec9f34", "filename": "rustfmt-core/tests/source/issue-1278.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1278.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1278.rs"}, {"sha": "1baa1985a7ea0d248d98935036602b62a2569f18", "filename": "rustfmt-core/tests/source/issue-1350.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1350.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1350.rs"}, {"sha": "9d2964fc77cc7520bf24ca15a4aaa12b008ced8d", "filename": "rustfmt-core/tests/source/issue-1366.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1366.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1366.rs"}, {"sha": "4d0d4f0eb9855f9f8a277a0141efee1e7423f328", "filename": "rustfmt-core/tests/source/issue-1468.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1468.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1468.rs"}, {"sha": "0622ce5023510e084370ef03f3d934e9246230c3", "filename": "rustfmt-core/tests/source/issue-1693.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1693.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1693.rs"}, {"sha": "eae226532589dc7c4bd17993777f610050f20d96", "filename": "rustfmt-core/tests/source/issue-1800.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1800.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1800.rs"}, {"sha": "447296c4b874ef530b63cb3c19f718062b18634b", "filename": "rustfmt-core/tests/source/issue-1914.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1914.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-1914.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-1914.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-1914.rs"}, {"sha": "c6f61b4e3e19b939172b45cfc6ddf14fe8a4ea99", "filename": "rustfmt-core/tests/source/issue-2025.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-2025.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-2025.rs"}, {"sha": "d1b02053e2a0fa1a3ddd95eeb6146edef82fc673", "filename": "rustfmt-core/tests/source/issue-2111.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-2111.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-2111.rs"}, {"sha": "6c288e1bd62aa6e34334eea21510d74b900289e8", "filename": "rustfmt-core/tests/source/issue-2164.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-2164.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-2164.rs"}, {"sha": "ade953971ec36a58869c5dc80bfe45aa20748140", "filename": "rustfmt-core/tests/source/issue-2179.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-2179.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-2179.rs"}, {"sha": "b505b96e2b317a9857acd5ce93fda94f6e763f9d", "filename": "rustfmt-core/tests/source/issue-2256.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-2256.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-2256.rs"}, {"sha": "f86d24a146b436c9c7d7c2e0dc60244b31172c74", "filename": "rustfmt-core/tests/source/issue-2342.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2342.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-2342.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-2342.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-2342.rs"}, {"sha": "7c542cb58c2d46700ace18f4db81cd95a04a4413", "filename": "rustfmt-core/tests/source/issue-447.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-447.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-447.rs"}, {"sha": "4c60859e6cf3919bd1a731d0922e01fe270b3d72", "filename": "rustfmt-core/tests/source/issue-510.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-510.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-510.rs"}, {"sha": "b7a89b5d0f9dc3a10abced001a68abd4d9e864c8", "filename": "rustfmt-core/tests/source/issue-811.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-811.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-811.rs"}, {"sha": "c939716a6a881d2a5063ab0b27c8d7db01ccf73d", "filename": "rustfmt-core/tests/source/issue-850.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-850.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-850.rs"}, {"sha": "8f33fa685ae98267c4fd2a8ed61849dbcc29571d", "filename": "rustfmt-core/tests/source/issue-855.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-855.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-855.rs"}, {"sha": "e1c1b225fa549dd0ed56535d3932ab43ac70bfd5", "filename": "rustfmt-core/tests/source/issue-913.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-913.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-913.rs"}, {"sha": "37d703c4679f826122dc0edc45ffc59785662b66", "filename": "rustfmt-core/tests/source/issue-945.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-945.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-945.rs"}, {"sha": "b028b36a0559b671dbb0cfbb457aa4a80428cb52", "filename": "rustfmt-core/tests/source/issue-977.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fissue-977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fissue-977.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/issue-977.rs"}, {"sha": "38094d67a77374b289a06cae9e0fbdf5e49c29a8", "filename": "rustfmt-core/tests/source/item-brace-style-always-next-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-always-next-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/item-brace-style-always-next-line.rs"}, {"sha": "dff89b8b66b59ffb266a296684e94ed3c2a2ff86", "filename": "rustfmt-core/tests/source/item-brace-style-prefer-same-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-prefer-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-prefer-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-prefer-same-line.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/item-brace-style-prefer-same-line.rs"}, {"sha": "ee4a7c5daad1f9a833140880d28884ff78ff3dd6", "filename": "rustfmt-core/tests/source/item-brace-style-same-line-where.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-same-line-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-same-line-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fitem-brace-style-same-line-where.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/item-brace-style-same-line-where.rs"}, {"sha": "09e9169f340859e8366224533e1470c664de114c", "filename": "rustfmt-core/tests/source/large-block.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flarge-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flarge-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Flarge-block.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/large-block.rs"}, {"sha": "34d5bf399544dc85df45491b65f07802f6d22ba4", "filename": "rustfmt-core/tests/source/large_vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flarge_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flarge_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Flarge_vec.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/large_vec.rs"}, {"sha": "927ada0ffb2e0d5ce3a06d4a67cb40eb50c8e9ad", "filename": "rustfmt-core/tests/source/long-match-arms-brace-newline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flong-match-arms-brace-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flong-match-arms-brace-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Flong-match-arms-brace-newline.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/long-match-arms-brace-newline.rs"}, {"sha": "7aa626221aea5748b64982fec32c811974c9d532", "filename": "rustfmt-core/tests/source/long_field_access.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flong_field_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Flong_field_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Flong_field_access.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/long_field_access.rs"}, {"sha": "6e92cdc6c2c03257291c8c8c97cb757f087a1aa1", "filename": "rustfmt-core/tests/source/loop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Floop.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/loop.rs"}, {"sha": "d8de4dce38f235fb3654d0581f2591952525cfa4", "filename": "rustfmt-core/tests/source/macro_not_expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmacro_not_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmacro_not_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmacro_not_expr.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/macro_not_expr.rs"}, {"sha": "7d14f44971d5827f8d1f5f5ebcec2cfc9d23e802", "filename": "rustfmt-core/tests/source/macro_rules.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -0,0 +1,51 @@\n+macro_rules! m {\n+\t// a\n+\t($expr :expr,  $( $func : ident    ) *   ) => {\n+\t\t{\n+\t\tlet    x =    $expr;\n+\t\t\t\t\t\t\t\t\t                $func (\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tx\n+\t\t\t\t\t\t\t\t\t\t\t)\n+\t}\n+\t};\n+\n+\t\t\t\t/* b */\n+\n+   \t()           => {/* c */};\n+\n+\t\t \t\t\t\t(@tag)   =>\n+\t\t\t\t\t\t {\n+\n+\t\t\t\t\t\t };\n+\n+// d\n+( $item:ident  ) =>      {\n+\tmod macro_item    {  struct $item ; }\n+};\n+}\n+\n+macro m2 {\n+\t// a\n+\t($expr :expr,  $( $func : ident    ) *   ) => {\n+\t\t{\n+\t\tlet    x =    $expr;\n+\t\t\t\t\t\t\t\t\t                $func (\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tx\n+\t\t\t\t\t\t\t\t\t\t\t)\n+\t}\n+\t}\n+\n+\t\t\t\t/* b */\n+\n+   \t()           => {/* c */}\n+\n+\t\t \t\t\t\t(@tag)   =>\n+\t\t\t\t\t\t {\n+\n+\t\t\t\t\t\t }\n+\n+// d\n+( $item:ident  ) =>      {\n+\tmod macro_item    {  struct $item ; }\n+}\n+}"}, {"sha": "ffd5c19cc8c90fca0d67857334108df815d70b4d", "filename": "rustfmt-core/tests/source/macros.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmacros.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -332,3 +332,7 @@ macro foo() {\n   bar();\n   }\n }\n+\n+macro lex_err($kind: ident $(, $body: expr)*) {\n+    Err(QlError::LexError(LexError::$kind($($body,)*)))\n+}", "previous_filename": "tests/source/macros.rs"}, {"sha": "e9daac13bf96f03674eed676d5b8552e5397908e", "filename": "rustfmt-core/tests/source/match-block-trailing-comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmatch-block-trailing-comma.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/match-block-trailing-comma.rs"}, {"sha": "134d2fdf9a4a5bc1f1602936dee01335bb1f7164", "filename": "rustfmt-core/tests/source/match-nowrap-trailing-comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch-nowrap-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch-nowrap-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmatch-nowrap-trailing-comma.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/match-nowrap-trailing-comma.rs"}, {"sha": "db22cd9f010662002cfc5bf31f1f9663aa23d6ed", "filename": "rustfmt-core/tests/source/match-nowrap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch-nowrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch-nowrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmatch-nowrap.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/match-nowrap.rs"}, {"sha": "23df0d3b6813bee0b96d5e69e6c759e9d46d6e1f", "filename": "rustfmt-core/tests/source/match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmatch.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/match.rs"}, {"sha": "d49fbb7e30e5a08f5ffc253244fa9ceb8b627014", "filename": "rustfmt-core/tests/source/max-line-length-in-chars.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmax-line-length-in-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmax-line-length-in-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmax-line-length-in-chars.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/max-line-length-in-chars.rs"}, {"sha": "427a355b6bee0920517137ee772e2a1ee289aedd", "filename": "rustfmt-core/tests/source/mod-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmod-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmod-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmod-1.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/mod-1.rs"}, {"sha": "7202e00203ec9005a62469c71d5569030298f2cd", "filename": "rustfmt-core/tests/source/mod-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmod-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmod-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmod-2.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/mod-2.rs"}, {"sha": "d48c4a37e810a613a5e5f0e18743641af79ed969", "filename": "rustfmt-core/tests/source/mod_skip_child.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmod_skip_child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmod_skip_child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmod_skip_child.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/mod_skip_child.rs"}, {"sha": "68cfacfcb4bcfe80bfb391dc189c8d9cd6202225", "filename": "rustfmt-core/tests/source/multiple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmultiple.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/multiple.rs"}, {"sha": "9a54789ddcd6884c21aa6ead773598b1f0d67043", "filename": "rustfmt-core/tests/source/nested-if-else.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnested-if-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnested-if-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnested-if-else.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nested-if-else.rs"}, {"sha": "44b25ca8797d5f7b017c40a31cfccbb33e72a1ce", "filename": "rustfmt-core/tests/source/nested_skipped/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnested_skipped%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnested_skipped%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnested_skipped%2Fmod.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nested_skipped/mod.rs"}, {"sha": "d04e49570a4f64b034dc130df6ce61df6ec6dfe7", "filename": "rustfmt-core/tests/source/nestedmod/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nestedmod/mod.rs"}, {"sha": "5df457a8316530d7e239fc48476768a4c7bf5b7c", "filename": "rustfmt-core/tests/source/nestedmod/mod2a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2a.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nestedmod/mod2a.rs"}, {"sha": "f128e2da6dbfb64eb890ec0325395e9219719a60", "filename": "rustfmt-core/tests/source/nestedmod/mod2b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2b.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nestedmod/mod2b.rs"}, {"sha": "eda6b233e4beabf4a6fe9e314d3889234828c549", "filename": "rustfmt-core/tests/source/nestedmod/mod2c.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmod2c.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nestedmod/mod2c.rs"}, {"sha": "f28bde5e56dbbcd3572cf6c65680c6aede221f5c", "filename": "rustfmt-core/tests/source/nestedmod/mymod1/mod3a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fmymod1%2Fmod3a.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nestedmod/mymod1/mod3a.rs"}, {"sha": "0eaf08f0d2ca743c2708944abe29c2d5209054d2", "filename": "rustfmt-core/tests/source/nestedmod/submod2/a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fsubmod2%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fsubmod2%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fsubmod2%2Fa.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nestedmod/submod2/a.rs"}, {"sha": "52f8be910227ffbe03893778648fb6f331965248", "filename": "rustfmt-core/tests/source/nestedmod/submod2/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fsubmod2%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fsubmod2%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fnestedmod%2Fsubmod2%2Fmod.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/nestedmod/submod2/mod.rs"}, {"sha": "f79c691f0853c5b08e114041f7c8db43b0452fe0", "filename": "rustfmt-core/tests/source/no_new_line_beginning.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fno_new_line_beginning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fno_new_line_beginning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fno_new_line_beginning.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/no_new_line_beginning.rs"}, {"sha": "dfce84fcdc477bb869cf76e8f33b6f3019417757", "filename": "rustfmt-core/tests/source/other.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fother.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fother.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fother.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/other.rs"}, {"sha": "ebc26f146e4ab84739ad40c4acc8f37b61c675fe", "filename": "rustfmt-core/tests/source/paths.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fpaths.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/paths.rs"}, {"sha": "244e935639af50b0b40f1dc0be4412251d44bab2", "filename": "rustfmt-core/tests/source/pattern-condense-wildcards.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpattern-condense-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpattern-condense-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fpattern-condense-wildcards.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/pattern-condense-wildcards.rs"}, {"sha": "7c052c87bc457477445b6927b7047ef96badc37c", "filename": "rustfmt-core/tests/source/pattern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fpattern.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/pattern.rs"}, {"sha": "30051fa72ee7d0e6a70027ccdb614bfb1aa1f266", "filename": "rustfmt-core/tests/source/pub-restricted.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fpub-restricted.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/pub-restricted.rs"}, {"sha": "7466e21eed845dd337f600ffb44f963172bfdbfd", "filename": "rustfmt-core/tests/source/remove_blank_lines.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fremove_blank_lines.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/remove_blank_lines.rs"}, {"sha": "bcde390d1164dd55abad76f2ff15f5e1ada76ef9", "filename": "rustfmt-core/tests/source/single-line-if-else.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fsingle-line-if-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fsingle-line-if-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fsingle-line-if-else.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/single-line-if-else.rs"}, {"sha": "ace8359409cd23c119a2cb06aa8f1b0c9be5ad81", "filename": "rustfmt-core/tests/source/soft-wrapping.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fsoft-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fsoft-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fsoft-wrapping.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/soft-wrapping.rs"}, {"sha": "2a1e185690880c8871c0e264b5d64e4644fa3d9b", "filename": "rustfmt-core/tests/source/space-not-before-newline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fspace-not-before-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fspace-not-before-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fspace-not-before-newline.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/space-not-before-newline.rs"}, {"sha": "1936b5e161f825cc195bf2b223c228e73ab8cc18", "filename": "rustfmt-core/tests/source/spaces-around-ranges.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fspaces-around-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fspaces-around-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fspaces-around-ranges.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/spaces-around-ranges.rs"}, {"sha": "970786381cc47fc20a697d9e28dba8498a6a2773", "filename": "rustfmt-core/tests/source/static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstatic.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/static.rs"}, {"sha": "6b95e25a052b29ffdd171b46c783595cf608c468", "filename": "rustfmt-core/tests/source/string-lit-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstring-lit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstring-lit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstring-lit-2.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/string-lit-2.rs"}, {"sha": "e86f65f9f525b7af48be88908db8bf0befd7c526", "filename": "rustfmt-core/tests/source/string-lit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstring-lit.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/string-lit.rs"}, {"sha": "6a0afd45e5a6b2d76fdc3f5a5109d1de9408a04e", "filename": "rustfmt-core/tests/source/string_punctuation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstring_punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstring_punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstring_punctuation.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/string_punctuation.rs"}, {"sha": "76d6eda88538ea9cf01d10670477d43f9c20b008", "filename": "rustfmt-core/tests/source/struct-field-attributes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstruct-field-attributes.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/struct-field-attributes.rs"}, {"sha": "3a8016367b6804fa4471ca7db81e085c5896928c", "filename": "rustfmt-core/tests/source/struct_lits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/struct_lits.rs"}, {"sha": "256ba1bbda3b1971bb1a53726ef28494c3e245b4", "filename": "rustfmt-core/tests/source/struct_lits_multiline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_multiline.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/struct_lits_multiline.rs"}, {"sha": "2c6cc6749605ee28fad28f318b85c9f5129c2cb5", "filename": "rustfmt-core/tests/source/struct_lits_visual.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_visual.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/struct_lits_visual.rs"}, {"sha": "d0b5ea6efbaea7f6e36aa950b4cac2fdd008cb6d", "filename": "rustfmt-core/tests/source/struct_lits_visual_multiline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_visual_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_visual_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstruct_lits_visual_multiline.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/struct_lits_visual_multiline.rs"}, {"sha": "369feae71d25079bedff046ab243240fa4f0e50a", "filename": "rustfmt-core/tests/source/struct_tuple_visual.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_tuple_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstruct_tuple_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstruct_tuple_visual.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/struct_tuple_visual.rs"}, {"sha": "25070aef34c19532c0d7d239650c7ab2478c8dbb", "filename": "rustfmt-core/tests/source/structs.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fstructs.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "patch": "@@ -273,3 +273,11 @@ pub struct ReadinessCheckRegistry(Mutex<HashMap<Arc<String>, Box<Fn() -> Readine\n // #2144 unit struct with generics\n struct MyBox<T:?Sized>;\n struct MyBoxx<T, S> where T: ?Sized, S: Clone;\n+\n+// #2208\n+struct Test {\n+    /// foo\n+    #[serde(default)]\n+    pub join: Vec<String>,\n+    #[serde(default)] pub tls: bool,\n+}", "previous_filename": "tests/source/structs.rs"}, {"sha": "5985b514724ab47c1ce687a04a9fbd14d0a7e568", "filename": "rustfmt-core/tests/source/trailing-comma-never.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftrailing-comma-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftrailing-comma-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftrailing-comma-never.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/trailing-comma-never.rs"}, {"sha": "3e5fcc8080ffca58aebf41690b9ce43f4d0fe95c", "filename": "rustfmt-core/tests/source/trailing_commas.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftrailing_commas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftrailing_commas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftrailing_commas.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/trailing_commas.rs"}, {"sha": "e8de36db35e6e17bccd78849f5bf3c4f51ed1a76", "filename": "rustfmt-core/tests/source/trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftrait.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/trait.rs"}, {"sha": "ed83ee9e101c99b89000d0bf5ea6efbe4c59a6b5", "filename": "rustfmt-core/tests/source/try-conversion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftry-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftry-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftry-conversion.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/try-conversion.rs"}, {"sha": "6c3ec8f11151b753c3357df0aee8d80063971458", "filename": "rustfmt-core/tests/source/tuple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftuple.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/tuple.rs"}, {"sha": "3b761f4fc784e5517895176366ae174032de7ea7", "filename": "rustfmt-core/tests/source/type-ascription.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftype-ascription.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/type-ascription.rs"}, {"sha": "0980e4a3732c363c4a5a6055076633c365cecd9a", "filename": "rustfmt-core/tests/source/type-punctuation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype-punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype-punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftype-punctuation.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/type-punctuation.rs"}, {"sha": "0a46ffb2ee4a1f3da8b56dfde1626f905d8250cd", "filename": "rustfmt-core/tests/source/type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftype.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/type.rs"}, {"sha": "58c807f4029e2f6c72152d395a6bb929e9123a1d", "filename": "rustfmt-core/tests/source/type_alias.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Ftype_alias.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/type_alias.rs"}, {"sha": "fc2908e2d9e8f5a2666989c0f3e4bd342a0245a5", "filename": "rustfmt-core/tests/source/unions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Funions.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/unions.rs"}, {"sha": "e41e9a6cea1c600499d0ea7970718a206d0ef6a1", "filename": "rustfmt-core/tests/source/where-clause-rfc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause-rfc.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/where-clause-rfc.rs"}, {"sha": "9e4a2f656988be497dab08a009589f98dc1eeca3", "filename": "rustfmt-core/tests/source/where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fda14e0ae74c40d4815b423bfcd5466b1490a5/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause.rs?ref=c2fda14e0ae74c40d4815b423bfcd5466b1490a5", "previous_filename": "tests/source/where-clause.rs"}]}