{"sha": "f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYmZiZGE2NjVhNDFjZGYyZTFjMTRkNWUyNTk2NGNhMjhhMGMyN2E=", "commit": {"author": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2015-07-26T21:18:30Z"}, "committer": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2015-07-26T21:18:30Z"}, "message": "Standardize on non-zero checks for configure", "tree": {"sha": "685c8549bda8fa629cd6056481b29315c726a95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/685c8549bda8fa629cd6056481b29315c726a95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a", "html_url": "https://github.com/rust-lang/rust/commit/f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a/comments", "author": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7e825ecdb00023f481e5648b356d40b606fa35", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7e825ecdb00023f481e5648b356d40b606fa35", "html_url": "https://github.com/rust-lang/rust/commit/cf7e825ecdb00023f481e5648b356d40b606fa35"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "542d829e2cd638cbd9afe53666662b3a89070289", "filename": "configure", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f3bfbda665a41cdf2e1c14d5e25964ca28a0c27a", "patch": "@@ -283,7 +283,7 @@ opt_core() {\n             fi\n         done\n     else\n-        if [ ! -z \"$META\" ]\n+        if [ -n \"$META\" ]\n         then\n             OP=\"$OP=<$META>\"\n         fi\n@@ -317,7 +317,7 @@ envopt() {\n     fi\n \n     # If script or environment provided a value, save it.\n-    if [ ! -z \"$VV\" ]\n+    if [ -n \"$VV\" ]\n     then\n         putvar $V\n     fi\n@@ -767,7 +767,7 @@ probe CFG_LLDB             lldb\n # On MacOS X, invoking `javac` pops up a dialog if the JDK is not\n # installed. Since `javac` is only used if `antlr4` is available,\n # probe for it only in this case.\n-if [ ! -z \"$CFG_ANTLR4\" ]\n+if [ -n \"$CFG_ANTLR4\" ]\n then\n    probe CFG_JAVAC            javac\n fi\n@@ -786,14 +786,14 @@ then\n     fi\n fi\n \n-if [ ! -z \"$CFG_GDB\" ]\n+if [ -n \"$CFG_GDB\" ]\n then\n     # Store GDB's version\n     CFG_GDB_VERSION=$($CFG_GDB --version 2>/dev/null | head -1)\n     putvar CFG_GDB_VERSION\n fi\n \n-if [ ! -z \"$CFG_LLDB\" ]\n+if [ -n \"$CFG_LLDB\" ]\n then\n     # Store LLDB's version\n     CFG_LLDB_VERSION=$($CFG_LLDB --version 2>/dev/null | head -1)\n@@ -819,7 +819,7 @@ step_msg \"looking for target specific programs\"\n \n probe CFG_ADB        adb\n \n-if [ ! -z \"$CFG_PANDOC\" ]\n+if [ -n \"$CFG_PANDOC\" ]\n then\n     # Extract \"MAJOR MINOR\" from Pandoc's version number\n     PV_MAJOR_MINOR=$(pandoc --version | grep '^pandoc' |\n@@ -845,7 +845,7 @@ then\n     BIN_SUF=.exe\n fi\n \n-if [ ! -z \"$CFG_ENABLE_LOCAL_RUST\" ]\n+if [ -n \"$CFG_ENABLE_LOCAL_RUST\" ]\n then\n     system_rustc=$(which rustc)\n     if [ -f ${CFG_LOCAL_RUST_ROOT}/bin/rustc${BIN_SUF} ]\n@@ -930,18 +930,18 @@ fi\n \n # Okay, at this point, we have made up our minds about whether we are\n # going to force CFG_ENABLE_CLANG or not; save the setting if so.\n-if [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+if [ -n \"$CFG_ENABLE_CLANG\" ]\n then\n     putvar CFG_ENABLE_CLANG\n fi\n \n # Same with jemalloc.  save the setting here.\n-if [ ! -z \"$CFG_DISABLE_JEMALLOC\" ]\n+if [ -n \"$CFG_DISABLE_JEMALLOC\" ]\n then\n     putvar CFG_DISABLE_JEMALLOC\n fi\n \n-if [ ! -z \"$CFG_LLVM_ROOT\" -a -z \"$CFG_DISABLE_LLVM_VERSION_CHECK\" -a -e \"$CFG_LLVM_ROOT/bin/llvm-config\" ]\n+if [ -n \"$CFG_LLVM_ROOT\" -a -z \"$CFG_DISABLE_LLVM_VERSION_CHECK\" -a -e \"$CFG_LLVM_ROOT/bin/llvm-config\" ]\n then\n     step_msg \"using custom LLVM at $CFG_LLVM_ROOT\"\n \n@@ -970,7 +970,7 @@ fi\n # CFG_ENABLE_CLANG is set, that indicates that we are opting into\n # running such safeguards.\n \n-if [ ! -z \"$CC\" ]\n+if [ -n \"$CC\" ]\n then\n     msg \"skipping compiler inference steps; using provided CC=$CC\"\n     CFG_CC=\"$CC\"\n@@ -983,7 +983,7 @@ then\n         putvar CFG_USING_CLANG\n     fi\n else\n-    if [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+    if [ -n \"$CFG_ENABLE_CLANG\" ]\n     then\n         if [ -z \"$CFG_CLANG\" ]\n         then\n@@ -997,7 +997,7 @@ else\n     fi\n fi\n \n-if [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+if [ -n \"$CFG_ENABLE_CLANG\" ]\n then\n     case \"$CC\" in\n         (''|*clang)\n@@ -1013,7 +1013,7 @@ then\n             CFG_CLANG_VERSION=$(echo $CFG_CLANG_REPORTED_VERSION | sed 's/.*version \\(.*\\) .*/\\1/')\n         fi\n \n-        if [ ! -z \"$CFG_OSX_CLANG_VERSION\" ]\n+        if [ -n \"$CFG_OSX_CLANG_VERSION\" ]\n         then\n             case $CFG_OSX_CLANG_VERSION in\n                 (7.0*)\n@@ -1042,7 +1042,7 @@ then\n     esac\n fi\n \n-if [ ! -z \"$CFG_ENABLE_CCACHE\" ]\n+if [ -n \"$CFG_ENABLE_CCACHE\" ]\n then\n     if [ -z \"$CFG_CCACHE\" ]\n     then\n@@ -1199,7 +1199,7 @@ do\n                     ;;\n             esac\n             bindir=\"${CFG_MSVC_ROOT}/VC/bin\"\n-            if [ ! -z \"$msvc_part\" ]; then\n+            if [ -n \"$msvc_part\" ]; then\n                 bindir=\"$bindir/$msvc_part\"\n             fi\n             eval CFG_MSVC_BINDIR_$bits=\"\\\"$bindir\\\"\"\n@@ -1229,7 +1229,7 @@ do\n     esac\n done\n \n-if [ ! -z \"$CFG_PERF\" ]\n+if [ -n \"$CFG_PERF\" ]\n then\n     HAVE_PERF_LOGFD=`$CFG_PERF stat --log-fd 2>&1 | grep 'unknown option'`\n     if [ -z \"$HAVE_PERF_LOGFD\" ];\n@@ -1339,11 +1339,11 @@ then\n     \"${CFG_GIT}\" submodule init\n \n     # Disable submodules that we're not using\n-    if [ ! -z \"${CFG_LLVM_ROOT}\" ]; then\n+    if [ -n \"${CFG_LLVM_ROOT}\" ]; then\n         msg \"git: submodule deinit src/llvm\"\n         \"${CFG_GIT}\" submodule deinit src/llvm\n     fi\n-    if [ ! -z \"${CFG_JEMALLOC_ROOT}\" ]; then\n+    if [ -n \"${CFG_JEMALLOC_ROOT}\" ]; then\n         msg \"git: submodule deinit src/jemalloc\"\n         \"${CFG_GIT}\" submodule deinit src/jemalloc\n     fi\n@@ -1390,7 +1390,7 @@ do\n     if [ -z $CFG_LLVM_ROOT ]\n     then\n         LLVM_BUILD_DIR=${CFG_BUILD_DIR}$t/llvm\n-        if [ ! -z \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n+        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n         then\n             LLVM_DBG_OPTS=\"--enable-debug-symbols --disable-optimized\"\n             # Just use LLVM straight from its build directory to\n@@ -1446,7 +1446,7 @@ do\n         msg \"configuring LLVM for $t with cmake\"\n \n         CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n-        if [ ! -z \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n+        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n             CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n         else\n             CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n@@ -1538,7 +1538,7 @@ do\n \n             (*)\n             msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n-            if [ ! -z \"$CFG_ENABLE_CCACHE\" ]\n+            if [ -n \"$CFG_ENABLE_CCACHE\" ]\n             then\n                 if [ -z \"$CFG_CCACHE\" ]\n                 then\n@@ -1672,20 +1672,20 @@ putvar CFG_MANDIR\n \n # Avoid spurious warnings from clang by feeding it original source on\n # ccache-miss rather than preprocessed input.\n-if [ ! -z \"$CFG_ENABLE_CCACHE\" ] && [ ! -z \"$CFG_USING_CLANG\" ]\n+if [ -n \"$CFG_ENABLE_CCACHE\" ] && [ -n \"$CFG_USING_CLANG\" ]\n then\n     CFG_CCACHE_CPP2=1\n     putvar CFG_CCACHE_CPP2\n fi\n \n-if [ ! -z \"$CFG_ENABLE_CCACHE\" ]\n+if [ -n \"$CFG_ENABLE_CCACHE\" ]\n then\n     CFG_CCACHE_BASEDIR=${CFG_SRC_DIR}\n     putvar CFG_CCACHE_BASEDIR\n fi\n \n \n-if [ ! -z $BAD_PANDOC ]\n+if [ -n $BAD_PANDOC ]\n then\n     CFG_PANDOC=\n     putvar CFG_PANDOC"}]}