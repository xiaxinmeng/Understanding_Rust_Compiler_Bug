{"sha": "b26972e28bfc1b797e2dfa14435b551685cb180b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjk3MmUyOGJmYzFiNzk3ZTJkZmExNDQzNWI1NTE2ODVjYjE4MGI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-10-13T18:58:34Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-10-13T18:58:34Z"}, "message": "Make bors check that `compiletest` builds from both stage0 and stage1 rustc.\n\n----\n\nTo reproduce issue on commit ba246100ca3b0c3bd0d68548677d75e6790c4f60\nit does not suffice to add just `check-build-compiletest` to\n`check-secondary`; one must also ensure that `check-build-compiletest`\nprecedes the satisification of the `check` rule.\n\nOtherwise hidden dependencies of `compiletest` would end up getting\nsatisfied when make builds `rustc` at each stage in order to\neventually run `check-stage2`.\n\nSo to handle that I moved `check-secondary` before `check` in the\n`check-all` rule that bors uses, and for good measure, I also put\n`check-build-compiltest` at the front of the `check-secondary` rule's\ndependencies.\n\nMy understanding is that running `check-secondary` should be\nrelatively cheap, and thus such a reordering will not hurt bors.\n\n----\n\nFix #17883.", "tree": {"sha": "7d6c565251f5c36feae74f9acf30191b0ba740be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d6c565251f5c36feae74f9acf30191b0ba740be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b26972e28bfc1b797e2dfa14435b551685cb180b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b26972e28bfc1b797e2dfa14435b551685cb180b", "html_url": "https://github.com/rust-lang/rust/commit/b26972e28bfc1b797e2dfa14435b551685cb180b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b26972e28bfc1b797e2dfa14435b551685cb180b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbd4349c406b997b486426d2e3aa9f2cc1fbd0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbd4349c406b997b486426d2e3aa9f2cc1fbd0c", "html_url": "https://github.com/rust-lang/rust/commit/7dbd4349c406b997b486426d2e3aa9f2cc1fbd0c"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "6c8b926404edd7f08496017923b7c149bd8d3a34", "filename": "mk/tests.mk", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b26972e28bfc1b797e2dfa14435b551685cb180b/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b26972e28bfc1b797e2dfa14435b551685cb180b/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=b26972e28bfc1b797e2dfa14435b551685cb180b", "patch": "@@ -199,14 +199,29 @@ check-docs: cleantestlibs cleantmptestlogs check-stage2-docs\n \n # Some less critical tests that are not prone to breakage.\n # Not run as part of the normal test suite, but tested by bors on checkin.\n-check-secondary: check-lexer check-pretty\n+check-secondary: check-build-compiletest check-lexer check-pretty\n \n # check + check-secondary.\n-check-all: check check-secondary\n+#\n+# Issue #17883: build check-secondary first so hidden dependencies in\n+# e.g. building compiletest are exercised (resolve those by adding\n+# deps to rules that need them; not by putting `check` first here).\n+check-all: check-secondary check\n \n # Pretty-printing tests.\n check-pretty: check-stage2-T-$(CFG_BUILD)-H-$(CFG_BUILD)-pretty-exec\n \n+define DEF_CHECK_BUILD_COMPILETEST_FOR_STAGE\n+check-stage$(1)-build-compiletest: \t$$(HBIN$(1)_H_$(CFG_BUILD))/compiletest$$(X_$(CFG_BUILD))\n+endef\n+\n+$(foreach stage,$(STAGES), \\\n+ $(eval $(call DEF_CHECK_BUILD_COMPILETEST_FOR_STAGE,$(stage))))\n+\n+check-build-compiletest: \\\n+\tcheck-stage1-build-compiletest \\\n+\tcheck-stage2-build-compiletest\n+\n .PHONY: cleantmptestlogs cleantestlibs\n \n cleantmptestlogs:\n@@ -720,6 +735,13 @@ PRETTY_DEPS_pretty-rpass-full = $(RPASS_FULL_TESTS)\n PRETTY_DEPS_pretty-rfail = $(RFAIL_TESTS)\n PRETTY_DEPS_pretty-bench = $(BENCH_TESTS)\n PRETTY_DEPS_pretty-pretty = $(PRETTY_TESTS)\n+# The stage- and host-specific dependencies are for e.g. macro_crate_test which pulls in\n+# external crates.\n+PRETTY_DEPS$(1)_H_$(3)_pretty-rpass =\n+PRETTY_DEPS$(1)_H_$(3)_pretty-rpass-full = $$(HLIB$(1)_H_$(3))/stamp.syntax $$(HLIB$(1)_H_$(3))/stamp.rustc\n+PRETTY_DEPS$(1)_H_$(3)_pretty-rfail =\n+PRETTY_DEPS$(1)_H_$(3)_pretty-bench =\n+PRETTY_DEPS$(1)_H_$(3)_pretty-pretty =\n PRETTY_DIRNAME_pretty-rpass = run-pass\n PRETTY_DIRNAME_pretty-rpass-full = run-pass-fulldeps\n PRETTY_DIRNAME_pretty-rfail = run-fail\n@@ -738,7 +760,8 @@ check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t        $$(PRETTY_DEPS_$(4))\n+\t        $$(PRETTY_DEPS_$(4)) \\\n+\t        $$(PRETTY_DEPS$(1)_H_$(3)_$(4))\n \t@$$(call E, run pretty-rpass [$(2)]: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n \t\t$$(PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\"}]}