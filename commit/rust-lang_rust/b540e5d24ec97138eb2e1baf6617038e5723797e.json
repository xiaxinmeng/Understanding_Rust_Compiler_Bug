{"sha": "b540e5d24ec97138eb2e1baf6617038e5723797e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDBlNWQyNGVjOTcxMzhlYjJlMWJhZjY2MTcwMzhlNTcyMzc5N2U=", "commit": {"author": {"name": "Christian Poveda", "email": "31802960+christianpoveda@users.noreply.github.com", "date": "2019-09-28T19:22:57Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T15:54:51Z"}, "message": "Reserve fides for stdio and fix merge issues", "tree": {"sha": "f60801a58ca2dba58896e5117bc3f4ed4a518e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60801a58ca2dba58896e5117bc3f4ed4a518e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b540e5d24ec97138eb2e1baf6617038e5723797e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b540e5d24ec97138eb2e1baf6617038e5723797e", "html_url": "https://github.com/rust-lang/rust/commit/b540e5d24ec97138eb2e1baf6617038e5723797e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b540e5d24ec97138eb2e1baf6617038e5723797e/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca3a917a6fdc02caf40b5c466b8394be7f61f0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3a917a6fdc02caf40b5c466b8394be7f61f0d5", "html_url": "https://github.com/rust-lang/rust/commit/ca3a917a6fdc02caf40b5c466b8394be7f61f0d5"}, {"sha": "b6258120927c3518e3f9b747fb86da5ebfd9051c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6258120927c3518e3f9b747fb86da5ebfd9051c", "html_url": "https://github.com/rust-lang/rust/commit/b6258120927c3518e3f9b747fb86da5ebfd9051c"}], "stats": {"total": 161, "additions": 97, "deletions": 64}, "files": [{"sha": "c3d575403cb3ddef70075c371ff99c6dead47bd2", "filename": ".appveyor.yml", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -17,16 +17,21 @@ cache:\n     - '%USERPROFILE%\\.rustup'\n \n install:\n+    # Compute the rust version we use\n+    - set /p RUSTC_HASH=<rust-version\n     # Install Rust\n     - curl -sSf --retry 3 -o rustup-init.exe https://win.rustup.rs/\n     - rustup-init.exe -y --default-host %TARGET% --default-toolchain stable\n     - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n+    - rustup default stable\n+    - rustup uninstall beta\n+    - rustup update\n     # Install \"master\" toolchain\n     - cargo install rustup-toolchain-install-master & exit 0\n-    - set /p RUSTC_HASH=<rust-version\n     - rustup-toolchain-install-master -f -n master %RUSTC_HASH% -c cargo -c rust-src\n     - rustup default master\n     - rustc --version\n+    - cargo --version\n \n build_script:\n     - set RUSTFLAGS=-C debug-assertions"}, {"sha": "446fab7941105aeede2228f7c6ffe18918a65a25", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -33,12 +33,15 @@ before_script:\n # Install Rust (\"stable\" toolchain for better caching, it is just used to build rustup-toolchain-install-master)\n - curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain stable\n - export PATH=$HOME/.cargo/bin:$PATH\n+- rustup default stable\n+- rustup uninstall beta\n - rustup update\n # Install \"master\" toolchain\n - cargo install rustup-toolchain-install-master || echo \"rustup-toolchain-install-master already installed\"\n - travis_retry rustup-toolchain-install-master -f -n master $RUSTC_HASH -c rust-src\n - rustup default master\n - rustc --version\n+- cargo --version\n \n script:\n - ./travis.sh"}, {"sha": "5a5c774169cff110c1e8899893e94550ad77e09d", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -59,5 +59,5 @@ cargo_miri = [\"cargo_metadata\", \"directories\", \"rustc_version\"]\n rustc_tests = []\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.3.22\", features = [\"tmp\", \"stable\"] }\n+compiletest_rs = { version = \"0.3.23\", features = [\"tmp\"] }\n colored = \"1.6\""}, {"sha": "08d4c1dc23426d9a9a3c4afc5e52a09d63870cf4", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -1 +1 @@\n-ea3ba36f3f4b7f0168a27d23c499efeb2304e2d5\n+084beb83e0e87d673d5fabc844d28e8e8ae2ab4c"}, {"sha": "5f814fd1986222694bbecf3f393058c0f7c1bfc1", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -46,7 +46,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 struct Visitor<'tcx>(TyCtxt<'tcx>);\n                 impl<'tcx, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'tcx> {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n-                        if let hir::ItemKind::Fn(.., body_id) = i.node {\n+                        if let hir::ItemKind::Fn(.., body_id) = i.kind {\n                             if i.attrs.iter().any(|attr| attr.check_name(syntax::symbol::sym::test)) {\n                                 let config = MiriConfig {\n                                     validate: true,"}, {"sha": "1b7c082ec37ba10a78d2febfd7a67c734a6a594d", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -63,7 +63,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         ty::ParamEnv::reveal_all(),\n         start_id,\n         ecx.tcx.mk_substs(\n-            ::std::iter::once(ty::subst::Kind::from(main_ret_ty)))\n+            ::std::iter::once(ty::subst::GenericArg::from(main_ret_ty)))\n         ).unwrap();\n     let start_mir = ecx.load_mir(start_instance.def, None)?;\n "}, {"sha": "3bee028c5eb7a7148620869755f8838107c66465", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -211,7 +211,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             fn visit_value(&mut self, v: MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx>\n             {\n                 trace!(\"UnsafeCellVisitor: {:?} {:?}\", *v, v.layout.ty);\n-                let is_unsafe_cell = match v.layout.ty.sty {\n+                let is_unsafe_cell = match v.layout.ty.kind {\n                     ty::Adt(adt, _) => Some(adt.did) == self.ecx.tcx.lang_items().unsafe_cell_type(),\n                     _ => false,\n                 };"}, {"sha": "6f8785891c27a64b1241f0fd77be32c8322eafab", "filename": "src/shims/io.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -5,13 +5,23 @@ use std::io::Read;\n use crate::stacked_borrows::Tag;\n use crate::*;\n \n-#[derive(Default)]\n pub struct FileHandler {\n     files: HashMap<i32, File>,\n     flags: HashMap<i32, i32>,\n     low: i32,\n }\n \n+impl Default for FileHandler {\n+    fn default() -> Self {\n+        FileHandler {\n+            files: Default::default(),\n+            flags: Default::default(),\n+            // 0, 1 and 2 are reserved for stdin, stdout and stderr\n+            low: 3,\n+        }\n+    }\n+}\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn open("}, {"sha": "3df5b839e5d782d11d517630aedb4ac10c75dac7", "filename": "src/shims/mod.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -1,11 +1,11 @@\n+pub mod dlsym;\n+pub mod env;\n pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n-pub mod dlsym;\n-pub mod env;\n pub mod io;\n \n-use rustc::{ty, mir};\n+use rustc::{mir, ty};\n \n use crate::*;\n \n@@ -19,7 +19,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n-        trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest.map(|place| *place));\n+        trace!(\n+            \"eval_fn_call: {:#?}, {:?}\",\n+            instance,\n+            dest.map(|place| *place)\n+        );\n \n         // First, run the common hooks also supported by CTFE.\n         if this.hook_fn(instance, args, dest)? {\n@@ -28,27 +32,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n-\n-            let n = {\n-                let ptr = this.force_ptr(this.read_scalar(args[0])?.not_undef()?)?;\n-                let align = this.force_bits(\n-                    this.read_scalar(args[1])?.not_undef()?,\n-                    this.pointer_size()\n-                )? as usize;\n-\n-                let stride = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n-                // if the allocation alignment is at least the required alignment, we use the\n-                // libcore implementation\n-                if stride >= align {\n-                    ((stride + ptr.offset.bytes() as usize) as *const ())\n-                        .align_offset(align) as u128\n-                } else {\n-                    u128::max_value()\n-                }\n-            };\n-\n             let dest = dest.unwrap();\n-            let n = this.truncate(n, dest.layout);\n+            let n = this\n+                .align_offset(args[0], args[1])?\n+                .unwrap_or_else(|| this.truncate(u128::max_value(), dest.layout));\n             this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n             this.goto_block(ret)?;\n             return Ok(None);\n@@ -66,4 +53,39 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Otherwise, load the MIR.\n         Ok(Some(this.load_mir(instance.def, None)?))\n     }\n+\n+    fn align_offset(\n+        &mut self,\n+        ptr_op: OpTy<'tcx, Tag>,\n+        align_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, Option<u128>> {\n+        let this = self.eval_context_mut();\n+\n+        let req_align = this.force_bits(\n+            this.read_scalar(align_op)?.not_undef()?,\n+            this.pointer_size(),\n+        )? as usize;\n+\n+        // FIXME: This should actually panic in the interpreted program\n+        if !req_align.is_power_of_two() {\n+            throw_unsup_format!(\"Required alignment should always be a power of two\")\n+        }\n+\n+        let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n+\n+        if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n+            let cur_align = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n+            if cur_align >= req_align {\n+                // if the allocation alignment is at least the required alignment we use the\n+                // libcore implementation\n+                return Ok(Some(\n+                    (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n+                        .align_offset(req_align) as u128,\n+                ));\n+            }\n+        }\n+        // If the allocation alignment is smaller than then required alignment or the pointer was\n+        // actually an integer, we return `None`\n+        Ok(None)\n+    }\n }"}, {"sha": "5258cbb5485b4bd5ce9ced346d68873483dca5a7", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -435,7 +435,7 @@ impl<'tcx> Stacks {\n \n         Stacks {\n             stacks: RefCell::new(RangeMap::new(size, stack)),\n-            global: extra, \n+            global: extra,\n         }\n     }\n \n@@ -460,7 +460,7 @@ impl Stacks {\n     pub fn new_allocation(\n         id: AllocId,\n         size: Size,\n-        extra: MemoryExtra, \n+        extra: MemoryExtra,\n         kind: MemoryKind<MiriMemoryKind>,\n     ) -> (Self, Tag) {\n         let (tag, perm) = match kind {\n@@ -616,7 +616,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n         // making it useless.\n         fn qualify(ty: ty::Ty<'_>, kind: RetagKind) -> Option<(RefKind, bool)> {\n-            match ty.sty {\n+            match ty.kind {\n                 // References are simple.\n                 ty::Ref(_, _, MutMutable) =>\n                     Some((RefKind::Unique { two_phase: kind == RetagKind::TwoPhase}, kind == RetagKind::FnEntry)),"}, {"sha": "70476fbdcb0617def14701b7ef75406fd0b3e6b7", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -25,22 +25,22 @@ version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cfg-if\"\n-version = \"0.1.9\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.1.11\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasi 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -68,13 +68,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rand\"\n-version = \"0.7.0\"\n+version = \"0.7.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_pcg 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -85,23 +85,23 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_core\"\n-version = \"0.5.0\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_hc\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -110,27 +110,27 @@ version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wasi\"\n-version = \"0.5.0\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n \"checksum autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n \"checksum byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \"checksum c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d64d04786e0f528460fc884753cf8dddcc466be308f6026f8e355c41a0e4101\"\n-\"checksum cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b486ce3ccf7ffd79fdeb678eac06a9e6c09fc88d33836340becb8fffe87c5e33\"\n-\"checksum getrandom 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc344b02d3868feb131e8b5fe2b9b0a1cc42942679af493061fc13b853243872\"\n+\"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+\"checksum getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"473a1265acc8ff1e808cd0a1af8cee3c2ee5200916058a2ca113c29f2d903571\"\n \"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \"checksum libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34fcd2c08d2f832f376f4173a231990fa5aef4e99fb569867318a227ef4c06ba\"\n \"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n \"checksum ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3cbf9f658cdb5000fcf6f362b8ea2ba154b9f146a61c7a20d647034c6b6561b\"\n-\"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\"\n+\"checksum rand 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ae1b169243eaf61759b8475a998f0a385e42042370f3a7dbaf35246eacc8412\"\n \"checksum rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n-\"checksum rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"615e683324e75af5d43d8f7a39ffe3ee4a9dc42c5c701167a71dc59c3a493aca\"\n+\"checksum rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n \"checksum rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n \"checksum rand_pcg 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e196346cbbc5c70c77e7b4926147ee8e383a38ee4d15d58a08098b169e492b6\"\n-\"checksum wasi 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd5442abcac6525a045cc8c795aedb60da7a2e5e89c7bf18a0d5357849bb23c7\"\n+\"checksum wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b89c3ce4ce14bdc6fb6beaf9ec7928ca331de5df7e5ea278375642a2f478570d\""}, {"sha": "6c6ff6b6173cb8b0a2ad98d35f922246feb4712e", "filename": "tests/run-pass/aligned_utf8_check.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/tests%2Frun-pass%2Faligned_utf8_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/tests%2Frun-pass%2Faligned_utf8_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faligned_utf8_check.rs?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -1,13 +1,6 @@\n fn main() {\n     const N: usize = 10;\n-\n-    let x = vec![0x4141u16; N];\n-\n-    let mut y: Vec<u8> = unsafe { std::mem::transmute(x) };\n-    unsafe { y.set_len(2 * N) };\n-\n-    println!(\"{:?}\", std::str::from_utf8(&y).unwrap());\n-\n-    let mut x: Vec<u16> = unsafe { std::mem::transmute(y) };\n-    unsafe { x.set_len(N) };\n+    let vec = vec![0x4141414141414141u64; N];\n+    let content = unsafe { std::slice::from_raw_parts(vec.as_ptr() as *const u8, 8 * N) };\n+    println!(\"{:?}\", std::str::from_utf8(content).unwrap());\n }"}, {"sha": "66d439948159632e13543778e040edd9f3cfca17", "filename": "tests/run-pass/aligned_utf8_check.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b540e5d24ec97138eb2e1baf6617038e5723797e/tests%2Frun-pass%2Faligned_utf8_check.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b540e5d24ec97138eb2e1baf6617038e5723797e/tests%2Frun-pass%2Faligned_utf8_check.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faligned_utf8_check.stdout?ref=b540e5d24ec97138eb2e1baf6617038e5723797e", "patch": "@@ -1 +1 @@\n-\"AAAAAAAAAAAAAAAAAAAA\"\n+\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\""}]}