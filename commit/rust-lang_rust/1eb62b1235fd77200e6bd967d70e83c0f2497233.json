{"sha": "1eb62b1235fd77200e6bd967d70e83c0f2497233", "node_id": "C_kwDOAAsO6NoAKDFlYjYyYjEyMzVmZDc3MjAwZTZiZDk2N2Q3MGU4M2MwZjI0OTcyMzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T17:10:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T17:10:58Z"}, "message": "Auto merge of #104983 - matthiaskrgr:rollup-018sk73, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #95836 (Use `rust_out{exe_suffix}` for doctests)\n - #104882 (notify lcnr on changes to `ObligationCtxt`)\n - #104892 (Explain how to get the discriminant out of a `#[repr(T)] enum` with payload)\n - #104917 (Allow non-org members to label `requires-debug-assertions`)\n - #104931 (Pretty-print generators with their `generator_kind`)\n - #104934 (Remove redundant `all` in cfg)\n - #104944 (Support unit tests for jsondoclint)\n - #104946 (rustdoc: improve popover focus handling JS)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fa4a9e83e0ac95a98069059afcd1b1d3cc56f3a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4a9e83e0ac95a98069059afcd1b1d3cc56f3a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb62b1235fd77200e6bd967d70e83c0f2497233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb62b1235fd77200e6bd967d70e83c0f2497233", "html_url": "https://github.com/rust-lang/rust/commit/1eb62b1235fd77200e6bd967d70e83c0f2497233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb62b1235fd77200e6bd967d70e83c0f2497233/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454784afba5bf35b5ff14ada0e31265ad1d75e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/454784afba5bf35b5ff14ada0e31265ad1d75e73", "html_url": "https://github.com/rust-lang/rust/commit/454784afba5bf35b5ff14ada0e31265ad1d75e73"}, {"sha": "55cf566f041e110d5cfe39b49391dcb33f8da37b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55cf566f041e110d5cfe39b49391dcb33f8da37b", "html_url": "https://github.com/rust-lang/rust/commit/55cf566f041e110d5cfe39b49391dcb33f8da37b"}], "stats": {"total": 432, "additions": 318, "deletions": 114}, "files": [{"sha": "fd01fcf1fc82c071e954c87da03120df72d26a67", "filename": "compiler/rustc_codegen_gcc/example/alloc_system.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -13,17 +13,17 @@\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values.\n-#[cfg(all(any(target_arch = \"x86\",\n+#[cfg(any(target_arch = \"x86\",\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n               target_arch = \"powerpc\",\n-              target_arch = \"powerpc64\")))]\n+              target_arch = \"powerpc64\"))]\n const MIN_ALIGN: usize = 8;\n-#[cfg(all(any(target_arch = \"x86_64\",\n+#[cfg(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\",\n               target_arch = \"mips64\",\n               target_arch = \"s390x\",\n-              target_arch = \"sparc64\")))]\n+              target_arch = \"sparc64\"))]\n const MIN_ALIGN: usize = 16;\n \n pub struct System;"}, {"sha": "f4e1f84bfb3714d41447fd31fd95a4ec25860e33", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -376,7 +376,7 @@ impl<'tcx> NonConstOp<'tcx> for Generator {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let msg = format!(\"{}s are not allowed in {}s\", self.0, ccx.const_kind());\n+        let msg = format!(\"{}s are not allowed in {}s\", self.0.descr(), ccx.const_kind());\n         if let hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) = self.0 {\n             ccx.tcx.sess.create_feature_err(\n                 UnallowedOpInConstContext { span, msg },"}, {"sha": "660b402f988a12d20e9906241e9e72ee94c2679d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -1526,9 +1526,9 @@ pub enum AsyncGeneratorKind {\n impl fmt::Display for AsyncGeneratorKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match self {\n-            AsyncGeneratorKind::Block => \"`async` block\",\n-            AsyncGeneratorKind::Closure => \"`async` closure body\",\n-            AsyncGeneratorKind::Fn => \"`async fn` body\",\n+            AsyncGeneratorKind::Block => \"async block\",\n+            AsyncGeneratorKind::Closure => \"async closure body\",\n+            AsyncGeneratorKind::Fn => \"async fn body\",\n         })\n     }\n }"}, {"sha": "4e044d39d50a1e81d13b166d4eb91eb883f49a7f", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -118,7 +118,8 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                 } else {\n                     let note = format!(\n                         \"the type is part of the {} because of this {}\",\n-                        self.kind, yield_data.source\n+                        self.kind.descr(),\n+                        yield_data.source\n                     );\n \n                     self.fcx"}, {"sha": "44b85098630893b0cd495bb964e990b9d1b9f9a5", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -681,25 +681,20 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Str => p!(\"str\"),\n             ty::Generator(did, substs, movability) => {\n-                // FIXME(swatinem): async constructs used to be pretty printed\n-                // as `impl Future` previously due to the `from_generator` wrapping.\n-                // lets special case this here for now to avoid churn in diagnostics.\n-                let generator_kind = self.tcx().generator_kind(did);\n-                if matches!(generator_kind, Some(hir::GeneratorKind::Async(..))) {\n-                    let return_ty = substs.as_generator().return_ty();\n-                    p!(write(\"impl Future<Output = {}>\", return_ty));\n-\n-                    return Ok(self);\n-                }\n-\n                 p!(write(\"[\"));\n-                match movability {\n-                    hir::Movability::Movable => {}\n-                    hir::Movability::Static => p!(\"static \"),\n+                let generator_kind = self.tcx().generator_kind(did).unwrap();\n+                let should_print_movability =\n+                    self.should_print_verbose() || generator_kind == hir::GeneratorKind::Gen;\n+\n+                if should_print_movability {\n+                    match movability {\n+                        hir::Movability::Movable => {}\n+                        hir::Movability::Static => p!(\"static \"),\n+                    }\n                 }\n \n                 if !self.should_print_verbose() {\n-                    p!(\"generator\");\n+                    p!(write(\"{}\", generator_kind));\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n                         let span = self.tcx().def_span(did);"}, {"sha": "47aa4dfba42bb9fc288a561eaef5b6875e5e216e", "filename": "compiler/rustc_span/src/analyze_source_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -41,7 +41,7 @@ pub fn analyze_source_file(\n }\n \n cfg_if::cfg_if! {\n-    if #[cfg(all(any(target_arch = \"x86\", target_arch = \"x86_64\")))] {\n+    if #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))] {\n         fn analyze_source_file_dispatch(src: &str,\n                                     source_file_start_pos: BytePos,\n                                     lines: &mut Vec<BytePos>,"}, {"sha": "b7728b054e4e043c40de2f83f32571a1a2eccd05", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -2673,7 +2673,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 let sp = self.tcx.def_span(def_id);\n \n                                 // Special-case this to say \"async block\" instead of `[static generator]`.\n-                                let kind = tcx.generator_kind(def_id).unwrap();\n+                                let kind = tcx.generator_kind(def_id).unwrap().descr();\n                                 err.span_note(\n                                     sp,\n                                     &format!(\"required because it's used within this {}\", kind),"}, {"sha": "383bdc7b6e2e9f945d008186a4574744b186a92d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -1113,7 +1113,10 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// # Stability\n ///\n /// The discriminant of an enum variant may change if the enum definition changes. A discriminant\n-/// of some variant will not change between compilations with the same compiler.\n+/// of some variant will not change between compilations with the same compiler. See the [Reference]\n+/// for more information.\n+///\n+/// [Reference]: ../../reference/items/enumerations.html#custom-discriminant-values-for-fieldless-enumerations\n ///\n /// # Examples\n ///\n@@ -1129,6 +1132,62 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));\n /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));\n /// ```\n+///\n+/// ## Accessing the numeric value of the discriminant\n+///\n+/// Note that it is *undefined behavior* to [`transmute`] from [`Discriminant`] to a primitive!\n+///\n+/// If an enum has only unit variants, then the numeric value of the discriminant can be accessed\n+/// with an [`as`] cast:\n+///\n+/// ```\n+/// enum Enum {\n+///     Foo,\n+///     Bar,\n+///     Baz,\n+/// }\n+///\n+/// assert_eq!(0, Enum::Foo as isize);\n+/// assert_eq!(1, Enum::Bar as isize);\n+/// assert_eq!(2, Enum::Baz as isize);\n+/// ```\n+///\n+/// If an enum has opted-in to having a [primitive representation] for its discriminant,\n+/// then it's possible to use pointers to read the memory location storing the discriminant.\n+/// That **cannot** be done for enums using the [default representation], however, as it's\n+/// undefined what layout the discriminant has and where it's stored \u2014 it might not even be\n+/// stored at all!\n+///\n+/// [`as`]: ../../std/keyword.as.html\n+/// [primitive representation]: ../../reference/type-layout.html#primitive-representations\n+/// [default representation]: ../../reference/type-layout.html#the-default-representation\n+/// ```\n+/// #[repr(u8)]\n+/// enum Enum {\n+///     Unit,\n+///     Tuple(bool),\n+///     Struct { a: bool },\n+/// }\n+///\n+/// impl Enum {\n+///     fn discriminant(&self) -> u8 {\n+///         // SAFETY: Because `Self` is marked `repr(u8)`, its layout is a `repr(C)` `union`\n+///         // between `repr(C)` structs, each of which has the `u8` discriminant as its first\n+///         // field, so we can read the discriminant without offsetting the pointer.\n+///         unsafe { *<*const _>::from(self).cast::<u8>() }\n+///     }\n+/// }\n+///\n+/// let unit_like = Enum::Unit;\n+/// let tuple_like = Enum::Tuple(true);\n+/// let struct_like = Enum::Struct { a: false };\n+/// assert_eq!(0, unit_like.discriminant());\n+/// assert_eq!(1, tuple_like.discriminant());\n+/// assert_eq!(2, struct_like.discriminant());\n+///\n+/// // \u26a0\ufe0f This is undefined behavior. Don't do this. \u26a0\ufe0f\n+/// // assert_eq!(0, unsafe { std::mem::transmute::<_, u8>(std::mem::discriminant(&unit_like)) });\n+/// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mem_discriminant\")]"}, {"sha": "3edbe7280774d44d75ff56e5bb4100ff6b10d272", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -4,7 +4,7 @@ use crate::ptr;\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values.\n-#[cfg(all(any(\n+#[cfg(any(\n     target_arch = \"x86\",\n     target_arch = \"arm\",\n     target_arch = \"mips\",\n@@ -16,23 +16,23 @@ use crate::ptr;\n     target_arch = \"hexagon\",\n     all(target_arch = \"riscv32\", not(target_os = \"espidf\")),\n     all(target_arch = \"xtensa\", not(target_os = \"espidf\")),\n-)))]\n+))]\n pub const MIN_ALIGN: usize = 8;\n-#[cfg(all(any(\n+#[cfg(any(\n     target_arch = \"x86_64\",\n     target_arch = \"aarch64\",\n     target_arch = \"mips64\",\n     target_arch = \"s390x\",\n     target_arch = \"sparc64\",\n     target_arch = \"riscv64\",\n     target_arch = \"wasm64\",\n-)))]\n+))]\n pub const MIN_ALIGN: usize = 16;\n // The allocator on the esp-idf platform guarantees 4 byte alignment.\n-#[cfg(all(any(\n+#[cfg(any(\n     all(target_arch = \"riscv32\", target_os = \"espidf\"),\n     all(target_arch = \"xtensa\", target_os = \"espidf\"),\n-)))]\n+))]\n pub const MIN_ALIGN: usize = 4;\n \n pub unsafe fn realloc_fallback("}, {"sha": "cff5fd8c5b02cb46ea3656dfa548b87ae7b12dff", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -644,6 +644,7 @@ impl<'a> Builder<'a> {\n                 test::CrateLibrustc,\n                 test::CrateRustdoc,\n                 test::CrateRustdocJsonTypes,\n+                test::CrateJsonDocLint,\n                 test::Linkcheck,\n                 test::TierCheck,\n                 test::ReplacePlaceholderTest,"}, {"sha": "39cedfdac5f775d7630f90195d81d226c7f671ec", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -90,6 +90,42 @@ fn try_run_quiet(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     true\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct CrateJsonDocLint {\n+    host: TargetSelection,\n+}\n+\n+impl Step for CrateJsonDocLint {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/jsondoclint\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(CrateJsonDocLint { host: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let bootstrap_host = builder.config.build;\n+        let compiler = builder.compiler(0, bootstrap_host);\n+\n+        let cargo = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolBootstrap,\n+            bootstrap_host,\n+            \"test\",\n+            \"src/tools/jsondoclint\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        try_run(builder, &mut cargo.into());\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Linkcheck {\n     host: TargetSelection,"}, {"sha": "81d9c46447a379d0f570026412597fc0656e001c", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -19,7 +19,7 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, FileName, Pos, Span, DUMMY_SP};\n-use rustc_target::spec::TargetTriple;\n+use rustc_target::spec::{Target, TargetTriple};\n use tempfile::Builder as TempFileBuilder;\n \n use std::env;\n@@ -293,6 +293,16 @@ struct UnusedExterns {\n     unused_extern_names: Vec<String>,\n }\n \n+fn add_exe_suffix(input: String, target: &TargetTriple) -> String {\n+    let exe_suffix = match target {\n+        TargetTriple::TargetTriple(_) => Target::expect_builtin(target).options.exe_suffix,\n+        TargetTriple::TargetJson { contents, .. } => {\n+            Target::from_json(contents.parse().unwrap()).unwrap().0.options.exe_suffix\n+        }\n+    };\n+    input + &exe_suffix\n+}\n+\n fn run_test(\n     test: &str,\n     crate_name: &str,\n@@ -313,7 +323,9 @@ fn run_test(\n     let (test, line_offset, supports_color) =\n         make_test(test, Some(crate_name), lang_string.test_harness, opts, edition, Some(test_id));\n \n-    let output_file = outdir.path().join(\"rust_out\");\n+    // Make sure we emit well-formed executable names for our target.\n+    let rust_out = add_exe_suffix(\"rust_out\".to_owned(), &target);\n+    let output_file = outdir.path().join(rust_out);\n \n     let rustc_binary = rustdoc_options\n         .test_builder"}, {"sha": "7230df36c075b071081e51f6f1caf4338d02e211", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -202,6 +202,7 @@ function loadCss(cssUrl) {\n         if (event.ctrlKey || event.altKey || event.metaKey) {\n             return;\n         }\n+        window.hideAllModals(false);\n         addClass(getSettingsButton(), \"rotate\");\n         event.preventDefault();\n         // Sending request for the CSS and the JS files at the same time so it will\n@@ -377,7 +378,7 @@ function loadCss(cssUrl) {\n         }\n         ev.preventDefault();\n         searchState.defocus();\n-        window.hidePopoverMenus();\n+        window.hideAllModals(true); // true = reset focus for notable traits\n     }\n \n     function handleShortcut(ev) {\n@@ -767,6 +768,7 @@ function loadCss(cssUrl) {\n     };\n \n     function showSidebar() {\n+        window.hideAllModals(false);\n         window.rustdocMobileScrollLock();\n         const sidebar = document.getElementsByClassName(\"sidebar\")[0];\n         addClass(sidebar, \"shown\");\n@@ -843,7 +845,7 @@ function loadCss(cssUrl) {\n             // Make this function idempotent.\n             return;\n         }\n-        hideNotable(false);\n+        window.hideAllModals(false);\n         const ty = e.getAttribute(\"data-ty\");\n         const wrapper = document.createElement(\"div\");\n         wrapper.innerHTML = \"<div class=\\\"docblock\\\">\" + window.NOTABLE_TRAITS[ty] + \"</div>\";\n@@ -1049,14 +1051,24 @@ function loadCss(cssUrl) {\n         return container;\n     }\n \n+    /**\n+     * Hide popover menus, notable trait tooltips, and the sidebar (if applicable).\n+     *\n+     * Pass \"true\" to reset focus for notable traits.\n+     */\n+    window.hideAllModals = function(switchFocus) {\n+        hideSidebar();\n+        window.hidePopoverMenus();\n+        hideNotable(switchFocus);\n+    };\n+\n     /**\n      * Hide all the popover menus.\n      */\n     window.hidePopoverMenus = function() {\n         onEachLazy(document.querySelectorAll(\".search-form .popover\"), elem => {\n             elem.style.display = \"none\";\n         });\n-        hideNotable(false);\n     };\n \n     /**\n@@ -1081,7 +1093,7 @@ function loadCss(cssUrl) {\n     function showHelp() {\n         const menu = getHelpMenu(true);\n         if (menu.style.display === \"none\") {\n-            window.hidePopoverMenus();\n+            window.hideAllModals();\n             menu.style.display = \"\";\n         }\n     }"}, {"sha": "589bfc79360ce17f1bdf2d8bcb9c2026b2339e28", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -268,7 +268,7 @@\n             event.preventDefault();\n             const shouldDisplaySettings = settingsMenu.style.display === \"none\";\n \n-            window.hidePopoverMenus();\n+            window.hideAllModals();\n             if (shouldDisplaySettings) {\n                 displaySettings();\n             }"}, {"sha": "436aebf1174ddb841086ae2699ecf5247b539315", "filename": "src/test/run-make/coverage-reports/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -132,7 +132,7 @@ include clear_expected_if_blessed\n \t\t\t--instr-profile=\"$(TMPDIR)\"/$@.profdata \\\n \t\t\t$(call BIN,\"$(TMPDIR)\"/$@) \\\n \t\t\t$$( \\\n-\t\t\t\tfor file in $(TMPDIR)/rustdoc-$@/*/rust_out; do \\\n+\t\t\t\tfor file in $(TMPDIR)/rustdoc-$@/*/rust_out*; do \\\n \t\t\t\t[ -x \"$$file\" ] && printf \"%s %s \" -object $$file; \\\n \t\t\t\tdone \\\n \t\t\t) \\"}, {"sha": "7e24af47ee8176462e051333c7b2b868bb75e9da", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -200,12 +200,14 @@ move-cursor-to: \"//*[@class='notable popover']\"\n assert-count: (\"//*[@class='notable popover']\", 1)\n press-key: \"Escape\"\n assert-count: (\"//*[@class='notable popover']\", 0)\n+assert: \"#method\\.create_an_iterator_from_read .notable-traits:focus\"\n \n // Check that clicking outside works.\n click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n assert-count: (\"//*[@class='notable popover']\", 1)\n click: \".search-input\"\n assert-count: (\"//*[@class='notable popover']\", 0)\n+assert-false: \"#method\\.create_an_iterator_from_read .notable-traits:focus\"\n \n // Check that pressing tab over and over works.\n click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n@@ -249,3 +251,26 @@ click: \"#settings-menu a\"\n press-key: \"Escape\"\n // We ensure we didn't come back to the previous focused item.\n assert-window-property-false: {\"scrollY\": |scroll|}\n+\n+// Opening the mobile sidebar should close the popover.\n+size: (650, 600)\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+assert-count: (\"//*[@class='notable popover']\", 1)\n+click: \".sidebar-menu-toggle\"\n+assert: \"//*[@class='sidebar shown']\"\n+assert-count: (\"//*[@class='notable popover']\", 0)\n+assert-false: \"#method\\.create_an_iterator_from_read .notable-traits:focus\"\n+// Clicking a notable popover should close the sidebar.\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+assert-count: (\"//*[@class='notable popover']\", 1)\n+assert-false: \"//*[@class='sidebar shown']\"\n+\n+// Also check the focus handling for the help button.\n+size: (1100, 600)\n+reload:\n+assert-count: (\"//*[@class='notable popover']\", 0)\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+assert-count: (\"//*[@class='notable popover']\", 1)\n+click: \"#help-button a\"\n+assert-count: (\"//*[@class='notable popover']\", 0)\n+assert-false: \"#method\\.create_an_iterator_from_read .notable-traits:focus\""}, {"sha": "c3649dc7bda20211ce124c53231a93821224ac96", "filename": "src/test/rustdoc-gui/pocket-menu.goml", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -75,3 +75,24 @@ assert-css: (\n )\n compare-elements-css: (\"#help-button .popover\", \"#help-button .top\", [\"border-color\"])\n compare-elements-css: (\"#help-button .popover\", \"#help-button .bottom\", [\"border-color\"])\n+\n+// Opening the mobile sidebar should close the settings popover.\n+size: (650, 600)\n+click: \"#settings-menu a\"\n+assert-css: (\"#settings-menu .popover\", {\"display\": \"block\"})\n+click: \".sidebar-menu-toggle\"\n+assert: \"//*[@class='sidebar shown']\"\n+assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n+// Opening the settings popover should close the sidebar.\n+click: \"#settings-menu a\"\n+assert-css: (\"#settings-menu .popover\", {\"display\": \"block\"})\n+assert-false: \"//*[@class='sidebar shown']\"\n+\n+// Opening the settings popover at start (which async loads stuff) should also close.\n+reload:\n+click: \".sidebar-menu-toggle\"\n+assert: \"//*[@class='sidebar shown']\"\n+assert-false: \"#settings-menu .popover\"\n+click: \"#settings-menu a\"\n+assert-false: \"//*[@class='sidebar shown']\"\n+wait-for: \"#settings-menu .popover\""}, {"sha": "840091799a7787f498ede523af7ae0a8d0c9b227", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -32,6 +32,12 @@ assert-css: (\"//nav[contains(@class, 'sidebar')]//h2/a[text()='In test_docs']/pa\n click: \"body\"\n assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n \n+// Open the sidebar menu, and make sure pressing Escape closes it.\n+click: \".sidebar-menu-toggle\"\n+assert-css: (\".sidebar\", {\"left\": \"0px\"})\n+press-key: \"Escape\"\n+assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n+\n // Check that the topbar is visible\n assert-property: (\".mobile-topbar\", {\"clientHeight\": \"45\"})\n "}, {"sha": "bc9d127931d59347e26acafda5fe4fe0eefa3ec4", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -15,7 +15,7 @@ fn return_targets_async_block_not_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+    //~^ ERROR to be a future that resolves to `()`, but it resolves to `u8`\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n@@ -24,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+    //~^ ERROR to be a future that resolves to `()`, but it resolves to `u8`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "c4487eb840abcab9eb8a698ba66970ad12d76848", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -29,13 +29,13 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to be a future that resolves to `()`, but it resolves to `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:12:43\n@@ -45,13 +45,13 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to be a future that resolves to `()`, but it resolves to `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44"}, {"sha": "1686153acf9a63aa8a9cddb14e64f0a990a5cade", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -8,8 +8,8 @@ LL |     fun(async {}, async {});\n    |         |         arguments to this function are incorrect\n    |         the expected `async` block\n    |\n-   = note: expected `async` block `impl Future<Output = ()>` (`async` block)\n-              found `async` block `impl Future<Output = ()>` (`async` block)\n+   = note: expected `async` block `[async block@$DIR/generator-desc.rs:10:9: 10:17]`\n+              found `async` block `[async block@$DIR/generator-desc.rs:10:19: 10:27]`\n note: function defined here\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n@@ -53,8 +53,8 @@ LL |     fun((async || {})(), (async || {})());\n    |     |             the expected `async` closure body\n    |     arguments to this function are incorrect\n    |\n-   = note: expected `async` closure body `impl Future<Output = ()>` (`async` closure body)\n-              found `async` closure body `impl Future<Output = ()>` (`async` closure body)\n+   = note: expected `async` closure body `[async closure body@$DIR/generator-desc.rs:14:19: 14:21]`\n+              found `async` closure body `[async closure body@$DIR/generator-desc.rs:14:36: 14:38]`\n note: function defined here\n   --> $DIR/generator-desc.rs:8:4\n    |"}, {"sha": "fcba4410ba9a53fec35b35fb2a35e1522c2d4081", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -8,7 +8,7 @@ LL | |         AFuture.await;\n LL | |     });\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:18:11: 21:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:16\n    |"}, {"sha": "8c2c06da25cc4bbfff24cd481fb5550b28cf01a9", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `impl Future<Output = ()>` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:18:17: 20:18]` to the object type `dyn Future<Output = ()> + Send`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "ab196dca20cc460bbf61e21bcbdd6ad43eb384cb", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -8,7 +8,7 @@ LL | |         bar(Foo(std::ptr::null())).await;\n LL | |     })\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 19:6]`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:18:35\n    |"}, {"sha": "4804df133401b89ff13e53d2be426491469f223e", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `impl Future<Output = u32>` is not a future\n+error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n   --> $DIR/async.rs:7:29\n    |\n LL |   async fn foo(x: u32) -> u32 {\n@@ -7,18 +7,18 @@ LL | |     x\n LL | | }\n    | | ^\n    | | |\n-   | |_`impl Future<Output = u32>` is not a future\n+   | |_`[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n    |   required by a bound introduced by this call\n    |\n-   = help: the trait `Future` is not implemented for `impl Future<Output = u32>`\n-   = note: impl Future<Output = u32> must be a future or must implement `IntoFuture` to be awaited\n+   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n+   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `identity_future`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n    |                                      ^^^^^^^^^^^^^^^^^^ required by this bound in `identity_future`\n \n-error[E0277]: the size for values of type `<impl Future<Output = u32> as Future>::Output` cannot be known at compilation time\n+error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output` cannot be known at compilation time\n   --> $DIR/async.rs:7:29\n    |\n LL |   async fn foo(x: u32) -> u32 {\n@@ -27,23 +27,23 @@ LL | |     x\n LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `<impl Future<Output = u32> as Future>::Output`\n+   = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output`\n note: required by a bound in `identity_future`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n    |                              ^ required by this bound in `identity_future`\n \n-error[E0277]: `impl Future<Output = u32>` is not a future\n+error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n   --> $DIR/async.rs:7:25\n    |\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^ `impl Future<Output = u32>` is not a future\n+   |                         ^^^ `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n    |\n-   = help: the trait `Future` is not implemented for `impl Future<Output = u32>`\n-   = note: impl Future<Output = u32> must be a future or must implement `IntoFuture` to be awaited\n+   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n+   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n \n-error[E0280]: the requirement `<impl Future<Output = u32> as Future>::Output == u32` is not satisfied\n+error[E0280]: the requirement `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output == u32` is not satisfied\n   --> $DIR/async.rs:7:25\n    |\n LL | async fn foo(x: u32) -> u32 {"}, {"sha": "9e9b59d3633f236027fd94edcb0c850b291ac1e7", "filename": "src/test/ui/generator/clone-impl-async.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -15,42 +15,42 @@ fn main() {\n         drop(non_clone);\n     };\n     check_copy(&inner_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&inner_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let non_clone = NonClone;\n     let outer_non_clone = async move {\n         drop(non_clone);\n     };\n     check_copy(&outer_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&outer_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let maybe_copy_clone = async move {};\n     check_copy(&maybe_copy_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&maybe_copy_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let inner_non_clone_fn = the_inner_non_clone_fn();\n     check_copy(&inner_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&inner_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let outer_non_clone_fn = the_outer_non_clone_fn(NonClone);\n     check_copy(&outer_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&outer_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let maybe_copy_clone_fn = the_maybe_copy_clone_fn();\n     check_copy(&maybe_copy_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&maybe_copy_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n }\n \n async fn the_inner_non_clone_fn() {\n@@ -64,8 +64,7 @@ async fn the_outer_non_clone_fn(non_clone: NonClone) {\n     drop(non_clone);\n }\n \n-async fn the_maybe_copy_clone_fn() {\n-}\n+async fn the_maybe_copy_clone_fn() {}\n \n fn check_copy<T: Copy>(_x: &T) {}\n fn check_clone<T: Clone>(_x: &T) {}"}, {"sha": "9854728876f64ebec1f6da752c267dd1d437a606", "filename": "src/test/ui/generator/clone-impl-async.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -1,83 +1,83 @@\n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]: Copy` is not satisfied\n   --> $DIR/clone-impl-async.rs:17:16\n    |\n LL |     check_copy(&inner_non_clone);\n-   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]: Clone` is not satisfied\n   --> $DIR/clone-impl-async.rs:19:17\n    |\n LL |     check_clone(&inner_non_clone);\n-   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]: Copy` is not satisfied\n   --> $DIR/clone-impl-async.rs:26:16\n    |\n LL |     check_copy(&outer_non_clone);\n-   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]: Clone` is not satisfied\n   --> $DIR/clone-impl-async.rs:28:17\n    |\n LL |     check_clone(&outer_non_clone);\n-   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]: Copy` is not satisfied\n   --> $DIR/clone-impl-async.rs:32:16\n    |\n LL |     check_copy(&maybe_copy_clone);\n-   |     ---------- ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     ---------- ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]: Clone` is not satisfied\n   --> $DIR/clone-impl-async.rs:34:17\n    |\n LL |     check_clone(&maybe_copy_clone);\n-   |     ----------- ^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     ----------- ^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n@@ -91,7 +91,7 @@ LL |     check_copy(&inner_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n@@ -105,7 +105,7 @@ LL |     check_clone(&inner_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n@@ -119,7 +119,7 @@ LL |     check_copy(&outer_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n@@ -133,7 +133,7 @@ LL |     check_clone(&outer_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n@@ -147,7 +147,7 @@ LL |     check_copy(&maybe_copy_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n@@ -161,7 +161,7 @@ LL |     check_clone(&maybe_copy_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`"}, {"sha": "91811df93cd4a1df96f9dac70973f1964bbcdfd3", "filename": "src/test/ui/impl-trait/issue-55872-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -12,7 +12,7 @@ pub trait Bar {\n impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied [E0277]\n+        //~^ ERROR : Copy` is not satisfied [E0277]\n         async {}\n     }\n }"}, {"sha": "c6e10f0f3504fb6d3ae7218eb6454644c9af2761", "filename": "src/test/ui/impl-trait/issue-55872-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/issue-55872-3.rs:16:9: 16:17]: Copy` is not satisfied\n   --> $DIR/issue-55872-3.rs:14:20\n    |\n LL |     fn foo<T>() -> Self::E {\n-   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/issue-55872-3.rs:16:9: 16:17]`\n \n error: aborting due to previous error\n "}, {"sha": "78233f300bdd05ab4d6c821adb0d85fb3a11abe5", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -7,7 +7,7 @@ type F = impl core::future::Future<Output = u8>;\n struct Bug {\n     V1: [(); {\n         fn concrete_use() -> F {\n-            //~^ ERROR expected `impl Future<Output = ()>` to be a future that resolves to `u8`, but it resolves to `()`\n+            //~^ ERROR to be a future that resolves to `u8`, but it resolves to `()`\n             async {}\n         }\n         let f: F = async { 1 };"}, {"sha": "c00df8087e8950b382e8f28c0a8c4e5649f0f09e", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -16,7 +16,7 @@ LL |         let f: F = async { 1 };\n LL |     }],\n    |     - value is dropped here\n \n-error[E0271]: expected `impl Future<Output = ()>` to be a future that resolves to `u8`, but it resolves to `()`\n+error[E0271]: expected `[async block@$DIR/issue-78722.rs:11:13: 11:21]` to be a future that resolves to `u8`, but it resolves to `()`\n   --> $DIR/issue-78722.rs:9:30\n    |\n LL |         fn concrete_use() -> F {"}, {"sha": "dea7c4695cc181b84a86dc949390cf494ec7da6e", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -4,7 +4,7 @@ error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:19]` cannot be used\n LL |         const { || {} } => {},\n    |         ^^^^^^^^^^^^^^^\n \n-error: `impl Future<Output = ()>` cannot be used in patterns\n+error: `[async block@$DIR/non-structural-match-types.rs:12:17: 12:25]` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:12:9\n    |\n LL |         const { async {} } => {},"}, {"sha": "34ff59a9bb0508185e9f889c124c8bb9c0afd458", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -87,7 +87,7 @@ LL | |     }\n    |       arguments to this function are incorrect\n    |\n    = note:     expected struct `Pin<Box<dyn Future<Output = i32> + Send>>`\n-           found `async` block `impl Future<Output = {integer}>`\n+           found `async` block `[async block@$DIR/expected-boxed-future-isnt-pinned.rs:28:5: 30:6]`\n note: function defined here\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |"}, {"sha": "70e7440f73085e67ee8d91df7bcb9188007f0efc", "filename": "src/tools/jsondoclint/src/json_find.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -2,7 +2,7 @@ use std::fmt::Write;\n \n use serde_json::Value;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n pub enum SelectorPart {\n     Field(String),\n     Index(usize),\n@@ -72,3 +72,6 @@ fn find_selector_recursive(\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "2a5335307146993a4b893957e973ac0290dcf426", "filename": "src/tools/jsondoclint/src/json_find/tests.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find%2Ftests.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -0,0 +1,27 @@\n+use super::*;\n+\n+#[test]\n+fn basic_find() {\n+    use SelectorPart::*;\n+\n+    let j = serde_json::json!({\n+        \"index\": {\n+            \"4\": {\n+                \"inner\": {\n+                    \"items\": [\"1\", \"2\", \"3\"]\n+                }\n+            }\n+        }\n+    });\n+\n+    let sel = find_selector(&j, &serde_json::json!(\"1\"));\n+    let exp: Vec<Vec<SelectorPart>> = vec![vec![\n+        Field(\"index\".to_owned()),\n+        Field(\"4\".to_owned()),\n+        Field(\"inner\".to_owned()),\n+        Field(\"items\".to_owned()),\n+        Index(0),\n+    ]];\n+\n+    assert_eq!(exp, sel);\n+}"}, {"sha": "fc54c421b4b22962417296c2a1a9951196bcc604", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -9,13 +9,13 @@ pub(crate) mod item_kind;\n mod json_find;\n mod validator;\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n struct Error {\n     kind: ErrorKind,\n     id: Id,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n enum ErrorKind {\n     NotFound,\n     Custom(String),"}, {"sha": "133fbaede215f21a22af058d0fa6a7e1dc32b0e6", "filename": "triagebot.toml", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1eb62b1235fd77200e6bd967d70e83c0f2497233/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1eb62b1235fd77200e6bd967d70e83c0f2497233/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=1eb62b1235fd77200e6bd967d70e83c0f2497233", "patch": "@@ -15,7 +15,7 @@ allow-unauthenticated = [\n     \"llvm-main\",\n     \"needs-fcp\",\n     \"relnotes\",\n-    \"requires-nightly\",\n+    \"requires-*\",\n     \"regression-*\",\n     \"perf-*\",\n     \"AsyncAwait-OnDeck\",\n@@ -334,6 +334,13 @@ cc = [\"@rust-lang/wg-mir-opt\"]\n message = \"Some changes occurred in const_evaluatable.rs\"\n cc = [\"@lcnr\"]\n \n+[mentions.\"compiler/rustc_trait_selection/src/traits/engine.rs\"]\n+message = \"\"\"\n+Some changes occurred in engine.rs, potentially modifying the public API \\\n+of `ObligationCtxt`.\n+\"\"\"\n+cc = [\"@lcnr\"]\n+\n [mentions.\"compiler/rustc_error_codes/src/error_codes.rs\"]\n message = \"Some changes occurred in diagnostic error codes\"\n cc = [\"@GuillaumeGomez\"]"}]}