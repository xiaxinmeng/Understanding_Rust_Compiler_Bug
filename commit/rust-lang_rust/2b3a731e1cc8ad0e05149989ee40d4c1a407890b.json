{"sha": "2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiM2E3MzFlMWNjOGFkMGUwNTE0OTk4OWVlNDBkNGMxYTQwNzg5MGI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-27T04:04:02Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-27T04:12:36Z"}, "message": "Add missing diagnostic item Symbols", "tree": {"sha": "6c19edf75106a834e997cc49f73c59427b83f79f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c19edf75106a834e997cc49f73c59427b83f79f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "html_url": "https://github.com/rust-lang/rust/commit/2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b303f7d6f9bcd3f0fbb7c3cec5dc3e0afdc84ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b303f7d6f9bcd3f0fbb7c3cec5dc3e0afdc84ac4", "html_url": "https://github.com/rust-lang/rust/commit/b303f7d6f9bcd3f0fbb7c3cec5dc3e0afdc84ac4"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "55575969927ba891e35cb2faebb9302622f26df6", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "patch": "@@ -9,6 +9,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for uses of `contains_key` + `insert` on `HashMap`\n@@ -111,7 +112,7 @@ fn check_cond<'a>(cx: &LateContext<'_>, check: &'a Expr<'a>) -> Option<(&'static\n             return if match_type(cx, obj_ty, &paths::BTREEMAP) {\n                 Some((\"BTreeMap\", map, key))\n             }\n-            else if is_type_diagnostic_item(cx, obj_ty, sym!(hashmap_type)) {\n+            else if is_type_diagnostic_item(cx, obj_ty, sym::hashmap_type) {\n                 Some((\"HashMap\", map, key))\n             }\n             else {"}, {"sha": "63d9b7f8645978aa349996cd99f9d9d1c9d3c185", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "patch": "@@ -1010,7 +1010,7 @@ fn is_slice_like<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || is_type_diagnostic_item(cx, ty, sym::vec_type) || is_type_diagnostic_item(cx, ty, sym!(vecdeque_type))\n+    is_slice || is_type_diagnostic_item(cx, ty, sym::vec_type) || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n }\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n@@ -1908,7 +1908,7 @@ fn check_for_loop_over_map_kv<'tcx>(\n                 _ => arg,\n             };\n \n-            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP) {\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP) {\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,\n@@ -2386,9 +2386,9 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     is_iterable_array(ty, cx) ||\n     is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n-    is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) ||\n-    is_type_diagnostic_item(cx, ty, sym!(hashset_type)) ||\n-    is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+    is_type_diagnostic_item(cx, ty, sym::hashmap_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::hashset_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n     match_type(cx, ty, &paths::BINARY_HEAP) ||\n     match_type(cx, ty, &paths::BTREEMAP) ||\n     match_type(cx, ty, &paths::BTREESET)\n@@ -2922,9 +2922,9 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         then {\n             let ty = cx.typeck_results().node_type(ty.hir_id);\n             if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+                is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n-                is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+                is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_sugg(\n@@ -2992,7 +2992,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n                 if let ty = cx.typeck_results().node_type(ty.hir_id);\n                 if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                    is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+                    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                     match_type(cx, ty, &paths::LINKED_LIST);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if iter_calls.len() == 1;"}, {"sha": "f101b6476f5081f65d35f44e970028e34ffae67e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "patch": "@@ -2598,7 +2598,7 @@ fn lint_iter_nth<'tcx>(\n         \"slice\"\n     } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n+    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vecdeque_type) {\n         \"VecDeque\"\n     } else {\n         let nth_args = nth_and_iter_args[0];\n@@ -2652,10 +2652,10 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n     } else if is_type_diagnostic_item(cx, expr_ty, sym::vec_type) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, expr_ty, sym!(vecdeque_type)) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, sym::vecdeque_type) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"VecDeque\"\n-    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym!(hashmap_type)) {\n+    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::hashmap_type) {\n         needs_ref = true;\n         \"HashMap\"\n     } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {"}, {"sha": "9d8a0c248334f582af850002b48f112be4447374", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "patch": "@@ -199,7 +199,7 @@ fn check_for_slice<'a>(cx: &LateContext<'_>, lhs1: &'a Expr<'_>, lhs2: &'a Expr<\n                 if matches!(ty.kind(), ty::Slice(_))\n                     || matches!(ty.kind(), ty::Array(_, _))\n                     || is_type_diagnostic_item(cx, ty, sym::vec_type)\n-                    || is_type_diagnostic_item(cx, ty, sym!(vecdeque_type))\n+                    || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n                 {\n                     return Slice::Swappable(lhs1, idx1, idx2);\n                 }"}, {"sha": "eb2016db3dc2c5557f9affb75fbabee6fc776860", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "patch": "@@ -2680,14 +2680,14 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n \n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n \n-            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) && params_len == 2 {\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) && params_len == 2 {\n                 Some(ImplicitHasherType::HashMap(\n                     hir_ty.span,\n                     ty,\n                     snippet(cx, params[0].span, \"K\"),\n                     snippet(cx, params[1].span, \"V\"),\n                 ))\n-            } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) && params_len == 1 {\n+            } else if is_type_diagnostic_item(cx, ty, sym::hashset_type) && params_len == 1 {\n                 Some(ImplicitHasherType::HashSet(\n                     hir_ty.span,\n                     ty,"}, {"sha": "316b8d820a715adb298edc2b847f8efcfe55cdba", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::ty::{Adt, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_target::abi::LayoutOf as _;\n use rustc_typeck::hir_ty_to_ty;\n+use rustc_span::sym;\n \n use crate::utils::{is_normalizable, is_type_diagnostic_item, match_type, paths, span_lint_and_help};\n \n@@ -47,7 +48,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n             if !hir_ty.span.from_expansion();\n             if !in_trait_impl(cx, hir_ty.hir_id);\n             let ty = ty_from_hir_ty(cx, hir_ty);\n-            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP);\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP);\n             if let Adt(_, ref substs) = ty.kind();\n             let ty = substs.type_at(1);\n             // Do this to prevent `layout_of` crashing, being unable to fully normalize `ty`."}, {"sha": "81cd99c0558dce7f8f149eab452c72562d06d147", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3a731e1cc8ad0e05149989ee40d4c1a407890b/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=2b3a731e1cc8ad0e05149989ee40d4c1a407890b", "patch": "@@ -18,6 +18,7 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, Path, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+use rustc_span::sym;\n \n /// Is the expr pure (is it free from side-effects)?\n /// This function is named so to stress that it isn't exhaustive and returns FNs.\n@@ -99,7 +100,7 @@ fn identify_some_potentially_expensive_patterns<'tcx>(cx: &LateContext<'tcx>, ex\n                 ExprKind::Call(..) => !is_ctor_or_promotable_const_function(self.cx, expr),\n                 ExprKind::Index(obj, _) => {\n                     let ty = self.cx.typeck_results().expr_ty(obj);\n-                    is_type_diagnostic_item(self.cx, ty, sym!(hashmap_type))\n+                    is_type_diagnostic_item(self.cx, ty, sym::hashmap_type)\n                         || match_type(self.cx, ty, &paths::BTREEMAP)\n                 },\n                 ExprKind::MethodCall(..) => true,"}]}