{"sha": "9c5b8aad1d38079569baf0f8fa70d39f885d073c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNWI4YWFkMWQzODA3OTU2OWJhZjBmOGZhNzBkMzlmODg1ZDA3M2M=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:32Z"}, "message": "Rollup merge of #55556 - nnethercote:MmapMeta, r=eddyb\n\nUse `Mmap` to open the rmeta file.\n\nBecause those files are quite large, contribute significantly to peak\nmemory usage, but only a small fraction of the data is ever read.\n\nr? @eddyb", "tree": {"sha": "a642270aa43edd6c02d445bf1f56749a753d7122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a642270aa43edd6c02d445bf1f56749a753d7122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c5b8aad1d38079569baf0f8fa70d39f885d073c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7USxCRBK7hj4Ov3rIwAAdHIIABE6fMmNY5qopXmLlvpWvcnP\ne+g2a0+F0+1k4t7xknXPRnceJbFV3ZPX3f7HqdarD9nnqdENwpntYaYtPQp9xQjl\nQ0+iXWHTzb2/3Aer8t/Rf37G2TZLOkdRrgUPeSwbG9bhi3sgji/vT+36TrbUUmSx\noJI9Sq0iqzmRCSnZPeY3UqQV9VxirIipf4vS8Bco8k0ZzcDluqH29ocIUBQFs3Ol\nuSaWY7v65xwl2YHyiEDPQVBCQ6dMHivnluExE1PWYcIBVJxWxKzcc+q8kPpDMyaF\ng4oiQEwrvKKEPlHUPeiYhZNJZxMdYBlFVoMb55M1kAGSNp1pzPhUGut7KtH2AdI=\n=7DSn\n-----END PGP SIGNATURE-----\n", "payload": "tree a642270aa43edd6c02d445bf1f56749a753d7122\nparent 3b404349407e7a63730078a2d81d6c86f7f965b3\nparent 818257e70233fbafdb382b940893c9c1d615da22\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276272 +0100\ncommitter GitHub <noreply@github.com> 1542276272 +0100\n\nRollup merge of #55556 - nnethercote:MmapMeta, r=eddyb\n\nUse `Mmap` to open the rmeta file.\n\nBecause those files are quite large, contribute significantly to peak\nmemory usage, but only a small fraction of the data is ever read.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5b8aad1d38079569baf0f8fa70d39f885d073c", "html_url": "https://github.com/rust-lang/rust/commit/9c5b8aad1d38079569baf0f8fa70d39f885d073c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c5b8aad1d38079569baf0f8fa70d39f885d073c/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b404349407e7a63730078a2d81d6c86f7f965b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b404349407e7a63730078a2d81d6c86f7f965b3", "html_url": "https://github.com/rust-lang/rust/commit/3b404349407e7a63730078a2d81d6c86f7f965b3"}, {"sha": "818257e70233fbafdb382b940893c9c1d615da22", "url": "https://api.github.com/repos/rust-lang/rust/commits/818257e70233fbafdb382b940893c9c1d615da22", "html_url": "https://github.com/rust-lang/rust/commit/818257e70233fbafdb382b940893c9c1d615da22"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "64e18899c9d0503298b153a0ffd76abeccd6a8dc", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9c5b8aad1d38079569baf0f8fa70d39f885d073c", "patch": "@@ -2278,12 +2278,14 @@ version = \"0.0.0\"\n dependencies = [\n  \"flate2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n+ \"stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "276e2a911e6978966bef1d5857fd1b50d55af00c", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=9c5b8aad1d38079569baf0f8fa70d39f885d073c", "patch": "@@ -11,12 +11,14 @@ crate-type = [\"dylib\"]\n [dependencies]\n flate2 = \"1.0\"\n log = \"0.4\"\n+memmap = \"0.6\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n-rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_target = { path = \"../librustc_target\" }\n serialize = { path = \"../libserialize\" }\n+stable_deref_trait = \"1.0.0\"\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "0322c888ad5c96c5e144420b5c9b09b0a0595d45", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=9c5b8aad1d38079569baf0f8fa70d39f885d073c", "patch": "@@ -30,6 +30,8 @@\n extern crate libc;\n #[macro_use]\n extern crate log;\n+extern crate memmap;\n+extern crate stable_deref_trait;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "528c96f240dbac252bc2e8a112092da66dd2796c", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b8aad1d38079569baf0f8fa70d39f885d073c/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=9c5b8aad1d38079569baf0f8fa70d39f885d073c", "patch": "@@ -243,12 +243,14 @@ use std::cmp;\n use std::fmt;\n use std::fs;\n use std::io::{self, Read};\n+use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::time::Instant;\n \n use flate2::read::DeflateDecoder;\n \n use rustc_data_structures::owning_ref::OwningRef;\n+\n pub struct CrateMismatch {\n     path: PathBuf,\n     got: String,\n@@ -856,6 +858,19 @@ fn get_metadata_section(target: &Target,\n     return ret;\n }\n \n+/// A trivial wrapper for `Mmap` that implements `StableDeref`.\n+struct StableDerefMmap(memmap::Mmap);\n+\n+impl Deref for StableDerefMmap {\n+    type Target = [u8];\n+\n+    fn deref(&self) -> &[u8] {\n+        self.0.deref()\n+    }\n+}\n+\n+unsafe impl stable_deref_trait::StableDeref for StableDerefMmap {}\n+\n fn get_metadata_section_imp(target: &Target,\n                             flavor: CrateFlavor,\n                             filename: &Path,\n@@ -892,9 +907,14 @@ fn get_metadata_section_imp(target: &Target,\n             }\n         }\n         CrateFlavor::Rmeta => {\n-            let buf = fs::read(filename).map_err(|_|\n-                format!(\"failed to read rmeta metadata: '{}'\", filename.display()))?;\n-            rustc_erase_owner!(OwningRef::new(buf).map_owner_box())\n+            // mmap the file, because only a small fraction of it is read.\n+            let file = std::fs::File::open(filename).map_err(|_|\n+                format!(\"failed to open rmeta metadata: '{}'\", filename.display()))?;\n+            let mmap = unsafe { memmap::Mmap::map(&file) };\n+            let mmap = mmap.map_err(|_|\n+                format!(\"failed to mmap rmeta metadata: '{}'\", filename.display()))?;\n+\n+            rustc_erase_owner!(OwningRef::new(StableDerefMmap(mmap)).map_owner_box())\n         }\n     };\n     let blob = MetadataBlob(raw_bytes);"}]}