{"sha": "a90c5a3c699a10ed1f44a638fa18f6ddbc879d95", "node_id": "C_kwDOAAsO6NoAKGE5MGM1YTNjNjk5YTEwZWQxZjQ0YTYzOGZhMThmNmRkYmM4NzlkOTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-08T05:37:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T05:37:32Z"}, "message": "Rollup merge of #97823 - compiler-errors:missing-comma-match-arm, r=estebank\n\nRecover missing comma after match arm\n\nIf we're missing a comma after a match arm expression, try parsing another pattern and a following `=>`. If we find both of those, then recover by suggesting to insert a `,`.\n\nFixes #80112", "tree": {"sha": "5038dedeb2ae8648214ed445d7d815f0a5ea260b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5038dedeb2ae8648214ed445d7d815f0a5ea260b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioDWcCRBK7hj4Ov3rIwAABg8IABs+wbNHzp4RmZkn4d3AYwJu\n9jN7LAhlUxj6zX9YQGZymBj44FYdO9Xw5ROKIm0TtVLwn2sfLffd+NZZ5xPSfZqX\nXc5D6bSU0GPPH7/R5OLkjHSoHL/4HsQGWNM46YtD9gCNPJgnqQ91968w/kke51vO\nMc6LSIU8znjIwW3s4iTTN39Ks2wjLgcFh9DLd0w/ndkECrkhIY/BHERMCqJiHsAy\nRwxWrQXZ5jPvmCs3SWqORYSZeEeiVSk7ibNS6bua+9Vs0guganGBKyukIORvKEQv\nsuohDGV8owppsANopTpfTJN2r+YIQsJd0XdyLg5+RAg0jXv1lQgjdkKqXNHy/II=\n=UKd1\n-----END PGP SIGNATURE-----\n", "payload": "tree 5038dedeb2ae8648214ed445d7d815f0a5ea260b\nparent a64a9829c88d7353ff16c4e59835364b70118246\nparent b13eb61a2cdfac1e094c2a4d608086f40cea5e01\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654666652 +0200\ncommitter GitHub <noreply@github.com> 1654666652 +0200\n\nRollup merge of #97823 - compiler-errors:missing-comma-match-arm, r=estebank\n\nRecover missing comma after match arm\n\nIf we're missing a comma after a match arm expression, try parsing another pattern and a following `=>`. If we find both of those, then recover by suggesting to insert a `,`.\n\nFixes #80112\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95", "html_url": "https://github.com/rust-lang/rust/commit/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64a9829c88d7353ff16c4e59835364b70118246", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64a9829c88d7353ff16c4e59835364b70118246", "html_url": "https://github.com/rust-lang/rust/commit/a64a9829c88d7353ff16c4e59835364b70118246"}, {"sha": "b13eb61a2cdfac1e094c2a4d608086f40cea5e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13eb61a2cdfac1e094c2a4d608086f40cea5e01", "html_url": "https://github.com/rust-lang/rust/commit/b13eb61a2cdfac1e094c2a4d608086f40cea5e01"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "324e04b198101a9e2de387cd0f04cda3ef8438b6", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=a90c5a3c699a10ed1f44a638fa18f6ddbc879d95", "patch": "@@ -2718,13 +2718,12 @@ impl<'a> Parser<'a> {\n                     ));\n                 }\n                 this.expect_one_of(&[token::Comma], &[token::CloseDelim(Delimiter::Brace)])\n-                    .map_err(|mut err| {\n-                        match (sm.span_to_lines(expr.span), sm.span_to_lines(arm_start_span)) {\n-                            (Ok(ref expr_lines), Ok(ref arm_start_lines))\n-                                if arm_start_lines.lines[0].end_col\n-                                    == expr_lines.lines[0].end_col\n-                                    && expr_lines.lines.len() == 2\n-                                    && this.token == token::FatArrow =>\n+                    .or_else(|mut err| {\n+                        if this.token == token::FatArrow {\n+                            if let Ok(expr_lines) = sm.span_to_lines(expr.span)\n+                            && let Ok(arm_start_lines) = sm.span_to_lines(arm_start_span)\n+                            && arm_start_lines.lines[0].end_col == expr_lines.lines[0].end_col\n+                            && expr_lines.lines.len() == 2\n                             {\n                                 // We check whether there's any trailing code in the parse span,\n                                 // if there isn't, we very likely have the following:\n@@ -2743,15 +2742,41 @@ impl<'a> Parser<'a> {\n                                     \",\".to_owned(),\n                                     Applicability::MachineApplicable,\n                                 );\n+                                return Err(err);\n                             }\n-                            _ => {\n-                                err.span_label(\n-                                    arrow_span,\n-                                    \"while parsing the `match` arm starting here\",\n-                                );\n+                        } else {\n+                            // FIXME(compiler-errors): We could also recover `; PAT =>` here\n+\n+                            // Try to parse a following `PAT =>`, if successful\n+                            // then we should recover.\n+                            let mut snapshot = this.create_snapshot_for_diagnostic();\n+                            let pattern_follows = snapshot\n+                                .parse_pat_allow_top_alt(\n+                                    None,\n+                                    RecoverComma::Yes,\n+                                    RecoverColon::Yes,\n+                                    CommaRecoveryMode::EitherTupleOrPipe,\n+                                )\n+                                .map_err(|err| err.cancel())\n+                                .is_ok();\n+                            if pattern_follows && snapshot.check(&TokenKind::FatArrow) {\n+                                err.cancel();\n+                                this.struct_span_err(\n+                                    hi.shrink_to_hi(),\n+                                    \"expected `,` following `match` arm\",\n+                                )\n+                                .span_suggestion(\n+                                    hi.shrink_to_hi(),\n+                                    \"missing a comma here to end this `match` arm\",\n+                                    \",\".to_owned(),\n+                                    Applicability::MachineApplicable,\n+                                )\n+                                .emit();\n+                                return Ok(true);\n                             }\n                         }\n-                        err\n+                        err.span_label(arrow_span, \"while parsing the `match` arm starting here\");\n+                        Err(err)\n                     })?;\n             } else {\n                 this.eat(&token::Comma);"}, {"sha": "bba38fd0fa4c915fd9b3c3548cbfa4dbfb0b6fcc", "filename": "src/test/ui/parser/match-arm-without-braces.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs?ref=a90c5a3c699a10ed1f44a638fa18f6ddbc879d95", "patch": "@@ -45,9 +45,9 @@ fn main() {\n           15;\n     }\n     match S::get(16) {\n-        Some(Val::Foo) => 17\n-        _ => 18, //~ ERROR expected one of\n-    }\n+        Some(Val::Foo) => 17 //~ ERROR expected `,` following `match` arm\n+        _ => 18,\n+    };\n     match S::get(19) {\n         Some(Val::Foo) =>\n           20; //~ ERROR `match` arm body without braces"}, {"sha": "37d55aa53f87c14871f2418fce5829367cd75266", "filename": "src/test/ui/parser/match-arm-without-braces.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a90c5a3c699a10ed1f44a638fa18f6ddbc879d95/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr?ref=a90c5a3c699a10ed1f44a638fa18f6ddbc879d95", "patch": "@@ -52,15 +52,11 @@ LL ~           { 14;\n LL ~           15; }\n    |\n \n-error: expected one of `,`, `.`, `?`, `}`, or an operator, found reserved identifier `_`\n-  --> $DIR/match-arm-without-braces.rs:49:9\n+error: expected `,` following `match` arm\n+  --> $DIR/match-arm-without-braces.rs:48:29\n    |\n LL |         Some(Val::Foo) => 17\n-   |                        --   - expected one of `,`, `.`, `?`, `}`, or an operator\n-   |                        |\n-   |                        while parsing the `match` arm starting here\n-LL |         _ => 18,\n-   |         ^ unexpected token\n+   |                             ^ help: missing a comma here to end this `match` arm: `,`\n \n error: `match` arm body without braces\n   --> $DIR/match-arm-without-braces.rs:53:11"}]}