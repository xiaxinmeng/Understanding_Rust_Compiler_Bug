{"sha": "b596c32a4102643a1c45282092beafb5a31c16a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1OTZjMzJhNDEwMjY0M2ExYzQ1MjgyMDkyYmVhZmI1YTMxYzE2YTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-22T11:40:18Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-22T11:40:18Z"}, "message": "Resolve tuple variants in value namespace", "tree": {"sha": "193f2586c7d6ac8ca9b8ac077c57bb08627aef35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193f2586c7d6ac8ca9b8ac077c57bb08627aef35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b596c32a4102643a1c45282092beafb5a31c16a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b596c32a4102643a1c45282092beafb5a31c16a4", "html_url": "https://github.com/rust-lang/rust/commit/b596c32a4102643a1c45282092beafb5a31c16a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b596c32a4102643a1c45282092beafb5a31c16a4/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bee7cb71634800a4ce66120d9dea63aa52e3f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bee7cb71634800a4ce66120d9dea63aa52e3f81", "html_url": "https://github.com/rust-lang/rust/commit/0bee7cb71634800a4ce66120d9dea63aa52e3f81"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "a879ca3823b667cad7d2a062ae54408b9ae63f42", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=b596c32a4102643a1c45282092beafb5a31c16a4", "patch": "@@ -23,7 +23,7 @@ use hir_def::{\n     expr::{ArithOp, BinaryOp, BindingAnnotation, ExprId, PatId},\n     lang_item::LangItemTarget,\n     path::{path, Path},\n-    resolver::{HasResolver, Resolver, TypeNs},\n+    resolver::{HasResolver, ResolveValueResult, Resolver, TypeNs, ValueNs},\n     type_ref::TypeRef,\n     AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, FunctionId, HasModule, Lookup,\n     TraitId, TypeAliasId, VariantId,\n@@ -548,7 +548,7 @@ impl<'a> InferenceContext<'a> {\n         self.table.normalize_associated_types_in(ty)\n     }\n \n-    fn resolve_variant(&mut self, path: Option<&Path>) -> (Ty, Option<VariantId>) {\n+    fn resolve_variant(&mut self, path: Option<&Path>, value_ns: bool) -> (Ty, Option<VariantId>) {\n         let path = match path {\n             Some(path) => path,\n             None => return (self.err_ty(), None),\n@@ -557,11 +557,32 @@ impl<'a> InferenceContext<'a> {\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n         // FIXME: this should resolve assoc items as well, see this example:\n         // https://play.rust-lang.org/?gist=087992e9e22495446c01c0d4e2d69521\n-        let (resolution, unresolved) =\n+        let (resolution, unresolved) = if value_ns {\n+            match resolver.resolve_path_in_value_ns(self.db.upcast(), path.mod_path()) {\n+                Some(ResolveValueResult::ValueNs(value)) => match value {\n+                    ValueNs::EnumVariantId(var) => {\n+                        let substs = ctx.substs_from_path(path, var.into(), true);\n+                        let ty = self.db.ty(var.parent.into());\n+                        let ty = self.insert_type_vars(ty.substitute(&Interner, &substs));\n+                        return (ty, Some(var.into()));\n+                    }\n+                    ValueNs::StructId(strukt) => {\n+                        let substs = ctx.substs_from_path(path, strukt.into(), true);\n+                        let ty = self.db.ty(strukt.into());\n+                        let ty = self.insert_type_vars(ty.substitute(&Interner, &substs));\n+                        return (ty, Some(strukt.into()));\n+                    }\n+                    _ => return (self.err_ty(), None),\n+                },\n+                Some(ResolveValueResult::Partial(typens, unresolved)) => (typens, Some(unresolved)),\n+                None => return (self.err_ty(), None),\n+            }\n+        } else {\n             match resolver.resolve_path_in_type_ns(self.db.upcast(), path.mod_path()) {\n                 Some(it) => it,\n                 None => return (self.err_ty(), None),\n-            };\n+            }\n+        };\n         return match resolution {\n             TypeNs::AdtId(AdtId::StructId(strukt)) => {\n                 let substs = ctx.substs_from_path(path, strukt.into(), true);"}, {"sha": "d667613428f8cf76cbfdae0559bcd22897076069", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b596c32a4102643a1c45282092beafb5a31c16a4", "patch": "@@ -437,7 +437,7 @@ impl<'a> InferenceContext<'a> {\n                 TyKind::Never.intern(&Interner)\n             }\n             Expr::RecordLit { path, fields, spread } => {\n-                let (ty, def_id) = self.resolve_variant(path.as_deref());\n+                let (ty, def_id) = self.resolve_variant(path.as_deref(), false);\n                 if let Some(variant) = def_id {\n                     self.write_variant_resolution(tgt_expr.into(), variant);\n                 }"}, {"sha": "603237f944beec4e1f8df3e279895ee8441538a5", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=b596c32a4102643a1c45282092beafb5a31c16a4", "patch": "@@ -27,7 +27,7 @@ impl<'a> InferenceContext<'a> {\n         id: PatId,\n         ellipsis: Option<usize>,\n     ) -> Ty {\n-        let (ty, def) = self.resolve_variant(path);\n+        let (ty, def) = self.resolve_variant(path, true);\n         let var_data = def.map(|it| it.variant_data(self.db.upcast()));\n         if let Some(variant) = def {\n             self.write_variant_resolution(id.into(), variant);\n@@ -68,7 +68,7 @@ impl<'a> InferenceContext<'a> {\n         default_bm: BindingMode,\n         id: PatId,\n     ) -> Ty {\n-        let (ty, def) = self.resolve_variant(path);\n+        let (ty, def) = self.resolve_variant(path, false);\n         let var_data = def.map(|it| it.variant_data(self.db.upcast()));\n         if let Some(variant) = def {\n             self.write_variant_resolution(id.into(), variant);"}, {"sha": "778d19b747603a40cbb27370fe237726c94766d8", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b596c32a4102643a1c45282092beafb5a31c16a4/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=b596c32a4102643a1c45282092beafb5a31c16a4", "patch": "@@ -889,3 +889,30 @@ fn main() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn pattern_lookup_in_value_ns() {\n+    check_types(\n+        r#\"\n+use self::Constructor::*;\n+struct IntRange {\n+    range: (),\n+}\n+enum Constructor {\n+    IntRange(IntRange),\n+}\n+fn main() {\n+    match Constructor::IntRange(IntRange { range: () }) {\n+        IntRange(x) => {\n+            x;\n+          //^ IntRange\n+        }\n+        Constructor::IntRange(x) => {\n+            x;\n+          //^ IntRange\n+        }\n+    }\n+}\n+    \"#,\n+    );\n+}"}]}