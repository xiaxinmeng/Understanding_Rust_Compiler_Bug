{"sha": "1d1e72308e5bcdf5abe95c1d29dfe82524940061", "node_id": "C_kwDOAAsO6NoAKDFkMWU3MjMwOGU1YmNkZjVhYmU5NWMxZDI5ZGZlODI1MjQ5NDAwNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-22T15:46:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-22T15:46:08Z"}, "message": "Auto merge of #10527 - samueltardieu:issue-10523, r=dswij\n\nDo not propose to simplify a not expression coming from a macro\n\nFixes #10523\n\nchangelog: FP [`nonminimal_bool`]: do not propose to change code coming from a macro", "tree": {"sha": "8dd23cbff711bd8e5b7e53247d1701ce1f0cc196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dd23cbff711bd8e5b7e53247d1701ce1f0cc196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d1e72308e5bcdf5abe95c1d29dfe82524940061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1e72308e5bcdf5abe95c1d29dfe82524940061", "html_url": "https://github.com/rust-lang/rust/commit/1d1e72308e5bcdf5abe95c1d29dfe82524940061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d1e72308e5bcdf5abe95c1d29dfe82524940061/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "583962150ba80745d5b54c0c1ea4902311259db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/583962150ba80745d5b54c0c1ea4902311259db8", "html_url": "https://github.com/rust-lang/rust/commit/583962150ba80745d5b54c0c1ea4902311259db8"}, {"sha": "b138bb587bfc2c0e5a3a55820848cc9b2f26149b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b138bb587bfc2c0e5a3a55820848cc9b2f26149b", "html_url": "https://github.com/rust-lang/rust/commit/b138bb587bfc2c0e5a3a55820848cc9b2f26149b"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "29fde9336c0b9fa1f34f821661479f8a05cdb978", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d1e72308e5bcdf5abe95c1d29dfe82524940061/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1e72308e5bcdf5abe95c1d29dfe82524940061/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=1d1e72308e5bcdf5abe95c1d29dfe82524940061", "patch": "@@ -495,18 +495,19 @@ struct NotSimplificationVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind {\n-            if let Some(suggestion) = simplify_not(self.cx, inner) {\n-                span_lint_and_sugg(\n-                    self.cx,\n-                    NONMINIMAL_BOOL,\n-                    expr.span,\n-                    \"this boolean expression can be simplified\",\n-                    \"try\",\n-                    suggestion,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind &&\n+            !inner.span.from_expansion() &&\n+            let Some(suggestion) = simplify_not(self.cx, inner)\n+        {\n+            span_lint_and_sugg(\n+                self.cx,\n+                NONMINIMAL_BOOL,\n+                expr.span,\n+                \"this boolean expression can be simplified\",\n+                \"try\",\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n         }\n \n         walk_expr(self, expr);"}, {"sha": "3b5a374b4a7b4c6be95005679efa27ecd17fd7b5", "filename": "tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1d1e72308e5bcdf5abe95c1d29dfe82524940061/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1e72308e5bcdf5abe95c1d29dfe82524940061/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=1d1e72308e5bcdf5abe95c1d29dfe82524940061", "patch": "@@ -63,3 +63,32 @@ fn issue9428() {\n         println!(\"foo\");\n     }\n }\n+\n+fn issue_10523() {\n+    macro_rules! a {\n+        ($v:expr) => {\n+            $v.is_some()\n+        };\n+    }\n+    let x: Option<u32> = None;\n+    if !a!(x) {}\n+}\n+\n+fn issue_10523_1() {\n+    macro_rules! a {\n+        ($v:expr) => {\n+            !$v.is_some()\n+        };\n+    }\n+    let x: Option<u32> = None;\n+    if a!(x) {}\n+}\n+\n+fn issue_10523_2() {\n+    macro_rules! a {\n+        () => {\n+            !None::<u32>.is_some()\n+        };\n+    }\n+    if a!() {}\n+}"}]}