{"sha": "c7953bb6d67dead45033434161be2ed8cdd6cd31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTUzYmI2ZDY3ZGVhZDQ1MDMzNDM0MTYxYmUyZWQ4Y2RkNmNkMzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-16T11:07:51Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-01T15:04:26Z"}, "message": "obtain `UnificationTable` and `snapshot_vec` from `ena` instead\n\nThe ena version has an improved interface. I suspect\n`librustc_data_structures` should start migrating out to crates.io in\ngeneral.", "tree": {"sha": "10e1b41ae54fb0bb43b63654954f89adac1e507c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10e1b41ae54fb0bb43b63654954f89adac1e507c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7953bb6d67dead45033434161be2ed8cdd6cd31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7953bb6d67dead45033434161be2ed8cdd6cd31", "html_url": "https://github.com/rust-lang/rust/commit/c7953bb6d67dead45033434161be2ed8cdd6cd31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7953bb6d67dead45033434161be2ed8cdd6cd31/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b680b12e949097602dd6d39009fee8c95d86a261", "url": "https://api.github.com/repos/rust-lang/rust/commits/b680b12e949097602dd6d39009fee8c95d86a261", "html_url": "https://github.com/rust-lang/rust/commit/b680b12e949097602dd6d39009fee8c95d86a261"}], "stats": {"total": 153, "additions": 88, "deletions": 65}, "files": [{"sha": "8997e7d99dac1e16a8a624f92e8d3f109259c00e", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -132,7 +132,7 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n     {\n         self.int_unification_table\n             .borrow_mut()\n-            .unify_var_value(vid, val)\n+            .unify_var_value(vid, Some(val))\n             .map_err(|e| int_unification_error(vid_is_expected, e))?;\n         match val {\n             IntType(v) => Ok(self.tcx.mk_mach_int(v)),\n@@ -148,7 +148,7 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n     {\n         self.float_unification_table\n             .borrow_mut()\n-            .unify_var_value(vid, val)\n+            .unify_var_value(vid, Some(ty::FloatVarValue(val)))\n             .map_err(|e| float_unification_error(vid_is_expected, e))?;\n         Ok(self.tcx.mk_mach_float(val))\n     }\n@@ -518,9 +518,9 @@ fn int_unification_error<'tcx>(a_is_expected: bool, v: (ty::IntVarValue, ty::Int\n }\n \n fn float_unification_error<'tcx>(a_is_expected: bool,\n-                                 v: (ast::FloatTy, ast::FloatTy))\n+                                 v: (ty::FloatVarValue, ty::FloatVarValue))\n                                  -> TypeError<'tcx>\n {\n-    let (a, b) = v;\n+    let (ty::FloatVarValue(a), ty::FloatVarValue(b)) = v;\n     TypeError::FloatMismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n }"}, {"sha": "25300eed548badeb6390c6bab1d71e12613b896f", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::TyInfer(ty::IntVar(v)) => {\n                 self.freshen(\n                     self.infcx.int_unification_table.borrow_mut()\n-                                                    .probe(v)\n+                                                    .probe_value(v)\n                                                     .map(|v| v.to_type(tcx)),\n                     ty::IntVar(v),\n                     ty::FreshIntTy)\n@@ -152,7 +152,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::TyInfer(ty::FloatVar(v)) => {\n                 self.freshen(\n                     self.infcx.float_unification_table.borrow_mut()\n-                                                      .probe(v)\n+                                                      .probe_value(v)\n                                                       .map(|v| v.to_type(tcx)),\n                     ty::FloatVar(v),\n                     ty::FreshFloatTy)"}, {"sha": "72a4dfbb7e0eca4c4b65893c8dfe5cf73ba05e15", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -29,7 +29,7 @@ use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::relate::RelateResult;\n use traits::{self, ObligationCause, PredicateObligations, Reveal};\n-use rustc_data_structures::unify::{self, UnificationTable};\n+use rustc_data_structures::unify as ut;\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n@@ -99,10 +99,10 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub type_variables: RefCell<type_variable::TypeVariableTable<'tcx>>,\n \n     // Map from integral variable to the kind of integer it represents\n-    int_unification_table: RefCell<UnificationTable<ty::IntVid>>,\n+    int_unification_table: RefCell<ut::UnificationTable<ut::InPlace<ty::IntVid>>>,\n \n     // Map from floating variable to the kind of float it represents\n-    float_unification_table: RefCell<UnificationTable<ty::FloatVid>>,\n+    float_unification_table: RefCell<ut::UnificationTable<ut::InPlace<ty::FloatVid>>>,\n \n     // Tracks the set of region variables and the constraints between\n     // them.  This is initially `Some(_)` but when\n@@ -441,8 +441,8 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             in_progress_tables,\n             projection_cache: RefCell::new(traits::ProjectionCache::new()),\n             type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n-            int_unification_table: RefCell::new(UnificationTable::new()),\n-            float_unification_table: RefCell::new(UnificationTable::new()),\n+            int_unification_table: RefCell::new(ut::UnificationTable::new()),\n+            float_unification_table: RefCell::new(ut::UnificationTable::new()),\n             region_constraints: RefCell::new(Some(RegionConstraintCollector::new())),\n             lexical_region_resolutions: RefCell::new(None),\n             selection_cache: traits::SelectionCache::new(),\n@@ -476,8 +476,8 @@ impl<'tcx, T> InferOk<'tcx, T> {\n pub struct CombinedSnapshot<'a, 'tcx:'a> {\n     projection_cache_snapshot: traits::ProjectionCacheSnapshot,\n     type_snapshot: type_variable::Snapshot,\n-    int_snapshot: unify::Snapshot<ty::IntVid>,\n-    float_snapshot: unify::Snapshot<ty::FloatVid>,\n+    int_snapshot: ut::Snapshot<ut::InPlace<ty::IntVid>>,\n+    float_snapshot: ut::Snapshot<ut::InPlace<ty::FloatVid>>,\n     region_constraints_snapshot: RegionSnapshot,\n     region_obligations_snapshot: usize,\n     was_in_snapshot: bool,\n@@ -678,14 +678,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         use ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n         match ty.sty {\n             ty::TyInfer(ty::IntVar(vid)) => {\n-                if self.int_unification_table.borrow_mut().has_value(vid) {\n+                if self.int_unification_table.borrow_mut().probe_value(vid).is_some() {\n                     Neither\n                 } else {\n                     UnconstrainedInt\n                 }\n             },\n             ty::TyInfer(ty::FloatVar(vid)) => {\n-                if self.float_unification_table.borrow_mut().has_value(vid) {\n+                if self.float_unification_table.borrow_mut().probe_value(vid).is_some() {\n                     Neither\n                 } else {\n                     UnconstrainedFloat\n@@ -698,27 +698,32 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {\n         let mut variables = Vec::new();\n \n-        let unbound_ty_vars = self.type_variables\n-                                  .borrow_mut()\n-                                  .unsolved_variables()\n-                                  .into_iter()\n-                                  .map(|t| self.tcx.mk_var(t));\n-\n-        let unbound_int_vars = self.int_unification_table\n-                                   .borrow_mut()\n-                                   .unsolved_variables()\n-                                   .into_iter()\n-                                   .map(|v| self.tcx.mk_int_var(v));\n+        {\n+            let mut type_variables = self.type_variables.borrow_mut();\n+            variables.extend(\n+                type_variables\n+                    .unsolved_variables()\n+                    .into_iter()\n+                    .map(|t| self.tcx.mk_var(t)));\n+        }\n \n-        let unbound_float_vars = self.float_unification_table\n-                                     .borrow_mut()\n-                                     .unsolved_variables()\n-                                     .into_iter()\n-                                     .map(|v| self.tcx.mk_float_var(v));\n+        {\n+            let mut int_unification_table = self.int_unification_table.borrow_mut();\n+            variables.extend(\n+                (0..int_unification_table.len())\n+                    .map(|i| ty::IntVid { index: i as u32 })\n+                    .filter(|&vid| int_unification_table.probe_value(vid).is_none())\n+                    .map(|v| self.tcx.mk_int_var(v)));\n+        }\n \n-        variables.extend(unbound_ty_vars);\n-        variables.extend(unbound_int_vars);\n-        variables.extend(unbound_float_vars);\n+        {\n+            let mut float_unification_table = self.float_unification_table.borrow_mut();\n+            variables.extend(\n+                (0..float_unification_table.len())\n+                    .map(|i| ty::FloatVid { index: i as u32 })\n+                    .filter(|&vid| float_unification_table.probe_value(vid).is_none())\n+                    .map(|v| self.tcx.mk_float_var(v)));\n+        }\n \n         return variables;\n     }\n@@ -1262,15 +1267,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ty::TyInfer(ty::IntVar(v)) => {\n                 self.int_unification_table\n                     .borrow_mut()\n-                    .probe(v)\n+                    .probe_value(v)\n                     .map(|v| v.to_type(self.tcx))\n                     .unwrap_or(typ)\n             }\n \n             ty::TyInfer(ty::FloatVar(v)) => {\n                 self.float_unification_table\n                     .borrow_mut()\n-                    .probe(v)\n+                    .probe_value(v)\n                     .map(|v| v.to_type(self.tcx))\n                     .unwrap_or(typ)\n             }"}, {"sha": "423b18823b14824384eeced19fefe66e26704db4", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -26,7 +26,7 @@ pub struct TypeVariableTable<'tcx> {\n \n     /// Two variables are unified in `eq_relations` when we have a\n     /// constraint `?X == ?Y`.\n-    eq_relations: ut::UnificationTable<ty::TyVid>,\n+    eq_relations: ut::UnificationTable<ut::InPlace<ty::TyVid>>,\n \n     /// Two variables are unified in `eq_relations` when we have a\n     /// constraint `?X <: ?Y` *or* a constraint `?Y <: ?X`. This second\n@@ -45,7 +45,7 @@ pub struct TypeVariableTable<'tcx> {\n     /// This is reasonable because, in Rust, subtypes have the same\n     /// \"skeleton\" and hence there is no possible type such that\n     /// (e.g.)  `Box<?3> <: ?3` for any `?3`.\n-    sub_relations: ut::UnificationTable<ty::TyVid>,\n+    sub_relations: ut::UnificationTable<ut::InPlace<ty::TyVid>>,\n }\n \n /// Reasons to create a type inference variable\n@@ -86,8 +86,8 @@ enum TypeVariableValue<'tcx> {\n \n pub struct Snapshot {\n     snapshot: sv::Snapshot,\n-    eq_snapshot: ut::Snapshot<ty::TyVid>,\n-    sub_snapshot: ut::Snapshot<ty::TyVid>,\n+    eq_snapshot: ut::Snapshot<ut::InPlace<ty::TyVid>>,\n+    sub_snapshot: ut::Snapshot<ut::InPlace<ty::TyVid>>,\n }\n \n struct Instantiate {\n@@ -354,3 +354,10 @@ impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n         values[vid.index as usize].value = Unknown;\n     }\n }\n+\n+impl ut::UnifyKey for ty::TyVid {\n+    type Value = ();\n+    fn index(&self) -> u32 { self.index }\n+    fn from_index(i: u32) -> ty::TyVid { ty::TyVid { index: i } }\n+    fn tag() -> &'static str { \"TyVid\" }\n+}"}, {"sha": "a1145572b79d95d9a80460cb22ac0821d1c40669", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast;\n-use ty::{self, IntVarValue, Ty, TyCtxt};\n-use rustc_data_structures::unify::{Combine, UnifyKey};\n+use ty::{self, FloatVarValue, IntVarValue, Ty, TyCtxt};\n+use rustc_data_structures::unify::{NoError, EqUnifyValue, UnifyKey, UnifyValue};\n \n pub trait ToType {\n     fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>;\n@@ -20,7 +19,10 @@ impl UnifyKey for ty::IntVid {\n     type Value = Option<IntVarValue>;\n     fn index(&self) -> u32 { self.index }\n     fn from_index(i: u32) -> ty::IntVid { ty::IntVid { index: i } }\n-    fn tag(_: Option<ty::IntVid>) -> &'static str { \"IntVid\" }\n+    fn tag() -> &'static str { \"IntVid\" }\n+}\n+\n+impl EqUnifyValue for IntVarValue {\n }\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n@@ -31,23 +33,25 @@ pub struct RegionVidKey {\n     pub min_vid: ty::RegionVid\n }\n \n-impl Combine for RegionVidKey {\n-    fn combine(&self, other: &RegionVidKey) -> RegionVidKey {\n-        let min_vid = if self.min_vid.index() < other.min_vid.index() {\n-            self.min_vid\n+impl UnifyValue for RegionVidKey {\n+    type Error = NoError;\n+\n+    fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n+        let min_vid = if value1.min_vid.index() < value2.min_vid.index() {\n+            value1.min_vid\n         } else {\n-            other.min_vid\n+            value2.min_vid\n         };\n \n-        RegionVidKey { min_vid: min_vid }\n+        Ok(RegionVidKey { min_vid: min_vid })\n     }\n }\n \n impl UnifyKey for ty::RegionVid {\n     type Value = RegionVidKey;\n     fn index(&self) -> u32 { self.0 }\n     fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid(i) }\n-    fn tag(_: Option<ty::RegionVid>) -> &'static str { \"RegionVid\" }\n+    fn tag() -> &'static str { \"RegionVid\" }\n }\n \n impl ToType for IntVarValue {\n@@ -62,21 +66,17 @@ impl ToType for IntVarValue {\n // Floating point type keys\n \n impl UnifyKey for ty::FloatVid {\n-    type Value = Option<ast::FloatTy>;\n+    type Value = Option<FloatVarValue>;\n     fn index(&self) -> u32 { self.index }\n     fn from_index(i: u32) -> ty::FloatVid { ty::FloatVid { index: i } }\n-    fn tag(_: Option<ty::FloatVid>) -> &'static str { \"FloatVid\" }\n+    fn tag() -> &'static str { \"FloatVid\" }\n }\n \n-impl ToType for ast::FloatTy {\n-    fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n-        tcx.mk_mach_float(*self)\n-    }\n+impl EqUnifyValue for FloatVarValue {\n }\n \n-impl UnifyKey for ty::TyVid {\n-    type Value = ();\n-    fn index(&self) -> u32 { self.index }\n-    fn from_index(i: u32) -> ty::TyVid { ty::TyVid { index: i } }\n-    fn tag(_: Option<ty::TyVid>) -> &'static str { \"TyVid\" }\n+impl ToType for FloatVarValue {\n+    fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n+        tcx.mk_mach_float(self.0)\n+    }\n }"}, {"sha": "4315d1f2c8ca3555fb4416c51268d03453744de7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -685,12 +685,15 @@ pub struct ClosureUpvar<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-#[derive(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum IntVarValue {\n     IntType(ast::IntTy),\n     UintType(ast::UintTy),\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub struct FloatVarValue(pub ast::FloatTy);\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n pub struct TypeParameterDef {\n     pub name: Name,"}, {"sha": "d390d1c15e2aa5d4bf2e68ba7b5fdf565ee4e4f7", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -916,6 +916,12 @@ impl fmt::Debug for ty::IntVarValue {\n     }\n }\n \n+impl fmt::Debug for ty::FloatVarValue {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n // The generic impl doesn't work yet because projections are not\n // normalized under HRTB.\n /*impl<T> fmt::Display for ty::Binder<T>"}, {"sha": "40d557ee5e04a605c23905f6fefc893e6a0fdb42", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -9,6 +9,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n+ena = \"0.8.0\"\n log = \"0.4\"\n serialize = { path = \"../libserialize\" }\n cfg-if = \"0.1.2\""}, {"sha": "265c64858300b4f79d7dedd8fca1920faa974a49", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7953bb6d67dead45033434161be2ed8cdd6cd31/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=c7953bb6d67dead45033434161be2ed8cdd6cd31", "patch": "@@ -39,6 +39,7 @@\n #![cfg_attr(test, feature(test))]\n \n extern crate core;\n+extern crate ena;\n #[macro_use]\n extern crate log;\n extern crate serialize as rustc_serialize; // used by deriving\n@@ -63,10 +64,10 @@ pub mod indexed_vec;\n pub mod obligation_forest;\n pub mod sip128;\n pub mod snapshot_map;\n-pub mod snapshot_vec;\n+pub use ena::snapshot_vec;\n pub mod stable_hasher;\n pub mod transitive_relation;\n-pub mod unify;\n+pub use ena::unify;\n pub mod fx;\n pub mod tuple_slice;\n pub mod control_flow_graph;"}]}