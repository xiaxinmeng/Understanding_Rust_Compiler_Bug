{"sha": "9ac372568b0a63c0abb8953431fa6a392de040a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYzM3MjU2OGIwYTYzYzBhYmI4OTUzNDMxZmE2YTM5MmRlMDQwYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-06T11:17:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-06T11:17:15Z"}, "message": "Auto merge of #51316 - oli-obk:const_err, r=nikomatsakis\n\nRefactor the const eval diagnostic API\n\n* no longer report \"const eval error\" for things that have typeck errors\n* errors and lints have saner spans and messages\n* unified the diagnostic logic (const eval errors were slightly different depending on where they were reported, and there was also code duplication between the different reporters)\n* report errors if an erroneous constant is used inside a promoted (fixes most of #50814)", "tree": {"sha": "d92b896d058959a52902ace421a5be9b5a71dd32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d92b896d058959a52902ace421a5be9b5a71dd32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac372568b0a63c0abb8953431fa6a392de040a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac372568b0a63c0abb8953431fa6a392de040a3", "html_url": "https://github.com/rust-lang/rust/commit/9ac372568b0a63c0abb8953431fa6a392de040a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac372568b0a63c0abb8953431fa6a392de040a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "url": "https://api.github.com/repos/rust-lang/rust/commits/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "html_url": "https://github.com/rust-lang/rust/commit/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b"}, {"sha": "14d08e53710f8be52734ad285d221b224415dc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d08e53710f8be52734ad285d221b224415dc15", "html_url": "https://github.com/rust-lang/rust/commit/14d08e53710f8be52734ad285d221b224415dc15"}], "stats": {"total": 1344, "additions": 882, "deletions": 462}, "files": [{"sha": "5e67065d1c13fcbf1656b29f3c2c54c596f55ac8", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -510,6 +510,7 @@ impl_stable_hash_for!(struct ::middle::const_val::ConstEvalErr<'tcx> {\n \n impl_stable_hash_for!(struct ::middle::const_val::FrameInfo {\n     span,\n+    lint_root,\n     location\n });\n \n@@ -523,21 +524,11 @@ for ::middle::const_val::ErrKind<'gcx> {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n-            NonConstPath |\n             TypeckError |\n+            CouldNotResolve |\n             CheckMatchError => {\n                 // nothing to do\n             }\n-            UnimplementedConstVal(s) => {\n-                s.hash_stable(hcx, hasher);\n-            }\n-            IndexOutOfBounds { len, index } => {\n-                len.hash_stable(hcx, hasher);\n-                index.hash_stable(hcx, hasher);\n-            }\n-            LayoutError(ref layout_error) => {\n-                layout_error.hash_stable(hcx, hasher);\n-            }\n             Miri(ref err, ref trace) => {\n                 err.hash_stable(hcx, hasher);\n                 trace.hash_stable(hcx, hasher);\n@@ -608,8 +599,8 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             RemainderByZero |\n             DivisionByZero |\n             GeneratorResumedAfterReturn |\n-            GeneratorResumedAfterPanic |\n-            ReferencedConstant => {}\n+            GeneratorResumedAfterPanic => {}\n+            ReferencedConstant(ref err) => err.hash_stable(hcx, hasher),\n             MachineError(ref err) => err.hash_stable(hcx, hasher),\n             FunctionPointerTyMismatch(a, b) => {\n                 a.hash_stable(hcx, hasher);"}, {"sha": "824930a7eb00007766e052d0992bbaf0ff494032", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -655,6 +655,9 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n         f(self);\n         self.param_env = old_param_env;\n     }\n+    pub fn current_lint_root(&self) -> ast::NodeId {\n+        self.last_ast_node_with_lint_attrs\n+    }\n }\n \n impl<'a, 'tcx> LayoutOf for &'a LateContext<'a, 'tcx> {"}, {"sha": "88275b3c18cc1172f83fd736a02c362d129e52f3", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 77, "deletions": 62, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -9,13 +9,15 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::{self, TyCtxt, layout};\n+use ty;\n use ty::subst::Substs;\n+use ty::maps::TyCtxtAt;\n use mir::interpret::ConstValue;\n use errors::DiagnosticBuilder;\n \n use graphviz::IntoCow;\n use syntax_pos::Span;\n+use syntax::ast;\n \n use std::borrow::Cow;\n use rustc_data_structures::sync::Lrc;\n@@ -28,30 +30,26 @@ pub enum ConstVal<'tcx> {\n     Value(ConstValue<'tcx>),\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n     pub kind: Lrc<ErrKind<'tcx>>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum ErrKind<'tcx> {\n \n-    NonConstPath,\n-    UnimplementedConstVal(&'static str),\n-    IndexOutOfBounds { len: u64, index: u64 },\n-\n-    LayoutError(layout::LayoutError<'tcx>),\n-\n+    CouldNotResolve,\n     TypeckError,\n     CheckMatchError,\n     Miri(::mir::interpret::EvalError<'tcx>, Vec<FrameInfo>),\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct FrameInfo {\n     pub span: Span,\n     pub location: String,\n+    pub lint_root: Option<ast::NodeId>,\n }\n \n #[derive(Clone, Debug)]\n@@ -83,81 +81,98 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         }\n \n         match *self.kind {\n-            NonConstPath        => simple!(\"non-constant path in constant expression\"),\n-            UnimplementedConstVal(what) =>\n-                simple!(\"unimplemented constant expression: {}\", what),\n-            IndexOutOfBounds { len, index } => {\n-                simple!(\"index out of bounds: the len is {} but the index is {}\",\n-                        len, index)\n-            }\n-\n-            LayoutError(ref err) => Simple(err.to_string().into_cow()),\n-\n+            CouldNotResolve => simple!(\"could not resolve\"),\n             TypeckError => simple!(\"type-checking failed\"),\n             CheckMatchError => simple!(\"match-checking failed\"),\n             Miri(ref err, ref trace) => Backtrace(err, trace),\n         }\n     }\n \n     pub fn struct_error(&self,\n-        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        primary_span: Span,\n-        primary_kind: &str)\n-        -> DiagnosticBuilder<'gcx>\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str)\n+        -> Option<DiagnosticBuilder<'tcx>>\n     {\n-        let mut diag = struct_error(tcx, self.span, \"constant evaluation error\");\n-        self.note(tcx, primary_span, primary_kind, &mut diag);\n-        diag\n+        self.struct_generic(tcx, message, None, true)\n     }\n \n-    pub fn note(&self,\n-        _tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        primary_span: Span,\n-        primary_kind: &str,\n-        diag: &mut DiagnosticBuilder)\n-    {\n-        match self.description() {\n-            ConstEvalErrDescription::Simple(message) => {\n-                diag.span_label(self.span, message);\n-            }\n-            ConstEvalErrDescription::Backtrace(miri, frames) => {\n-                diag.span_label(self.span, format!(\"{}\", miri));\n-                for frame in frames {\n-                    diag.span_label(frame.span, format!(\"inside call to `{}`\", frame.location));\n-                }\n-            }\n+    pub fn report_as_error(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str\n+    ) {\n+        let err = self.struct_generic(tcx, message, None, true);\n+        if let Some(mut err) = err {\n+            err.emit();\n         }\n+    }\n \n-        if !primary_span.contains(self.span) {\n-            diag.span_note(primary_span,\n-                        &format!(\"for {} here\", primary_kind));\n+    pub fn report_as_lint(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str,\n+        lint_root: ast::NodeId,\n+    ) {\n+        let lint = self.struct_generic(\n+            tcx,\n+            message,\n+            Some(lint_root),\n+            false,\n+        );\n+        if let Some(mut lint) = lint {\n+            lint.emit();\n         }\n     }\n \n-    pub fn report(&self,\n-        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        primary_span: Span,\n-        primary_kind: &str)\n-    {\n-        match *self.kind {\n-            ErrKind::TypeckError | ErrKind::CheckMatchError => return,\n-            ErrKind::Miri(ref miri, _) => {\n+    fn struct_generic(\n+        &self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str,\n+        lint_root: Option<ast::NodeId>,\n+        as_err: bool,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        let (msg, frames): (_, &[_]) = match *self.kind {\n+            ErrKind::TypeckError | ErrKind::CheckMatchError => return None,\n+            ErrKind::Miri(ref miri, ref frames) => {\n                 match miri.kind {\n                     ::mir::interpret::EvalErrorKind::TypeckError |\n-                    ::mir::interpret::EvalErrorKind::Layout(_) => return,\n-                    _ => {},\n+                    ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n+                    ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n+                        inner.struct_generic(tcx, \"referenced constant\", lint_root, as_err)?.emit();\n+                        (miri.to_string(), frames)\n+                    },\n+                    _ => (miri.to_string(), frames),\n                 }\n             }\n-            _ => {}\n+            _ => (self.description().into_oneline().to_string(), &[]),\n+        };\n+        trace!(\"reporting const eval failure at {:?}\", self.span);\n+        let mut err = if as_err {\n+            struct_error(tcx, message)\n+        } else {\n+            let node_id = frames\n+                .iter()\n+                .rev()\n+                .filter_map(|frame| frame.lint_root)\n+                .next()\n+                .or(lint_root)\n+                .expect(\"some part of a failing const eval must be local\");\n+            tcx.struct_span_lint_node(\n+                ::rustc::lint::builtin::CONST_ERR,\n+                node_id,\n+                tcx.span,\n+                message,\n+            )\n+        };\n+        err.span_label(self.span, msg);\n+        for FrameInfo { span, location, .. } in frames {\n+            err.span_label(*span, format!(\"inside call to `{}`\", location));\n         }\n-        self.struct_error(tcx, primary_span, primary_kind).emit();\n+        Some(err)\n     }\n }\n \n pub fn struct_error<'a, 'gcx, 'tcx>(\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    span: Span,\n+    tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n     msg: &str,\n-) -> DiagnosticBuilder<'gcx> {\n-    struct_span_err!(tcx.sess, span, E0080, \"{}\", msg)\n+) -> DiagnosticBuilder<'tcx> {\n+    struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n }"}, {"sha": "bf5bae6b20c429ef15aaf6abf518c9f59fbea389", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,6 +1,7 @@\n use std::{fmt, env};\n \n use mir;\n+use middle::const_val::ConstEvalErr;\n use ty::{FnSig, Ty, layout};\n use ty::layout::{Size, Align};\n \n@@ -10,21 +11,50 @@ use super::{\n \n use backtrace::Backtrace;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]\n pub struct EvalError<'tcx> {\n     pub kind: EvalErrorKind<'tcx, u64>,\n-    pub backtrace: Option<Backtrace>,\n }\n \n impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n     fn from(kind: EvalErrorKind<'tcx, u64>) -> Self {\n-        let backtrace = match env::var(\"MIRI_BACKTRACE\") {\n-            Ok(ref val) if !val.is_empty() => Some(Backtrace::new_unresolved()),\n-            _ => None\n-        };\n+        match env::var(\"MIRI_BACKTRACE\") {\n+            Ok(ref val) if !val.is_empty() => {\n+                let backtrace = Backtrace::new();\n+\n+                use std::fmt::Write;\n+                let mut trace_text = \"\\n\\nAn error occurred in miri:\\n\".to_string();\n+                write!(trace_text, \"backtrace frames: {}\\n\", backtrace.frames().len()).unwrap();\n+                'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n+                    if frame.symbols().is_empty() {\n+                        write!(trace_text, \"{}: no symbols\\n\", i).unwrap();\n+                    }\n+                    for symbol in frame.symbols() {\n+                        write!(trace_text, \"{}: \", i).unwrap();\n+                        if let Some(name) = symbol.name() {\n+                            write!(trace_text, \"{}\\n\", name).unwrap();\n+                        } else {\n+                            write!(trace_text, \"<unknown>\\n\").unwrap();\n+                        }\n+                        write!(trace_text, \"\\tat \").unwrap();\n+                        if let Some(file_path) = symbol.filename() {\n+                            write!(trace_text, \"{}\", file_path.display()).unwrap();\n+                        } else {\n+                            write!(trace_text, \"<unknown_file>\").unwrap();\n+                        }\n+                        if let Some(line) = symbol.lineno() {\n+                            write!(trace_text, \":{}\\n\", line).unwrap();\n+                        } else {\n+                            write!(trace_text, \"\\n\").unwrap();\n+                        }\n+                    }\n+                }\n+                error!(\"{}\", trace_text);\n+            },\n+            _ => {},\n+        }\n         EvalError {\n             kind,\n-            backtrace,\n         }\n     }\n }\n@@ -122,7 +152,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     TypeckError,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n-    ReferencedConstant,\n+    ReferencedConstant(ConstEvalErr<'tcx>),\n     GeneratorResumedAfterReturn,\n     GeneratorResumedAfterPanic,\n }\n@@ -238,7 +268,7 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"there were unresolved type arguments during trait selection\",\n             TypeckError =>\n                 \"encountered constants with type errors, stopping evaluation\",\n-            ReferencedConstant =>\n+            ReferencedConstant(_) =>\n                 \"referenced constant has errors\",\n             Overflow(mir::BinOp::Add) => \"attempt to add with overflow\",\n             Overflow(mir::BinOp::Sub) => \"attempt to subtract with overflow\","}, {"sha": "f76b312ee530daebf773f2c4c9acf66b5175b026", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -827,10 +827,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             ConstEvalFailure(ref err) => {\n-                if let ::middle::const_val::ErrKind::TypeckError = *err.kind {\n-                    return;\n+                match err.struct_error(\n+                    self.tcx.at(span),\n+                    \"could not evaluate constant expression\",\n+                ) {\n+                    Some(err) => err,\n+                    None => return,\n                 }\n-                err.struct_error(self.tcx, span, \"constant expression\")\n             }\n \n             Overflow => {"}, {"sha": "dff89f3c888a73d54e5fcb17348b625d943347a2", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -534,8 +534,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                             } else {\n                                 Err(CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n                                     span: obligation.cause.span,\n-                                    kind: ErrKind::UnimplementedConstVal(\"could not resolve\")\n-                                        .into(),\n+                                    kind: ErrKind::CouldNotResolve.into(),\n                                 })))\n                             }\n                         },"}, {"sha": "f947ed456862451ed361eac87bc11b993c84c7fd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -2075,15 +2075,17 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 } else {\n                     info!(\"invalid enum discriminant: {:#?}\", val);\n                     ::middle::const_val::struct_error(\n-                        tcx,\n-                        tcx.def_span(expr_did),\n+                        tcx.at(tcx.def_span(expr_did)),\n                         \"constant evaluation of enum discriminant resulted in non-integer\",\n                     ).emit();\n                     None\n                 }\n             }\n             Err(err) => {\n-                err.report(tcx, tcx.def_span(expr_did), \"enum discriminant\");\n+                err.report_as_error(\n+                    tcx.at(tcx.def_span(expr_did)),\n+                    \"could not evaluate enum discriminant\",\n+                );\n                 if !expr_did.is_local() {\n                     span_bug!(tcx.def_span(expr_did),\n                         \"variant discriminant evaluation succeeded \\"}, {"sha": "79a6311185076a0b5366661722871d48ba463b25", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -476,7 +476,6 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         Some(interpret::EvalError {\n             kind: tcx.lift(&self.kind)?,\n-            backtrace: self.backtrace.clone(),\n         })\n     }\n }\n@@ -578,7 +577,7 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             PathNotFound(ref v) => PathNotFound(v.clone()),\n             UnimplementedTraitSelection => UnimplementedTraitSelection,\n             TypeckError => TypeckError,\n-            ReferencedConstant => ReferencedConstant,\n+            ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(err)?),\n             OverflowNeg => OverflowNeg,\n             Overflow(op) => Overflow(op),\n             DivisionByZero => DivisionByZero,\n@@ -595,14 +594,7 @@ impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n         use middle::const_val::ErrKind::*;\n \n         Some(match *self {\n-            NonConstPath => NonConstPath,\n-            UnimplementedConstVal(s) => UnimplementedConstVal(s),\n-            IndexOutOfBounds { len, index } => IndexOutOfBounds { len, index },\n-\n-            LayoutError(ref e) => {\n-                return tcx.lift(e).map(LayoutError)\n-            }\n-\n+            CouldNotResolve => CouldNotResolve,\n             TypeckError => TypeckError,\n             CheckMatchError => CheckMatchError,\n             Miri(ref e, ref frames) => return tcx.lift(e).map(|e| Miri(e, frames.clone())),"}, {"sha": "7c1035e2fcb8882f190d3e5e2f274bbcf834e98d", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -217,7 +217,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 Ok((llval, constant.ty))\n             })\n             .unwrap_or_else(|e| {\n-                e.report(bx.tcx(), constant.span, \"shuffle_indices\");\n+                e.report_as_error(\n+                    bx.tcx().at(constant.span),\n+                    \"could not evaluate shuffle_indices at compile time\",\n+                );\n                 // We've errored, so we don't have to produce working code.\n                 let ty = self.monomorphize(&constant.ty);\n                 let llty = bx.cx.layout_of(ty).llvm_type(bx.cx);"}, {"sha": "9f32b41cb13e7913b9f8d6e5d7f0fc6a84d5e091", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -416,7 +416,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                                 // FIXME: generate a panic here\n                             },\n                             mir::Literal::Value { .. } => {\n-                                err.report(bx.tcx(), constant.span, \"const operand\");\n+                                err.report_as_error(\n+                                    bx.tcx().at(constant.span),\n+                                    \"could not evaluate constant operand\",\n+                                );\n                             },\n                         }\n                         // We've errored, so we don't have to produce working code."}, {"sha": "d788e312d155abe79fa4dab0840288bd8d41eab8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1501,24 +1501,11 @@ fn check_const(cx: &LateContext, body_id: hir::BodyId, what: &str) {\n     };\n     if let Err(err) = cx.tcx.const_eval(param_env.and(cid)) {\n         let span = cx.tcx.def_span(def_id);\n-        let mut diag = cx.struct_span_lint(\n-            CONST_ERR,\n-            span,\n+        err.report_as_lint(\n+            cx.tcx.at(span),\n             &format!(\"this {} cannot be used\", what),\n+            cx.current_lint_root(),\n         );\n-        use rustc::middle::const_val::ConstEvalErrDescription;\n-        match err.description() {\n-            ConstEvalErrDescription::Simple(message) => {\n-                diag.span_label(span, message);\n-            }\n-            ConstEvalErrDescription::Backtrace(miri, frames) => {\n-                diag.span_label(span, format!(\"{}\", miri));\n-                for frame in frames {\n-                    diag.span_label(frame.span, format!(\"inside call to `{}`\", frame.location));\n-                }\n-            }\n-        }\n-        diag.emit()\n     }\n }\n "}, {"sha": "f23e10ae5d2d80071fc65fef0780a993eb0d6864", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -523,7 +523,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let count = match cx.tcx.at(span).const_eval(cx.param_env.and(global_id)) {\n                 Ok(cv) => cv.unwrap_usize(cx.tcx),\n                 Err(e) => {\n-                    e.report(cx.tcx, cx.tcx.def_span(def_id), \"array length\");\n+                    e.report_as_error(cx.tcx.at(span), \"could not evaluate array length\");\n                     0\n                 },\n             };"}, {"sha": "7cef8a75aa6baf90d881b038c6a06ca43a55baba", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -141,13 +141,13 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternError::FloatBug => {\n                     // FIXME(#31407) this is only necessary because float parsing is buggy\n                     ::rustc::middle::const_val::struct_error(\n-                        self.tcx, pat_span,\n+                        self.tcx.at(pat_span),\n                         \"could not evaluate float literal (see issue #31407)\",\n                     ).emit();\n                 }\n                 PatternError::NonConstPath(span) => {\n                     ::rustc::middle::const_val::struct_error(\n-                        self.tcx, span,\n+                        self.tcx.at(span),\n                         \"runtime values cannot be referenced in patterns\",\n                     ).emit();\n                 }"}, {"sha": "7dae79530c488d6a8abba1111479e831729fe9c4", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -695,7 +695,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 return self.const_to_pat(instance, value, id, span)\n                             },\n                             Err(err) => {\n-                                err.report(self.tcx, span, \"pattern\");\n+                                err.report_as_error(\n+                                    self.tcx.at(span),\n+                                    \"could not evaluate constant pattern\",\n+                                );\n                                 PatternKind::Wild\n                             },\n                         }"}, {"sha": "3fcf1b5c8ed599e84d4b442cbf67ed7e63536f06", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -65,34 +65,12 @@ pub fn eval_promoted<'a, 'mir, 'tcx>(\n     cid: GlobalId<'tcx>,\n     mir: &'mir mir::Mir<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> Option<(Value, Scalar, Ty<'tcx>)> {\n+) -> EvalResult<'tcx, (Value, Scalar, Ty<'tcx>)> {\n     ecx.with_fresh_body(|ecx| {\n-        let res = eval_body_using_ecx(ecx, cid, Some(mir), param_env);\n-        match res {\n-            Ok(val) => Some(val),\n-            Err(mut err) => {\n-                ecx.report(&mut err, false, None);\n-                None\n-            }\n-        }\n+        eval_body_using_ecx(ecx, cid, Some(mir), param_env)\n     })\n }\n \n-pub fn eval_body<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    cid: GlobalId<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> Option<(Value, Scalar, Ty<'tcx>)> {\n-    let (res, ecx) = eval_body_and_ecx(tcx, cid, None, param_env);\n-    match res {\n-        Ok(val) => Some(val),\n-        Err(mut err) => {\n-            ecx.report(&mut err, true, None);\n-            None\n-        }\n-    }\n-}\n-\n pub fn value_to_const_value<'tcx>(\n     ecx: &EvalContext<'_, '_, 'tcx, CompileTimeEvaluator>,\n     val: Value,\n@@ -124,9 +102,17 @@ pub fn value_to_const_value<'tcx>(\n     })();\n     match val {\n         Ok(val) => ty::Const::from_const_value(ecx.tcx.tcx, val, ty),\n-        Err(mut err) => {\n-            ecx.report(&mut err, true, None);\n-            bug!(\"miri error occured when converting Value to ConstValue\")\n+        Err(err) => {\n+            let (frames, span) = ecx.generate_stacktrace(None);\n+            let err = ConstEvalErr {\n+                span,\n+                kind: ErrKind::Miri(err, frames).into(),\n+            };\n+            err.report_as_error(\n+                ecx.tcx,\n+                \"failed to convert Value to ConstValue, this is a bug\",\n+            );\n+            span_bug!(span, \"miri error occured when converting Value to ConstValue\")\n         }\n     }\n }\n@@ -578,16 +564,17 @@ pub fn const_eval_provider<'a, 'tcx>(\n             val = ecx.try_read_by_ref(val, miri_ty)?;\n         }\n         Ok(value_to_const_value(&ecx, val, miri_ty))\n-    }).map_err(|mut err| {\n-        if tcx.is_static(def_id).is_some() {\n-            ecx.report(&mut err, true, None);\n-        }\n+    }).map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n         let err = ErrKind::Miri(err, trace);\n-        ConstEvalErr {\n+        let err = ConstEvalErr {\n             kind: err.into(),\n             span,\n+        };\n+        if tcx.is_static(def_id).is_some() {\n+            err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n         }\n+        err\n     })\n }\n "}, {"sha": "3e91fa72cae58c0903f7b4f90c283a260c98ee61", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 85, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::hir::map::definitions::DefPathData;\n-use rustc::middle::const_val::{ConstVal, ErrKind};\n+use rustc::middle::const_val::ConstVal;\n use rustc::mir;\n use rustc::ty::layout::{self, Size, Align, HasDataLayout, IntegerExt, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n@@ -15,7 +15,7 @@ use syntax::codemap::{self, Span};\n use syntax::ast::Mutability;\n use rustc::mir::interpret::{\n     GlobalId, Value, Scalar,\n-    EvalError, EvalResult, EvalErrorKind, Pointer, ConstValue,\n+    EvalResult, EvalErrorKind, Pointer, ConstValue,\n };\n use std::mem;\n \n@@ -1056,15 +1056,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         } else {\n             self.param_env\n         };\n-        self.tcx.const_eval(param_env.and(gid)).map_err(|err| match *err.kind {\n-            ErrKind::Miri(ref err, _) => match err.kind {\n-                EvalErrorKind::TypeckError |\n-                EvalErrorKind::Layout(_) => EvalErrorKind::TypeckError.into(),\n-                _ => EvalErrorKind::ReferencedConstant.into(),\n-            },\n-            ErrKind::TypeckError => EvalErrorKind::TypeckError.into(),\n-            ref other => bug!(\"const eval returned {:?}\", other),\n-        })\n+        self.tcx.const_eval(param_env.and(gid)).map_err(|err| EvalErrorKind::ReferencedConstant(err).into())\n     }\n \n     pub fn force_allocation(&mut self, place: Place) -> EvalResult<'tcx, Place> {\n@@ -1626,7 +1618,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         let mut last_span = None;\n         let mut frames = Vec::new();\n         // skip 1 because the last frame is just the environment of the constant\n-        for &Frame { instance, span, .. } in self.stack().iter().skip(1).rev() {\n+        for &Frame { instance, span, mir, block, stmt, .. } in self.stack().iter().skip(1).rev() {\n             // make sure we don't emit frames that are duplicates of the previous\n             if explicit_span == Some(span) {\n                 last_span = Some(span);\n@@ -1644,82 +1636,20 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             } else {\n                 instance.to_string()\n             };\n-            frames.push(FrameInfo { span, location });\n-        }\n-        trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n-        (frames, self.tcx.span)\n-    }\n-\n-    pub fn report(&self, e: &mut EvalError, as_err: bool, explicit_span: Option<Span>) {\n-        match e.kind {\n-            EvalErrorKind::Layout(_) |\n-            EvalErrorKind::TypeckError => return,\n-            _ => {},\n-        }\n-        if let Some(ref mut backtrace) = e.backtrace {\n-            let mut trace_text = \"\\n\\nAn error occurred in miri:\\n\".to_string();\n-            backtrace.resolve();\n-            write!(trace_text, \"backtrace frames: {}\\n\", backtrace.frames().len()).unwrap();\n-            'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n-                if frame.symbols().is_empty() {\n-                    write!(trace_text, \"{}: no symbols\\n\", i).unwrap();\n-                }\n-                for symbol in frame.symbols() {\n-                    write!(trace_text, \"{}: \", i).unwrap();\n-                    if let Some(name) = symbol.name() {\n-                        write!(trace_text, \"{}\\n\", name).unwrap();\n-                    } else {\n-                        write!(trace_text, \"<unknown>\\n\").unwrap();\n-                    }\n-                    write!(trace_text, \"\\tat \").unwrap();\n-                    if let Some(file_path) = symbol.filename() {\n-                        write!(trace_text, \"{}\", file_path.display()).unwrap();\n-                    } else {\n-                        write!(trace_text, \"<unknown_file>\").unwrap();\n-                    }\n-                    if let Some(line) = symbol.lineno() {\n-                        write!(trace_text, \":{}\\n\", line).unwrap();\n-                    } else {\n-                        write!(trace_text, \"\\n\").unwrap();\n-                    }\n-                }\n-            }\n-            error!(\"{}\", trace_text);\n-        }\n-        if let Some(frame) = self.stack().last() {\n-            let block = &frame.mir.basic_blocks()[frame.block];\n-            let span = explicit_span.unwrap_or_else(|| if frame.stmt < block.statements.len() {\n-                block.statements[frame.stmt].source_info.span\n-            } else {\n-                block.terminator().source_info.span\n-            });\n-            trace!(\"reporting const eval failure at {:?}\", span);\n-            let mut err = if as_err {\n-                ::rustc::middle::const_val::struct_error(*self.tcx, span, \"constant evaluation error\")\n+            let block = &mir.basic_blocks()[block];\n+            let source_info = if stmt < block.statements.len() {\n+                block.statements[stmt].source_info\n             } else {\n-                let node_id = self\n-                    .stack()\n-                    .iter()\n-                    .rev()\n-                    .filter_map(|frame| self.tcx.hir.as_local_node_id(frame.instance.def_id()))\n-                    .next()\n-                    .expect(\"some part of a failing const eval must be local\");\n-                self.tcx.struct_span_lint_node(\n-                    ::rustc::lint::builtin::CONST_ERR,\n-                    node_id,\n-                    span,\n-                    \"constant evaluation error\",\n-                )\n+                block.terminator().source_info\n             };\n-            let (frames, span) = self.generate_stacktrace(explicit_span);\n-            err.span_label(span, e.to_string());\n-            for FrameInfo { span, location } in frames {\n-                err.span_note(span, &format!(\"inside call to `{}`\", location));\n-            }\n-            err.emit();\n-        } else {\n-            self.tcx.sess.err(&e.to_string());\n+            let lint_root = match mir.source_scope_local_data {\n+                mir::ClearCrossCrate::Set(ref ivs) => Some(ivs[source_info.scope].lint_root),\n+                mir::ClearCrossCrate::Clear => None,\n+            };\n+            frames.push(FrameInfo { span, location, lint_root });\n         }\n+        trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n+        (frames, self.tcx.span)\n     }\n \n     pub fn sign_extend(&self, value: u128, ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {"}, {"sha": "ec308c2193d567bcecc937af5a7f3fd24084850a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::ParamEnv;\n use rustc::ty::maps::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size};\n use syntax::ast::Mutability;\n-use rustc::middle::const_val::{ConstVal, ErrKind};\n+use rustc::middle::const_val::ConstVal;\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::{Pointer, AllocId, Allocation, AccessKind, Value,\n@@ -285,16 +285,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             instance,\n             promoted: None,\n         };\n-        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|err| {\n-            match *err.kind {\n-                ErrKind::Miri(ref err, _) => match err.kind {\n-                    EvalErrorKind::TypeckError |\n-                    EvalErrorKind::Layout(_) => EvalErrorKind::TypeckError.into(),\n-                    _ => EvalErrorKind::ReferencedConstant.into(),\n-                },\n-                ErrKind::TypeckError => EvalErrorKind::TypeckError.into(),\n-                ref other => bug!(\"const eval returned {:?}\", other),\n-            }\n+        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|_| {\n+            // no need to report anything, the const_eval call takes care of that for statics\n+            assert!(self.tcx.is_static(def_id).is_some());\n+            EvalErrorKind::TypeckError.into()\n         }).map(|val| {\n             let const_val = match val.val {\n                 ConstVal::Value(val) => val,"}, {"sha": "3afcd6f2d9bb562bd4af5ce4d8c3ef60288c7aa8", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -21,7 +21,6 @@ pub use self::memory::{Memory, MemoryKind, HasMemory};\n pub use self::const_eval::{\n     eval_promoted,\n     mk_borrowck_eval_cx,\n-    eval_body,\n     CompileTimeEvaluator,\n     const_value_to_allocation_provider,\n     const_eval_provider,"}, {"sha": "a8a50c50f592e844ca5468bba3bd7d6e179bed00", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -388,7 +388,10 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 Ok(val) => collect_const(tcx, val, instance.substs, &mut neighbors),\n                 Err(err) => {\n                     let span = tcx.def_span(def_id);\n-                    err.report(tcx, span, \"static\");\n+                    err.report_as_error(\n+                        tcx.at(span),\n+                        \"could not evaluate static initializer\",\n+                    );\n                 }\n             }\n         }\n@@ -1187,13 +1190,25 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_env = ty::ParamEnv::reveal_all();\n     for i in 0..mir.promoted.len() {\n         use rustc_data_structures::indexed_vec::Idx;\n+        let i = Promoted::new(i);\n         let cid = GlobalId {\n             instance,\n-            promoted: Some(Promoted::new(i)),\n+            promoted: Some(i),\n         };\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => collect_const(tcx, val, instance.substs, output),\n-            Err(_) => {},\n+            Err(err) => {\n+                use rustc::middle::const_val::ErrKind;\n+                use rustc::mir::interpret::EvalErrorKind;\n+                if let ErrKind::Miri(ref miri, ..) = *err.kind {\n+                    if let EvalErrorKind::ReferencedConstant(_) = miri.kind {\n+                        err.report_as_error(\n+                            tcx.at(mir.promoted[i].span),\n+                            \"erroneous constant used\",\n+                        );\n+                    }\n+                }\n+            },\n         }\n     }\n }\n@@ -1236,7 +1251,10 @@ fn collect_const<'a, 'tcx>(\n                 Ok(val) => val.val,\n                 Err(err) => {\n                     let span = tcx.def_span(def_id);\n-                    err.report(tcx, span, \"constant\");\n+                    err.report_as_error(\n+                        tcx.at(span),\n+                        \"constant evaluation error\",\n+                    );\n                     return;\n                 }\n             }"}, {"sha": "24382815084619dee7a74c01d18979e26b5309a1", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 69, "deletions": 41, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n-use rustc::middle::const_val::ConstVal;\n+use rustc::middle::const_val::{ConstVal, ConstEvalErr, ErrKind};\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, Scalar, GlobalId, EvalResult};\n use interpret::EvalContext;\n@@ -121,48 +121,75 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n \n     fn use_ecx<F, T>(\n         &mut self,\n-        span: Span,\n+        source_info: SourceInfo,\n         f: F\n     ) -> Option<T>\n     where\n         F: FnOnce(&mut Self) -> EvalResult<'tcx, T>,\n     {\n-        self.ecx.tcx.span = span;\n+        self.ecx.tcx.span = source_info.span;\n+        let lint_root = match self.mir.source_scope_local_data {\n+            ClearCrossCrate::Set(ref ivs) => {\n+                use rustc_data_structures::indexed_vec::Idx;\n+                //FIXME(#51314): remove this check\n+                if source_info.scope.index() >= ivs.len() {\n+                    return None;\n+                }\n+                ivs[source_info.scope].lint_root\n+            },\n+            ClearCrossCrate::Clear => return None,\n+        };\n         let r = match f(self) {\n             Ok(val) => Some(val),\n-            Err(mut err) => {\n-                self.ecx.report(&mut err, false, Some(span));\n+            Err(err) => {\n+                let (frames, span) = self.ecx.generate_stacktrace(None);\n+                let err = ConstEvalErr {\n+                    span,\n+                    kind: ErrKind::Miri(err, frames).into(),\n+                };\n+                err.report_as_lint(\n+                    self.ecx.tcx,\n+                    \"this expression will panic at runtime\",\n+                    lint_root,\n+                );\n                 None\n             },\n         };\n         self.ecx.tcx.span = DUMMY_SP;\n         r\n     }\n \n-    fn const_eval(&mut self, cid: GlobalId<'tcx>, span: Span) -> Option<Const<'tcx>> {\n+    fn const_eval(&mut self, cid: GlobalId<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n         let value = match self.tcx.const_eval(self.param_env.and(cid)) {\n             Ok(val) => val,\n             Err(err) => {\n-                err.report(self.tcx, err.span, \"constant propagated\");\n+                err.report_as_error(\n+                    self.tcx.at(err.span),\n+                    \"constant evaluation error\",\n+                );\n                 return None;\n             },\n         };\n         let val = match value.val {\n             ConstVal::Value(v) => {\n-                self.use_ecx(span, |this| this.ecx.const_value_to_value(v, value.ty))?\n+                self.use_ecx(source_info, |this| this.ecx.const_value_to_value(v, value.ty))?\n             },\n             _ => bug!(\"eval produced: {:?}\", value),\n         };\n-        let val = (val, value.ty, span);\n+        let val = (val, value.ty, source_info.span);\n         trace!(\"evaluated {:?} to {:?}\", cid, val);\n         Some(val)\n     }\n \n-    fn eval_constant(&mut self, c: &Constant<'tcx>) -> Option<Const<'tcx>> {\n+    fn eval_constant(\n+        &mut self,\n+        c: &Constant<'tcx>,\n+        source_info: SourceInfo,\n+    ) -> Option<Const<'tcx>> {\n         match c.literal {\n             Literal::Value { value } => match value.val {\n                 ConstVal::Value(v) => {\n-                    let v = self.use_ecx(c.span, |this| {\n+                    let v = self.use_ecx(source_info, |this| {\n                         this.ecx.const_value_to_value(v, value.ty)\n                     })?;\n                     Some((v, value.ty, c.span))\n@@ -178,7 +205,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                         instance,\n                         promoted: None,\n                     };\n-                    self.const_eval(cid, c.span)\n+                    self.const_eval(cid, source_info)\n                 },\n             },\n             // evaluate the promoted and replace the constant with the evaluated result\n@@ -196,25 +223,24 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 };\n                 // cannot use `const_eval` here, because that would require having the MIR\n                 // for the current function available, but we're producing said MIR right now\n-                let span = self.mir.span;\n-                let (value, _, ty) = self.use_ecx(span, |this| {\n-                    Ok(eval_promoted(&mut this.ecx, cid, this.mir, this.param_env))\n-                })??;\n+                let (value, _, ty) = self.use_ecx(source_info, |this| {\n+                    eval_promoted(&mut this.ecx, cid, this.mir, this.param_env)\n+                })?;\n                 let val = (value, ty, c.span);\n                 trace!(\"evaluated {:?} to {:?}\", c, val);\n                 Some(val)\n             }\n         }\n     }\n \n-    fn eval_place(&mut self, place: &Place<'tcx>) -> Option<Const<'tcx>> {\n+    fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n         match *place {\n             Place::Local(loc) => self.places[loc].clone(),\n             Place::Projection(ref proj) => match proj.elem {\n                 ProjectionElem::Field(field, _) => {\n                     trace!(\"field proj on {:?}\", proj.base);\n-                    let (base, ty, span) = self.eval_place(&proj.base)?;\n-                    let valty = self.use_ecx(span, |this| {\n+                    let (base, ty, span) = self.eval_place(&proj.base, source_info)?;\n+                    let valty = self.use_ecx(source_info, |this| {\n                         this.ecx.read_field(base, None, field, ty)\n                     })?;\n                     Some((valty.value, valty.ty, span))\n@@ -225,10 +251,11 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         }\n     }\n \n-    fn eval_operand(&mut self, op: &Operand<'tcx>) -> Option<Const<'tcx>> {\n+    fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n         match *op {\n-            Operand::Constant(ref c) => self.eval_constant(c),\n-            Operand::Move(ref place) | Operand::Copy(ref place) => self.eval_place(place),\n+            Operand::Constant(ref c) => self.eval_constant(c, source_info),\n+            | Operand::Move(ref place)\n+            | Operand::Copy(ref place) => self.eval_place(place, source_info),\n         }\n     }\n \n@@ -243,10 +270,10 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n             // This branch exists for the sanity type check\n             Rvalue::Use(Operand::Constant(ref c)) => {\n                 assert_eq!(c.ty, place_ty);\n-                self.eval_constant(c)\n+                self.eval_constant(c, source_info)\n             },\n             Rvalue::Use(ref op) => {\n-                self.eval_operand(op)\n+                self.eval_operand(op, source_info)\n             },\n             Rvalue::Repeat(..) |\n             Rvalue::Ref(..) |\n@@ -279,17 +306,17 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     return None;\n                 }\n \n-                let val = self.eval_operand(arg)?;\n-                let prim = self.use_ecx(span, |this| {\n+                let val = self.eval_operand(arg, source_info)?;\n+                let prim = self.use_ecx(source_info, |this| {\n                     this.ecx.value_to_scalar(ValTy { value: val.0, ty: val.1 })\n                 })?;\n-                let val = self.use_ecx(span, |this| this.ecx.unary_op(op, prim, val.1))?;\n+                let val = self.use_ecx(source_info, |this| this.ecx.unary_op(op, prim, val.1))?;\n                 Some((Value::Scalar(val), place_ty, span))\n             }\n             Rvalue::CheckedBinaryOp(op, ref left, ref right) |\n             Rvalue::BinaryOp(op, ref left, ref right) => {\n                 trace!(\"rvalue binop {:?} for {:?} and {:?}\", op, left, right);\n-                let right = self.eval_operand(right)?;\n+                let right = self.eval_operand(right, source_info)?;\n                 let def_id = if self.tcx.is_closure(self.source.def_id) {\n                     self.tcx.closure_base_def_id(self.source.def_id)\n                 } else {\n@@ -301,7 +328,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     return None;\n                 }\n \n-                let r = self.use_ecx(span, |this| {\n+                let r = self.use_ecx(source_info, |this| {\n                     this.ecx.value_to_scalar(ValTy { value: right.0, ty: right.1 })\n                 })?;\n                 if op == BinOp::Shr || op == BinOp::Shl {\n@@ -332,12 +359,12 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                         return None;\n                     }\n                 }\n-                let left = self.eval_operand(left)?;\n-                let l = self.use_ecx(span, |this| {\n+                let left = self.eval_operand(left, source_info)?;\n+                let l = self.use_ecx(source_info, |this| {\n                     this.ecx.value_to_scalar(ValTy { value: left.0, ty: left.1 })\n                 })?;\n                 trace!(\"const evaluating {:?} for {:?} and {:?}\", op, left, right);\n-                let (val, overflow) = self.use_ecx(span, |this| {\n+                let (val, overflow) = self.use_ecx(source_info, |this| {\n                     this.ecx.binary_op(op, l, left.1, r, right.1)\n                 })?;\n                 let val = if let Rvalue::CheckedBinaryOp(..) = *rvalue {\n@@ -348,11 +375,8 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 } else {\n                     if overflow {\n                         use rustc::mir::interpret::EvalErrorKind;\n-                        let mut err = EvalErrorKind::Overflow(op).into();\n-                        self.use_ecx(span, |this| {\n-                            this.ecx.report(&mut err, false, Some(span));\n-                            Ok(())\n-                        });\n+                        let err = EvalErrorKind::Overflow(op).into();\n+                        let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;\n                     }\n                     Value::Scalar(val)\n@@ -431,7 +455,8 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n     ) {\n         trace!(\"visit_constant: {:?}\", constant);\n         self.super_constant(constant, location);\n-        self.eval_constant(constant);\n+        let source_info = *self.mir.source_info(location);\n+        self.eval_constant(constant, source_info);\n     }\n \n     fn visit_statement(\n@@ -466,8 +491,9 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n         location: Location,\n     ) {\n         self.super_terminator_kind(block, kind, location);\n+        let source_info = *self.mir.source_info(location);\n         if let TerminatorKind::Assert { expected, msg, cond, .. } = kind {\n-            if let Some(value) = self.eval_operand(cond) {\n+            if let Some(value) = self.eval_operand(cond, source_info) {\n                 trace!(\"assertion on {:?} should be {:?}\", value, expected);\n                 if Value::Scalar(Scalar::from_bool(*expected)) != value.0 {\n                     // poison all places this operand references so that further code\n@@ -502,13 +528,15 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         DivisionByZero |\n                         RemainderByZero => msg.description().to_owned(),\n                         BoundsCheck { ref len, ref index } => {\n-                            let len = self.eval_operand(len).expect(\"len must be const\");\n+                            let len = self\n+                                .eval_operand(len, source_info)\n+                                .expect(\"len must be const\");\n                             let len = match len.0 {\n                                 Value::Scalar(Scalar::Bits { bits, ..}) => bits,\n                                 _ => bug!(\"const len not primitive: {:?}\", len),\n                             };\n                             let index = self\n-                                .eval_operand(index)\n+                                .eval_operand(index, source_info)\n                                 .expect(\"index must be const\");\n                             let index = match index.0 {\n                                 Value::Scalar(Scalar::Bits { bits, .. }) => bits,"}, {"sha": "83a654aaae9ca0cb273dd769bd827dd981e69095", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -4040,7 +4040,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let count = tcx.const_eval(param_env.and(global_id));\n \n             if let Err(ref err) = count {\n-                err.report(tcx, tcx.def_span(count_def_id), \"constant expression\");\n+                err.report_as_error(\n+                    tcx.at(tcx.def_span(count_def_id)),\n+                    \"could not evaluate repeat length\",\n+                );\n             }\n \n             let uty = match expected {"}, {"sha": "22a3c5ceeb7142893ddfd504cc06792767256b91", "filename": "src/test/compile-fail/const-array-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -16,7 +16,7 @@ const FOO: [usize; 3] = [1, 2, 3];\n const BAR: usize = FOO[5]; // no error, because the error below occurs before regular const eval\n \n const BLUB: [u32; FOO[4]] = [5, 6];\n-//~^ ERROR constant evaluation error [E0080]\n+//~^ ERROR could not evaluate constant expression [E0080]\n //~| index out of bounds: the len is 3 but the index is 4\n \n fn main() {"}, {"sha": "92c6b1fd0b5822a0125c3d8e6bf7dad3f08821dc", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -12,7 +12,7 @@\n \n pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n //~^ ERROR this constant cannot be used\n-//~| ERROR constant evaluation error\n+//~| ERROR this expression will panic at runtime\n pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n //~^ ERROR this constant cannot be used\n pub const C: u8 = 200u8 * 4; //~ ERROR const_err"}, {"sha": "4a5e78b381ed049bdace21dc842ded1f758f6ed9", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -13,14 +13,17 @@\n pub const A: i8 = -std::i8::MIN;\n //~^ ERROR E0080\n //~| ERROR attempt to negate with overflow\n-//~| ERROR constant evaluation error\n+//~| ERROR this expression will panic at runtime\n //~| ERROR this constant cannot be used\n pub const B: i8 = A;\n //~^ ERROR const_err\n+//~| ERROR const_err\n pub const C: u8 = A as u8;\n //~^ ERROR const_err\n+//~| ERROR const_err\n pub const D: i8 = 50 - A;\n //~^ ERROR const_err\n+//~| ERROR const_err\n \n fn main() {\n     let _ = (A, B, C, D);"}, {"sha": "f77603b3ebafcf83a884e12316dec5e278220fd5", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -23,6 +23,7 @@ fn black_box<T>(_: T) {\n // Make sure that the two uses get two errors.\n const FOO: u8 = [5u8][1];\n //~^ ERROR constant evaluation error\n+//~| ERROR constant evaluation error\n //~| index out of bounds: the len is 1 but the index is 1\n \n fn main() {"}, {"sha": "29bc665a22e7bbe5ed3c4b071ae847d2a3719f5e", "filename": "src/test/compile-fail/const-integer-bool-ops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -16,7 +16,6 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR: [i32; X] = [99; 34];\n-//~^ ERROR constant evaluation error\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -26,7 +25,6 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR1: [i32; X1] = [99; 47];\n-//~^ ERROR constant evaluation error\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -36,7 +34,6 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n-//~^ ERROR constant evaluation error\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -46,43 +43,36 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR3: [i32; X3] = [99; 6];\n-//~^ ERROR constant evaluation error\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR: [i32; Y] = [99; 1];\n-//~^ ERROR constant evaluation error\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR1: [i32; Y1] = [99; 1];\n-//~^ ERROR constant evaluation error\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR2: [i32; Y2] = [99; 1];\n-//~^ ERROR constant evaluation error\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR3: [i32; Y3] = [99; 0];\n-//~^ ERROR constant evaluation error\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR4: [i32; Y4] = [99; 0];\n-//~^ ERROR constant evaluation error\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR5: [i32; Y5] = [99; 0];\n-//~^ ERROR constant evaluation error\n \n fn main() {\n     let _ = ARR;"}, {"sha": "054c272a3d321f6f5e740d8baf06711c1e063a37", "filename": "src/test/compile-fail/const-len-underflow-subspans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -16,6 +16,6 @@ const TWO: usize = 2;\n \n fn main() {\n     let a: [i8; ONE - TWO] = unimplemented!();\n-    //~^ ERROR constant evaluation error\n+    //~^ ERROR could not evaluate constant expression\n     //~| attempt to subtract with overflow\n }"}, {"sha": "304eef7847c9195aafe65d3b47ecceba7ff073fc", "filename": "src/test/compile-fail/const-match-check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-match-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-match-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-match-check.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -40,5 +40,4 @@ fn main() {\n     #[cfg(eval2)]\n     let x: [i32; { let 0 = 0; 0 }] = [];\n     //[eval2]~^ ERROR refutable pattern in local binding\n-    //[eval2]~| ERROR constant evaluation error\n }"}, {"sha": "b42c440f87d74e3678dfc6bf79c8d32a5e5ee7d8", "filename": "src/test/compile-fail/const-tup-index-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -14,7 +14,6 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected tuple, found usize\n const ARR: [i32; TUP.0] = [];\n-//~^ ERROR constant evaluation error\n \n fn main() {\n }"}, {"sha": "ada038114d8d095d0d7e2deb5c3091581be51a0b", "filename": "src/test/compile-fail/eval-enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Feval-enum.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -11,12 +11,12 @@\n enum Test {\n     DivZero = 1/0,\n     //~^ attempt to divide by zero\n-    //~| ERROR constant evaluation error\n-    //~| ERROR constant evaluation error\n+    //~| ERROR could not evaluate enum discriminant\n+    //~| ERROR this expression will panic at runtime\n     RemZero = 1%0,\n     //~^ attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR constant evaluation error\n-    //~| ERROR constant evaluation error\n+    //~| ERROR could not evaluate enum discriminant\n+    //~| ERROR this expression will panic at runtime\n }\n \n fn main() {}"}, {"sha": "8a0471135afc43f73ba93889702077c80382c0eb", "filename": "src/test/compile-fail/issue-43105.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -12,11 +12,11 @@ fn xyz() -> u8 { 42 }\n \n const NUM: u8 = xyz();\n //~^ ERROR calls in constants are limited to constant functions, tuple structs and tuple variants\n-//~| ERROR constant evaluation error\n \n fn main() {\n     match 1 {\n         NUM => unimplemented!(),\n+        //~^ ERROR could not evaluate constant pattern\n         _ => unimplemented!(),\n     }\n }"}, {"sha": "b0d6cb5df875a32acf7adf89aaf222e9b3e0b8cd", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -16,62 +16,62 @@ use std::thread;\n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR constant evaluation error\n+    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "ce3d54ee46d933168f1774ed3cc99e00dde73f98", "filename": "src/test/ui/const-eval-overflow-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -19,11 +19,11 @@ use std::{u8, u16, u32, u64, usize};\n \n const NEG_128: i8 = -128;\n const NEG_NEG_128: i8 = -NEG_128;\n-//~^ ERROR E0080\n \n fn main() {\n     match -128i8 {\n         NEG_NEG_128 => println!(\"A\"),\n+        //~^ ERROR could not evaluate constant pattern\n         _ => println!(\"B\"),\n     }\n }"}, {"sha": "e99d409880e072fdd07ae6810c3070d3e8caaef0", "filename": "src/test/ui/const-eval-overflow-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,12 +1,9 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/const-eval-overflow-2.rs:21:25\n+error[E0080]: could not evaluate constant pattern\n+  --> $DIR/const-eval-overflow-2.rs:25:9\n    |\n LL | const NEG_NEG_128: i8 = -NEG_128;\n-   |                         ^^^^^^^^ attempt to negate with overflow\n-   |\n-note: for pattern here\n-  --> $DIR/const-eval-overflow-2.rs:26:9\n-   |\n+   |                         -------- attempt to negate with overflow\n+...\n LL |         NEG_NEG_128 => println!(\"A\"),\n    |         ^^^^^^^^^^^\n "}, {"sha": "9fc31b7c7278174d52773255dc3009f615e30c57", "filename": "src/test/ui/const-eval-overflow-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -20,9 +20,9 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n+    //~^ ERROR could not evaluate constant expression\n     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-    //~^ ERROR E0080\n-    //~| ERROR attempt to add with overflow\n+    //~^ ERROR attempt to add with overflow\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {"}, {"sha": "058c8730d7c9e23422da03814d608204a1d1e96d", "filename": "src/test/ui/const-eval-overflow-4.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,16 +1,21 @@\n error: attempt to add with overflow\n-  --> $DIR/const-eval-overflow-4.rs:23:13\n+  --> $DIR/const-eval-overflow-4.rs:24:13\n    |\n LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n    |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(const_err)] on by default\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/const-eval-overflow-4.rs:23:13\n+error[E0080]: could not evaluate constant expression\n+  --> $DIR/const-eval-overflow-4.rs:22:1\n    |\n-LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to add with overflow\n+LL | / const A_I8_T\n+LL | |     //~^ ERROR could not evaluate constant expression\n+LL | |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+   | |             --------------------- attempt to add with overflow\n+LL | |     //~^ ERROR attempt to add with overflow\n+LL | |     = [0; (i8::MAX as usize) + 1];\n+   | |__________________________________^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3580950854dc7f087b90990b6719d34d07a28cb4", "filename": "src/test/ui/const-eval/conditional_array_execution.nll.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -0,0 +1,74 @@\n+warning: attempt to subtract with overflow\n+  --> $DIR/conditional_array_execution.rs:15:19\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/conditional_array_execution.rs:11:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+\n+warning: this constant cannot be used\n+  --> $DIR/conditional_array_execution.rs:15:1\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   |\n+   |                   attempt to subtract with overflow\n+\n+warning: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+\n+error[E0080]: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:5\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/conditional_array_execution.rs:20:5\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |     ^^^^^^^^^^^^^^^---^^\n+   |                    |\n+   |                    referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ac555b25afdcd60647c1ec6200190777c544fa0a", "filename": "src/test/ui/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n #![warn(const_err)]\n \n const X: u32 = 5;\n@@ -19,5 +18,8 @@ const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n \n fn main() {\n     println!(\"{}\", FOO);\n-    //~^ WARN constant evaluation error\n+    //~^ WARN this expression will panic at runtime\n+    //~| WARN referenced constant\n+    //~| ERROR erroneous constant used\n+    //~| E0080\n }"}, {"sha": "64010c946a7f1de863670d6d429a076f2b1f8846", "filename": "src/test/ui/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,24 +1,53 @@\n warning: attempt to subtract with overflow\n-  --> $DIR/conditional_array_execution.rs:16:19\n+  --> $DIR/conditional_array_execution.rs:15:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/conditional_array_execution.rs:12:9\n+  --> $DIR/conditional_array_execution.rs:11:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: this constant cannot be used\n-  --> $DIR/conditional_array_execution.rs:16:1\n+  --> $DIR/conditional_array_execution.rs:15:1\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   |\n+   |                   attempt to subtract with overflow\n \n-warning: constant evaluation error\n-  --> $DIR/conditional_array_execution.rs:21:20\n+warning: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/conditional_array_execution.rs:20:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "55c64d2b04e45e7194280eb19e3b8508d7cd82ed", "filename": "src/test/ui/const-eval/index_out_of_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -10,6 +10,7 @@\n \n static FOO: i32 = [][0];\n //~^ ERROR E0080\n+//~| ERROR E0080\n \n fn main() {\n     let array = [std::env::args().len()];"}, {"sha": "828fba55a3afebc8b432e9fa6c36d7b18f531ded", "filename": "src/test/ui/const-eval/index_out_of_bounds.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,17 +1,25 @@\n-error[E0080]: constant evaluation error\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/index_out_of_bounds.rs:11:19\n    |\n LL | static FOO: i32 = [][0];\n    |                   ^^^^^ index out of bounds: the len is 0 but the index is 0\n \n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/index_out_of_bounds.rs:11:1\n+   |\n+LL | static FOO: i32 = [][0];\n+   | ^^^^^^^^^^^^^^^^^^-----^\n+   |                   |\n+   |                   index out of bounds: the len is 0 but the index is 0\n+\n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/index_out_of_bounds.rs:16:5\n+  --> $DIR/index_out_of_bounds.rs:17:5\n    |\n LL |     array[1]; //~ ERROR index out of bounds\n    |     ^^^^^^^^\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "3bde12ade90c3c2ff7ca8ccb95cd1c0b77963e95", "filename": "src/test/ui/const-eval/issue-43197.nll.stderr", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -0,0 +1,118 @@\n+warning: attempt to subtract with overflow\n+  --> $DIR/issue-43197.rs:20:20\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    ^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-43197.rs:11:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+\n+warning: this constant cannot be used\n+  --> $DIR/issue-43197.rs:20:5\n+   |\n+LL |     const X: u32 = 0-1;\n+   |     ^^^^^^^^^^^^^^^---^\n+   |                    |\n+   |                    attempt to subtract with overflow\n+\n+warning: attempt to subtract with overflow\n+  --> $DIR/issue-43197.rs:23:24\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        ^^^\n+\n+warning: this constant cannot be used\n+  --> $DIR/issue-43197.rs:23:5\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |     ^^^^^^^^^^^^^^^^^^^---^^\n+   |                        |\n+   |                        attempt to subtract with overflow\n+\n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+\n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n+\n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:5\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-43197.rs:26:5\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |     ^^^^^^^^^^^^^^^^^^-^^^^^\n+   |                       |\n+   |                       referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n+\n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "03aa65eb274671716088717e03ab1db03b76693e", "filename": "src/test/ui/const-eval/issue-43197.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n #![warn(const_err)]\n \n #![feature(const_fn)]\n@@ -25,6 +24,12 @@ fn main() {\n     //~^ WARN attempt to subtract with overflow\n     //~| WARN this constant cannot be used\n     println!(\"{} {}\", X, Y);\n-    //~^ WARN constant evaluation error\n-    //~| WARN constant evaluation error\n+    //~^ WARN this expression will panic at runtime\n+    //~| WARN this expression will panic at runtime\n+    //~| ERROR erroneous constant used\n+    //~| ERROR erroneous constant used\n+    //~| ERROR E0080\n+    //~| ERROR E0080\n+    //~| WARN referenced constant\n+    //~| WARN referenced constant\n }"}, {"sha": "071d878730744b409a2b47cb32040ef5ab4a91eb", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 66, "deletions": 11, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,42 +1,97 @@\n warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:21:20\n+  --> $DIR/issue-43197.rs:20:20\n    |\n LL |     const X: u32 = 0-1;\n    |                    ^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-43197.rs:12:9\n+  --> $DIR/issue-43197.rs:11:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:21:5\n+  --> $DIR/issue-43197.rs:20:5\n    |\n LL |     const X: u32 = 0-1;\n-   |     ^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |     ^^^^^^^^^^^^^^^---^\n+   |                    |\n+   |                    attempt to subtract with overflow\n \n warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:24:24\n+  --> $DIR/issue-43197.rs:23:24\n    |\n LL |     const Y: u32 = foo(0-1);\n    |                        ^^^\n \n warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:24:5\n+  --> $DIR/issue-43197.rs:23:5\n    |\n LL |     const Y: u32 = foo(0-1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   |     ^^^^^^^^^^^^^^^^^^^---^^\n+   |                        |\n+   |                        attempt to subtract with overflow\n \n-warning: constant evaluation error\n-  --> $DIR/issue-43197.rs:27:23\n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/issue-43197.rs:26:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-warning: constant evaluation error\n-  --> $DIR/issue-43197.rs:27:26\n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/issue-43197.rs:26:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n+\n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ad4f08966c01220560ac2b8cbdcac60a82d9436f", "filename": "src/test/ui/const-eval/issue-44578.nll.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -0,0 +1,39 @@\n+error[E0080]: referenced constant\n+  --> $DIR/issue-44578.rs:35:5\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n+...\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-44578.rs:35:5\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |     ^^^^^^^^^^^^^^^--------------------------^^\n+   |                    |\n+   |                    referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: referenced constant\n+  --> $DIR/issue-44578.rs:35:20\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n+...\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-44578.rs:35:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "59ac4ab311c6cc19163ab10ae70a3b86d00b5517", "filename": "src/test/ui/const-eval/issue-44578.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n-#![warn(const_err)]\n+#![allow(const_err)]\n \n trait Foo {\n     const AMT: usize;\n@@ -33,6 +32,7 @@ impl Foo for u16 {\n }\n \n fn main() {\n-    println!(\"{}\", <Bar<u16, u8> as Foo>::AMT); //~ WARN const_err\n-    //~^ WARN const_err\n+    println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+    //~^ ERROR erroneous constant used\n+    //~| ERROR E0080\n }"}, {"sha": "28a723a069edf5eda39331c0c3c14158d6198571", "filename": "src/test/ui/const-eval/issue-44578.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,18 +1,18 @@\n-warning: constant evaluation error\n-  --> $DIR/issue-44578.rs:36:20\n+error[E0080]: referenced constant\n+  --> $DIR/issue-44578.rs:35:20\n    |\n-LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT); //~ WARN const_err\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-44578.rs:12:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n+...\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: constant evaluation error\n-  --> $DIR/issue-44578.rs:36:20\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-44578.rs:35:20\n    |\n-LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT); //~ WARN const_err\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "af627ee5fbe70f65af41e68dee91e0d2ce357ca2", "filename": "src/test/ui/const-eval/issue-50814-2.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait C {\n+    const BOO: usize;\n+}\n+\n+trait Foo<T> {\n+    const BAR: usize;\n+}\n+\n+struct A<T>(T);\n+\n+impl<T: C> Foo<T> for A<T> {\n+    const BAR: usize = [5, 6, 7][T::BOO];\n+}\n+\n+fn foo<T: C>() -> &'static usize {\n+    &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n+//~| ERROR E0080\n+}\n+\n+impl C for () {\n+    const BOO: usize = 42;\n+}\n+\n+impl C for u32 {\n+    const BOO: usize = 1;\n+}\n+\n+fn main() {\n+    println!(\"{:x}\", foo::<()>() as *const usize as usize);\n+    println!(\"{:x}\", foo::<u32>() as *const usize as usize);\n+    println!(\"{:x}\", foo::<()>());\n+    println!(\"{:x}\", foo::<u32>());\n+}"}, {"sha": "3c59cb0e2bc727c03145f5f639a2755fc189f7fd", "filename": "src/test/ui/const-eval/issue-50814-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -0,0 +1,20 @@\n+error[E0080]: referenced constant\n+  --> $DIR/issue-50814-2.rs:26:5\n+   |\n+LL |     const BAR: usize = [5, 6, 7][T::BOO];\n+   |                        ----------------- index out of bounds: the len is 3 but the index is 42\n+...\n+LL |     &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-50814-2.rs:26:5\n+   |\n+LL |     &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n+   |     ^---------------------\n+   |      |\n+   |      referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8f2752453b52eb176980bc846f46240f17d4a558", "filename": "src/test/ui/const-eval/issue-50814.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Unsigned {\n+    const MAX: u8;\n+}\n+\n+struct U8(u8);\n+impl Unsigned for U8 {\n+    const MAX: u8 = 0xff;\n+}\n+\n+struct Sum<A,B>(A,B);\n+\n+impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n+    const MAX: u8 = A::MAX + B::MAX;\n+}\n+\n+fn foo<T>(_: T) -> &'static u8 {\n+    &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n+//~| ERROR E0080\n+}\n+\n+fn main() {\n+    foo(0);\n+}"}, {"sha": "145279ccc033d71d77f70f9513d9ca8eb0a57b5f", "filename": "src/test/ui/const-eval/issue-50814.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -0,0 +1,20 @@\n+error[E0080]: referenced constant\n+  --> $DIR/issue-50814.rs:27:5\n+   |\n+LL |     const MAX: u8 = A::MAX + B::MAX;\n+   |                     --------------- attempt to add with overflow\n+...\n+LL |     &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-50814.rs:27:5\n+   |\n+LL |     &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n+   |     ^-----------------\n+   |      |\n+   |      referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4888ed6e8dc7b3822ae92fae9da914ff6ef4897c", "filename": "src/test/ui/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -23,8 +23,8 @@ const fn bar() -> u8 {\n         // is run on a system whose pointers need more\n         // than 8 bits\n         Bar { a: &42 }.b as u8\n-        //~^ constant evaluation error\n-        //~| constant evaluation error\n+        //~^ ERROR this expression will panic at runtime\n+        //~| ERROR this expression will panic at runtime\n     }\n }\n "}, {"sha": "d805e1a27c9938811c43fc73f14c1d70afae2584", "filename": "src/test/ui/const-eval/promoted_const_fn_fail.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,4 +1,4 @@\n-error: constant evaluation error\n+error: this expression will panic at runtime\n   --> $DIR/promoted_const_fn_fail.rs:25:9\n    |\n LL |         Bar { a: &42 }.b as u8\n@@ -9,23 +9,12 @@ note: lint level defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-note: inside call to `bar`\n-  --> $DIR/promoted_const_fn_fail.rs:35:28\n-   |\n-LL |     let x: &'static u8 = &(bar() + 1);\n-   |                            ^^^^^\n \n-error: constant evaluation error\n+error: this expression will panic at runtime\n   --> $DIR/promoted_const_fn_fail.rs:25:9\n    |\n LL |         Bar { a: &42 }.b as u8\n    |         ^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n-   |\n-note: inside call to `bar`\n-  --> $DIR/promoted_const_fn_fail.rs:35:28\n-   |\n-LL |     let x: &'static u8 = &(bar() + 1);\n-   |                            ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a4c1c48a03dfe30f1a5a5f6f3076b9e7ccd884a8", "filename": "src/test/ui/const-eval/promoted_errors.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,4 +1,4 @@\n-warning: constant evaluation error\n+warning: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:17:14\n    |\n LL |     let _x = 0u32 - 1;\n@@ -16,7 +16,7 @@ warning: attempt to divide by zero\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n-warning: constant evaluation error\n+warning: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:19:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n@@ -28,13 +28,13 @@ warning: attempt to divide by zero\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n-warning: constant evaluation error\n+warning: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:22:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n-warning: constant evaluation error\n+warning: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:25:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));"}, {"sha": "352289417547e20a562e339df3b2460bb93e2c96", "filename": "src/test/ui/const-eval/pub_const_err.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -14,7 +14,9 @@ warning: this constant cannot be used\n   --> $DIR/pub_const_err.rs:16:1\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   | ^^^^^^^^^^^^^^^^^^^-----^\n+   |                    |\n+   |                    attempt to subtract with overflow\n \n warning: attempt to subtract with overflow\n   --> $DIR/pub_const_err.rs:20:22"}, {"sha": "a6db2176011d598e61ba6147d5350c8b4aa220ea", "filename": "src/test/ui/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -14,7 +14,9 @@ warning: this constant cannot be used\n   --> $DIR/pub_const_err_bin.rs:14:1\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+   | ^^^^^^^^^^^^^^^^^^^-----^\n+   |                    |\n+   |                    attempt to subtract with overflow\n \n warning: attempt to subtract with overflow\n   --> $DIR/pub_const_err_bin.rs:18:22"}, {"sha": "6eda41730b3073e6052a6b39ff58959b8e175d7d", "filename": "src/test/ui/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -19,13 +19,12 @@ const fn f(x: usize) -> usize {\n     for i in 0..x {\n         //~^ ERROR E0015\n         //~| ERROR E0019\n-        //~| ERROR E0080\n         sum += i;\n     }\n     sum\n }\n \n #[allow(unused_variables)]\n fn main() {\n-    let a : [i32; f(X)];\n+    let a : [i32; f(X)]; //~ ERROR E0080\n }"}, {"sha": "cdbf86f42ecc03592cf383d4db9bcda1b20fc2dd", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -26,20 +26,16 @@ error[E0019]: constant function contains unimplemented expression type\n LL |     for i in 0..x {\n    |              ^^^^\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/const-fn-error.rs:19:14\n+error[E0080]: could not evaluate constant expression\n+  --> $DIR/const-fn-error.rs:29:13\n    |\n LL |     for i in 0..x {\n-   |              ^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n+   |              ---- calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n ...\n-LL |     let a : [i32; f(X)];\n-   |                   ---- inside call to `f`\n-   |\n-note: for constant expression here\n-  --> $DIR/const-fn-error.rs:30:13\n-   |\n-LL |     let a : [i32; f(X)];\n-   |             ^^^^^^^^^^^\n+LL |     let a : [i32; f(X)]; //~ ERROR E0080\n+   |             ^^^^^^----^\n+   |                   |\n+   |                   inside call to `f`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "20b8865767459793351b132fe896878a2543496c", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -21,4 +21,5 @@ const LEN: usize = ONE - TWO;\n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n //~^ ERROR E0080\n+//~| ERROR E0080\n }"}, {"sha": "630828ef8f5178adbacc2bc7a9b4d55c4069e824", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -12,12 +12,23 @@ error[E0080]: constant evaluation error\n LL | const LEN: usize = ONE - TWO;\n    |                    ^^^^^^^^^ attempt to subtract with overflow\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/const-len-underflow-separate-spans.rs:22:17\n+error[E0080]: referenced constant\n+  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+   |\n+LL | const LEN: usize = ONE - TWO;\n+   |                    --------- attempt to subtract with overflow\n+...\n+LL |     let a: [i8; LEN] = unimplemented!();\n+   |            ^^^^^^^^^\n+\n+error[E0080]: could not evaluate constant expression\n+  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n-   |                 ^^^ referenced constant has errors\n+   |            ^^^^^---^\n+   |                 |\n+   |                 referenced constant has errors\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "a213c2b1b208e5294612026c31b0adcec654f39d", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -6,7 +6,7 @@ LL |     X = (1 << 500), //~ ERROR E0080\n    |\n    = note: #[deny(exceeding_bitshifts)] on by default\n \n-error[E0080]: constant evaluation error\n+error[E0080]: could not evaluate enum discriminant\n   --> $DIR/E0080.rs:12:9\n    |\n LL |     X = (1 << 500), //~ ERROR E0080\n@@ -20,13 +20,13 @@ LL |     Y = (1 / 0) //~ ERROR E0080\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: constant evaluation error\n+error: this expression will panic at runtime\n   --> $DIR/E0080.rs:14:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080\n    |         ^^^^^^^ attempt to divide by zero\n \n-error[E0080]: constant evaluation error\n+error[E0080]: could not evaluate enum discriminant\n   --> $DIR/E0080.rs:14:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080"}, {"sha": "4f1f67214509e5bb1c8c48f6915a9088ffc1b7b6", "filename": "src/test/ui/infinite-recursion-const-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -11,8 +11,8 @@\n //https://github.com/rust-lang/rust/issues/31364\n \n #![feature(const_fn)]\n-const fn a() -> usize { b() } //~ ERROR constant evaluation error\n+const fn a() -> usize { b() }\n const fn b() -> usize { a() }\n-const ARR: [i32; a()] = [5; 6];\n+const ARR: [i32; a()] = [5; 6]; //~ ERROR could not evaluate constant expression\n \n fn main(){}"}, {"sha": "fb7c1be75413e189bdb2ee94d474e0e7c4574768", "filename": "src/test/ui/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -1,8 +1,8 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/infinite-recursion-const-fn.rs:14:25\n+error[E0080]: could not evaluate constant expression\n+  --> $DIR/infinite-recursion-const-fn.rs:16:1\n    |\n-LL | const fn a() -> usize { b() } //~ ERROR constant evaluation error\n-   |                         ^^^\n+LL | const fn a() -> usize { b() }\n+   |                         ---\n    |                         |\n    |                         reached the configured maximum number of stack frames\n    |                         inside call to `b`\n@@ -58,14 +58,10 @@ LL | const fn b() -> usize { a() }\n    |                         inside call to `a`\n    |                         inside call to `a`\n    |                         inside call to `a`\n-LL | const ARR: [i32; a()] = [5; 6];\n-   |                  --- inside call to `a`\n-   |\n-note: for constant expression here\n-  --> $DIR/infinite-recursion-const-fn.rs:16:1\n-   |\n-LL | const ARR: [i32; a()] = [5; 6];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const ARR: [i32; a()] = [5; 6]; //~ ERROR could not evaluate constant expression\n+   | ^^^^^^^^^^^^^^^^^---^^^^^^^^^^^\n+   |                  |\n+   |                  inside call to `a`\n \n error: aborting due to previous error\n "}, {"sha": "db27ae89e69fdbef0f101fad6c4444b1fc09ebee", "filename": "src/test/ui/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-dependent-def-issue-49241.rs?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR can't capture dynamic environment in a fn item\n-    let s: [u32; l] = v.into_iter().collect(); //~ ERROR constant evaluation error\n+    let s: [u32; l] = v.into_iter().collect();\n }"}, {"sha": "361d28f274fa30f8faa1481fa59ffa28ad5e90f5", "filename": "src/test/ui/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac372568b0a63c0abb8953431fa6a392de040a3/src%2Ftest%2Fui%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-dependent-def-issue-49241.stderr?ref=9ac372568b0a63c0abb8953431fa6a392de040a3", "patch": "@@ -6,13 +6,6 @@ LL |     const l: usize = v.count(); //~ ERROR can't capture dynamic environment\n    |\n    = help: use the `|| { ... }` closure form instead\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/type-dependent-def-issue-49241.rs:14:18\n-   |\n-LL |     let s: [u32; l] = v.into_iter().collect(); //~ ERROR constant evaluation error\n-   |                  ^ encountered constants with type errors, stopping evaluation\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0080, E0434.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0434`."}]}