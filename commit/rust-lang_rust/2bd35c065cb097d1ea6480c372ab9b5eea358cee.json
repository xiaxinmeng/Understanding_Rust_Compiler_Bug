{"sha": "2bd35c065cb097d1ea6480c372ab9b5eea358cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDM1YzA2NWNiMDk3ZDFlYTY0ODBjMzcyYWI5YjVlZWEzNThjZWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T22:26:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-06T22:26:54Z"}, "message": "Rollup merge of #66606 - christianpoveda:mut-refs-in-const-fn, r=oli-obk\n\nAdd feature gate for mut refs in const fn\n\nr? @oli-obk", "tree": {"sha": "a72085358f010d6572bf3010c36a4ab6fe28b077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a72085358f010d6572bf3010c36a4ab6fe28b077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd35c065cb097d1ea6480c372ab9b5eea358cee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6tWuCRBK7hj4Ov3rIwAAdHIIACg/AU7LuJdM7aPusbJT8tO5\nP2fKC7CBvK1dtMDWZ9B148L6Xh45x/KHonqw+pkxlPBtZ4l/uFf2Y0JqlmE3qesB\nySxqbntZ0Vf8VBTk3lrsL47EFGrqwL/UZVEYgdAxpyoU7L4HUoMycwX1jWS2H3uC\nxFRfOW8x4kIZaQQNaK377IPv3PWqT71XSuZY3b7eZxBEVnq5iV884491f7ZglNQU\nYcEtq1C/wRM8HnQWzGy5PAltQL+eGdhpE6Vjuk8xl84tA/lq3z426r8lqaphKfYk\nushQnRnxYiZXCPOb2PLzm3mN0yG2Sm8f8DAf0xaNm4xZGCE+7CgGcTXOfL5cH0k=\n=1YJs\n-----END PGP SIGNATURE-----\n", "payload": "tree a72085358f010d6572bf3010c36a4ab6fe28b077\nparent ae1b871cca56613b1af1a5121dd24ac810ff4b89\nparent e01ad6a01abce35f59543bf38a280a05eb7f6929\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575671214 +0100\ncommitter GitHub <noreply@github.com> 1575671214 +0100\n\nRollup merge of #66606 - christianpoveda:mut-refs-in-const-fn, r=oli-obk\n\nAdd feature gate for mut refs in const fn\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd35c065cb097d1ea6480c372ab9b5eea358cee", "html_url": "https://github.com/rust-lang/rust/commit/2bd35c065cb097d1ea6480c372ab9b5eea358cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd35c065cb097d1ea6480c372ab9b5eea358cee/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae1b871cca56613b1af1a5121dd24ac810ff4b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1b871cca56613b1af1a5121dd24ac810ff4b89", "html_url": "https://github.com/rust-lang/rust/commit/ae1b871cca56613b1af1a5121dd24ac810ff4b89"}, {"sha": "e01ad6a01abce35f59543bf38a280a05eb7f6929", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01ad6a01abce35f59543bf38a280a05eb7f6929", "html_url": "https://github.com/rust-lang/rust/commit/e01ad6a01abce35f59543bf38a280a05eb7f6929"}], "stats": {"total": 451, "additions": 310, "deletions": 141}, "files": [{"sha": "9c1bec39b29e2834533163c00bab032c12003b7f", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -18,7 +18,6 @@ E0010: include_str!(\"./error_codes/E0010.md\"),\n E0013: include_str!(\"./error_codes/E0013.md\"),\n E0014: include_str!(\"./error_codes/E0014.md\"),\n E0015: include_str!(\"./error_codes/E0015.md\"),\n-E0017: include_str!(\"./error_codes/E0017.md\"),\n E0019: include_str!(\"./error_codes/E0019.md\"),\n E0023: include_str!(\"./error_codes/E0023.md\"),\n E0025: include_str!(\"./error_codes/E0025.md\"),"}, {"sha": "d5e6857b4d6f893c2418f0962d15dcabef21fa83", "filename": "src/librustc_error_codes/error_codes/E0017.md", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae1b871cca56613b1af1a5121dd24ac810ff4b89/src%2Flibrustc_error_codes%2Ferror_codes%2FE0017.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae1b871cca56613b1af1a5121dd24ac810ff4b89/src%2Flibrustc_error_codes%2Ferror_codes%2FE0017.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0017.md?ref=ae1b871cca56613b1af1a5121dd24ac810ff4b89", "patch": "@@ -1,20 +0,0 @@\n-References in statics and constants may only refer to immutable values.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0017\n-static X: i32 = 1;\n-const C: i32 = 2;\n-\n-// these three are not allowed:\n-const CR: &mut i32 = &mut C;\n-static STATIC_REF: &'static mut i32 = &mut X;\n-static CONST_REF: &'static mut i32 = &mut C;\n-```\n-\n-Statics are shared everywhere, and if they refer to mutable data one might\n-violate memory safety since holding multiple mutable references to shared data\n-is not allowed.\n-\n-If you really want global mutable state, try using `static mut` or a global\n-`UnsafeCell`."}, {"sha": "b1ae7c6ca33d872d6e802ae4a0251c660a0c0fae", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -523,6 +523,9 @@ declare_features! (\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n \n+    /// Allows using `&mut` in constant functions.\n+    (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "393ae9442a17e2976c9d85072f85b13da582393c", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,7 +1,6 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use rustc::hir::def_id::DefId;\n-use rustc::mir::BorrowKind;\n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n use syntax::feature_gate::feature_err;\n@@ -181,38 +180,53 @@ impl NonConstOp for Loop {\n }\n \n #[derive(Debug)]\n-pub struct MutBorrow(pub BorrowKind);\n+pub struct CellBorrow;\n+impl NonConstOp for CellBorrow {\n+    fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n+        span_err!(item.tcx.sess, span, E0492,\n+            \"cannot borrow a constant which may contain \\\n+            interior mutability, create a static instead\");\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct MutBorrow;\n impl NonConstOp for MutBorrow {\n+    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n+        Some(tcx.features().const_mut_refs)\n+    }\n+\n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        let kind = self.0;\n-        if let BorrowKind::Mut { .. } = kind {\n-            let mut err = struct_span_err!(item.tcx.sess, span, E0017,\n-                                           \"references in {}s may only refer \\\n-                                            to immutable values\", item.const_kind());\n-            err.span_label(span, format!(\"{}s require immutable values\",\n-                                                item.const_kind()));\n-            if item.tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\"References in statics and constants may only refer \\\n-                          to immutable values.\\n\\n\\\n-                          Statics are shared everywhere, and if they refer to \\\n-                          mutable data one might violate memory safety since \\\n-                          holding multiple mutable references to shared data \\\n-                          is not allowed.\\n\\n\\\n-                          If you really want global mutable state, try using \\\n-                          static mut or a global UnsafeCell.\");\n-            }\n-            err.emit();\n-        } else {\n-            span_err!(item.tcx.sess, span, E0492,\n-                      \"cannot borrow a constant which may contain \\\n-                       interior mutability, create a static instead\");\n+        let mut err = feature_err(\n+            &item.tcx.sess.parse_sess,\n+            sym::const_mut_refs,\n+            span,\n+            &format!(\"references in {}s may only refer \\\n+                      to immutable values\", item.const_kind())\n+        );\n+        err.span_label(span, format!(\"{}s require immutable values\",\n+                                            item.const_kind()));\n+        if item.tcx.sess.teach(&err.get_code().unwrap()) {\n+            err.note(\"References in statics and constants may only refer \\\n+                      to immutable values.\\n\\n\\\n+                      Statics are shared everywhere, and if they refer to \\\n+                      mutable data one might violate memory safety since \\\n+                      holding multiple mutable references to shared data \\\n+                      is not allowed.\\n\\n\\\n+                      If you really want global mutable state, try using \\\n+                      static mut or a global UnsafeCell.\");\n         }\n+        err.emit();\n     }\n }\n \n #[derive(Debug)]\n pub struct MutDeref;\n-impl NonConstOp for MutDeref {}\n+impl NonConstOp for MutDeref {\n+    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n+        Some(tcx.features().const_mut_refs)\n+    }\n+}\n \n #[derive(Debug)]\n pub struct Panic;"}, {"sha": "7170857926b3786599075bb551f4edad7aad98fc", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -359,7 +359,11 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 };\n \n                 if !is_allowed {\n-                    self.check_op(ops::MutBorrow(kind));\n+                    if let BorrowKind::Mut{ .. } = kind {\n+                        self.check_op(ops::MutBorrow);\n+                    } else {\n+                        self.check_op(ops::CellBorrow);\n+                    }\n                 }\n             }\n \n@@ -384,7 +388,11 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 );\n \n                 if borrowed_place_has_mut_interior {\n-                    self.check_op(ops::MutBorrow(kind));\n+                    if let BorrowKind::Mut{ .. } = kind {\n+                        self.check_op(ops::MutBorrow);\n+                    } else {\n+                        self.check_op(ops::CellBorrow);\n+                    }\n                 }\n             }\n \n@@ -451,7 +459,6 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             }\n         }\n     }\n-\n     fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,"}, {"sha": "cf2e1306dc44b42bcb1622a424e4a260b39f4fee", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -79,10 +79,14 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span, fn_def_id: DefId) -> McfResult {\n     for ty in ty.walk() {\n         match ty.kind {\n-            ty::Ref(_, _, hir::Mutability::Mutable) => return Err((\n-                span,\n-                \"mutable references in const fn are unstable\".into(),\n-            )),\n+            ty::Ref(_, _, hir::Mutability::Mutable) => {\n+                if !tcx.features().const_mut_refs {\n+                    return Err((\n+                        span,\n+                        \"mutable references in const fn are unstable\".into(),\n+                    ))\n+                }\n+            }\n             ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n                 if !tcx.const_fn_is_allowed_fn_ptr(fn_def_id) {"}, {"sha": "e8f7a125739ac07cb190bb5f0dd4d3ccd219aaae", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -213,6 +213,7 @@ symbols! {\n         const_indexing,\n         const_in_array_repeat_expressions,\n         const_let,\n+        const_mut_refs,\n         const_panic,\n         const_raw_ptr_deref,\n         const_raw_ptr_to_usize_cast,"}, {"sha": "5d26059644d17a04dd5832cd2ff4bcdaa98c1dac", "filename": "src/test/compile-fail/consts/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -6,7 +6,7 @@ const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     for i in 0..x {\n         //~^ ERROR E0015\n-        //~| ERROR E0017\n+        //~| ERROR E0658\n         //~| ERROR E0080\n         //~| ERROR E0744\n         //~| ERROR E0019"}, {"sha": "39da824ede57c256ec7eee6ca20bc365597264cf", "filename": "src/test/ui/check-static-immutable-mut-slices.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,9 +1,12 @@\n-error[E0017]: references in statics may only refer to immutable values\n+error[E0658]: references in statics may only refer to immutable values\n   --> $DIR/check-static-immutable-mut-slices.rs:3:37\n    |\n LL | static TEST: &'static mut [isize] = &mut [];\n    |                                     ^^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0017`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "54b35073340fd3ca80582a816ed5f023e4689472", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,8 +1,11 @@\n-error[E0017]: references in constants may only refer to immutable values\n+error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/issue-65394.rs:8:13\n    |\n LL |     let r = &mut x;\n    |             ^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/issue-65394.rs:7:9\n@@ -12,5 +15,5 @@ LL |     let mut x = Vec::<i32>::new();\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0017, E0493.\n-For more information about an error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0493, E0658.\n+For more information about an error, try `rustc --explain E0493`."}, {"sha": "0809c77c1b604514d0451fcfc232f99309c699f9", "filename": "src/test/ui/consts/const-multi-ref.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,8 +1,11 @@\n-error[E0017]: references in constants may only refer to immutable values\n+error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/const-multi-ref.rs:6:13\n    |\n LL |     let p = &mut a;\n    |             ^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n   --> $DIR/const-multi-ref.rs:16:13\n@@ -12,5 +15,5 @@ LL |     let p = &a;\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0017, E0492.\n-For more information about an error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0492, E0658.\n+For more information about an error, try `rustc --explain E0492`."}, {"sha": "99006a20b1bcba56dfe6275b847724ea47185cc1", "filename": "src/test/ui/consts/const-mut-refs/const_mut_refs.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_refs.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+#![feature(const_mut_refs)]\n+\n+struct Foo {\n+    x: usize\n+}\n+\n+const fn foo() -> Foo {\n+    Foo { x: 0 }\n+}\n+\n+impl Foo {\n+    const fn bar(&mut self) -> usize {\n+        self.x = 1;\n+        self.x\n+    }\n+\n+}\n+\n+const fn baz(foo: &mut Foo) -> usize {\n+    let x = &mut foo.x;\n+    *x = 2;\n+    *x\n+}\n+\n+const fn bazz(foo: &mut Foo) -> usize {\n+    foo.x = 3;\n+    foo.x\n+}\n+\n+fn main() {\n+    let _: [(); foo().bar()] = [(); 1];\n+    let _: [(); baz(&mut foo())] = [(); 2];\n+    let _: [(); bazz(&mut foo())] = [(); 3];\n+}"}, {"sha": "2207599815ee8056198f2a3bbdcb03ffa93bab66", "filename": "src/test/ui/consts/const-mut-refs/feature-gate-const_mut_refs.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    foo(&mut 5);\n+}\n+\n+const fn foo(x: &mut i32) -> i32 { //~ ERROR mutable references in const fn are unstable\n+    *x + 1\n+}"}, {"sha": "4fae119f026045b0a2674cdc4d50075fa70e8231", "filename": "src/test/ui/consts/const-mut-refs/feature-gate-const_mut_refs.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,12 @@\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/feature-gate-const_mut_refs.rs:5:14\n+   |\n+LL | const fn foo(x: &mut i32) -> i32 {\n+   |              ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "7852874944b22c8bce3a9cab994c41af395c4cc6", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -4,17 +4,23 @@ error[E0019]: constant function contains unimplemented expression type\n LL |         self.state = x;\n    |         ^^^^^^^^^^^^^^\n \n-error[E0017]: references in constants may only refer to immutable values\n+error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/const_let_assign3.rs:16:5\n    |\n LL |     s.foo(3);\n    |     ^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0017]: references in constants may only refer to immutable values\n+error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/const_let_assign3.rs:22:13\n    |\n LL |     let y = &mut x;\n    |             ^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type\n   --> $DIR/const_let_assign3.rs:24:5\n@@ -24,5 +30,5 @@ LL |     *y = 42;\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0017, E0019.\n-For more information about an error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0019, E0658.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "972f59549ea7415806e1ce8e64098e9a9adbb7c6", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n #![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n #![deny(const_err)]\n \n use std::cell::UnsafeCell;\n@@ -12,9 +13,7 @@ const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n const MUTATING_BEHIND_RAW: () = {\n     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n     unsafe {\n-        *MUTABLE_BEHIND_RAW = 99 //~ WARN skipping const checks\n-        //~^ ERROR any use of this value will cause an error\n-        //~^^ tried to modify constant memory\n+        *MUTABLE_BEHIND_RAW = 99 //~ ERROR any use of this value will cause an error\n     }\n };\n "}, {"sha": "9daca765c7cd0760cd698778ba1a4c40ecea7bf2", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,30 +1,23 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const.rs:9:38\n+  --> $DIR/mutable_const.rs:10:38\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/mutable_const.rs:15:9\n-   |\n-LL |         *MUTABLE_BEHIND_RAW = 99\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: any use of this value will cause an error\n-  --> $DIR/mutable_const.rs:15:9\n+  --> $DIR/mutable_const.rs:16:9\n    |\n LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n LL | |     unsafe {\n LL | |         *MUTABLE_BEHIND_RAW = 99\n    | |         ^^^^^^^^^^^^^^^^^^^^^^^^ tried to modify constant memory\n-...  |\n LL | |     }\n LL | | };\n    | |__-\n    |\n note: lint level defined here\n-  --> $DIR/mutable_const.rs:4:9\n+  --> $DIR/mutable_const.rs:5:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^"}, {"sha": "fe3c4ee70f2a21ee9b81282bd32ed05c8d05a442", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,20 +1,22 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_mut_refs)]\n #![allow(const_err)]\n \n use std::cell::UnsafeCell;\n \n // a test demonstrating what things we could allow with a smarter const qualification\n \n+// this is fine because is not possible to mutate through an immutable reference.\n static FOO: &&mut u32 = &&mut 42;\n-//~^ WARN: skipping const checks\n \n+// this is fine because accessing an immutable static `BAR` is equivalent to accessing `*&BAR`\n+// which puts the mutable reference behind an immutable one.\n static BAR: &mut () = &mut ();\n-//~^ WARN: skipping const checks\n \n struct Foo<T>(T);\n \n+// this is fine for the same reason as `BAR`.\n static BOO: &mut Foo<()> = &mut Foo(());\n-//~^ WARN: skipping const checks\n \n struct Meh {\n     x: &'static UnsafeCell<i32>,\n@@ -27,8 +29,8 @@ static MEH: Meh = Meh {\n     //~^ WARN: skipping const checks\n };\n \n+// this is fine for the same reason as `BAR`.\n static OH_YES: &mut i32 = &mut 42;\n-//~^ WARN: skipping const checks\n \n fn main() {\n     unsafe {"}, {"sha": "3e1300c63c17d6a737ecea4fd9806b2d5c6fb6bb", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,35 +1,11 @@\n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:8:26\n-   |\n-LL | static FOO: &&mut u32 = &&mut 42;\n-   |                          ^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:11:23\n-   |\n-LL | static BAR: &mut () = &mut ();\n-   |                       ^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:16:28\n-   |\n-LL | static BOO: &mut Foo<()> = &mut Foo(());\n-   |                            ^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:26:8\n+  --> $DIR/mutable_references.rs:28:8\n    |\n LL |     x: &UnsafeCell::new(42),\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:30:27\n-   |\n-LL | static OH_YES: &mut i32 = &mut 42;\n-   |                           ^^^^^^^\n-\n error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n-  --> $DIR/mutable_references.rs:37:5\n+  --> $DIR/mutable_references.rs:39:5\n    |\n LL |     *OH_YES = 99;\n    |     ^^^^^^^^^^^^ cannot assign"}, {"sha": "821c501c9fcc5e4cec5cc3a73283e58bd45a1352", "filename": "src/test/ui/consts/miri_unleashed/read_from_static.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_mut_refs)]\n+#![allow(const_err)]\n+\n+static OH_YES: &mut i32 = &mut 42;\n+\n+fn main() {\n+    // Make sure `OH_YES` can be read.\n+    assert_eq!(*OH_YES, 42);\n+}"}, {"sha": "23538777c9df3698191727f8504f68b016f1b220", "filename": "src/test/ui/consts/projection_qualif.mut_refs.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: dereferencing raw pointers in constants is unstable\n+  --> $DIR/projection_qualif.rs:11:18\n+   |\n+LL |         unsafe { *b = 5; }\n+   |                  ^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "cfe8e7f03d5e45e8445ff79094bf79610b71de1d", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,11 +1,15 @@\n+// revisions: stock mut_refs\n+\n+#![cfg_attr(mut_refs, feature(const_mut_refs))]\n+\n use std::cell::Cell;\n \n const FOO: &u32 = {\n     let mut a = 42;\n     {\n-        let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n+        let b: *mut u32 = &mut a; //[stock]~ ERROR may only refer to immutable values\n         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n-        //~^ contains unimplemented expression\n+        //[stock]~^ contains unimplemented expression\n     }\n     &{a}\n };"}, {"sha": "472d2607453d066f9fa1488027588d0dea597af3", "filename": "src/test/ui/consts/projection_qualif.stock.stderr", "status": "renamed", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,11 +1,14 @@\n-error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/projection_qualif.rs:6:27\n+error[E0658]: references in constants may only refer to immutable values\n+  --> $DIR/projection_qualif.rs:10:27\n    |\n LL |         let b: *mut u32 = &mut a;\n    |                           ^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constants is unstable\n-  --> $DIR/projection_qualif.rs:7:18\n+  --> $DIR/projection_qualif.rs:11:18\n    |\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n@@ -14,12 +17,12 @@ LL |         unsafe { *b = 5; }\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/projection_qualif.rs:7:18\n+  --> $DIR/projection_qualif.rs:11:18\n    |\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0017, E0019, E0658.\n-For more information about an error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0019, E0658.\n+For more information about an error, try `rustc --explain E0019`.", "previous_filename": "src/test/ui/consts/projection_qualif.stderr"}, {"sha": "b43fbc86f99f2c3e6f47107c3f33dcf6c0b4ba5c", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.mut_refs.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.mut_refs.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/static_mut_containing_mut_ref2.rs:7:45\n+   |\n+LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ tried to modify a static's initial value from another static's initializer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "74162fbd54b046537817eeb17a99b8e716632077", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,7 +1,12 @@\n+// revisions: stock mut_refs\n+\n+#![cfg_attr(mut_refs, feature(const_mut_refs))]\n+\n static mut STDERR_BUFFER_SPACE: u8 = 0;\n \n pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-//~^ ERROR references in statics may only refer to immutable values\n-//~| ERROR static contains unimplemented expression type\n+//[mut_refs]~^ ERROR could not evaluate static initializer\n+//[stock]~^^ ERROR references in statics may only refer to immutable values\n+//[stock]~| ERROR static contains unimplemented expression type\n \n fn main() {}"}, {"sha": "430cef94dc3cb88e90cdc5d5248221fadbf9c29f", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stock.stderr", "status": "renamed", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,16 +1,19 @@\n-error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/static_mut_containing_mut_ref2.rs:3:46\n+error[E0658]: references in statics may only refer to immutable values\n+  --> $DIR/static_mut_containing_mut_ref2.rs:7:46\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/static_mut_containing_mut_ref2.rs:3:45\n+  --> $DIR/static_mut_containing_mut_ref2.rs:7:45\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0017, E0019.\n-For more information about an error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0019, E0658.\n+For more information about an error, try `rustc --explain E0019`.", "previous_filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stderr"}, {"sha": "64be41170d0c897156211e5d7fc5c1b8b4f9959c", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -2,10 +2,10 @@ static X: i32 = 1;\n const C: i32 = 2;\n static mut M: i32 = 3;\n \n-const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n-static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+const CR: &'static mut i32 = &mut C; //~ ERROR E0658\n+static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0658\n                                               //~| ERROR E0019\n                                               //~| ERROR cannot borrow\n-static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n-static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR E0017\n+static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0658\n+static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR E0658\n fn main() {}"}, {"sha": "9a87195a9d05efb9b4df524cd8c0ed2d26d278a8", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,40 +1,52 @@\n-error[E0017]: references in constants may only refer to immutable values\n+error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/E0017.rs:5:30\n    |\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/E0017.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^\n \n-error[E0017]: references in statics may only refer to immutable values\n+error[E0658]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0017.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n-error[E0017]: references in statics may only refer to immutable values\n+error[E0658]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:9:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0017]: references in statics may only refer to immutable values\n+error[E0658]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:10:52\n    |\n LL | static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M };\n    |                                                    ^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0017, E0019, E0596.\n-For more information about an error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0019, E0596, E0658.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "5954e3490b06c770766b596604225d9798b05d14", "filename": "src/test/ui/error-codes/E0388.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,10 @@\n+static X: i32 = 1;\n+const C: i32 = 2;\n+\n+const CR: &'static mut i32 = &mut C; //~ ERROR E0658\n+static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0658\n+                                              //~| ERROR cannot borrow\n+                                              //~| ERROR E0019\n+static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0658\n+\n+fn main() {}"}, {"sha": "986307d3f123ff0f128138c499be1c46711ca103", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -0,0 +1,43 @@\n+error[E0658]: references in constants may only refer to immutable values\n+  --> $DIR/E0388.rs:4:30\n+   |\n+LL | const CR: &'static mut i32 = &mut C;\n+   |                              ^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/E0388.rs:5:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n+   |                                       ^^^^^^\n+\n+error[E0658]: references in statics may only refer to immutable values\n+  --> $DIR/E0388.rs:5:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n+   |                                       ^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0596]: cannot borrow immutable static item `X` as mutable\n+  --> $DIR/E0388.rs:5:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n+   |                                       ^^^^^^ cannot borrow as mutable\n+\n+error[E0658]: references in statics may only refer to immutable values\n+  --> $DIR/E0388.rs:8:38\n+   |\n+LL | static CONST_REF: &'static mut i32 = &mut C;\n+   |                                      ^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0019, E0596, E0658.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "7e4a62ac96957482ed612afbb68297f1e44a69eb", "filename": "src/test/ui/issues/issue-17718-const-bad-values.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,22 +1,28 @@\n-error[E0017]: references in constants may only refer to immutable values\n+error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/issue-17718-const-bad-values.rs:1:34\n    |\n LL | const C1: &'static mut [usize] = &mut [];\n    |                                  ^^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0013]: constants cannot refer to statics, use a constant instead\n   --> $DIR/issue-17718-const-bad-values.rs:5:46\n    |\n LL | const C2: &'static mut usize = unsafe { &mut S };\n    |                                              ^\n \n-error[E0017]: references in constants may only refer to immutable values\n+error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/issue-17718-const-bad-values.rs:5:41\n    |\n LL | const C2: &'static mut usize = unsafe { &mut S };\n    |                                         ^^^^^^ constants require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0013, E0017.\n+Some errors have detailed explanations: E0013, E0658.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "e1967eb7655425e642cfaaf60efc7350081810f0", "filename": "src/test/ui/issues/issue-46604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.rs?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,4 +1,4 @@\n-static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //~ ERROR E0017\n+static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //~ ERROR E0658\n fn write<T: AsRef<[u8]>>(buffer: T) { }\n \n fn main() {"}, {"sha": "32c7ecbf72e951ca5c299d0fc923eb7f42081e3a", "filename": "src/test/ui/issues/issue-46604.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd35c065cb097d1ea6480c372ab9b5eea358cee/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr?ref=2bd35c065cb097d1ea6480c372ab9b5eea358cee", "patch": "@@ -1,8 +1,11 @@\n-error[E0017]: references in statics may only refer to immutable values\n+error[E0658]: references in statics may only refer to immutable values\n   --> $DIR/issue-46604.rs:1:25\n    |\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:6:5\n@@ -12,5 +15,5 @@ LL |     buf[0]=2;\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0017, E0594.\n-For more information about an error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0594, E0658.\n+For more information about an error, try `rustc --explain E0594`."}]}