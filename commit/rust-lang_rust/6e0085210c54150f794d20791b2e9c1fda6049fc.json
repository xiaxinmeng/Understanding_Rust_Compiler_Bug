{"sha": "6e0085210c54150f794d20791b2e9c1fda6049fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMDA4NTIxMGM1NDE1MGY3OTRkMjA3OTFiMmU5YzFmZGE2MDQ5ZmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-04T21:20:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-04T21:30:57Z"}, "message": "core: Make uint::to_str faster", "tree": {"sha": "2690b5c60947473207401b1fd904993d8093e031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2690b5c60947473207401b1fd904993d8093e031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0085210c54150f794d20791b2e9c1fda6049fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0085210c54150f794d20791b2e9c1fda6049fc", "html_url": "https://github.com/rust-lang/rust/commit/6e0085210c54150f794d20791b2e9c1fda6049fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0085210c54150f794d20791b2e9c1fda6049fc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70353cdbc4492ee05f2a53cb48d380b10b81fa71", "url": "https://api.github.com/repos/rust-lang/rust/commits/70353cdbc4492ee05f2a53cb48d380b10b81fa71", "html_url": "https://github.com/rust-lang/rust/commit/70353cdbc4492ee05f2a53cb48d380b10b81fa71"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "0904a6d9382889eab1bcb5dd6f686c6e61c6adfb", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6e0085210c54150f794d20791b2e9c1fda6049fc/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0085210c54150f794d20791b2e9c1fda6049fc/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=6e0085210c54150f794d20791b2e9c1fda6049fc", "patch": "@@ -100,37 +100,40 @@ fn to_str(num: T, radix: uint) -> str {\n     assert (0u < radix && radix <= 16u);\n     let mut n = num;\n     let radix = radix as T;\n-    fn digit(n: T) -> char {\n-        ret alt n {\n-              0u as T { '0' }\n-              1u as T { '1' }\n-              2u as T { '2' }\n-              3u as T { '3' }\n-              4u as T { '4' }\n-              5u as T { '5' }\n-              6u as T { '6' }\n-              7u as T { '7' }\n-              8u as T { '8' }\n-              9u as T { '9' }\n-              10u as T { 'a' }\n-              11u as T { 'b' }\n-              12u as T { 'c' }\n-              13u as T { 'd' }\n-              14u as T { 'e' }\n-              15u as T { 'f' }\n-              _ { fail }\n-            };\n+    fn digit(n: T) -> u8 {\n+        if n <= 9u as T {\n+            n as u8 + '0' as u8\n+        } else if n <= 15u as T {\n+            (n - 10 as T) as u8 + 'a' as u8\n+        } else {\n+            fail;\n+        }\n     }\n     if n == 0u as T { ret \"0\"; }\n-    let mut s: str = \"\";\n+\n+    let mut buf: [mut u8] = [mut];\n+    vec::reserve(buf, 20u); // Enough room to hold any number\n+\n     while n != 0u as T {\n-        s += str::from_byte(digit(n % radix) as u8);\n+        buf += [digit(n % radix)];\n         n /= radix;\n     }\n-    let mut s1: str = \"\";\n-    let mut len: uint = str::len(s);\n-    while len != 0u { len -= 1u; s1 += str::from_byte(s[len]); }\n-    ret s1;\n+\n+    buf += [0u8];\n+\n+    let mut start_idx = 0u;\n+    let mut end_idx = buf.len() - 2u;\n+    while start_idx < end_idx {\n+        vec::swap(buf, start_idx, end_idx);\n+        start_idx += 1u;\n+        end_idx -= 1u;\n+    }\n+\n+    unsafe {\n+        let s = unsafe::reinterpret_cast(buf);\n+        unsafe::forget(buf);\n+        ret s;\n+    }\n }\n \n #[doc = \"Convert to a string\"]"}, {"sha": "026ce3fe06185f3be7aa766e7b107e35edf055d6", "filename": "src/test/bench/core-uint-to-str.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e0085210c54150f794d20791b2e9c1fda6049fc/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0085210c54150f794d20791b2e9c1fda6049fc/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=6e0085210c54150f794d20791b2e9c1fda6049fc", "patch": "@@ -0,0 +1,16 @@\n+fn main(args: [str]) {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"10000000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"100000\"]\n+    } else {\n+        args\n+    };\n+\n+    let n = uint::from_str(args[1]).get();\n+\n+    for uint::range(0u, n) {|i|\n+        let x = uint::to_str(i, 10u);\n+        log(debug, x);\n+    }\n+}"}]}