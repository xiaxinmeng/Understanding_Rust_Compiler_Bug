{"sha": "5fb4648757add26b0289ae69203f26e856580831", "node_id": "C_kwDOAAsO6NoAKDVmYjQ2NDg3NTdhZGQyNmIwMjg5YWU2OTIwM2YyNmU4NTY1ODA4MzE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-20T20:38:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-28T20:09:45Z"}, "message": "Take a LocalDefId in expect_*item.", "tree": {"sha": "4ca4cfe496fab089864b0eeae91dc77a215431e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca4cfe496fab089864b0eeae91dc77a215431e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fb4648757add26b0289ae69203f26e856580831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb4648757add26b0289ae69203f26e856580831", "html_url": "https://github.com/rust-lang/rust/commit/5fb4648757add26b0289ae69203f26e856580831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fb4648757add26b0289ae69203f26e856580831/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d2de9483a27f846f003fc745713339a9122473", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d2de9483a27f846f003fc745713339a9122473", "html_url": "https://github.com/rust-lang/rust/commit/e6d2de9483a27f846f003fc745713339a9122473"}], "stats": {"total": 232, "additions": 95, "deletions": 137}, "files": [{"sha": "7893abbfc9bf7640030484161ddfa80b1634c225", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -467,7 +467,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                 parent_def_id == tcx.hir().local_def_id(opaque_parent_hir_id)\n                             };\n                             let (in_definition_scope, origin) =\n-                                match tcx.hir().expect_item(opaque_hir_id).kind {\n+                                match tcx.hir().expect_item(def_id).kind {\n                                     // Anonymous `impl Trait`\n                                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                                         impl_trait_fn: Some(parent),"}, {"sha": "f36b9c82fac4e167415a2552aec80d720d001d7b", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -3011,7 +3011,7 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n                     this_decl_ty,\n                     CItemKind::Declaration,\n                 ) {\n-                    let orig_fi = tcx.hir().expect_foreign_item(existing_hid);\n+                    let orig_fi = tcx.hir().expect_foreign_item(existing_hid.expect_owner());\n                     let orig = Self::name_of_extern_decl(tcx, orig_fi);\n \n                     // We want to ensure that we use spans for both decls that include where the"}, {"sha": "576113870f86e4b9522ff7508f4f2ec1e03d1a17", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -1152,8 +1152,7 @@ impl EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_trait_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        let ast_item = tcx.hir().expect_trait_item(hir_id);\n+        let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());\n         let trait_item = tcx.associated_item(def_id);\n \n         let container = match trait_item.defaultness {\n@@ -1221,8 +1220,7 @@ impl EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_impl_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        let ast_item = self.tcx.hir().expect_impl_item(hir_id);\n+        let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n         let impl_item = self.tcx.associated_item(def_id);\n \n         let container = match impl_item.defaultness {"}, {"sha": "5c4c2eee21fc1e5c954720987ee08f079a97b44f", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -869,24 +869,24 @@ impl<'hir> Map<'hir> {\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n     }\n \n-    pub fn expect_item(&self, id: HirId) -> &'hir Item<'hir> {\n-        match self.tcx.hir_owner(id.expect_owner()) {\n+    pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {\n+        match self.tcx.hir_owner(id) {\n             Some(Owner { node: OwnerNode::Item(item), .. }) => item,\n-            _ => bug!(\"expected item, found {}\", self.node_to_string(id)),\n+            _ => bug!(\"expected item, found {}\", self.node_to_string(HirId::make_owner(id))),\n         }\n     }\n \n-    pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem<'hir> {\n-        match self.tcx.hir_owner(id.expect_owner()) {\n+    pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {\n+        match self.tcx.hir_owner(id) {\n             Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,\n-            _ => bug!(\"expected impl item, found {}\", self.node_to_string(id)),\n+            _ => bug!(\"expected impl item, found {}\", self.node_to_string(HirId::make_owner(id))),\n         }\n     }\n \n-    pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem<'hir> {\n-        match self.tcx.hir_owner(id.expect_owner()) {\n+    pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {\n+        match self.tcx.hir_owner(id) {\n             Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,\n-            _ => bug!(\"expected trait item, found {}\", self.node_to_string(id)),\n+            _ => bug!(\"expected trait item, found {}\", self.node_to_string(HirId::make_owner(id))),\n         }\n     }\n \n@@ -897,10 +897,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem<'hir> {\n-        match self.tcx.hir_owner(id.expect_owner()) {\n+    pub fn expect_foreign_item(&self, id: LocalDefId) -> &'hir ForeignItem<'hir> {\n+        match self.tcx.hir_owner(id) {\n             Some(Owner { node: OwnerNode::ForeignItem(item), .. }) => item,\n-            _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id)),\n+            _ => {\n+                bug!(\"expected foreign item, found {}\", self.node_to_string(HirId::make_owner(id)))\n+            }\n         }\n     }\n "}, {"sha": "bda40a9abb097929f2ad485099873fad97b318e4", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -777,9 +777,7 @@ fn foo(&self) -> Self::T { String::new() }\n         if let ty::Opaque(def_id, _) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n-                let hir = self.hir();\n-                let opaque_hir_id = hir.local_def_id_to_hir_id(opaque_local_def_id);\n-                match &hir.expect_item(opaque_hir_id).kind {\n+                match &self.hir().expect_item(opaque_local_def_id).kind {\n                     hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n                     _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n                 }"}, {"sha": "7c0b3a57da976857ede72d3871a864f93e9e7493", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn target_from_impl_item<'tcx>(\n     match impl_item.kind {\n         hir::ImplItemKind::Const(..) => Target::AssocConst,\n         hir::ImplItemKind::Fn(..) => {\n-            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id());\n+            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id()).expect_owner();\n             let containing_item = tcx.hir().expect_item(parent_hir_id);\n             let containing_impl_is_for_trait = match &containing_item.kind {\n                 hir::ItemKind::Impl(impl_) => impl_.of_trait.is_some(),\n@@ -582,7 +582,7 @@ impl CheckAttrVisitor<'tcx> {\n             Target::Impl => Some(\"implementation block\"),\n             Target::ForeignMod => Some(\"extern block\"),\n             Target::AssocTy => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n+                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id).expect_owner();\n                 let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n                 if Target::from_item(containing_item) == Target::Impl {\n                     Some(\"type alias in implementation block\")\n@@ -591,7 +591,7 @@ impl CheckAttrVisitor<'tcx> {\n                 }\n             }\n             Target::AssocConst => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n+                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id).expect_owner();\n                 let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n                 // We can't link to trait impl's consts.\n                 let err = \"associated constant in trait implementation block\";"}, {"sha": "fc56a339215bed380262090e34046a566e6c4856", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -173,8 +173,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                             // Check the impl. If the generics on the self\n                             // type of the impl require inlining, this method\n                             // does too.\n-                            let impl_hir_id = self.tcx.hir().local_def_id_to_hir_id(impl_did);\n-                            match self.tcx.hir().expect_item(impl_hir_id).kind {\n+                            match self.tcx.hir().expect_item(impl_did).kind {\n                                 hir::ItemKind::Impl { .. } => {\n                                     let generics = self.tcx.generics_of(impl_did);\n                                     generics.requires_monomorphization(self.tcx)"}, {"sha": "e3d2c9837cf51063799c52bda6db6223ab1be56e", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -559,8 +559,7 @@ impl EmbargoVisitor<'tcx> {\n             // have normal  hygine, so we can treat them like other items without type\n             // privacy and mark them reachable.\n             DefKind::Macro(_) => {\n-                let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                let item = self.tcx.hir().expect_item(hir_id);\n+                let item = self.tcx.hir().expect_item(def_id);\n                 if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }) = item.kind {\n                     if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n                         self.update(def_id, level);\n@@ -581,8 +580,7 @@ impl EmbargoVisitor<'tcx> {\n             DefKind::Struct | DefKind::Union => {\n                 // While structs and unions have type privacy, their fields do not.\n                 if vis.is_public() {\n-                    let item =\n-                        self.tcx.hir().expect_item(self.tcx.hir().local_def_id_to_hir_id(def_id));\n+                    let item = self.tcx.hir().expect_item(def_id);\n                     if let hir::ItemKind::Struct(ref struct_def, _)\n                     | hir::ItemKind::Union(ref struct_def, _) = item.kind\n                     {\n@@ -653,9 +651,7 @@ impl EmbargoVisitor<'tcx> {\n                 // If the module is `self`, i.e. the current crate,\n                 // there will be no corresponding item.\n                 .filter(|def_id| def_id.index != CRATE_DEF_INDEX || def_id.krate != LOCAL_CRATE)\n-                .and_then(|def_id| {\n-                    def_id.as_local().map(|def_id| self.tcx.hir().local_def_id_to_hir_id(def_id))\n-                })\n+                .and_then(|def_id| def_id.as_local())\n                 .map(|module_hir_id| self.tcx.hir().expect_item(module_hir_id))\n             {\n                 if let hir::ItemKind::Mod(m) = &item.kind {"}, {"sha": "f9d609f9c9ce6ef6b8c47a730747aa9df7b4f5a3", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -445,7 +445,7 @@ fn do_resolve(\n     trait_definition_only: bool,\n     with_scope_for_path: bool,\n ) -> NamedRegionMap {\n-    let item = tcx.hir().expect_item(tcx.hir().local_def_id_to_hir_id(local_def_id));\n+    let item = tcx.hir().expect_item(local_def_id);\n     let mut named_region_map = NamedRegionMap {\n         defs: Default::default(),\n         late_bound: Default::default(),\n@@ -1134,7 +1134,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n-                    Some(tcx.hir().get_parent_item(trait_item.hir_id())),\n+                    Some(tcx.hir().get_parent_did(trait_item.hir_id())),\n                     trait_item.hir_id(),\n                     &sig.decl,\n                     &trait_item.generics,\n@@ -1203,7 +1203,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n-                    Some(tcx.hir().get_parent_item(impl_item.hir_id())),\n+                    Some(tcx.hir().get_parent_did(impl_item.hir_id())),\n                     impl_item.hir_id(),\n                     &sig.decl,\n                     &impl_item.generics,\n@@ -2176,7 +2176,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     /// ordering is not important there.\n     fn visit_early_late<F>(\n         &mut self,\n-        parent_id: Option<hir::HirId>,\n+        parent_id: Option<LocalDefId>,\n         hir_id: hir::HirId,\n         decl: &'tcx hir::FnDecl<'tcx>,\n         generics: &'tcx hir::Generics<'tcx>,\n@@ -2758,7 +2758,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             Node::TraitItem(&hir::TraitItem { kind: hir::TraitItemKind::Fn(_, ref m), .. }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) =\n-                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n+                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_did(parent)).kind\n                 {\n                     assoc_item_kind =\n                         trait_items.iter().find(|ti| ti.id.hir_id() == parent).map(|ti| ti.kind);\n@@ -2771,7 +2771,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(_, body), .. }) => {\n                 if let hir::ItemKind::Impl(hir::Impl { ref self_ty, ref items, .. }) =\n-                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n+                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_did(parent)).kind\n                 {\n                     impl_self = Some(self_ty);\n                     assoc_item_kind ="}, {"sha": "711a6f2fbebdd44d792d736b2a5e32704a6234e4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -123,7 +123,7 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n     let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let parent_id = tcx.hir().get_parent_item(id);\n     let parent_def_id = tcx.hir().local_def_id(parent_id);\n-    let parent_item = tcx.hir().expect_item(parent_id);\n+    let parent_item = tcx.hir().expect_item(parent_def_id);\n     match parent_item.kind {\n         hir::ItemKind::Impl(ref impl_) => {\n             if let Some(impl_item_ref) =\n@@ -158,8 +158,7 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n }\n \n fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let item = tcx.hir().expect_item(hir_id);\n+    let item = tcx.hir().expect_item(def_id.expect_local());\n     if let hir::ItemKind::Impl(impl_) = &item.kind {\n         impl_.defaultness\n     } else {\n@@ -168,8 +167,7 @@ fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n }\n \n fn impl_constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let item = tcx.hir().expect_item(hir_id);\n+    let item = tcx.hir().expect_item(def_id.expect_local());\n     if let hir::ItemKind::Impl(impl_) = &item.kind {\n         impl_.constness\n     } else {\n@@ -202,8 +200,7 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtSizedConstrain\n }\n \n fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n-    let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let item = tcx.hir().expect_item(id);\n+    let item = tcx.hir().expect_item(def_id.expect_local());\n     match item.kind {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => tcx.arena.alloc_from_iter(\n             trait_item_refs.iter().map(|trait_item_ref| trait_item_ref.id.def_id.to_def_id()),"}, {"sha": "2061f955d968fb9258877e17167976d376d8416a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -458,7 +458,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     def_id: LocalDefId,\n     span: Span,\n ) {\n-    let item = tcx.hir().expect_item(tcx.hir().local_def_id_to_hir_id(def_id));\n+    let item = tcx.hir().expect_item(def_id);\n     debug!(?item, ?span);\n \n     struct FoundParentLifetime;"}, {"sha": "9912d4b39586c05ce2cf112f857fc5de67590be0", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -1637,11 +1637,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);\n                 // Get the `impl Trait`'s `DefId`.\n                 if let ty::Opaque(def_id, _) = ty.kind() {\n-                    let hir_id = fcx.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n                     // Get the `impl Trait`'s `Item` so that we can get its trait bounds and\n                     // get the `Trait`'s `DefId`.\n                     if let hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }) =\n-                        fcx.tcx.hir().expect_item(hir_id).kind\n+                        fcx.tcx.hir().expect_item(def_id.expect_local()).kind\n                     {\n                         // Are of this `impl Trait`'s traits object safe?\n                         is_object_safe = bounds.iter().all(|bound| {"}, {"sha": "a237ba5f2e8806acdb200f4b2cb3e1fe46b558d8", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -322,9 +322,7 @@ fn compare_predicate_entailment<'tcx>(\n                     // When the `impl` receiver is an arbitrary self type, like `self: Box<Self>`, the\n                     // span points only at the type `Box<Self`>, but we want to cover the whole\n                     // argument pattern and type.\n-                    let impl_m_hir_id =\n-                        tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-                    let span = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+                    let span = match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n                         ImplItemKind::Fn(ref sig, body) => tcx\n                             .hir()\n                             .body_param_names(body)\n@@ -346,9 +344,7 @@ fn compare_predicate_entailment<'tcx>(\n                     if trait_sig.inputs().len() == *i {\n                         // Suggestion to change output type. We do not suggest in `async` functions\n                         // to avoid complex logic or incorrect output.\n-                        let impl_m_hir_id =\n-                            tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-                        match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+                        match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n                             ImplItemKind::Fn(ref sig, _)\n                                 if sig.header.asyncness == hir::IsAsync::NotAsync =>\n                             {\n@@ -467,22 +463,19 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n     trait_m: &ty::AssocItem,\n ) -> (Span, Option<Span>) {\n     let tcx = infcx.tcx;\n-    let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-    let mut impl_args = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+    let mut impl_args = match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n         ImplItemKind::Fn(ref sig, _) => {\n             sig.decl.inputs.iter().map(|t| t.span).chain(iter::once(sig.decl.output.span()))\n         }\n         _ => bug!(\"{:?} is not a method\", impl_m),\n     };\n-    let trait_args = trait_m.def_id.as_local().map(|def_id| {\n-        let trait_m_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n+    let trait_args =\n+        trait_m.def_id.as_local().map(|def_id| match tcx.hir().expect_trait_item(def_id).kind {\n             TraitItemKind::Fn(ref sig, _) => {\n                 sig.decl.inputs.iter().map(|t| t.span).chain(iter::once(sig.decl.output.span()))\n             }\n             _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n-        }\n-    });\n+        });\n \n     match *terr {\n         TypeError::ArgumentMutability(i) => {\n@@ -600,8 +593,7 @@ fn compare_number_of_generics<'tcx>(\n             err_occurred = true;\n \n             let (trait_spans, impl_trait_spans) = if let Some(def_id) = trait_.def_id.as_local() {\n-                let trait_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let trait_item = tcx.hir().expect_trait_item(trait_hir_id);\n+                let trait_item = tcx.hir().expect_trait_item(def_id);\n                 if trait_item.generics.params.is_empty() {\n                     (Some(vec![trait_item.generics.span]), vec![])\n                 } else {\n@@ -622,8 +614,7 @@ fn compare_number_of_generics<'tcx>(\n                 (trait_span.map(|s| vec![s]), vec![])\n             };\n \n-            let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_.def_id.expect_local());\n-            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n+            let impl_item = tcx.hir().expect_impl_item(impl_.def_id.expect_local());\n             let impl_item_impl_trait_spans: Vec<Span> = impl_item\n                 .generics\n                 .params\n@@ -711,8 +702,7 @@ fn compare_number_of_method_arguments<'tcx>(\n     let impl_number_args = impl_m_fty.inputs().skip_binder().len();\n     if trait_number_args != impl_number_args {\n         let trait_span = if let Some(def_id) = trait_m.def_id.as_local() {\n-            let trait_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-            match tcx.hir().expect_trait_item(trait_id).kind {\n+            match tcx.hir().expect_trait_item(def_id).kind {\n                 TraitItemKind::Fn(ref trait_m_sig, _) => {\n                     let pos = if trait_number_args > 0 { trait_number_args - 1 } else { 0 };\n                     if let Some(arg) = trait_m_sig.decl.inputs.get(pos) {\n@@ -730,8 +720,7 @@ fn compare_number_of_method_arguments<'tcx>(\n         } else {\n             trait_item_span\n         };\n-        let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-        let impl_span = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+        let impl_span = match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n             ImplItemKind::Fn(ref impl_m_sig, _) => {\n                 let pos = if impl_number_args > 0 { impl_number_args - 1 } else { 0 };\n                 if let Some(arg) = impl_m_sig.decl.inputs.get(pos) {\n@@ -1055,7 +1044,7 @@ crate fn compare_const_impl<'tcx>(\n             );\n \n             // Locate the Span containing just the type of the offending impl\n-            match tcx.hir().expect_impl_item(impl_c_hir_id).kind {\n+            match tcx.hir().expect_impl_item(impl_c.def_id.expect_local()).kind {\n                 ImplItemKind::Const(ref ty, _) => cause.make_mut().span = ty.span,\n                 _ => bug!(\"{:?} is not a impl const\", impl_c),\n             }\n@@ -1068,11 +1057,9 @@ crate fn compare_const_impl<'tcx>(\n                 trait_c.ident\n             );\n \n-            let trait_c_hir_id =\n-                trait_c.def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n-            let trait_c_span = trait_c_hir_id.map(|trait_c_hir_id| {\n+            let trait_c_span = trait_c.def_id.as_local().map(|trait_c_def_id| {\n                 // Add a label to the Span containing just the type of the const\n-                match tcx.hir().expect_trait_item(trait_c_hir_id).kind {\n+                match tcx.hir().expect_trait_item(trait_c_def_id).kind {\n                     TraitItemKind::Const(ref ty, _) => ty.span,\n                     _ => bug!(\"{:?} is not a trait const\", trait_c),\n                 }"}, {"sha": "43156a1041cfc9d9b0f5b90afe392705a516c880", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -1097,12 +1097,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         (_, _) => return None,\n                     };\n \n-                let last_hir_id = self.tcx.hir().local_def_id_to_hir_id(last_local_id);\n-                let exp_hir_id = self.tcx.hir().local_def_id_to_hir_id(exp_local_id);\n-\n                 match (\n-                    &self.tcx.hir().expect_item(last_hir_id).kind,\n-                    &self.tcx.hir().expect_item(exp_hir_id).kind,\n+                    &self.tcx.hir().expect_item(last_local_id).kind,\n+                    &self.tcx.hir().expect_item(exp_local_id).kind,\n                 ) {\n                     (\n                         hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: last_bounds, .. }),"}, {"sha": "bc2859719e8ebb66a16e586bed3a4f742ec4d980", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -345,10 +345,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let import_items: Vec<_> = applicable_trait\n             .import_ids\n             .iter()\n-            .map(|&import_id| {\n-                let hir_id = self.tcx.hir().local_def_id_to_hir_id(import_id);\n-                self.tcx.hir().expect_item(hir_id)\n-            })\n+            .map(|&import_id| self.tcx.hir().expect_item(import_id))\n             .collect();\n \n         // Find an identifier with which this trait was imported (note that `_` doesn't count)."}, {"sha": "3c9747fcede21155efad56c08a338052ce4c9f3f", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -84,8 +84,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n /// the types first.\n #[instrument(skip(tcx), level = \"debug\")]\n pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let item = tcx.hir().expect_item(hir_id);\n+    let item = tcx.hir().expect_item(def_id);\n \n     debug!(\n         ?item.def_id,\n@@ -197,7 +196,7 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n \n pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let trait_item = tcx.hir().expect_trait_item(hir_id);\n+    let trait_item = tcx.hir().expect_trait_item(def_id);\n \n     let (method_sig, span) = match trait_item.kind {\n         hir::TraitItemKind::Fn(ref sig, _) => (Some(sig), trait_item.span),\n@@ -207,8 +206,8 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     check_object_unsafe_self_trait_by_name(tcx, trait_item);\n     check_associated_item(tcx, trait_item.def_id, span, method_sig);\n \n-    let encl_trait_hir_id = tcx.hir().get_parent_item(hir_id);\n-    let encl_trait = tcx.hir().expect_item(encl_trait_hir_id);\n+    let encl_trait_def_id = tcx.hir().get_parent_did(hir_id);\n+    let encl_trait = tcx.hir().expect_item(encl_trait_def_id);\n     let encl_trait_def_id = encl_trait.def_id.to_def_id();\n     let fn_lang_item_name = if Some(encl_trait_def_id) == tcx.lang_items().fn_trait() {\n         Some(\"fn\")\n@@ -680,8 +679,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n }\n \n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let impl_item = tcx.hir().expect_impl_item(hir_id);\n+    let impl_item = tcx.hir().expect_impl_item(def_id);\n \n     let (method_sig, span) = match impl_item.kind {\n         hir::ImplItemKind::Fn(ref sig, _) => (Some(sig), impl_item.span),"}, {"sha": "79ed83d59ed9728c5c292e82e345a596c7cde65a", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -119,13 +119,13 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n \n     for extern_crate in &crates_to_lint {\n         let def_id = extern_crate.def_id.expect_local();\n-        let id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let item = tcx.hir().expect_item(id);\n+        let item = tcx.hir().expect_item(def_id);\n \n         // If the crate is fully unused, we suggest removing it altogether.\n         // We do this in any edition.\n         if extern_crate.warn_if_unused {\n             if let Some(&span) = unused_extern_crates.get(&def_id) {\n+                let id = tcx.hir().local_def_id_to_hir_id(def_id);\n                 tcx.struct_span_lint_hir(lint, id, span, |lint| {\n                     // Removal suggestion span needs to include attributes (Issue #54400)\n                     let span_with_attrs = tcx\n@@ -173,6 +173,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         if !tcx.get_attrs(extern_crate.def_id).is_empty() {\n             continue;\n         }\n+        let id = tcx.hir().local_def_id_to_hir_id(def_id);\n         tcx.struct_span_lint_hir(lint, id, extern_crate.span, |lint| {\n             // Otherwise, we can convert it into a `use` of some kind.\n             let base_replacement = match extern_crate.orig_name {"}, {"sha": "dfb4304ab02c4de8a860d906af82a655f40b5934", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -52,8 +52,7 @@ fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n         return;\n     }\n \n-    let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did);\n-    let sp = match tcx.hir().expect_item(impl_hir_id).kind {\n+    let sp = match tcx.hir().expect_item(impl_did).kind {\n         ItemKind::Impl(ref impl_) => impl_.self_ty.span,\n         _ => bug!(\"expected Drop impl item\"),\n     };\n@@ -78,7 +77,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     match can_type_implement_copy(tcx, param_env, self_type) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n-            let item = tcx.hir().expect_item(impl_hir_id);\n+            let item = tcx.hir().expect_item(impl_did);\n             let span = if let ItemKind::Impl(hir::Impl { of_trait: Some(ref tr), .. }) = item.kind {\n                 tr.path.span\n             } else {\n@@ -97,7 +96,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n             err.emit()\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n-            let item = tcx.hir().expect_item(impl_hir_id);\n+            let item = tcx.hir().expect_item(impl_did);\n             let span =\n                 if let ItemKind::Impl(ref impl_) = item.kind { impl_.self_ty.span } else { span };\n \n@@ -292,8 +291,8 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n \n     // this provider should only get invoked for local def-ids\n-    let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did.expect_local());\n-    let span = tcx.hir().span(impl_hir_id);\n+    let impl_did = impl_did.expect_local();\n+    let span = tcx.def_span(impl_did);\n \n     let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));\n \n@@ -315,6 +314,7 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n     debug!(\"visit_implementation_of_coerce_unsized: {:?} -> {:?} (free)\", source, target);\n \n     tcx.infer_ctxt().enter(|infcx| {\n+        let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did);\n         let cause = ObligationCause::misc(span, impl_hir_id);\n         let check_mutbl = |mt_a: ty::TypeAndMut<'tcx>,\n                            mt_b: ty::TypeAndMut<'tcx>,\n@@ -452,13 +452,13 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n                     .emit();\n                     return err_info;\n                 } else if diff_fields.len() > 1 {\n-                    let item = tcx.hir().expect_item(impl_hir_id);\n+                    let item = tcx.hir().expect_item(impl_did);\n                     let span = if let ItemKind::Impl(hir::Impl { of_trait: Some(ref t), .. }) =\n                         item.kind\n                     {\n                         t.path.span\n                     } else {\n-                        tcx.hir().span(impl_hir_id)\n+                        tcx.def_span(impl_did)\n                     };\n \n                     struct_span_err!(\n@@ -530,7 +530,11 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n \n         // Finally, resolve all regions.\n         let outlives_env = OutlivesEnvironment::new(param_env);\n-        infcx.resolve_regions_and_report_errors(impl_did, &outlives_env, RegionckMode::default());\n+        infcx.resolve_regions_and_report_errors(\n+            impl_did.to_def_id(),\n+            &outlives_env,\n+            RegionckMode::default(),\n+        );\n \n         CoerceUnsizedInfo { custom_kind: kind }\n     })"}, {"sha": "9fc7aa51e4b68d6bfb176e3d7d498f60a42c6243", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -431,7 +431,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n             match self.node() {\n                 hir::Node::Field(_) | hir::Node::Ctor(_) | hir::Node::Variant(_) => {\n                     let item =\n-                        self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(self.hir_id()));\n+                        self.tcx.hir().expect_item(self.tcx.hir().get_parent_did(self.hir_id()));\n                     match &item.kind {\n                         hir::ItemKind::Enum(_, generics)\n                         | hir::ItemKind::Struct(_, generics)\n@@ -1182,8 +1182,7 @@ fn super_predicates_that_define_assoc_type(\n }\n \n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let item = tcx.hir().expect_item(hir_id);\n+    let item = tcx.hir().expect_item(def_id.expect_local());\n \n     let (is_auto, unsafety) = match item.kind {\n         hir::ItemKind::Trait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n@@ -1878,9 +1877,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n-\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    match tcx.hir().expect_item(hir_id).kind {\n+    match tcx.hir().expect_item(def_id.expect_local()).kind {\n         hir::ItemKind::Impl(ref impl_) => impl_.of_trait.as_ref().map(|ast_trait_ref| {\n             let selfty = tcx.type_of(def_id);\n             <dyn AstConv<'_>>::instantiate_mono_trait_ref(&icx, ast_trait_ref, selfty)\n@@ -1890,9 +1887,8 @@ fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n }\n \n fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n-    let item = tcx.hir().expect_item(hir_id);\n+    let item = tcx.hir().expect_item(def_id.expect_local());\n     match &item.kind {\n         hir::ItemKind::Impl(hir::Impl {\n             polarity: hir::ImplPolarity::Negative(span),\n@@ -3227,7 +3223,7 @@ fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span:\n     let hir_id = tcx.hir().local_def_id_to_hir_id(id);\n     let node = tcx.hir().get(hir_id);\n     if let Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) = node {\n-        let parent_id = tcx.hir().get_parent_item(hir_id);\n+        let parent_id = tcx.hir().get_parent_did(hir_id);\n         let parent_item = tcx.hir().expect_item(parent_id);\n         if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = parent_item.kind {\n             tcx.sess"}, {"sha": "ba67030d59fb0c999226ba998faeff69eb146dd3", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -359,13 +359,10 @@ crate fn build_impl(\n     }\n \n     let impl_item = match did.as_local() {\n-        Some(did) => {\n-            let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n-            match &tcx.hir().expect_item(hir_id).kind {\n-                hir::ItemKind::Impl(impl_) => Some(impl_),\n-                _ => panic!(\"`DefID` passed to `build_impl` is not an `impl\"),\n-            }\n-        }\n+        Some(did) => match &tcx.hir().expect_item(did).kind {\n+            hir::ItemKind::Impl(impl_) => Some(impl_),\n+            _ => panic!(\"`DefID` passed to `build_impl` is not an `impl\"),\n+        },\n         None => None,\n     };\n "}, {"sha": "9b05716a67bc28a3b322a6319414a33c3852b5a6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -950,7 +950,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n \n             let what_rustc_thinks =\n                 Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n-            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(self.hir_id()));\n+            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_did(self.hir_id()));\n             if let hir::ItemKind::Impl(impl_) = &parent_item.kind {\n                 if impl_.of_trait.is_some() {\n                     // Trait impl items always inherit the impl's visibility --\n@@ -1189,9 +1189,8 @@ fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>\n     let Res::Def(DefKind::TyAlias, def_id) = path.res else { return None };\n     // Substitute private type aliases\n     let Some(def_id) = def_id.as_local() else { return None };\n-    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n     let alias = if !cx.cache.access_levels.is_exported(def_id.to_def_id()) {\n-        &cx.tcx.hir().expect_item(hir_id).kind\n+        &cx.tcx.hir().expect_item(def_id).kind\n     } else {\n         return None;\n     };"}, {"sha": "a18bd48d72bc426a27f276f99425b0fcc9468480", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -117,8 +117,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 if let Some(local_def_id) = def_id.as_local() {\n                     if self.cx.tcx.has_attr(def_id, sym::macro_export) {\n                         if inserted.insert(def_id) {\n-                            let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n-                            let item = self.cx.tcx.hir().expect_item(hir_id);\n+                            let item = self.cx.tcx.hir().expect_item(local_def_id);\n                             top_level_module.items.push((item, None));\n                         }\n                     }"}, {"sha": "de0df0aae82d7aa5c997a30a24337f909d6e6488", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -7,8 +7,8 @@ extern crate rustc_hir;\n extern crate rustc_lint;\n #[macro_use]\n extern crate rustc_session;\n-extern crate rustc_span;\n extern crate rustc_ast;\n+extern crate rustc_span;\n \n use rustc_ast_pretty::pprust;\n use rustc_driver::plugin::Registry;\n@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingAllowedAttrPass {\n     ) {\n         let item = match cx.tcx.hir().get(id) {\n             Node::Item(item) => item,\n-            _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id)),\n+            _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id).expect_owner()),\n         };\n \n         let allowed = |attr| pprust::attribute_to_string(attr).contains(\"allowed_attr\");"}, {"sha": "94b35ad88af2d605243fb06db7379633d43bb15b", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n use clippy_utils::{get_trait_def_id, is_automatically_derived, is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n@@ -343,11 +342,6 @@ fn check_unsafe_derive_deserialize<'tcx>(\n     trait_ref: &TraitRef<'_>,\n     ty: Ty<'tcx>,\n ) {\n-    fn item_from_def_id<'tcx>(cx: &LateContext<'tcx>, def_id: DefId) -> &'tcx Item<'tcx> {\n-        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        cx.tcx.hir().expect_item(hir_id)\n-    }\n-\n     fn has_unsafe<'tcx>(cx: &LateContext<'tcx>, item: &'tcx Item<'_>) -> bool {\n         let mut visitor = UnsafeVisitor { cx, has_unsafe: false };\n         walk_item(&mut visitor, item);\n@@ -363,7 +357,7 @@ fn check_unsafe_derive_deserialize<'tcx>(\n         if !is_lint_allowed(cx, UNSAFE_DERIVE_DESERIALIZE, adt_hir_id);\n         if cx.tcx.inherent_impls(def.did)\n             .iter()\n-            .map(|imp_did| item_from_def_id(cx, *imp_did))\n+            .map(|imp_did| cx.tcx.hir().expect_item(imp_did.expect_local()))\n             .any(|imp| has_unsafe(cx, imp));\n         then {\n             span_lint_and_help("}, {"sha": "e46739fea34beb1b70e1f8c0d6a68d5d834bc592", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -1939,7 +1939,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n "}, {"sha": "2ea97eb88f783558076b8655f62b0444723d4701", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -279,8 +279,8 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id());\n-            let item = cx.tcx.hir().expect_item(item_hir_id);\n+            let item_def_id = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+            let item = cx.tcx.hir().expect_item(item_def_id);\n \n             match &item.kind {\n                 ItemKind::Impl(Impl {"}, {"sha": "9390378d789cdddec8c5b27f5156843e7366169d", "filename": "src/tools/clippy/clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             _ => return,\n         }\n \n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n         let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "c961f995667952343e846eeee07c36b68cb214a5", "filename": "src/tools/clippy/clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb4648757add26b0289ae69203f26e856580831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs?ref=5fb4648757add26b0289ae69203f26e856580831", "patch": "@@ -41,7 +41,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {"}]}