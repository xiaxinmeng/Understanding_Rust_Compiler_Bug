{"sha": "a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MjYwZWJhYTJiM2JhNmMxM2NkNmJjNmQ2Y2JiYmU1YjdjOTY1OTU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-27T07:12:51Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-27T13:19:31Z"}, "message": "Update the pretty-printer to output the new syntax", "tree": {"sha": "0ab9f090b9bb1fe1c015ea0e7231842b45baae41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab9f090b9bb1fe1c015ea0e7231842b45baae41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595", "html_url": "https://github.com/rust-lang/rust/commit/a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557c2a380ac0b59397a194ceaaaa0b4cc94d8851", "url": "https://api.github.com/repos/rust-lang/rust/commits/557c2a380ac0b59397a194ceaaaa0b4cc94d8851", "html_url": "https://github.com/rust-lang/rust/commit/557c2a380ac0b59397a194ceaaaa0b4cc94d8851"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "4ee25df260761f72a03dd71ef920a6be8a4bd05d", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=a6260ebaa2b3ba6c13cd6bc6d6cbbbe5b7c96595", "patch": "@@ -410,9 +410,9 @@ fn print_item(&ps s, &@ast::item item) {\n     alt (item.node) {\n         case (ast::item_const(?ty, ?expr)) {\n             head(s, \"const\");\n+            word_space(s, item.ident + \":\");\n             print_type(s, *ty);\n             space(s.s);\n-            word_space(s, item.ident);\n             end(s); // end the head-ibox\n \n             word_space(s, \"=\");\n@@ -442,6 +442,9 @@ fn print_item(&ps s, &@ast::item item) {\n                 case (ast::native_abi_rust_intrinsic) {\n                     word_nbsp(s, \"\\\"rust-intrinsic\\\"\");\n                 }\n+                case (ast::native_abi_x86stdcall) {\n+                    word_nbsp(s, \"\\\"x86stdcall\\\"\");\n+                }\n             }\n             word_nbsp(s, \"mod\");\n             word_nbsp(s, item.ident);\n@@ -510,9 +513,8 @@ fn print_item(&ps s, &@ast::item item) {\n             fn print_field(&ps s, &ast::obj_field field) {\n                 ibox(s, indent_unit);\n                 print_mutability(s, field.mut);\n+                word_space(s, field.ident + \":\");\n                 print_type(s, *field.ty);\n-                space(s.s);\n-                word(s.s, field.ident);\n                 end(s);\n             }\n             fn get_span(&ast::obj_field f) -> codemap::span { ret f.ty.span; }\n@@ -544,9 +546,8 @@ fn print_item(&ps s, &@ast::item item) {\n             word(s.s, item.ident);\n             print_type_params(s, tps);\n             popen(s);\n+            word_space(s, dt.decl.inputs.(0).ident + \":\");\n             print_type(s, *dt.decl.inputs.(0).ty);\n-            space(s.s);\n-            word(s.s, dt.decl.inputs.(0).ident);\n             pclose(s);\n             space(s.s);\n             print_block(s, dt.body);\n@@ -810,23 +811,19 @@ fn print_expr(&ps s, &@ast::expr expr) {\n         }\n         case (ast::expr_for(?decl, ?expr, ?blk)) {\n             head(s, \"for\");\n-            popen(s);\n             print_for_decl(s, decl);\n             space(s.s);\n             word_space(s, \"in\");\n             print_expr(s, expr);\n-            pclose(s);\n             space(s.s);\n             print_block(s, blk);\n         }\n         case (ast::expr_for_each(?decl, ?expr, ?blk)) {\n             head(s, \"for each\");\n-            popen(s);\n             print_for_decl(s, decl);\n             space(s.s);\n             word_space(s, \"in\");\n             print_expr(s, expr);\n-            pclose(s);\n             space(s.s);\n             print_block(s, blk);\n         }\n@@ -869,10 +866,8 @@ fn print_expr(&ps s, &@ast::expr expr) {\n         }\n         case (ast::expr_block(?blk)) {\n             // containing cbox, will be closed by print-block at }\n-\n             cbox(s, indent_unit);\n             // head-box, will be closed by print-block after {\n-\n             ibox(s, 0u);\n             print_block(s, blk);\n         }\n@@ -1008,9 +1003,9 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             fn print_field(&ps s, &ast::anon_obj_field field) {\n                 ibox(s, indent_unit);\n                 print_mutability(s, field.mut);\n+                word_space(s, field.ident + \":\");\n                 print_type(s, *field.ty);\n                 space(s.s);\n-                word(s.s, field.ident);\n                 word_space(s, \"=\");\n                 print_expr(s, field.expr);\n                 end(s);\n@@ -1067,8 +1062,7 @@ fn print_decl(&ps s, &@ast::decl decl) {\n                 alt loc.node.ty {\n                   some(?ty) {\n                     ibox(s, indent_unit);\n-                    word(s.s, loc.node.ident);\n-                    word_space(s, \":\");\n+                    word_space(s, loc.node.ident + \":\");\n                     print_type(s, *ty);\n                     end(s);\n                   }\n@@ -1100,16 +1094,20 @@ fn print_decl(&ps s, &@ast::decl decl) {\n fn print_ident(&ps s, &ast::ident ident) { word(s.s, ident); }\n \n fn print_for_decl(&ps s, @ast::local loc) {\n+    word(s.s, loc.node.ident);\n     alt (loc.node.ty) {\n-      none { word(s.s, \"auto\"); }\n-      some (?t) { print_type(s, *t); }\n+      some (?t) {\n+        word_space(s, \":\");\n+        print_type(s, *t);\n+      }\n+      none {}\n     }\n     space(s.s);\n-    word(s.s, loc.node.ident);\n }\n \n fn print_path(&ps s, &ast::path path) {\n     maybe_print_comment(s, path.span.lo);\n+    if path.node.global { word(s.s, \"::\"); }\n     auto first = true;\n     for (str id in path.node.idents) {\n         if (first) { first = false; } else { word(s.s, \"::\"); }\n@@ -1128,14 +1126,16 @@ fn print_pat(&ps s, &@ast::pat pat) {\n     s.ann.pre(ann_node);\n     alt (pat.node) {\n         case (ast::pat_wild) { word(s.s, \"_\"); }\n-        case (ast::pat_bind(?id)) { word(s.s, \"?\" + id); }\n+        case (ast::pat_bind(?id)) { word(s.s, id); }\n         case (ast::pat_lit(?lit)) { print_literal(s, lit); }\n         case (ast::pat_tag(?path, ?args)) {\n             print_path(s, path);\n             if (ivec::len(args) > 0u) {\n                 popen(s);\n                 commasep(s, inconsistent, args, print_pat);\n                 pclose(s);\n+            } else {\n+                word(s.s, \".\");\n             }\n         }\n         case (ast::pat_rec(?fields, ?etc)) {\n@@ -1182,10 +1182,9 @@ fn print_fn_args_and_ret(&ps s, &ast::fn_decl decl) {\n     popen(s);\n     fn print_arg(&ps s, &ast::arg x) {\n         ibox(s, indent_unit);\n+        word_space(s, x.ident + \":\");\n         print_alias(s, x.mode);\n         print_type(s, *x.ty);\n-        space(s.s);\n-        word(s.s, x.ident);\n         end(s);\n     }\n     commasep(s, inconsistent, decl.inputs, print_arg);"}]}