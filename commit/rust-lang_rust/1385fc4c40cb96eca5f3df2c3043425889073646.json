{"sha": "1385fc4c40cb96eca5f3df2c3043425889073646", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzODVmYzRjNDBjYjk2ZWNhNWYzZGYyYzMwNDM0MjU4ODkwNzM2NDY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T16:07:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T16:07:44Z"}, "message": "rustc_codegen_llvm: remove InternalDebugLocation and simplify dbg_var_addr.", "tree": {"sha": "ff523f8c9dc519ca603a61555f1ff25a98b10367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff523f8c9dc519ca603a61555f1ff25a98b10367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1385fc4c40cb96eca5f3df2c3043425889073646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1385fc4c40cb96eca5f3df2c3043425889073646", "html_url": "https://github.com/rust-lang/rust/commit/1385fc4c40cb96eca5f3df2c3043425889073646", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1385fc4c40cb96eca5f3df2c3043425889073646/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ccbf6ff80ce66884ab70fdb679353245f05e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ccbf6ff80ce66884ab70fdb679353245f05e5b", "html_url": "https://github.com/rust-lang/rust/commit/d6ccbf6ff80ce66884ab70fdb679353245f05e5b"}], "stats": {"total": 108, "additions": 35, "deletions": 73}, "files": [{"sha": "46f186191e3ab8d1562080dc44e847d0a46c0acb", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=1385fc4c40cb96eca5f3df2c3043425889073646", "patch": "@@ -5,7 +5,6 @@ use rustc_codegen_ssa::mir::debuginfo::VariableKind::*;\n \n use self::metadata::{file_metadata, type_metadata, TypeMap};\n use self::namespace::mangled_name_of_instance;\n-use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n use self::type_names::compute_debuginfo_type_name;\n use self::utils::{create_DIArray, is_node_local_to_unit, span_start, DIB};\n \n@@ -38,7 +37,7 @@ use std::ffi::CString;\n use rustc::ty::layout::{self, HasTyCtxt, LayoutOf, Size};\n use rustc_codegen_ssa::traits::*;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{self, BytePos, Pos, Span};\n+use rustc_span::{self, BytePos, Span};\n use smallvec::SmallVec;\n use syntax::ast;\n \n@@ -148,20 +147,18 @@ impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {\n     // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n     fn dbg_var_addr(\n         &mut self,\n-        dbg_context: &FunctionDebugContext<&'ll DIScope>,\n         dbg_var: &'ll DIVariable,\n         scope_metadata: &'ll DIScope,\n         variable_alloca: Self::Value,\n         direct_offset: Size,\n         indirect_offsets: &[Size],\n         span: Span,\n     ) {\n-        assert!(!dbg_context.source_locations_enabled);\n         let cx = self.cx();\n \n-        let loc = span_start(cx, span);\n-\n         // Convert the direct and indirect offsets to address ops.\n+        // FIXME(eddyb) use `const`s instead of getting the values via FFI,\n+        // the values should match the ones in the DWARF standard anyway.\n         let op_deref = || unsafe { llvm::LLVMRustDIBuilderCreateOpDeref() };\n         let op_plus_uconst = || unsafe { llvm::LLVMRustDIBuilderCreateOpPlusUconst() };\n         let mut addr_ops = SmallVec::<[_; 8]>::new();\n@@ -178,28 +175,22 @@ impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {\n             }\n         }\n \n-        // FIXME(eddyb) maybe this information could be extracted from `var`,\n+        // FIXME(eddyb) maybe this information could be extracted from `dbg_var`,\n         // to avoid having to pass it down in both places?\n-        source_loc::set_debug_location(\n-            self,\n-            InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()),\n-        );\n+        // NB: `var` doesn't seem to know about the column, so that's a limitation.\n+        let dbg_loc = cx.create_debug_loc(scope_metadata, span);\n         unsafe {\n-            let debug_loc = llvm::LLVMGetCurrentDebugLocation(self.llbuilder);\n             // FIXME(eddyb) replace `llvm.dbg.declare` with `llvm.dbg.addr`.\n-            let instr = llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n+            llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n                 DIB(cx),\n                 variable_alloca,\n                 dbg_var,\n                 addr_ops.as_ptr(),\n                 addr_ops.len() as c_uint,\n-                debug_loc,\n+                dbg_loc,\n                 self.llbb(),\n             );\n-\n-            llvm::LLVMSetInstDebugLocation(self.llbuilder, instr);\n         }\n-        source_loc::set_debug_location(self, UnknownLocation);\n     }\n \n     fn set_source_location("}, {"sha": "78dc1ac250e6e3011cea5adc4322db691fb59e19", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 27, "deletions": 47, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=1385fc4c40cb96eca5f3df2c3043425889073646", "patch": "@@ -1,12 +1,11 @@\n-use self::InternalDebugLocation::*;\n-\n use super::metadata::UNKNOWN_COLUMN_NUMBER;\n use super::utils::{debug_context, span_start};\n use rustc_codegen_ssa::mir::debuginfo::FunctionDebugContext;\n \n use crate::builder::Builder;\n-use crate::llvm;\n+use crate::common::CodegenCx;\n use crate::llvm::debuginfo::DIScope;\n+use crate::llvm::{self, Value};\n use log::debug;\n use rustc_codegen_ssa::traits::*;\n \n@@ -24,56 +23,37 @@ pub fn set_source_location<D>(\n ) {\n     let dbg_loc = if debug_context.source_locations_enabled {\n         debug!(\"set_source_location: {}\", bx.sess().source_map().span_to_string(span));\n-        let loc = span_start(bx.cx(), span);\n-        InternalDebugLocation::new(scope, loc.line, loc.col.to_usize())\n+        Some(bx.cx().create_debug_loc(scope, span))\n     } else {\n-        UnknownLocation\n+        None\n     };\n-    set_debug_location(bx, dbg_loc);\n-}\n \n-#[derive(Copy, Clone, PartialEq)]\n-pub enum InternalDebugLocation<'ll> {\n-    KnownLocation { scope: &'ll DIScope, line: usize, col: usize },\n-    UnknownLocation,\n-}\n-\n-impl InternalDebugLocation<'ll> {\n-    pub fn new(scope: &'ll DIScope, line: usize, col: usize) -> Self {\n-        KnownLocation { scope, line, col }\n+    unsafe {\n+        llvm::LLVMSetCurrentDebugLocation(bx.llbuilder, dbg_loc);\n     }\n }\n \n-pub fn set_debug_location(bx: &Builder<'_, 'll, '_>, debug_location: InternalDebugLocation<'ll>) {\n-    let metadata_node = match debug_location {\n-        KnownLocation { scope, line, col } => {\n-            // For MSVC, set the column number to zero.\n-            // Otherwise, emit it. This mimics clang behaviour.\n-            // See discussion in https://github.com/rust-lang/rust/issues/42921\n-            let col_used = if bx.sess().target.target.options.is_like_msvc {\n-                UNKNOWN_COLUMN_NUMBER\n-            } else {\n-                col as c_uint\n-            };\n-            debug!(\"setting debug location to {} {}\", line, col);\n-\n-            unsafe {\n-                Some(llvm::LLVMRustDIBuilderCreateDebugLocation(\n-                    debug_context(bx.cx()).llcontext,\n-                    line as c_uint,\n-                    col_used,\n-                    scope,\n-                    None,\n-                ))\n-            }\n-        }\n-        UnknownLocation => {\n-            debug!(\"clearing debug location \");\n-            None\n+impl CodegenCx<'ll, '_> {\n+    pub fn create_debug_loc(&self, scope: &'ll DIScope, span: Span) -> &'ll Value {\n+        let loc = span_start(self, span);\n+\n+        // For MSVC, set the column number to zero.\n+        // Otherwise, emit it. This mimics clang behaviour.\n+        // See discussion in https://github.com/rust-lang/rust/issues/42921\n+        let col_used = if self.sess().target.target.options.is_like_msvc {\n+            UNKNOWN_COLUMN_NUMBER\n+        } else {\n+            loc.col.to_usize() as c_uint\n+        };\n+\n+        unsafe {\n+            llvm::LLVMRustDIBuilderCreateDebugLocation(\n+                debug_context(self).llcontext,\n+                loc.line as c_uint,\n+                col_used,\n+                scope,\n+                None,\n+            )\n         }\n-    };\n-\n-    unsafe {\n-        llvm::LLVMSetCurrentDebugLocation(bx.llbuilder, metadata_node);\n     }\n }"}, {"sha": "87a6449a8ea7a287e38dcabf80ab1a5b4a85e638", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=1385fc4c40cb96eca5f3df2c3043425889073646", "patch": "@@ -910,8 +910,6 @@ extern \"C\" {\n \n     // Metadata\n     pub fn LLVMSetCurrentDebugLocation(Builder: &Builder<'a>, L: Option<&'a Value>);\n-    pub fn LLVMGetCurrentDebugLocation(Builder: &Builder<'a>) -> &'a Value;\n-    pub fn LLVMSetInstDebugLocation(Builder: &Builder<'a>, Inst: &'a Value);\n \n     // Terminators\n     pub fn LLVMBuildRetVoid(B: &Builder<'a>) -> &'a Value;"}, {"sha": "362bb18abb8294a06f205c24a2593dd8c424f5a9", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=1385fc4c40cb96eca5f3df2c3043425889073646", "patch": "@@ -210,11 +210,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        let debug_context = match &self.debug_context {\n-            Some(debug_context) => debug_context,\n-            None => return,\n-        };\n-\n         // FIXME(eddyb) add debuginfo for unsized places too.\n         let base = match local_ref {\n             LocalRef::Place(place) => place,\n@@ -264,7 +259,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             if let Some(scope) = scope {\n                 if let Some(dbg_var) = var.dbg_var {\n                     bx.dbg_var_addr(\n-                        debug_context,\n                         dbg_var,\n                         scope,\n                         base.llval,"}, {"sha": "f1ba6d4daa809a3bd49e8ff785e763aeebf1b997", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1385fc4c40cb96eca5f3df2c3043425889073646/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=1385fc4c40cb96eca5f3df2c3043425889073646", "patch": "@@ -49,7 +49,6 @@ pub trait DebugInfoBuilderMethods: BackendTypes {\n     // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n     fn dbg_var_addr(\n         &mut self,\n-        dbg_context: &FunctionDebugContext<Self::DIScope>,\n         dbg_var: Self::DIVariable,\n         scope_metadata: Self::DIScope,\n         variable_alloca: Self::Value,"}]}