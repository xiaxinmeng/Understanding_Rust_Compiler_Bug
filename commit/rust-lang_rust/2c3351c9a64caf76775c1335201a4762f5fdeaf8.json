{"sha": "2c3351c9a64caf76775c1335201a4762f5fdeaf8", "node_id": "C_kwDOAAsO6NoAKDJjMzM1MWM5YTY0Y2FmNzY3NzVjMTMzNTIwMWE0NzYyZjVmZGVhZjg", "commit": {"author": {"name": "rdvdev2", "email": "rdvdev2@gmail.com", "date": "2022-09-02T03:19:03Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "Migrate InvalidAttrAtCrateLevel\n\nCo-authored-by: Nathan Stocks <cleancut@github.com>\nCo-authored-by: rdvdev2 <rdvdev2@gmail.com>", "tree": {"sha": "7f1937e1127656a412458259fc1cdd6d6ae32dbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f1937e1127656a412458259fc1cdd6d6ae32dbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c3351c9a64caf76775c1335201a4762f5fdeaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3351c9a64caf76775c1335201a4762f5fdeaf8", "html_url": "https://github.com/rust-lang/rust/commit/2c3351c9a64caf76775c1335201a4762f5fdeaf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c3351c9a64caf76775c1335201a4762f5fdeaf8/comments", "author": {"login": "rdvdev2", "id": 33713918, "node_id": "MDQ6VXNlcjMzNzEzOTE4", "avatar_url": "https://avatars.githubusercontent.com/u/33713918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdvdev2", "html_url": "https://github.com/rdvdev2", "followers_url": "https://api.github.com/users/rdvdev2/followers", "following_url": "https://api.github.com/users/rdvdev2/following{/other_user}", "gists_url": "https://api.github.com/users/rdvdev2/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdvdev2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdvdev2/subscriptions", "organizations_url": "https://api.github.com/users/rdvdev2/orgs", "repos_url": "https://api.github.com/users/rdvdev2/repos", "events_url": "https://api.github.com/users/rdvdev2/events{/privacy}", "received_events_url": "https://api.github.com/users/rdvdev2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "0315d7c9dbc33164ce8d1a7ad0464fa695a59399", "url": "https://api.github.com/repos/rust-lang/rust/commits/0315d7c9dbc33164ce8d1a7ad0464fa695a59399", "html_url": "https://github.com/rust-lang/rust/commit/0315d7c9dbc33164ce8d1a7ad0464fa695a59399"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "c1c2f379fa52a9f818b55289f2f32373bf606ba4", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=2c3351c9a64caf76775c1335201a4762f5fdeaf8", "patch": "@@ -290,3 +290,6 @@ passes_unknown_lang_item = definition of an unknown language item: `{$name}`\n     .label = definition of unknown language item `{$name}`\n \n passes_local_duplicate_lang_item = found duplicate lang item `{$name}`\n+\n+passes_invalid_attr_at_crate_level = `{$name}` attribute cannot be used at crate level\n+    .suggestion = perhaps you meant to use an outer attribute"}, {"sha": "2a9578e8ce32ce68492ff28d1d9f20cb984edbca", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=2c3351c9a64caf76775c1335201a4762f5fdeaf8", "patch": "@@ -4,7 +4,7 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::errors::{self, DebugVisualizerUnreadable};\n+use crate::errors::{self, DebugVisualizerUnreadable, InvalidAttrAtCrateLevel};\n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{fluent, struct_span_err, Applicability, MultiSpan};\n@@ -1867,7 +1867,7 @@ impl CheckAttrVisitor<'_> {\n                     span: meta_item.span,\n                     file: &file,\n                     error: err,\n-                } );\n+                });\n                 false\n             }\n         }\n@@ -2178,25 +2178,11 @@ fn check_invalid_crate_level_attr(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n         if attr.style == AttrStyle::Inner {\n             for attr_to_check in ATTRS_TO_CHECK {\n                 if attr.has_name(*attr_to_check) {\n-                    let mut err = tcx.sess.struct_span_err(\n-                        attr.span,\n-                        &format!(\n-                            \"`{}` attribute cannot be used at crate level\",\n-                            attr_to_check.to_ident_string()\n-                        ),\n-                    );\n-                    // Only emit an error with a suggestion if we can create a\n-                    // string out of the attribute span\n-                    if let Ok(src) = tcx.sess.source_map().span_to_snippet(attr.span) {\n-                        let replacement = src.replace(\"#!\", \"#\");\n-                        err.span_suggestion_verbose(\n-                            attr.span,\n-                            \"perhaps you meant to use an outer attribute\",\n-                            replacement,\n-                            rustc_errors::Applicability::MachineApplicable,\n-                        );\n-                    }\n-                    err.emit();\n+                    tcx.sess.emit_err(InvalidAttrAtCrateLevel {\n+                        span: attr.span,\n+                        snippet: tcx.sess.source_map().span_to_snippet(attr.span).ok(),\n+                        name: *attr_to_check,\n+                    });\n                 }\n             }\n         }"}, {"sha": "9b8eebd6be0be56416cde1677074ae7ee5747488", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=2c3351c9a64caf76775c1335201a4762f5fdeaf8", "patch": "@@ -1,6 +1,6 @@\n use std::{io::Error, path::Path};\n \n-use rustc_errors::{Applicability, MultiSpan};\n+use rustc_errors::{Applicability, ErrorGuaranteed, IntoDiagnostic, MultiSpan};\n use rustc_hir::Target;\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n@@ -714,3 +714,33 @@ pub struct UnknownLangItem {\n     pub span: Span,\n     pub name: Symbol,\n }\n+\n+pub struct InvalidAttrAtCrateLevel {\n+    pub span: Span,\n+    pub snippet: Option<String>,\n+    pub name: Symbol,\n+}\n+\n+impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n+    fn into_diagnostic(\n+        self,\n+        handler: &'_ rustc_errors::Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag =\n+            handler.struct_err(rustc_errors::fluent::passes::invalid_attr_at_crate_level);\n+        diag.set_span(self.span);\n+        diag.set_arg(\"name\", self.name);\n+        // Only emit an error with a suggestion if we can create a string out\n+        // of the attribute span\n+        if let Some(src) = self.snippet {\n+            let replacement = src.replace(\"#!\", \"#\");\n+            diag.span_suggestion_verbose(\n+                self.span,\n+                rustc_errors::fluent::passes::suggestion,\n+                replacement,\n+                rustc_errors::Applicability::MachineApplicable,\n+            );\n+        }\n+        diag\n+    }\n+}"}, {"sha": "24657372486f26ca2f9456e13a5ce8787f0bf963", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3351c9a64caf76775c1335201a4762f5fdeaf8/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=2c3351c9a64caf76775c1335201a4762f5fdeaf8", "patch": "@@ -7,8 +7,8 @@\n //! * Traits that represent operators; e.g., `Add`, `Sub`, `Index`.\n //! * Functions called by the compiler itself.\n \n-use crate::errors::{LangItemOnIncorrectTarget, UnknownLangItem};\n use crate::check_attr::target_from_impl_item;\n+use crate::errors::{LangItemOnIncorrectTarget, UnknownLangItem};\n use crate::weak_lang_items;\n \n use rustc_errors::{pluralize, struct_span_err};\n@@ -52,10 +52,7 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                 }\n                 // Unknown lang item.\n                 _ => {\n-                    self.tcx.sess.emit_err(UnknownLangItem {\n-                        span,\n-                        name: value,\n-                    });\n+                    self.tcx.sess.emit_err(UnknownLangItem { span, name: value });\n                 }\n             }\n         }"}]}