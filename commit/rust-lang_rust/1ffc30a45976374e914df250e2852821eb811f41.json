{"sha": "1ffc30a45976374e914df250e2852821eb811f41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZmMzMGE0NTk3NjM3NGU5MTRkZjI1MGUyODUyODIxZWI4MTFmNDE=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-05-09T14:47:38Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-05-24T14:04:39Z"}, "message": "add gather/scatter run-time test", "tree": {"sha": "ef02b595978d58ad09f14cbef4b7fb2723f12b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef02b595978d58ad09f14cbef4b7fb2723f12b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ffc30a45976374e914df250e2852821eb811f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffc30a45976374e914df250e2852821eb811f41", "html_url": "https://github.com/rust-lang/rust/commit/1ffc30a45976374e914df250e2852821eb811f41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ffc30a45976374e914df250e2852821eb811f41/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2809b0155af72fd9e6c5c3d27942dd95b6718ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2809b0155af72fd9e6c5c3d27942dd95b6718ef7", "html_url": "https://github.com/rust-lang/rust/commit/2809b0155af72fd9e6c5c3d27942dd95b6718ef7"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "6c47bf3e321fbb3eb19afb6bb564f9d9f558f2f5", "filename": "src/test/codegen/simd-intrinsic-generic-gather.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ffc30a45976374e914df250e2852821eb811f41/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffc30a45976374e914df250e2852821eb811f41/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-gather.rs?ref=1ffc30a45976374e914df250e2852821eb811f41", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-emscripten\n // ignore-tidy-linelength\n+// min-llvm-version 6.0\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "7b5b2e55e2949986fc9ffec3a7ee46acaa9a0ec5", "filename": "src/test/codegen/simd-intrinsic-generic-scatter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffc30a45976374e914df250e2852821eb811f41/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffc30a45976374e914df250e2852821eb811f41/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-scatter.rs?ref=1ffc30a45976374e914df250e2852821eb811f41", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-emscripten\n // ignore-tidy-linelength\n+// min-llvm-version 6.0\n \n // compile-flags: -C no-prepopulate-passes\n \n@@ -38,6 +39,7 @@ pub unsafe fn scatter_f32x2(pointers: Vec2<*mut f32>, mask: Vec2<i32>,\n     simd_scatter(values, pointers, mask)\n }\n \n+\n // CHECK-LABEL: @scatter_pf32x2\n #[no_mangle]\n pub unsafe fn scatter_pf32x2(pointers: Vec2<*mut *const f32>, mask: Vec2<i32>,"}, {"sha": "dbc5221441fe4f3de618caca78828fbdab732655", "filename": "src/test/run-pass/simd-intrinsic-generic-gather.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1ffc30a45976374e914df250e2852821eb811f41/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffc30a45976374e914df250e2852821eb811f41/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-gather.rs?ref=1ffc30a45976374e914df250e2852821eb811f41", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten\n+// min-llvm-version 6.0\n+\n+// Test that the simd_{gather,scatter} intrinsics produce the correct results.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct x4<T>(pub T, pub T, pub T, pub T);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_gather<T, U, V>(x: T, y: U, z: V) -> T;\n+    fn simd_scatter<T, U, V>(x: T, y: U, z: V) -> ();\n+}\n+\n+fn main() {\n+    let mut x = [0_f32, 1., 2., 3., 4., 5., 6., 7.];\n+\n+    let default = x4(-3_f32, -3., -3., -3.);\n+    let s_strided = x4(0_f32, 2., -3., 6.);\n+    let mask = x4(-1_i32, -1, 0, -1);\n+\n+    // reading from *const\n+    unsafe {\n+        let pointer = &x[0] as *const f32;\n+        let pointers =  x4(\n+            pointer.offset(0) as *const f32,\n+            pointer.offset(2),\n+            pointer.offset(4),\n+            pointer.offset(6)\n+        );\n+\n+        let r_strided = simd_gather(default, pointers, mask);\n+\n+        assert_eq!(r_strided, s_strided);\n+    }\n+\n+    // reading from *mut\n+    unsafe {\n+        let pointer = &mut x[0] as *mut f32;\n+        let pointers = x4(\n+            pointer.offset(0) as *mut f32,\n+            pointer.offset(2),\n+            pointer.offset(4),\n+            pointer.offset(6)\n+        );\n+\n+        let r_strided = simd_gather(default, pointers, mask);\n+\n+        assert_eq!(r_strided, s_strided);\n+    }\n+\n+    // writing to *mut\n+    unsafe {\n+        let pointer = &mut x[0] as *mut f32;\n+        let pointers = x4(\n+            pointer.offset(0) as *mut f32,\n+            pointer.offset(2),\n+            pointer.offset(4),\n+            pointer.offset(6)\n+        );\n+\n+        let values = x4(42_f32, 43_f32, 44_f32, 45_f32);\n+        simd_scatter(values, pointers, mask);\n+\n+        assert_eq!(x, [42., 1., 43., 3., 4., 5., 45., 7.]);\n+    }\n+}"}]}