{"sha": "eaee9d11ee39ef58d2985a87f296d20eb1ee1345", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZWU5ZDExZWUzOWVmNThkMjk4NWE4N2YyOTZkMjBlYjFlZTEzNDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:05:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T21:05:35Z"}, "message": "Rollup merge of #67404 - mark-i-m:split-1, r=matthewjasper\n\nSeparate region inference logic from error handling better\n\nSplit out from #67241\n\nr? @matthewjasper", "tree": {"sha": "be2452095f426d5fbcdd596b518ccbc0f30f5b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2452095f426d5fbcdd596b518ccbc0f30f5b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaee9d11ee39ef58d2985a87f296d20eb1ee1345", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/TefCRBK7hj4Ov3rIwAAdHIIAEM86ItPnvQrDHt2zY5g5wKd\nUgjH0SfmuFqP9UzeWJmIHVAMCAxcJN5NT3ruEI90XvKxq74+2iTU7Y/TQ6q1FJh9\n7xWb5lzQs1u2Pl0Yy1z3NdSgjQUabaDHkti1bRT623j+UaGAy+h6KbWSHLjRYsK3\nwR1GP23qboK3ROJFxTUa98ZXuk/gR0uuwfdhkuwzpVDiQ5j1WhoBDwd+GNv9+zim\nPaJpacfGQEgtjZ2NVU9SpNqKB5HH5/VD/rnDTH1uYj8cLeWszgEUOVqQZzQP0XsN\n8Xk6wSXJyWOc4FUm2kkMFEEKW5c4AonUrWJGHTrFkU4k0NG+6buYr5tHP87LJQg=\n=L7/P\n-----END PGP SIGNATURE-----\n", "payload": "tree be2452095f426d5fbcdd596b518ccbc0f30f5b31\nparent d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe\nparent 90ef197a6eb0287b85b054f94e53951dddc15576\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576875935 +0100\ncommitter GitHub <noreply@github.com> 1576875935 +0100\n\nRollup merge of #67404 - mark-i-m:split-1, r=matthewjasper\n\nSeparate region inference logic from error handling better\n\nSplit out from #67241\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaee9d11ee39ef58d2985a87f296d20eb1ee1345", "html_url": "https://github.com/rust-lang/rust/commit/eaee9d11ee39ef58d2985a87f296d20eb1ee1345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaee9d11ee39ef58d2985a87f296d20eb1ee1345/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe", "html_url": "https://github.com/rust-lang/rust/commit/d7dc3502f9ad8f8ab0cc7f22388b92b2216f57fe"}, {"sha": "90ef197a6eb0287b85b054f94e53951dddc15576", "url": "https://api.github.com/repos/rust-lang/rust/commits/90ef197a6eb0287b85b054f94e53951dddc15576", "html_url": "https://github.com/rust-lang/rust/commit/90ef197a6eb0287b85b054f94e53951dddc15576"}], "stats": {"total": 184, "additions": 96, "deletions": 88}, "files": [{"sha": "b78cd6bccf8ca9ff80ee9f8931c93bd378b303aa", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eaee9d11ee39ef58d2985a87f296d20eb1ee1345/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaee9d11ee39ef58d2985a87f296d20eb1ee1345/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=eaee9d11ee39ef58d2985a87f296d20eb1ee1345", "patch": "@@ -1,10 +1,13 @@\n //! Error reporting machinery for lifetime errors.\n \n use rustc::hir::def_id::DefId;\n-use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n-use rustc::infer::InferCtxt;\n-use rustc::infer::NLLRegionVariableOrigin;\n-use rustc::mir::{ConstraintCategory, Local, Location, Body};\n+use rustc::infer::{\n+    error_reporting::nice_region_error::NiceRegionError,\n+    InferCtxt, NLLRegionVariableOrigin,\n+};\n+use rustc::mir::{\n+    ConstraintCategory, Local, Location, Body,\n+};\n use rustc::ty::{self, RegionVid};\n use rustc_index::vec::IndexVec;\n use rustc_errors::DiagnosticBuilder;\n@@ -93,6 +96,32 @@ pub struct ErrorConstraintInfo {\n }\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n+    /// Converts a region inference variable into a `ty::Region` that\n+    /// we can use for error reporting. If `r` is universally bound,\n+    /// then we use the name that we have on record for it. If `r` is\n+    /// existentially bound, then we check its inferred value and try\n+    /// to find a good name from that. Returns `None` if we can't find\n+    /// one (e.g., this is just some random part of the CFG).\n+    pub fn to_error_region(&self, r: RegionVid) -> Option<ty::Region<'tcx>> {\n+        self.to_error_region_vid(r).and_then(|r| self.definitions[r].external_name)\n+    }\n+\n+    /// Returns the [RegionVid] corresponding to the region returned by\n+    /// `to_error_region`.\n+    pub fn to_error_region_vid(&self, r: RegionVid) -> Option<RegionVid> {\n+        if self.universal_regions.is_universal_region(r) {\n+            Some(r)\n+        } else {\n+            let r_scc = self.constraint_sccs.scc(r);\n+            let upper_bound = self.universal_upper_bound(r);\n+            if self.scc_values.contains(r_scc, upper_bound) {\n+                self.to_error_region_vid(upper_bound)\n+            } else {\n+                None\n+            }\n+        }\n+    }\n+\n     /// Tries to find the best constraint to blame for the fact that\n     /// `R: from_region`, where `R` is some region that meets\n     /// `target_test`. This works by following the constraint graph,"}, {"sha": "dedc6b9b09af2ee33c0e739cd7d22db43ea42710", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 63, "deletions": 84, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/eaee9d11ee39ef58d2985a87f296d20eb1ee1345/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaee9d11ee39ef58d2985a87f296d20eb1ee1345/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=eaee9d11ee39ef58d2985a87f296d20eb1ee1345", "patch": "@@ -928,32 +928,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n-    /// Converts a region inference variable into a `ty::Region` that\n-    /// we can use for error reporting. If `r` is universally bound,\n-    /// then we use the name that we have on record for it. If `r` is\n-    /// existentially bound, then we check its inferred value and try\n-    /// to find a good name from that. Returns `None` if we can't find\n-    /// one (e.g., this is just some random part of the CFG).\n-    pub fn to_error_region(&self, r: RegionVid) -> Option<ty::Region<'tcx>> {\n-        self.to_error_region_vid(r).and_then(|r| self.definitions[r].external_name)\n-    }\n-\n-    /// Returns the [RegionVid] corresponding to the region returned by\n-    /// `to_error_region`.\n-    pub fn to_error_region_vid(&self, r: RegionVid) -> Option<RegionVid> {\n-        if self.universal_regions.is_universal_region(r) {\n-            Some(r)\n-        } else {\n-            let r_scc = self.constraint_sccs.scc(r);\n-            let upper_bound = self.universal_upper_bound(r);\n-            if self.scc_values.contains(r_scc, upper_bound) {\n-                self.to_error_region_vid(upper_bound)\n-            } else {\n-                None\n-            }\n-        }\n-    }\n-\n     /// Invoked when we have some type-test (e.g., `T: 'X`) that we cannot\n     /// prove to be satisfied. If this is a closure, we will attempt to\n     /// \"promote\" this type-test into our `ClosureRegionRequirements` and\n@@ -1164,7 +1138,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///   include the CFG anyhow.\n     /// - For each `end('x)` element in `'r`, compute the mutual LUB, yielding\n     ///   a result `'y`.\n-    fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n+    pub (in crate::borrow_check) fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n         debug!(\"universal_upper_bound(r={:?}={})\", r, self.region_value_str(r));\n \n         // Find the smallest universal region that contains all other\n@@ -1458,19 +1432,34 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             debug!(\"check_polonius_subset_errors: subset_error longer_fr={:?},\\\n                 shorter_fr={:?}\", longer_fr, shorter_fr);\n \n-            self.report_or_propagate_universal_region_error(\n+            let propagated = self.try_propagate_universal_region_error(\n                 *longer_fr,\n                 *shorter_fr,\n-                infcx,\n                 body,\n-                local_names,\n-                upvars,\n-                mir_def_id,\n                 &mut propagated_outlives_requirements,\n-                &mut outlives_suggestion,\n-                errors_buffer,\n-                region_naming,\n             );\n+            if !propagated {\n+                // If we are not in a context where we can't propagate errors, or we\n+                // could not shrink `fr` to something smaller, then just report an\n+                // error.\n+                //\n+                // Note: in this case, we use the unapproximated regions to report the\n+                // error. This gives better error messages in some cases.\n+                let db = self.report_error(\n+                    body,\n+                    local_names,\n+                    upvars,\n+                    infcx,\n+                    mir_def_id,\n+                    *longer_fr,\n+                    NLLRegionVariableOrigin::FreeRegion,\n+                    *shorter_fr,\n+                    &mut outlives_suggestion,\n+                    region_naming,\n+                );\n+\n+                db.buffer(errors_buffer);\n+            }\n         }\n \n         // Handle the placeholder errors as usual, until the chalk-rustc-polonius triumvirate has\n@@ -1594,48 +1583,59 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             return None;\n         }\n \n-        self.report_or_propagate_universal_region_error(\n+        let propagated = self.try_propagate_universal_region_error(\n             longer_fr,\n             shorter_fr,\n-            infcx,\n             body,\n-            local_names,\n-            upvars,\n-            mir_def_id,\n             propagated_outlives_requirements,\n-            outlives_suggestion,\n-            errors_buffer,\n-            region_naming,\n-        )\n+        );\n+\n+        if propagated {\n+            None\n+        } else {\n+            // If we are not in a context where we can't propagate errors, or we\n+            // could not shrink `fr` to something smaller, then just report an\n+            // error.\n+            //\n+            // Note: in this case, we use the unapproximated regions to report the\n+            // error. This gives better error messages in some cases.\n+            let db = self.report_error(\n+                body,\n+                local_names,\n+                upvars,\n+                infcx,\n+                mir_def_id,\n+                longer_fr,\n+                NLLRegionVariableOrigin::FreeRegion,\n+                shorter_fr,\n+                outlives_suggestion,\n+                region_naming,\n+            );\n+\n+            db.buffer(errors_buffer);\n+\n+            Some(ErrorReported)\n+        }\n     }\n \n-    fn report_or_propagate_universal_region_error(\n+    /// Attempt to propagate a region error (e.g. `'a: 'b`) that is not met to a closure's\n+    /// creator. If we cannot, then the caller should report an error to the user.\n+    ///\n+    /// Returns `true` if the error was propagated, and `false` otherwise.\n+    fn try_propagate_universal_region_error(\n         &self,\n         longer_fr: RegionVid,\n         shorter_fr: RegionVid,\n-        infcx: &InferCtxt<'_, 'tcx>,\n         body: &Body<'tcx>,\n-        local_names: &IndexVec<Local, Option<Symbol>>,\n-        upvars: &[Upvar],\n-        mir_def_id: DefId,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n-        outlives_suggestion: &mut OutlivesSuggestionBuilder<'_>,\n-        errors_buffer: &mut Vec<Diagnostic>,\n-        region_naming: &mut RegionErrorNamingCtx,\n-    ) -> Option<ErrorReported> {\n-        debug!(\n-            \"report_or_propagate_universal_region_error: fr={:?} does not outlive shorter_fr={:?}\",\n-            longer_fr, shorter_fr,\n-        );\n-\n+    ) -> bool {\n         if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n             // Shrink `longer_fr` until we find a non-local region (if we do).\n             // We'll call it `fr-` -- it's ever so slightly smaller than\n             // `longer_fr`.\n-\n             if let Some(fr_minus) =\n                 self.universal_region_relations.non_local_lower_bound(longer_fr) {\n-                debug!(\"report_or_propagate_universal_region_error: fr_minus={:?}\", fr_minus);\n+                debug!(\"try_propagate_universal_region_error: fr_minus={:?}\", fr_minus);\n \n                 let blame_span_category =\n                     self.find_outlives_blame_span(body, longer_fr,\n@@ -1648,7 +1648,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     .universal_region_relations\n                     .non_local_upper_bounds(&shorter_fr);\n                 debug!(\n-                    \"report_or_propagate_universal_region_error: shorter_fr_plus={:?}\",\n+                    \"try_propagate_universal_region_error: shorter_fr_plus={:?}\",\n                     shorter_fr_plus\n                 );\n                 for &&fr in &shorter_fr_plus {\n@@ -1660,32 +1660,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         category: blame_span_category.0,\n                     });\n                 }\n-                return None;\n+                return true;\n             }\n         }\n \n-        // If we are not in a context where we can't propagate errors, or we\n-        // could not shrink `fr` to something smaller, then just report an\n-        // error.\n-        //\n-        // Note: in this case, we use the unapproximated regions to report the\n-        // error. This gives better error messages in some cases.\n-        let db = self.report_error(\n-            body,\n-            local_names,\n-            upvars,\n-            infcx,\n-            mir_def_id,\n-            longer_fr,\n-            NLLRegionVariableOrigin::FreeRegion,\n-            shorter_fr,\n-            outlives_suggestion,\n-            region_naming,\n-        );\n-\n-        db.buffer(errors_buffer);\n-\n-        Some(ErrorReported)\n+        false\n     }\n \n     fn check_bound_universal_region("}]}