{"sha": "4d8cc3f0036a5060bc7044892d891fb81afa00f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOGNjM2YwMDM2YTUwNjBiYzcwNDQ4OTJkODkxZmI4MWFmYTAwZjc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-04T08:47:21Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-04T23:39:31Z"}, "message": "Make either::{partition, flip, to_result} take their arguments by-value\n\nAddresses an XXX\n\nr=pcwalton", "tree": {"sha": "36f87362be84c99ac54bb45088625c3d0338f6f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f87362be84c99ac54bb45088625c3d0338f6f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d8cc3f0036a5060bc7044892d891fb81afa00f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8cc3f0036a5060bc7044892d891fb81afa00f7", "html_url": "https://github.com/rust-lang/rust/commit/4d8cc3f0036a5060bc7044892d891fb81afa00f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d8cc3f0036a5060bc7044892d891fb81afa00f7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f6f46072614d81b53c5487358c8589c91c7f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f6f46072614d81b53c5487358c8589c91c7f95", "html_url": "https://github.com/rust-lang/rust/commit/62f6f46072614d81b53c5487358c8589c91c7f95"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "b2c70916a0003863d5b784fd1407640bf095767d", "filename": "src/libcore/either.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d8cc3f0036a5060bc7044892d891fb81afa00f7/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8cc3f0036a5060bc7044892d891fb81afa00f7/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=4d8cc3f0036a5060bc7044892d891fb81afa00f7", "patch": "@@ -69,8 +69,7 @@ pub fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n     }\n }\n \n-// XXX bad copies. take arg by val\n-pub fn partition<T: Copy, U: Copy>(eithers: &[Either<T, U>])\n+pub fn partition<T, U>(eithers: ~[Either<T, U>])\n     -> (~[T], ~[U]) {\n     /*!\n      * Extracts from a vector of either all the left values and right values\n@@ -81,27 +80,25 @@ pub fn partition<T: Copy, U: Copy>(eithers: &[Either<T, U>])\n \n     let mut lefts: ~[T] = ~[];\n     let mut rights: ~[U] = ~[];\n-    for vec::each(eithers) |elt| {\n-        match *elt {\n-          Left(copy l) => lefts.push(l),\n-          Right(copy r) => rights.push(r)\n+    do vec::consume(eithers) |_i, elt| {\n+        match elt {\n+          Left(l) => lefts.push(l),\n+          Right(r) => rights.push(r)\n         }\n     }\n     return (move lefts, move rights);\n }\n \n-// XXX bad copies\n-pub pure fn flip<T: Copy, U: Copy>(eith: &Either<T, U>) -> Either<U, T> {\n+pub pure fn flip<T, U>(eith: Either<T, U>) -> Either<U, T> {\n     //! Flips between left and right of a given either\n \n-    match *eith {\n-      Right(copy r) => Left(r),\n-      Left(copy l) => Right(l)\n+    match eith {\n+      Right(r) => Left(r),\n+      Left(l) => Right(l)\n     }\n }\n \n-// XXX bad copies\n-pub pure fn to_result<T: Copy, U: Copy>(eith: &Either<T, U>)\n+pub pure fn to_result<T, U>(eith: Either<T, U>)\n     -> Result<U, T> {\n     /*!\n      * Converts either::t to a result::t\n@@ -110,9 +107,9 @@ pub pure fn to_result<T: Copy, U: Copy>(eith: &Either<T, U>)\n      * an ok result, and the \"left\" choice a fail\n      */\n \n-    match *eith {\n-      Right(copy r) => result::Ok(r),\n-      Left(copy l) => result::Err(l)\n+    match eith {\n+      Right(r) => result::Ok(r),\n+      Left(l) => result::Err(l)\n     }\n }\n \n@@ -128,7 +125,6 @@ pub pure fn is_right<T, U>(eith: &Either<T, U>) -> bool {\n     match *eith { Right(_) => true, _ => false }\n }\n \n-// tjc: fix the next two after a snapshot\n pub pure fn unwrap_left<T,U>(eith: Either<T,U>) -> T {\n     //! Retrieves the value in the left branch. Fails if the either is Right.\n "}]}