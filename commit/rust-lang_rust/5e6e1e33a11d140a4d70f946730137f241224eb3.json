{"sha": "5e6e1e33a11d140a4d70f946730137f241224eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNmUxZTMzYTExZDE0MGE0ZDcwZjk0NjczMDEzN2YyNDEyMjRlYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-08T13:58:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-08T13:58:15Z"}, "message": "Auto merge of #79817 - LingMan:if_map, r=lcnr\n\nReplace simple `if let` constructs with Option::map\n\nReplaces a few constructs of the form\n\n```\nif let Some(x) = var {\n    Some(...)\n} else {\n    None\n}\n```\n\nwith calls to `Option::map`.\n\n`@rustbot` modify labels +C-cleanup +T-compiler", "tree": {"sha": "724ff496fa4e56a1252c65ffa34c32ff51c999f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/724ff496fa4e56a1252c65ffa34c32ff51c999f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e6e1e33a11d140a4d70f946730137f241224eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6e1e33a11d140a4d70f946730137f241224eb3", "html_url": "https://github.com/rust-lang/rust/commit/5e6e1e33a11d140a4d70f946730137f241224eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e6e1e33a11d140a4d70f946730137f241224eb3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5019791e2d4ac67b4c5c56853600a02f4b84e515", "url": "https://api.github.com/repos/rust-lang/rust/commits/5019791e2d4ac67b4c5c56853600a02f4b84e515", "html_url": "https://github.com/rust-lang/rust/commit/5019791e2d4ac67b4c5c56853600a02f4b84e515"}, {"sha": "af9402af0f57607638294419b000f06a77da3014", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9402af0f57607638294419b000f06a77da3014", "html_url": "https://github.com/rust-lang/rust/commit/af9402af0f57607638294419b000f06a77da3014"}], "stats": {"total": 54, "additions": 13, "deletions": 41}, "files": [{"sha": "763e4d651a2e955024b0eb0407f61a030607187a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 13, "deletions": 41, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5e6e1e33a11d140a4d70f946730137f241224eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6e1e33a11d140a4d70f946730137f241224eb3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=5e6e1e33a11d140a4d70f946730137f241224eb3", "patch": "@@ -361,11 +361,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn replace_prefix(&self, s: &str, old: &str, new: &str) -> Option<String> {\n-        if let Some(stripped) = s.strip_prefix(old) {\n-            Some(new.to_string() + stripped)\n-        } else {\n-            None\n-        }\n+        s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n     }\n \n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n@@ -587,47 +583,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 hir::Mutability::Mut => {\n                                     let new_prefix = \"&mut \".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::MachineApplicable))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n-                                        hir::Mutability::Not => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&\", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::Unspecified))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n+                                        hir::Mutability::Mut => self\n+                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n+                                            .map(|s| (s, Applicability::MachineApplicable)),\n+                                        hir::Mutability::Not => self\n+                                            .replace_prefix(&src, \"&\", &new_prefix)\n+                                            .map(|s| (s, Applicability::Unspecified)),\n                                     }\n                                 }\n                                 hir::Mutability::Not => {\n                                     let new_prefix = \"&\".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::MachineApplicable))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n-                                        hir::Mutability::Not => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&\", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::MachineApplicable))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n+                                        hir::Mutability::Mut => self\n+                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n+                                            .map(|s| (s, Applicability::MachineApplicable)),\n+                                        hir::Mutability::Not => self\n+                                            .replace_prefix(&src, \"&\", &new_prefix)\n+                                            .map(|s| (s, Applicability::MachineApplicable)),\n                                     }\n                                 }\n                             } {"}]}