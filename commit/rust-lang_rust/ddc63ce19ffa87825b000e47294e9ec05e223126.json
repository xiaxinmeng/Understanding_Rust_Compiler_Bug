{"sha": "ddc63ce19ffa87825b000e47294e9ec05e223126", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYzYzY2UxOWZmYTg3ODI1YjAwMGU0NzI5NGU5ZWMwNWUyMjMxMjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-05T09:58:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:20Z"}, "message": "propagate the pick-constraints through queries", "tree": {"sha": "c8904f1063c4bba449132379b26aaa953fb5a6a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8904f1063c4bba449132379b26aaa953fb5a6a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddc63ce19ffa87825b000e47294e9ec05e223126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc63ce19ffa87825b000e47294e9ec05e223126", "html_url": "https://github.com/rust-lang/rust/commit/ddc63ce19ffa87825b000e47294e9ec05e223126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddc63ce19ffa87825b000e47294e9ec05e223126/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f933e0971bbe85d8dbe938e46b73fc9b0375317f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f933e0971bbe85d8dbe938e46b73fc9b0375317f", "html_url": "https://github.com/rust-lang/rust/commit/f933e0971bbe85d8dbe938e46b73fc9b0375317f"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "4693cf7181e94064eef936e056118ab6346cbad0", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=ddc63ce19ffa87825b000e47294e9ec05e223126", "patch": "@@ -23,6 +23,7 @@\n \n use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{ConstVariableOrigin, ConstVariableOriginKind};\n+use crate::infer::region_constraints::PickConstraint;\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_macros::HashStable;\n@@ -197,13 +198,14 @@ pub struct QueryResponse<'tcx, R> {\n #[derive(Clone, Debug, Default, HashStable)]\n pub struct QueryRegionConstraints<'tcx> {\n     pub outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n+    pub pick_constraints: Vec<PickConstraint<'tcx>>,\n }\n \n impl QueryRegionConstraints<'_> {\n     /// Represents an empty (trivially true) set of region\n     /// constraints.\n     pub fn is_empty(&self) -> bool {\n-        self.outlives.is_empty()\n+        self.outlives.is_empty() && self.pick_constraints.is_empty()\n     }\n }\n \n@@ -555,14 +557,14 @@ BraceStructLiftImpl! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for QueryRegionConstraints<'tcx> {\n-        outlives\n+        outlives, pick_constraints\n     }\n }\n \n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for QueryRegionConstraints<'a> {\n         type Lifted = QueryRegionConstraints<'tcx>;\n-        outlives\n+        outlives, pick_constraints\n     }\n }\n "}, {"sha": "02a5005be7604f6d7fe118342dc3366cb4d01c23", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=ddc63ce19ffa87825b000e47294e9ec05e223126", "patch": "@@ -340,7 +340,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 let r_c = substitute_value(self.tcx, &result_subst, r_c);\n \n                 // Screen out `'a: 'a` cases -- we skip the binder here but\n-                // only care the inner values to one another, so they are still at\n+                // only compare the inner values to one another, so they are still at\n                 // consistent binding levels.\n                 let &ty::OutlivesPredicate(k1, r2) = r_c.skip_binder();\n                 if k1 != r2.into() {\n@@ -351,6 +351,13 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             })\n         );\n \n+        // ...also include the query pick constraints.\n+        output_query_region_constraints.pick_constraints.extend(\n+            query_response.value.region_constraints.pick_constraints.iter().map(|p_c| {\n+                substitute_value(self.tcx, &result_subst, p_c)\n+            })\n+        );\n+\n         let user_result: R =\n             query_response.substitute_projected(self.tcx, &result_subst, |q_r| &q_r.value);\n \n@@ -662,9 +669,6 @@ pub fn make_query_region_constraints<'tcx>(\n     assert!(verifys.is_empty());\n     assert!(givens.is_empty());\n \n-    // FIXME(ndm) -- we have to think about what to do here, perhaps\n-    assert!(pick_constraints.is_empty());\n-\n     let outlives: Vec<_> = constraints\n         .into_iter()\n         .map(|(k, _)| match *k {\n@@ -690,5 +694,5 @@ pub fn make_query_region_constraints<'tcx>(\n         )\n         .collect();\n \n-    QueryRegionConstraints { outlives }\n+    QueryRegionConstraints { outlives, pick_constraints: pick_constraints.clone() }\n }"}, {"sha": "a56c71b2b1f78d7e58a4b36eaa63d44485b4016f", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ddc63ce19ffa87825b000e47294e9ec05e223126", "patch": "@@ -150,7 +150,7 @@ impl Constraint<'_> {\n /// ```\n /// pick R0 from [O1..On]\n /// ```\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, HashStable)]\n pub struct PickConstraint<'tcx> {\n     /// the def-id of the opaque type causing this constraint: used for error reporting\n     pub opaque_type_def_id: DefId,\n@@ -165,6 +165,19 @@ pub struct PickConstraint<'tcx> {\n     pub option_regions: Rc<Vec<Region<'tcx>>>,\n }\n \n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for PickConstraint<'tcx> {\n+        opaque_type_def_id, hidden_ty, pick_region, option_regions\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for PickConstraint<'a> {\n+        type Lifted = PickConstraint<'tcx>;\n+        opaque_type_def_id, hidden_ty, pick_region, option_regions\n+    }\n+}\n+\n /// `VerifyGenericBound(T, _, R, RS)`: the parameter type `T` (or\n /// associated type) must outlive the region `R`. `T` is known to\n /// outlive `RS`. Therefore, verify that `R <= RS[i]` for some"}, {"sha": "74970ebe081297317bcbb2786518db0c032034bf", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=ddc63ce19ffa87825b000e47294e9ec05e223126", "patch": "@@ -378,6 +378,13 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Box<T> {\n     }\n }\n \n+impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Rc<T> {\n+    type Lifted = Rc<T::Lifted>;\n+    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        tcx.lift(&**self).map(Rc::new)\n+    }\n+}\n+\n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n     type Lifted = Vec<T::Lifted>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {"}, {"sha": "e92a10f6d48ef32a4c97b877476fbeb2713ed669", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=ddc63ce19ffa87825b000e47294e9ec05e223126", "patch": "@@ -288,7 +288,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n         }\n \n         for data in constraint_sets {\n-            let QueryRegionConstraints { outlives } = &*data;\n+            let QueryRegionConstraints { outlives, pick_constraints: _ } = &*data; // TODO\n             constraint_conversion::ConstraintConversion::new(\n                 self.infcx,\n                 &self.universal_regions,"}, {"sha": "def4132295d51021d5c8b2a0d15dd7cfbdcd35db", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc63ce19ffa87825b000e47294e9ec05e223126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=ddc63ce19ffa87825b000e47294e9ec05e223126", "patch": "@@ -1100,7 +1100,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             locations, data\n         );\n \n-        let QueryRegionConstraints { outlives } = data;\n+        let QueryRegionConstraints { outlives, pick_constraints: _ } = data; // TODO\n \n         constraint_conversion::ConstraintConversion::new(\n             self.infcx,\n@@ -2511,7 +2511,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     ) -> ty::InstantiatedPredicates<'tcx> {\n         if let Some(closure_region_requirements) = tcx.mir_borrowck(def_id).closure_requirements {\n             let closure_constraints = QueryRegionConstraints {\n-                outlives: closure_region_requirements.apply_requirements(tcx, def_id, substs)\n+                outlives: closure_region_requirements.apply_requirements(tcx, def_id, substs),\n+                pick_constraints: vec![], // TODO\n             };\n \n             let bounds_mapping = closure_constraints"}]}