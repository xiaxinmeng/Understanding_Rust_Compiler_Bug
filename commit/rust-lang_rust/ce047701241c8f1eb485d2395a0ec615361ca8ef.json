{"sha": "ce047701241c8f1eb485d2395a0ec615361ca8ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMDQ3NzAxMjQxYzhmMWViNDg1ZDIzOTVhMGVjNjE1MzYxY2E4ZWY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-25T14:31:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-25T14:31:43Z"}, "message": "Merge pull request #951 from bjorn3/simd_improvements\n\nSimd improvements", "tree": {"sha": "c139e6b5c88844f646df429eaa7f59771249241c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c139e6b5c88844f646df429eaa7f59771249241c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce047701241c8f1eb485d2395a0ec615361ca8ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHEJPCRBK7hj4Ov3rIwAAdHIIAFTNfSmuMdFz6juzX3+5/HJp\nRygEOaEd4kAcmxiDA/pFWqO7stBrNLhMmpI2lIthAf6a1+gQhNofxF/oQJ3Sylek\nvlfz4QfaTXfd+6mTdeurhBnv/AI8jPE1oZcmz5Z6J1CYTaIExqVucyx56yw/DXYd\nDz/5EqQB3lKW4BUTZZPQ1H3MvJIszMHdJ/IfBs16GfpyAnI39xAogqL2xQ7oannH\n66WP9QsPuZiQZbB8+DrDfRpDOSPfX0/0DYwEiMcNnGV+zk7r2J1iqW3TA34EPDvD\nep98jtR29pYxU6Pfgqs4cZv0LNukCwNHjCKuNV/rpen6qbtvFeNYukgSlGo4NI0=\n=/P84\n-----END PGP SIGNATURE-----\n", "payload": "tree c139e6b5c88844f646df429eaa7f59771249241c\nparent 66343bf4fc986332dc355dc922a7d68f84e5fd97\nparent e02ffdf7956b3a36b2e45ada9e8dc2e3ab302c4f\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1595687503 +0200\ncommitter GitHub <noreply@github.com> 1595687503 +0200\n\nMerge pull request #951 from bjorn3/simd_improvements\n\nSimd improvements"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce047701241c8f1eb485d2395a0ec615361ca8ef", "html_url": "https://github.com/rust-lang/rust/commit/ce047701241c8f1eb485d2395a0ec615361ca8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce047701241c8f1eb485d2395a0ec615361ca8ef/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66343bf4fc986332dc355dc922a7d68f84e5fd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/66343bf4fc986332dc355dc922a7d68f84e5fd97", "html_url": "https://github.com/rust-lang/rust/commit/66343bf4fc986332dc355dc922a7d68f84e5fd97"}, {"sha": "e02ffdf7956b3a36b2e45ada9e8dc2e3ab302c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e02ffdf7956b3a36b2e45ada9e8dc2e3ab302c4f", "html_url": "https://github.com/rust-lang/rust/commit/e02ffdf7956b3a36b2e45ada9e8dc2e3ab302c4f"}], "stats": {"total": 122, "additions": 94, "deletions": 28}, "files": [{"sha": "357c28c832a956f1996f6528ed35d751bbe4f3e7", "filename": "src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -82,6 +82,7 @@ pub(super) fn add_local_place_comments<'tcx>(\n             assert_eq!(local, place_local);\n             (\"ssa\", Cow::Owned(format!(\",var=({}, {})\", var1.index(), var2.index())))\n         }\n+        CPlaceInner::VarLane(_local, _var, _lane) => unreachable!(),\n         CPlaceInner::Addr(ptr, meta) => {\n             let meta = if let Some(meta) = meta {\n                 Cow::Owned(format!(\",meta={}\", meta))"}, {"sha": "02604a375720176d3ff844bc7f2a88d60c48793f", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -100,7 +100,13 @@ pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>)\n             }\n \n             // FIXME implement Vector Abi in a cg_llvm compatible way\n-            Abi::Vector { .. } => PassMode::ByRef { size: Some(layout.size) },\n+            Abi::Vector { .. } => {\n+                if let Some(vector_ty) = crate::intrinsics::clif_vector_type(tcx, layout) {\n+                    PassMode::ByVal(vector_ty)\n+                } else {\n+                    PassMode::ByRef { size: Some(layout.size) }\n+                }\n+            }\n \n             Abi::Aggregate { sized: true } => PassMode::ByRef { size: Some(layout.size) },\n             Abi::Aggregate { sized: false } => PassMode::ByRef { size: None },"}, {"sha": "421315810886388af09a62c2ebc4d4c819d35f0c", "filename": "src/common.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -62,6 +62,18 @@ fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Typ\n                 pointer_ty(tcx)\n             }\n         }\n+        ty::Adt(adt_def, _) if adt_def.repr.simd() => {\n+            let (element, count) = match &tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap().abi {\n+                Abi::Vector { element, count } => (element.clone(), *count),\n+                _ => unreachable!(),\n+            };\n+\n+            match scalar_to_clif_type(tcx, element).by(u16::try_from(count).unwrap()) {\n+                // Cranelift currently only implements icmp for 128bit vectors.\n+                Some(vector_ty) if vector_ty.bits() == 128 => vector_ty,\n+                _ => return None,\n+            }\n+        }\n         ty::Param(_) => bug!(\"ty param {:?}\", ty),\n         _ => return None,\n     })\n@@ -71,10 +83,12 @@ fn clif_pair_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<(type\n     Some(match ty.kind {\n         ty::Tuple(substs) if substs.len() == 2 => {\n             let mut types = substs.types();\n-            (\n-                clif_type_from_ty(tcx, types.next().unwrap())?,\n-                clif_type_from_ty(tcx, types.next().unwrap())?,\n-            )\n+            let a = clif_type_from_ty(tcx, types.next().unwrap())?;\n+            let b = clif_type_from_ty(tcx, types.next().unwrap())?;\n+            if a.is_vector() || b.is_vector() {\n+                return None;\n+            }\n+            (a, b)\n         }\n         ty::RawPtr(TypeAndMut { ty: pointee_ty, mutbl: _ }) | ty::Ref(_, pointee_ty, _) => {\n             if has_ptr_meta(tcx, pointee_ty) {"}, {"sha": "2c92fd0e47cc30018376216d43a4d93f90d2778a", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -411,6 +411,11 @@ fn place_location<'tcx>(\n \n             AttributeValue::Exprloc(Expression::new())\n         }\n+        CPlaceInner::VarLane(_, _, _) => {\n+            // FIXME implement this\n+\n+            AttributeValue::Exprloc(Expression::new())\n+        }\n         CPlaceInner::Addr(_, _) => {\n             // FIXME implement this (used by arguments and returns)\n "}, {"sha": "546864fc477526ead7a77a56296e95d4b4e40bbf", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -175,17 +175,15 @@ fn lane_type_and_count<'tcx>(\n     (lane_layout, lane_count)\n }\n \n-fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Option<Type> {\n+pub(crate) fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Option<Type> {\n     let (element, count) = match &layout.abi {\n         Abi::Vector { element, count } => (element.clone(), *count),\n         _ => unreachable!(),\n     };\n \n     match scalar_to_clif_type(tcx, element).by(u16::try_from(count).unwrap()) {\n-        // Cranelift currently only implements icmp for 128bit vectors. While 64bit lanes are\n-        // supported, this needs either the `use_sse41_simd` or `use_sse42_simd` target flag\n-        // to be enabled.\n-        Some(vector_ty) if vector_ty.bits() == 128 && vector_ty.lane_type() != types::I64 => Some(vector_ty),\n+        // Cranelift currently only implements icmp for 128bit vectors.\n+        Some(vector_ty) if vector_ty.bits() == 128 => Some(vector_ty),\n         _ => None,\n     }\n }"}, {"sha": "38ff7e90b3b1135d9816b930fc954ad03d88e355", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -299,6 +299,8 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n     };\n     flags_builder.set(\"tls_model\", tls_model).unwrap();\n \n+    flags_builder.set(\"enable_simd\", \"true\").unwrap();\n+\n     // FIXME(CraneStation/cranelift#732) fix LICM in presence of jump tables\n     /*\n     use rustc_session::config::OptLevel;\n@@ -316,9 +318,12 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n     }*/\n \n     let flags = settings::Flags::new(flags_builder);\n-    cranelift_codegen::isa::lookup(target_triple)\n-        .unwrap()\n-        .finish(flags)\n+\n+    let mut isa_builder = cranelift_codegen::isa::lookup(target_triple).unwrap();\n+    // Don't use \"haswell\", as it implies `has_lzcnt`.macOS CI is still at Ivy Bridge EP, so `lzcnt`\n+    // is interpreted as `bsr`.\n+    isa_builder.enable(\"nehalem\").unwrap();\n+    isa_builder.finish(flags)\n }\n \n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift"}, {"sha": "64346c423c8af6732cbf459f13101b2790679183", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -248,7 +248,8 @@ pub(crate) fn write_clif_file<'tcx>(\n             let target_triple = crate::target_triple(tcx.sess);\n             writeln!(file, \"test compile\").unwrap();\n             writeln!(file, \"set is_pic\").unwrap();\n-            writeln!(file, \"target {}\", target_triple).unwrap();\n+            writeln!(file, \"set enable_simd\").unwrap();\n+            writeln!(file, \"target {} haswell\", target_triple).unwrap();\n             writeln!(file, \"\").unwrap();\n             file.write(clif.as_bytes()).unwrap();\n         }"}, {"sha": "d0e8a4b0c9f24ed395bee58ee5030af4eca86cd7", "filename": "src/value_and_place.rs", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce047701241c8f1eb485d2395a0ec615361ca8ef/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=ce047701241c8f1eb485d2395a0ec615361ca8ef", "patch": "@@ -272,6 +272,7 @@ pub(crate) struct CPlace<'tcx> {\n pub(crate) enum CPlaceInner {\n     Var(Local, Variable),\n     VarPair(Local, Variable, Variable),\n+    VarLane(Local, Variable, u8),\n     Addr(Pointer, Option<Value>),\n }\n \n@@ -374,6 +375,12 @@ impl<'tcx> CPlace<'tcx> {\n                 fx.bcx.set_val_label(val2, cranelift_codegen::ir::ValueLabel::new(var2.index()));\n                 CValue::by_val_pair(val1, val2, layout)\n             }\n+            CPlaceInner::VarLane(_local, var, lane) => {\n+                let val = fx.bcx.use_var(var);\n+                fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                let val = fx.bcx.ins().extractlane(val, lane);\n+                CValue::by_val(val, layout)\n+            }\n             CPlaceInner::Addr(ptr, extra) => {\n                 if let Some(extra) = extra {\n                     CValue::by_ref_unsized(ptr, extra, layout)\n@@ -395,7 +402,8 @@ impl<'tcx> CPlace<'tcx> {\n         match self.inner {\n             CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n             CPlaceInner::Var(_, _)\n-            | CPlaceInner::VarPair(_, _, _) => bug!(\"Expected CPlace::Addr, found {:?}\", self),\n+            | CPlaceInner::VarPair(_, _, _)\n+            | CPlaceInner::VarLane(_, _, _) => bug!(\"Expected CPlace::Addr, found {:?}\", self),\n         }\n     }\n \n@@ -527,6 +535,22 @@ impl<'tcx> CPlace<'tcx> {\n                 transmute_value(fx, var2, data2, dst_ty2);\n                 return;\n             }\n+            CPlaceInner::VarLane(_local, var, lane) => {\n+                let data = from.load_scalar(fx);\n+\n+                // First get the old vector\n+                let vector = fx.bcx.use_var(var);\n+                fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+\n+                // Next insert the written lane into the vector\n+                let vector = fx.bcx.ins().insertlane(vector, data, lane);\n+\n+                // Finally write the new vector\n+                fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                fx.bcx.def_var(var, vector);\n+\n+                return;\n+            }\n             CPlaceInner::Addr(ptr, None) => {\n                 if dst_layout.size == Size::ZERO || dst_layout.abi == Abi::Uninhabited {\n                     return;\n@@ -590,20 +614,32 @@ impl<'tcx> CPlace<'tcx> {\n         field: mir::Field,\n     ) -> CPlace<'tcx> {\n         let layout = self.layout();\n-        if let CPlaceInner::VarPair(local, var1, var2) = self.inner {\n-            let layout = layout.field(&*fx, field.index());\n-\n-            match field.as_u32() {\n-                0 => return CPlace {\n-                    inner: CPlaceInner::Var(local, var1),\n-                    layout,\n-                },\n-                1 => return CPlace {\n-                    inner: CPlaceInner::Var(local, var2),\n-                    layout,\n-                },\n-                _ => unreachable!(\"field should be 0 or 1\"),\n+\n+        match self.inner {\n+            CPlaceInner::Var(local, var) => {\n+                if let Abi::Vector { .. } = layout.abi {\n+                    return CPlace {\n+                        inner: CPlaceInner::VarLane(local, var, field.as_u32().try_into().unwrap()),\n+                        layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n+                    };\n+                }\n+            }\n+            CPlaceInner::VarPair(local, var1, var2) => {\n+                let layout = layout.field(&*fx, field.index());\n+\n+                match field.as_u32() {\n+                    0 => return CPlace {\n+                        inner: CPlaceInner::Var(local, var1),\n+                        layout,\n+                    },\n+                    1 => return CPlace {\n+                        inner: CPlaceInner::Var(local, var2),\n+                        layout,\n+                    },\n+                    _ => unreachable!(\"field should be 0 or 1\"),\n+                }\n             }\n+            _ => {}\n         }\n \n         let (base, extra) = self.to_ptr_maybe_unsized();"}]}