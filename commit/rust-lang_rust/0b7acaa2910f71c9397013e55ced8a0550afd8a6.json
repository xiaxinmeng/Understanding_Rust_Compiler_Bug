{"sha": "0b7acaa2910f71c9397013e55ced8a0550afd8a6", "node_id": "C_kwDOAAsO6NoAKDBiN2FjYWEyOTEwZjcxYzkzOTcwMTNlNTVjZWQ4YTA1NTBhZmQ4YTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-06T11:30:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T11:30:04Z"}, "message": "Rollup merge of #110989 - jyn514:bug-report-url, r=WaffleLapkin\n\nMake the BUG_REPORT_URL configurable by tools\n\nThis greatly simplifies how hard it is to set a custom bug report url; previously tools had to copy\nthe entire hook implementation.\n\nI haven't changed clippy in case they want to make the change upstream instead of the subtree, but\nI'm happy to do so here if the maintainers want - cc ````@rust-lang/clippy````\n\nFixes https://github.com/rust-lang/rust/issues/109486.", "tree": {"sha": "414177f11016ee761058a1470a11224442755e9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414177f11016ee761058a1470a11224442755e9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7acaa2910f71c9397013e55ced8a0550afd8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7acaa2910f71c9397013e55ced8a0550afd8a6", "html_url": "https://github.com/rust-lang/rust/commit/0b7acaa2910f71c9397013e55ced8a0550afd8a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7acaa2910f71c9397013e55ced8a0550afd8a6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5889ecd14fb57a2643656ddcb45a25434fbd7328", "url": "https://api.github.com/repos/rust-lang/rust/commits/5889ecd14fb57a2643656ddcb45a25434fbd7328", "html_url": "https://github.com/rust-lang/rust/commit/5889ecd14fb57a2643656ddcb45a25434fbd7328"}, {"sha": "a233bd5e66f1846adf67ba3eb47a830f35f5bb5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a233bd5e66f1846adf67ba3eb47a830f35f5bb5a", "html_url": "https://github.com/rust-lang/rust/commit/a233bd5e66f1846adf67ba3eb47a830f35f5bb5a"}], "stats": {"total": 70, "additions": 9, "deletions": 61}, "files": [{"sha": "59bf447a7cd0758c9961b1cc826b4d4498dc487b", "filename": "src/driver.rs", "status": "modified", "additions": 9, "deletions": 61, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0b7acaa2910f71c9397013e55ced8a0550afd8a6/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7acaa2910f71c9397013e55ced8a0550afd8a6/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0b7acaa2910f71c9397013e55ced8a0550afd8a6", "patch": "@@ -11,7 +11,6 @@\n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n extern crate rustc_driver;\n-extern crate rustc_errors;\n extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_span;\n@@ -20,13 +19,10 @@ use rustc_interface::interface;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Symbol;\n \n-use std::borrow::Cow;\n use std::env;\n use std::ops::Deref;\n-use std::panic;\n use std::path::Path;\n use std::process::exit;\n-use std::sync::LazyLock;\n \n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n /// true, then return it. The parameter is assumed to be either `--arg=value` or `--arg value`.\n@@ -198,66 +194,18 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n \n-type PanicCallback = dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static;\n-static ICE_HOOK: LazyLock<Box<PanicCallback>> = LazyLock::new(|| {\n-    let hook = panic::take_hook();\n-    panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n-    hook\n-});\n-\n-fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n-    // Invoke our ICE handler, which prints the actual panic message and optionally a backtrace\n-    (*ICE_HOOK)(info);\n-\n-    // Separate the output with an empty line\n-    eprintln!();\n-\n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n-    let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n-        rustc_errors::ColorConfig::Auto,\n-        None,\n-        None,\n-        fallback_bundle,\n-        false,\n-        false,\n-        None,\n-        false,\n-        false,\n-        rustc_errors::TerminalUrl::No,\n-    ));\n-    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n-\n-    // a .span_bug or .bug call has already printed what\n-    // it wants to print.\n-    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n-        let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n-        handler.emit_diagnostic(&mut d);\n-    }\n-\n-    let version_info = rustc_tools_util::get_version_info!();\n-\n-    let xs: Vec<Cow<'static, str>> = vec![\n-        \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-        format!(\"we would appreciate a bug report: {bug_report_url}\").into(),\n-        format!(\"Clippy version: {version_info}\").into(),\n-    ];\n-\n-    for note in &xs {\n-        handler.note_without_error(note.as_ref());\n-    }\n-\n-    // If backtraces are enabled, also print the query stack\n-    let backtrace = env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n-\n-    let num_frames = if backtrace { None } else { Some(2) };\n-\n-    interface::try_print_query_stack(&handler, num_frames);\n-}\n-\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n-    LazyLock::force(&ICE_HOOK);\n+\n+    rustc_driver::install_ice_hook(BUG_REPORT_URL, |handler| {\n+        // FIXME: this macro calls unwrap internally but is called in a panicking context!  It's not\n+        // as simple as moving the call from the hook to main, because `install_ice_hook` doesn't\n+        // accept a generic closure.\n+        let version_info = rustc_tools_util::get_version_info!();\n+        handler.note_without_error(format!(\"Clippy version: {version_info}\"));\n+    });\n+\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n         let has_sysroot_arg = arg_value(&orig_args, \"--sysroot\", |_| true).is_some();"}]}