{"sha": "f9abd998d6a5368c54162deb0bf187e94e31dc27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YWJkOTk4ZDZhNTM2OGM1NDE2MmRlYjBiZjE4N2U5NGUzMWRjMjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-05T23:48:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-10T09:37:11Z"}, "message": "Add bindings to uv's utime function\n\nThis exposes the ability to change the modification and access times on a file.\n\nCloses #10266", "tree": {"sha": "28e04136e84956a1156eab73b65bf1debd1a4c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e04136e84956a1156eab73b65bf1debd1a4c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9abd998d6a5368c54162deb0bf187e94e31dc27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9abd998d6a5368c54162deb0bf187e94e31dc27", "html_url": "https://github.com/rust-lang/rust/commit/f9abd998d6a5368c54162deb0bf187e94e31dc27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9abd998d6a5368c54162deb0bf187e94e31dc27/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497d63f0bcc6436ae5a5f824946caca8f6d6fb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/497d63f0bcc6436ae5a5f824946caca8f6d6fb53", "html_url": "https://github.com/rust-lang/rust/commit/497d63f0bcc6436ae5a5f824946caca8f6d6fb53"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "45f4125d7920214fac85a28a476f9a66fa6b22cb", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=f9abd998d6a5368c54162deb0bf187e94e31dc27", "patch": "@@ -237,6 +237,16 @@ impl FsRequest {\n         })\n     }\n \n+    pub fn utime(loop_: &Loop, path: &CString, atime: u64, mtime: u64)\n+        -> Result<(), UvError>\n+    {\n+        execute_nop(|req, cb| unsafe {\n+            uvll::uv_fs_utime(loop_.handle, req, path.with_ref(|p| p),\n+                              atime as libc::c_double, mtime as libc::c_double,\n+                              cb)\n+        })\n+    }\n+\n     pub fn get_result(&self) -> c_int {\n         unsafe { uvll::get_result_from_fs_req(self.req) }\n     }"}, {"sha": "2aac43072dd01548f2e4d102c9357f3a53f1dd03", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=f9abd998d6a5368c54162deb0bf187e94e31dc27", "patch": "@@ -313,6 +313,12 @@ impl IoFactory for UvIoFactory {\n         let r = FsRequest::readlink(self.uv_loop(), path);\n         r.map_err(uv_error_to_io_error)\n     }\n+    fn fs_utime(&mut self, path: &CString, atime: u64, mtime: u64)\n+        -> Result<(), IoError>\n+    {\n+        let r = FsRequest::utime(self.uv_loop(), path, atime, mtime);\n+        r.map_err(uv_error_to_io_error)\n+    }\n \n     fn spawn(&mut self, config: ProcessConfig)\n             -> Result<(~RtioProcess, ~[Option<~RtioPipe>]), IoError>"}, {"sha": "09a1f8f37bdfad30bcbdbe49e9d727ac825f5750", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=f9abd998d6a5368c54162deb0bf187e94e31dc27", "patch": "@@ -29,7 +29,7 @@\n \n #[allow(non_camel_case_types)]; // C types\n \n-use std::libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t};\n+use std::libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t, c_double};\n use std::libc::ssize_t;\n use std::libc::{malloc, free};\n use std::libc;\n@@ -824,6 +824,9 @@ externfn!(fn uv_fs_symlink(handle: *uv_loop_t, req: *uv_fs_t, src: *c_char,\n                            dst: *c_char, flags: c_int, cb: uv_fs_cb) -> c_int)\n externfn!(fn uv_fs_rename(handle: *uv_loop_t, req: *uv_fs_t, src: *c_char,\n                           dst: *c_char, cb: uv_fs_cb) -> c_int)\n+externfn!(fn uv_fs_utime(handle: *uv_loop_t, req: *uv_fs_t, path: *c_char,\n+                         atime: c_double, mtime: c_double,\n+                         cb: uv_fs_cb) -> c_int)\n externfn!(fn uv_fs_link(handle: *uv_loop_t, req: *uv_fs_t, src: *c_char,\n                         dst: *c_char, cb: uv_fs_cb) -> c_int)\n externfn!(fn uv_fs_chown(handle: *uv_loop_t, req: *uv_fs_t, src: *c_char,"}, {"sha": "f9e622b1f1e968e2f326dd0585b5998fab93aefa", "filename": "src/libstd/rt/io/fs.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibstd%2Frt%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibstd%2Frt%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffs.rs?ref=f9abd998d6a5368c54162deb0bf187e94e31dc27", "patch": "@@ -587,6 +587,21 @@ pub fn rmdir_recursive(path: &Path) {\n     rmdir(path);\n }\n \n+/// Changes the timestamps for a file's last modification and access time.\n+/// The file at the path specified will have its last access time set to\n+/// `atime` and its modification time set to `mtime`.\n+///\n+/// # Errors\n+///\n+/// This function will raise on the `io_error` condition if an error\n+/// happens.\n+// FIXME(#10301) these arguments should not be u64\n+pub fn change_file_times(path: &Path, atime: u64, mtime: u64) {\n+    do io_raise |io| {\n+        io.fs_utime(&path.to_c_str(), atime, mtime)\n+    };\n+}\n+\n impl Reader for File {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n         match self.fd.read(buf) {\n@@ -704,8 +719,8 @@ mod test {\n     use rt::io;\n     use str;\n     use super::{File, rmdir, mkdir, readdir, rmdir_recursive, mkdir_recursive,\n-                copy, unlink, stat, symlink, link, readlink, chmod, chown,\n-                lstat};\n+                copy, unlink, stat, symlink, link, readlink, chmod,\n+                lstat, change_file_times};\n \n     fn tmpdir() -> Path {\n         use os;\n@@ -1244,4 +1259,29 @@ mod test {\n \n         rmdir_recursive(&tmpdir);\n     }\n+\n+    #[test]\n+    fn utime() {\n+        let tmpdir = tmpdir();\n+        let path = tmpdir.join(\"a\");\n+        File::create(&path);\n+\n+        change_file_times(&path, 100, 200);\n+        assert_eq!(path.stat().accessed, 100);\n+        assert_eq!(path.stat().modified, 200);\n+\n+        rmdir_recursive(&tmpdir);\n+    }\n+\n+    #[test]\n+    fn utime_noexist() {\n+        let tmpdir = tmpdir();\n+\n+        match io::result(|| change_file_times(&tmpdir.join(\"a\"), 100, 200)) {\n+            Ok(*) => fail!(),\n+            Err(*) => {}\n+        }\n+\n+        rmdir_recursive(&tmpdir);\n+    }\n }"}, {"sha": "e8ab4670233e3529faf9712db8472b3c6329cf0e", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=f9abd998d6a5368c54162deb0bf187e94e31dc27", "patch": "@@ -1142,8 +1142,9 @@ pub struct FileStat {\n     /// The file permissions currently on the file\n     perm: FilePermission,\n \n-    // XXX: These time fields are pretty useless without an actual time\n-    //      representation, what are the milliseconds relative to?\n+    // FIXME(#10301): These time fields are pretty useless without an actual\n+    //                time representation, what are the milliseconds relative\n+    //                to?\n \n     /// The time that the file was created at, in platform-dependent\n     /// milliseconds"}, {"sha": "96ba512345614a490195072beede31b285eda920", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9abd998d6a5368c54162deb0bf187e94e31dc27/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=f9abd998d6a5368c54162deb0bf187e94e31dc27", "patch": "@@ -125,6 +125,8 @@ pub trait IoFactory {\n     fn fs_readlink(&mut self, path: &CString) -> Result<Path, IoError>;\n     fn fs_symlink(&mut self, src: &CString, dst: &CString) -> Result<(), IoError>;\n     fn fs_link(&mut self, src: &CString, dst: &CString) -> Result<(), IoError>;\n+    fn fs_utime(&mut self, src: &CString, atime: u64, mtime: u64) ->\n+        Result<(), IoError>;\n \n     // misc\n     fn timer_init(&mut self) -> Result<~RtioTimer, IoError>;"}]}