{"sha": "14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd", "node_id": "C_kwDOAAsO6NoAKDE0ZTAzOTBmZGZmZTg3ZmI4YmVhYzhiOWVkNmE2ZWRmNDNiNTdmYmQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-24T21:19:59Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-01T15:47:34Z"}, "message": "Account for revisions in missing-test-files", "tree": {"sha": "82936dbcb6877c45b28100fb679b6ee871c0b508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82936dbcb6877c45b28100fb679b6ee871c0b508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd", "html_url": "https://github.com/rust-lang/rust/commit/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5f99ab58afc53f208f31db2e1d664efe679ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5f99ab58afc53f208f31db2e1d664efe679ce2", "html_url": "https://github.com/rust-lang/rust/commit/7e5f99ab58afc53f208f31db2e1d664efe679ce2"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "7d6edc2b1e095fb1cb59e81cca7b28bba7f44497", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd", "patch": "@@ -1,7 +1,10 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n #![allow(clippy::assertions_on_constants)]\n+#![feature(path_file_prefix)]\n \n+use std::cmp::Ordering;\n+use std::ffi::OsStr;\n use std::fs::{self, DirEntry};\n use std::path::Path;\n \n@@ -21,29 +24,39 @@ fn test_missing_tests() {\n     }\n }\n \n-/*\n-Test for missing files.\n-\n-Since rs files are alphabetically before stderr/stdout, we can sort by the full name\n-and iter in that order. If we've seen the file stem for the first time and it's not\n-a rust file, it means the rust file has to be missing.\n-*/\n+// Test for missing files.\n fn explore_directory(dir: &Path) -> Vec<String> {\n     let mut missing_files: Vec<String> = Vec::new();\n     let mut current_file = String::new();\n     let mut files: Vec<DirEntry> = fs::read_dir(dir).unwrap().filter_map(Result::ok).collect();\n-    files.sort_by_key(std::fs::DirEntry::path);\n+    files.sort_by(|x, y| {\n+        match x.path().file_prefix().cmp(&y.path().file_prefix()) {\n+            Ordering::Equal => (),\n+            ord => return ord,\n+        }\n+        // Sort rs files before the others if they share the same prefix. So when we see\n+        // the file prefix for the first time and it's not a rust file, it means the rust\n+        // file has to be missing.\n+        match (\n+            x.path().extension().and_then(OsStr::to_str),\n+            y.path().extension().and_then(OsStr::to_str),\n+        ) {\n+            (Some(\"rs\"), _) => Ordering::Less,\n+            (_, Some(\"rs\")) => Ordering::Greater,\n+            _ => Ordering::Equal,\n+        }\n+    });\n     for entry in &files {\n         let path = entry.path();\n         if path.is_dir() {\n             missing_files.extend(explore_directory(&path));\n         } else {\n-            let file_stem = path.file_stem().unwrap().to_str().unwrap().to_string();\n+            let file_prefix = path.file_prefix().unwrap().to_str().unwrap().to_string();\n             if let Some(ext) = path.extension() {\n                 match ext.to_str().unwrap() {\n-                    \"rs\" => current_file = file_stem.clone(),\n+                    \"rs\" => current_file = file_prefix.clone(),\n                     \"stderr\" | \"stdout\" => {\n-                        if file_stem != current_file {\n+                        if file_prefix != current_file {\n                             missing_files.push(path.to_str().unwrap().to_string());\n                         }\n                     },"}]}