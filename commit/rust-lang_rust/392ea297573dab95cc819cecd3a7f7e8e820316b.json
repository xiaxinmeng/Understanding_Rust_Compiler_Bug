{"sha": "392ea297573dab95cc819cecd3a7f7e8e820316b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MmVhMjk3NTczZGFiOTVjYzgxOWNlY2QzYTdmN2U4ZTgyMDMxNmI=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-28T18:12:45Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-29T12:58:03Z"}, "message": "Cast pointers to usize before passing them to atomic operations as some platforms do not support atomic operations on pointers.", "tree": {"sha": "5fed81f8fd62fd6feb837a0482dfa95166870637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fed81f8fd62fd6feb837a0482dfa95166870637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/392ea297573dab95cc819cecd3a7f7e8e820316b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/392ea297573dab95cc819cecd3a7f7e8e820316b", "html_url": "https://github.com/rust-lang/rust/commit/392ea297573dab95cc819cecd3a7f7e8e820316b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/392ea297573dab95cc819cecd3a7f7e8e820316b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fb037cc5f34368de069e8958ffc3a21036d091", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fb037cc5f34368de069e8958ffc3a21036d091", "html_url": "https://github.com/rust-lang/rust/commit/79fb037cc5f34368de069e8958ffc3a21036d091"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "72a64a8c5103467a4af39e574a34b9ffbb15756e", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/392ea297573dab95cc819cecd3a7f7e8e820316b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea297573dab95cc819cecd3a7f7e8e820316b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=392ea297573dab95cc819cecd3a7f7e8e820316b", "patch": "@@ -439,14 +439,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let ty = substs.type_at(0);\n                         if int_type_width_signed(ty, bx.tcx()).is_some() || ty.is_unsafe_ptr() {\n                             let weak = split[1] == \"cxchgweak\";\n-                            let pair = bx.atomic_cmpxchg(\n-                                args[0].immediate(),\n-                                args[1].immediate(),\n-                                args[2].immediate(),\n-                                order,\n-                                failorder,\n-                                weak,\n-                            );\n+                            let mut dst = args[0].immediate();\n+                            let mut cmp = args[1].immediate();\n+                            let mut src = args[2].immediate();\n+                            if ty.is_unsafe_ptr() {\n+                                // Some platforms do not support atomic operations on pointers,\n+                                // so we cast to integer first.\n+                                let ptr_llty = bx.type_ptr_to(bx.type_isize());\n+                                dst = bx.pointercast(dst, ptr_llty);\n+                                cmp = bx.ptrtoint(cmp, bx.type_isize());\n+                                src = bx.ptrtoint(src, bx.type_isize());\n+                            }\n+                            let pair = bx.atomic_cmpxchg(dst, cmp, src, order, failorder, weak);\n                             let val = bx.extract_value(pair, 0);\n                             let success = bx.extract_value(pair, 1);\n                             let val = bx.from_immediate(val);\n@@ -465,8 +469,22 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     \"load\" => {\n                         let ty = substs.type_at(0);\n                         if int_type_width_signed(ty, bx.tcx()).is_some() || ty.is_unsafe_ptr() {\n-                            let size = bx.layout_of(ty).size;\n-                            bx.atomic_load(args[0].immediate(), order, size)\n+                            let layout = bx.layout_of(ty);\n+                            let size = layout.size;\n+                            let mut source = args[0].immediate();\n+                            if ty.is_unsafe_ptr() {\n+                                // Some platforms do not support atomic operations on pointers,\n+                                // so we cast to integer first...\n+                                let ptr_llty = bx.type_ptr_to(bx.type_isize());\n+                                source = bx.pointercast(source, ptr_llty);\n+                            }\n+                            let result = bx.atomic_load(source, order, size);\n+                            if ty.is_unsafe_ptr() {\n+                                // ... and then cast the result back to a pointer\n+                                bx.inttoptr(result, bx.backend_type(layout))\n+                            } else {\n+                                result\n+                            }\n                         } else {\n                             return invalid_monomorphization(ty);\n                         }\n@@ -476,7 +494,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let ty = substs.type_at(0);\n                         if int_type_width_signed(ty, bx.tcx()).is_some() || ty.is_unsafe_ptr() {\n                             let size = bx.layout_of(ty).size;\n-                            bx.atomic_store(args[1].immediate(), args[0].immediate(), order, size);\n+                            let mut val = args[1].immediate();\n+                            let mut ptr = args[0].immediate();\n+                            if ty.is_unsafe_ptr() {\n+                                // Some platforms do not support atomic operations on pointers,\n+                                // so we cast to integer first.\n+                                let ptr_llty = bx.type_ptr_to(bx.type_isize());\n+                                ptr = bx.pointercast(ptr, ptr_llty);\n+                                val = bx.ptrtoint(val, bx.type_isize());\n+                            }\n+                            bx.atomic_store(val, ptr, order, size);\n                             return;\n                         } else {\n                             return invalid_monomorphization(ty);"}, {"sha": "be6c86b5176106789f36efabc17ec30bad675ef3", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/392ea297573dab95cc819cecd3a7f7e8e820316b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea297573dab95cc819cecd3a7f7e8e820316b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=392ea297573dab95cc819cecd3a7f7e8e820316b", "patch": "@@ -1201,7 +1201,10 @@ impl<T> AtomicPtr<T> {\n             }\n         }\n         #[cfg(not(bootstrap))]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n+        // SAFETY: This intrinsic is unsafe because it operates on a raw pointer\n+        // but we know for sure that the pointer is valid (we just got it from\n+        // an `UnsafeCell` that we have by reference) and the atomic operation\n+        // itself allows us to safely mutate the `UnsafeCell` contents.\n         unsafe {\n             atomic_compare_exchange_weak(self.p.get(), current, new, success, failure)\n         }"}]}