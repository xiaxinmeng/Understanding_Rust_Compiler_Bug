{"sha": "9c7f6d60b103e940f939f568ee2e06de6e914d09", "node_id": "C_kwDOAAsO6NoAKDljN2Y2ZDYwYjEwM2U5NDBmOTM5ZjU2OGVlMmUwNmRlNmU5MTRkMDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-19T17:00:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-19T17:00:15Z"}, "message": "Auto merge of #95112 - Dylan-DPC:rollup-0jo0loj, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93858 (Add a `process_group` method to UNIX `CommandExt`)\n - #94650 (Relax tests for Windows dos device names)\n - #94991 (Make Weak::new const)\n - #95072 (Re-enable parallel debuginfo tests)\n - #95109 (Extend --check-cfg tests to all predicate inside all/any)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "97c21e1ec248f19378f21f050e47757677328942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c21e1ec248f19378f21f050e47757677328942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7f6d60b103e940f939f568ee2e06de6e914d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7f6d60b103e940f939f568ee2e06de6e914d09", "html_url": "https://github.com/rust-lang/rust/commit/9c7f6d60b103e940f939f568ee2e06de6e914d09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7f6d60b103e940f939f568ee2e06de6e914d09/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31535841701e0bf7ef33998024376f2cedd8b3e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/31535841701e0bf7ef33998024376f2cedd8b3e3", "html_url": "https://github.com/rust-lang/rust/commit/31535841701e0bf7ef33998024376f2cedd8b3e3"}, {"sha": "22b4c40e38da17de8581004fb3cd2f12c0133a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/22b4c40e38da17de8581004fb3cd2f12c0133a14", "html_url": "https://github.com/rust-lang/rust/commit/22b4c40e38da17de8581004fb3cd2f12c0133a14"}], "stats": {"total": 239, "additions": 220, "deletions": 19}, "files": [{"sha": "ea651c075d9682639327ab40a1e4d44a544d5881", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -2112,9 +2112,10 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[rustc_const_unstable(feature = \"const_weak_new\", issue = \"95091\", reason = \"recently added\")]\n     #[must_use]\n-    pub fn new() -> Weak<T> {\n-        Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\") }\n+    pub const fn new() -> Weak<T> {\n+        Weak { ptr: unsafe { NonNull::new_unchecked(usize::MAX as *mut RcBox<T>) } }\n     }\n }\n "}, {"sha": "ba3187294e6543f4b8e4a4060d91ba9fd213457d", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -1742,9 +1742,10 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[rustc_const_unstable(feature = \"const_weak_new\", issue = \"95091\", reason = \"recently added\")]\n     #[must_use]\n-    pub fn new() -> Weak<T> {\n-        Weak { ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\") }\n+    pub const fn new() -> Weak<T> {\n+        Weak { ptr: unsafe { NonNull::new_unchecked(usize::MAX as *mut ArcInner<T>) } }\n     }\n }\n "}, {"sha": "d95bc9b15c9c42b98aa9ad46de9dbb7ad921e44c", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -149,6 +149,11 @@ pub trait CommandExt: Sealed {\n     fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n     where\n         S: AsRef<OsStr>;\n+\n+    /// Sets the process group ID of the child process. Translates to a `setpgid` call in the child\n+    /// process.\n+    #[unstable(feature = \"process_set_process_group\", issue = \"93857\")]\n+    fn process_group(&mut self, pgroup: i32) -> &mut process::Command;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -201,6 +206,11 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().set_arg_0(arg.as_ref());\n         self\n     }\n+\n+    fn process_group(&mut self, pgroup: i32) -> &mut process::Command {\n+        self.as_inner_mut().pgroup(pgroup);\n+        self\n+    }\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`] and"}, {"sha": "d1f59d2786e91f05f9f5cfbcb2f7208b5d938eda", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -1739,11 +1739,11 @@ fn test_windows_absolute() {\n     let relative = r\"a\\b\";\n     let mut expected = crate::env::current_dir().unwrap();\n     expected.push(relative);\n-    assert_eq!(absolute(relative).unwrap(), expected);\n+    assert_eq!(absolute(relative).unwrap().as_os_str(), expected.as_os_str());\n \n     macro_rules! unchanged(\n         ($path:expr) => {\n-            assert_eq!(absolute($path).unwrap(), Path::new($path));\n+            assert_eq!(absolute($path).unwrap().as_os_str(), Path::new($path).as_os_str());\n         }\n     );\n \n@@ -1759,11 +1759,11 @@ fn test_windows_absolute() {\n     // Verbatim paths are always unchanged, no matter what.\n     unchanged!(r\"\\\\?\\path.\\to/file..\");\n \n-    assert_eq!(absolute(r\"C:\\path..\\to.\\file.\").unwrap(), Path::new(r\"C:\\path..\\to\\file\"));\n-    assert_eq!(absolute(r\"C:\\path\\to\\COM1\").unwrap(), Path::new(r\"\\\\.\\COM1\"));\n-    assert_eq!(absolute(r\"C:\\path\\to\\COM1.txt\").unwrap(), Path::new(r\"\\\\.\\COM1\"));\n-    assert_eq!(absolute(r\"C:\\path\\to\\COM1  .txt\").unwrap(), Path::new(r\"\\\\.\\COM1\"));\n-    assert_eq!(absolute(r\"C:\\path\\to\\cOnOuT$\").unwrap(), Path::new(r\"\\\\.\\cOnOuT$\"));\n+    assert_eq!(\n+        absolute(r\"C:\\path..\\to.\\file.\").unwrap().as_os_str(),\n+        Path::new(r\"C:\\path..\\to\\file\").as_os_str()\n+    );\n+    assert_eq!(absolute(r\"COM1\").unwrap().as_os_str(), Path::new(r\"\\\\.\\COM1\").as_os_str());\n }\n \n #[bench]"}, {"sha": "27bee714f5b4317132db508fe916c7e194d05bc5", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -18,7 +18,7 @@ use crate::sys_common::IntoInner;\n #[cfg(not(target_os = \"fuchsia\"))]\n use crate::sys::fs::OpenOptions;\n \n-use libc::{c_char, c_int, gid_t, uid_t, EXIT_FAILURE, EXIT_SUCCESS};\n+use libc::{c_char, c_int, gid_t, pid_t, uid_t, EXIT_FAILURE, EXIT_SUCCESS};\n \n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"fuchsia\")] {\n@@ -82,6 +82,7 @@ pub struct Command {\n     stderr: Option<Stdio>,\n     #[cfg(target_os = \"linux\")]\n     create_pidfd: bool,\n+    pgroup: Option<pid_t>,\n }\n \n // Create a new type for argv, so that we can make it `Send` and `Sync`\n@@ -145,6 +146,7 @@ impl Command {\n             stdin: None,\n             stdout: None,\n             stderr: None,\n+            pgroup: None,\n         }\n     }\n \n@@ -167,6 +169,7 @@ impl Command {\n             stdout: None,\n             stderr: None,\n             create_pidfd: false,\n+            pgroup: None,\n         }\n     }\n \n@@ -202,6 +205,9 @@ impl Command {\n     pub fn groups(&mut self, groups: &[gid_t]) {\n         self.groups = Some(Box::from(groups));\n     }\n+    pub fn pgroup(&mut self, pgroup: pid_t) {\n+        self.pgroup = Some(pgroup);\n+    }\n \n     #[cfg(target_os = \"linux\")]\n     pub fn create_pidfd(&mut self, val: bool) {\n@@ -265,6 +271,10 @@ impl Command {\n     pub fn get_groups(&self) -> Option<&[gid_t]> {\n         self.groups.as_deref()\n     }\n+    #[allow(dead_code)]\n+    pub fn get_pgroup(&self) -> Option<pid_t> {\n+        self.pgroup\n+    }\n \n     pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {\n         &mut self.closures"}, {"sha": "9f1a645372f42b06f09552aa26244e55d415d822", "filename": "library/std/src/sys/unix/process/process_common/tests.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -67,3 +67,58 @@ fn test_process_mask() {\n         t!(cat.wait());\n     }\n }\n+\n+#[test]\n+#[cfg_attr(\n+    any(\n+        // See test_process_mask\n+        target_os = \"macos\",\n+        target_arch = \"arm\",\n+        target_arch = \"aarch64\",\n+        target_arch = \"riscv64\",\n+    ),\n+    ignore\n+)]\n+fn test_process_group_posix_spawn() {\n+    unsafe {\n+        // Spawn a cat subprocess that's just going to hang since there is no I/O.\n+        let mut cmd = Command::new(OsStr::new(\"cat\"));\n+        cmd.pgroup(0);\n+        cmd.stdin(Stdio::MakePipe);\n+        cmd.stdout(Stdio::MakePipe);\n+        let (mut cat, _pipes) = t!(cmd.spawn(Stdio::Null, true));\n+\n+        // Check that we can kill its process group, which means there *is* one.\n+        t!(cvt(libc::kill(-(cat.id() as libc::pid_t), libc::SIGINT)));\n+\n+        t!(cat.wait());\n+    }\n+}\n+\n+#[test]\n+#[cfg_attr(\n+    any(\n+        // See test_process_mask\n+        target_os = \"macos\",\n+        target_arch = \"arm\",\n+        target_arch = \"aarch64\",\n+        target_arch = \"riscv64\",\n+    ),\n+    ignore\n+)]\n+fn test_process_group_no_posix_spawn() {\n+    unsafe {\n+        // Same as above, create hang-y cat. This time, force using the non-posix_spawnp path.\n+        let mut cmd = Command::new(OsStr::new(\"cat\"));\n+        cmd.pgroup(0);\n+        cmd.pre_exec(Box::new(|| Ok(()))); // pre_exec forces fork + exec\n+        cmd.stdin(Stdio::MakePipe);\n+        cmd.stdout(Stdio::MakePipe);\n+        let (mut cat, _pipes) = t!(cmd.spawn(Stdio::Null, true));\n+\n+        // Check that we can kill its process group, which means there *is* one.\n+        t!(cvt(libc::kill(-(cat.id() as libc::pid_t), libc::SIGINT)));\n+\n+        t!(cat.wait());\n+    }\n+}"}, {"sha": "3d305cd7310fd4b8419d220d1adeadebb9fda914", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -320,6 +320,10 @@ impl Command {\n             cvt(libc::chdir(cwd.as_ptr()))?;\n         }\n \n+        if let Some(pgroup) = self.get_pgroup() {\n+            cvt(libc::setpgid(0, pgroup))?;\n+        }\n+\n         // emscripten has no signal support.\n         #[cfg(not(target_os = \"emscripten\"))]\n         {\n@@ -459,6 +463,8 @@ impl Command {\n             None => None,\n         };\n \n+        let pgroup = self.get_pgroup();\n+\n         // Safety: -1 indicates we don't have a pidfd.\n         let mut p = unsafe { Process::new(0, -1) };\n \n@@ -487,6 +493,8 @@ impl Command {\n             cvt_nz(libc::posix_spawnattr_init(attrs.as_mut_ptr()))?;\n             let attrs = PosixSpawnattr(&mut attrs);\n \n+            let mut flags = 0;\n+\n             let mut file_actions = MaybeUninit::uninit();\n             cvt_nz(libc::posix_spawn_file_actions_init(file_actions.as_mut_ptr()))?;\n             let file_actions = PosixSpawnFileActions(&mut file_actions);\n@@ -516,13 +524,18 @@ impl Command {\n                 cvt_nz(f(file_actions.0.as_mut_ptr(), cwd.as_ptr()))?;\n             }\n \n+            if let Some(pgroup) = pgroup {\n+                flags |= libc::POSIX_SPAWN_SETPGROUP;\n+                cvt_nz(libc::posix_spawnattr_setpgroup(attrs.0.as_mut_ptr(), pgroup))?;\n+            }\n+\n             let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n             cvt(sigemptyset(set.as_mut_ptr()))?;\n             cvt_nz(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n             cvt(sigaddset(set.as_mut_ptr(), libc::SIGPIPE))?;\n             cvt_nz(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n \n-            let flags = libc::POSIX_SPAWN_SETSIGDEF | libc::POSIX_SPAWN_SETSIGMASK;\n+            flags |= libc::POSIX_SPAWN_SETSIGDEF | libc::POSIX_SPAWN_SETSIGMASK;\n             cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource"}, {"sha": "b51d356f61fdff1935edd636722cb3972b610b09", "filename": "src/test/ui/check-cfg/mix.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -45,6 +45,28 @@ fn test_cfg_macro() {\n     //~^ WARNING unexpected `cfg` condition name\n     cfg!(any(feature = \"bad\", windows));\n     //~^ WARNING unexpected `cfg` condition value\n+    cfg!(any(windows, xxx));\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(all(unix, xxx));\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(all(aa, bb));\n+    //~^ WARNING unexpected `cfg` condition name\n+    //~| WARNING unexpected `cfg` condition name\n+    cfg!(any(aa, bb));\n+    //~^ WARNING unexpected `cfg` condition name\n+    //~| WARNING unexpected `cfg` condition name\n+    cfg!(any(unix, feature = \"zebra\"));\n+    //~^ WARNING unexpected `cfg` condition value\n+    cfg!(any(xxx, feature = \"zebra\"));\n+    //~^ WARNING unexpected `cfg` condition name\n+    //~| WARNING unexpected `cfg` condition value\n+    cfg!(any(xxx, unix, xxx));\n+    //~^ WARNING unexpected `cfg` condition name\n+    //~| WARNING unexpected `cfg` condition name\n+    cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n+    //~^ WARNING unexpected `cfg` condition value\n+    //~| WARNING unexpected `cfg` condition value\n+    //~| WARNING unexpected `cfg` condition value\n }\n \n fn main() {}"}, {"sha": "08a338da104d0bd89e097ed77c7df0be12f239cf", "filename": "src/test/ui/check-cfg/mix.stderr", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -62,5 +62,99 @@ LL |     cfg!(any(feature = \"bad\", windows));\n    |\n    = note: expected values for `feature` are: bar, foo\n \n-warning: 9 warnings emitted\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:48:23\n+   |\n+LL |     cfg!(any(windows, xxx));\n+   |                       ^^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:50:20\n+   |\n+LL |     cfg!(all(unix, xxx));\n+   |                    ^^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:52:14\n+   |\n+LL |     cfg!(all(aa, bb));\n+   |              ^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:52:18\n+   |\n+LL |     cfg!(all(aa, bb));\n+   |                  ^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:55:14\n+   |\n+LL |     cfg!(any(aa, bb));\n+   |              ^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:55:18\n+   |\n+LL |     cfg!(any(aa, bb));\n+   |                  ^^\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:58:20\n+   |\n+LL |     cfg!(any(unix, feature = \"zebra\"));\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:60:14\n+   |\n+LL |     cfg!(any(xxx, feature = \"zebra\"));\n+   |              ^^^\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:60:19\n+   |\n+LL |     cfg!(any(xxx, feature = \"zebra\"));\n+   |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:63:14\n+   |\n+LL |     cfg!(any(xxx, unix, xxx));\n+   |              ^^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:63:25\n+   |\n+LL |     cfg!(any(xxx, unix, xxx));\n+   |                         ^^^\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:66:14\n+   |\n+LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n+   |              ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:66:33\n+   |\n+LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n+   |                                 ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:66:52\n+   |\n+LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n+   |                                                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: 23 warnings emitted\n "}, {"sha": "503b624114a2a8a29569702c4b01ba2c6bfb4004", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7f6d60b103e940f939f568ee2e06de6e914d09/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7f6d60b103e940f939f568ee2e06de6e914d09/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=9c7f6d60b103e940f939f568ee2e06de6e914d09", "patch": "@@ -487,11 +487,6 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n         return None;\n     }\n \n-    // Some older versions of LLDB seem to have problems with multiple\n-    // instances running in parallel, so only run one test thread at a\n-    // time.\n-    env::set_var(\"RUST_TEST_THREADS\", \"1\");\n-\n     Some(Config { debugger: Some(Debugger::Lldb), ..config.clone() })\n }\n "}]}