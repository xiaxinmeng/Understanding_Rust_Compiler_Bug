{"sha": "5b13c2411f025a16495f5828afe2def6e9220102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTNjMjQxMWYwMjVhMTY0OTVmNTgyOGFmZTJkZWY2ZTkyMjAxMDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-24T13:53:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-24T13:53:41Z"}, "message": "Merge #5516\n\n5516: Better LSP conformance r=matklad a=vsrs\n\nAt the moment rust-analyzer does not fully conform to the LSP. This PR fixes two LSP related issues:\r\n\r\n1) rust-analyzer sends predefined server capabilities and does not take supplied client capabilities in mind.\r\n2) rust-analyzer uses dynamic `textDocument/didSave` registration even if the client does not support it.\r\n\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "6a96e67439e89104e7a9076185424fc609ffb27f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a96e67439e89104e7a9076185424fc609ffb27f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b13c2411f025a16495f5828afe2def6e9220102", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGuflCRBK7hj4Ov3rIwAAdHIIAG36LnA5wzaXXrUa9WC5XClE\nQCqOeJAHx9JNBmjMkbVBaN/avdhxRhBePiFhuBLjD4AL1q0qVnxnnEIgJQFtwZmw\noHafle8jIIktV4BeNwjILy01M0NUhTKacPBdPWhKKiTYzKYWsvbfMYJEsKzlzRkK\nvFfdtn7fiPBMohdN+trwuZoeEas/X0Xj2SDMa+2iVOgQmkDuDKnO7HdiMDcZ63P/\naq78Of1/wRyQ6ft7NiEld2aC9+hQ+XWPETR03VOkEAkNIeGs/XTH/+j6g25y6Yab\npYbYfNlJYNVwCRG4nn8AgVRk2d2yVNqUCvrpJjX8jgS83Qb0FbP6MbpAFVuPhQc=\n=8oDx\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a96e67439e89104e7a9076185424fc609ffb27f\nparent c3defe2532ba6ffd12a13bcbc8fdeda037665efc\nparent a84dc4425a05f0cdb1edefcd77de008940824372\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595598821 +0000\ncommitter GitHub <noreply@github.com> 1595598821 +0000\n\nMerge #5516\n\n5516: Better LSP conformance r=matklad a=vsrs\n\nAt the moment rust-analyzer does not fully conform to the LSP. This PR fixes two LSP related issues:\r\n\r\n1) rust-analyzer sends predefined server capabilities and does not take supplied client capabilities in mind.\r\n2) rust-analyzer uses dynamic `textDocument/didSave` registration even if the client does not support it.\r\n\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b13c2411f025a16495f5828afe2def6e9220102", "html_url": "https://github.com/rust-lang/rust/commit/5b13c2411f025a16495f5828afe2def6e9220102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b13c2411f025a16495f5828afe2def6e9220102/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3defe2532ba6ffd12a13bcbc8fdeda037665efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3defe2532ba6ffd12a13bcbc8fdeda037665efc", "html_url": "https://github.com/rust-lang/rust/commit/c3defe2532ba6ffd12a13bcbc8fdeda037665efc"}, {"sha": "a84dc4425a05f0cdb1edefcd77de008940824372", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84dc4425a05f0cdb1edefcd77de008940824372", "html_url": "https://github.com/rust-lang/rust/commit/a84dc4425a05f0cdb1edefcd77de008940824372"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "ad62571effd3a35653915558d73803cdeb41cc53", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b13c2411f025a16495f5828afe2def6e9220102/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13c2411f025a16495f5828afe2def6e9220102/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=5b13c2411f025a16495f5828afe2def6e9220102", "patch": "@@ -128,6 +128,7 @@ pub struct ClientCapsConfig {\n     pub hover_actions: bool,\n     pub status_notification: bool,\n     pub signature_help_label_offsets: bool,\n+    pub dynamic_watched_files: bool,\n }\n \n impl Config {\n@@ -290,6 +291,13 @@ impl Config {\n     }\n \n     pub fn update_caps(&mut self, caps: &ClientCapabilities) {\n+        if let Some(ws_caps) = caps.workspace.as_ref() {\n+            if let Some(did_change_watched_files) = ws_caps.did_change_watched_files.as_ref() {\n+                self.client_caps.dynamic_watched_files =\n+                    did_change_watched_files.dynamic_registration.unwrap_or(false);\n+            }\n+        }\n+\n         if let Some(doc_caps) = caps.text_document.as_ref() {\n             if let Some(value) = doc_caps.definition.as_ref().and_then(|it| it.link_support) {\n                 self.client_caps.location_link = value;"}, {"sha": "b44fd9eb4f65c77dc11e3321a76ff0de98c6faa0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5b13c2411f025a16495f5828afe2def6e9220102/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13c2411f025a16495f5828afe2def6e9220102/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=5b13c2411f025a16495f5828afe2def6e9220102", "patch": "@@ -106,38 +106,41 @@ impl GlobalState {\n             );\n         };\n \n-        let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n-            include_text: Some(false),\n-            text_document_registration_options: lsp_types::TextDocumentRegistrationOptions {\n-                document_selector: Some(vec![\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/*.rs\".into()),\n-                    },\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/Cargo.toml\".into()),\n-                    },\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/Cargo.lock\".into()),\n-                    },\n-                ]),\n-            },\n-        };\n-\n-        let registration = lsp_types::Registration {\n-            id: \"textDocument/didSave\".to_string(),\n-            method: \"textDocument/didSave\".to_string(),\n-            register_options: Some(serde_json::to_value(save_registration_options).unwrap()),\n-        };\n-        self.send_request::<lsp_types::request::RegisterCapability>(\n-            lsp_types::RegistrationParams { registrations: vec![registration] },\n-            |_, _| (),\n-        );\n+        if self.config.client_caps.dynamic_watched_files {\n+            let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n+                include_text: Some(false),\n+                text_document_registration_options: lsp_types::TextDocumentRegistrationOptions {\n+                    document_selector: Some(vec![\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/*.rs\".into()),\n+                        },\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/Cargo.toml\".into()),\n+                        },\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/Cargo.lock\".into()),\n+                        },\n+                    ]),\n+                },\n+            };\n+\n+            let registration = lsp_types::Registration {\n+                id: \"textDocument/didSave\".to_string(),\n+                method: \"textDocument/didSave\".to_string(),\n+                register_options: Some(serde_json::to_value(save_registration_options).unwrap()),\n+            };\n+\n+            self.send_request::<lsp_types::request::RegisterCapability>(\n+                lsp_types::RegistrationParams { registrations: vec![registration] },\n+                |_, _| (),\n+            );\n+        }\n \n         self.fetch_workspaces();\n "}]}