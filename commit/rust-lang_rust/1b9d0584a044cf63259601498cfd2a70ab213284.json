{"sha": "1b9d0584a044cf63259601498cfd2a70ab213284", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOWQwNTg0YTA0NGNmNjMyNTk2MDE0OThjZmQyYTcwYWIyMTMyODQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-05T05:17:42Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-06T01:23:01Z"}, "message": "Add field `is_import` to `def::Export`.", "tree": {"sha": "215c07a34ef951949cca383c3cb5fa35db4d9625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215c07a34ef951949cca383c3cb5fa35db4d9625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9d0584a044cf63259601498cfd2a70ab213284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9d0584a044cf63259601498cfd2a70ab213284", "html_url": "https://github.com/rust-lang/rust/commit/1b9d0584a044cf63259601498cfd2a70ab213284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9d0584a044cf63259601498cfd2a70ab213284/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58e80400b24c09624ee602746c80d25aa18e0c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e80400b24c09624ee602746c80d25aa18e0c86", "html_url": "https://github.com/rust-lang/rust/commit/58e80400b24c09624ee602746c80d25aa18e0c86"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "3ef0633e7f4006f55e857e056f125acedce29de7", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -130,6 +130,8 @@ pub struct Export {\n     /// The visibility of the export.\n     /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n     pub vis: ty::Visibility,\n+    /// True if from a `use` or and `extern crate`.\n+    pub is_import: bool,\n }\n \n impl CtorKind {"}, {"sha": "f553e2afc4b48c1dd133ea0eb038f77ce4dc24b9", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -1163,7 +1163,8 @@ impl_stable_hash_for!(struct hir::def::Export {\n     ident,\n     def,\n     vis,\n-    span\n+    span,\n+    is_import\n });\n \n impl<'gcx> HashStable<StableHashingContext<'gcx>>"}, {"sha": "948bbe7edc5bae14d79a457ebf6e586323db60d8", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -636,6 +636,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         def: def,\n                         vis: ty::Visibility::Public,\n                         span: DUMMY_SP,\n+                        is_import: false,\n                     });\n                 }\n             }\n@@ -675,6 +676,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                     ident: Ident::from_str(&self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n+                                    is_import: false,\n                                 });\n                             }\n                         }\n@@ -692,16 +694,20 @@ impl<'a, 'tcx> CrateMetadata {\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n                     let ident = Ident::from_str(&name);\n                     let vis = self.get_visibility(child_index);\n-                    callback(def::Export { def, ident, vis, span });\n+                    let is_import = false;\n+                    callback(def::Export { def, ident, vis, span, is_import });\n                     // For non-reexport structs and variants add their constructors to children.\n                     // Reexport lists automatically contain constructors when necessary.\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {\n                                 let ctor_kind = self.get_ctor_kind(child_index);\n                                 let ctor_def = Def::StructCtor(ctor_def_id, ctor_kind);\n-                                let vis = self.get_visibility(ctor_def_id.index);\n-                                callback(def::Export { def: ctor_def, ident, vis, span });\n+                                callback(def::Export {\n+                                    def: ctor_def,\n+                                    vis: self.get_visibility(ctor_def_id.index),\n+                                    ident, span, is_import,\n+                                });\n                             }\n                         }\n                         Def::Variant(def_id) => {\n@@ -710,7 +716,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             let ctor_kind = self.get_ctor_kind(child_index);\n                             let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n                             let vis = self.get_visibility(child_index);\n-                            callback(def::Export { def: ctor_def, ident, vis, span });\n+                            callback(def::Export { def: ctor_def, ident, vis, span, is_import });\n                         }\n                         _ => {}\n                     }"}, {"sha": "33fe432f0670a48478507d8afead37bdb616b174", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -466,7 +466,7 @@ impl<'a> Resolver<'a> {\n \n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'a>, child: Export) {\n-        let Export { ident, def, vis, span } = child;\n+        let Export { ident, def, vis, span, .. } = child;\n         let def_id = def.def_id();\n         let expansion = Mark::root(); // FIXME(jseyfried) intercrate hygiene\n         match def {\n@@ -672,7 +672,7 @@ impl<'a> Resolver<'a> {\n             let result = self.resolve_ident_in_module(module, ident, MacroNS, false, false, span);\n             if let Ok(binding) = result {\n                 let (def, vis) = (binding.def(), binding.vis);\n-                self.macro_exports.push(Export { ident, def, vis, span });\n+                self.macro_exports.push(Export { ident, def, vis, span, is_import: true });\n             } else {\n                 span_err!(self.session, span, E0470, \"reexported macro not found\");\n             }"}, {"sha": "f2162f2321f615a6d29535a087232dae5db84712", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -751,6 +751,7 @@ impl<'a> Resolver<'a> {\n                     def: def,\n                     vis: ty::Visibility::Public,\n                     span: item.span,\n+                    is_import: false,\n                 });\n             } else {\n                 self.unused_macros.insert(def_id);"}, {"sha": "ed66a1c2d79b84e557f7bada823dadaca9489b88", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -866,6 +866,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         def: def,\n                         span: binding.span,\n                         vis: binding.vis,\n+                        is_import: true,\n                     });\n                 }\n             }"}, {"sha": "79e3d48843c03299189b468d5b23372f7529088e", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -391,7 +391,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n         let mut visited = FxHashSet();\n         for &item in cx.tcx.item_children(did).iter() {\n             let def_id = item.def.def_id();\n-            if cx.tcx.visibility(def_id) == ty::Visibility::Public {\n+            if item.vis == ty::Visibility::Public {\n                 if !visited.insert(def_id) { continue }\n                 if let Some(i) = try_inline(cx, item.def, item.ident.name) {\n                     items.extend(i)"}, {"sha": "2fd47fa0a6d0aba6c5fcbde9a18bee76ad3c2d46", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9d0584a044cf63259601498cfd2a70ab213284/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=1b9d0584a044cf63259601498cfd2a70ab213284", "patch": "@@ -68,7 +68,9 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n         }\n \n         for item in self.cx.tcx.item_children(def_id).iter() {\n-            self.visit_item(item.def);\n+            if !item.is_import || item.vis == Visibility::Public {\n+                self.visit_item(item.def);\n+            }\n         }\n     }\n "}]}