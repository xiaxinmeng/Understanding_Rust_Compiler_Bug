{"sha": "2c38effe286e1b68a2f1125598ece6c8887d7d49", "node_id": "C_kwDOAAsO6NoAKDJjMzhlZmZlMjg2ZTFiNjhhMmYxMTI1NTk4ZWNlNmM4ODg3ZDdkNDk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-28T12:37:48Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-13T16:39:59Z"}, "message": "Don't patch in place in apply_patches\n\nThis will make it easier to skip patching if unnecessary in the future", "tree": {"sha": "2a07d88d0a75341594d10f0d60a92ceab52347e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a07d88d0a75341594d10f0d60a92ceab52347e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c38effe286e1b68a2f1125598ece6c8887d7d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c38effe286e1b68a2f1125598ece6c8887d7d49", "html_url": "https://github.com/rust-lang/rust/commit/2c38effe286e1b68a2f1125598ece6c8887d7d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c38effe286e1b68a2f1125598ece6c8887d7d49/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75327f8587fad77a25cfe99e52376b6862d75b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/75327f8587fad77a25cfe99e52376b6862d75b57", "html_url": "https://github.com/rust-lang/rust/commit/75327f8587fad77a25cfe99e52376b6862d75b57"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "0302946e65410176a1cae000ac04a1ea26746791", "filename": "build_system/prepare.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2c38effe286e1b68a2f1125598ece6c8887d7d49/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c38effe286e1b68a2f1125598ece6c8887d7d49/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=2c38effe286e1b68a2f1125598ece6c8887d7d49", "patch": "@@ -7,7 +7,9 @@ use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERS\n use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_default_sysroot, get_rustc_version};\n use super::tests::LIBCORE_TESTS_SRC;\n-use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n+use super::utils::{\n+    copy_dir_recursively, git_command, remove_dir_if_exists, retry_spawn_and_wait, spawn_and_wait,\n+};\n \n pub(crate) fn prepare(dirs: &Dirs, rustc: &Path) {\n     RelPath::DOWNLOAD.ensure_exists(dirs);\n@@ -35,31 +37,24 @@ fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n     copy_dir_recursively(&ORIG_BUILD_SYSROOT.to_path(dirs), &BUILD_SYSROOT.to_path(dirs));\n \n     fs::create_dir_all(SYSROOT_SRC.to_path(dirs).join(\"library\")).unwrap();\n-    copy_dir_recursively(\n-        &sysroot_src_orig.join(\"library\"),\n-        &SYSROOT_SRC.to_path(dirs).join(\"library\"),\n-    );\n+\n+    apply_patches(dirs, \"stdlib\", &sysroot_src_orig, &SYSROOT_SRC.to_path(dirs));\n \n     let rustc_version = get_rustc_version(rustc);\n     fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n-\n-    apply_patches(dirs, \"stdlib\", &SYSROOT_SRC.to_path(dirs));\n }\n \n fn prepare_coretests(dirs: &Dirs, rustc: &Path) {\n     let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n-    eprintln!(\"[COPY] coretests src\");\n-\n     // FIXME ensure builds error out or update the copy if any of the files copied here change\n-    LIBCORE_TESTS_SRC.ensure_fresh(dirs);\n-    copy_dir_recursively(\n+    apply_patches(\n+        dirs,\n+        \"coretests\",\n         &sysroot_src_orig.join(\"library/core/tests\"),\n         &LIBCORE_TESTS_SRC.to_path(dirs),\n     );\n-\n-    apply_patches(dirs, \"coretests\", &LIBCORE_TESTS_SRC.to_path(dirs));\n }\n \n pub(crate) struct GitRepo {\n@@ -159,11 +154,12 @@ impl GitRepo {\n     }\n \n     pub(crate) fn patch(&self, dirs: &Dirs) {\n-        let download_dir = self.download_dir(dirs);\n-        let source_dir = self.source_dir();\n-        source_dir.ensure_fresh(dirs);\n-        copy_dir_recursively(&download_dir, &source_dir.to_path(dirs));\n-        apply_patches(dirs, self.patch_name, &source_dir.to_path(dirs));\n+        apply_patches(\n+            dirs,\n+            self.patch_name,\n+            &self.download_dir(dirs),\n+            &self.source_dir().to_path(dirs),\n+        );\n     }\n }\n \n@@ -267,8 +263,14 @@ fn get_patches(dirs: &Dirs, crate_name: &str) -> Vec<PathBuf> {\n     patches\n }\n \n-fn apply_patches(dirs: &Dirs, crate_name: &str, target_dir: &Path) {\n-    init_git_repo(&target_dir);\n+fn apply_patches(dirs: &Dirs, crate_name: &str, source_dir: &Path, target_dir: &Path) {\n+    // FIXME avoid copy and patch if src, patches and target are unchanged\n+\n+    remove_dir_if_exists(target_dir);\n+    fs::create_dir_all(target_dir).unwrap();\n+    copy_dir_recursively(source_dir, target_dir);\n+\n+    init_git_repo(target_dir);\n \n     if crate_name == \"<none>\" {\n         return;"}]}