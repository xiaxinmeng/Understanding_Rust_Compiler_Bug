{"sha": "d54f70f1f6ae6fa571117e3db30040620e2890a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NGY3MGYxZjZhZTZmYTU3MTExN2UzZGIzMDA0MDYyMGUyODkwYTE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T09:37:35Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T11:01:10Z"}, "message": "Generate let binding variable name for some cases\n\nGiven a map call like `x.field.map ...` the suggestion will contain:\n`if let Some(x_field) ...`\n\nGiven a map call like `x.map ...` the suggestion will contain:\n`if let Some(_x) ...`\n\nOtherwise it will suggest: `if let Some(_) ...`", "tree": {"sha": "790b0764702897a001e7964cc3efc4364b6f9bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790b0764702897a001e7964cc3efc4364b6f9bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d54f70f1f6ae6fa571117e3db30040620e2890a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa0zD2AAoJELb6Bqbg4mZbdZkQALbduUfwwSJidV0bOsabTxNK\n+bA+wWtoEnZkKo3lJLCGGYDutxCuzSQJLPLe423sIDkMX5cOq9qm1L36Wkmm+OYk\n89IuPwhrL8n2W5DYnfA3pr6jXAVlipUCRs+jTi7Q3+4qPdTqz4DG2Hu0rPoab1jD\nSPgHITlu0pvs01cEAGwgzMpYyh4nh1yt31PQ4Q0iq60/GjKM/ZIeiWizQjzU7B8I\nwSiNaXtrHww+5yKFLNZRhWCWfGcG5nQUlPpjFj7deSY70YWUo8EYwVYc5zReT4jl\nQOlbxeCUQPNTBghJmwINpUlNT1kRqfLmntl8+oh/oCbXBoUd2BaBgEDneTD7W77E\nWkxTL0RmVfuqFVK22WZ729GVQOWUKVCQ/dAxGyxQnpj6bCA/7kdprfYEpjkav+a5\nw+o5ImSGG482Thd09D1zGg+xAM00FaNeWhnVcsY0aFqzmL73+o8y4H2vQI89YI8t\nBXEmk+S3OOaYKnGPBSGaxGZbJwso3oBHQaZuBiIBdvvz6IUPec/Kq8AaW9XLKMRc\n8IzJwEA+JKli9agJW+2pP35++Uba2iHrBh37YaM6nVoXx1+pu3/gD86v4q2X7Qfe\nRkK8LOmaq9nVkV26M8ASGqIAkoxBojcxY/AhCyDdL4sBsZbvWRnTvKY2m9hYtAhx\nY0b3Cy4YLOMJ3axad1SV\n=7CmY\n-----END PGP SIGNATURE-----", "payload": "tree 790b0764702897a001e7964cc3efc4364b6f9bfb\nparent d87385b4065d3fd319b5c61e9e2719325eb87f0e\nauthor Philipp Hansch <dev@phansch.net> 1523785055 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1523790070 +0200\n\nGenerate let binding variable name for some cases\n\nGiven a map call like `x.field.map ...` the suggestion will contain:\n`if let Some(x_field) ...`\n\nGiven a map call like `x.map ...` the suggestion will contain:\n`if let Some(_x) ...`\n\nOtherwise it will suggest: `if let Some(_) ...`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d54f70f1f6ae6fa571117e3db30040620e2890a1", "html_url": "https://github.com/rust-lang/rust/commit/d54f70f1f6ae6fa571117e3db30040620e2890a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d54f70f1f6ae6fa571117e3db30040620e2890a1/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d87385b4065d3fd319b5c61e9e2719325eb87f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d87385b4065d3fd319b5c61e9e2719325eb87f0e", "html_url": "https://github.com/rust-lang/rust/commit/d87385b4065d3fd319b5c61e9e2719325eb87f0e"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "abbeaabbdb29745c93ab5f7f3f2f7f58b12cb866", "filename": "clippy_lints/src/option_map_unit_fn.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d54f70f1f6ae6fa571117e3db30040620e2890a1/clippy_lints%2Fsrc%2Foption_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54f70f1f6ae6fa571117e3db30040620e2890a1/clippy_lints%2Fsrc%2Foption_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_map_unit_fn.rs?ref=d54f70f1f6ae6fa571117e3db30040620e2890a1", "patch": "@@ -133,6 +133,20 @@ fn unit_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Op\n     None\n }\n \n+/// Builds a name for the let binding variable (var_arg)\n+///\n+/// `x.field` => `x_field`\n+/// `y` => `_y`\n+///\n+/// Anything else will return `_`.\n+fn let_binding_name(cx: &LateContext, var_arg: &hir::Expr) -> String {\n+    match &var_arg.node {\n+        hir::ExprField(_, _) => snippet(cx, var_arg.span, \"_\").replace(\".\", \"_\"),\n+        hir::ExprPath(_) => format!(\"_{}\", snippet(cx, var_arg.span, \"\")),\n+        _ => \"_\".to_string()\n+    }\n+}\n+\n fn lint_map_unit_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_args: &[hir::Expr]) {\n     let var_arg = &map_args[0];\n     let fn_arg = &map_args[1];\n@@ -143,7 +157,8 @@ fn lint_map_unit_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_ar\n \n     if is_unit_function(cx, fn_arg) {\n         let msg = \"called `map(f)` on an Option value where `f` is a unit function\";\n-        let suggestion = format!(\"if let Some(...) = {0} {{ {1}(...) }}\",\n+        let suggestion = format!(\"if let Some({0}) = {1} {{ {2}(...) }}\",\n+                                 let_binding_name(cx, var_arg),\n                                  snippet(cx, var_arg.span, \"_\"),\n                                  snippet(cx, fn_arg.span, \"_\"));\n "}, {"sha": "d9cfc62a51f83e44403aefce1c54fe5d75c4c301", "filename": "tests/ui/option_map_unit_fn.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d54f70f1f6ae6fa571117e3db30040620e2890a1/tests%2Fui%2Foption_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54f70f1f6ae6fa571117e3db30040620e2890a1/tests%2Fui%2Foption_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.rs?ref=d54f70f1f6ae6fa571117e3db30040620e2890a1", "patch": "@@ -86,4 +86,13 @@ fn main() {\n         do_nothing(value)\n     });\n     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+\n+    // The following should suggest `if let Some(_X) ...` as it's difficult to generate a proper let variable name for them\n+    Some(42).map(diverge);\n+    \"12\".parse::<i32>().ok().map(diverge);\n+    Some(plus_one(1)).map(do_nothing);\n+\n+    // Should suggest `if let Some(_y) ...` to not override the existing foo variable\n+    let y = Some(42);\n+    y.map(do_nothing);\n }"}, {"sha": "bd19fe0532933c2712163754ba75917edc5f0e37", "filename": "tests/ui/option_map_unit_fn.stderr", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d54f70f1f6ae6fa571117e3db30040620e2890a1/tests%2Fui%2Foption_map_unit_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d54f70f1f6ae6fa571117e3db30040620e2890a1/tests%2Fui%2Foption_map_unit_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.stderr?ref=d54f70f1f6ae6fa571117e3db30040620e2890a1", "patch": "@@ -4,7 +4,7 @@ error: called `map(f)` on an Option value where `f` is a unit function\n 33 |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Some(...) = x.field { do_nothing(...) }`\n+   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n    |\n    = note: `-D option-map-unit-fn` implied by `-D warnings`\n \n@@ -14,15 +14,15 @@ error: called `map(f)` on an Option value where `f` is a unit function\n 35 |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Some(...) = x.field { do_nothing(...) }`\n+   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n \n error: called `map(f)` on an Option value where `f` is a unit function\n   --> $DIR/option_map_unit_fn.rs:37:5\n    |\n 37 |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Some(...) = x.field { diverge(...) }`\n+   |     help: try this: `if let Some(x_field) = x.field { diverge(...) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn.rs:43:5\n@@ -164,7 +164,7 @@ error: called `map(f)` on an Option value where `f` is a unit closure\n 87 | ||     });\n    | ||______^- help: try this: `if let Some(value) = x.field { ... }`\n    | |_______|\n-   |\n+   | \n \n error: called `map(f)` on an Option value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn.rs:88:5\n@@ -174,5 +174,37 @@ error: called `map(f)` on an Option value where `f` is a unit closure\n    |     |\n    |     help: try this: `if let Some(value) = x.field { ... }`\n \n-error: aborting due to 21 previous errors\n+error: called `map(f)` on an Option value where `f` is a unit function\n+  --> $DIR/option_map_unit_fn.rs:91:5\n+   |\n+91 |     Some(42).map(diverge);\n+   |     ^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(_) = Some(42) { diverge(...) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit function\n+  --> $DIR/option_map_unit_fn.rs:92:5\n+   |\n+92 |     \"12\".parse::<i32>().ok().map(diverge);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(_) = \"12\".parse::<i32>().ok() { diverge(...) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit function\n+  --> $DIR/option_map_unit_fn.rs:93:5\n+   |\n+93 |     Some(plus_one(1)).map(do_nothing);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(_) = Some(plus_one(1)) { do_nothing(...) }`\n+\n+error: called `map(f)` on an Option value where `f` is a unit function\n+  --> $DIR/option_map_unit_fn.rs:97:5\n+   |\n+97 |     y.map(do_nothing);\n+   |     ^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(_y) = y { do_nothing(...) }`\n+\n+error: aborting due to 25 previous errors\n "}]}