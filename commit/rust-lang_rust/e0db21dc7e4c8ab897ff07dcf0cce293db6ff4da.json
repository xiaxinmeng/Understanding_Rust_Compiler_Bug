{"sha": "e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZGIyMWRjN2U0YzhhYjg5N2ZmMDdkY2YwY2NlMjkzZGI2ZmY0ZGE=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T21:55:52Z"}, "message": "liveness: Use upvars instead of FnKind to check for closures\n\nAvoiding FnKind will make it easier to run liveness analysis on all\nbodies in the future, not just fn-like things.", "tree": {"sha": "465e2a22c1541f8783869c82a3a78dd634457b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465e2a22c1541f8783869c82a3a78dd634457b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da", "html_url": "https://github.com/rust-lang/rust/commit/e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3319e7d1678b011de6af5b99caa4343ce8c4286", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3319e7d1678b011de6af5b99caa4343ce8c4286", "html_url": "https://github.com/rust-lang/rust/commit/e3319e7d1678b011de6af5b99caa4343ce8c4286"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "2cc9075196b55883d1b7857ff24b9ca7d2820a6e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=e0db21dc7e4c8ab897ff07dcf0cce293db6ff4da", "patch": "@@ -355,7 +355,7 @@ fn visit_fn<'tcx>(\n \n     // compute liveness\n     let mut lsets = Liveness::new(&mut fn_maps, def_id);\n-    let entry_ln = lsets.compute(fk, &body, sp, id);\n+    let entry_ln = lsets.compute(&body, sp, id);\n     lsets.log_liveness(entry_ln, id);\n \n     // check for various error conditions\n@@ -862,13 +862,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         self.rwu_table.assign_unpacked(idx, rwu);\n     }\n \n-    fn compute(\n-        &mut self,\n-        fk: FnKind<'_>,\n-        body: &hir::Body<'_>,\n-        span: Span,\n-        id: hir::HirId,\n-    ) -> LiveNode {\n+    fn compute(&mut self, body: &hir::Body<'_>, span: Span, id: hir::HirId) -> LiveNode {\n         debug!(\"compute: using id for body, {:?}\", body.value);\n \n         // # Liveness of captured variables\n@@ -887,7 +881,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // if they are live on the entry to the closure, since only the closure\n         // itself can access them on subsequent calls.\n \n-        if let Some(upvars) = self.ir.tcx.upvars_mentioned(self.body_owner) {\n+        let upvars = self.ir.tcx.upvars_mentioned(self.body_owner);\n+        if let Some(upvars) = upvars {\n             // Mark upvars captured by reference as used after closure exits.\n             for (&var_hir_id, upvar) in upvars.iter().rev() {\n                 let upvar_id = ty::UpvarId {\n@@ -906,9 +901,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n         let succ = self.propagate_through_expr(&body.value, self.exit_ln);\n \n-        match fk {\n-            FnKind::Method(..) | FnKind::ItemFn(..) => return succ,\n-            FnKind::Closure(..) => {}\n+        if upvars.is_none() {\n+            // Either not a closure, or closure without any captured variables.\n+            // No need to determine liveness of captured variables, since there\n+            // are none.\n+            return succ;\n         }\n \n         let ty = self.typeck_results.node_type(id);\n@@ -920,7 +917,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             },\n             ty::Generator(..) => return succ,\n             _ => {\n-                span_bug!(span, \"type of closure expr {:?} is not a closure {:?}\", id, ty,);\n+                span_bug!(span, \"{} has upvars so it should have a closure type: {:?}\", id, ty);\n             }\n         };\n "}]}