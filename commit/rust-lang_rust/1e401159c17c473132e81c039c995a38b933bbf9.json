{"sha": "1e401159c17c473132e81c039c995a38b933bbf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDAxMTU5YzE3YzQ3MzEzMmU4MWMwMzljOTk1YTM4YjkzM2JiZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-11T22:06:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-11T22:06:43Z"}, "message": "auto merge of #15586 : aturon/rust/stability-dashboard, r=alexcrichton\n\nThis PR adds a crate-level dashboard summarizing the stability levels of all items for all submodules of the crate.\r\n\r\nThe information is also written as a json file, intended for consumption by pages like http://huonw.github.io/isrustfastyet/\r\n\r\nAlong the way, fixes a few bugs in stability tracking and places where rustdoc was not pulling the existing stability data.\r\n\r\nCloses #13541", "tree": {"sha": "cb8c1f28959e7259a1d29134869969982d1dd0c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb8c1f28959e7259a1d29134869969982d1dd0c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e401159c17c473132e81c039c995a38b933bbf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e401159c17c473132e81c039c995a38b933bbf9", "html_url": "https://github.com/rust-lang/rust/commit/1e401159c17c473132e81c039c995a38b933bbf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e401159c17c473132e81c039c995a38b933bbf9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c1fb535dc4dc8732c2cf9ed3696789081ab3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c1fb535dc4dc8732c2cf9ed3696789081ab3b7", "html_url": "https://github.com/rust-lang/rust/commit/75c1fb535dc4dc8732c2cf9ed3696789081ab3b7"}, {"sha": "0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "html_url": "https://github.com/rust-lang/rust/commit/0487e6387b8cd7a0fc4077f7534d0ea410662b8b"}], "stats": {"total": 341, "additions": 327, "deletions": 14}, "files": [{"sha": "425db5e4dc07b02cda6a4a0320eace2deae94d00", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -693,6 +693,10 @@ fn encode_info_for_struct(ecx: &EncodeContext,\n         encode_name(ebml_w, nm);\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n         encode_def_id(ebml_w, local_def(id));\n+\n+        let stab = stability::lookup(ecx.tcx, field.id);\n+        encode_stability(ebml_w, stab);\n+\n         ebml_w.end_tag();\n     }\n     index"}, {"sha": "a3fa5a5f85ba4cd5237d3d43d37ebb49bffbd148", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -14,9 +14,10 @@\n use util::nodemap::{NodeMap, DefIdMap};\n use syntax::codemap::Span;\n use syntax::{attr, visit};\n+use syntax::ast;\n use syntax::ast::{Attribute, Block, Crate, DefId, FnDecl, NodeId, Variant};\n use syntax::ast::{Item, Required, Provided, TraitMethod, TypeMethod, Method};\n-use syntax::ast::{Generics, StructDef, Ident};\n+use syntax::ast::{Generics, StructDef, StructField, Ident};\n use syntax::ast_util::is_local;\n use syntax::attr::Stability;\n use syntax::visit::{FnKind, FkMethod, Visitor};\n@@ -91,6 +92,11 @@ impl Visitor<Option<Stability>> for Annotator {\n         s.ctor_id.map(|id| self.annotate(id, &[], parent.clone()));\n         visit::walk_struct_def(self, s, parent)\n     }\n+\n+    fn visit_struct_field(&mut self, s: &StructField, parent: Option<Stability>) {\n+        let stab = self.annotate(s.node.id, s.node.attrs.as_slice(), parent);\n+        visit::walk_struct_field(self, s, stab)\n+    }\n }\n \n impl Index {\n@@ -102,8 +108,8 @@ impl Index {\n                 extern_cache: DefIdMap::new()\n             }\n         };\n-        visit::walk_crate(&mut annotator, krate,\n-                          attr::find_stability(krate.attrs.as_slice()));\n+        let stab = annotator.annotate(ast::CRATE_NODE_ID, krate.attrs.as_slice(), None);\n+        visit::walk_crate(&mut annotator, krate, stab);\n         annotator.index\n     }\n }"}, {"sha": "24f23761286f024f295809942c6d00321fa1e580", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -1461,12 +1461,15 @@ impl Clean<Item> for ty::VariantInfo {\n                             name: Some(name.clean()),\n                             attrs: Vec::new(),\n                             visibility: Some(ast::Public),\n-                            stability: get_stability(self.id),\n                             // FIXME: this is not accurate, we need an id for\n                             //        the specific field but we're using the id\n-                            //        for the whole variant. Nothing currently\n-                            //        uses this so we should be good for now.\n+                            //        for the whole variant. Thus we read the\n+                            //        stability from the whole variant as well.\n+                            //        Struct variants are experimental and need\n+                            //        more infrastructure work before we can get\n+                            //        at the needed information here.\n                             def_id: self.id,\n+                            stability: get_stability(self.id),\n                             inner: StructFieldItem(\n                                 TypedStructField(ty.clean())\n                             )\n@@ -1482,7 +1485,7 @@ impl Clean<Item> for ty::VariantInfo {\n             visibility: Some(ast::Public),\n             def_id: self.id,\n             inner: VariantItem(Variant { kind: kind }),\n-            stability: None,\n+            stability: get_stability(self.id),\n         }\n     }\n }\n@@ -1890,7 +1893,7 @@ impl Clean<Item> for ast::ForeignItem {\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: self.vis.clean(),\n-            stability: None,\n+            stability: get_stability(ast_util::local_def(self.id)),\n             inner: inner,\n         }\n     }"}, {"sha": "84c0f0b97a18643cb0babe748982fbeeae255fab", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -22,6 +22,7 @@ use syntax::ast;\n use syntax::ast_util;\n \n use clean;\n+use stability_summary::ModuleSummary;\n use html::item_type;\n use html::item_type::ItemType;\n use html::render;\n@@ -631,3 +632,72 @@ impl<'a> fmt::Show for ConciseStability<'a> {\n         }\n     }\n }\n+\n+impl fmt::Show for ModuleSummary {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt_inner<'a>(f: &mut fmt::Formatter,\n+                         context: &mut Vec<&'a str>,\n+                         m: &'a ModuleSummary)\n+                     -> fmt::Result {\n+            let cnt = m.counts;\n+            let tot = cnt.total();\n+            if tot == 0 { return Ok(()) }\n+\n+            context.push(m.name.as_slice());\n+            let path = context.connect(\"::\");\n+\n+            // the total width of each row's stability summary, in pixels\n+            let width = 500;\n+\n+            try!(write!(f, \"<tr>\"));\n+            try!(write!(f, \"<td class='summary'>\\\n+                            <a class='summary' href='{}'>{}</a></td>\",\n+                        Vec::from_slice(context.slice_from(1))\n+                            .append_one(\"index.html\").connect(\"/\"),\n+                        path));\n+            try!(write!(f, \"<td>\"));\n+            try!(write!(f, \"<span class='summary Stable' \\\n+                            style='width: {}px; display: inline-block'>&nbsp</span>\",\n+                        (width * cnt.stable)/tot));\n+            try!(write!(f, \"<span class='summary Unstable' \\\n+                            style='width: {}px; display: inline-block'>&nbsp</span>\",\n+                        (width * cnt.unstable)/tot));\n+            try!(write!(f, \"<span class='summary Experimental' \\\n+                            style='width: {}px; display: inline-block'>&nbsp</span>\",\n+                        (width * cnt.experimental)/tot));\n+            try!(write!(f, \"<span class='summary Deprecated' \\\n+                            style='width: {}px; display: inline-block'>&nbsp</span>\",\n+                        (width * cnt.deprecated)/tot));\n+            try!(write!(f, \"<span class='summary Unmarked' \\\n+                            style='width: {}px; display: inline-block'>&nbsp</span>\",\n+                        (width * cnt.unmarked)/tot));\n+            try!(write!(f, \"</td></tr>\"));\n+\n+            for submodule in m.submodules.iter() {\n+                try!(fmt_inner(f, context, submodule));\n+            }\n+            context.pop();\n+            Ok(())\n+        }\n+\n+        let mut context = Vec::new();\n+\n+        try!(write!(f,\n+r\"<h1 class='fqn'>Stability dashboard: crate <a class='mod' href='index.html'>{}</a></h1>\n+This dashboard summarizes the stability levels for all of the public modules of\n+the crate, according to the total number of items at each level in the module and its children:\n+<blockquote>\n+<a class='stability Stable'></a> stable,<br/>\n+<a class='stability Unstable'></a> unstable,<br/>\n+<a class='stability Experimental'></a> experimental,<br/>\n+<a class='stability Deprecated'></a> deprecated,<br/>\n+<a class='stability Unmarked'></a> unmarked\n+</blockquote>\n+The counts do not include methods or trait\n+implementations that are visible only through a re-exported type.\",\n+self.name));\n+        try!(write!(f, \"<table>\"))\n+        try!(fmt_inner(f, &mut context, self));\n+        write!(f, \"</table>\")\n+    }\n+}"}, {"sha": "3761f918332e707b817a5151f6b59b05b8b940d6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -43,6 +43,8 @@ use std::sync::Arc;\n \n use externalfiles::ExternalHtml;\n \n+use serialize::json;\n+use serialize::Encodable;\n use serialize::json::ToJson;\n use syntax::ast;\n use syntax::ast_util;\n@@ -59,6 +61,7 @@ use html::item_type;\n use html::layout;\n use html::markdown::Markdown;\n use html::markdown;\n+use stability_summary;\n \n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls\n@@ -249,6 +252,11 @@ pub fn run(mut krate: clean::Crate, external_html: &ExternalHtml, dst: Path) ->\n \n     try!(mkdir(&cx.dst));\n \n+    // Crawl the crate, building a summary of the stability levels.  NOTE: this\n+    // summary *must* be computed with the original `krate`; the folding below\n+    // removes the impls from their modules.\n+    let summary = stability_summary::build(&krate);\n+\n     // Crawl the crate attributes looking for attributes which control how we're\n     // going to emit HTML\n     match krate.module.as_ref().map(|m| m.doc_list().unwrap_or(&[])) {\n@@ -361,7 +369,7 @@ pub fn run(mut krate: clean::Crate, external_html: &ExternalHtml, dst: Path) ->\n     let krate = try!(render_sources(&mut cx, krate));\n \n     // And finally render the whole crate's documentation\n-    cx.krate(krate)\n+    cx.krate(krate, summary)\n }\n \n fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String> {\n@@ -1045,13 +1053,34 @@ impl Context {\n     ///\n     /// This currently isn't parallelized, but it'd be pretty easy to add\n     /// parallelization to this function.\n-    fn krate(self, mut krate: clean::Crate) -> io::IoResult<()> {\n+    fn krate(mut self, mut krate: clean::Crate,\n+             stability: stability_summary::ModuleSummary) -> io::IoResult<()> {\n         let mut item = match krate.module.take() {\n             Some(i) => i,\n             None => return Ok(())\n         };\n         item.name = Some(krate.name);\n \n+        // render stability dashboard\n+        try!(self.recurse(stability.name.clone(), |this| {\n+            let json_dst = &this.dst.join(\"stability.json\");\n+            let mut json_out = BufferedWriter::new(try!(File::create(json_dst)));\n+            try!(stability.encode(&mut json::Encoder::new(&mut json_out)));\n+\n+            let title = stability.name.clone().append(\" - Stability dashboard\");\n+            let page = layout::Page {\n+                ty: \"mod\",\n+                root_path: this.root_path.as_slice(),\n+                title: title.as_slice(),\n+            };\n+            let html_dst = &this.dst.join(\"stability.html\");\n+            let mut html_out = BufferedWriter::new(try!(File::create(html_dst)));\n+            layout::render(&mut html_out, &this.layout, &page,\n+                           &Sidebar{ cx: this, item: &item },\n+                           &stability)\n+        }));\n+\n+        // render the crate documentation\n         let mut work = vec!((self, item));\n         loop {\n             match work.pop() {\n@@ -1061,6 +1090,7 @@ impl Context {\n                 None => break,\n             }\n         }\n+\n         Ok(())\n     }\n \n@@ -1233,6 +1263,8 @@ impl<'a> Item<'a> {\n     }\n }\n \n+\n+\n impl<'a> fmt::Show for Item<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         // Write the breadcrumb trail header for the top\n@@ -1269,6 +1301,17 @@ impl<'a> fmt::Show for Item<'a> {\n         // Write stability level\n         try!(write!(fmt, \"{}\", Stability(&self.item.stability)));\n \n+        // Links to out-of-band information, i.e. src and stability dashboard\n+        try!(write!(fmt, \"<span class='out-of-band'>\"));\n+\n+        // Write stability dashboard link\n+        match self.item.inner {\n+            clean::ModuleItem(ref m) if m.is_crate => {\n+                try!(write!(fmt, \"<a href='stability.html'>[stability dashboard]</a> \"));\n+            }\n+            _ => {}\n+        };\n+\n         // Write `src` tag\n         //\n         // When this item is part of a `pub use` in a downstream crate, the\n@@ -1278,14 +1321,15 @@ impl<'a> fmt::Show for Item<'a> {\n         if self.cx.include_sources && !is_primitive {\n             match self.href() {\n                 Some(l) => {\n-                    try!(write!(fmt,\n-                                \"<a class='source' id='src-{}' \\\n-                                    href='{}'>[src]</a>\",\n+                    try!(write!(fmt, \"<a id='src-{}' href='{}'>[src]</a>\",\n                                 self.item.def_id.node, l));\n                 }\n                 None => {}\n             }\n         }\n+\n+        try!(write!(fmt, \"</span>\"));\n+\n         try!(write!(fmt, \"</h1>\\n\"));\n \n         match self.item.inner {\n@@ -1355,6 +1399,7 @@ fn document(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                item: &clean::Item, items: &[clean::Item]) -> fmt::Result {\n     try!(document(w, item));\n+\n     let mut indices = range(0, items.len()).filter(|i| {\n         !ignore_private_item(&items[*i])\n     }).collect::<Vec<uint>>();\n@@ -1514,6 +1559,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             }\n         }\n     }\n+\n     write!(w, \"</table>\")\n }\n "}, {"sha": "4f790f96750286c9442ded17339bf560d92b7915", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -238,7 +238,7 @@ nav.sub {\n .docblock h2 { font-size: 1.15em; }\n .docblock h3, .docblock h4, .docblock h5 { font-size: 1em; }\n \n-.content .source {\n+.content .out-of-band {\n     float: right;\n     font-size: 23px;\n }\n@@ -409,6 +409,15 @@ h1 .stability {\n .stability.Locked { border-color: #0084B6; color: #00668c; }\n .stability.Unmarked { border-color: #FFFFFF; }\n \n+.summary {\n+    padding-right: 0px;\n+}\n+.summary.Deprecated { background-color: #A071A8; }\n+.summary.Experimental { background-color: #D46D6A; }\n+.summary.Unstable { background-color: #D4B16A; }\n+.summary.Stable { background-color: #54A759; }\n+.summary.Unmarked { background-color: #FFFFFF; }\n+\n :target { background: #FDFFD3; }\n \n /* Code highlighting */"}, {"sha": "76b9f11089f9bb5c78ef6153ddeaafa572ff9193", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -56,6 +56,7 @@ pub mod html {\n pub mod markdown;\n pub mod passes;\n pub mod plugins;\n+pub mod stability_summary;\n pub mod visit_ast;\n pub mod test;\n mod flock;"}, {"sha": "18e90d5d62109327ddbaf12a9afed9ec34faa85a", "filename": "src/librustdoc/stability_summary.rs", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e401159c17c473132e81c039c995a38b933bbf9/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=1e401159c17c473132e81c039c995a38b933bbf9", "patch": "@@ -0,0 +1,174 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This module crawls a `clean::Crate` and produces a summarization of the\n+//! stability levels within the crate. The summary contains the module\n+//! hierarchy, with item counts for every stability level per module. A parent\n+//! module's count includes its childrens's.\n+\n+use std::ops::Add;\n+use std::num::Zero;\n+use std::iter::AdditiveIterator;\n+\n+use syntax::attr::{Deprecated, Experimental, Unstable, Stable, Frozen, Locked};\n+use syntax::ast::Public;\n+\n+use clean::{Crate, Item, ModuleItem, Module, StructItem, Struct, EnumItem, Enum};\n+use clean::{ImplItem, Impl, TraitItem, Trait, TraitMethod, Provided, Required};\n+use clean::{ViewItemItem, PrimitiveItem};\n+\n+#[deriving(Zero, Encodable, Decodable, PartialEq, Eq)]\n+/// The counts for each stability level.\n+pub struct Counts {\n+    pub deprecated: uint,\n+    pub experimental: uint,\n+    pub unstable: uint,\n+    pub stable: uint,\n+    pub frozen: uint,\n+    pub locked: uint,\n+\n+    /// No stability level, inherited or otherwise.\n+    pub unmarked: uint,\n+}\n+\n+impl Add<Counts, Counts> for Counts {\n+    fn add(&self, other: &Counts) -> Counts {\n+        Counts {\n+            deprecated:   self.deprecated   + other.deprecated,\n+            experimental: self.experimental + other.experimental,\n+            unstable:     self.unstable     + other.unstable,\n+            stable:       self.stable       + other.stable,\n+            frozen:       self.frozen       + other.frozen,\n+            locked:       self.locked       + other.locked,\n+            unmarked:     self.unmarked     + other.unmarked,\n+        }\n+    }\n+}\n+\n+impl Counts {\n+    pub fn total(&self) -> uint {\n+        self.deprecated + self.experimental + self.unstable + self.stable +\n+            self.frozen + self.locked + self.unmarked\n+    }\n+}\n+\n+#[deriving(Encodable, Decodable, PartialEq, Eq)]\n+/// A summarized module, which includes total counts and summarized chilcren\n+/// modules.\n+pub struct ModuleSummary {\n+    pub name: String,\n+    pub counts: Counts,\n+    pub submodules: Vec<ModuleSummary>,\n+}\n+\n+impl PartialOrd for ModuleSummary {\n+    fn partial_cmp(&self, other: &ModuleSummary) -> Option<Ordering> {\n+        self.name.partial_cmp(&other.name)\n+    }\n+}\n+\n+impl Ord for ModuleSummary {\n+    fn cmp(&self, other: &ModuleSummary) -> Ordering {\n+        self.name.cmp(&other.name)\n+    }\n+}\n+\n+// is the item considered publically visible?\n+fn visible(item: &Item) -> bool {\n+    match item.inner {\n+        ImplItem(_) => true,\n+        _ => item.visibility == Some(Public)\n+    }\n+}\n+\n+// Produce the summary for an arbitrary item. If the item is a module, include a\n+// module summary. The counts for items with nested items (e.g. modules, traits,\n+// impls) include all children counts.\n+fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n+    // count this item\n+    let item_counts = match item.stability {\n+        None             => Counts { unmarked: 1,     .. Zero::zero() },\n+        Some(ref stab) => match stab.level {\n+            Deprecated   => Counts { deprecated: 1,   .. Zero::zero() },\n+            Experimental => Counts { experimental: 1, .. Zero::zero() },\n+            Unstable     => Counts { unstable: 1,     .. Zero::zero() },\n+            Stable       => Counts { stable: 1,       .. Zero::zero() },\n+            Frozen       => Counts { frozen: 1,       .. Zero::zero() },\n+            Locked       => Counts { locked: 1,       .. Zero::zero() },\n+        }\n+    };\n+\n+    // Count this item's children, if any. Note that a trait impl is\n+    // considered to have no children.\n+    match item.inner {\n+        // Require explicit `pub` to be visible\n+        StructItem(Struct { fields: ref subitems, .. }) |\n+        ImplItem(Impl { methods: ref subitems, trait_: None, .. }) => {\n+            let subcounts = subitems.iter().filter(|i| visible(*i))\n+                                           .map(summarize_item)\n+                                           .map(|s| s.val0())\n+                                           .sum();\n+            (item_counts + subcounts, None)\n+        }\n+        // `pub` automatically\n+        EnumItem(Enum { variants: ref subitems, .. }) => {\n+            let subcounts = subitems.iter().map(summarize_item)\n+                                           .map(|s| s.val0())\n+                                           .sum();\n+            (item_counts + subcounts, None)\n+        }\n+        TraitItem(Trait { methods: ref methods, .. }) => {\n+            fn extract_item<'a>(meth: &'a TraitMethod) -> &'a Item {\n+                match *meth {\n+                    Provided(ref item) | Required(ref item) => item\n+                }\n+            }\n+            let subcounts = methods.iter().map(extract_item)\n+                                          .map(summarize_item)\n+                                          .map(|s| s.val0())\n+                                          .sum();\n+            (item_counts + subcounts, None)\n+        }\n+        ModuleItem(Module { items: ref items, .. }) => {\n+            let mut counts = item_counts;\n+            let mut submodules = Vec::new();\n+\n+            for (subcounts, submodule) in items.iter().filter(|i| visible(*i))\n+                                                      .map(summarize_item) {\n+                counts = counts + subcounts;\n+                submodule.map(|m| submodules.push(m));\n+            }\n+            submodules.sort();\n+\n+            (counts, Some(ModuleSummary {\n+                name: item.name.as_ref().map_or(\"\".to_string(), |n| n.clone()),\n+                counts: counts,\n+                submodules: submodules,\n+            }))\n+        }\n+        // no stability information for the following items:\n+        ViewItemItem(_) | PrimitiveItem(_) => (Zero::zero(), None),\n+        _ => (item_counts, None)\n+    }\n+}\n+\n+/// Summarizes the stability levels in a crate.\n+pub fn build(krate: &Crate) -> ModuleSummary {\n+    match krate.module {\n+        None => ModuleSummary {\n+            name: krate.name.clone(),\n+            counts: Zero::zero(),\n+            submodules: Vec::new(),\n+        },\n+        Some(ref item) => ModuleSummary {\n+            name: krate.name.clone(), .. summarize_item(item).val1().unwrap()\n+        }\n+    }\n+}"}]}