{"sha": "3c6f620ea0b2e2be73b8d84961bc5f916f16675e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNmY2MjBlYTBiMmUyYmU3M2I4ZDg0OTYxYmM1ZjkxNmYxNjY3NWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-07T14:22:29Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-07T14:22:29Z"}, "message": "incr.comp.: Add -Zincremental-verify-ich, which allows to perform a consistency check for stored query result fingerprints.", "tree": {"sha": "cd4516eb4e2017d14c586780185971938cadad82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd4516eb4e2017d14c586780185971938cadad82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6f620ea0b2e2be73b8d84961bc5f916f16675e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6f620ea0b2e2be73b8d84961bc5f916f16675e", "html_url": "https://github.com/rust-lang/rust/commit/3c6f620ea0b2e2be73b8d84961bc5f916f16675e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6f620ea0b2e2be73b8d84961bc5f916f16675e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81fd279e815011a1b689fc49eceb761a0a6aef74", "url": "https://api.github.com/repos/rust-lang/rust/commits/81fd279e815011a1b689fc49eceb761a0a6aef74", "html_url": "https://github.com/rust-lang/rust/commit/81fd279e815011a1b689fc49eceb761a0a6aef74"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "51c53739e886e404d2532dc1f815a0b4e71372dd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f620ea0b2e2be73b8d84961bc5f916f16675e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f620ea0b2e2be73b8d84961bc5f916f16675e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3c6f620ea0b2e2be73b8d84961bc5f916f16675e", "patch": "@@ -1017,6 +1017,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"print high-level information about incremental reuse (or the lack thereof)\"),\n     incremental_dump_hash: bool = (false, parse_bool, [UNTRACKED],\n         \"dump hash information in textual format to stdout\"),\n+    incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n+        \"verify incr. comp. hashes of green query instances\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n           \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "41b701d0d272936b2124fca809a577d9f4c50014", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f620ea0b2e2be73b8d84961bc5f916f16675e/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f620ea0b2e2be73b8d84961bc5f916f16675e/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=3c6f620ea0b2e2be73b8d84961bc5f916f16675e", "patch": "@@ -327,7 +327,8 @@ macro_rules! define_maps {\n                         return Self::load_from_disk_and_cache_in_memory(tcx,\n                                                                         key,\n                                                                         span,\n-                                                                        dep_node_index)\n+                                                                        dep_node_index,\n+                                                                        &dep_node)\n                     }\n                 }\n \n@@ -372,7 +373,8 @@ macro_rules! define_maps {\n             fn load_from_disk_and_cache_in_memory(tcx: TyCtxt<'a, $tcx, 'lcx>,\n                                                   key: $K,\n                                                   span: Span,\n-                                                  dep_node_index: DepNodeIndex)\n+                                                  dep_node_index: DepNodeIndex,\n+                                                  dep_node: &DepNode)\n                                                   -> Result<$V, CycleError<'a, $tcx>>\n             {\n                 debug_assert!(tcx.dep_graph.is_green(dep_node_index));\n@@ -390,6 +392,32 @@ macro_rules! define_maps {\n                     })\n                 })?;\n \n+                // If -Zincremental-verify-ich is specified, re-hash results from\n+                // the cache and make sure that they have the expected fingerprint.\n+                if tcx.sess.opts.debugging_opts.incremental_verify_ich {\n+                    use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n+                    use ich::Fingerprint;\n+\n+                    assert!(Some(tcx.dep_graph.fingerprint_of(dep_node)) ==\n+                            tcx.dep_graph.prev_fingerprint_of(dep_node),\n+                            \"Fingerprint for green query instance not loaded \\\n+                             from cache: {:?}\", dep_node);\n+\n+                    debug!(\"BEGIN verify_ich({:?})\", dep_node);\n+                    let mut hcx = tcx.create_stable_hashing_context();\n+                    let mut hasher = StableHasher::new();\n+\n+                    result.hash_stable(&mut hcx, &mut hasher);\n+\n+                    let new_hash: Fingerprint = hasher.finish();\n+                    debug!(\"END verify_ich({:?})\", dep_node);\n+\n+                    let old_hash = tcx.dep_graph.fingerprint_of(dep_node);\n+\n+                    assert!(new_hash == old_hash, \"Found unstable fingerprints \\\n+                        for {:?}\", dep_node);\n+                }\n+\n                 if tcx.sess.opts.debugging_opts.query_dep_graph {\n                     tcx.dep_graph.mark_loaded_from_cache(dep_node_index, true);\n                 }"}]}