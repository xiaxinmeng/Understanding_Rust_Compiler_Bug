{"sha": "ae2f1853491540b9e70be2209b235f6c920706a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMmYxODUzNDkxNTQwYjllNzBiZTIyMDliMjM1ZjZjOTIwNzA2YTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T14:10:18Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T14:20:43Z"}, "message": "Convert vec::{partition, partitioned} to methods.", "tree": {"sha": "134d172861f6cf7d4a243c53cc3830327fdf331a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134d172861f6cf7d4a243c53cc3830327fdf331a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae2f1853491540b9e70be2209b235f6c920706a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2f1853491540b9e70be2209b235f6c920706a8", "html_url": "https://github.com/rust-lang/rust/commit/ae2f1853491540b9e70be2209b235f6c920706a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae2f1853491540b9e70be2209b235f6c920706a8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4", "html_url": "https://github.com/rust-lang/rust/commit/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4"}], "stats": {"total": 77, "additions": 29, "deletions": 48}, "files": [{"sha": "7b68298a8dddd7f779d617b13b655079a0b6650f", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae2f1853491540b9e70be2209b235f6c920706a8/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2f1853491540b9e70be2209b235f6c920706a8/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=ae2f1853491540b9e70be2209b235f6c920706a8", "patch": "@@ -431,7 +431,7 @@ fn run_tests(opts: &TestOpts,\n     callback(TeFiltered(filtered_descs));\n \n     let (filtered_tests, filtered_benchs) =\n-        do vec::partition(filtered_tests) |e| {\n+        do filtered_tests.partition |e| {\n         match e.testfn {\n             StaticTestFn(_) | DynTestFn(_) => true,\n             StaticBenchFn(_) | DynBenchFn(_) => false"}, {"sha": "4dbc0c4e3e04ee372df8da0b3ee88216d98c3942", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 28, "deletions": 47, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ae2f1853491540b9e70be2209b235f6c920706a8/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2f1853491540b9e70be2209b235f6c920706a8/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=ae2f1853491540b9e70be2209b235f6c920706a8", "patch": "@@ -337,46 +337,6 @@ pub fn rsplitn<T:Copy>(v: &[T], n: uint, f: &fn(t: &T) -> bool) -> ~[~[T]] {\n     result\n }\n \n-/**\n- * Partitions a vector into two new vectors: those that satisfies the\n- * predicate, and those that do not.\n- */\n-pub fn partition<T>(v: ~[T], f: &fn(&T) -> bool) -> (~[T], ~[T]) {\n-    let mut lefts  = ~[];\n-    let mut rights = ~[];\n-\n-    // FIXME (#4355 maybe): using v.consume here crashes\n-    // do v.consume |_, elt| {\n-    do consume(v) |_, elt| {\n-        if f(&elt) {\n-            lefts.push(elt);\n-        } else {\n-            rights.push(elt);\n-        }\n-    }\n-\n-    (lefts, rights)\n-}\n-\n-/**\n- * Partitions a vector into two new vectors: those that satisfies the\n- * predicate, and those that do not.\n- */\n-pub fn partitioned<T:Copy>(v: &[T], f: &fn(&T) -> bool) -> (~[T], ~[T]) {\n-    let mut lefts  = ~[];\n-    let mut rights = ~[];\n-\n-    for v.iter().advance |elt| {\n-        if f(elt) {\n-            lefts.push(copy *elt);\n-        } else {\n-            rights.push(copy *elt);\n-        }\n-    }\n-\n-    (lefts, rights)\n-}\n-\n /// Consumes all elements, in a vector, moving them out into the / closure\n /// provided. The vector is traversed from the start to the end.\n ///\n@@ -1572,7 +1532,18 @@ impl<'self,T:Copy> ImmutableCopyableVector<T> for &'self [T] {\n      */\n     #[inline]\n     fn partitioned(&self, f: &fn(&T) -> bool) -> (~[T], ~[T]) {\n-        partitioned(*self, f)\n+        let mut lefts  = ~[];\n+        let mut rights = ~[];\n+\n+        for self.iter().advance |elt| {\n+            if f(elt) {\n+                lefts.push(copy *elt);\n+            } else {\n+                rights.push(copy *elt);\n+            }\n+        }\n+\n+        (lefts, rights)\n     }\n \n     /// Returns the element at the given index, without doing bounds checking.\n@@ -1842,7 +1813,18 @@ impl<T> OwnedVector<T> for ~[T] {\n      */\n     #[inline]\n     fn partition(self, f: &fn(&T) -> bool) -> (~[T], ~[T]) {\n-        partition(self, f)\n+        let mut lefts  = ~[];\n+        let mut rights = ~[];\n+\n+        do self.consume |_, elt| {\n+            if f(&elt) {\n+                lefts.push(elt);\n+            } else {\n+                rights.push(elt);\n+            }\n+        }\n+\n+        (lefts, rights)\n     }\n \n     #[inline]\n@@ -3228,11 +3210,10 @@ mod tests {\n \n     #[test]\n     fn test_partition() {\n-        // FIXME (#4355 maybe): using v.partition here crashes\n-        assert_eq!(partition(~[], |x: &int| *x < 3), (~[], ~[]));\n-        assert_eq!(partition(~[1, 2, 3], |x: &int| *x < 4), (~[1, 2, 3], ~[]));\n-        assert_eq!(partition(~[1, 2, 3], |x: &int| *x < 2), (~[1], ~[2, 3]));\n-        assert_eq!(partition(~[1, 2, 3], |x: &int| *x < 0), (~[], ~[1, 2, 3]));\n+        assert_eq!((~[]).partition(|x: &int| *x < 3), (~[], ~[]));\n+        assert_eq!((~[1, 2, 3]).partition(|x: &int| *x < 4), (~[1, 2, 3], ~[]));\n+        assert_eq!((~[1, 2, 3]).partition(|x: &int| *x < 2), (~[1], ~[2, 3]));\n+        assert_eq!((~[1, 2, 3]).partition(|x: &int| *x < 0), (~[], ~[1, 2, 3]));\n     }\n \n     #[test]"}]}