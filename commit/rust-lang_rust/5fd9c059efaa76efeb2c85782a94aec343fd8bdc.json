{"sha": "5fd9c059efaa76efeb2c85782a94aec343fd8bdc", "node_id": "C_kwDOAAsO6NoAKDVmZDljMDU5ZWZhYTc2ZWZlYjJjODU3ODJhOTRhZWMzNDNmZDhiZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-22T14:32:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-22T14:32:53Z"}, "message": "Rollup merge of #93147 - nnethercote:interner-cleanups, r=lcnr\n\nInterner cleanups\n\nImprove some code that I have found confusing.\n\nr? ```@lcnr```", "tree": {"sha": "b455f945cbf673f7f313d5719d15f9c904c8c058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b455f945cbf673f7f313d5719d15f9c904c8c058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd9c059efaa76efeb2c85782a94aec343fd8bdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7BWWCRBK7hj4Ov3rIwAAto4IAHdHMMog4lEo+iVHlWDaOVkc\nlvyyvQeo/xeq3WZ0gzCUtjeTeekXrgOk+VOhWYCk2IF5zP2vHX1D6OdyqLti6QPM\nWVy3zyM6VDyQ5b6NGqT+crb2gwq79uH67jR/dWsIoFkT+khVDNZSkaC8EApcVWab\nNmW65BtGBvg9XDQY3PJJs2uM5256ZLSndTI+A41b/qiLe5JqR7c0X/WjN9u0YSSW\nh2qLiAjY95eVBl8su1FGAo15dIgQ+huscBEU6DBQlVxPj6ViLaplUB2SByrtphIs\n15kOJxUXNn48TJm2BxT2TXXe5Y5MumI8AHSYsvrLIDaR0xuNw5hHXG79sbXlw+4=\n=qWFw\n-----END PGP SIGNATURE-----\n", "payload": "tree b455f945cbf673f7f313d5719d15f9c904c8c058\nparent 45f5f342930f17b6eeca962d0ff25d889f4e6cc6\nparent d46ed5d3333770ac490d587878d708c3be17f137\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642861973 +0100\ncommitter GitHub <noreply@github.com> 1642861973 +0100\n\nRollup merge of #93147 - nnethercote:interner-cleanups, r=lcnr\n\nInterner cleanups\n\nImprove some code that I have found confusing.\n\nr? ```@lcnr```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd9c059efaa76efeb2c85782a94aec343fd8bdc", "html_url": "https://github.com/rust-lang/rust/commit/5fd9c059efaa76efeb2c85782a94aec343fd8bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd9c059efaa76efeb2c85782a94aec343fd8bdc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f5f342930f17b6eeca962d0ff25d889f4e6cc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f5f342930f17b6eeca962d0ff25d889f4e6cc6", "html_url": "https://github.com/rust-lang/rust/commit/45f5f342930f17b6eeca962d0ff25d889f4e6cc6"}, {"sha": "d46ed5d3333770ac490d587878d708c3be17f137", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46ed5d3333770ac490d587878d708c3be17f137", "html_url": "https://github.com/rust-lang/rust/commit/d46ed5d3333770ac490d587878d708c3be17f137"}], "stats": {"total": 113, "additions": 69, "deletions": 44}, "files": [{"sha": "f613cd0d4503b7ebdaf220afa40543922a4497d3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 52, "deletions": 44, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5fd9c059efaa76efeb2c85782a94aec343fd8bdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd9c059efaa76efeb2c85782a94aec343fd8bdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5fd9c059efaa76efeb2c85782a94aec343fd8bdc", "patch": "@@ -113,6 +113,12 @@ pub struct CtxtInterners<'tcx> {\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, Layout>,\n     adt_def: InternedSet<'tcx, AdtDef>,\n+\n+    /// `#[stable]` and `#[unstable]` attributes\n+    stability: InternedSet<'tcx, attr::Stability>,\n+\n+    /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes\n+    const_stability: InternedSet<'tcx, attr::ConstStability>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -134,6 +140,8 @@ impl<'tcx> CtxtInterners<'tcx> {\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n             adt_def: Default::default(),\n+            stability: Default::default(),\n+            const_stability: Default::default(),\n         }\n     }\n \n@@ -1035,12 +1043,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,\n \n-    /// `#[stable]` and `#[unstable]` attributes\n-    stability_interner: ShardedHashMap<&'tcx attr::Stability, ()>,\n-\n-    /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes\n-    const_stability_interner: ShardedHashMap<&'tcx attr::ConstStability, ()>,\n-\n     /// Stores memory for globals (statics/consts).\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n \n@@ -1092,16 +1094,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.create_memory_alloc(alloc)\n     }\n \n-    // FIXME(eddyb) move to `direct_interners!`.\n-    pub fn intern_stability(self, stab: attr::Stability) -> &'tcx attr::Stability {\n-        self.stability_interner.intern(stab, |stab| self.arena.alloc(stab))\n-    }\n-\n-    // FIXME(eddyb) move to `direct_interners!`.\n-    pub fn intern_const_stability(self, stab: attr::ConstStability) -> &'tcx attr::ConstStability {\n-        self.const_stability_interner.intern(stab, |stab| self.arena.alloc(stab))\n-    }\n-\n     /// Returns a range of the start/end indices specified with the\n     /// `rustc_layout_scalar_valid_range` attribute.\n     // FIXME(eddyb) this is an awkward spot for this method, maybe move it?\n@@ -1185,8 +1177,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             evaluation_cache: Default::default(),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n-            stability_interner: Default::default(),\n-            const_stability_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             output_filenames: Arc::new(output_filenames),\n         }\n@@ -1952,11 +1942,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n                 writeln!(fmt, \"InternalSubsts interner: #{}\", self.0.interners.substs.len())?;\n                 writeln!(fmt, \"Region interner: #{}\", self.0.interners.region.len())?;\n-                writeln!(fmt, \"Stability interner: #{}\", self.0.stability_interner.len())?;\n+                writeln!(fmt, \"Stability interner: #{}\", self.0.interners.stability.len())?;\n                 writeln!(\n                     fmt,\n                     \"Const Stability interner: #{}\",\n-                    self.0.const_stability_interner.len()\n+                    self.0.interners.const_stability.len()\n                 )?;\n                 writeln!(\n                     fmt,\n@@ -1973,24 +1963,37 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-/// An entry in an interner.\n+// This type holds a `T` in the interner. The `T` is stored in the arena and\n+// this type just holds a pointer to it, but it still effectively owns it. It\n+// impls `Borrow` so that it can be looked up using the original\n+// (non-arena-memory-owning) types.\n struct Interned<'tcx, T: ?Sized>(&'tcx T);\n \n impl<'tcx, T: 'tcx + ?Sized> Clone for Interned<'tcx, T> {\n     fn clone(&self) -> Self {\n         Interned(self.0)\n     }\n }\n+\n impl<'tcx, T: 'tcx + ?Sized> Copy for Interned<'tcx, T> {}\n \n impl<'tcx, T: 'tcx + ?Sized> IntoPointer for Interned<'tcx, T> {\n     fn into_pointer(&self) -> *const () {\n         self.0 as *const _ as *const ()\n     }\n }\n-// N.B., an `Interned<Ty>` compares and hashes as a `TyKind`.\n+\n+#[allow(rustc::usage_of_ty_tykind)]\n+impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n+        &self.0.kind()\n+    }\n+}\n+\n impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {\n+        // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n+        // `x == y`.\n         self.0.kind() == other.0.kind()\n     }\n }\n@@ -1999,19 +2002,21 @@ impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}\n \n impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind().hash(s)\n     }\n }\n \n-#[allow(rustc::usage_of_ty_tykind)]\n-impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n-        &self.0.kind()\n+impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n+        &self.0.kind\n     }\n }\n-// N.B., an `Interned<PredicateInner>` compares and hashes as a `PredicateKind`.\n+\n impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {\n+        // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n+        // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n@@ -2020,19 +2025,21 @@ impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}\n \n impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)\n     }\n }\n \n-impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n-        &self.0.kind\n+impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {\n+    fn borrow<'a>(&'a self) -> &'a [T] {\n+        &self.0[..]\n     }\n }\n \n-// N.B., an `Interned<List<T>>` compares and hashes as its elements.\n impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {\n     fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {\n+        // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n+        // `x == y`.\n         self.0[..] == other.0[..]\n     }\n }\n@@ -2041,20 +2048,23 @@ impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}\n \n impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0[..].hash(s)\n     }\n }\n \n-impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {\n-    fn borrow<'a>(&'a self) -> &'a [T] {\n-        &self.0[..]\n-    }\n-}\n-\n macro_rules! direct_interners {\n     ($($name:ident: $method:ident($ty:ty),)+) => {\n-        $(impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n+        $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {\n+            fn borrow<'a>(&'a self) -> &'a $ty {\n+                &self.0\n+            }\n+        }\n+\n+        impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n             fn eq(&self, other: &Self) -> bool {\n+                // The `Borrow` trait requires that `x.borrow() == y.borrow()`\n+                // equals `x == y`.\n                 self.0 == other.0\n             }\n         }\n@@ -2063,16 +2073,12 @@ macro_rules! direct_interners {\n \n         impl<'tcx> Hash for Interned<'tcx, $ty> {\n             fn hash<H: Hasher>(&self, s: &mut H) {\n+                // The `Borrow` trait requires that `x.borrow().hash(s) ==\n+                // x.hash(s)`.\n                 self.0.hash(s)\n             }\n         }\n \n-        impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {\n-            fn borrow<'a>(&'a self) -> &'a $ty {\n-                &self.0\n-            }\n-        }\n-\n         impl<'tcx> TyCtxt<'tcx> {\n             pub fn $method(self, v: $ty) -> &'tcx $ty {\n                 self.interners.$name.intern(v, |v| {\n@@ -2089,6 +2095,8 @@ direct_interners! {\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),\n     adt_def: intern_adt_def(AdtDef),\n+    stability: intern_stability(attr::Stability),\n+    const_stability: intern_const_stability(attr::ConstStability),\n }\n \n macro_rules! slice_interners {"}, {"sha": "8ed1533436ed1f18273bbae747b699cc5eea4da8", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fd9c059efaa76efeb2c85782a94aec343fd8bdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd9c059efaa76efeb2c85782a94aec343fd8bdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5fd9c059efaa76efeb2c85782a94aec343fd8bdc", "patch": "@@ -376,15 +376,28 @@ pub struct CReaderCacheKey {\n     pub pos: usize,\n }\n \n+/// Represents a type.\n+///\n+/// IMPORTANT: Every `TyS` is *required* to have unique contents. The type's\n+/// correctness relies on this, *but it does not enforce it*. Therefore, any\n+/// code that creates a `TyS` must ensure uniqueness itself. In practice this\n+/// is achieved by interning.\n #[allow(rustc::usage_of_ty_tykind)]\n pub struct TyS<'tcx> {\n     /// This field shouldn't be used directly and may be removed in the future.\n     /// Use `TyS::kind()` instead.\n     kind: TyKind<'tcx>,\n+\n+    /// This field provides fast access to information that is also contained\n+    /// in `kind`.\n+    ///\n     /// This field shouldn't be used directly and may be removed in the future.\n     /// Use `TyS::flags()` instead.\n     flags: TypeFlags,\n \n+    /// This field provides fast access to information that is also contained\n+    /// in `kind`.\n+    ///\n     /// This is a kind of confusing thing: it stores the smallest\n     /// binder such that\n     ///\n@@ -436,13 +449,17 @@ impl<'tcx> PartialOrd for TyS<'tcx> {\n impl<'tcx> PartialEq for TyS<'tcx> {\n     #[inline]\n     fn eq(&self, other: &TyS<'tcx>) -> bool {\n+        // Pointer equality implies equality (due to the unique contents\n+        // assumption).\n         ptr::eq(self, other)\n     }\n }\n impl<'tcx> Eq for TyS<'tcx> {}\n \n impl<'tcx> Hash for TyS<'tcx> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // Pointer hashing is sufficient (due to the unique contents\n+        // assumption).\n         (self as *const TyS<'_>).hash(s)\n     }\n }"}]}