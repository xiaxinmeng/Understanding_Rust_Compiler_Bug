{"sha": "9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYmJhN2JjNDVlYzZiZWE5NDY4OTMxZDlkOWZkZDAxNDE4MjZmMGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-06T09:45:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-06T09:45:41Z"}, "message": "Add chalk_ir::Const to TyKind::Array", "tree": {"sha": "266da1eafcd60457fa99cc422a415e27992c08d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/266da1eafcd60457fa99cc422a415e27992c08d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "html_url": "https://github.com/rust-lang/rust/commit/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "047b5313013383fc4fafaef6d6d8d6a64549e3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/047b5313013383fc4fafaef6d6d8d6a64549e3cb", "html_url": "https://github.com/rust-lang/rust/commit/047b5313013383fc4fafaef6d6d8d6a64549e3cb"}], "stats": {"total": 154, "additions": 109, "deletions": 45}, "files": [{"sha": "dfc1d8a0c6bc15730e82396eb334c1762480bf15", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -1888,7 +1888,7 @@ impl Type {\n                     substs.iter(&Interner).filter_map(|a| a.ty(&Interner)).any(go)\n                 }\n \n-                TyKind::Array(ty)\n+                TyKind::Array(ty, _)\n                 | TyKind::Slice(ty)\n                 | TyKind::Raw(_, ty)\n                 | TyKind::Ref(_, _, ty) => go(ty),\n@@ -2151,7 +2151,7 @@ impl Type {\n \n                 TyKind::Ref(_, _, ty)\n                 | TyKind::Raw(_, ty)\n-                | TyKind::Array(ty)\n+                | TyKind::Array(ty, _)\n                 | TyKind::Slice(ty) => {\n                     walk_type(db, &type_.derived(ty.clone()), cb);\n                 }"}, {"sha": "326c202404225026cd52012bfd9687db0d4560a6", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -88,6 +88,8 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_lifetime_param_id(&self, param_id: LifetimeParamId) -> InternedLifetimeParamId;\n     #[salsa::interned]\n+    fn intern_const_param_id(&self, param_id: ConstParamId) -> InternedConstParamId;\n+    #[salsa::interned]\n     fn intern_impl_trait_id(&self, id: ImplTraitId) -> InternedOpaqueTyId;\n     #[salsa::interned]\n     fn intern_closure(&self, id: (DefWithBodyId, ExprId)) -> InternedClosureId;\n@@ -161,6 +163,10 @@ impl_intern_key!(InternedTypeParamId);\n pub struct InternedLifetimeParamId(salsa::InternId);\n impl_intern_key!(InternedLifetimeParamId);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct InternedConstParamId(salsa::InternId);\n+impl_intern_key!(InternedConstParamId);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct InternedOpaqueTyId(salsa::InternId);\n impl_intern_key!(InternedOpaqueTyId);"}, {"sha": "8fe4ed3fa1edd7b6684e3f49016f8cad701ba31b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -5,6 +5,7 @@ use std::{\n     fmt::{self, Debug},\n };\n \n+use chalk_ir::BoundVar;\n use hir_def::{\n     db::DefDatabase,\n     find_path,\n@@ -18,12 +19,12 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx,\n-    lt_from_placeholder_idx, primitive, subst_prefix, to_assoc_type_id, traits::chalk::from_chalk,\n-    utils::generics, AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, DomainGoal, GenericArg,\n-    ImplTraitId, Interner, Lifetime, LifetimeData, LifetimeOutlives, Mutability, OpaqueTy,\n-    ProjectionTy, ProjectionTyExt, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind,\n-    WhereClause,\n+    const_from_placeholder_idx, db::HirDatabase, from_assoc_type_id, from_foreign_def_id,\n+    from_placeholder_idx, lt_from_placeholder_idx, primitive, subst_prefix, to_assoc_type_id,\n+    traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId,\n+    CallableSig, Const, ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime,\n+    LifetimeData, LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt,\n+    QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind, WhereClause,\n };\n \n pub struct HirFormatter<'a> {\n@@ -290,6 +291,29 @@ impl HirDisplay for GenericArg {\n     }\n }\n \n+impl HirDisplay for Const {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        let data = self.interned();\n+        match data.value {\n+            ConstValue::BoundVar(idx) => idx.hir_fmt(f),\n+            ConstValue::InferenceVar(..) => write!(f, \"_\"),\n+            ConstValue::Placeholder(idx) => {\n+                let id = const_from_placeholder_idx(f.db, idx);\n+                let generics = generics(f.db.upcast(), id.parent);\n+                let param_data = &generics.params.consts[id.local_id];\n+                write!(f, \"{}\", param_data.name)\n+            }\n+            ConstValue::Concrete(_) => write!(f, \"_\"),\n+        }\n+    }\n+}\n+\n+impl HirDisplay for BoundVar {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        write!(f, \"?{}.{}\", self.debruijn.depth(), self.index)\n+    }\n+}\n+\n impl HirDisplay for Ty {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {\n@@ -309,10 +333,12 @@ impl HirDisplay for Ty {\n                 t.hir_fmt(f)?;\n                 write!(f, \"]\")?;\n             }\n-            TyKind::Array(t) => {\n+            TyKind::Array(t, c) => {\n                 write!(f, \"[\")?;\n                 t.hir_fmt(f)?;\n-                write!(f, \"; _]\")?;\n+                write!(f, \"; \")?;\n+                c.hir_fmt(f)?;\n+                write!(f, \"]\")?;\n             }\n             TyKind::Raw(m, t) | TyKind::Ref(m, _, t) => {\n                 let ty_display =\n@@ -617,7 +643,7 @@ impl HirDisplay for Ty {\n                     }\n                 }\n             }\n-            TyKind::BoundVar(idx) => write!(f, \"?{}.{}\", idx.debruijn.depth(), idx.index)?,\n+            TyKind::BoundVar(idx) => idx.hir_fmt(f)?,\n             TyKind::Dyn(dyn_ty) => {\n                 write_bounds_like_dyn_trait_with_prefix(\n                     \"dyn\",\n@@ -850,7 +876,7 @@ impl HirDisplay for Lifetime {\n impl HirDisplay for LifetimeData {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         match self {\n-            LifetimeData::BoundVar(idx) => write!(f, \"?{}.{}\", idx.debruijn.depth(), idx.index),\n+            LifetimeData::BoundVar(idx) => idx.hir_fmt(f),\n             LifetimeData::InferenceVar(_) => write!(f, \"_\"),\n             LifetimeData::Placeholder(idx) => {\n                 let id = lt_from_placeholder_idx(f.db, *idx);"}, {"sha": "53d94fd0da337c72f485880828495a833dd4f00b", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -15,7 +15,7 @@ use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n-    autoderef,\n+    autoderef, dummy_usize_const,\n     lower::lower_to_chalk_mutability,\n     method_resolution, op,\n     primitive::{self, UintTy},\n@@ -702,7 +702,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::Array(array) => {\n                 let elem_ty = match expected.ty.kind(&Interner) {\n-                    TyKind::Array(st) | TyKind::Slice(st) => st.clone(),\n+                    TyKind::Array(st, _) | TyKind::Slice(st) => st.clone(),\n                     _ => self.table.new_type_var(),\n                 };\n \n@@ -726,7 +726,7 @@ impl<'a> InferenceContext<'a> {\n                     }\n                 }\n \n-                TyKind::Array(elem_ty).intern(&Interner)\n+                TyKind::Array(elem_ty, dummy_usize_const()).intern(&Interner)\n             }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n@@ -736,7 +736,8 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 Literal::ByteString(..) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n-                    let array_type = TyKind::Array(byte_type).intern(&Interner);\n+                    let array_type =\n+                        TyKind::Array(byte_type, dummy_usize_const()).intern(&Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(&Interner)\n                 }\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(&Interner),"}, {"sha": "c1d7a6b763d8229589e218760c75b4f053b615a4", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -214,17 +214,20 @@ impl<'a> InferenceContext<'a> {\n                 return inner_ty;\n             }\n             Pat::Slice { prefix, slice, suffix } => {\n-                let (container_ty, elem_ty): (fn(_) -> _, _) = match expected.kind(&Interner) {\n-                    TyKind::Array(st) => (TyKind::Array, st.clone()),\n-                    TyKind::Slice(st) => (TyKind::Slice, st.clone()),\n-                    _ => (TyKind::Slice, self.err_ty()),\n+                let elem_ty = match expected.kind(&Interner) {\n+                    TyKind::Array(st, _) | TyKind::Slice(st) => st.clone(),\n+                    _ => self.err_ty(),\n                 };\n \n                 for pat_id in prefix.iter().chain(suffix) {\n                     self.infer_pat(*pat_id, &elem_ty, default_bm);\n                 }\n \n-                let pat_ty = container_ty(elem_ty).intern(&Interner);\n+                let pat_ty = match expected.kind(&Interner) {\n+                    TyKind::Array(_, const_) => TyKind::Array(elem_ty, const_.clone()),\n+                    _ => TyKind::Slice(elem_ty),\n+                }\n+                .intern(&Interner);\n                 if let Some(slice_pat_id) = slice {\n                     self.infer_pat(*slice_pat_id, &pat_ty, default_bm);\n                 }"}, {"sha": "7d76cda68450ac6a8e1f81e96089edd2af703633", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -317,9 +317,11 @@ impl InferenceTable {\n                 | (TyKind::Closure(.., substs1), TyKind::Closure(.., substs2)) => {\n                     self.unify_substs(substs1, substs2, depth + 1)\n                 }\n+                (TyKind::Array(ty1, c1), TyKind::Array(ty2, c2)) if c1 == c2 => {\n+                    self.unify_inner(ty1, ty2, depth + 1)\n+                }\n                 (TyKind::Ref(_, _, ty1), TyKind::Ref(_, _, ty2))\n                 | (TyKind::Raw(_, ty1), TyKind::Raw(_, ty2))\n-                | (TyKind::Array(ty1), TyKind::Array(ty2))\n                 | (TyKind::Slice(ty1), TyKind::Slice(ty2)) => self.unify_inner(ty1, ty2, depth + 1),\n                 _ => true, /* we checked equals_ctor already */\n             }"}, {"sha": "a2a5bcc07a248108335ef9b0d3bf461886f934dc", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -30,12 +30,13 @@ mod test_db;\n \n use std::sync::Arc;\n \n+use chalk_ir::UintTy;\n use itertools::Itertools;\n \n use base_db::salsa;\n use hir_def::{\n-    expr::ExprId, type_ref::Rawness, AssocContainerId, FunctionId, GenericDefId, HasModule,\n-    LifetimeParamId, Lookup, TraitId, TypeAliasId, TypeParamId,\n+    expr::ExprId, type_ref::Rawness, AssocContainerId, ConstParamId, FunctionId, GenericDefId,\n+    HasModule, LifetimeParamId, Lookup, TraitId, TypeAliasId, TypeParamId,\n };\n \n use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n@@ -71,6 +72,11 @@ pub type Lifetime = chalk_ir::Lifetime<Interner>;\n pub type LifetimeData = chalk_ir::LifetimeData<Interner>;\n pub type LifetimeOutlives = chalk_ir::LifetimeOutlives<Interner>;\n \n+pub type Const = chalk_ir::Const<Interner>;\n+pub type ConstData = chalk_ir::ConstData<Interner>;\n+pub type ConstValue = chalk_ir::ConstValue<Interner>;\n+pub type ConcreteConst = chalk_ir::ConcreteConst<Interner>;\n+\n pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n \n pub type FnSig = chalk_ir::FnSig<Interner>;\n@@ -227,7 +233,9 @@ impl Ty {\n     pub fn equals_ctor(&self, other: &Ty) -> bool {\n         match (self.kind(&Interner), other.kind(&Interner)) {\n             (TyKind::Adt(adt, ..), TyKind::Adt(adt2, ..)) => adt == adt2,\n-            (TyKind::Slice(_), TyKind::Slice(_)) | (TyKind::Array(_), TyKind::Array(_)) => true,\n+            (TyKind::Slice(_), TyKind::Slice(_)) | (TyKind::Array(_, _), TyKind::Array(_, _)) => {\n+                true\n+            }\n             (TyKind::FnDef(def_id, ..), TyKind::FnDef(def_id2, ..)) => def_id == def_id2,\n             (TyKind::OpaqueType(ty_id, ..), TyKind::OpaqueType(ty_id2, ..)) => ty_id == ty_id2,\n             (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..)) => {\n@@ -488,6 +496,12 @@ pub fn lt_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> L\n     db.lookup_intern_lifetime_param_id(interned_id)\n }\n \n+pub fn const_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> ConstParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_const_param_id(interned_id)\n+}\n+\n pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n     chalk_ir::TraitId(salsa::InternKey::as_intern_id(&id))\n }\n@@ -499,3 +513,12 @@ pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n pub fn static_lifetime() -> Lifetime {\n     LifetimeData::Static.intern(&Interner)\n }\n+\n+pub fn dummy_usize_const() -> Const {\n+    let usize_ty = chalk_ir::TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner);\n+    chalk_ir::ConstData {\n+        ty: usize_ty,\n+        value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: () }),\n+    }\n+    .intern(&Interner)\n+}"}, {"sha": "8be1bcddb6836e0d809067d46b1a7cb07f938d14", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -27,7 +27,7 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n+    dummy_usize_const, static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n@@ -166,7 +166,7 @@ impl<'a> TyLoweringContext<'a> {\n             }\n             TypeRef::Array(inner) => {\n                 let inner_ty = self.lower_ty(inner);\n-                TyKind::Array(inner_ty).intern(&Interner)\n+                TyKind::Array(inner_ty, dummy_usize_const()).intern(&Interner)\n             }\n             TypeRef::Slice(inner) => {\n                 let inner_ty = self.lower_ty(inner);"}, {"sha": "5042bfbcad6e9a684f12e45694ee0dd6455a3f5c", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -842,7 +842,9 @@ fn autoderef_method_receiver(\n ) -> Vec<Canonical<Ty>> {\n     let mut deref_chain: Vec<_> = autoderef::autoderef(db, Some(krate), ty).collect();\n     // As a last step, we can do array unsizing (that's the only unsizing that rustc does for method receivers!)\n-    if let Some(TyKind::Array(parameters)) = deref_chain.last().map(|ty| ty.value.kind(&Interner)) {\n+    if let Some(TyKind::Array(parameters, _)) =\n+        deref_chain.last().map(|ty| ty.value.kind(&Interner))\n+    {\n         let kinds = deref_chain.last().unwrap().binders.clone();\n         let unsized_ty = TyKind::Slice(parameters.clone()).intern(&Interner);\n         deref_chain.push(Canonical { value: unsized_ty, binders: kinds })"}, {"sha": "cf73cb07845c1f61f860bc0825ccd97abfb8cf11", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -10,9 +10,10 @@ use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, static_lifetime, AliasTy,\n-    CallableDefId, Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, Lifetime, OpaqueTy,\n-    ProjectionTy, QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n+    chalk_ext::ProjectionTyExt, db::HirDatabase, dummy_usize_const, static_lifetime, AliasTy,\n+    CallableDefId, Canonical, Const, DomainGoal, FnPointer, GenericArg, InEnvironment, Lifetime,\n+    OpaqueTy, ProjectionTy, QuantifiedWhereClause, Substitution, TraitRef, Ty, TypeWalk,\n+    WhereClause,\n };\n \n use super::interner::*;\n@@ -23,7 +24,7 @@ impl ToChalk for Ty {\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Ty<Interner> {\n         match self.into_inner() {\n             TyKind::Ref(m, lt, ty) => ref_to_chalk(db, m, lt, ty),\n-            TyKind::Array(ty) => array_to_chalk(db, ty),\n+            TyKind::Array(ty, size) => array_to_chalk(db, ty, size),\n             TyKind::Function(FnPointer { sig, substitution: substs, .. }) => {\n                 let substitution = chalk_ir::FnSubst(substs.0.to_chalk(db));\n                 chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n@@ -110,7 +111,7 @@ impl ToChalk for Ty {\n     fn from_chalk(db: &dyn HirDatabase, chalk: chalk_ir::Ty<Interner>) -> Self {\n         match chalk.data(&Interner).kind.clone() {\n             chalk_ir::TyKind::Error => TyKind::Error,\n-            chalk_ir::TyKind::Array(ty, _size) => TyKind::Array(from_chalk(db, ty)),\n+            chalk_ir::TyKind::Array(ty, size) => TyKind::Array(from_chalk(db, ty), size),\n             chalk_ir::TyKind::Placeholder(idx) => TyKind::Placeholder(idx),\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n                 let associated_ty = proj.associated_ty_id;\n@@ -203,15 +204,9 @@ fn ref_to_chalk(\n \n /// We currently don't model constants, but Chalk does. So, we have to insert a\n /// fake constant here, because Chalks built-in logic may expect it to be there.\n-fn array_to_chalk(db: &dyn HirDatabase, ty: Ty) -> chalk_ir::Ty<Interner> {\n+fn array_to_chalk(db: &dyn HirDatabase, ty: Ty, _: Const) -> chalk_ir::Ty<Interner> {\n     let arg = ty.to_chalk(db);\n-    let usize_ty = chalk_ir::TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner);\n-    let const_ = chalk_ir::ConstData {\n-        ty: usize_ty,\n-        value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: () }),\n-    }\n-    .intern(&Interner);\n-    chalk_ir::TyKind::Array(arg, const_).intern(&Interner)\n+    chalk_ir::TyKind::Array(arg, dummy_usize_const()).intern(&Interner)\n }\n \n impl ToChalk for GenericArg {"}, {"sha": "89c0ddd1a4e1ab1e4f64e390be01d268a738e48c", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -10,7 +10,7 @@ use chalk_ir::{\n use smallvec::SmallVec;\n \n use crate::{\n-    AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, FnDefId, FnSig, ForeignDefId,\n+    AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, Const, FnDefId, FnSig, ForeignDefId,\n     InferenceVar, Interner, Lifetime, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKind,\n     VariableKinds,\n };\n@@ -114,7 +114,7 @@ pub enum TyKind {\n     Tuple(usize, Substitution),\n \n     /// An array with the given length. Written as `[T; n]`.\n-    Array(Ty),\n+    Array(Ty, Const),\n \n     /// The pointee of an array slice.  Written as `[T]`.\n     Slice(Ty),"}, {"sha": "41ebf6137c396d95e8081dcf17b58555cc3bc67e", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbba7bc45ec6bea9468931d9d9fdd0141826f0a/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=9fbba7bc45ec6bea9468931d9d9fdd0141826f0a", "patch": "@@ -153,7 +153,10 @@ impl TypeWalk for Ty {\n                     p.walk(f);\n                 }\n             }\n-            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, _, ty) | TyKind::Raw(_, ty) => {\n+            TyKind::Slice(ty)\n+            | TyKind::Array(ty, _)\n+            | TyKind::Ref(_, _, ty)\n+            | TyKind::Raw(_, ty) => {\n                 ty.walk(f);\n             }\n             TyKind::Function(fn_pointer) => {\n@@ -187,7 +190,10 @@ impl TypeWalk for Ty {\n             TyKind::Alias(AliasTy::Opaque(o_ty)) => {\n                 o_ty.substitution.walk_mut_binders(f, binders);\n             }\n-            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, _, ty) | TyKind::Raw(_, ty) => {\n+            TyKind::Slice(ty)\n+            | TyKind::Array(ty, _)\n+            | TyKind::Ref(_, _, ty)\n+            | TyKind::Raw(_, ty) => {\n                 ty.walk_mut_binders(f, binders);\n             }\n             TyKind::Function(fn_pointer) => {"}]}