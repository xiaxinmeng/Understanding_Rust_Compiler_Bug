{"sha": "7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYWQ4OWE5MDAxY2M1ZTFhMTBhYTE3MzA0ODM3NDlhMWVkMDRmMGE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-05T20:50:44Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-07T20:46:47Z"}, "message": "Use ?-operator in more places (clippy::question_mark, had some false negatives fixed recently)", "tree": {"sha": "528750e0509aece2abd8fa66580d3a33c91c0568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/528750e0509aece2abd8fa66580d3a33c91c0568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "html_url": "https://github.com/rust-lang/rust/commit/7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfff8a30356e3dd7eaa1c6b9d08e1e7d978d5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfff8a30356e3dd7eaa1c6b9d08e1e7d978d5c1", "html_url": "https://github.com/rust-lang/rust/commit/6bfff8a30356e3dd7eaa1c6b9d08e1e7d978d5c1"}], "stats": {"total": 60, "additions": 13, "deletions": 47}, "files": [{"sha": "ffa418cba6c99346b91892adabbcfba74f25a2df", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -365,11 +365,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n         let haystack = self.haystack.as_bytes();\n         loop {\n             // get the haystack up to but not including the last character searched\n-            let bytes = if let Some(slice) = haystack.get(self.finger..self.finger_back) {\n-                slice\n-            } else {\n-                return None;\n-            };\n+            let bytes = haystack.get(self.finger..self.finger_back)?;\n             // the last byte of the utf8 encoded needle\n             // SAFETY: we have an invariant that `utf8_size < 5`\n             let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size - 1) };\n@@ -575,11 +571,12 @@ macro_rules! pattern_methods {\n \n         #[inline]\n         fn is_suffix_of(self, haystack: &'a str) -> bool\n-            where $t: ReverseSearcher<'a>\n+        where\n+            $t: ReverseSearcher<'a>,\n         {\n             ($pmap)(self).is_suffix_of(haystack)\n         }\n-    }\n+    };\n }\n \n macro_rules! searcher_methods {\n@@ -614,7 +611,7 @@ macro_rules! searcher_methods {\n         fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n             self.0.next_reject_back()\n         }\n-    }\n+    };\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "f69b3325ba504d0d65ec3ee7871b11d7045e02c8", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -298,7 +298,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n-        let node = if let Some(node) = self.find(hir_id) { node } else { return None };\n+        let node = self.find(hir_id)?;\n \n         Some(match node {\n             Node::Item(item) => match item.kind {"}, {"sha": "69daa2da1fd0e1e9bc39fa1182b05b24a9833abb", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -346,12 +346,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         adt_did: DefId,\n         validate: &mut dyn FnMut(Self, DefId) -> Result<(), ErrorReported>,\n     ) -> Option<ty::Destructor> {\n-        let drop_trait = if let Some(def_id) = self.lang_items().drop_trait() {\n-            def_id\n-        } else {\n-            return None;\n-        };\n-\n+        let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);\n \n         let mut dtor_did = None;"}, {"sha": "f7d2fe6e3f8bfc4106760c7e0f677f873cd87bf6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -1120,12 +1120,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n         return None;\n     }\n \n-    let matches = if let Some(matches) = handle_options(&args) {\n-        matches\n-    } else {\n-        return None;\n-    };\n-\n+    let matches = handle_options(&args)?;\n     let mut result = Vec::new();\n     let mut excluded_cargo_defaults = false;\n     for flag in ICE_REPORT_COMPILER_FLAGS {"}, {"sha": "de7fe3d9a2e2fdce3c8cae74457a0730dc1227ec", "filename": "src/librustc_infer/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -413,12 +413,7 @@ pub(super) fn specialization_graph_provider(\n fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String> {\n     use std::fmt::Write;\n \n-    let trait_ref = if let Some(tr) = tcx.impl_trait_ref(impl_def_id) {\n-        tr\n-    } else {\n-        return None;\n-    };\n-\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id)?;\n     let mut w = \"impl\".to_owned();\n \n     let substs = InternalSubsts::identity_for_item(tcx, impl_def_id);"}, {"sha": "4009f4047ea7dd5b49bb777972c2a4487e3e4adb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -2778,12 +2778,8 @@ impl<'a> Resolver<'a> {\n             } else {\n                 let crate_id = if !speculative {\n                     self.crate_loader.process_path_extern(ident.name, ident.span)\n-                } else if let Some(crate_id) =\n-                    self.crate_loader.maybe_process_path_extern(ident.name, ident.span)\n-                {\n-                    crate_id\n                 } else {\n-                    return None;\n+                    self.crate_loader.maybe_process_path_extern(ident.name, ident.span)?\n                 };\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 Some("}, {"sha": "66fb4cd251a9b16362da97131ce5a4c7473eae58", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -1167,11 +1167,7 @@ impl SourceFile {\n         }\n \n         let begin = {\n-            let line = if let Some(line) = self.lines.get(line_number) {\n-                line\n-            } else {\n-                return None;\n-            };\n+            let line = self.lines.get(line_number)?;\n             let begin: BytePos = *line - self.start_pos;\n             begin.to_usize()\n         };"}, {"sha": "ae597acf1dc34efe75fe434b788e5d6624d1c29d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -42,11 +42,7 @@ pub fn try_inline(\n     attrs: Option<Attrs<'_>>,\n     visited: &mut FxHashSet<DefId>,\n ) -> Option<Vec<clean::Item>> {\n-    let did = if let Some(did) = res.opt_def_id() {\n-        did\n-    } else {\n-        return None;\n-    };\n+    let did = res.opt_def_id()?;\n     if did.is_local() {\n         return None;\n     }"}, {"sha": "e13bf270440e20bfce4d11d5150e35acd8526c43", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aad89a9001cc5e1a10aa1730483749a1ed04f0a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7aad89a9001cc5e1a10aa1730483749a1ed04f0a", "patch": "@@ -844,11 +844,7 @@ pub fn plain_summary_line(md: &str) -> String {\n         type Item = String;\n \n         fn next(&mut self) -> Option<String> {\n-            let next_event = self.inner.next();\n-            if next_event.is_none() {\n-                return None;\n-            }\n-            let next_event = next_event.unwrap();\n+            let next_event = self.inner.next()?;\n             let (ret, is_in) = match next_event {\n                 Event::Start(Tag::Paragraph) => (None, 1),\n                 Event::Start(Tag::Heading(_)) => (None, 1),"}]}