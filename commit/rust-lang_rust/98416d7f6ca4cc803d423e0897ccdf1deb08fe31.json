{"sha": "98416d7f6ca4cc803d423e0897ccdf1deb08fe31", "node_id": "C_kwDOAAsO6NoAKDk4NDE2ZDdmNmNhNGNjODAzZDQyM2UwODk3Y2NkZjFkZWIwOGZlMzE", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-11-09T03:44:02Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-11-09T03:44:02Z"}, "message": "Remove `unimplemented!()` case in matches code\n\nThis unbounded case never actually happens because `all_ranges(..)` uses\nthe scrutinee type bounds for open ranges. Switch to our own `Bound`\nenum so that we don't have this case.", "tree": {"sha": "b513de9a320a044e888922321c1bca8c4784be08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b513de9a320a044e888922321c1bca8c4784be08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98416d7f6ca4cc803d423e0897ccdf1deb08fe31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98416d7f6ca4cc803d423e0897ccdf1deb08fe31", "html_url": "https://github.com/rust-lang/rust/commit/98416d7f6ca4cc803d423e0897ccdf1deb08fe31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98416d7f6ca4cc803d423e0897ccdf1deb08fe31/comments", "author": null, "committer": null, "parents": [{"sha": "830f2205d4002b26f7fd36d8467fb491eb2306ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/830f2205d4002b26f7fd36d8467fb491eb2306ac", "html_url": "https://github.com/rust-lang/rust/commit/830f2205d4002b26f7fd36d8467fb491eb2306ac"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "6973a3743c7c186f12a7e6aa62acc8af3ef0f3a4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98416d7f6ca4cc803d423e0897ccdf1deb08fe31/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98416d7f6ca4cc803d423e0897ccdf1deb08fe31/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=98416d7f6ca4cc803d423e0897ccdf1deb08fe31", "patch": "@@ -33,7 +33,6 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n-use std::ops::Bound;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -1596,7 +1595,7 @@ fn opt_parent_let<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<&'a Local<'\n     None\n }\n \n-/// Gets all arms that are unbounded `PatRange`s.\n+/// Gets the ranges for each range pattern arm. Applies `ty` bounds for open ranges.\n fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>) -> Vec<SpannedRange<FullInt>> {\n     arms.iter()\n         .filter_map(|arm| {\n@@ -1637,6 +1636,12 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n         .collect()\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub enum Bound<T> {\n+    Included(T),\n+    Excluded(T),\n+}\n+\n #[derive(Debug, Eq, PartialEq)]\n pub struct SpannedRange<T> {\n     pub span: Span,\n@@ -1730,8 +1735,6 @@ where\n                         value_cmp\n                     }\n                 },\n-                // Range patterns cannot be unbounded (yet)\n-                (Bound::Unbounded, _) | (_, Bound::Unbounded) => unimplemented!(),\n                 (Bound::Included(a), Bound::Excluded(b)) => match a.cmp(&b) {\n                     Ordering::Equal => Ordering::Greater,\n                     other => other,"}]}