{"sha": "049f8df93cca05af395ce873738dc85d5a25f3fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OWY4ZGY5M2NjYTA1YWYzOTVjZTg3MzczOGRjODVkNWEyNWYzZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T09:57:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T09:57:05Z"}, "message": "switch completion to new scope", "tree": {"sha": "55614a697cc531a53f2836c994d3211c6cd756c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55614a697cc531a53f2836c994d3211c6cd756c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/049f8df93cca05af395ce873738dc85d5a25f3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/049f8df93cca05af395ce873738dc85d5a25f3fc", "html_url": "https://github.com/rust-lang/rust/commit/049f8df93cca05af395ce873738dc85d5a25f3fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/049f8df93cca05af395ce873738dc85d5a25f3fc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70b6bce19981df5d0cda6a0193fb9b07da6ea51", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70b6bce19981df5d0cda6a0193fb9b07da6ea51", "html_url": "https://github.com/rust-lang/rust/commit/b70b6bce19981df5d0cda6a0193fb9b07da6ea51"}], "stats": {"total": 267, "additions": 69, "deletions": 198}, "files": [{"sha": "a8a752fc70a3b210b2c0e2d3a7326bb08116682a", "filename": "crates/ra_analysis/src/completion/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -204,9 +204,9 @@ mod tests {\n                 <|>\n             }\n             \",\n-            r#\"[CompletionItem { label: \"Foo\", lookup: None, snippet: None },\n-                   CompletionItem { label: \"Baz\", lookup: None, snippet: None },\n-                   CompletionItem { label: \"quux\", lookup: None, snippet: None }]\"#,\n+            r#\"[CompletionItem { label: \"quux\", lookup: None, snippet: None },\n+                CompletionItem { label: \"Foo\", lookup: None, snippet: None },\n+                CompletionItem { label: \"Baz\", lookup: None, snippet: None }]\"#,\n         );\n     }\n \n@@ -230,8 +230,8 @@ mod tests {\n                 fn quux() { <|> }\n             }\n             \",\n-            r#\"[CompletionItem { label: \"Bar\", lookup: None, snippet: None },\n-                   CompletionItem { label: \"quux\", lookup: None, snippet: None }]\"#,\n+            r#\"[CompletionItem { label: \"quux\", lookup: None, snippet: None },\n+                CompletionItem { label: \"Bar\", lookup: None, snippet: None }]\"#,\n         );\n     }\n "}, {"sha": "84383b54759409d7295b4b1a85eb1290bc134f26", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -39,14 +39,17 @@ pub(super) fn completions(\n             let module_scope = module.scope(db)?;\n             acc.extend(\n                 module_scope\n-                    .entries()\n+                    .items\n                     .iter()\n-                    .filter(|entry| {\n+                    .filter(|(_name, res)| {\n                         // Don't expose this item\n-                        !entry.ptr().range().is_subrange(&name_ref.syntax().range())\n+                        match res.import_name {\n+                            None => true,\n+                            Some(ptr) => !ptr.range().is_subrange(&name_ref.syntax().range()),\n+                        }\n                     })\n-                    .map(|entry| CompletionItem {\n-                        label: entry.name().to_string(),\n+                    .map(|(name, _res)| CompletionItem {\n+                        label: name.to_string(),\n                         lookup: None,\n                         snippet: None,\n                     }),\n@@ -173,11 +176,14 @@ fn complete_path(\n         Some(it) => it,\n     };\n     let module_scope = target_module.scope(db)?;\n-    let completions = module_scope.entries().iter().map(|entry| CompletionItem {\n-        label: entry.name().to_string(),\n-        lookup: None,\n-        snippet: None,\n-    });\n+    let completions = module_scope\n+        .items\n+        .iter()\n+        .map(|(name, _res)| CompletionItem {\n+            label: name.to_string(),\n+            lookup: None,\n+            snippet: None,\n+        });\n     acc.extend(completions);\n     Ok(())\n }"}, {"sha": "887d687ea939480e984b6757395037d51ecc0b08", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -7,7 +7,7 @@ use salsa::{self, Database};\n use crate::{\n     db,\n     descriptors::{\n-        DescriptorDatabase, FnScopesQuery, FnSyntaxQuery, ModuleScopeQuery, ModuleTreeQuery,\n+        DescriptorDatabase, FnScopesQuery, FnSyntaxQuery, ModuleTreeQuery,\n         SubmodulesQuery, ItemMapQuery, InputModuleItemsQuery,\n     },\n     symbol_index::SymbolIndex,\n@@ -88,7 +88,6 @@ salsa::database_storage! {\n             fn fn_scopes() for FnScopesQuery;\n             fn _input_module_items() for InputModuleItemsQuery;\n             fn _item_map() for ItemMapQuery;\n-            fn _module_scope() for ModuleScopeQuery;\n             fn _fn_syntax() for FnSyntaxQuery;\n             fn _submodules() for SubmodulesQuery;\n         }"}, {"sha": "6b56d92e1669d2d9e7b076bea0b496b0c3ca2933", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n use crate::{\n     db::SyntaxDatabase,\n     descriptors::function::{resolve_local_name, FnId, FnScopes},\n-    descriptors::module::{ModuleId, ModuleScope, ModuleTree, ModuleSource, nameres::{ItemMap, InputModuleItems}},\n+    descriptors::module::{ModuleId, ModuleTree, ModuleSource, nameres::{ItemMap, InputModuleItems}},\n     input::SourceRootId,\n     loc2id::IdDatabase,\n     syntax_ptr::LocalSyntaxPtr,\n@@ -37,10 +37,6 @@ salsa::query_group! {\n             type ModuleTreeQuery;\n             use fn module::imp::module_tree;\n         }\n-        fn _module_scope(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<ModuleScope>> {\n-            type ModuleScopeQuery;\n-            use fn module::imp::module_scope;\n-        }\n         fn _fn_syntax(fn_id: FnId) -> FnDefNode {\n             type FnSyntaxQuery;\n             // Don't retain syntax trees in memory"}, {"sha": "d4dce861fafe7f23571a58fa87bb18c5e834c3f5", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use ra_syntax::{\n-    ast::{self, ModuleItemOwner, NameOwner},\n+    ast::{self, NameOwner},\n     SmolStr,\n };\n use relative_path::RelativePathBuf;\n@@ -15,7 +15,7 @@ use crate::{\n };\n \n use super::{\n-    LinkData, LinkId, ModuleData, ModuleId, ModuleScope, ModuleSource, ModuleSourceNode,\n+    LinkData, LinkId, ModuleData, ModuleId, ModuleSource, ModuleSourceNode,\n     ModuleTree, Problem,\n };\n \n@@ -81,23 +81,6 @@ pub(crate) fn modules<'a>(\n         })\n }\n \n-pub(crate) fn module_scope(\n-    db: &impl DescriptorDatabase,\n-    source_root_id: SourceRootId,\n-    module_id: ModuleId,\n-) -> Cancelable<Arc<ModuleScope>> {\n-    let tree = db._module_tree(source_root_id)?;\n-    let source = module_id.source(&tree).resolve(db);\n-    let res = match source {\n-        ModuleSourceNode::SourceFile(it) => ModuleScope::new(it.borrowed().items()),\n-        ModuleSourceNode::Module(it) => match it.borrowed().item_list() {\n-            Some(items) => ModuleScope::new(items.items()),\n-            None => ModuleScope::new(std::iter::empty()),\n-        },\n-    };\n-    Ok(Arc::new(res))\n-}\n-\n pub(crate) fn module_tree(\n     db: &impl DescriptorDatabase,\n     source_root: SourceRootId,"}, {"sha": "cfdffcdbcc9b89f0bcf2c9d2296b86e720337e53", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -1,5 +1,4 @@\n pub(super) mod imp;\n-mod scope;\n pub(super) mod nameres;\n \n use std::sync::Arc;\n@@ -19,7 +18,7 @@ use crate::{\n     input::SourceRootId\n };\n \n-pub(crate) use self::scope::ModuleScope;\n+pub(crate) use self::{nameres::ModuleScope};\n \n /// `ModuleDescriptor` is API entry point to get all the information\n /// about a particular module.\n@@ -126,8 +125,10 @@ impl ModuleDescriptor {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub fn scope(&self, db: &impl DescriptorDatabase) -> Cancelable<Arc<ModuleScope>> {\n-        db._module_scope(self.source_root_id, self.module_id)\n+    pub(crate) fn scope(&self, db: &impl DescriptorDatabase) -> Cancelable<ModuleScope> {\n+        let item_map = db._item_map(self.source_root_id)?;\n+        let res = item_map.per_module[&self.module_id].clone();\n+        Ok(res)\n     }\n \n     pub fn problems(&self, db: &impl DescriptorDatabase) -> Vec<(SyntaxNode, Problem)> {"}, {"sha": "c5bf467cab9d9eb6fdd775cc6b50415c31ecfe98", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n \n use ra_syntax::{\n     SmolStr, SyntaxKind::{self, *},\n-    ast::{self, NameOwner, AstNode, ModuleItemOwner}\n+    ast::{self, AstNode, ModuleItemOwner}\n };\n \n use crate::{\n@@ -26,13 +26,13 @@ use crate::{\n /// module, the set of visible items.\n #[derive(Default, Debug, PartialEq, Eq)]\n pub(crate) struct ItemMap {\n-    per_module: FxHashMap<ModuleId, ModuleItems>,\n+    pub(crate) per_module: FxHashMap<ModuleId, ModuleScope>,\n }\n \n-#[derive(Debug, Default, PartialEq, Eq)]\n-struct ModuleItems {\n-    items: FxHashMap<SmolStr, Resolution>,\n-    import_resolutions: FxHashMap<LocalSyntaxPtr, DefId>,\n+#[derive(Debug, Default, PartialEq, Eq, Clone)]\n+pub(crate) struct ModuleScope {\n+    pub(crate) items: FxHashMap<SmolStr, Resolution>,\n+    pub(crate) import_resolutions: FxHashMap<LocalSyntaxPtr, DefId>,\n }\n \n /// A set of items and imports declared inside a module, without relation to\n@@ -117,22 +117,25 @@ pub(crate) fn item_map(\n /// Resolution is basically `DefId` atm, but it should account for stuff like\n /// multiple namespaces, ambiguity and errors.\n #[derive(Debug, Clone, PartialEq, Eq)]\n-struct Resolution {\n+pub(crate) struct Resolution {\n     /// None for unresolved\n-    def_id: Option<DefId>,\n+    pub(crate) def_id: Option<DefId>,\n+    /// ident by whitch this is imported into local scope.\n+    /// TODO: make this offset-independent.\n+    pub(crate) import_name: Option<LocalSyntaxPtr>,\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-enum Namespace {\n-    Types,\n-    Values,\n-}\n+// #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+// enum Namespace {\n+//     Types,\n+//     Values,\n+// }\n \n-#[derive(Debug)]\n-struct PerNs<T> {\n-    types: Option<T>,\n-    values: Option<T>,\n-}\n+// #[derive(Debug)]\n+// struct PerNs<T> {\n+//     types: Option<T>,\n+//     values: Option<T>,\n+// }\n \n #[derive(Debug, PartialEq, Eq)]\n struct ModuleItem {\n@@ -144,7 +147,7 @@ struct ModuleItem {\n \n #[derive(Debug, PartialEq, Eq)]\n enum Vis {\n-    Priv,\n+    // Priv,\n     Other,\n }\n \n@@ -302,13 +305,17 @@ where\n     fn populate_module(&mut self, module_id: ModuleId, input: &InputModuleItems) {\n         let file_id = module_id.source(&self.module_tree).file_id();\n \n-        let mut module_items = ModuleItems::default();\n+        let mut module_items = ModuleScope::default();\n \n         for import in input.imports.iter() {\n-            if let Some((_, name)) = import.segments.last() {\n-                module_items\n-                    .items\n-                    .insert(name.clone(), Resolution { def_id: None });\n+            if let Some((ptr, name)) = import.segments.last() {\n+                module_items.items.insert(\n+                    name.clone(),\n+                    Resolution {\n+                        def_id: None,\n+                        import_name: Some(*ptr),\n+                    },\n+                );\n             }\n         }\n \n@@ -322,6 +329,7 @@ where\n             let def_id = self.db.id_maps().def_id(def_loc);\n             let resolution = Resolution {\n                 def_id: Some(def_id),\n+                import_name: None,\n             };\n             module_items.items.insert(item.name.clone(), resolution);\n         }\n@@ -334,6 +342,7 @@ where\n             let def_id = self.db.id_maps().def_id(def_loc);\n             let resolution = Resolution {\n                 def_id: Some(def_id),\n+                import_name: None,\n             };\n             module_items.items.insert(name, resolution);\n         }\n@@ -386,14 +395,15 @@ where\n                 self.update(module_id, |items| {\n                     let res = Resolution {\n                         def_id: Some(def_id),\n+                        import_name: Some(*ptr),\n                     };\n                     items.items.insert(name.clone(), res);\n                 })\n             }\n         }\n     }\n \n-    fn update(&mut self, module_id: ModuleId, f: impl FnOnce(&mut ModuleItems)) {\n+    fn update(&mut self, module_id: ModuleId, f: impl FnOnce(&mut ModuleScope)) {\n         let module_items = self.result.per_module.get_mut(&module_id).unwrap();\n         f(module_items)\n     }"}, {"sha": "4490228e41aa6ba4ba202a58cb190e6d33e9a78b", "filename": "crates/ra_analysis/src/descriptors/module/scope.rs", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/b70b6bce19981df5d0cda6a0193fb9b07da6ea51/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b6bce19981df5d0cda6a0193fb9b07da6ea51/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs?ref=b70b6bce19981df5d0cda6a0193fb9b07da6ea51", "patch": "@@ -1,124 +0,0 @@\n-//! Backend for module-level scope resolution & completion\n-\n-use ra_syntax::{ast, AstNode, SmolStr};\n-\n-use crate::syntax_ptr::LocalSyntaxPtr;\n-\n-/// `ModuleScope` contains all named items declared in the scope.\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct ModuleScope {\n-    entries: Vec<Entry>,\n-}\n-\n-/// `Entry` is a single named declaration iside a module.\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct Entry {\n-    ptr: LocalSyntaxPtr,\n-    kind: EntryKind,\n-    name: SmolStr,\n-}\n-\n-#[derive(Debug, PartialEq, Eq)]\n-enum EntryKind {\n-    Item,\n-    Import,\n-}\n-\n-impl ModuleScope {\n-    pub(super) fn new<'a>(items: impl Iterator<Item = ast::ModuleItem<'a>>) -> ModuleScope {\n-        let mut entries = Vec::new();\n-        for item in items {\n-            let entry = match item {\n-                ast::ModuleItem::StructDef(item) => Entry::new(item),\n-                ast::ModuleItem::EnumDef(item) => Entry::new(item),\n-                ast::ModuleItem::FnDef(item) => Entry::new(item),\n-                ast::ModuleItem::ConstDef(item) => Entry::new(item),\n-                ast::ModuleItem::StaticDef(item) => Entry::new(item),\n-                ast::ModuleItem::TraitDef(item) => Entry::new(item),\n-                ast::ModuleItem::TypeDef(item) => Entry::new(item),\n-                ast::ModuleItem::Module(item) => Entry::new(item),\n-                ast::ModuleItem::UseItem(item) => {\n-                    if let Some(tree) = item.use_tree() {\n-                        collect_imports(tree, &mut entries);\n-                    }\n-                    continue;\n-                }\n-                ast::ModuleItem::ExternCrateItem(_) | ast::ModuleItem::ImplItem(_) => continue,\n-            };\n-            entries.extend(entry)\n-        }\n-\n-        ModuleScope { entries }\n-    }\n-\n-    pub fn entries(&self) -> &[Entry] {\n-        self.entries.as_slice()\n-    }\n-}\n-\n-impl Entry {\n-    fn new<'a>(item: impl ast::NameOwner<'a>) -> Option<Entry> {\n-        let name = item.name()?;\n-        Some(Entry {\n-            name: name.text(),\n-            ptr: LocalSyntaxPtr::new(name.syntax()),\n-            kind: EntryKind::Item,\n-        })\n-    }\n-    fn new_import(path: ast::Path) -> Option<Entry> {\n-        let name_ref = path.segment()?.name_ref()?;\n-        Some(Entry {\n-            name: name_ref.text(),\n-            ptr: LocalSyntaxPtr::new(name_ref.syntax()),\n-            kind: EntryKind::Import,\n-        })\n-    }\n-    pub fn name(&self) -> &SmolStr {\n-        &self.name\n-    }\n-    pub fn ptr(&self) -> LocalSyntaxPtr {\n-        self.ptr\n-    }\n-}\n-\n-fn collect_imports(tree: ast::UseTree, acc: &mut Vec<Entry>) {\n-    if let Some(use_tree_list) = tree.use_tree_list() {\n-        return use_tree_list\n-            .use_trees()\n-            .for_each(|it| collect_imports(it, acc));\n-    }\n-    if let Some(path) = tree.path() {\n-        acc.extend(Entry::new_import(path));\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use ra_syntax::{ast::ModuleItemOwner, SourceFileNode};\n-\n-    fn do_check(code: &str, expected: &[&str]) {\n-        let file = SourceFileNode::parse(&code);\n-        let scope = ModuleScope::new(file.ast().items());\n-        let actual = scope.entries.iter().map(|it| it.name()).collect::<Vec<_>>();\n-        assert_eq!(expected, actual.as_slice());\n-    }\n-\n-    #[test]\n-    fn test_module_scope() {\n-        do_check(\n-            \"\n-            struct Foo;\n-            enum Bar {}\n-            mod baz {}\n-            fn quux() {}\n-            use x::{\n-                y::z,\n-                t,\n-            };\n-            type T = ();\n-        \",\n-            &[\"Foo\", \"Bar\", \"baz\", \"quux\", \"z\", \"t\", \"T\"],\n-        )\n-    }\n-}"}, {"sha": "72b2ebf970baa5fefcf020844ee569d6680ff687", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049f8df93cca05af395ce873738dc85d5a25f3fc/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=049f8df93cca05af395ce873738dc85d5a25f3fc", "patch": "@@ -447,8 +447,8 @@ fn test_complete_crate_path() {\n     );\n     let completions = analysis.completions(position).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"[CompletionItem { label: \"foo\", lookup: None, snippet: None },\n-            CompletionItem { label: \"Spam\", lookup: None, snippet: None }]\"#,\n+        r#\"[CompletionItem { label: \"Spam\", lookup: None, snippet: None },\n+            CompletionItem { label: \"foo\", lookup: None, snippet: None }]\"#,\n         &completions,\n     );\n }\n@@ -466,8 +466,8 @@ fn test_complete_crate_path_with_braces() {\n     );\n     let completions = analysis.completions(position).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"[CompletionItem { label: \"foo\", lookup: None, snippet: None },\n-            CompletionItem { label: \"Spam\", lookup: None, snippet: None }]\"#,\n+        r#\"[CompletionItem { label: \"Spam\", lookup: None, snippet: None },\n+            CompletionItem { label: \"foo\", lookup: None, snippet: None }]\"#,\n         &completions,\n     );\n }"}]}