{"sha": "e03f09730faab8083f991827f0cd02040d171d4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwM2YwOTczMGZhYWI4MDgzZjk5MTgyN2YwY2QwMjA0MGQxNzFkNGU=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-02-11T06:13:06Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-02-11T08:03:03Z"}, "message": "Make suggestion of changing mutability of arguments broader", "tree": {"sha": "116479091be5f28bd9573450ba7361a25b22484c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/116479091be5f28bd9573450ba7361a25b22484c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03f09730faab8083f991827f0cd02040d171d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03f09730faab8083f991827f0cd02040d171d4e", "html_url": "https://github.com/rust-lang/rust/commit/e03f09730faab8083f991827f0cd02040d171d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03f09730faab8083f991827f0cd02040d171d4e/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce7268bcfc17265bd05e4c08713d170d39618ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce7268bcfc17265bd05e4c08713d170d39618ad", "html_url": "https://github.com/rust-lang/rust/commit/9ce7268bcfc17265bd05e4c08713d170d39618ad"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "3233d1e048bf735631dce46d97e32926fc619877", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e03f09730faab8083f991827f0cd02040d171d4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03f09730faab8083f991827f0cd02040d171d4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e03f09730faab8083f991827f0cd02040d171d4e", "patch": "@@ -468,22 +468,21 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 trait_ref,\n                                 obligation.cause.body_id,\n                             );\n-                        } else {\n-                            if !have_alt_message {\n-                                // Can't show anything else useful, try to find similar impls.\n-                                let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n-                                self.report_similar_impl_candidates(impl_candidates, &mut err);\n-                            }\n-                            // Changing mutability doesn't make a difference to whether we have\n-                            // an `Unsize` impl (Fixes ICE in #71036)\n-                            if !is_unsize {\n-                                self.suggest_change_mut(\n-                                    &obligation,\n-                                    &mut err,\n-                                    trait_ref,\n-                                    points_at_arg,\n-                                );\n-                            }\n+                        } else if !have_alt_message {\n+                            // Can't show anything else useful, try to find similar impls.\n+                            let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n+                            self.report_similar_impl_candidates(impl_candidates, &mut err);\n+                        }\n+\n+                        // Changing mutability doesn't make a difference to whether we have\n+                        // an `Unsize` impl (Fixes ICE in #71036)\n+                        if !is_unsize {\n+                            self.suggest_change_mut(\n+                                &obligation,\n+                                &mut err,\n+                                trait_ref,\n+                                points_at_arg,\n+                            );\n                         }\n \n                         // If this error is due to `!: Trait` not implemented but `(): Trait` is"}, {"sha": "8b465aae66b6e6ae771cdfa9aca07c6ec5852f04", "filename": "src/test/ui/suggestions/suggest-change-mut.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e03f09730faab8083f991827f0cd02040d171d4e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03f09730faab8083f991827f0cd02040d171d4e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs?ref=e03f09730faab8083f991827f0cd02040d171d4e", "patch": "@@ -0,0 +1,21 @@\n+#![allow(warnings)]\n+\n+use std::io::{BufRead, BufReader, Read, Write};\n+\n+fn issue_81421<T: Read + Write>(mut stream: T) {\n+    let initial_message = format!(\"Hello world\");\n+    let mut buffer: Vec<u8> = Vec::new();\n+    let bytes_written = stream.write_all(initial_message.as_bytes());\n+    let flush = stream.flush();\n+\n+    loop {\n+        let mut stream_reader = BufReader::new(&stream);\n+        //~^ ERROR the trait bound `&T: std::io::Read` is not satisfied [E0277]\n+        //~| HELP consider removing the leading `&`-reference\n+        //~| HELP consider changing this borrow's mutability\n+        stream_reader.read_until(b'\\n', &mut buffer).expect(\"Reading into buffer failed\");\n+        //~^ ERROR the method `read_until` exists for struct `BufReader<&T>`,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cb156f7c7877a0cf2c24f3172d5047fa6cb0e8ca", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e03f09730faab8083f991827f0cd02040d171d4e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e03f09730faab8083f991827f0cd02040d171d4e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=e03f09730faab8083f991827f0cd02040d171d4e", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: the trait bound `&T: std::io::Read` is not satisfied\n+  --> $DIR/suggest-change-mut.rs:12:48\n+   |\n+LL |         let mut stream_reader = BufReader::new(&stream);\n+   |                                                ^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n+   |\n+   = note: required by `BufReader::<R>::new`\n+help: consider removing the leading `&`-reference\n+   |\n+LL |         let mut stream_reader = BufReader::new(stream);\n+   |                                               --\n+help: consider changing this borrow's mutability\n+   |\n+LL |         let mut stream_reader = BufReader::new(&mut stream);\n+   |                                                ^^^^\n+\n+error[E0599]: the method `read_until` exists for struct `BufReader<&T>`, but its trait bounds were not satisfied\n+  --> $DIR/suggest-change-mut.rs:16:23\n+   |\n+LL |         stream_reader.read_until(b'\\n', &mut buffer).expect(\"Reading into buffer failed\");\n+   |                       ^^^^^^^^^^ method cannot be called on `BufReader<&T>` due to unsatisfied trait bounds\n+   | \n+  ::: $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n+   |\n+LL | pub struct BufReader<R> {\n+   | ----------------------- doesn't satisfy `BufReader<&T>: BufRead`\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `&T: std::io::Read`\n+           which is required by `BufReader<&T>: BufRead`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}]}