{"sha": "a25791ee618a30e161f19bb37e2aea11806a1a82", "node_id": "C_kwDOAAsO6NoAKGEyNTc5MWVlNjE4YTMwZTE2MWYxOWJiMzdlMmFlYTExODA2YTFhODI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-08T21:36:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-08T21:36:57Z"}, "message": "lib docs: fix typo", "tree": {"sha": "097c48ae16b697c6f99ced132f4eb621260176fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097c48ae16b697c6f99ced132f4eb621260176fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a25791ee618a30e161f19bb37e2aea11806a1a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a25791ee618a30e161f19bb37e2aea11806a1a82", "html_url": "https://github.com/rust-lang/rust/commit/a25791ee618a30e161f19bb37e2aea11806a1a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a25791ee618a30e161f19bb37e2aea11806a1a82/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7632db0e87d8adccc9a83a47795c9411b1455855", "url": "https://api.github.com/repos/rust-lang/rust/commits/7632db0e87d8adccc9a83a47795c9411b1455855", "html_url": "https://github.com/rust-lang/rust/commit/7632db0e87d8adccc9a83a47795c9411b1455855"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "1a0d9a3d0cecc00d5cfc88bc6fa80856dff6ca91", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a25791ee618a30e161f19bb37e2aea11806a1a82/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25791ee618a30e161f19bb37e2aea11806a1a82/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=a25791ee618a30e161f19bb37e2aea11806a1a82", "patch": "@@ -1769,7 +1769,7 @@ pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usiz\n /// (which is what the `PartialEq for &T` implementation does).\n ///\n /// When comparing wide pointers, both the address and the metadata are tested for equality.\n-/// However, note that comparing trait object pointers (`*const dyn Trait`) is unrealiable: pointers\n+/// However, note that comparing trait object pointers (`*const dyn Trait`) is unreliable: pointers\n /// to values of the same underlying type can compare inequal (because vtables are duplicated in\n /// multiple codegen units), and pointers to values of *different* underlying type can compare equal\n /// (since identical vtables can be deduplicated within a codegen unit)."}]}