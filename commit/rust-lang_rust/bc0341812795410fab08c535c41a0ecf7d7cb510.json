{"sha": "bc0341812795410fab08c535c41a0ecf7d7cb510", "node_id": "C_kwDOAAsO6NoAKGJjMDM0MTgxMjc5NTQxMGZhYjA4YzUzNWM0MWEwZWNmN2Q3Y2I1MTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T09:16:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T09:16:51Z"}, "message": "Auto merge of #14746 - lowr:patch/associated-return-types, r=Veykril\n\nParse associated return type bounds\n\nThis PR implements parser support for associated return type bounds: `T: Foo<bar(): Send>`. This PR does not implement associated return types (`T::bar(): Send`) because it's not implemented even in rustc, and also removes `(..)`-style return type notation because it has been removed in rust-lang/rust#110203 (effectively reverting #14465).\n\nI don't plan to proactively follow this unstable feature unless an RFC is accepted and my main motivation here is to remove no-longer-valid syntax `(..)` from our parser, nevertheless adding minimal parser support so anyone interested (as can be seen in #14465) can experiment it without rust-analyzer's syntax errors.", "tree": {"sha": "2469e5276a2704f964802d80c70768ccff7fca9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2469e5276a2704f964802d80c70768ccff7fca9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0341812795410fab08c535c41a0ecf7d7cb510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0341812795410fab08c535c41a0ecf7d7cb510", "html_url": "https://github.com/rust-lang/rust/commit/bc0341812795410fab08c535c41a0ecf7d7cb510", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0341812795410fab08c535c41a0ecf7d7cb510/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "html_url": "https://github.com/rust-lang/rust/commit/e5c722820ac6f348c6c674ef3391d7156f1cd1c9"}, {"sha": "fa2340a4dfb70834259ad704f0b3a13021fa1b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2340a4dfb70834259ad704f0b3a13021fa1b54", "html_url": "https://github.com/rust-lang/rust/commit/fa2340a4dfb70834259ad704f0b3a13021fa1b54"}], "stats": {"total": 469, "additions": 363, "deletions": 106}, "files": [{"sha": "26d2706175ca986f0802f44cdaeaa80cf3dc3a4a", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -189,6 +189,10 @@ pub(super) fn lower_generic_args(\n                 args.push(GenericArg::Type(type_ref));\n             }\n             ast::GenericArg::AssocTypeArg(assoc_type_arg) => {\n+                if assoc_type_arg.param_list().is_some() {\n+                    // We currently ignore associated return type bounds.\n+                    continue;\n+                }\n                 if let Some(name_ref) = assoc_type_arg.name_ref() {\n                     let name = name_ref.as_name();\n                     let args = assoc_type_arg\n@@ -216,9 +220,6 @@ pub(super) fn lower_generic_args(\n                 let arg = ConstRefOrPath::from_expr_opt(arg.expr());\n                 args.push(GenericArg::Const(arg))\n             }\n-            ast::GenericArg::ReturnTypeArg(_) => {\n-                // FIXME: return type notation is experimental, we don't do anything with it yet.\n-            }\n         }\n     }\n "}, {"sha": "b7d72b8d33659cec712dda49020ea979e80ccbc1", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -76,7 +76,29 @@ fn generic_arg(p: &mut Parser<'_>) -> bool {\n                 }\n             }\n         }\n-        IDENT if p.nth(1) == T!['('] && p.nth_at(2, T![..]) => return_type_arg(p),\n+        IDENT if p.nth_at(1, T!['(']) => {\n+            let m = p.start();\n+            name_ref(p);\n+            params::param_list_fn_trait(p);\n+            if p.at(T![:]) && !p.at(T![::]) {\n+                // test associated_return_type_bounds\n+                // fn foo<T: Foo<foo(): Send, bar(i32): Send, baz(i32, i32): Send>>() {}\n+                generic_params::bounds(p);\n+                m.complete(p, ASSOC_TYPE_ARG);\n+            } else {\n+                // test bare_dyn_types_with_paren_as_generic_args\n+                // type A = S<Fn(i32)>;\n+                // type A = S<Fn(i32) + Send>;\n+                // type B = S<Fn(i32) -> i32>;\n+                // type C = S<Fn(i32) -> i32 + Send>;\n+                opt_ret_type(p);\n+                let m = m.complete(p, PATH_SEGMENT).precede(p).complete(p, PATH);\n+                let m = paths::type_path_for_qualifier(p, m);\n+                let m = m.precede(p).complete(p, PATH_TYPE);\n+                let m = types::opt_type_bounds_as_dyn_trait_type(p, m);\n+                m.precede(p).complete(p, TYPE_ARG);\n+            }\n+        }\n         _ if p.at_ts(types::TYPE_FIRST) => type_arg(p),\n         _ => return false,\n     }\n@@ -140,20 +162,3 @@ fn type_arg(p: &mut Parser<'_>) {\n     types::type_(p);\n     m.complete(p, TYPE_ARG);\n }\n-\n-// test return_type_arg\n-// type T = S<foo(..): Send>;\n-pub(super) fn return_type_arg(p: &mut Parser<'_>) {\n-    let m = p.start();\n-    p.expect(IDENT);\n-    p.expect(T!['(']);\n-    p.expect(T![..]);\n-    p.expect(T![')']);\n-    if !p.at(T![:]) {\n-        p.error(\"expected :\");\n-        m.abandon(p);\n-        return;\n-    }\n-    generic_params::bounds(p);\n-    m.complete(p, RETURN_TYPE_ARG);\n-}"}, {"sha": "01b8f9e918714e6358ebb58eb8f44808151a31c3", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -136,6 +136,7 @@ fn opt_path_type_args(p: &mut Parser<'_>, mode: Mode) {\n         Mode::Type => {\n             // test typepathfn_with_coloncolon\n             // type F = Start::(Middle) -> (Middle)::End;\n+            // type GenericArg = S<Start(Middle)::End>;\n             if p.at(T![::]) && p.nth_at(2, T!['(']) {\n                 p.bump(T![::]);\n             }"}, {"sha": "93ef48350270b5e734cb8c3a0148787ea02751a9", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -337,13 +337,16 @@ pub(super) fn path_type_(p: &mut Parser<'_>, allow_bounds: bool) {\n \n /// This turns a parsed PATH_TYPE or FOR_TYPE optionally into a DYN_TRAIT_TYPE\n /// with a TYPE_BOUND_LIST\n-fn opt_type_bounds_as_dyn_trait_type(p: &mut Parser<'_>, type_marker: CompletedMarker) {\n+pub(super) fn opt_type_bounds_as_dyn_trait_type(\n+    p: &mut Parser<'_>,\n+    type_marker: CompletedMarker,\n+) -> CompletedMarker {\n     assert!(matches!(\n         type_marker.kind(),\n         SyntaxKind::PATH_TYPE | SyntaxKind::FOR_TYPE | SyntaxKind::MACRO_TYPE\n     ));\n     if !p.at(T![+]) {\n-        return;\n+        return type_marker;\n     }\n \n     // First create a TYPE_BOUND from the completed PATH_TYPE\n@@ -360,5 +363,5 @@ fn opt_type_bounds_as_dyn_trait_type(p: &mut Parser<'_>, type_marker: CompletedM\n     let m = generic_params::bounds_without_colon_m(p, m);\n \n     // Finally precede everything with DYN_TRAIT_TYPE\n-    m.precede(p).complete(p, DYN_TRAIT_TYPE);\n+    m.precede(p).complete(p, DYN_TRAIT_TYPE)\n }"}, {"sha": "67277d0639a8d9c26836f7726ffa56accccf7f5e", "filename": "crates/parser/test_data/parser/inline/ok/0202_typepathfn_with_coloncolon.rast", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0202_typepathfn_with_coloncolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0202_typepathfn_with_coloncolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0202_typepathfn_with_coloncolon.rast?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -41,3 +41,41 @@ SOURCE_FILE\n             IDENT \"End\"\n     SEMICOLON \";\"\n   WHITESPACE \"\\n\"\n+  TYPE_ALIAS\n+    TYPE_KW \"type\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"GenericArg\"\n+    WHITESPACE \" \"\n+    EQ \"=\"\n+    WHITESPACE \" \"\n+    PATH_TYPE\n+      PATH\n+        PATH_SEGMENT\n+          NAME_REF\n+            IDENT \"S\"\n+          GENERIC_ARG_LIST\n+            L_ANGLE \"<\"\n+            TYPE_ARG\n+              PATH_TYPE\n+                PATH\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Start\"\n+                      PARAM_LIST\n+                        L_PAREN \"(\"\n+                        PARAM\n+                          PATH_TYPE\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"Middle\"\n+                        R_PAREN \")\"\n+                  COLON2 \"::\"\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"End\"\n+            R_ANGLE \">\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\""}, {"sha": "8c54f6704b3fab3ad662e285da76afbfe29283bc", "filename": "crates/parser/test_data/parser/inline/ok/0202_typepathfn_with_coloncolon.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0202_typepathfn_with_coloncolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0202_typepathfn_with_coloncolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0202_typepathfn_with_coloncolon.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -1 +1,2 @@\n type F = Start::(Middle) -> (Middle)::End;\n+type GenericArg = S<Start(Middle)::End>;"}, {"sha": "26d474f54f47f7f1b7b255394771ec45530e9619", "filename": "crates/parser/test_data/parser/inline/ok/0206_return_type_arg.rast", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast?ref=e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "patch": "@@ -1,33 +0,0 @@\n-SOURCE_FILE\n-  TYPE_ALIAS\n-    TYPE_KW \"type\"\n-    WHITESPACE \" \"\n-    NAME\n-      IDENT \"T\"\n-    WHITESPACE \" \"\n-    EQ \"=\"\n-    WHITESPACE \" \"\n-    PATH_TYPE\n-      PATH\n-        PATH_SEGMENT\n-          NAME_REF\n-            IDENT \"S\"\n-          GENERIC_ARG_LIST\n-            L_ANGLE \"<\"\n-            RETURN_TYPE_ARG\n-              IDENT \"foo\"\n-              L_PAREN \"(\"\n-              DOT2 \"..\"\n-              R_PAREN \")\"\n-              COLON \":\"\n-              WHITESPACE \" \"\n-              TYPE_BOUND_LIST\n-                TYPE_BOUND\n-                  PATH_TYPE\n-                    PATH\n-                      PATH_SEGMENT\n-                        NAME_REF\n-                          IDENT \"Send\"\n-            R_ANGLE \">\"\n-    SEMICOLON \";\"\n-  WHITESPACE \"\\n\""}, {"sha": "2a9ff270839f8b2b5ac1a13c61df2efffb288954", "filename": "crates/parser/test_data/parser/inline/ok/0206_return_type_arg.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs?ref=e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "patch": "@@ -1 +0,0 @@\n-type T = S<foo(..): Send>;"}, {"sha": "2fa52068c9b72441a53b7bbb3797ae9ea1bdbcda", "filename": "crates/parser/test_data/parser/inline/ok/0208_associated_return_type_bounds.rast", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0208_associated_return_type_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0208_associated_return_type_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0208_associated_return_type_bounds.rast?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -0,0 +1,102 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    GENERIC_PARAM_LIST\n+      L_ANGLE \"<\"\n+      TYPE_PARAM\n+        NAME\n+          IDENT \"T\"\n+        COLON \":\"\n+        WHITESPACE \" \"\n+        TYPE_BOUND_LIST\n+          TYPE_BOUND\n+            PATH_TYPE\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"Foo\"\n+                  GENERIC_ARG_LIST\n+                    L_ANGLE \"<\"\n+                    ASSOC_TYPE_ARG\n+                      NAME_REF\n+                        IDENT \"foo\"\n+                      PARAM_LIST\n+                        L_PAREN \"(\"\n+                        R_PAREN \")\"\n+                      COLON \":\"\n+                      WHITESPACE \" \"\n+                      TYPE_BOUND_LIST\n+                        TYPE_BOUND\n+                          PATH_TYPE\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"Send\"\n+                    COMMA \",\"\n+                    WHITESPACE \" \"\n+                    ASSOC_TYPE_ARG\n+                      NAME_REF\n+                        IDENT \"bar\"\n+                      PARAM_LIST\n+                        L_PAREN \"(\"\n+                        PARAM\n+                          PATH_TYPE\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"i32\"\n+                        R_PAREN \")\"\n+                      COLON \":\"\n+                      WHITESPACE \" \"\n+                      TYPE_BOUND_LIST\n+                        TYPE_BOUND\n+                          PATH_TYPE\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"Send\"\n+                    COMMA \",\"\n+                    WHITESPACE \" \"\n+                    ASSOC_TYPE_ARG\n+                      NAME_REF\n+                        IDENT \"baz\"\n+                      PARAM_LIST\n+                        L_PAREN \"(\"\n+                        PARAM\n+                          PATH_TYPE\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"i32\"\n+                        COMMA \",\"\n+                        WHITESPACE \" \"\n+                        PARAM\n+                          PATH_TYPE\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"i32\"\n+                        R_PAREN \")\"\n+                      COLON \":\"\n+                      WHITESPACE \" \"\n+                      TYPE_BOUND_LIST\n+                        TYPE_BOUND\n+                          PATH_TYPE\n+                            PATH\n+                              PATH_SEGMENT\n+                                NAME_REF\n+                                  IDENT \"Send\"\n+                    R_ANGLE \">\"\n+      R_ANGLE \">\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "42029ac592702851e601e5a01eb96023ee2be0a7", "filename": "crates/parser/test_data/parser/inline/ok/0208_associated_return_type_bounds.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0208_associated_return_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0208_associated_return_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0208_associated_return_type_bounds.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -0,0 +1 @@\n+fn foo<T: Foo<foo(): Send, bar(i32): Send, baz(i32, i32): Send>>() {}"}, {"sha": "d5f97bad898ed9e82372bc9a7b59808e2a43a45e", "filename": "crates/parser/test_data/parser/inline/ok/0209_bare_dyn_types_with_paren_as_generic_args.rast", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0209_bare_dyn_types_with_paren_as_generic_args.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0209_bare_dyn_types_with_paren_as_generic_args.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0209_bare_dyn_types_with_paren_as_generic_args.rast?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -0,0 +1,175 @@\n+SOURCE_FILE\n+  TYPE_ALIAS\n+    TYPE_KW \"type\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"A\"\n+    WHITESPACE \" \"\n+    EQ \"=\"\n+    WHITESPACE \" \"\n+    PATH_TYPE\n+      PATH\n+        PATH_SEGMENT\n+          NAME_REF\n+            IDENT \"S\"\n+          GENERIC_ARG_LIST\n+            L_ANGLE \"<\"\n+            TYPE_ARG\n+              PATH_TYPE\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Fn\"\n+                    PARAM_LIST\n+                      L_PAREN \"(\"\n+                      PARAM\n+                        PATH_TYPE\n+                          PATH\n+                            PATH_SEGMENT\n+                              NAME_REF\n+                                IDENT \"i32\"\n+                      R_PAREN \")\"\n+            R_ANGLE \">\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\"\n+  TYPE_ALIAS\n+    TYPE_KW \"type\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"A\"\n+    WHITESPACE \" \"\n+    EQ \"=\"\n+    WHITESPACE \" \"\n+    PATH_TYPE\n+      PATH\n+        PATH_SEGMENT\n+          NAME_REF\n+            IDENT \"S\"\n+          GENERIC_ARG_LIST\n+            L_ANGLE \"<\"\n+            TYPE_ARG\n+              DYN_TRAIT_TYPE\n+                TYPE_BOUND_LIST\n+                  TYPE_BOUND\n+                    PATH_TYPE\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"Fn\"\n+                          PARAM_LIST\n+                            L_PAREN \"(\"\n+                            PARAM\n+                              PATH_TYPE\n+                                PATH\n+                                  PATH_SEGMENT\n+                                    NAME_REF\n+                                      IDENT \"i32\"\n+                            R_PAREN \")\"\n+                  WHITESPACE \" \"\n+                  PLUS \"+\"\n+                  WHITESPACE \" \"\n+                  TYPE_BOUND\n+                    PATH_TYPE\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"Send\"\n+            R_ANGLE \">\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\"\n+  TYPE_ALIAS\n+    TYPE_KW \"type\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"B\"\n+    WHITESPACE \" \"\n+    EQ \"=\"\n+    WHITESPACE \" \"\n+    PATH_TYPE\n+      PATH\n+        PATH_SEGMENT\n+          NAME_REF\n+            IDENT \"S\"\n+          GENERIC_ARG_LIST\n+            L_ANGLE \"<\"\n+            TYPE_ARG\n+              PATH_TYPE\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Fn\"\n+                    PARAM_LIST\n+                      L_PAREN \"(\"\n+                      PARAM\n+                        PATH_TYPE\n+                          PATH\n+                            PATH_SEGMENT\n+                              NAME_REF\n+                                IDENT \"i32\"\n+                      R_PAREN \")\"\n+                    WHITESPACE \" \"\n+                    RET_TYPE\n+                      THIN_ARROW \"->\"\n+                      WHITESPACE \" \"\n+                      PATH_TYPE\n+                        PATH\n+                          PATH_SEGMENT\n+                            NAME_REF\n+                              IDENT \"i32\"\n+            R_ANGLE \">\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\"\n+  TYPE_ALIAS\n+    TYPE_KW \"type\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"C\"\n+    WHITESPACE \" \"\n+    EQ \"=\"\n+    WHITESPACE \" \"\n+    PATH_TYPE\n+      PATH\n+        PATH_SEGMENT\n+          NAME_REF\n+            IDENT \"S\"\n+          GENERIC_ARG_LIST\n+            L_ANGLE \"<\"\n+            TYPE_ARG\n+              DYN_TRAIT_TYPE\n+                TYPE_BOUND_LIST\n+                  TYPE_BOUND\n+                    PATH_TYPE\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"Fn\"\n+                          PARAM_LIST\n+                            L_PAREN \"(\"\n+                            PARAM\n+                              PATH_TYPE\n+                                PATH\n+                                  PATH_SEGMENT\n+                                    NAME_REF\n+                                      IDENT \"i32\"\n+                            R_PAREN \")\"\n+                          WHITESPACE \" \"\n+                          RET_TYPE\n+                            THIN_ARROW \"->\"\n+                            WHITESPACE \" \"\n+                            PATH_TYPE\n+                              PATH\n+                                PATH_SEGMENT\n+                                  NAME_REF\n+                                    IDENT \"i32\"\n+                  WHITESPACE \" \"\n+                  PLUS \"+\"\n+                  WHITESPACE \" \"\n+                  TYPE_BOUND\n+                    PATH_TYPE\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"Send\"\n+            R_ANGLE \">\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\""}, {"sha": "800002b1b8238a85ee8031655f66754398786da5", "filename": "crates/parser/test_data/parser/inline/ok/0209_bare_dyn_types_with_paren_as_generic_args.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0209_bare_dyn_types_with_paren_as_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0209_bare_dyn_types_with_paren_as_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0209_bare_dyn_types_with_paren_as_generic_args.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -0,0 +1,4 @@\n+type A = S<Fn(i32)>;\n+type A = S<Fn(i32) + Send>;\n+type B = S<Fn(i32) -> i32>;\n+type C = S<Fn(i32) -> i32 + Send>;"}, {"sha": "4c9027dec68e99367f0697639d0632652a1bc841", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -46,23 +46,21 @@ GenericArg =\n | AssocTypeArg\n | LifetimeArg\n | ConstArg\n-| ReturnTypeArg\n \n TypeArg =\n   Type\n \n AssocTypeArg =\n-  NameRef GenericArgList? (':' TypeBoundList | ('=' Type | ConstArg))\n+  NameRef\n+  (GenericArgList | ParamList RetType?)?\n+  (':' TypeBoundList | ('=' Type | ConstArg))\n \n LifetimeArg =\n   Lifetime\n \n ConstArg =\n   Expr\n \n-ReturnTypeArg =\n-  NameRef '(' '..' ')' ':' TypeBoundList\n-\n MacroCall =\n   Attr* Path '!' TokenTree ';'?\n \n@@ -585,7 +583,7 @@ ImplTraitType =\n   'impl' TypeBoundList\n \n DynTraitType =\n-  'dyn' TypeBoundList\n+  'dyn'? TypeBoundList\n \n TypeBoundList =\n   bounds:(TypeBound ('+' TypeBound)* '+'?)"}, {"sha": "61f6a04c98d38568a1911429ed51574d131b905f", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0341812795410fab08c535c41a0ecf7d7cb510/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=bc0341812795410fab08c535c41a0ecf7d7cb510", "patch": "@@ -121,6 +121,8 @@ impl ast::HasTypeBounds for AssocTypeArg {}\n impl AssocTypeArg {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn generic_arg_list(&self) -> Option<GenericArgList> { support::child(&self.syntax) }\n+    pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n+    pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n     pub fn const_arg(&self) -> Option<ConstArg> { support::child(&self.syntax) }\n@@ -142,18 +144,6 @@ impl ConstArg {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ReturnTypeArg {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::HasTypeBounds for ReturnTypeArg {}\n-impl ReturnTypeArg {\n-    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n-    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1528,7 +1518,6 @@ pub enum GenericArg {\n     AssocTypeArg(AssocTypeArg),\n     LifetimeArg(LifetimeArg),\n     ConstArg(ConstArg),\n-    ReturnTypeArg(ReturnTypeArg),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1878,17 +1867,6 @@ impl AstNode for ConstArg {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ReturnTypeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_TYPE_ARG }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for TypeBoundList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3243,20 +3221,16 @@ impl From<LifetimeArg> for GenericArg {\n impl From<ConstArg> for GenericArg {\n     fn from(node: ConstArg) -> GenericArg { GenericArg::ConstArg(node) }\n }\n-impl From<ReturnTypeArg> for GenericArg {\n-    fn from(node: ReturnTypeArg) -> GenericArg { GenericArg::ReturnTypeArg(node) }\n-}\n impl AstNode for GenericArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        matches!(kind, TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG | RETURN_TYPE_ARG)\n+        matches!(kind, TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             TYPE_ARG => GenericArg::TypeArg(TypeArg { syntax }),\n             ASSOC_TYPE_ARG => GenericArg::AssocTypeArg(AssocTypeArg { syntax }),\n             LIFETIME_ARG => GenericArg::LifetimeArg(LifetimeArg { syntax }),\n             CONST_ARG => GenericArg::ConstArg(ConstArg { syntax }),\n-            RETURN_TYPE_ARG => GenericArg::ReturnTypeArg(ReturnTypeArg { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3267,7 +3241,6 @@ impl AstNode for GenericArg {\n             GenericArg::AssocTypeArg(it) => &it.syntax,\n             GenericArg::LifetimeArg(it) => &it.syntax,\n             GenericArg::ConstArg(it) => &it.syntax,\n-            GenericArg::ReturnTypeArg(it) => &it.syntax,\n         }\n     }\n }\n@@ -4199,13 +4172,7 @@ impl AstNode for AnyHasTypeBounds {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         matches!(\n             kind,\n-            ASSOC_TYPE_ARG\n-                | RETURN_TYPE_ARG\n-                | TRAIT\n-                | TYPE_ALIAS\n-                | LIFETIME_PARAM\n-                | TYPE_PARAM\n-                | WHERE_PRED\n+            ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4368,11 +4335,6 @@ impl std::fmt::Display for ConstArg {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ReturnTypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for TypeBoundList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}]}