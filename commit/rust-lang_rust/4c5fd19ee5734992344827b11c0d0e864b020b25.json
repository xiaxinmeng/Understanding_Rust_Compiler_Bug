{"sha": "4c5fd19ee5734992344827b11c0d0e864b020b25", "node_id": "C_kwDOAAsO6NoAKDRjNWZkMTllZTU3MzQ5OTIzNDQ4MjdiMTFjMGQwZTg2NGIwMjBiMjU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-07T07:42:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-08T07:50:58Z"}, "message": "Render places in capture inlay hints", "tree": {"sha": "6d87e0ec250ee6f38869dbb356348353a7d40a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d87e0ec250ee6f38869dbb356348353a7d40a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5fd19ee5734992344827b11c0d0e864b020b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5fd19ee5734992344827b11c0d0e864b020b25", "html_url": "https://github.com/rust-lang/rust/commit/4c5fd19ee5734992344827b11c0d0e864b020b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5fd19ee5734992344827b11c0d0e864b020b25/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abcdb4bc7d06985bbe03780c73cd395af2272c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/abcdb4bc7d06985bbe03780c73cd395af2272c6c", "html_url": "https://github.com/rust-lang/rust/commit/abcdb4bc7d06985bbe03780c73cd395af2272c6c"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "3cfe78141d43be764bca81e96cc681f04e8cac9d", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=4c5fd19ee5734992344827b11c0d0e864b020b25", "patch": "@@ -304,7 +304,6 @@ pub struct HirDisplayWrapper<'a, T> {\n pub enum ClosureStyle {\n     /// `impl FnX(i32, i32) -> i32`, where `FnX` is the most special trait between `Fn`, `FnMut`, `FnOnce` that the\n     /// closure implements. This is the default.\n-    // FIXME: Allow rendering non capturing closures as plain function pointers?\n     ImplFn,\n     /// `|i32, i32| -> i32`\n     RANotation,"}, {"sha": "6d03c76eb6abc3787110023c951d5dc22e2b65bc", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=4c5fd19ee5734992344827b11c0d0e864b020b25", "patch": "@@ -170,23 +170,7 @@ impl CapturedItem {\n         self.kind\n     }\n \n-    pub fn display_kind(&self) -> &'static str {\n-        match self.kind {\n-            CaptureKind::ByRef(k) => match k {\n-                BorrowKind::Shared => \"immutable borrow\",\n-                BorrowKind::Shallow => {\n-                    never!(\"shallow borrow should not happen in closure captures\");\n-                    \"shallow borrow\"\n-                },\n-                BorrowKind::Unique => \"unique immutable borrow ([read more](https://doc.rust-lang.org/stable/reference/types/closure.html#unique-immutable-borrows-in-captures))\",\n-                BorrowKind::Mut { .. } => \"mutable borrow\",\n-            },\n-            CaptureKind::ByValue => \"move\",\n-        }\n-    }\n-\n-    pub fn display_place(&self, owner: ClosureId, db: &dyn HirDatabase) -> String {\n-        let owner = db.lookup_intern_closure(owner.into()).0;\n+    pub fn display_place(&self, owner: DefWithBodyId, db: &dyn HirDatabase) -> String {\n         let body = db.body(owner);\n         let mut result = body[self.place.local].name.to_string();\n         let mut field_need_paren = false;"}, {"sha": "1fac95ae5e37c0a5b4003bb765749ed890dd83c6", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=4c5fd19ee5734992344827b11c0d0e864b020b25", "patch": "@@ -3214,7 +3214,11 @@ impl Closure {\n         let owner = db.lookup_intern_closure((self.id).into()).0;\n         let infer = &db.infer(owner);\n         let info = infer.closure_info(&self.id);\n-        info.0.iter().cloned().map(|capture| ClosureCapture { owner, capture }).collect()\n+        info.0\n+            .iter()\n+            .cloned()\n+            .map(|capture| ClosureCapture { owner, closure: self.id, capture })\n+            .collect()\n     }\n \n     pub fn fn_trait(&self, db: &dyn HirDatabase) -> FnTrait {\n@@ -3228,6 +3232,7 @@ impl Closure {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct ClosureCapture {\n     owner: DefWithBodyId,\n+    closure: ClosureId,\n     capture: hir_ty::CapturedItem,\n }\n \n@@ -3251,12 +3256,8 @@ impl ClosureCapture {\n         }\n     }\n \n-    pub fn display_kind(&self) -> &'static str {\n-        self.capture.display_kind()\n-    }\n-\n-    pub fn display_place(&self, owner: ClosureId, db: &dyn HirDatabase) -> String {\n-        self.capture.display_place(owner, db)\n+    pub fn display_place(&self, db: &dyn HirDatabase) -> String {\n+        self.capture.display_place(self.owner, db)\n     }\n }\n "}, {"sha": "9bbedec44a2d0348bfbe9547c4181c5b5c38a505", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=4c5fd19ee5734992344827b11c0d0e864b020b25", "patch": "@@ -3,7 +3,8 @@ use std::fmt::Display;\n \n use either::Either;\n use hir::{\n-    Adt, AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo,\n+    Adt, AsAssocItem, AttributeTemplate, CaptureKind, HasAttrs, HasSource, HirDisplay, Semantics,\n+    TypeInfo,\n };\n use ide_db::{\n     base_db::SourceDatabase,\n@@ -54,8 +55,14 @@ pub(super) fn closure_expr(\n     let mut captures = c\n         .captured_items(sema.db)\n         .into_iter()\n-        .map(|x| {\n-            format!(\"* `{}` by {}\", x.display_place(c.clone().into(), sema.db), x.display_kind())\n+        .map(|it| {\n+            let borrow_kind=   match it.kind() {\n+                CaptureKind::SharedRef => \"immutable borrow\",\n+                CaptureKind::UniqueSharedRef => \"unique immutable borrow ([read more](https://doc.rust-lang.org/stable/reference/types/closure.html#unique-immutable-borrows-in-captures))\",\n+                CaptureKind::MutableRef => \"mutable borrow\",\n+                CaptureKind::Move => \"move\",\n+            };\n+            format!(\"* `{}` by {}\", it.display_place(sema.db), borrow_kind)\n         })\n         .join(\"\\n\");\n     if captures.trim().is_empty() {"}, {"sha": "60c4fe411f4fac17888675df7d8c809a1db257d6", "filename": "crates/ide/src/inlay_hints/closure_captures.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5fd19ee5734992344827b11c0d0e864b020b25/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs?ref=4c5fd19ee5734992344827b11c0d0e864b020b25", "patch": "@@ -65,7 +65,7 @@ pub(super) fn hints(\n                         hir::CaptureKind::MutableRef => \"&mut \",\n                         hir::CaptureKind::Move => \"\",\n                     },\n-                    local.name(sema.db)\n+                    capture.display_place(sema.db)\n                 ),\n                 None,\n                 source.name().and_then(|name| sema.original_range_opt(name.syntax())),\n@@ -156,13 +156,12 @@ fn main() {\n // ^ )\n         &mut baz;\n     };\n-    // FIXME: &mut qux should be &unique qux\n     || {\n // ^ move\n // ^ (\n // ^ &mut baz\n // ^ , $\n-// ^ &mut qux\n+// ^ &mut *qux\n // ^ )\n         baz = NonCopy;\n         *qux = NonCopy;"}]}