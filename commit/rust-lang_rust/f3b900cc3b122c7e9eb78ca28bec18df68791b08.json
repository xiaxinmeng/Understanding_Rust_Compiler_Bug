{"sha": "f3b900cc3b122c7e9eb78ca28bec18df68791b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYjkwMGNjM2IxMjJjN2U5ZWI3OGNhMjhiZWMxOGRmNjg3OTFiMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-31T23:06:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-31T23:06:37Z"}, "message": "Auto merge of #44764 - nvzqz:master, r=alexcrichton\n\nImplement TryFrom<&[T]> for &[T; N]\n\nThere are many cases where a buffer with a static compile-time size is preferred over a slice with a dynamic size. This allows for performing a checked conversion from `&[T]` to `&[T; N]`. This may also lead to compile-time optimizations involving `[T; N]` such as loop unrolling.\n\nThis is my first PR to Rust, so I'm not sure if discussion of this change should happen here or does it need its own RFC? I figured these changes would be a subset of #33417.", "tree": {"sha": "0fa55ce4def4412af633d90d87e52c18fe195fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa55ce4def4412af633d90d87e52c18fe195fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b900cc3b122c7e9eb78ca28bec18df68791b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b900cc3b122c7e9eb78ca28bec18df68791b08", "html_url": "https://github.com/rust-lang/rust/commit/f3b900cc3b122c7e9eb78ca28bec18df68791b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b900cc3b122c7e9eb78ca28bec18df68791b08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b22e70b2de5152db3b0c53cfa16eb96b0b9e40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b22e70b2de5152db3b0c53cfa16eb96b0b9e40e", "html_url": "https://github.com/rust-lang/rust/commit/8b22e70b2de5152db3b0c53cfa16eb96b0b9e40e"}, {"sha": "4c853adce9103b8bc84cd6b0026bcdc2eed7da31", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c853adce9103b8bc84cd6b0026bcdc2eed7da31", "html_url": "https://github.com/rust-lang/rust/commit/4c853adce9103b8bc84cd6b0026bcdc2eed7da31"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "3d24f8902bd83827be8aee45f393f9cf9f9e33a6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=f3b900cc3b122c7e9eb78ca28bec18df68791b08", "patch": "@@ -21,6 +21,7 @@\n \n use borrow::{Borrow, BorrowMut};\n use cmp::Ordering;\n+use convert::TryFrom;\n use fmt;\n use hash::{Hash, self};\n use marker::Unsize;\n@@ -57,6 +58,30 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n     }\n }\n \n+/// The error type returned when a conversion from a slice to an array fails.\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[derive(Debug, Copy, Clone)]\n+pub struct TryFromSliceError(());\n+\n+impl fmt::Display for TryFromSliceError {\n+    #[inline]\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self.__description(), f)\n+    }\n+}\n+\n+impl TryFromSliceError {\n+    #[unstable(feature = \"array_error_internals\",\n+           reason = \"available through Error trait and this method should not \\\n+                     be exposed publicly\",\n+           issue = \"0\")]\n+    #[inline]\n+    #[doc(hidden)]\n+    pub fn __description(&self) -> &str {\n+        \"could not convert slice to array\"\n+    }\n+}\n+\n macro_rules! __impl_slice_eq1 {\n     ($Lhs: ty, $Rhs: ty) => {\n         __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n@@ -123,6 +148,34 @@ macro_rules! array_impls {\n                 }\n             }\n \n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n+                type Error = TryFromSliceError;\n+\n+                fn try_from(slice: &[T]) -> Result<&[T; $N], TryFromSliceError> {\n+                    if slice.len() == $N {\n+                        let ptr = slice.as_ptr() as *const [T; $N];\n+                        unsafe { Ok(&*ptr) }\n+                    } else {\n+                        Err(TryFromSliceError(()))\n+                    }\n+                }\n+            }\n+\n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n+                type Error = TryFromSliceError;\n+\n+                fn try_from(slice: &mut [T]) -> Result<&mut [T; $N], TryFromSliceError> {\n+                    if slice.len() == $N {\n+                        let ptr = slice.as_mut_ptr() as *mut [T; $N];\n+                        unsafe { Ok(&mut *ptr) }\n+                    } else {\n+                        Err(TryFromSliceError(()))\n+                    }\n+                }\n+            }\n+\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T: Hash> Hash for [T; $N] {\n                 fn hash<H: hash::Hasher>(&self, state: &mut H) {"}, {"sha": "6278d5e23e0d69a3fb9ab4f7096a94a472ae6dcc", "filename": "src/libcore/tests/array.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Farray.rs?ref=f3b900cc3b122c7e9eb78ca28bec18df68791b08", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n use core::array::FixedSizeArray;\n+use core::convert::TryFrom;\n \n #[test]\n fn fixed_size_array() {\n@@ -26,3 +27,25 @@ fn fixed_size_array() {\n     assert_eq!(FixedSizeArray::as_mut_slice(&mut empty_array).len(), 0);\n     assert_eq!(FixedSizeArray::as_mut_slice(&mut empty_zero_sized).len(), 0);\n }\n+\n+#[test]\n+fn array_try_from() {\n+    macro_rules! test {\n+        ($($N:expr)+) => {\n+            $({\n+                type Array = [u8; $N];\n+                let array: Array = [0; $N];\n+                let slice: &[u8] = &array[..];\n+\n+                let result = <&Array>::try_from(slice);\n+                assert_eq!(&array, result.unwrap());\n+            })+\n+        }\n+    }\n+    test! {\n+         0  1  2  3  4  5  6  7  8  9\n+        10 11 12 13 14 15 16 17 18 19\n+        20 21 22 23 24 25 26 27 28 29\n+        30 31 32\n+    }\n+}"}, {"sha": "231b0be927612160bd16a6e57e0f36e7442e599d", "filename": "src/libstd/error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f3b900cc3b122c7e9eb78ca28bec18df68791b08", "patch": "@@ -57,6 +57,7 @@ use borrow::Cow;\n use cell;\n use char;\n use convert;\n+use core::array;\n use fmt::{self, Debug, Display};\n use mem::transmute;\n use num;\n@@ -282,6 +283,13 @@ impl Error for num::TryFromIntError {\n     }\n }\n \n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl Error for array::TryFromSliceError {\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for num::ParseFloatError {\n     fn description(&self) -> &str {"}, {"sha": "5cf1d225b9028cf90d2249bc3c222e33bbe5c446", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b900cc3b122c7e9eb78ca28bec18df68791b08/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f3b900cc3b122c7e9eb78ca28bec18df68791b08", "patch": "@@ -243,6 +243,7 @@\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n #![feature(align_offset)]\n+#![feature(array_error_internals)]\n #![feature(asm)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n@@ -267,6 +268,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(fixed_size_array)]\n #![feature(float_from_str_radix)]\n #![feature(fn_traits)]\n #![feature(fnbox)]"}]}