{"sha": "483b7ac918980c13482e09d9900dc8102b2f9927", "node_id": "C_kwDOAAsO6NoAKDQ4M2I3YWM5MTg5ODBjMTM0ODJlMDlkOTkwMGRjODEwMmIyZjk5Mjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T16:04:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T16:04:51Z"}, "message": "Auto merge of #10038 - xFrednet:9231-sugg-try-from, r=Jarcho\n\n`cast_possible_truncation` Suggest TryFrom when truncation possible\n\nThis fixes the last issues from https://github.com/rust-lang/rust-clippy/pull/9664 as the author seems to be inactive. The PR author was sadly kept during the rebase, due to the conflict resolution.\n\nIDK if it's worth it do to a full review, I only added the last commit, everything else remained the same, besides a rebase.\n\n---\n\nchangelog: Sugg: [`cast_possible_truncation`]: Now suggests using `try_from` or allowing the lint\n[#10038](https://github.com/rust-lang/rust-clippy/pull/10038)\n<!-- changelog_checked -->\n\ncloses: https://github.com/rust-lang/rust-clippy/issues/9231", "tree": {"sha": "03ac0a4a8b68696f68fce26c7df66f771dbc7702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ac0a4a8b68696f68fce26c7df66f771dbc7702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/483b7ac918980c13482e09d9900dc8102b2f9927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/483b7ac918980c13482e09d9900dc8102b2f9927", "html_url": "https://github.com/rust-lang/rust/commit/483b7ac918980c13482e09d9900dc8102b2f9927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/483b7ac918980c13482e09d9900dc8102b2f9927/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91c8ecc5f9ac3b005a532e6d0809eb7682d05cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c8ecc5f9ac3b005a532e6d0809eb7682d05cf6", "html_url": "https://github.com/rust-lang/rust/commit/91c8ecc5f9ac3b005a532e6d0809eb7682d05cf6"}, {"sha": "5cb6246c3e7ccae640eafbc238a293918b552116", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb6246c3e7ccae640eafbc238a293918b552116", "html_url": "https://github.com/rust-lang/rust/commit/5cb6246c3e7ccae640eafbc238a293918b552116"}], "stats": {"total": 269, "additions": 244, "deletions": 25}, "files": [{"sha": "f3f8b8d87982e6aee6eae51bd47c6cf18fe3646a", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/483b7ac918980c13482e09d9900dc8102b2f9927/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483b7ac918980c13482e09d9900dc8102b2f9927/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=483b7ac918980c13482e09d9900dc8102b2f9927", "patch": "@@ -1,11 +1,14 @@\n use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::expr_or_init;\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{get_discriminant_value, is_isize_or_usize};\n+use rustc_errors::{Applicability, SuggestionStyle};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n+use rustc_span::Span;\n use rustc_target::abi::IntegerType;\n \n use super::{utils, CAST_ENUM_TRUNCATION, CAST_POSSIBLE_TRUNCATION};\n@@ -74,7 +77,14 @@ fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: b\n     }\n }\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    cast_to_span: Span,\n+) {\n     let msg = match (cast_from.kind(), cast_to.is_integral()) {\n         (ty::Int(_) | ty::Uint(_), true) => {\n             let from_nbits = apply_reductions(\n@@ -139,7 +149,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 );\n                 return;\n             }\n-            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\",)\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\")\n         },\n \n         (ty::Float(_), true) => {\n@@ -153,5 +163,19 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         _ => return,\n     };\n \n-    span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg);\n+    let name_of_cast_from = snippet(cx, cast_expr.span, \"..\");\n+    let cast_to_snip = snippet(cx, cast_to_span, \"..\");\n+    let suggestion = format!(\"{cast_to_snip}::try_from({name_of_cast_from})\");\n+\n+    span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n+        diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\");\n+        diag.span_suggestion_with_style(\n+            expr.span,\n+            \"... or use `try_from` and handle the error accordingly\",\n+            suggestion,\n+            Applicability::Unspecified,\n+            // always show the suggestion in a separate line\n+            SuggestionStyle::ShowAlways,\n+        );\n+    });\n }"}, {"sha": "362f70d12d185344181f2e7524dcc977890488e8", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/483b7ac918980c13482e09d9900dc8102b2f9927/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483b7ac918980c13482e09d9900dc8102b2f9927/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=483b7ac918980c13482e09d9900dc8102b2f9927", "patch": "@@ -80,7 +80,8 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for casts between numerical types that may\n     /// truncate large values. This is expected behavior, so the cast is `Allow` by\n-    /// default.\n+    /// default. It suggests user either explicitly ignore the lint,\n+    /// or use `try_from()` and handle the truncation, default, or panic explicitly.\n     ///\n     /// ### Why is this bad?\n     /// In some problem domains, it is good practice to avoid\n@@ -93,6 +94,21 @@ declare_clippy_lint! {\n     ///     x as u8\n     /// }\n     /// ```\n+    /// Use instead:\n+    /// ```\n+    /// fn as_u8(x: u64) -> u8 {\n+    ///     if let Ok(x) = u8::try_from(x) {\n+    ///         x\n+    ///     } else {\n+    ///         todo!();\n+    ///     }\n+    /// }\n+    /// // Or\n+    /// #[allow(clippy::cast_possible_truncation)]\n+    /// fn as_u16(x: u64) -> u16 {\n+    ///     x as u16\n+    /// }\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub CAST_POSSIBLE_TRUNCATION,\n     pedantic,\n@@ -712,7 +728,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n \n             if cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n+                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to, cast_to_hir.span);\n                 if cast_from.is_numeric() {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);"}, {"sha": "8b2673c2a7fdb24f15e267a76123e4284e279696", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/483b7ac918980c13482e09d9900dc8102b2f9927/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483b7ac918980c13482e09d9900dc8102b2f9927/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=483b7ac918980c13482e09d9900dc8102b2f9927", "patch": "@@ -28,6 +28,7 @@ fn main() {\n     1i32 as u8;\n     1f64 as isize;\n     1f64 as usize;\n+    1f32 as u32 as u16;\n     // Test clippy::cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;"}, {"sha": "4af1de9aa38d354db9afdbad5172a63f7fa9132b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 144, "deletions": 19, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/483b7ac918980c13482e09d9900dc8102b2f9927/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/483b7ac918980c13482e09d9900dc8102b2f9927/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=483b7ac918980c13482e09d9900dc8102b2f9927", "patch": "@@ -42,13 +42,24 @@ error: casting `f32` to `i32` may truncate the value\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1f32);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may truncate the value\n   --> $DIR/cast.rs:25:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1f32);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:25:5\n@@ -63,148 +74,262 @@ error: casting `f64` to `f32` may truncate the value\n    |\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     f32::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `i8` may truncate the value\n   --> $DIR/cast.rs:27:5\n    |\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from(1i32);\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `u8` may truncate the value\n   --> $DIR/cast.rs:28:5\n    |\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u8::try_from(1i32);\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `isize` may truncate the value\n   --> $DIR/cast.rs:29:5\n    |\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may truncate the value\n   --> $DIR/cast.rs:30:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may lose the sign of the value\n   --> $DIR/cast.rs:30:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n+error: casting `u32` to `u16` may truncate the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u16::try_from(1f32 as u32);\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `u32` may truncate the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1f32) as u16;\n+   |     ~~~~~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `u32` may lose the sign of the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^\n+\n error: casting `u8` to `i8` may wrap around the value\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:33:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting `u16` to `i16` may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:34:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting `u32` to `i32` may wrap around the value\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:35:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting `u64` to `i64` may wrap around the value\n-  --> $DIR/cast.rs:35:5\n+  --> $DIR/cast.rs:36:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting `usize` to `isize` may wrap around the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:37:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting `i32` to `u32` may lose the sign of the value\n-  --> $DIR/cast.rs:39:5\n+  --> $DIR/cast.rs:40:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting `isize` to `usize` may lose the sign of the value\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:42:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting `i64` to `i8` may truncate the value\n-  --> $DIR/cast.rs:108:5\n+  --> $DIR/cast.rs:109:5\n    |\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because signed\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `u8` may truncate the value\n-  --> $DIR/cast.rs:120:5\n+  --> $DIR/cast.rs:121:5\n    |\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2` to `u8` may truncate the value\n-  --> $DIR/cast.rs:141:21\n+  --> $DIR/cast.rs:142:21\n    |\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = u8::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2::B` to `u8` will truncate the value\n-  --> $DIR/cast.rs:142:21\n+  --> $DIR/cast.rs:143:21\n    |\n LL |             let _ = Self::B as u8;\n    |                     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`\n \n error: casting `main::E5` to `i8` may truncate the value\n-  --> $DIR/cast.rs:178:21\n+  --> $DIR/cast.rs:179:21\n    |\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = i8::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E5::A` to `i8` will truncate the value\n-  --> $DIR/cast.rs:179:21\n+  --> $DIR/cast.rs:180:21\n    |\n LL |             let _ = Self::A as i8;\n    |                     ^^^^^^^^^^^^^\n \n error: casting `main::E6` to `i16` may truncate the value\n-  --> $DIR/cast.rs:193:21\n+  --> $DIR/cast.rs:194:21\n    |\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = i16::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:208:21\n+  --> $DIR/cast.rs:209:21\n    |\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = usize::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E10` to `u16` may truncate the value\n-  --> $DIR/cast.rs:249:21\n+  --> $DIR/cast.rs:250:21\n    |\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = u16::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:257:13\n+  --> $DIR/cast.rs:258:13\n    |\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     let c = u8::try_from((q >> 16));\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:260:13\n+  --> $DIR/cast.rs:261:13\n    |\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     let c = u8::try_from((q / 1000));\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 36 previous errors\n "}, {"sha": "8acf26049f4d15755f9163ed6b0836a59c436e8b", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/483b7ac918980c13482e09d9900dc8102b2f9927/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/483b7ac918980c13482e09d9900dc8102b2f9927/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=483b7ac918980c13482e09d9900dc8102b2f9927", "patch": "@@ -4,7 +4,12 @@ error: casting `isize` to `i8` may truncate the value\n LL |     1isize as i8;\n    |     ^^^^^^^^^^^^\n    |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~\n \n error: casting `isize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`isize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size.rs:15:5\n@@ -37,24 +42,48 @@ error: casting `isize` to `i32` may truncate the value on targets with 64-bit wi\n    |\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `isize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:20:5\n    |\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:21:5\n    |\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1usize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1usize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n@@ -69,18 +98,36 @@ error: casting `i64` to `isize` may truncate the value on targets with 32-bit wi\n    |\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1i64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:25:5\n    |\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1i64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1u64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n@@ -93,6 +140,12 @@ error: casting `u64` to `usize` may truncate the value on targets with 32-bit wi\n    |\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1u64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `isize` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:28:5"}]}