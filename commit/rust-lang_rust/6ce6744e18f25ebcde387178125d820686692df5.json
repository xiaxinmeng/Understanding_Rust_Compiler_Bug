{"sha": "6ce6744e18f25ebcde387178125d820686692df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZTY3NDRlMThmMjVlYmNkZTM4NzE3ODEyNWQ4MjA2ODY2OTJkZjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-11T14:49:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-11T14:49:57Z"}, "message": "Merge #1796\n\n1796: Support completion for macros r=matklad a=uHOOCCOOHu\n\nThis is based on #1795 , and fixes #1727 \r\n\r\nAlso prettify hover text of macros.\r\n\r\nSome screenshorts below:\r\n\r\nCompletion in item place.\r\n<img width=\"416\" alt=\"Screenshot_20190910_134056\" src=\"https://user-images.githubusercontent.com/14816024/64587159-fa72da00-d3d0-11e9-86bb-c98f169ec08d.png\">\r\n\r\nAfter pressing `tab`.\r\n<img width=\"313\" alt=\"Screenshot_20190910_134111\" src=\"https://user-images.githubusercontent.com/14816024/64587160-fa72da00-d3d0-11e9-9464-21e3f6957bd7.png\">\r\n\r\nComplete macros from `std`.\r\n<img width=\"588\" alt=\"Screenshot_20190910_134147\" src=\"https://user-images.githubusercontent.com/14816024/64587161-fb0b7080-d3d0-11e9-866e-5161f0d1b546.png\">\r\n\r\nHover text.\r\n<img width=\"521\" alt=\"Screenshot_20190910_134242\" src=\"https://user-images.githubusercontent.com/14816024/64587162-fb0b7080-d3d0-11e9-8f09-ad17e3f6702a.png\">\r\n\r\n\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>", "tree": {"sha": "e1861982356f9905980537f962dff9560423f901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1861982356f9905980537f962dff9560423f901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce6744e18f25ebcde387178125d820686692df5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdeQmVCRBK7hj4Ov3rIwAAdHIIAFjXGnifra1Uf18mWJ1E+WUx\n1HUSQ13ZUPSVaj4XzaB3kdj5awM62Qw23HCrDpZocxLUQcF7bFB1/s8odoMVKNmc\nOLSHcL7Tby+9STYoB26Yz+HKJim0/37+ErlM/TRq1Z5Nn68novyKRnQlvdRtNvO8\nTVL62KCaafWDQaFsRp55hbJoFvvBoQBdxdP59OGTijTvt27uPbdh7cPBWjLG3nYh\nJenQB/vD0t9q0svPHocJmcv1s2cVoQ3pqyjEdIBoSPfhOd3i7a58FmgFaHtOPuCy\nccsESeuEJ729IaxAe+V/E1mb9egKwPeV183jtbab/3Wg6+ZuOEEKiavvfz5JQN4=\n=7XHL\n-----END PGP SIGNATURE-----\n", "payload": "tree e1861982356f9905980537f962dff9560423f901\nparent 7bbb039fbdd124cb6549eb67bbe7316f03ff40e8\nparent 6353b1621f44e1b0db65ebbe414aa7c5f1864b9d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568213397 +0000\ncommitter GitHub <noreply@github.com> 1568213397 +0000\n\nMerge #1796\n\n1796: Support completion for macros r=matklad a=uHOOCCOOHu\n\nThis is based on #1795 , and fixes #1727 \r\n\r\nAlso prettify hover text of macros.\r\n\r\nSome screenshorts below:\r\n\r\nCompletion in item place.\r\n<img width=\"416\" alt=\"Screenshot_20190910_134056\" src=\"https://user-images.githubusercontent.com/14816024/64587159-fa72da00-d3d0-11e9-86bb-c98f169ec08d.png\">\r\n\r\nAfter pressing `tab`.\r\n<img width=\"313\" alt=\"Screenshot_20190910_134111\" src=\"https://user-images.githubusercontent.com/14816024/64587160-fa72da00-d3d0-11e9-9464-21e3f6957bd7.png\">\r\n\r\nComplete macros from `std`.\r\n<img width=\"588\" alt=\"Screenshot_20190910_134147\" src=\"https://user-images.githubusercontent.com/14816024/64587161-fb0b7080-d3d0-11e9-866e-5161f0d1b546.png\">\r\n\r\nHover text.\r\n<img width=\"521\" alt=\"Screenshot_20190910_134242\" src=\"https://user-images.githubusercontent.com/14816024/64587162-fb0b7080-d3d0-11e9-8f09-ad17e3f6702a.png\">\r\n\r\n\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce6744e18f25ebcde387178125d820686692df5", "html_url": "https://github.com/rust-lang/rust/commit/6ce6744e18f25ebcde387178125d820686692df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce6744e18f25ebcde387178125d820686692df5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bbb039fbdd124cb6549eb67bbe7316f03ff40e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bbb039fbdd124cb6549eb67bbe7316f03ff40e8", "html_url": "https://github.com/rust-lang/rust/commit/7bbb039fbdd124cb6549eb67bbe7316f03ff40e8"}, {"sha": "6353b1621f44e1b0db65ebbe414aa7c5f1864b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6353b1621f44e1b0db65ebbe414aa7c5f1864b9d", "html_url": "https://github.com/rust-lang/rust/commit/6353b1621f44e1b0db65ebbe414aa7c5f1864b9d"}], "stats": {"total": 342, "additions": 334, "deletions": 8}, "files": [{"sha": "3d8691f535ef13626e4b18dbdc351b84525a8c50", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -416,7 +416,7 @@ impl CrateDefMap {\n                         );\n                     }\n \n-                    // Since it is a quantified path here, it should not contains legacy macros\n+                    // Since it is a qualified path here, it should not contains legacy macros\n                     match self[module.module_id].scope.get(&segment.name) {\n                         Some(res) => res.def,\n                         _ => {"}, {"sha": "6e0bc437e63fc4cc5060c86c4fd2a13d8307d5e7", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -430,7 +430,7 @@ fn macro_use_can_be_aliased() {\n }\n \n #[test]\n-fn path_quantified_macros() {\n+fn path_qualified_macros() {\n     let map = def_map(\n         \"\n         //- /main.rs"}, {"sha": "869ae13f194b0d504491e923faf6f168e0bb6814", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -2839,7 +2839,7 @@ fn main() {\n }\n \n #[test]\n-fn infer_path_quantified_macros_expanded() {\n+fn infer_path_qualified_macros_expanded() {\n     assert_snapshot!(\n         infer(r#\"\n #[macro_export]"}, {"sha": "0ad4148311c1048f538322afacaf7d1fd6ad96b0", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -12,6 +12,7 @@ mod complete_snippet;\n mod complete_path;\n mod complete_scope;\n mod complete_postfix;\n+mod complete_macro_in_item_position;\n \n use ra_db::SourceDatabase;\n \n@@ -69,5 +70,6 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_record_pattern::complete_record_pattern(&mut acc, &ctx);\n     complete_pattern::complete_pattern(&mut acc, &ctx);\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n+    complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     Some(acc)\n }"}, {"sha": "708dc97771e8eddcc2f5645d9eff15063018c2a7", "filename": "crates/ra_ide_api/src/completion/complete_macro_in_item_position.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -0,0 +1,50 @@\n+use crate::completion::{CompletionContext, Completions};\n+\n+pub(super) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n+    // Show only macros in top level.\n+    if ctx.is_new_item {\n+        for (name, res) in ctx.analyzer.all_names(ctx.db) {\n+            if res.get_macros().is_some() {\n+                acc.add_resolution(ctx, name.to_string(), &res.only_macros());\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n+    use insta::assert_debug_snapshot;\n+\n+    fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n+        do_completion(code, CompletionKind::Reference)\n+    }\n+\n+    #[test]\n+    fn completes_macros_as_item() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn foo() {}\n+\n+                <|>\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [46; 46),\n+        delete: [46; 46),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+]\"##\n+        );\n+    }\n+}"}, {"sha": "31e7dffe8c040da7a1a6ca7f552d41e096121643", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -584,6 +584,42 @@ mod tests {\n         kind: Function,\n         detail: \"fn foo()\",\n     },\n+]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_qualified_macros() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                #[macro_export]\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    let _ = crate::<|>\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [179; 179),\n+        delete: [179; 179),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"#[macro_export]\\nmacro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [179; 179),\n+        delete: [179; 179),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n ]\"###\n         );\n     }"}, {"sha": "2062e7300c975bd36616793c12e0cad829ae20e8", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -532,4 +532,196 @@ mod tests {\n ]\"#\n         );\n     }\n+\n+    #[test]\n+    fn completes_macros_as_value() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                #[macro_use]\n+                mod m1 {\n+                    macro_rules! bar {\n+                        () => {}\n+                    }\n+                }\n+\n+                mod m2 {\n+                    macro_rules! nope {\n+                        () => {}\n+                    }\n+\n+                    #[macro_export]\n+                    macro_rules! baz {\n+                        () => {}\n+                    }\n+                }\n+\n+                fn main() {\n+                    let v = <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"bar\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"bar!\",\n+        kind: Macro,\n+        detail: \"macro_rules! bar\",\n+    },\n+    CompletionItem {\n+        label: \"baz\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"baz!\",\n+        kind: Macro,\n+        detail: \"#[macro_export]\\nmacro_rules! baz\",\n+    },\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"m1\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"m1\",\n+        kind: Module,\n+    },\n+    CompletionItem {\n+        label: \"m2\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"m2\",\n+        kind: Module,\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n+]\"##\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_both_macro_and_value() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn foo() {\n+                    <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [49; 49),\n+        delete: [49; 49),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [49; 49),\n+        delete: [49; 49),\n+        insert: \"foo()$0\",\n+        kind: Function,\n+        detail: \"fn foo()\",\n+    },\n+]\"##\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_macros_as_type() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    let x: <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [57; 57),\n+        delete: [57; 57),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [57; 57),\n+        delete: [57; 57),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n+]\"##\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_macros_as_stmt() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [50; 50),\n+        delete: [50; 50),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [50; 50),\n+        delete: [50; 50),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n+]\"##\n+        );\n+    }\n }"}, {"sha": "1b706bb131d6dbe39f6630b618a5f8e1f0eafea6", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -8,7 +8,7 @@ use crate::completion::{\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n-use crate::display::{const_label, function_label, type_label};\n+use crate::display::{const_label, function_label, macro_label, type_label};\n \n impl Completions {\n     pub(crate) fn add_field(\n@@ -43,8 +43,14 @@ impl Completions {\n     ) {\n         use hir::ModuleDef::*;\n \n+        if let Some(macro_) = resolution.get_macros() {\n+            self.add_macro(ctx, Some(local_name.clone()), macro_);\n+        }\n+\n         let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n         let def = match def {\n+            // Only insert once if it is just a macro name\n+            None if resolution.get_macros().is_some() => return,\n             None => {\n                 self.add(CompletionItem::new(\n                     CompletionKind::Reference,\n@@ -98,6 +104,22 @@ impl Completions {\n         self.add_function_with_name(ctx, None, func)\n     }\n \n+    fn add_macro(&mut self, ctx: &CompletionContext, name: Option<String>, macro_: hir::MacroDef) {\n+        let ast_node = macro_.source(ctx.db).ast;\n+        if let Some(name) = name {\n+            let detail = macro_label(&ast_node);\n+\n+            let builder =\n+                CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone())\n+                    .kind(CompletionItemKind::Macro)\n+                    .set_documentation(macro_.docs(ctx.db))\n+                    .detail(detail)\n+                    .insert_snippet(format!(\"{}!\", name));\n+\n+            self.add(builder);\n+        }\n+    }\n+\n     fn add_function_with_name(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "a980c56bc05ec9a5f920cc026b49add400e25680", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -7,7 +7,7 @@ mod structure;\n mod short_label;\n \n use ra_syntax::{\n-    ast::{self, AstNode, TypeParamsOwner},\n+    ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n     SyntaxKind::{ATTR, COMMENT},\n };\n \n@@ -61,6 +61,12 @@ pub(crate) fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n     res\n }\n \n+pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n+    let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n+    let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n+    format!(\"{}macro_rules! {}\", vis, name)\n+}\n+\n pub(crate) fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n     rust_code_markup_with_doc::<_, &str>(val, None)\n }"}, {"sha": "4b7847de852ee2586f458e6dffa863e05b1e657a", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6744e18f25ebcde387178125d820686692df5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=6ce6744e18f25ebcde387178125d820686692df5", "patch": "@@ -12,8 +12,8 @@ use ra_syntax::{\n use crate::{\n     db::RootDatabase,\n     display::{\n-        description_from_symbol, docs_from_symbol, rust_code_markup, rust_code_markup_with_doc,\n-        ShortLabel,\n+        description_from_symbol, docs_from_symbol, macro_label, rust_code_markup,\n+        rust_code_markup_with_doc, ShortLabel,\n     },\n     name_ref_kind::{classify_name_ref, NameRefKind::*},\n     FilePosition, FileRange, RangeInfo,\n@@ -108,7 +108,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             Some(Method(it)) => res.extend(from_def_source(db, it)),\n             Some(Macro(it)) => {\n                 let src = it.source(db);\n-                res.extend(hover_text(src.ast.doc_comment_text(), None));\n+                res.extend(hover_text(src.ast.doc_comment_text(), Some(macro_label(&src.ast))));\n             }\n             Some(FieldAccess(it)) => {\n                 let src = it.source(db);\n@@ -700,4 +700,22 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_macro_invocation() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            macro_rules! foo {\n+                () => {}\n+            }\n+\n+            fn f() {\n+                fo<|>o!();\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"macro_rules! foo\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}]}