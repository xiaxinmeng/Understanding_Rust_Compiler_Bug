{"sha": "467e0f44463f4026922925e6666d96a772ae39d7", "node_id": "C_kwDOAAsO6NoAKDQ2N2UwZjQ0NDYzZjQwMjY5MjI5MjVlNjY2NmQ5NmE3NzJhZTM5ZDc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T19:48:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T20:18:03Z"}, "message": "use precise spans for recursive const evaluation", "tree": {"sha": "67a00b9239e4dd6382716ae8eb6a2b730fe67eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67a00b9239e4dd6382716ae8eb6a2b730fe67eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467e0f44463f4026922925e6666d96a772ae39d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467e0f44463f4026922925e6666d96a772ae39d7", "html_url": "https://github.com/rust-lang/rust/commit/467e0f44463f4026922925e6666d96a772ae39d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467e0f44463f4026922925e6666d96a772ae39d7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "html_url": "https://github.com/rust-lang/rust/commit/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "85de5908a23a314310f80eadd358fea22ee4733d", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -926,7 +926,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.param_env\n         };\n         let param_env = param_env.with_const();\n-        let val = self.tcx.eval_to_allocation_raw(param_env.and(gid))?;\n+        // Use a precise span for better cycle errors.\n+        let val = self.tcx.at(self.cur_span()).eval_to_allocation_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }\n "}, {"sha": "17b8ab8742a5ba05979bbf92ce4ed269c03e75d1", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -504,7 +504,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     throw_unsup!(ReadExternStatic(def_id));\n                 }\n \n-                (self.tcx.eval_static_initializer(def_id)?, Some(def_id))\n+                // Use a precise span for better cycle errors.\n+                (self.tcx.at(self.cur_span()).eval_static_initializer(def_id)?, Some(def_id))\n             }\n         };\n         M::before_access_global(*self.tcx, &self.machine, id, alloc, def_id, is_write)?;"}, {"sha": "98f69456e49aab029a0fc0c4aea7987a852f32ab", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -55,7 +55,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         let basic_block = &self.body().basic_blocks()[loc.block];\n \n-\n         if let Some(stmt) = basic_block.statements.get(loc.statement_index) {\n             let old_frames = self.frame_idx();\n             self.statement(stmt)?;"}, {"sha": "8fc957cf49c8863aab852db8026d23e5fe178693", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -3,9 +3,9 @@ use super::{ErrorHandled, EvalToConstValueResult, GlobalId};\n use crate::mir;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::InternalSubsts;\n-use crate::ty::{self, TyCtxt};\n+use crate::ty::{self, query::TyCtxtAt, TyCtxt};\n use rustc_hir::def_id::DefId;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n@@ -86,14 +86,25 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Evaluate a static's initializer, returning the allocation of the initializer's memory.\n+    #[inline(always)]\n+    pub fn eval_static_initializer(\n+        self,\n+        def_id: DefId,\n+    ) -> Result<mir::ConstAllocation<'tcx>, ErrorHandled> {\n+        self.at(DUMMY_SP).eval_static_initializer(def_id)\n+    }\n+}\n+\n+impl<'tcx> TyCtxtAt<'tcx> {\n     /// Evaluate a static's initializer, returning the allocation of the initializer's memory.\n     pub fn eval_static_initializer(\n         self,\n         def_id: DefId,\n     ) -> Result<mir::ConstAllocation<'tcx>, ErrorHandled> {\n         trace!(\"eval_static_initializer: Need to compute {:?}\", def_id);\n         assert!(self.is_static(def_id));\n-        let instance = ty::Instance::mono(self, def_id);\n+        let instance = ty::Instance::mono(*self, def_id);\n         let gid = GlobalId { instance, promoted: None };\n         self.eval_to_allocation(gid, ty::ParamEnv::reveal_all())\n     }\n@@ -109,7 +120,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         let raw_const = self.eval_to_allocation_raw(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n     }\n+}\n \n+impl<'tcx> TyCtxt<'tcx> {\n     /// Destructure a type-level constant ADT or array into its variant index and its field values.\n     /// Panics if the destructuring fails, use `try_destructure_const` for fallible version.\n     pub fn destructure_const("}, {"sha": "2a4ad5825ecfa7df9ea9b8e2a6616f93b24203a4", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -5,10 +5,10 @@ LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `FOO`...\n-  --> $DIR/recursive-zst-static.rs:10:1\n+  --> $DIR/recursive-zst-static.rs:10:18\n    |\n LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n "}, {"sha": "2a4ad5825ecfa7df9ea9b8e2a6616f93b24203a4", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -5,10 +5,10 @@ LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `FOO`...\n-  --> $DIR/recursive-zst-static.rs:10:1\n+  --> $DIR/recursive-zst-static.rs:10:18\n    |\n LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n "}, {"sha": "ab4b8844e5b5a4e207a76ae94e5cfc90a15eae40", "filename": "src/test/ui/consts/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -11,10 +11,10 @@ LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `C`...\n-  --> $DIR/write-to-static-mut-in-static.rs:5:1\n+  --> $DIR/write-to-static-mut-in-static.rs:5:34\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  ^^^^^\n    = note: ...which again requires const-evaluating + checking `C`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n "}, {"sha": "be4f09f9286d1a5ec0ec652e73c0d4ea010cced8", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467e0f44463f4026922925e6666d96a772ae39d7/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=467e0f44463f4026922925e6666d96a772ae39d7", "patch": "@@ -5,10 +5,10 @@ LL | pub static FOO: u32 = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `FOO`...\n-  --> $DIR/recursive-static-definition.rs:1:1\n+  --> $DIR/recursive-static-definition.rs:1:23\n    |\n LL | pub static FOO: u32 = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n "}]}