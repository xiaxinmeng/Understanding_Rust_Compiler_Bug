{"sha": "3057b7b9749f16ad982b54b4bdeee7e2c8a845bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNTdiN2I5NzQ5ZjE2YWQ5ODJiNTRiNGJkZWVlN2UyYzhhODQ1YmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-06T16:14:43Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-06T16:14:43Z"}, "message": "ICH: Make CachingCodemapView robustly handle invalid spans.", "tree": {"sha": "ceb2ce08b037c9e364c56175c821f24586f3003e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb2ce08b037c9e364c56175c821f24586f3003e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb", "html_url": "https://github.com/rust-lang/rust/commit/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7310a8ffea95400c2c61d4fb27c224eb0e64e244", "url": "https://api.github.com/repos/rust-lang/rust/commits/7310a8ffea95400c2c61d4fb27c224eb0e64e244", "html_url": "https://github.com/rust-lang/rust/commit/7310a8ffea95400c2c61d4fb27c224eb0e64e244"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "ad9c48420e217d04b5a82ba23808b7a1064464c3", "filename": "src/librustc_incremental/calculate_svh/caching_codemap_view.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb/src%2Flibrustc_incremental%2Fcalculate_svh%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb/src%2Flibrustc_incremental%2Fcalculate_svh%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fcaching_codemap_view.rs?ref=3057b7b9749f16ad982b54b4bdeee7e2c8a845bb", "patch": "@@ -53,16 +53,16 @@ impl<'tcx> CachingCodemapView<'tcx> {\n \n     pub fn byte_pos_to_line_and_col(&mut self,\n                                     pos: BytePos)\n-                                    -> (Rc<FileMap>, usize, BytePos) {\n+                                    -> Option<(Rc<FileMap>, usize, BytePos)> {\n         self.time_stamp += 1;\n \n         // Check if the position is in one of the cached lines\n         for cache_entry in self.line_cache.iter_mut() {\n             if pos >= cache_entry.line_start && pos < cache_entry.line_end {\n                 cache_entry.time_stamp = self.time_stamp;\n-                return (cache_entry.file.clone(),\n-                        cache_entry.line_number,\n-                        pos - cache_entry.line_start);\n+                return Some((cache_entry.file.clone(),\n+                             cache_entry.line_number,\n+                             pos - cache_entry.line_start));\n             }\n         }\n \n@@ -78,8 +78,26 @@ impl<'tcx> CachingCodemapView<'tcx> {\n \n         // If the entry doesn't point to the correct file, fix it up\n         if pos < cache_entry.file.start_pos || pos >= cache_entry.file.end_pos {\n-            let file_index = self.codemap.lookup_filemap_idx(pos);\n-            cache_entry.file = self.codemap.files.borrow()[file_index].clone();\n+            let file_valid;\n+            let files = self.codemap.files.borrow();\n+\n+            if files.len() > 0 {\n+                let file_index = self.codemap.lookup_filemap_idx(pos);\n+                let file = files[file_index].clone();\n+\n+                if pos >= file.start_pos && pos < file.end_pos {\n+                    cache_entry.file = file;\n+                    file_valid = true;\n+                } else {\n+                    file_valid = false;\n+                }\n+            } else {\n+                file_valid = false;\n+            }\n+\n+            if !file_valid {\n+                return None;\n+            }\n         }\n \n         let line_index = cache_entry.file.lookup_line(pos).unwrap();\n@@ -90,8 +108,8 @@ impl<'tcx> CachingCodemapView<'tcx> {\n         cache_entry.line_end = line_bounds.1;\n         cache_entry.time_stamp = self.time_stamp;\n \n-        return (cache_entry.file.clone(),\n-                cache_entry.line_number,\n-                pos - cache_entry.line_start);\n+        return Some((cache_entry.file.clone(),\n+                     cache_entry.line_number,\n+                     pos - cache_entry.line_start));\n     }\n }"}, {"sha": "b1cad10f60aa82ff1f3921dcf98e10156489827e", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3057b7b9749f16ad982b54b4bdeee7e2c8a845bb/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=3057b7b9749f16ad982b54b4bdeee7e2c8a845bb", "patch": "@@ -86,18 +86,19 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             span.hi\n         };\n \n-        let (file1, line1, col1) = self.codemap.byte_pos_to_line_and_col(span.lo);\n-        let (file2, line2, col2) = self.codemap.byte_pos_to_line_and_col(span_hi);\n+        let loc1 = self.codemap.byte_pos_to_line_and_col(span.lo);\n+        let loc2 = self.codemap.byte_pos_to_line_and_col(span_hi);\n \n         let expansion_kind = match span.expn_id {\n             NO_EXPANSION => SawSpanExpnKind::NoExpansion,\n             COMMAND_LINE_EXPN => SawSpanExpnKind::CommandLine,\n             _ => SawSpanExpnKind::SomeExpansion,\n         };\n \n-        SawSpan(&file1.name[..], line1, col1,\n-                &file2.name[..], line2, col2,\n-                expansion_kind).hash(self.st);\n+        SawSpan(loc1.as_ref().map(|&(ref fm, line, col)| (&fm.name[..], line, col)),\n+                loc2.as_ref().map(|&(ref fm, line, col)| (&fm.name[..], line, col)),\n+                expansion_kind)\n+            .hash(self.st);\n \n         if expansion_kind == SawSpanExpnKind::SomeExpansion {\n             let call_site = self.codemap.codemap().source_callsite(span);\n@@ -171,7 +172,9 @@ enum SawAbiComponent<'a> {\n     SawAssocTypeBinding,\n     SawAttribute(ast::AttrStyle),\n     SawMacroDef,\n-    SawSpan(&'a str, usize, BytePos, &'a str, usize, BytePos, SawSpanExpnKind),\n+    SawSpan(Option<(&'a str, usize, BytePos)>,\n+            Option<(&'a str, usize, BytePos)>,\n+            SawSpanExpnKind),\n }\n \n /// SawExprComponent carries all of the information that we want"}]}