{"sha": "cf870af8073e3a72fdfb1d36b017f0abd7593559", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmODcwYWY4MDczZTNhNzJmZGZiMWQzNmIwMTdmMGFiZDc1OTM1NTk=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T06:13:14Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T06:26:31Z"}, "message": "Switch back callable_sig for known fn types", "tree": {"sha": "deeda64f2aeafeaf0e8aed47da226f62f221a4eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deeda64f2aeafeaf0e8aed47da226f62f221a4eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf870af8073e3a72fdfb1d36b017f0abd7593559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf870af8073e3a72fdfb1d36b017f0abd7593559", "html_url": "https://github.com/rust-lang/rust/commit/cf870af8073e3a72fdfb1d36b017f0abd7593559", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf870af8073e3a72fdfb1d36b017f0abd7593559/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f94a90c7bbc1b3116a7960ae9f25ebe35d68ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f94a90c7bbc1b3116a7960ae9f25ebe35d68ad0", "html_url": "https://github.com/rust-lang/rust/commit/3f94a90c7bbc1b3116a7960ae9f25ebe35d68ad0"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "32c7c57cd61a3be0561d59436b391eb6fda0ec77", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf870af8073e3a72fdfb1d36b017f0abd7593559/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf870af8073e3a72fdfb1d36b017f0abd7593559/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=cf870af8073e3a72fdfb1d36b017f0abd7593559", "patch": "@@ -38,8 +38,8 @@ impl<'a> InferenceContext<'a> {\n                 // Special case: two function types. Try to coerce both to\n                 // pointers to have a chance at getting a match. See\n                 // https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/check/coercion.rs#L877-L916\n-                let sig1 = self.callable_sig(ty1).expect(\"FnDef without callable sig\");\n-                let sig2 = self.callable_sig(ty2).expect(\"FnDef without callable sig\");\n+                let sig1 = ty1.callable_sig(self.db).expect(\"FnDef without callable sig\");\n+                let sig2 = ty2.callable_sig(self.db).expect(\"FnDef without callable sig\");\n                 let ptr_ty1 = Ty::fn_ptr(sig1);\n                 let ptr_ty2 = Ty::fn_ptr(sig2);\n                 self.coerce_merge_branch(&ptr_ty1, &ptr_ty2)\n@@ -93,7 +93,7 @@ impl<'a> InferenceContext<'a> {\n \n             // `{function_type}` -> `fn()`\n             (ty_app!(TypeCtor::FnDef(_)), ty_app!(TypeCtor::FnPtr { .. })) => {\n-                match self.callable_sig(&from_ty) {\n+                match from_ty.callable_sig(self.db) {\n                     None => return false,\n                     Some(sig) => {\n                         from_ty = Ty::fn_ptr(sig);"}, {"sha": "a23d8abd67c196062315bbd3fe95679b75e00e92", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf870af8073e3a72fdfb1d36b017f0abd7593559/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf870af8073e3a72fdfb1d36b017f0abd7593559/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=cf870af8073e3a72fdfb1d36b017f0abd7593559", "patch": "@@ -768,7 +768,7 @@ impl<'a> InferenceContext<'a> {\n         let method_ty = method_ty.subst(&substs);\n         let method_ty = self.insert_type_vars(method_ty);\n         self.register_obligations_for_call(&method_ty);\n-        let (expected_receiver_ty, param_tys, ret_ty) = match self.callable_sig(&method_ty) {\n+        let (expected_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n             Some(sig) => {\n                 if !sig.params().is_empty() {\n                     (sig.params()[0].clone(), sig.params()[1..].to_vec(), sig.ret().clone())"}]}