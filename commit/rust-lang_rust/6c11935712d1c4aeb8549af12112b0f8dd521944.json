{"sha": "6c11935712d1c4aeb8549af12112b0f8dd521944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMTE5MzU3MTJkMWM0YWViODU0OWFmMTIxMTJiMGY4ZGQ1MjE5NDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-06T18:57:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-06T18:57:11Z"}, "message": "simplify", "tree": {"sha": "c83d342362942930d412dd8bb0e9083665aa7386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83d342362942930d412dd8bb0e9083665aa7386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c11935712d1c4aeb8549af12112b0f8dd521944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c11935712d1c4aeb8549af12112b0f8dd521944", "html_url": "https://github.com/rust-lang/rust/commit/6c11935712d1c4aeb8549af12112b0f8dd521944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c11935712d1c4aeb8549af12112b0f8dd521944/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219287a14c4e1d9f72465c81b34bd8cc2e2b2f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/219287a14c4e1d9f72465c81b34bd8cc2e2b2f44", "html_url": "https://github.com/rust-lang/rust/commit/219287a14c4e1d9f72465c81b34bd8cc2e2b2f44"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "67fb7ba4ef298293db54ca6fd9cc7af47cb3141e", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6c11935712d1c4aeb8549af12112b0f8dd521944/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c11935712d1c4aeb8549af12112b0f8dd521944/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=6c11935712d1c4aeb8549af12112b0f8dd521944", "patch": "@@ -6,46 +6,48 @@ use rustc_hash::FxHashMap;\n use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_trivial_path {\n-        let names = ctx.analyzer.all_names(ctx.db);\n-        names.into_iter().for_each(|(name, res)| acc.add_resolution(ctx, name.to_string(), &res));\n+    if !ctx.is_trivial_path {\n+        return;\n+    }\n \n-        // auto-import\n-        // We fetch ident from the original file, because we need to pre-filter auto-imports\n-        if ast::NameRef::cast(ctx.token.parent()).is_some() {\n-            let import_resolver = ImportResolver::new();\n-            let import_names = import_resolver.all_names(ctx.token.text());\n-            import_names.into_iter().for_each(|(name, path)| {\n-                let edit = {\n-                    let mut builder = TextEditBuilder::default();\n-                    builder.replace(ctx.source_range(), name.to_string());\n-                    auto_import::auto_import_text_edit(\n-                        &ctx.token.parent(),\n-                        &ctx.token.parent(),\n-                        &path,\n-                        &mut builder,\n-                    );\n-                    builder.finish()\n-                };\n+    let names = ctx.analyzer.all_names(ctx.db);\n+    names.into_iter().for_each(|(name, res)| acc.add_resolution(ctx, name.to_string(), &res));\n \n-                // Hack: copied this check form conv.rs beacause auto import can produce edits\n-                // that invalidate assert in conv_with.\n-                if edit\n-                    .as_atoms()\n-                    .iter()\n-                    .filter(|atom| !ctx.source_range().is_subrange(&atom.delete))\n-                    .all(|atom| ctx.source_range().intersection(&atom.delete).is_none())\n-                {\n-                    CompletionItem::new(\n-                        CompletionKind::Reference,\n-                        ctx.source_range(),\n-                        build_import_label(&name, &path),\n-                    )\n-                    .text_edit(edit)\n-                    .add_to(acc);\n-                }\n-            });\n-        }\n+    // auto-import\n+    // We fetch ident from the original file, because we need to pre-filter auto-imports\n+    if ast::NameRef::cast(ctx.token.parent()).is_some() {\n+        let import_resolver = ImportResolver::new();\n+        let import_names = import_resolver.all_names(ctx.token.text());\n+        import_names.into_iter().for_each(|(name, path)| {\n+            let edit = {\n+                let mut builder = TextEditBuilder::default();\n+                builder.replace(ctx.source_range(), name.to_string());\n+                auto_import::auto_import_text_edit(\n+                    &ctx.token.parent(),\n+                    &ctx.token.parent(),\n+                    &path,\n+                    &mut builder,\n+                );\n+                builder.finish()\n+            };\n+\n+            // Hack: copied this check form conv.rs beacause auto import can produce edits\n+            // that invalidate assert in conv_with.\n+            if edit\n+                .as_atoms()\n+                .iter()\n+                .filter(|atom| !ctx.source_range().is_subrange(&atom.delete))\n+                .all(|atom| ctx.source_range().intersection(&atom.delete).is_none())\n+            {\n+                CompletionItem::new(\n+                    CompletionKind::Reference,\n+                    ctx.source_range(),\n+                    build_import_label(&name, &path),\n+                )\n+                .text_edit(edit)\n+                .add_to(acc);\n+            }\n+        });\n     }\n }\n "}]}