{"sha": "35a944a48806356e816a68ee3758f7b2f4244fca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTk0NGE0ODgwNjM1NmU4MTZhNjhlZTM3NThmN2IyZjQyNDRmY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-12T02:21:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-12T02:21:16Z"}, "message": "auto merge of #9815 : thestinger/rust/type, r=huonw\n\nExample:\r\n\r\n    void ({ i64, %tydesc*, i8*, i8*, i8 }*, i64*, %\"struct.std::fmt::Formatter[#1]\"*)*\r\n\r\nBefore, we would print 20 levels deep due to recursion in the type\r\ndefinition.", "tree": {"sha": "26ae480457bf2d9a7100561e705f39942d98116d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ae480457bf2d9a7100561e705f39942d98116d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a944a48806356e816a68ee3758f7b2f4244fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a944a48806356e816a68ee3758f7b2f4244fca", "html_url": "https://github.com/rust-lang/rust/commit/35a944a48806356e816a68ee3758f7b2f4244fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a944a48806356e816a68ee3758f7b2f4244fca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399a42575a3a5392277e4034812ce32c4f491929", "url": "https://api.github.com/repos/rust-lang/rust/commits/399a42575a3a5392277e4034812ce32c4f491929", "html_url": "https://github.com/rust-lang/rust/commit/399a42575a3a5392277e4034812ce32c4f491929"}, {"sha": "7bad4167654ef846155bae7165fd0ffcc24fcbbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bad4167654ef846155bae7165fd0ffcc24fcbbe", "html_url": "https://github.com/rust-lang/rust/commit/7bad4167654ef846155bae7165fd0ffcc24fcbbe"}], "stats": {"total": 75, "additions": 16, "deletions": 59}, "files": [{"sha": "787f8e60d653f7912a7a1d9d69f5cab862c9f200", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 8, "deletions": 59, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/35a944a48806356e816a68ee3758f7b2f4244fca/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a944a48806356e816a68ee3758f7b2f4244fca/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=35a944a48806356e816a68ee3758f7b2f4244fca", "patch": "@@ -15,7 +15,8 @@\n \n use std::c_str::ToCStr;\n use std::hashmap::HashMap;\n-use std::libc::{c_uint, c_ushort};\n+use std::libc::{c_uint, c_ushort, c_void, free};\n+use std::str::raw::from_c_str;\n use std::option;\n \n use middle::trans::type_::Type;\n@@ -1666,6 +1667,7 @@ pub mod llvm {\n                                             -> ValueRef;\n \n         pub fn LLVMDICompositeTypeSetTypeArray(CompositeType: ValueRef, TypeArray: ValueRef);\n+        pub fn LLVMTypeToString(Type: TypeRef) -> *c_char;\n \n         pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;\n \n@@ -1789,68 +1791,15 @@ impl TypeNames {\n         self.named_types.find_equiv(&s).map(|x| Type::from_ref(*x))\n     }\n \n-    // We have a depth count, because we seem to make infinite types.\n-    pub fn type_to_str_depth(&self, ty: Type, depth: int) -> ~str {\n-        match self.find_name(&ty) {\n-            option::Some(name) => return name.to_owned(),\n-            None => ()\n-        }\n-\n-        if depth == 0 {\n-            return ~\"###\";\n-        }\n-\n+    pub fn type_to_str(&self, ty: Type) -> ~str {\n         unsafe {\n-            let kind = ty.kind();\n-\n-            match kind {\n-                Void => ~\"Void\",\n-                Half => ~\"Half\",\n-                Float => ~\"Float\",\n-                Double => ~\"Double\",\n-                X86_FP80 => ~\"X86_FP80\",\n-                FP128 => ~\"FP128\",\n-                PPC_FP128 => ~\"PPC_FP128\",\n-                Label => ~\"Label\",\n-                Vector => ~\"Vector\",\n-                Metadata => ~\"Metadata\",\n-                X86_MMX => ~\"X86_MMAX\",\n-                Integer => {\n-                    format!(\"i{}\", llvm::LLVMGetIntTypeWidth(ty.to_ref()) as int)\n-                }\n-                Function => {\n-                    let out_ty = ty.return_type();\n-                    let args = ty.func_params();\n-                    let args =\n-                        args.map(|&ty| self.type_to_str_depth(ty, depth-1)).connect(\", \");\n-                    let out_ty = self.type_to_str_depth(out_ty, depth-1);\n-                    format!(\"fn({}) -> {}\", args, out_ty)\n-                }\n-                Struct => {\n-                    let tys = ty.field_types();\n-                    let tys = tys.map(|&ty| self.type_to_str_depth(ty, depth-1)).connect(\", \");\n-                    format!(\"\\\\{{}\\\\}\", tys)\n-                }\n-                Array => {\n-                    let el_ty = ty.element_type();\n-                    let el_ty = self.type_to_str_depth(el_ty, depth-1);\n-                    let len = ty.array_length();\n-                    format!(\"[{} x {}]\", el_ty, len)\n-                }\n-                Pointer => {\n-                    let el_ty = ty.element_type();\n-                    let el_ty = self.type_to_str_depth(el_ty, depth-1);\n-                    format!(\"*{}\", el_ty)\n-                }\n-                _ => fail2!(\"Unknown Type Kind ({})\", kind as uint)\n-            }\n+            let s = llvm::LLVMTypeToString(ty.to_ref());\n+            let ret = from_c_str(s);\n+            free(s as *c_void);\n+            ret\n         }\n     }\n \n-    pub fn type_to_str(&self, ty: Type) -> ~str {\n-        self.type_to_str_depth(ty, 30)\n-    }\n-\n     pub fn types_to_str(&self, tys: &[Type]) -> ~str {\n         let strs = tys.map(|t| self.type_to_str(*t));\n         format!(\"[{}]\", strs.connect(\",\"))"}, {"sha": "f8d56f4e892ac46956e3c7080c929b15c2e8e377", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35a944a48806356e816a68ee3758f7b2f4244fca/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/35a944a48806356e816a68ee3758f7b2f4244fca/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=35a944a48806356e816a68ee3758f7b2f4244fca", "patch": "@@ -803,3 +803,10 @@ extern \"C\" void LLVMDICompositeTypeSetTypeArray(\n {\n     unwrapDI<DICompositeType>(CompositeType).setTypeArray(unwrapDI<DIArray>(TypeArray));\n }\n+\n+extern \"C\" char *LLVMTypeToString(LLVMTypeRef Type) {\n+    std::string s;\n+    llvm::raw_string_ostream os(s);\n+    unwrap<llvm::Type>(Type)->print(os);\n+    return strdup(os.str().data());\n+}"}, {"sha": "c1f1444fb4ffc13ba6fc777aa0f4e9cbea31dcfd", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35a944a48806356e816a68ee3758f7b2f4244fca/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/35a944a48806356e816a68ee3758f7b2f4244fca/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=35a944a48806356e816a68ee3758f7b2f4244fca", "patch": "@@ -628,3 +628,4 @@ LLVMRustSetNormalizedTarget\n LLVMRustAddAlwaysInlinePass\n LLVMAddReturnAttribute\n LLVMRemoveReturnAttribute\n+LLVMTypeToString"}]}