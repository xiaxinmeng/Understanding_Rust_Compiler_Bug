{"sha": "4549423f28dc05ae47447a1111326b1b7055c1a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDk0MjNmMjhkYzA1YWU0NzQ0N2ExMTExMzI2YjFiNzA1NWMxYTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-18T08:54:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-18T09:10:11Z"}, "message": "Use 128 instead of 64 bits for DefPath hashes", "tree": {"sha": "3b01989b78b8d8ed10003e6c219909f87e452a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b01989b78b8d8ed10003e6c219909f87e452a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4549423f28dc05ae47447a1111326b1b7055c1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4549423f28dc05ae47447a1111326b1b7055c1a9", "html_url": "https://github.com/rust-lang/rust/commit/4549423f28dc05ae47447a1111326b1b7055c1a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4549423f28dc05ae47447a1111326b1b7055c1a9/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "474cc91440ecb89a4d7ea81b1786fddbf2b70641", "url": "https://api.github.com/repos/rust-lang/rust/commits/474cc91440ecb89a4d7ea81b1786fddbf2b70641", "html_url": "https://github.com/rust-lang/rust/commit/474cc91440ecb89a4d7ea81b1786fddbf2b70641"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "9537b40b28a0bec7234ccf31c8aec309c0dd135b", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -16,6 +16,7 @@\n \n use hir;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace};\n+use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -34,7 +35,7 @@ use util::nodemap::NodeMap;\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n     key_to_index: FxHashMap<DefKey, DefIndex>,\n-    def_path_hashes: [Vec<u64>; 2],\n+    def_path_hashes: [Vec<Fingerprint>; 2],\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -55,7 +56,7 @@ impl DefPathTable {\n \n     fn allocate(&mut self,\n                 key: DefKey,\n-                def_path_hash: u64,\n+                def_path_hash: Fingerprint,\n                 address_space: DefIndexAddressSpace)\n                 -> DefIndex {\n         let index = {\n@@ -79,7 +80,7 @@ impl DefPathTable {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.def_path_hashes[index.address_space().index()]\n                             [index.as_array_index()]\n     }\n@@ -146,8 +147,8 @@ impl Decodable for DefPathTable {\n         let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n         let index_to_key_hi: Vec<DefKey> = Decodable::decode(d)?;\n \n-        let def_path_hashes_lo: Vec<u64> = Decodable::decode(d)?;\n-        let def_path_hashes_hi: Vec<u64> = Decodable::decode(d)?;\n+        let def_path_hashes_lo: Vec<Fingerprint> = Decodable::decode(d)?;\n+        let def_path_hashes_hi: Vec<Fingerprint> = Decodable::decode(d)?;\n \n         let index_to_key = [index_to_key_lo, index_to_key_hi];\n         let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n@@ -210,7 +211,7 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    fn compute_stable_hash(&self, parent_hash: u64) -> u64 {\n+    fn compute_stable_hash(&self, parent_hash: Fingerprint) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n \n         // We hash a 0u8 here to disambiguate between regular DefPath hashes,\n@@ -221,7 +222,7 @@ impl DefKey {\n         hasher.finish()\n     }\n \n-    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> u64 {\n+    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n         // Disambiguate this from a regular DefPath hash,\n         // see compute_stable_hash() above.\n@@ -396,7 +397,7 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.table.def_path_hash(index)\n     }\n "}, {"sha": "f25ec8ecd4d71beee729bf73ba0107d38cc38fa8", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx: 'a> StableHashingContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&mut self, def_id: DefId) -> u64 {\n+    pub fn def_path_hash(&mut self, def_id: DefId) -> ich::Fingerprint {\n         self.tcx.def_path_hash(def_id)\n     }\n "}, {"sha": "8ad1db7859566d41d26147eeb7777084321e5dd1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -282,7 +282,7 @@ pub trait CrateStore {\n                     -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n-    fn def_path_hash(&self, def: DefId) -> u64;\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -414,7 +414,7 @@ impl CrateStore for DummyCrateStore {\n     fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")\n     }\n-    fn def_path_hash(&self, def: DefId) -> u64 {\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n         bug!(\"wa\")\n     }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }"}, {"sha": "359722ce96ec9786f0131c197805fac38806bfe7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -19,7 +19,7 @@ use dep_graph::DepNode;\n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use ich::StableHashingContext;\n+use ich::{self, StableHashingContext};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n@@ -2248,7 +2248,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(self, def_id: DefId) -> u64 {\n+    pub fn def_path_hash(self, def_id: DefId) -> ich::Fingerprint {\n         if def_id.is_local() {\n             self.hir.definitions().def_path_hash(def_id.index)\n         } else {"}, {"sha": "348d164af4190af2d12ba7592cdfb06bf8b8b0c7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -29,6 +29,7 @@ use util::nodemap::FxHashMap;\n use serialize;\n \n use hir;\n+use ich;\n \n use self::InferTy::*;\n use self::TypeVariants::*;\n@@ -849,7 +850,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         self.item_name // safe to skip the binder to access a name\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n         // We want something here that is stable across crate boundaries.\n         // The DefId isn't but the `deterministic_hash` of the corresponding\n         // DefPath is.\n@@ -884,7 +885,7 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n         self.skip_binder().item_name()\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n         self.skip_binder().sort_key(tcx)\n     }\n "}, {"sha": "86774136bd6cbc0c07741dd3c83b22b4a8ee8395", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n+use ich::Fingerprint;\n use traits::specialization_graph;\n use ty::fast_reject;\n use ty::fold::TypeFoldable;\n@@ -32,7 +33,7 @@ pub struct TraitDef {\n \n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n-    pub def_path_hash: u64,\n+    pub def_path_hash: Fingerprint,\n }\n \n // We don't store the list of impls in a flat list because each cached list of\n@@ -94,7 +95,7 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n                unsafety: hir::Unsafety,\n                paren_sugar: bool,\n                has_default_impl: bool,\n-               def_path_hash: u64)\n+               def_path_hash: Fingerprint)\n                -> TraitDef {\n         TraitDef {\n             def_id,"}, {"sha": "c9ed9ad3c7d2d4d2027ab5b31fee1bac4259980d", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n     {\n         let tcx = self.hcx.tcx();\n \n-        let mut impls: Vec<(u64, Fingerprint)> = krate\n+        let mut impls: Vec<(Fingerprint, Fingerprint)> = krate\n             .trait_impls\n             .iter()\n             .map(|(&trait_id, impls)| {"}, {"sha": "7478f902e061a321614af006535e68a6f129dcae", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -17,6 +17,7 @@ use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             ExternCrate, NativeLibrary, MetadataLoader, LinkMeta,\n                             LinkagePreference, LoadedMacro, EncodedMetadata};\n use rustc::hir::def;\n+use rustc::ich;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n@@ -337,7 +338,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n-    fn def_path_hash(&self, def: DefId) -> u64 {\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n         self.get_crate_data(def.krate).def_path_hash(def.index)\n     }\n "}, {"sha": "d8826d87d4d0f4fd0752b05e5b4ff0dd7197d907", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4549423f28dc05ae47447a1111326b1b7055c1a9/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4549423f28dc05ae47447a1111326b1b7055c1a9", "patch": "@@ -16,6 +16,7 @@ use schema::*;\n use rustc::dep_graph::{DepGraph, DepNode, GlobalMetaDataKind};\n use rustc::hir::map::{DefKey, DefPath, DefPathData};\n use rustc::hir;\n+use rustc::ich;\n \n use rustc::middle::cstore::LinkagePreference;\n use rustc::hir::def::{self, Def, CtorKind};\n@@ -1106,7 +1107,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> ich::Fingerprint {\n         self.def_path_table.def_path_hash(index)\n     }\n "}]}