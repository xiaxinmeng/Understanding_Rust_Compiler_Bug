{"sha": "e8027139418354a6b1fbf6536fb46c1923516eae", "node_id": "C_kwDOAAsO6NoAKGU4MDI3MTM5NDE4MzU0YTZiMWZiZjY1MzZmYjQ2YzE5MjM1MTZlYWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-19T07:33:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-19T07:33:40Z"}, "message": "Rollup merge of #106933 - schuelermine:fix/doc/102451, r=Amanieu\n\nUpdate documentation of select_nth_unstable and select_nth_unstable_by to state O(n^2) complexity\n\nSee #102451", "tree": {"sha": "ee52af4913c9730c5c21db3a418ab3cfc7dd12b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee52af4913c9730c5c21db3a418ab3cfc7dd12b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8027139418354a6b1fbf6536fb46c1923516eae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8dDUCRBK7hj4Ov3rIwAA2eQIAKYdkUMHWY2pkzuJgNg0RoVd\njHTgWbZGwxZnBc/Hi1PDHhXrIGjZ3e9qm+3Bc/mcGJPMOmt74DDormhietLumKpP\nBDSMwSuBakHrO8MdHvzrD/btMDXG1nRNijZkfXCS0UTso8yZ9f7l2tHpyixshbgx\nB5GsVU3vu80F1i7uuMrGf9H2VdJxwZQTn6C4ZZ6JSagaY6NvyGv7nprh8U4hS2kv\nqdWq8dIYeulR+muMNSL78o6RCHFTnwCMqL8haO1IK/T0cvI2RldVMLxxvIhoUJUW\nFyRtWBvf5XpUMrDxLGOHoVD5GPmX/a6czypJ50H/cKGXgXWQI1nDCq/x6o5IrFQ=\n=EqSi\n-----END PGP SIGNATURE-----\n", "payload": "tree ee52af4913c9730c5c21db3a418ab3cfc7dd12b4\nparent 47ec320ce6fb1d22c7c52913330dc167f851ff6f\nparent f1e649b378576e268a3e31e981afdba4ede8cac1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676792020 +0530\ncommitter GitHub <noreply@github.com> 1676792020 +0530\n\nRollup merge of #106933 - schuelermine:fix/doc/102451, r=Amanieu\n\nUpdate documentation of select_nth_unstable and select_nth_unstable_by to state O(n^2) complexity\n\nSee #102451\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8027139418354a6b1fbf6536fb46c1923516eae", "html_url": "https://github.com/rust-lang/rust/commit/e8027139418354a6b1fbf6536fb46c1923516eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8027139418354a6b1fbf6536fb46c1923516eae/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ec320ce6fb1d22c7c52913330dc167f851ff6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ec320ce6fb1d22c7c52913330dc167f851ff6f", "html_url": "https://github.com/rust-lang/rust/commit/47ec320ce6fb1d22c7c52913330dc167f851ff6f"}, {"sha": "f1e649b378576e268a3e31e981afdba4ede8cac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e649b378576e268a3e31e981afdba4ede8cac1", "html_url": "https://github.com/rust-lang/rust/commit/f1e649b378576e268a3e31e981afdba4ede8cac1"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "e83747845013d7df68938e38456a00bf61a9ac20", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8027139418354a6b1fbf6536fb46c1923516eae/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8027139418354a6b1fbf6536fb46c1923516eae/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=e8027139418354a6b1fbf6536fb46c1923516eae", "patch": "@@ -2730,8 +2730,10 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n-    /// (i.e. does not allocate), and *O*(*n*) worst-case. This function is also/ known as \"kth\n-    /// element\" in other libraries. It returns a triplet of the following from the reordered slice:\n+    /// (i.e. does not allocate), and *O*(*n*) on average. The worst-case performance is *O*(*n* log *n*).\n+    /// This function is also known as \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from the reordered slice:\n     /// the subslice prior to `index`, the element at `index`, and the subslice after `index`;\n     /// accordingly, the values in those two subslices will respectively all be less-than-or-equal-to\n     /// and greater-than-or-equal-to the value of the element at `index`.\n@@ -2777,8 +2779,11 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n+    /// The worst-case performance is *O*(*n* log *n*). This function is also known as\n+    /// \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from\n     /// the slice reordered according to the provided comparator function: the subslice prior to\n     /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n     /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n@@ -2829,8 +2834,11 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n+    /// The worst-case performance is *O*(*n* log *n*).\n+    /// This function is also known as \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from\n     /// the slice reordered according to the provided key extraction function: the subslice prior to\n     /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n     /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to"}]}