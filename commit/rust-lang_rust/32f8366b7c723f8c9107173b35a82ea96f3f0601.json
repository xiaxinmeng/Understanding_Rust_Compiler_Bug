{"sha": "32f8366b7c723f8c9107173b35a82ea96f3f0601", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZjgzNjZiN2M3MjNmOGM5MTA3MTczYjM1YTgyZWE5NmYzZjA2MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-16T09:47:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-16T09:47:12Z"}, "message": "Auto merge of #33640 - lucab:to-upstream/tcp-stress, r=alexcrichton\n\ntest: explicitely check the number of spawned threads in tcp-stress\n\nSystem limits may restrict the number of threads effectively spawned by this test (eg. systemd recently introduced a 512 tasks per unit maximum default).\nNow this test explicitly asserts on the expected number of threads, making failures due to system limits easier to spot.\nMore details at https://bugs.debian.org/822325", "tree": {"sha": "52fc425774fc4f32f9ca02ac300eedbee4673056", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52fc425774fc4f32f9ca02ac300eedbee4673056"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f8366b7c723f8c9107173b35a82ea96f3f0601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f8366b7c723f8c9107173b35a82ea96f3f0601", "html_url": "https://github.com/rust-lang/rust/commit/32f8366b7c723f8c9107173b35a82ea96f3f0601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f8366b7c723f8c9107173b35a82ea96f3f0601/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e87cd7e380c89e3f80ceab417e3525e546a1e362", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87cd7e380c89e3f80ceab417e3525e546a1e362", "html_url": "https://github.com/rust-lang/rust/commit/e87cd7e380c89e3f80ceab417e3525e546a1e362"}, {"sha": "22972b8b6f38dbda4b5269afb3fd5223d176aa59", "url": "https://api.github.com/repos/rust-lang/rust/commits/22972b8b6f38dbda4b5269afb3fd5223d176aa59", "html_url": "https://github.com/rust-lang/rust/commit/22972b8b6f38dbda4b5269afb3fd5223d176aa59"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "dfc86497c9652a14952d86b09e23bb6e77b1f512", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32f8366b7c723f8c9107173b35a82ea96f3f0601/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f8366b7c723f8c9107173b35a82ea96f3f0601/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=32f8366b7c723f8c9107173b35a82ea96f3f0601", "patch": "@@ -18,48 +18,54 @@ use std::io::prelude::*;\n use std::net::{TcpListener, TcpStream};\n use std::process;\n use std::sync::mpsc::channel;\n+use std::time::Duration;\n use std::thread::{self, Builder};\n \n fn main() {\n     // This test has a chance to time out, try to not let it time out\n     thread::spawn(move|| -> () {\n-        thread::sleep_ms(30 * 1000);\n+        thread::sleep(Duration::from_secs(30));\n         process::exit(1);\n     });\n \n-    let mut listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n+    let listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n     let addr = listener.local_addr().unwrap();\n     thread::spawn(move || -> () {\n         loop {\n             let mut stream = match listener.accept() {\n                 Ok(stream) => stream.0,\n-                Err(error) => continue,\n+                Err(_) => continue,\n             };\n-            stream.read(&mut [0]);\n-            stream.write(&[2]);\n+            let _ = stream.read(&mut [0]);\n+            let _ = stream.write(&[2]);\n         }\n     });\n \n     let (tx, rx) = channel();\n+    let mut spawned_cnt = 0;\n     for _ in 0..1000 {\n         let tx = tx.clone();\n-        Builder::new().stack_size(64 * 1024).spawn(move|| {\n+        let res = Builder::new().stack_size(64 * 1024).spawn(move|| {\n             match TcpStream::connect(addr) {\n                 Ok(mut stream) => {\n-                    stream.write(&[1]);\n-                    stream.read(&mut [0]);\n+                    let _ = stream.write(&[1]);\n+                    let _ = stream.read(&mut [0]);\n                 },\n                 Err(..) => {}\n             }\n             tx.send(()).unwrap();\n         });\n+        if let Ok(_) = res {\n+            spawned_cnt += 1;\n+        };\n     }\n \n     // Wait for all clients to exit, but don't wait for the server to exit. The\n     // server just runs infinitely.\n     drop(tx);\n-    for _ in 0..1000 {\n+    for _ in 0..spawned_cnt {\n         rx.recv().unwrap();\n     }\n+    assert_eq!(spawned_cnt, 1000);\n     process::exit(0);\n }"}]}