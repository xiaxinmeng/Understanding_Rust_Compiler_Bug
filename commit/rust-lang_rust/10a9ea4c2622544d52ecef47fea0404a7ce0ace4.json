{"sha": "10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYTllYTRjMjYyMjU0NGQ1MmVjZWY0N2ZlYTA0MDRhN2NlMGFjZTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-15T17:57:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-17T02:14:26Z"}, "message": "Do not ICE on malformed suggestion spans", "tree": {"sha": "efa08d91a8cd3f999d0f39741222eb497b20ca04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efa08d91a8cd3f999d0f39741222eb497b20ca04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "html_url": "https://github.com/rust-lang/rust/commit/10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecbc222855c890c3aabe4848e8d8b312debcf0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecbc222855c890c3aabe4848e8d8b312debcf0ff", "html_url": "https://github.com/rust-lang/rust/commit/ecbc222855c890c3aabe4848e8d8b312debcf0ff"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "e37496f7299522372cfbf7a08c308fc4b4457896", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "patch": "@@ -1475,6 +1475,11 @@ impl EmitterWriter {\n             Some(ref sm) => sm,\n             None => return Ok(()),\n         };\n+        if !suggestion.has_valid_spans(&**sm) {\n+            // Suggestions coming from macros can have malformed spans. This is a heavy handed\n+            // approach to avoid ICEs by ignoring the suggestion outright.\n+            return Ok(());\n+        }\n \n         let mut buffer = StyledBuffer::new();\n \n@@ -1505,7 +1510,9 @@ impl EmitterWriter {\n             let show_underline = !(parts.len() == 1 && parts[0].snippet.trim() == complete.trim())\n                 && complete.lines().count() == 1;\n \n-            let lines = sm.span_to_lines(parts[0].span).unwrap();\n+            let lines = sm\n+                .span_to_lines(parts[0].span)\n+                .expect(\"span_to_lines failed when emitting suggestion\");\n \n             assert!(!lines.lines.is_empty());\n "}, {"sha": "889c84d6da1321ff582bd297f42219ebb3a37415", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "patch": "@@ -10,6 +10,7 @@\n \n pub use emitter::ColorConfig;\n \n+use log::debug;\n use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};\n@@ -143,6 +144,18 @@ pub struct SubstitutionPart {\n }\n \n impl CodeSuggestion {\n+    /// Suggestions coming from macros can have malformed spans. This is a heavy handed approach\n+    /// to avoid ICEs by ignoring the suggestion outright.\n+    pub fn has_valid_spans(&self, cm: &SourceMap) -> bool {\n+        !self.substitutions.iter().any(|subst| {\n+            let invalid = subst.parts.iter().any(|item| cm.is_valid_span(item.span).is_err());\n+            if invalid {\n+                debug!(\"malformed span in suggestion: {:?}\", subst);\n+            }\n+            invalid\n+        })\n+    }\n+\n     /// Returns the assembled code suggestions, whether they should be shown with an underline\n     /// and whether the substitution only differs in capitalization.\n     pub fn splice_lines(&self, cm: &SourceMap) -> Vec<(String, Vec<SubstitutionPart>, bool)> {"}, {"sha": "9c7c0f0c8b0eca79346dd05357cf2fede430baa2", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "patch": "@@ -473,20 +473,23 @@ impl SourceMap {\n         lo.line != hi.line\n     }\n \n-    pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n-        debug!(\"span_to_lines(sp={:?})\", sp);\n-\n+    pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {\n         let lo = self.lookup_char_pos(sp.lo());\n         debug!(\"span_to_lines: lo={:?}\", lo);\n         let hi = self.lookup_char_pos(sp.hi());\n         debug!(\"span_to_lines: hi={:?}\", hi);\n-\n         if lo.file.start_pos != hi.file.start_pos {\n             return Err(SpanLinesError::DistinctSources(DistinctSources {\n                 begin: (lo.file.name.clone(), lo.file.start_pos),\n                 end: (hi.file.name.clone(), hi.file.start_pos),\n             }));\n         }\n+        Ok((lo, hi))\n+    }\n+\n+    pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n+        debug!(\"span_to_lines(sp={:?})\", sp);\n+        let (lo, hi) = self.is_valid_span(sp)?;\n         assert!(hi.line >= lo.line);\n \n         let mut lines = Vec::with_capacity(hi.line - lo.line + 1);"}, {"sha": "cc124058cfcb87ae6b2e559c9a2fed8449659caa", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a9ea4c2622544d52ecef47fea0404a7ce0ace4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=10a9ea4c2622544d52ecef47fea0404a7ce0ace4", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:346:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:359:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}]}