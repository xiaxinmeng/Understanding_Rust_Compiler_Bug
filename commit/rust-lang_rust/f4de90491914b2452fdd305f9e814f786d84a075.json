{"sha": "f4de90491914b2452fdd305f9e814f786d84a075", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZGU5MDQ5MTkxNGIyNDUyZmRkMzA1ZjllODE0Zjc4NmQ4NGEwNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-19T08:13:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-19T08:13:16Z"}, "message": "Auto merge of #4100 - phansch:add_stderr_length_check, r=flip1995\n\nAdd a stderr file length check to clippy_dev\n\nThis adds a check to `clippy_dev` that enforces a maximum line count for\n`stderr` files. CI will fail if the line count is exceeded. It's\ncurrently set to `320` lines.\n\nIdeally this would be implemented in `compiletest-rs` but there are\nplans to move Rust's `compiletest` into the `compiletest-rs` repository\nand I don't want to do the work in `compiletest` twice. However, I also\ndon't want to wait until the move is done, so I added the check to\n`clippy_dev` until it makes sense to add it to compiletest-rs.\n\ncc #2038", "tree": {"sha": "d4b43845c16bbd290bf713fc83c27e56bc2ae73b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b43845c16bbd290bf713fc83c27e56bc2ae73b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4de90491914b2452fdd305f9e814f786d84a075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4de90491914b2452fdd305f9e814f786d84a075", "html_url": "https://github.com/rust-lang/rust/commit/f4de90491914b2452fdd305f9e814f786d84a075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4de90491914b2452fdd305f9e814f786d84a075/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a59a78b98a04b124b0506a26fd9e9db5432f585", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a59a78b98a04b124b0506a26fd9e9db5432f585", "html_url": "https://github.com/rust-lang/rust/commit/0a59a78b98a04b124b0506a26fd9e9db5432f585"}, {"sha": "619a2906f850cb109ce8d59ea8863395c2ebe712", "url": "https://api.github.com/repos/rust-lang/rust/commits/619a2906f850cb109ce8d59ea8863395c2ebe712", "html_url": "https://github.com/rust-lang/rust/commit/619a2906f850cb109ce8d59ea8863395c2ebe712"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "d67541f7df05c44aadd20c2cdab59afbc017e80f", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4de90491914b2452fdd305f9e814f786d84a075/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f4de90491914b2452fdd305f9e814f786d84a075/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=f4de90491914b2452fdd305f9e814f786d84a075", "patch": "@@ -23,6 +23,7 @@ export CARGO_TARGET_DIR=`pwd`/target/\n \n # Perform various checks for lint registration\n ./util/dev update_lints --check\n+./util/dev --limit-stderr-length\n cargo +nightly fmt --all -- --check\n \n # Check running clippy-driver without cargo"}, {"sha": "45d4d13ed86a829d14a6abd8b89fa02e8290260c", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4de90491914b2452fdd305f9e814f786d84a075/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4de90491914b2452fdd305f9e814f786d84a075/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=f4de90491914b2452fdd305f9e814f786d84a075", "patch": "@@ -2,8 +2,9 @@ extern crate clap;\n extern crate clippy_dev;\n extern crate regex;\n \n-use clap::{App, AppSettings, Arg, SubCommand};\n+use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n+mod stderr_length_check;\n \n #[derive(PartialEq)]\n enum UpdateMode {\n@@ -13,7 +14,6 @@ enum UpdateMode {\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n-        .setting(AppSettings::SubcommandRequiredElseHelp)\n         .subcommand(\n             SubCommand::with_name(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n@@ -36,8 +36,16 @@ fn main() {\n                         .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n                 ),\n         )\n+        .arg(\n+            Arg::with_name(\"limit-stderr-length\")\n+                .long(\"limit-stderr-length\")\n+                .help(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n+        )\n         .get_matches();\n \n+    if matches.is_present(\"limit-stderr-length\") {\n+        stderr_length_check::check();\n+    }\n     if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n         if matches.is_present(\"print-only\") {\n             print_lints();"}, {"sha": "6c5107aebfd3af140dcf306174745a4530f4d070", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f4de90491914b2452fdd305f9e814f786d84a075/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4de90491914b2452fdd305f9e814f786d84a075/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=f4de90491914b2452fdd305f9e814f786d84a075", "patch": "@@ -0,0 +1,54 @@\n+use std::ffi::OsStr;\n+use walkdir::WalkDir;\n+\n+use std::fs::File;\n+use std::io::prelude::*;\n+\n+// The maximum length allowed for stderr files.\n+//\n+// We limit this because small files are easier to deal with than bigger files.\n+const LIMIT: usize = 320;\n+\n+pub fn check() {\n+    let stderr_files = stderr_files();\n+    let exceeding_files = exceeding_stderr_files(stderr_files).collect::<Vec<String>>();\n+\n+    if !exceeding_files.is_empty() {\n+        eprintln!(\"Error: stderr files exceeding limit of {} lines:\", LIMIT);\n+        for path in exceeding_files {\n+            println!(\"{}\", path);\n+        }\n+        std::process::exit(1);\n+    }\n+}\n+\n+fn exceeding_stderr_files(files: impl Iterator<Item = walkdir::DirEntry>) -> impl Iterator<Item = String> {\n+    files\n+        .filter_map(|file| {\n+            let path = file.path().to_str().expect(\"Could not convert path to str\").to_string();\n+            let linecount = count_linenumbers(&path);\n+            if linecount > LIMIT {\n+                Some(path)\n+            } else {\n+                None\n+            }\n+        })\n+}\n+\n+fn stderr_files() -> impl Iterator<Item = walkdir::DirEntry> {\n+    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n+    WalkDir::new(\"../tests/ui\")\n+        .into_iter()\n+        .filter_map(std::result::Result::ok)\n+        .filter(|f| f.path().extension() == Some(OsStr::new(\"stderr\")))\n+}\n+\n+fn count_linenumbers(filepath: &str) -> usize {\n+    if let Ok(mut file) = File::open(filepath) {\n+        let mut content = String::new();\n+        file.read_to_string(&mut content).expect(\"Failed to read file?\");\n+        content.lines().count()\n+    } else {\n+        0\n+    }\n+}"}]}