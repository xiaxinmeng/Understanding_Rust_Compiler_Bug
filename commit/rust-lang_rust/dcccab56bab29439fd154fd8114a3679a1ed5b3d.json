{"sha": "dcccab56bab29439fd154fd8114a3679a1ed5b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjY2NhYjU2YmFiMjk0MzlmZDE1NGZkODExNGEzNjc5YTFlZDViM2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-03T23:49:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-03T23:49:07Z"}, "message": "Rollup merge of #59316 - flip1995:internal_lints_take_2, r=oli-obk\n\nInternal lints take 2\n\ncc #58701\ncc #49509\n\nTODO: Add `#![warn(internal)]` to crates (and fix violations)\n\nCrates depending on `rustc_data_structures`\n\n- [x] librustc_resolve\n- [x] librustc_driver\n- [x] librustc_passes\n- [x] librustc_metadata\n- [x] librustc_interface\n- [x] librustc_save_analysis\n- [x] librustc_lint\n- [x] librustc\n- [x] librustc_incremental\n- [x] librustc_codegen_utils\n- [x] libarena\n- [x] librustc_target\n- [x] librustc_allocator\n- [x] librustc_privacy\n- [x] librustc_traits\n- [x] librustc_borrowck\n- [x] libsyntax\n- [x] librustc_codegen_ssa\n- [x] libsyntax_ext\n- [x] librustc_errors\n- [x] librustc_mir\n- [x] libsyntax_pos\n- [x] librustc_typeck\n\nCrates with `feature(rustc_private)`\nExcluding crates, which are already in the list above. Also excluding tools and tests.\n\n- [ ] ~~libstd~~\n- [x] libfmt_macros\n- [x] librustdoc\n\nr? @oli-obk", "tree": {"sha": "31d875aafe5d3e9f8bfa862032feb9fa539cbc95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d875aafe5d3e9f8bfa862032feb9fa539cbc95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcccab56bab29439fd154fd8114a3679a1ed5b3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcpUZzCRBK7hj4Ov3rIwAAdHIIAIVZ0wyTzf0QwQKfobI1i/+7\nhvmSuvopSuAQJOoSn7Bl9mS8qAAXYbw5gD6OoD1WqcIqiQsW84k8g0y5rjOe4W0t\ncYkZdA6IWn2+rdR4VPLwLsnDHHlcYOAwgLM6JLxSqHUodzq19T8rfgWMSrDhx8u+\nZP4+QiQOEA5asPheH0q6lBrxLPS0yZT79PZUYxENarvkCqQYFr8AgNstjxdfJ9rK\nBrjphGsL4AFZB4+s5j7b/zzBrKRjN3BqAAHG0X7B+rvXqg9kXBpM4oy3g9XES7lm\n6v+BqA/RMu9u95+FOxvngyZ6jwSwd29kE4Axgz5YDY2wLkjNzrVyWm0a3vQUgmQ=\n=Duo7\n-----END PGP SIGNATURE-----\n", "payload": "tree 31d875aafe5d3e9f8bfa862032feb9fa539cbc95\nparent f8673e0ad85e98997faa76fa7edc99c5825f46ee\nparent c81ce069b4ea7586d3c15df4a45fd43159e1a0fa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554335347 +0200\ncommitter GitHub <noreply@github.com> 1554335347 +0200\n\nRollup merge of #59316 - flip1995:internal_lints_take_2, r=oli-obk\n\nInternal lints take 2\n\ncc #58701\ncc #49509\n\nTODO: Add `#![warn(internal)]` to crates (and fix violations)\n\nCrates depending on `rustc_data_structures`\n\n- [x] librustc_resolve\n- [x] librustc_driver\n- [x] librustc_passes\n- [x] librustc_metadata\n- [x] librustc_interface\n- [x] librustc_save_analysis\n- [x] librustc_lint\n- [x] librustc\n- [x] librustc_incremental\n- [x] librustc_codegen_utils\n- [x] libarena\n- [x] librustc_target\n- [x] librustc_allocator\n- [x] librustc_privacy\n- [x] librustc_traits\n- [x] librustc_borrowck\n- [x] libsyntax\n- [x] librustc_codegen_ssa\n- [x] libsyntax_ext\n- [x] librustc_errors\n- [x] librustc_mir\n- [x] libsyntax_pos\n- [x] librustc_typeck\n\nCrates with `feature(rustc_private)`\nExcluding crates, which are already in the list above. Also excluding tools and tests.\n\n- [ ] ~~libstd~~\n- [x] libfmt_macros\n- [x] librustdoc\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcccab56bab29439fd154fd8114a3679a1ed5b3d", "html_url": "https://github.com/rust-lang/rust/commit/dcccab56bab29439fd154fd8114a3679a1ed5b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcccab56bab29439fd154fd8114a3679a1ed5b3d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8673e0ad85e98997faa76fa7edc99c5825f46ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8673e0ad85e98997faa76fa7edc99c5825f46ee", "html_url": "https://github.com/rust-lang/rust/commit/f8673e0ad85e98997faa76fa7edc99c5825f46ee"}, {"sha": "c81ce069b4ea7586d3c15df4a45fd43159e1a0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81ce069b4ea7586d3c15df4a45fd43159e1a0fa", "html_url": "https://github.com/rust-lang/rust/commit/c81ce069b4ea7586d3c15df4a45fd43159e1a0fa"}], "stats": {"total": 787, "additions": 684, "deletions": 103}, "files": [{"sha": "86ce5fd01a812421323089946b223372b9b2cf30", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -316,6 +316,11 @@ fn main() {\n         }\n     }\n \n+    // This is required for internal lints.\n+    if stage != \"0\" {\n+        cmd.arg(\"-Zunstable-options\");\n+    }\n+\n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n     // allow the `rustc_private` feature to link to other unstable crates\n     // also in the sysroot. We also do this for host crates, since those"}, {"sha": "6fa15884f5abb12139a3e321655938b90584670d", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -12,6 +12,7 @@\n        test(no_crate_inject, attr(deny(warnings))))]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(alloc)]\n #![feature(core_intrinsics)]"}, {"sha": "2536121c7a3247da618679eeea97c298e361de9a", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -9,6 +9,7 @@\n        test(attr(deny(warnings))))]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(nll)]\n #![feature(rustc_private)]"}, {"sha": "abfa96841d9f6ce1fe16eb03001a06cc6f2336ee", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 104, "deletions": 3, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1,10 +1,10 @@\n-use crate::ty;\n-use crate::ty::TyCtxt;\n-use crate::hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n+use crate::ty::{self, print::Printer, subst::Kind, Ty, TyCtxt};\n+use crate::hir::map::definitions::{DisambiguatedDefPathData, FIRST_FREE_HIGH_DEF_INDEX};\n use rustc_data_structures::indexed_vec::Idx;\n use serialize;\n use std::fmt;\n use std::u32;\n+use syntax::symbol::{LocalInternedString, Symbol};\n \n newtype_index! {\n     pub struct CrateId {\n@@ -252,6 +252,107 @@ impl DefId {\n             format!(\"module `{}`\", tcx.def_path_str(*self))\n         }\n     }\n+\n+    /// Check if a `DefId`'s path matches the given absolute type path usage.\n+    // Uplifted from rust-lang/rust-clippy\n+    pub fn match_path<'a, 'tcx>(self, tcx: TyCtxt<'a, 'tcx, 'tcx>, path: &[&str]) -> bool {\n+        pub struct AbsolutePathPrinter<'a, 'tcx> {\n+            pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        }\n+\n+        impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n+            type Error = !;\n+\n+            type Path = Vec<LocalInternedString>;\n+            type Region = ();\n+            type Type = ();\n+            type DynExistential = ();\n+\n+            fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+                self.tcx\n+            }\n+\n+            fn print_region(self, _region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n+                Ok(())\n+            }\n+\n+            fn print_type(self, _ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n+                Ok(())\n+            }\n+\n+            fn print_dyn_existential(\n+                self,\n+                _predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+                ) -> Result<Self::DynExistential, Self::Error> {\n+                Ok(())\n+            }\n+\n+            fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n+                Ok(vec![self.tcx.original_crate_name(cnum).as_str()])\n+            }\n+\n+            fn path_qualified(\n+                self,\n+                self_ty: Ty<'tcx>,\n+                trait_ref: Option<ty::TraitRef<'tcx>>,\n+                ) -> Result<Self::Path, Self::Error> {\n+                if trait_ref.is_none() {\n+                    if let ty::Adt(def, substs) = self_ty.sty {\n+                        return self.print_def_path(def.did, substs);\n+                    }\n+                }\n+\n+                // This shouldn't ever be needed, but just in case:\n+                Ok(vec![match trait_ref {\n+                    Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),\n+                    None => Symbol::intern(&format!(\"<{}>\", self_ty)).as_str(),\n+                }])\n+            }\n+\n+            fn path_append_impl(\n+                self,\n+                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+                _disambiguated_data: &DisambiguatedDefPathData,\n+                self_ty: Ty<'tcx>,\n+                trait_ref: Option<ty::TraitRef<'tcx>>,\n+                ) -> Result<Self::Path, Self::Error> {\n+                let mut path = print_prefix(self)?;\n+\n+                // This shouldn't ever be needed, but just in case:\n+                path.push(match trait_ref {\n+                    Some(trait_ref) => {\n+                        Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref, self_ty)).as_str()\n+                    },\n+                    None => Symbol::intern(&format!(\"<impl {}>\", self_ty)).as_str(),\n+                });\n+\n+                Ok(path)\n+            }\n+\n+            fn path_append(\n+                self,\n+                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+                disambiguated_data: &DisambiguatedDefPathData,\n+                ) -> Result<Self::Path, Self::Error> {\n+                let mut path = print_prefix(self)?;\n+                path.push(disambiguated_data.data.as_interned_str().as_str());\n+                Ok(path)\n+            }\n+\n+            fn path_generic_args(\n+                self,\n+                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+                _args: &[Kind<'tcx>],\n+                ) -> Result<Self::Path, Self::Error> {\n+                print_prefix(self)\n+            }\n+        }\n+\n+        let names = AbsolutePathPrinter { tcx }.print_def_path(self, &[]).unwrap();\n+\n+        names.len() == path.len()\n+            && names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n+    }\n }\n \n impl serialize::UseSpecializedEncodable for DefId {}"}, {"sha": "a8e5db26eadc137c36789c59d45261ec4326264d", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -9,7 +9,6 @@ use crate::session::Session;\n \n use std::cmp::Ord;\n use std::hash as std_hash;\n-use std::collections::HashMap;\n use std::cell::RefCell;\n \n use syntax::ast;\n@@ -394,13 +393,12 @@ impl<'a> HashStable<StableHashingContext<'a>> for DelimSpan {\n     }\n }\n \n-pub fn hash_stable_trait_impls<'a, 'gcx, W, R>(\n+pub fn hash_stable_trait_impls<'a, 'gcx, W>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher<W>,\n     blanket_impls: &[DefId],\n-    non_blanket_impls: &HashMap<fast_reject::SimplifiedType, Vec<DefId>, R>)\n-    where W: StableHasherResult,\n-          R: std_hash::BuildHasher,\n+    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>)\n+    where W: StableHasherResult\n {\n     {\n         let mut blanket_impls: SmallVec<[_; 8]> = blanket_impls"}, {"sha": "19663161fe3fa45bd5f49811a9e916cf433156b5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -56,7 +56,7 @@ use crate::hir::Node;\n use crate::middle::region;\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::error::TypeError;\n-use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n+use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TypeFoldable};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use std::{cmp, fmt};\n use syntax_pos::{Pos, Span};\n@@ -1094,14 +1094,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 (_, false, _) => {\n                     if let Some(exp_found) = exp_found {\n                         let (def_id, ret_ty) = match exp_found.found.sty {\n-                            TyKind::FnDef(def, _) => {\n+                            ty::FnDef(def, _) => {\n                                 (Some(def), Some(self.tcx.fn_sig(def).output()))\n                             }\n                             _ => (None, None),\n                         };\n \n                         let exp_is_struct = match exp_found.expected.sty {\n-                            TyKind::Adt(def, _) => def.is_struct(),\n+                            ty::Adt(def, _) => def.is_struct(),\n                             _ => false,\n                         };\n \n@@ -1140,8 +1140,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         diag: &mut DiagnosticBuilder<'tcx>,\n     ) {\n         match (&exp_found.expected.sty, &exp_found.found.sty) {\n-            (TyKind::Adt(exp_def, exp_substs), TyKind::Ref(_, found_ty, _)) => {\n-                if let TyKind::Adt(found_def, found_substs) = found_ty.sty {\n+            (ty::Adt(exp_def, exp_substs), ty::Ref(_, found_ty, _)) => {\n+                if let ty::Adt(found_def, found_substs) = found_ty.sty {\n                     let path_str = format!(\"{:?}\", exp_def);\n                     if exp_def == &found_def {\n                         let opt_msg = \"you can convert from `&Option<T>` to `Option<&T>` using \\\n@@ -1164,17 +1164,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             let mut show_suggestion = true;\n                             for (exp_ty, found_ty) in exp_substs.types().zip(found_substs.types()) {\n                                 match exp_ty.sty {\n-                                    TyKind::Ref(_, exp_ty, _) => {\n+                                    ty::Ref(_, exp_ty, _) => {\n                                         match (&exp_ty.sty, &found_ty.sty) {\n-                                            (_, TyKind::Param(_)) |\n-                                            (_, TyKind::Infer(_)) |\n-                                            (TyKind::Param(_), _) |\n-                                            (TyKind::Infer(_), _) => {}\n+                                            (_, ty::Param(_)) |\n+                                            (_, ty::Infer(_)) |\n+                                            (ty::Param(_), _) |\n+                                            (ty::Infer(_), _) => {}\n                                             _ if ty::TyS::same_type(exp_ty, found_ty) => {}\n                                             _ => show_suggestion = false,\n                                         };\n                                     }\n-                                    TyKind::Param(_) | TyKind::Infer(_) => {}\n+                                    ty::Param(_) | ty::Infer(_) => {}\n                                     _ => show_suggestion = false,\n                                 }\n                             }"}, {"sha": "0b75cb6c8a3e29b7c18f79cb805302d484e67957", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -29,6 +29,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n #![allow(explicit_outlives_requirements)]\n \n #![feature(arbitrary_self_types)]"}, {"sha": "d5f8876d1621f0dbc036c0b05e747c208e9f8ce9", "filename": "src/librustc/lint/internal.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -0,0 +1,127 @@\n+//! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n+//! Clippy.\n+\n+use crate::hir::{HirId, Path, PathSegment, QPath, Ty, TyKind};\n+use crate::lint::{\n+    EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n+};\n+use errors::Applicability;\n+use rustc_data_structures::fx::FxHashMap;\n+use syntax::ast::Ident;\n+\n+declare_lint! {\n+    pub DEFAULT_HASH_TYPES,\n+    Allow,\n+    \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n+}\n+\n+pub struct DefaultHashTypes {\n+    map: FxHashMap<String, String>,\n+}\n+\n+impl DefaultHashTypes {\n+    pub fn new() -> Self {\n+        let mut map = FxHashMap::default();\n+        map.insert(\"HashMap\".to_string(), \"FxHashMap\".to_string());\n+        map.insert(\"HashSet\".to_string(), \"FxHashSet\".to_string());\n+        Self { map }\n+    }\n+}\n+\n+impl LintPass for DefaultHashTypes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEFAULT_HASH_TYPES)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"DefaultHashTypes\"\n+    }\n+}\n+\n+impl EarlyLintPass for DefaultHashTypes {\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n+        let ident_string = ident.to_string();\n+        if let Some(replace) = self.map.get(&ident_string) {\n+            let msg = format!(\n+                \"Prefer {} over {}, it has better performance\",\n+                replace, ident_string\n+            );\n+            let mut db = cx.struct_span_lint(DEFAULT_HASH_TYPES, ident.span, &msg);\n+            db.span_suggestion(\n+                ident.span,\n+                \"use\",\n+                replace.to_string(),\n+                Applicability::MaybeIncorrect, // FxHashMap, ... needs another import\n+            );\n+            db.note(&format!(\n+                \"a `use rustc_data_structures::fx::{}` may be necessary\",\n+                replace\n+            ))\n+            .emit();\n+        }\n+    }\n+}\n+\n+declare_lint! {\n+    pub USAGE_OF_TY_TYKIND,\n+    Allow,\n+    \"Usage of `ty::TyKind` outside of the `ty::sty` module\"\n+}\n+\n+pub struct TyKindUsage;\n+\n+impl LintPass for TyKindUsage {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(USAGE_OF_TY_TYKIND)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"TyKindUsage\"\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n+    fn check_path(&mut self, cx: &LateContext<'_, '_>, path: &'tcx Path, _: HirId) {\n+        let segments = path.segments.iter().rev().skip(1).rev();\n+\n+        if let Some(last) = segments.last() {\n+            let span = path.span.with_hi(last.ident.span.hi());\n+            if lint_ty_kind_usage(cx, last) {\n+                cx.struct_span_lint(USAGE_OF_TY_TYKIND, span, \"usage of `ty::TyKind::<kind>`\")\n+                    .span_suggestion(\n+                        span,\n+                        \"try using ty::<kind> directly\",\n+                        \"ty\".to_string(),\n+                        Applicability::MaybeIncorrect, // ty maybe needs an import\n+                    )\n+                    .emit();\n+            }\n+        }\n+    }\n+\n+    fn check_ty(&mut self, cx: &LateContext<'_, '_>, ty: &'tcx Ty) {\n+        if let TyKind::Path(qpath) = &ty.node {\n+            if let QPath::Resolved(_, path) = qpath {\n+                if let Some(last) = path.segments.iter().last() {\n+                    if lint_ty_kind_usage(cx, last) {\n+                        cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, \"usage of `ty::TyKind`\")\n+                            .help(\"try using `ty::Ty` instead\")\n+                            .emit();\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n+    if segment.ident.as_str() == \"TyKind\" {\n+        if let Some(def) = segment.def {\n+            if let Some(did) = def.opt_def_id() {\n+                return did.match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]);\n+            }\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "b54d26054da1c46ed7c59795ab25e7504584f708", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -574,6 +574,7 @@ impl_stable_hash_for!(enum self::LintSource {\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;\n+pub mod internal;\n mod context;\n mod levels;\n "}, {"sha": "23be1bbf6c6877c2eb323bf6828a13c25f77f783", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn field_ty(self, tcx: TyCtxt<'a, 'gcx, 'tcx>, f: &Field) -> Ty<'tcx>\n     {\n         let answer = match self.ty.sty {\n-            ty::TyKind::Adt(adt_def, substs) => {\n+            ty::Adt(adt_def, substs) => {\n                 let variant_def = match self.variant_index {\n                     None => adt_def.non_enum_variant(),\n                     Some(variant_index) => {"}, {"sha": "aa5610739fd6da8cb2ff853be6130cd0b99a21f2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -219,6 +219,11 @@ pub struct CommonTypes<'tcx> {\n     pub never: Ty<'tcx>,\n     pub err: Ty<'tcx>,\n \n+    /// Dummy type used for the `Self` of a `TraitRef` created for converting\n+    /// a trait object, and which gets removed in `ExistentialTraitRef`.\n+    /// This type must not appear anywhere in other converted types.\n+    pub trait_object_dummy_self: Ty<'tcx>,\n+\n     pub re_empty: Region<'tcx>,\n     pub re_static: Region<'tcx>,\n     pub re_erased: Region<'tcx>,\n@@ -955,6 +960,8 @@ impl<'tcx> CommonTypes<'tcx> {\n             f32: mk(Float(ast::FloatTy::F32)),\n             f64: mk(Float(ast::FloatTy::F64)),\n \n+            trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n+\n             re_empty: mk_region(RegionKind::ReEmpty),\n             re_static: mk_region(RegionKind::ReStatic),\n             re_erased: mk_region(RegionKind::ReErased),"}, {"sha": "7d47867cea12573b2ba5e34f821acf777ba58097", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1,3 +1,5 @@\n+#![cfg_attr(not(stage0), allow(usage_of_ty_tykind))]\n+\n pub use self::Variance::*;\n pub use self::AssociatedItemContainer::*;\n pub use self::BorrowKind::*;"}, {"sha": "26194176350ac2a177e36a8c61649675d2a5db38", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1,11 +1,10 @@\n #![allow(non_camel_case_types)]\n \n-use rustc_data_structures::sync::Lock;\n+use rustc_data_structures::{fx::FxHashMap, sync::Lock};\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n use std::fmt::Debug;\n-use std::hash::{Hash, BuildHasher};\n+use std::hash::Hash;\n use std::panic;\n use std::env;\n use std::time::{Duration, Instant};\n@@ -341,8 +340,8 @@ pub trait MemoizationMap {\n         where OP: FnOnce() -> Self::Value;\n }\n \n-impl<K, V, S> MemoizationMap for RefCell<HashMap<K,V,S>>\n-    where K: Hash+Eq+Clone, V: Clone, S: BuildHasher\n+impl<K, V> MemoizationMap for RefCell<FxHashMap<K,V>>\n+    where K: Hash+Eq+Clone, V: Clone\n {\n     type Key = K;\n     type Value = V;"}, {"sha": "a9e422fb238b8ef3b173928745a0062cd1754379", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -2,6 +2,7 @@\n #![feature(rustc_private)]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n pub mod expand;\n "}, {"sha": "3761a52bcccf2d8da1c4a2edfbcabf3e8b2de739", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(non_camel_case_types)]\n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(nll)]\n "}, {"sha": "e2917578c0ece4c3c098113fd1601ffa5d1f418c", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -14,6 +14,7 @@\n #![allow(unused_attributes)]\n #![allow(dead_code)]\n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n #![allow(explicit_outlives_requirements)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "330cfe154e302814e9034e6e354cfc6314f6ea93", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -16,6 +16,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "2781bfa3ec8495a8324836e96404a8639df8f86d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -17,6 +17,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n pub extern crate getopts;\n #[cfg(unix)]"}, {"sha": "71bef54cd17a12c30ce796f1e14e241d97f8b0e6", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -6,6 +6,7 @@\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "d7db324f3463efa9b723295a2c9c7ae8c0477baf", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -8,6 +8,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #[macro_use] extern crate rustc;\n #[allow(unused_extern_crates)]"}, {"sha": "74085123f89ee345d075f83d5492d52778a9edb0", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -12,7 +12,6 @@ use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_metadata::cstore::CStore;\n-use std::collections::HashSet;\n use std::io::Write;\n use std::path::PathBuf;\n use std::result;"}, {"sha": "353ff6a57a5efee02c99134bc49e470b7c4aa4a2", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -7,6 +7,7 @@\n #![cfg_attr(unix, feature(libc))]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![allow(unused_imports)]\n "}, {"sha": "17523aedffb58ef2a0e4ec79c3fdf3f3b3543e52", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -21,7 +21,6 @@ use rustc_plugin;\n use rustc_privacy;\n use rustc_resolve;\n use rustc_typeck;\n-use std::collections::HashSet;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::io::{self, Write};\n@@ -109,6 +108,9 @@ pub fn create_session(\n     let codegen_backend = get_codegen_backend(&sess);\n \n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n+    if sess.unstable_options() {\n+        rustc_lint::register_internals(&mut sess.lint_store.borrow_mut(), Some(&sess));\n+    }\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));\n     add_configuration(&mut cfg, &sess, &*codegen_backend);"}, {"sha": "541d779c477fc4ba55fb9f4616929d3b5c273ac5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1036,7 +1036,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n \n         let msg = \"mutating transmuted &mut T from &T may cause undefined behavior, \\\n                    consider instead using an UnsafeCell\";\n-        match get_transmute_from_to(cx, expr) {\n+        match get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (&ty1.sty, &ty2.sty)) {\n             Some((&ty::Ref(_, _, from_mt), &ty::Ref(_, _, to_mt))) => {\n                 if to_mt == hir::Mutability::MutMutable &&\n                    from_mt == hir::Mutability::MutImmutable {\n@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n         fn get_transmute_from_to<'a, 'tcx>\n             (cx: &LateContext<'a, 'tcx>,\n              expr: &hir::Expr)\n-             -> Option<(&'tcx ty::TyKind<'tcx>, &'tcx ty::TyKind<'tcx>)> {\n+             -> Option<(Ty<'tcx>, Ty<'tcx>)> {\n             let def = if let hir::ExprKind::Path(ref qpath) = expr.node {\n                 cx.tables.qpath_def(qpath, expr.hir_id)\n             } else {\n@@ -1062,7 +1062,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n                 let sig = cx.tables.node_type(expr.hir_id).fn_sig(cx.tcx);\n                 let from = sig.inputs().skip_binder()[0];\n                 let to = *sig.output().skip_binder();\n-                return Some((&from.sty, &to.sty));\n+                return Some((from, to));\n             }\n             None\n         }"}, {"sha": "7e77962a16e0bda1f154cc03135c4c4e582de9ac", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -20,6 +20,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #[macro_use]\n extern crate rustc;\n@@ -61,6 +62,7 @@ use nonstandard_style::*;\n use builtin::*;\n use types::*;\n use unused::*;\n+use rustc::lint::internal::*;\n \n /// Useful for other parts of the compiler.\n pub use builtin::SoftLints;\n@@ -488,3 +490,18 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"bad_repr\",\n         \"replaced with a generic attribute input check\");\n }\n+\n+pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n+    store.register_early_pass(sess, false, false, box DefaultHashTypes::new());\n+    store.register_late_pass(sess, false, false, false, box TyKindUsage);\n+    store.register_group(\n+        sess,\n+        false,\n+        \"internal\",\n+        None,\n+        vec![\n+            LintId::of(DEFAULT_HASH_TYPES),\n+            LintId::of(USAGE_OF_TY_TYKIND),\n+        ],\n+    );\n+}"}, {"sha": "c82985b549e8ee33513fcf83a4bb59233db227fc", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                         report_bin_hex_error(\n                                             cx,\n                                             e,\n-                                            ty::Int(t),\n+                                            attr::IntType::SignedInt(t),\n                                             repr_str,\n                                             v,\n                                             negative,\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                 report_bin_hex_error(\n                                     cx,\n                                     e,\n-                                    ty::Uint(t),\n+                                    attr::IntType::UnsignedInt(t),\n                                     repr_str,\n                                     lit_val,\n                                     false,\n@@ -321,7 +321,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         //\n         // No suggestion for: `isize`, `usize`.\n         fn get_type_suggestion<'a>(\n-            t: &ty::TyKind<'_>,\n+            t: Ty<'_>,\n             val: u128,\n             negative: bool,\n         ) -> Option<String> {\n@@ -347,14 +347,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                     }\n                 }\n             }\n-            match t {\n-                &ty::Int(i) => find_fit!(i, val, negative,\n+            match t.sty {\n+                ty::Int(i) => find_fit!(i, val, negative,\n                               I8 => [U8] => [I16, I32, I64, I128],\n                               I16 => [U16] => [I32, I64, I128],\n                               I32 => [U32] => [I64, I128],\n                               I64 => [U64] => [I128],\n                               I128 => [U128] => []),\n-                &ty::Uint(u) => find_fit!(u, val, negative,\n+                ty::Uint(u) => find_fit!(u, val, negative,\n                               U8 => [U8, U16, U32, U64, U128] => [],\n                               U16 => [U16, U32, U64, U128] => [],\n                               U32 => [U32, U64, U128] => [],\n@@ -367,25 +367,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         fn report_bin_hex_error(\n             cx: &LateContext<'_, '_>,\n             expr: &hir::Expr,\n-            ty: ty::TyKind<'_>,\n+            ty: attr::IntType,\n             repr_str: String,\n             val: u128,\n             negative: bool,\n         ) {\n+            let size = layout::Integer::from_attr(&cx.tcx, ty).size();\n             let (t, actually) = match ty {\n-                ty::Int(t) => {\n-                    let ity = attr::IntType::SignedInt(t);\n-                    let size = layout::Integer::from_attr(&cx.tcx, ity).size();\n+                attr::IntType::SignedInt(t) => {\n                     let actually = sign_extend(val, size) as i128;\n                     (format!(\"{:?}\", t), actually.to_string())\n                 }\n-                ty::Uint(t) => {\n-                    let ity = attr::IntType::UnsignedInt(t);\n-                    let size = layout::Integer::from_attr(&cx.tcx, ity).size();\n+                attr::IntType::UnsignedInt(t) => {\n                     let actually = truncate(val, size);\n                     (format!(\"{:?}\", t), actually.to_string())\n                 }\n-                _ => bug!(),\n             };\n             let mut err = cx.struct_span_lint(\n                 OVERFLOWING_LITERALS,\n@@ -398,7 +394,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 repr_str, val, t, actually, t\n             ));\n             if let Some(sugg_ty) =\n-                get_type_suggestion(&cx.tables.node_type(expr.hir_id).sty, val, negative)\n+                get_type_suggestion(&cx.tables.node_type(expr.hir_id), val, negative)\n             {\n                 if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n                     let (sans_suffix, _) = repr_str.split_at(pos);"}, {"sha": "4078171733fc3fd5862ae3028743f835734cee33", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -14,6 +14,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n extern crate libc;\n #[allow(unused_extern_crates)]"}, {"sha": "01c06739e290363546343253a6d12b89ab89065d", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -223,7 +223,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n                 };\n-                if let ty::TyKind::Param(param_ty) = ty.sty {\n+                if let ty::Param(param_ty) = ty.sty {\n                     let tcx = self.infcx.tcx;\n                     let generics = tcx.generics_of(self.mir_def_id);\n                     let def_id = generics.type_param(&param_ty, tcx).def_id;\n@@ -1529,7 +1529,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if let TerminatorKind::Call {\n             func: Operand::Constant(box Constant {\n                 literal: ty::Const {\n-                    ty: &ty::TyS { sty: ty::TyKind::FnDef(id, _), ..  },\n+                    ty: &ty::TyS { sty: ty::FnDef(id, _), ..  },\n                     ..\n                 },\n                 ..\n@@ -1547,7 +1547,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 };\n \n                 debug!(\"add_moved_or_invoked_closure_note: closure={:?}\", closure);\n-                if let ty::TyKind::Closure(did, _) = self.mir.local_decls[closure].ty.sty {\n+                if let ty::Closure(did, _) = self.mir.local_decls[closure].ty.sty {\n                     let hir_id = self.infcx.tcx.hir().as_local_hir_id(did).unwrap();\n \n                     if let Some((span, name)) = self.infcx.tcx.typeck_tables_of(did)\n@@ -1570,7 +1570,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         // Check if we are just moving a closure after it has been invoked.\n         if let Some(target) = target {\n-            if let ty::TyKind::Closure(did, _) = self.mir.local_decls[target].ty.sty {\n+            if let ty::Closure(did, _) = self.mir.local_decls[target].ty.sty {\n                 let hir_id = self.infcx.tcx.hir().as_local_hir_id(did).unwrap();\n \n                 if let Some((span, name)) = self.infcx.tcx.typeck_tables_of(did)\n@@ -1919,7 +1919,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             } else {\n                 let ty = self.infcx.tcx.type_of(self.mir_def_id);\n                 match ty.sty {\n-                    ty::TyKind::FnDef(_, _) | ty::TyKind::FnPtr(_) => self.annotate_fn_sig(\n+                    ty::FnDef(_, _) | ty::FnPtr(_) => self.annotate_fn_sig(\n                         self.mir_def_id,\n                         self.infcx.tcx.fn_sig(self.mir_def_id),\n                     ),\n@@ -2164,12 +2164,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //    anything.\n         let return_ty = sig.output();\n         match return_ty.skip_binder().sty {\n-            ty::TyKind::Ref(return_region, _, _) if return_region.has_name() && !is_closure => {\n+            ty::Ref(return_region, _, _) if return_region.has_name() && !is_closure => {\n                 // This is case 1 from above, return type is a named reference so we need to\n                 // search for relevant arguments.\n                 let mut arguments = Vec::new();\n                 for (index, argument) in sig.inputs().skip_binder().iter().enumerate() {\n-                    if let ty::TyKind::Ref(argument_region, _, _) = argument.sty {\n+                    if let ty::Ref(argument_region, _, _) = argument.sty {\n                         if argument_region == return_region {\n                             // Need to use the `rustc::ty` types to compare against the\n                             // `return_region`. Then use the `rustc::hir` type to get only\n@@ -2206,7 +2206,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     return_span,\n                 })\n             }\n-            ty::TyKind::Ref(_, _, _) if is_closure => {\n+            ty::Ref(_, _, _) if is_closure => {\n                 // This is case 2 from above but only for closures, return type is anonymous\n                 // reference so we select\n                 // the first argument.\n@@ -2215,9 +2215,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 // Closure arguments are wrapped in a tuple, so we need to get the first\n                 // from that.\n-                if let ty::TyKind::Tuple(elems) = argument_ty.sty {\n+                if let ty::Tuple(elems) = argument_ty.sty {\n                     let argument_ty = elems.first()?;\n-                    if let ty::TyKind::Ref(_, _, _) = argument_ty.sty {\n+                    if let ty::Ref(_, _, _) = argument_ty.sty {\n                         return Some(AnnotatedBorrowFnSignature::Closure {\n                             argument_ty,\n                             argument_span,\n@@ -2227,7 +2227,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 None\n             }\n-            ty::TyKind::Ref(_, _, _) => {\n+            ty::Ref(_, _, _) => {\n                 // This is also case 2 from above but for functions, return type is still an\n                 // anonymous reference so we select the first argument.\n                 let argument_span = fn_decl.inputs.first()?.span;\n@@ -2238,7 +2238,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 // We expect the first argument to be a reference.\n                 match argument_ty.sty {\n-                    ty::TyKind::Ref(_, _, _) => {}\n+                    ty::Ref(_, _, _) => {}\n                     _ => return None,\n                 }\n \n@@ -2366,8 +2366,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // this by hooking into the pretty printer and telling it to label the\n         // lifetimes without names with the value `'0`.\n         match ty.sty {\n-            ty::TyKind::Ref(ty::RegionKind::ReLateBound(_, br), _, _)\n-            | ty::TyKind::Ref(\n+            ty::Ref(ty::RegionKind::ReLateBound(_, br), _, _)\n+            | ty::Ref(\n                 ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n                 _,\n                 _,\n@@ -2386,7 +2386,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n \n         let region = match ty.sty {\n-            ty::TyKind::Ref(region, _, _) => {\n+            ty::Ref(region, _, _) => {\n                 match region {\n                     ty::RegionKind::ReLateBound(_, br)\n                     | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {"}, {"sha": "bf297ae0debf0b4b212565db140fe9af80d57cb7", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1741,7 +1741,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // no move out from an earlier location) then this is an attempt at initialization\n                 // of the union - we should error in that case.\n                 let tcx = this.infcx.tcx;\n-                if let ty::TyKind::Adt(def, _) = base.ty(this.mir, tcx).ty.sty {\n+                if let ty::Adt(def, _) = base.ty(this.mir, tcx).ty.sty {\n                     if def.is_union() {\n                         if this.move_data.path_map[mpi].iter().any(|moi| {\n                             this.move_data.moves[*moi].source.is_predecessor_of("}, {"sha": "7efe1d83c2e5fc119e1491e3f615e0ec4a127a8f", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -532,7 +532,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     if let StatementKind::Assign(_, box Rvalue::Ref(_, _, source)) = &stmt.kind {\n                         let ty = source.ty(self.mir, self.infcx.tcx).ty;\n                         let ty = match ty.sty {\n-                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            ty::Ref(_, ty, _) => ty,\n                             _ => ty,\n                         };\n                         debug!(\"borrowed_content_source: ty={:?}\", ty);\n@@ -557,7 +557,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n                         let ty = source.ty(self.mir, self.infcx.tcx).ty;\n                         let ty = match ty.sty {\n-                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            ty::Ref(_, ty, _) => ty,\n                             _ => ty,\n                         };\n                         debug!(\"borrowed_content_source: ty={:?}\", ty);"}, {"sha": "b780511315d81a021a7041fc7d1ad169f7f817f8", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::{\n     Mutability, Operand, Place, PlaceBase, Projection, ProjectionElem, Static, StaticKind,\n };\n use rustc::mir::{Terminator, TerminatorKind};\n-use rustc::ty::{self, Const, DefIdTree, TyS, TyKind, TyCtxt};\n+use rustc::ty::{self, Const, DefIdTree, TyS, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n use syntax_pos::symbol::keywords;\n@@ -261,7 +261,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                             // Otherwise, check if the name is the self kewyord - in which case\n                             // we have an explicit self. Do the same thing in this case and check\n                             // for a `self: &mut Self` to suggest removing the `&mut`.\n-                            if let ty::TyKind::Ref(\n+                            if let ty::Ref(\n                                 _, _, hir::Mutability::MutMutable\n                             ) = local_decl.ty.sty {\n                                 true\n@@ -476,7 +476,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                     func: Operand::Constant(box Constant {\n                                         literal: Const {\n                                             ty: &TyS {\n-                                                sty: TyKind::FnDef(id, substs),\n+                                                sty: ty::FnDef(id, substs),\n                                                 ..\n                                             },\n                                             ..\n@@ -633,8 +633,8 @@ fn annotate_struct_field(\n     field: &mir::Field,\n ) -> Option<(Span, String)> {\n     // Expect our local to be a reference to a struct of some kind.\n-    if let ty::TyKind::Ref(_, ty, _) = ty.sty {\n-        if let ty::TyKind::Adt(def, _) = ty.sty {\n+    if let ty::Ref(_, ty, _) = ty.sty {\n+        if let ty::Adt(def, _) = ty.sty {\n             let field = def.all_fields().nth(field.index())?;\n             // Use the HIR types to construct the diagnostic message.\n             let hir_id = tcx.hir().as_local_hir_id(field.did)?;"}, {"sha": "e30938bc32659397f136593ebfd597cc78523894", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -589,7 +589,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 // Check the type for a trait object.\n                                 return match ty.sty {\n                                     // `&dyn Trait`\n-                                    ty::TyKind::Ref(_, ty, _) if ty.is_trait() => true,\n+                                    ty::Ref(_, ty, _) if ty.is_trait() => true,\n                                     // `Box<dyn Trait>`\n                                     _ if ty.is_box() && ty.boxed_ty().is_trait() => true,\n                                     // `dyn Trait`"}, {"sha": "917e383cae82783b06f571047c206b2390691ca6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -583,7 +583,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             (self.to_error_region(fr), self.to_error_region(outlived_fr))\n         {\n             if let Some(ty::TyS {\n-                sty: ty::TyKind::Opaque(did, substs),\n+                sty: ty::Opaque(did, substs),\n                 ..\n             }) = infcx\n                 .tcx"}, {"sha": "ec5637d17072d4840148ee91990b5809ec71b015", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -39,7 +39,7 @@ use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, SubstsRef, UnpackedKind, UserSubsts};\n use rustc::ty::{\n-    self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind, UserType,\n+    self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, UserType,\n     CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     UserTypeAnnotationIndex,\n };\n@@ -746,7 +746,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         let (variant, substs) = match base_ty {\n             PlaceTy { ty, variant_index: Some(variant_index) } => {\n                 match ty.sty {\n-                    ty::TyKind::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),\n+                    ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),\n                     _ => bug!(\"can't have downcast of non-adt type\"),\n                 }\n             }\n@@ -1136,7 +1136,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n         if let Err(terr) = self.sub_types(sub, sup, locations, category) {\n-            if let TyKind::Opaque(..) = sup.sty {\n+            if let ty::Opaque(..) = sup.sty {\n                 // When you have `let x: impl Foo = ...` in a closure,\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n@@ -1389,7 +1389,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             } => {\n                 let place_type = place.ty(mir, tcx).ty;\n                 let adt = match place_type.sty {\n-                    TyKind::Adt(adt, _) if adt.is_enum() => adt,\n+                    ty::Adt(adt, _) if adt.is_enum() => adt,\n                     _ => {\n                         span_bug!(\n                             stmt.source_info.span,"}, {"sha": "2471c01e3f3d0f4f20aef0439a95b56cc847d306", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -425,7 +425,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 base,\n                 elem: ProjectionElem::Field(_, _),\n             }) if match base.ty(self.builder.mir, self.builder.tcx).ty.sty {\n-                    ty::TyKind::Adt(def, _) if def.is_union() => true,\n+                    ty::Adt(def, _) if def.is_union() => true,\n                     _ => false,\n             } => base,\n             // Otherwise, lookup the place."}, {"sha": "a9c521f59a96c4aa39dfa96d76cbebe30e375d65", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1754,7 +1754,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     // they should be pointing to memory is when they are subslices of nonzero\n                     // slices\n                     let (opt_ptr, n, ty) = match value.ty.sty {\n-                        ty::TyKind::Array(t, n) => {\n+                        ty::Array(t, n) => {\n                             match value.val {\n                                 ConstValue::ByRef(ptr, alloc) => (\n                                     Some((ptr, alloc)),\n@@ -1767,7 +1767,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                                 ),\n                             }\n                         },\n-                        ty::TyKind::Slice(t) => {\n+                        ty::Slice(t) => {\n                             match value.val {\n                                 ConstValue::Slice(ptr, n) => (\n                                     ptr.to_ptr().ok().map(|ptr| ("}, {"sha": "7ded973701edcd37724211dc6112778a076703b8", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::region;\n use rustc::session::Session;\n-use rustc::ty::{self, Ty, TyCtxt, TyKind};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::lint;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -481,7 +481,7 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(\n             }\n             let patterns = witnesses.iter().map(|p| (**p).clone()).collect::<Vec<Pattern<'_>>>();\n             if patterns.len() < 4 {\n-                for sp in maybe_point_at_variant(cx, &scrut_ty.sty, patterns.as_slice()) {\n+                for sp in maybe_point_at_variant(cx, scrut_ty, patterns.as_slice()) {\n                     err.span_label(sp, \"not covered\");\n                 }\n             }\n@@ -498,11 +498,11 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(\n \n fn maybe_point_at_variant(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-    sty: &TyKind<'tcx>,\n+    ty: Ty<'tcx>,\n     patterns: &[Pattern<'_>],\n ) -> Vec<Span> {\n     let mut covered = vec![];\n-    if let ty::Adt(def, _) = sty {\n+    if let ty::Adt(def, _) = ty.sty {\n         // Don't point at variants that have already been covered due to other patterns to avoid\n         // visual clutter\n         for pattern in patterns {\n@@ -518,15 +518,15 @@ fn maybe_point_at_variant(\n                         .map(|field_pattern| field_pattern.pattern.clone())\n                         .collect::<Vec<_>>();\n                     covered.extend(\n-                        maybe_point_at_variant(cx, sty, subpatterns.as_slice()),\n+                        maybe_point_at_variant(cx, ty, subpatterns.as_slice()),\n                     );\n                 }\n             }\n             if let PatternKind::Leaf { subpatterns } = pk {\n                 let subpatterns = subpatterns.iter()\n                     .map(|field_pattern| field_pattern.pattern.clone())\n                     .collect::<Vec<_>>();\n-                covered.extend(maybe_point_at_variant(cx, sty, subpatterns.as_slice()));\n+                covered.extend(maybe_point_at_variant(cx, ty, subpatterns.as_slice()));\n             }\n         }\n     }"}, {"sha": "deeed9a0b9846ecc4892e66fc5de96f3c8550ea0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -28,6 +28,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n #![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;"}, {"sha": "572f7133cad84eb48190563dba2c3e491d97d006", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Mir, TerminatorKind};\n-use rustc::ty::{AssociatedItem, AssociatedItemContainer, Instance, TyCtxt, TyKind};\n+use rustc::ty::{self, AssociatedItem, AssociatedItemContainer, Instance, TyCtxt};\n use rustc::ty::subst::InternalSubsts;\n \n pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -86,7 +86,7 @@ fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 TerminatorKind::Call { ref func, .. } => {\n                     let func_ty = func.ty(mir, tcx);\n \n-                    if let TyKind::FnDef(fn_def_id, substs) = func_ty.sty {\n+                    if let ty::FnDef(fn_def_id, substs) = func_ty.sty {\n                         let (call_fn_id, call_substs) =\n                             if let Some(instance) = Instance::resolve(tcx,\n                                                                         param_env,"}, {"sha": "8187a81f0edab4c3f1731ea423f9d82189956b07", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::mir::{Constant, Location, Place, PlaceBase, Mir, Operand, ProjectionElem, Rvalue, Local};\n use rustc::mir::visit::{MutVisitor, Visitor};\n-use rustc::ty::{TyCtxt, TyKind};\n+use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n@@ -90,7 +90,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n \n         if let Rvalue::Len(ref place) = *rvalue {\n             let place_ty = place.ty(&self.mir.local_decls, self.tcx).ty;\n-            if let TyKind::Array(_, len) = place_ty.sty {\n+            if let ty::Array(_, len) = place_ty.sty {\n                 let span = self.mir.source_info(location).span;\n                 let ty = self.tcx.types.usize;\n                 let constant = Constant { span, ty, literal: len, user_ty: None };"}, {"sha": "fd9d6bb5760b1b0646cf97ece7cda0594b9d9a1a", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -3,7 +3,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::LangItem;\n use rustc::mir::*;\n-use rustc::ty::{List, Ty, TyCtxt, TyKind};\n+use rustc::ty::{self, List, Ty, TyCtxt};\n use rustc_data_structures::indexed_vec::{Idx};\n use crate::transform::{MirPass, MirSource};\n \n@@ -183,8 +183,8 @@ impl RhsKind {\n \n fn sign_of_128bit(ty: Ty<'_>) -> Option<bool> {\n     match ty.sty {\n-        TyKind::Int(syntax::ast::IntTy::I128) => Some(true),\n-        TyKind::Uint(syntax::ast::UintTy::U128) => Some(false),\n+        ty::Int(syntax::ast::IntTy::I128) => Some(true),\n+        ty::Uint(syntax::ast::UintTy::U128) => Some(false),\n         _ => None,\n     }\n }"}, {"sha": "20442a4a566ece72d545793798884de7118bf043", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -12,6 +12,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "9a8970b2935e091540478ad025818ec5ec88e50e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1,6 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "5216156c0cab81d14b0ff2cbdfb40c28edc8cae9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -8,6 +8,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n pub use rustc::hir::def::{Namespace, PerNS};\n "}, {"sha": "a363fe114189158816e228e893e9fe07573903c7", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -2,6 +2,7 @@\n #![feature(custom_attribute)]\n #![feature(nll)]\n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n #![allow(unused_attributes)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "f1812c20dccde3bab91d7005aa09ef4bb46d5493", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -16,6 +16,7 @@\n #![feature(step_trait)]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #[macro_use] extern crate log;\n "}, {"sha": "bc034e1fb16278fd6d0836a67ea141c14fbc072f", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -2,6 +2,7 @@\n //! the guts are broken up into modules; see the comments in those modules.\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]"}, {"sha": "8805dade40e4c2a5d2a1fadd5c8caf0f4a9236e9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -99,11 +99,6 @@ enum GenericArgPosition {\n     MethodCall,\n }\n \n-/// Dummy type used for the `Self` of a `TraitRef` created for converting\n-/// a trait object, and which gets removed in `ExistentialTraitRef`.\n-/// This type must not appear anywhere in other converted types.\n-const TRAIT_OBJECT_DUMMY_SELF: ty::TyKind<'static> = ty::Infer(ty::FreshTy(0));\n-\n impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     pub fn ast_region_to_region(&self,\n         lifetime: &hir::Lifetime,\n@@ -595,7 +590,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             infer_types,\n         );\n \n-        let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n+        let is_object = self_ty.map_or(false, |ty| {\n+            ty == self.tcx().types.trait_object_dummy_self\n+        });\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n             if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n                 if is_object && has_default {\n@@ -956,10 +953,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     /// Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n-    /// removing the dummy `Self` type (`TRAIT_OBJECT_DUMMY_SELF`).\n+    /// removing the dummy `Self` type (`trait_object_dummy_self`).\n     fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)\n                                 -> ty::ExistentialTraitRef<'tcx> {\n-        if trait_ref.self_ty().sty != TRAIT_OBJECT_DUMMY_SELF {\n+        if trait_ref.self_ty() != self.tcx().types.trait_object_dummy_self {\n             bug!(\"trait_ref_to_existential called on {:?} with non-dummy Self\", trait_ref);\n         }\n         ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n@@ -980,7 +977,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         }\n \n         let mut projection_bounds = Vec::new();\n-        let dummy_self = tcx.mk_ty(TRAIT_OBJECT_DUMMY_SELF);\n+        let dummy_self = self.tcx().types.trait_object_dummy_self;\n         let (principal, potential_assoc_types) = self.instantiate_poly_trait_ref(\n             &trait_bounds[0],\n             dummy_self,\n@@ -1030,7 +1027,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 }\n                 ty::Predicate::Projection(pred) => {\n                     // A `Self` within the original bound will be substituted with a\n-                    // `TRAIT_OBJECT_DUMMY_SELF`, so check for that.\n+                    // `trait_object_dummy_self`, so check for that.\n                     let references_self =\n                         pred.skip_binder().ty.walk().any(|t| t == dummy_self);\n \n@@ -1130,7 +1127,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             err.emit();\n         }\n \n-        // Erase the `dummy_self` (`TRAIT_OBJECT_DUMMY_SELF`) used above.\n+        // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n         let existential_principal = principal.map_bound(|trait_ref| {\n             self.trait_ref_to_existential(trait_ref)\n         });"}, {"sha": "d108e7c3107afdde3fa02294f7979fa5e63d21b6", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -3,7 +3,7 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n \n use crate::hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n-use rustc::ty::{self, Lift, Ty, TyCtxt, TyKind, GenericParamDefKind, TypeFoldable, ToPredicate};\n+use rustc::ty::{self, Lift, Ty, TyCtxt, GenericParamDefKind, TypeFoldable, ToPredicate};\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::ConstValue;\n@@ -354,7 +354,7 @@ fn check_item_type<'a, 'tcx>(\n \n         let mut forbid_unsized = true;\n         if allow_foreign_ty {\n-            if let TyKind::Foreign(_) = fcx.tcx.struct_tail(item_ty).sty {\n+            if let ty::Foreign(_) = fcx.tcx.struct_tail(item_ty).sty {\n                 forbid_unsized = false;\n             }\n         }"}, {"sha": "4a7b1e67366e8359a389e7fa83a1504bb2a24776", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -71,6 +71,7 @@ This API is completely unstable and subject to change.\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n #![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;"}, {"sha": "6cb937d9216ac857b3773c2a27ea1ea9457dea1d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -1,4 +1,5 @@\n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]"}, {"sha": "9905b981395c0d886c7a50691dbaf89a60a670e6", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -8,6 +8,7 @@\n        test(attr(deny(warnings))))]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]"}, {"sha": "ee0b86963f31dcdc9f7da4b3a298b0b82ed6f8e1", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -3,6 +3,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(in_band_lifetimes)]\n #![feature(proc_macro_diagnostic)]"}, {"sha": "db1543ff13f7e3a678bd5564f245815677d8e987", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -7,6 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "3264099c876d0bbf178be2de6a1764078e1fa9ea", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_data_structures;\n+\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use std::collections::{HashMap, HashSet};\n+\n+#[deny(default_hash_types)]\n+fn main() {\n+    let _map: HashMap<String, String> = HashMap::default();\n+    //~^ ERROR Prefer FxHashMap over HashMap, it has better performance\n+    //~^^ ERROR Prefer FxHashMap over HashMap, it has better performance\n+    let _set: HashSet<String> = HashSet::default();\n+    //~^ ERROR Prefer FxHashSet over HashSet, it has better performance\n+    //~^^ ERROR Prefer FxHashSet over HashSet, it has better performance\n+\n+    // test that the lint doesn't also match the Fx variants themselves\n+    let _fx_map: FxHashMap<String, String> = FxHashMap::default();\n+    let _fx_set: FxHashSet<String> = FxHashSet::default();\n+}"}, {"sha": "64f322cb0c165b13ddfe34d7babb3019b3e636f0", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -0,0 +1,39 @@\n+error: Prefer FxHashMap over HashMap, it has better performance\n+  --> $DIR/default_hash_types.rs:12:15\n+   |\n+LL |     let _map: HashMap<String, String> = HashMap::default();\n+   |               ^^^^^^^ help: use: `FxHashMap`\n+   |\n+note: lint level defined here\n+  --> $DIR/default_hash_types.rs:10:8\n+   |\n+LL | #[deny(default_hash_types)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n+\n+error: Prefer FxHashMap over HashMap, it has better performance\n+  --> $DIR/default_hash_types.rs:12:41\n+   |\n+LL |     let _map: HashMap<String, String> = HashMap::default();\n+   |                                         ^^^^^^^ help: use: `FxHashMap`\n+   |\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n+\n+error: Prefer FxHashSet over HashSet, it has better performance\n+  --> $DIR/default_hash_types.rs:15:15\n+   |\n+LL |     let _set: HashSet<String> = HashSet::default();\n+   |               ^^^^^^^ help: use: `FxHashSet`\n+   |\n+   = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n+\n+error: Prefer FxHashSet over HashSet, it has better performance\n+  --> $DIR/default_hash_types.rs:15:33\n+   |\n+LL |     let _set: HashSet<String> = HashSet::default();\n+   |                                 ^^^^^^^ help: use: `FxHashSet`\n+   |\n+   = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dba0db69b7f39543ca46f2216d97dc5022d7b8a3", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -0,0 +1,49 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc;\n+\n+use rustc::ty::{self, Ty, TyKind};\n+\n+#[deny(usage_of_ty_tykind)]\n+fn main() {\n+    let sty = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n+\n+    match sty {\n+        TyKind::Bool => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Char => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Int(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Uint(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Float(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Adt(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Foreign(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Str => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Array(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Slice(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::RawPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Ref(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::FnDef(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::FnPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Dynamic(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Closure(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Generator(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::GeneratorWitness(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Never => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Tuple(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Projection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::UnnormalizedProjection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Opaque(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Param(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Placeholder(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Infer(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Error => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+    }\n+\n+    if let ty::Int(int_ty) = sty {}\n+\n+    if let TyKind::Int(int_ty) = sty {} //~ ERROR usage of `ty::TyKind::<kind>`\n+\n+    fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {} //~ ERROR usage of `ty::TyKind`\n+}"}, {"sha": "4e94af12453cdaf35716d5d2812056d4036d032a", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcccab56bab29439fd154fd8114a3679a1ed5b3d/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=dcccab56bab29439fd154fd8114a3679a1ed5b3d", "patch": "@@ -0,0 +1,196 @@\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:11:15\n+   |\n+LL |     let sty = TyKind::Bool;\n+   |               ^^^^^^ help: try using ty::<kind> directly: `ty`\n+   |\n+note: lint level defined here\n+  --> $DIR/ty_tykind_usage.rs:9:8\n+   |\n+LL | #[deny(usage_of_ty_tykind)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:14:9\n+   |\n+LL |         TyKind::Bool => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:15:9\n+   |\n+LL |         TyKind::Char => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:16:9\n+   |\n+LL |         TyKind::Int(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:17:9\n+   |\n+LL |         TyKind::Uint(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:18:9\n+   |\n+LL |         TyKind::Float(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:19:9\n+   |\n+LL |         TyKind::Adt(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:20:9\n+   |\n+LL |         TyKind::Foreign(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:21:9\n+   |\n+LL |         TyKind::Str => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:22:9\n+   |\n+LL |         TyKind::Array(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:23:9\n+   |\n+LL |         TyKind::Slice(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:24:9\n+   |\n+LL |         TyKind::RawPtr(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:25:9\n+   |\n+LL |         TyKind::Ref(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:26:9\n+   |\n+LL |         TyKind::FnDef(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:27:9\n+   |\n+LL |         TyKind::FnPtr(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:28:9\n+   |\n+LL |         TyKind::Dynamic(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:29:9\n+   |\n+LL |         TyKind::Closure(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:30:9\n+   |\n+LL |         TyKind::Generator(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:31:9\n+   |\n+LL |         TyKind::GeneratorWitness(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:32:9\n+   |\n+LL |         TyKind::Never => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:33:9\n+   |\n+LL |         TyKind::Tuple(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:34:9\n+   |\n+LL |         TyKind::Projection(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:35:9\n+   |\n+LL |         TyKind::UnnormalizedProjection(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:36:9\n+   |\n+LL |         TyKind::Opaque(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:37:9\n+   |\n+LL |         TyKind::Param(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:38:9\n+   |\n+LL |         TyKind::Bound(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:39:9\n+   |\n+LL |         TyKind::Placeholder(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:40:9\n+   |\n+LL |         TyKind::Infer(..) => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:41:9\n+   |\n+LL |         TyKind::Error => (),\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:46:12\n+   |\n+LL |     if let TyKind::Int(int_ty) = sty {}\n+   |            ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind`\n+  --> $DIR/ty_tykind_usage.rs:48:24\n+   |\n+LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {}\n+   |                        ^^^^^^^^^^\n+   |\n+   = help: try using `ty::Ty` instead\n+\n+error: aborting due to 31 previous errors\n+"}]}