{"sha": "29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YmM4YTU3YjA5ZjMyNTlhZTgzYjg0NGM2YzI5ZTAxZjFiYTAwYzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T10:16:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T10:16:31Z"}, "message": "add test for compile_fail; de-duplicate sysroot forwarding", "tree": {"sha": "2cf3692479700ea1be6e170abdc98dacd9b5da8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf3692479700ea1be6e170abdc98dacd9b5da8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "html_url": "https://github.com/rust-lang/rust/commit/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65597951b7e51473dc27cdbc5699f8d165197d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/65597951b7e51473dc27cdbc5699f8d165197d01", "html_url": "https://github.com/rust-lang/rust/commit/65597951b7e51473dc27cdbc5699f8d165197d01"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "1127cef593cc7f7c40595610f20b476d2d9e153c", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "patch": "@@ -163,6 +163,13 @@ fn forward_patched_extern_arg(args: &mut impl Iterator<Item = String>, cmd: &mut\n     }\n }\n \n+fn forward_miri_sysroot(cmd: &mut Command) {\n+    let sysroot =\n+        env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n+    cmd.arg(\"--sysroot\");\n+    cmd.arg(sysroot);\n+}\n+\n /// Returns the path to the `miri` binary\n fn find_miri() -> PathBuf {\n     if let Some(path) = env::var_os(\"MIRI\") {\n@@ -679,13 +686,6 @@ fn phase_cargo_rustc(mut args: env::Args) {\n                 return;\n             };\n \n-            // use our own sysroot\n-            if !has_arg_flag(\"--sysroot\") {\n-                let sysroot = env::var_os(\"MIRI_SYSROOT\")\n-                    .expect(\"the wrapper should have set MIRI_SYSROOT\");\n-                cmd.arg(\"--sysroot\").arg(sysroot);\n-            }\n-\n             // ensure --emit argument for a check-only build is present\n             if let Some(i) = env.args.iter().position(|arg| arg.starts_with(\"--emit=\")) {\n                 // We need to make sure we're not producing a binary that overwrites the JSON file.\n@@ -750,10 +750,7 @@ fn phase_cargo_rustc(mut args: env::Args) {\n         }\n \n         // Use our custom sysroot.\n-        let sysroot =\n-            env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n-        cmd.arg(\"--sysroot\");\n-        cmd.arg(sysroot);\n+        forward_miri_sysroot(&mut cmd);\n     } else {\n         // For host crates or when we are printing, just forward everything.\n         cmd.args(args);\n@@ -842,11 +839,8 @@ fn phase_cargo_runner(binary: &Path, binary_args: env::Args) {\n         }\n     }\n     if env::var_os(\"MIRI_CALLED_FROM_RUSTDOC\").is_none() {\n-        // Set sysroot.\n-        let sysroot =\n-            env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n-        cmd.arg(\"--sysroot\");\n-        cmd.arg(sysroot);\n+        // Set sysroot (if we are inside rustdoc, we already did that in `phase_cargo_rustdoc`).\n+        forward_miri_sysroot(&mut cmd);\n     }\n     // Respect `MIRIFLAGS`.\n     if let Ok(a) = env::var(\"MIRIFLAGS\") {\n@@ -930,12 +924,10 @@ fn phase_cargo_rustdoc(fst_arg: &str, mut args: env::Args) {\n     // which are disabled by default. We first need to enable them explicitly:\n     cmd.arg(\"-Z\").arg(\"unstable-options\");\n \n-    // Use our custom sysroot.\n-    let sysroot =\n-        env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n-    cmd.arg(\"--sysroot\");\n-    cmd.arg(sysroot);\n+    // rustdoc needs to know the right sysroot.\n+    forward_miri_sysroot(&mut cmd);\n \n+    // Make rustdoc call us back.\n     let cargo_miri_path = std::env::current_exe().expect(\"current executable path invalid\");\n     cmd.arg(\"--test-builder\").arg(&cargo_miri_path); // invoked by forwarding most arguments\n     cmd.arg(\"--runtool\").arg(&cargo_miri_path); // invoked with just a single path argument"}, {"sha": "45973522f72f278dacfd2b34c06cb31b22a4f0e6", "filename": "test-cargo-miri/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6/test-cargo-miri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6/test-cargo-miri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Flib.rs?ref=29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "patch": "@@ -2,6 +2,9 @@\n /// ```rust\n /// assert!(cargo_miri_test::make_true());\n /// ```\n+/// ```rust,compile_fail\n+/// assert!(cargo_miri_test::make_true() == 5);\n+/// ```\n pub fn make_true() -> bool {\n     issue_1567::use_the_dependency();\n     issue_1705::use_the_dependency();"}, {"sha": "893350ae6e62831487a30ca80243953cd3dd6e2f", "filename": "test-cargo-miri/test.default.stdout.ref", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6/test-cargo-miri%2Ftest.default.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6/test-cargo-miri%2Ftest.default.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.default.stdout.ref?ref=29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "patch": "@@ -9,8 +9,9 @@ running 7 tests\n test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n \n \n-running 1 test\n+running 2 tests\n+test src/lib.rs - make_true (line 5) ... ok\n test src/lib.rs - make_true (line 2) ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}]}