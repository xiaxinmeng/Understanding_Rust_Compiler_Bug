{"sha": "c2d141df59703393c0c683abc259f9a8c3be041a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDE0MWRmNTk3MDMzOTNjMGM2ODNhYmMyNTlmOWE4YzNiZTA0MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T17:18:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T17:18:36Z"}, "message": "Auto merge of #68494 - matthewjasper:internal-static-ptrs, r=nikomatsakis\n\nMake pointers to statics internal\n\nCloses #67611\n\nr? @nikomatsakis", "tree": {"sha": "58eb03999b76f26a258bebc18655d3e2d814934d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58eb03999b76f26a258bebc18655d3e2d814934d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d141df59703393c0c683abc259f9a8c3be041a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d141df59703393c0c683abc259f9a8c3be041a", "html_url": "https://github.com/rust-lang/rust/commit/c2d141df59703393c0c683abc259f9a8c3be041a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d141df59703393c0c683abc259f9a8c3be041a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73f76b74efcaf21bd5424d87c66cd6ed7fe5c7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f76b74efcaf21bd5424d87c66cd6ed7fe5c7de", "html_url": "https://github.com/rust-lang/rust/commit/73f76b74efcaf21bd5424d87c66cd6ed7fe5c7de"}, {"sha": "f30a8186f7469d464e46e3451e2b2e41609225dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30a8186f7469d464e46e3451e2b2e41609225dd", "html_url": "https://github.com/rust-lang/rust/commit/f30a8186f7469d464e46e3451e2b2e41609225dd"}], "stats": {"total": 122, "additions": 89, "deletions": 33}, "files": [{"sha": "59d370abc71c5fb117beae7808844cafcba45554", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c2d141df59703393c0c683abc259f9a8c3be041a", "patch": "@@ -233,28 +233,30 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if let (local, []) = (&place.local, proj_base) {\n                 let decl = &self.body.local_decls[*local];\n                 if decl.internal {\n-                    // Internal locals are used in the `move_val_init` desugaring.\n-                    // We want to check unsafety against the source info of the\n-                    // desugaring, rather than the source info of the RHS.\n-                    self.source_info = self.body.local_decls[*local].source_info;\n-                } else if let LocalInfo::StaticRef { def_id, .. } = decl.local_info {\n-                    if self.tcx.is_mutable_static(def_id) {\n-                        self.require_unsafe(\n-                            \"use of mutable static\",\n-                            \"mutable statics can be mutated by multiple threads: aliasing \\\n-                        violations or data races will cause undefined behavior\",\n-                            UnsafetyViolationKind::General,\n-                        );\n-                        return;\n-                    } else if self.tcx.is_foreign_item(def_id) {\n-                        self.require_unsafe(\n-                            \"use of extern static\",\n-                            \"extern statics are not controlled by the Rust type system: \\\n-                        invalid data, aliasing violations or data races will cause \\\n-                        undefined behavior\",\n-                            UnsafetyViolationKind::General,\n-                        );\n-                        return;\n+                    if let LocalInfo::StaticRef { def_id, .. } = decl.local_info {\n+                        if self.tcx.is_mutable_static(def_id) {\n+                            self.require_unsafe(\n+                                \"use of mutable static\",\n+                                \"mutable statics can be mutated by multiple threads: aliasing \\\n+                            violations or data races will cause undefined behavior\",\n+                                UnsafetyViolationKind::General,\n+                            );\n+                            return;\n+                        } else if self.tcx.is_foreign_item(def_id) {\n+                            self.require_unsafe(\n+                                \"use of extern static\",\n+                                \"extern statics are not controlled by the Rust type system: \\\n+                            invalid data, aliasing violations or data races will cause \\\n+                            undefined behavior\",\n+                                UnsafetyViolationKind::General,\n+                            );\n+                            return;\n+                        }\n+                    } else {\n+                        // Internal locals are used in the `move_val_init` desugaring.\n+                        // We want to check unsafety against the source info of the\n+                        // desugaring, rather than the source info of the RHS.\n+                        self.source_info = self.body.local_decls[*local].source_info;\n                     }\n                 }\n             }"}, {"sha": "34dd10cbc0fc87fd9273bf6cb77c15152a318948", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=c2d141df59703393c0c683abc259f9a8c3be041a", "patch": "@@ -61,6 +61,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             if let ExprKind::StaticRef { def_id, .. } = expr.kind {\n                 let is_thread_local = this.hir.tcx().has_attr(def_id, sym::thread_local);\n+                local_decl.internal = true;\n                 local_decl.local_info = LocalInfo::StaticRef { def_id, is_thread_local };\n             }\n             this.local_decls.push(local_decl)"}, {"sha": "75cc2c132f8a81215317def055f10185a1a8069d", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=c2d141df59703393c0c683abc259f9a8c3be041a", "patch": "@@ -222,8 +222,6 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n-\n         match &expr.kind {\n             ExprKind::Call(callee, args) => match &callee.kind {\n                 ExprKind::Path(qpath) => {\n@@ -249,20 +247,13 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 }\n                 _ => intravisit::walk_expr(self, expr),\n             },\n-            ExprKind::Path(qpath) => {\n-                let res = self.fcx.tables.borrow().qpath_res(qpath, expr.hir_id);\n-                if let Res::Def(DefKind::Static, def_id) = res {\n-                    // Statics are lowered to temporary references or\n-                    // pointers in MIR, so record that type.\n-                    let ptr_ty = self.fcx.tcx.static_ptr_ty(def_id);\n-                    self.record(ptr_ty, scope, Some(expr), expr.span);\n-                }\n-            }\n             _ => intravisit::walk_expr(self, expr),\n         }\n \n         self.expr_count += 1;\n \n+        let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n+\n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n         if let Some(adjusted_ty) = self.fcx.tables.borrow().expr_ty_adjusted_opt(expr) {"}, {"sha": "dda4a151dd2d60fccf0c9f035628be0016263cbe", "filename": "src/test/ui/async-await/issues/issue-67611-static-mut-refs.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs?ref=c2d141df59703393c0c683abc259f9a8c3be041a", "patch": "@@ -0,0 +1,33 @@\n+// build-pass\n+// edition:2018\n+\n+static mut A: [i32; 5] = [1, 2, 3, 4, 5];\n+\n+fn is_send_sync<T: Send + Sync>(_: T) {}\n+\n+async fn fun() {\n+    let u = unsafe { A[async { 1 }.await] };\n+    unsafe {\n+        match A {\n+            i if async { true }.await => (),\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let index_block = async {\n+        let u = unsafe { A[async { 1 }.await] };\n+    };\n+    let match_block = async {\n+        unsafe {\n+            match A {\n+                i if async { true }.await => (),\n+                _ => (),\n+            }\n+        }\n+    };\n+    is_send_sync(index_block);\n+    is_send_sync(match_block);\n+    is_send_sync(fun());\n+}"}, {"sha": "2926bba997803a9405454378e8c7b88b987900b4", "filename": "src/test/ui/generator/static-mut-reference-across-yield.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Ftest%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d141df59703393c0c683abc259f9a8c3be041a/src%2Ftest%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs?ref=c2d141df59703393c0c683abc259f9a8c3be041a", "patch": "@@ -0,0 +1,29 @@\n+// build-pass\n+#![feature(generators)]\n+\n+static mut A: [i32; 5] = [1, 2, 3, 4, 5];\n+\n+fn is_send_sync<T: Send + Sync>(_: T) {}\n+\n+fn main() {\n+    unsafe {\n+        let gen_index = static || {\n+            let u = A[{\n+                yield;\n+                1\n+            }];\n+        };\n+        let gen_match = static || match A {\n+            i if {\n+                yield;\n+                true\n+            } =>\n+            {\n+                ()\n+            }\n+            _ => (),\n+        };\n+        is_send_sync(gen_index);\n+        is_send_sync(gen_match);\n+    }\n+}"}]}