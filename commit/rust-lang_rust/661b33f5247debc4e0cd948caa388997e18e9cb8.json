{"sha": "661b33f5247debc4e0cd948caa388997e18e9cb8", "node_id": "C_kwDOAAsO6NoAKDY2MWIzM2Y1MjQ3ZGViYzRlMGNkOTQ4Y2FhMzg4OTk3ZTE4ZTljYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T11:16:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T11:16:35Z"}, "message": "Auto merge of #109935 - michaelwoerister:fix-feed-in-eval-always, r=cjgillot\n\nincr.comp.: Make sure dependencies are recorded when feeding queries during eval-always queries.\n\nThis PR makes sure we don't drop dependency edges when feeding queries during an eval-always query.\n\nBackground: During eval-always queries, no dependencies are recorded because the system knows to unconditionally re-evaluate them regardless of any actual dependencies. This works fine for these queries themselves but leads to a problem when feeding other queries: When queries are fed, we set up their dependency edges by copying the current set of dependencies of the feeding query. But because this set is empty for eval-always queries, we record no edges at all -- which has the effect that the fed query instances always look \"green\" to the system, although they should always be \"red\".\n\nThe fix is to explicitly add a dependency on the artificial \"always red\" dep-node when feeding during eval-always queries.\n\nFixes https://github.com/rust-lang/rust/issues/108481\nMaybe also fixes issue https://github.com/rust-lang/rust/issues/88488.\n\ncc `@jyn514`\n\nr? `@cjgillot` or `@oli-obk`", "tree": {"sha": "c8e4fbab9cc17893447d3cc242effcbd125226b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e4fbab9cc17893447d3cc242effcbd125226b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/661b33f5247debc4e0cd948caa388997e18e9cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/661b33f5247debc4e0cd948caa388997e18e9cb8", "html_url": "https://github.com/rust-lang/rust/commit/661b33f5247debc4e0cd948caa388997e18e9cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/661b33f5247debc4e0cd948caa388997e18e9cb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be9b5e09ad834e2ba9f2571ca17059e18f89b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be9b5e09ad834e2ba9f2571ca17059e18f89b71", "html_url": "https://github.com/rust-lang/rust/commit/9be9b5e09ad834e2ba9f2571ca17059e18f89b71"}, {"sha": "5f52a96b85cf574f083b796d4d61b6d19461694b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f52a96b85cf574f083b796d4d61b6d19461694b", "html_url": "https://github.com/rust-lang/rust/commit/5f52a96b85cf574f083b796d4d61b6d19461694b"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "3942a73befdcedad8e983e0d7f24619bfe63442e", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/661b33f5247debc4e0cd948caa388997e18e9cb8/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661b33f5247debc4e0cd948caa388997e18e9cb8/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=661b33f5247debc4e0cd948caa388997e18e9cb8", "patch": "@@ -8,8 +8,6 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n-    tcx.dep_graph.assert_ignored();\n-\n     if tcx.sess.opts.unstable_opts.hir_stats {\n         crate::hir_stats::print_hir_stats(tcx);\n     }"}, {"sha": "a9a2e6dd04c2d4ce27fef8ec2be3e9063bc8d008", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/661b33f5247debc4e0cd948caa388997e18e9cb8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661b33f5247debc4e0cd948caa388997e18e9cb8/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=661b33f5247debc4e0cd948caa388997e18e9cb8", "patch": "@@ -143,16 +143,29 @@ impl<K: DepKind> DepGraph<K> {\n         assert_eq!(_green_node_index, DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE);\n \n         // Instantiate a dependy-less red node only once for anonymous queries.\n-        let (_red_node_index, _prev_and_index) = current.intern_node(\n+        let (red_node_index, red_node_prev_index_and_color) = current.intern_node(\n             profiler,\n             &prev_graph,\n             DepNode { kind: DepKind::RED, hash: Fingerprint::ZERO.into() },\n             smallvec![],\n             None,\n             false,\n         );\n-        assert_eq!(_red_node_index, DepNodeIndex::FOREVER_RED_NODE);\n-        assert!(matches!(_prev_and_index, None | Some((_, DepNodeColor::Red))));\n+        assert_eq!(red_node_index, DepNodeIndex::FOREVER_RED_NODE);\n+        match red_node_prev_index_and_color {\n+            None => {\n+                // This is expected when we have no previous compilation session.\n+                assert!(prev_graph_node_count == 0);\n+            }\n+            Some((prev_red_node_index, DepNodeColor::Red)) => {\n+                assert_eq!(prev_red_node_index.as_usize(), red_node_index.as_usize());\n+                colors.insert(prev_red_node_index, DepNodeColor::Red);\n+            }\n+            Some((_, DepNodeColor::Green(_))) => {\n+                // There must be a logic error somewhere if we hit this branch.\n+                panic!(\"DepNodeIndex::FOREVER_RED_NODE evaluated to DepNodeColor::Green\")\n+            }\n+        }\n \n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n@@ -353,10 +366,8 @@ impl<K: DepKind> DepGraphData<K> {\n             }))\n         };\n \n-        let task_deps_ref = match &task_deps {\n-            Some(deps) => TaskDepsRef::Allow(deps),\n-            None => TaskDepsRef::Ignore,\n-        };\n+        let task_deps_ref =\n+            task_deps.as_ref().map(TaskDepsRef::Allow).unwrap_or(TaskDepsRef::EvalAlways);\n \n         let result = K::with_deps(task_deps_ref, || task(cx, arg));\n         let edges = task_deps.map_or_else(|| smallvec![], |lock| lock.into_inner().reads);\n@@ -461,6 +472,11 @@ impl<K: DepKind> DepGraph<K> {\n             K::read_deps(|task_deps| {\n                 let mut task_deps = match task_deps {\n                     TaskDepsRef::Allow(deps) => deps.lock(),\n+                    TaskDepsRef::EvalAlways => {\n+                        // We don't need to record dependencies of eval_always\n+                        // queries. They are re-evaluated unconditionally anyway.\n+                        return;\n+                    }\n                     TaskDepsRef::Ignore => return,\n                     TaskDepsRef::Forbid => {\n                         panic!(\"Illegal read of: {dep_node_index:?}\")\n@@ -563,7 +579,10 @@ impl<K: DepKind> DepGraph<K> {\n             let mut edges = SmallVec::new();\n             K::read_deps(|task_deps| match task_deps {\n                 TaskDepsRef::Allow(deps) => edges.extend(deps.lock().reads.iter().copied()),\n-                TaskDepsRef::Ignore => {} // During HIR lowering, we have no dependencies.\n+                TaskDepsRef::EvalAlways => {\n+                    edges.push(DepNodeIndex::FOREVER_RED_NODE);\n+                }\n+                TaskDepsRef::Ignore => {}\n                 TaskDepsRef::Forbid => {\n                     panic!(\"Cannot summarize when dependencies are not recorded.\")\n                 }\n@@ -1356,10 +1375,13 @@ pub enum TaskDepsRef<'a, K: DepKind> {\n     /// `TaskDeps`. This is used when executing a 'normal' query\n     /// (no `eval_always` modifier)\n     Allow(&'a Lock<TaskDeps<K>>),\n-    /// New dependencies are ignored. This is used when\n-    /// executing an `eval_always` query, since there's no\n+    /// This is used when executing an `eval_always` query. We don't\n     /// need to track dependencies for a query that's always\n-    /// re-executed. This is also used for `dep_graph.with_ignore`\n+    /// re-executed -- but we need to know that this is an `eval_always`\n+    /// query in order to emit dependencies to `DepNodeIndex::FOREVER_RED_NODE`\n+    /// when directly feeding other queries.\n+    EvalAlways,\n+    /// New dependencies are ignored. This is also used for `dep_graph.with_ignore`.\n     Ignore,\n     /// Any attempt to add new dependencies will cause a panic.\n     /// This is used when decoding a query result from disk,"}, {"sha": "8f346a7207e7e97278be245075fabd2f929551c2", "filename": "tests/incremental/issue-108481-feed-eval-always.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/661b33f5247debc4e0cd948caa388997e18e9cb8/tests%2Fincremental%2Fissue-108481-feed-eval-always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661b33f5247debc4e0cd948caa388997e18e9cb8/tests%2Fincremental%2Fissue-108481-feed-eval-always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-108481-feed-eval-always.rs?ref=661b33f5247debc4e0cd948caa388997e18e9cb8", "patch": "@@ -0,0 +1,16 @@\n+// revisions: cpass1 cpass2\n+\n+#![crate_type = \"rlib\"]\n+\n+use std::fmt::Debug;\n+\n+// MCVE kindly provided by Nilstrieb at\n+// https://github.com/rust-lang/rust/issues/108481#issuecomment-1493080185\n+\n+#[derive(Debug)]\n+pub struct ConstGeneric<const CHUNK_SIZE: usize> {\n+    _p: [(); CHUNK_SIZE],\n+}\n+\n+#[cfg(cpass1)]\n+impl<const CHUNK_SIZE: usize> ConstGeneric<CHUNK_SIZE> {}"}]}