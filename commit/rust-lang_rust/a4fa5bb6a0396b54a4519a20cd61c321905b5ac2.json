{"sha": "a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZmE1YmI2YTAzOTZiNTRhNDUxOWEyMGNkNjFjMzIxOTA1YjVhYzI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-09T11:02:44Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-09T11:04:15Z"}, "message": "Rename `Unsized` to `Meta`", "tree": {"sha": "2b78d7da3b00011b0d821790b4da1d81756c38ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b78d7da3b00011b0d821790b4da1d81756c38ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "html_url": "https://github.com/rust-lang/rust/commit/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e632940a41fe6d65bd677da85d87046dc5da5022", "url": "https://api.github.com/repos/rust-lang/rust/commits/e632940a41fe6d65bd677da85d87046dc5da5022", "html_url": "https://github.com/rust-lang/rust/commit/e632940a41fe6d65bd677da85d87046dc5da5022"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "864f4f9487c88597a1e497af8de6c7eac0c5e1e1", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "patch": "@@ -465,13 +465,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Ok(Some((size, align)))\n             }\n             ty::Dynamic(..) => {\n-                let vtable = metadata.unwrap_unsized();\n+                let vtable = metadata.unwrap_meta();\n                 // Read size and align from vtable (already checks size).\n                 Ok(Some(self.read_size_and_align_from_vtable(vtable)?))\n             }\n \n             ty::Slice(_) | ty::Str => {\n-                let len = metadata.unwrap_unsized().to_machine_usize(self)?;\n+                let len = metadata.unwrap_meta().to_machine_usize(self)?;\n                 let elem = layout.field(self, 0)?;\n \n                 // Make sure the slice is not too big.\n@@ -817,7 +817,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                                 \" by align({}){} ref:\",\n                                 mplace.align.bytes(),\n                                 match mplace.meta {\n-                                    MemPlaceMeta::Unsized(meta) => format!(\" meta({:?})\", meta),\n+                                    MemPlaceMeta::Meta(meta) => format!(\" meta({:?})\", meta),\n                                     MemPlaceMeta::Poison | MemPlaceMeta::None => String::new(),\n                                 }\n                             )"}, {"sha": "9b3a2fa36f7947c7ecdd5252e78a61d7ab385de5", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "patch": "@@ -193,7 +193,7 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx\n             {\n                 // Validation has already errored on an invalid vtable pointer so we can safely not\n                 // do anything if this is not a real pointer.\n-                if let Scalar::Ptr(vtable) = mplace.meta.unwrap_unsized() {\n+                if let Scalar::Ptr(vtable) = mplace.meta.unwrap_meta() {\n                     // Explicitly choose `Immutable` here, since vtables are immutable, even\n                     // if the reference of the fat pointer is mutable.\n                     self.intern_shallow(vtable.alloc_id, Mutability::Not, None)?;\n@@ -227,7 +227,7 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx\n                         ty::Array(_, n)\n                             if n.eval_usize(self.ecx.tcx.tcx, self.ecx.param_env) == 0 => {}\n                         ty::Slice(_)\n-                            if mplace.meta.unwrap_unsized().to_machine_usize(self.ecx)? == 0 => {}\n+                            if mplace.meta.unwrap_meta().to_machine_usize(self.ecx)? == 0 => {}\n                         _ => bug!(\"const qualif failed to prevent mutable references\"),\n                     },\n                 }"}, {"sha": "890627a54543a5bb74b73d0542d0c1e1062ae495", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "patch": "@@ -24,7 +24,7 @@ use super::{\n /// Information required for the sound usage of a `MemPlace`.\n pub enum MemPlaceMeta<Tag = (), Id = AllocId> {\n     /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).\n-    Unsized(Scalar<Tag, Id>),\n+    Meta(Scalar<Tag, Id>),\n     /// `Sized` types or unsized `extern type`\n     None,\n     /// The address of this place may not be taken. This protects the `MemPlace` from coming from\n@@ -35,17 +35,17 @@ pub enum MemPlaceMeta<Tag = (), Id = AllocId> {\n }\n \n impl<Tag, Id> MemPlaceMeta<Tag, Id> {\n-    pub fn unwrap_unsized(self) -> Scalar<Tag, Id> {\n+    pub fn unwrap_meta(self) -> Scalar<Tag, Id> {\n         match self {\n-            Self::Unsized(s) => s,\n+            Self::Meta(s) => s,\n             Self::None | Self::Poison => {\n                 bug!(\"expected wide pointer extra data (e.g. slice length or trait object vtable)\")\n             }\n         }\n     }\n-    fn is_unsized(self) -> bool {\n+    fn has_meta(self) -> bool {\n         match self {\n-            Self::Unsized(_) => true,\n+            Self::Meta(_) => true,\n             Self::None | Self::Poison => false,\n         }\n     }\n@@ -54,7 +54,7 @@ impl<Tag, Id> MemPlaceMeta<Tag, Id> {\n impl<Tag> MemPlaceMeta<Tag> {\n     pub fn erase_tag(self) -> MemPlaceMeta<()> {\n         match self {\n-            Self::Unsized(s) => MemPlaceMeta::Unsized(s.erase_tag()),\n+            Self::Meta(s) => MemPlaceMeta::Meta(s.erase_tag()),\n             Self::None => MemPlaceMeta::None,\n             Self::Poison => MemPlaceMeta::Poison,\n         }\n@@ -154,7 +154,7 @@ impl<Tag> MemPlace<Tag> {\n     pub fn to_ref(self) -> Immediate<Tag> {\n         match self.meta {\n             MemPlaceMeta::None => Immediate::Scalar(self.ptr.into()),\n-            MemPlaceMeta::Unsized(meta) => Immediate::ScalarPair(self.ptr.into(), meta.into()),\n+            MemPlaceMeta::Meta(meta) => Immediate::ScalarPair(self.ptr.into(), meta.into()),\n             MemPlaceMeta::Poison => bug!(\n                 \"MPlaceTy::dangling may never be used to produce a \\\n                 place that will have the address of its pointee taken\"\n@@ -214,7 +214,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n             // We need to consult `meta` metadata\n             match self.layout.ty.kind {\n                 ty::Slice(..) | ty::Str => {\n-                    return self.mplace.meta.unwrap_unsized().to_machine_usize(cx);\n+                    return self.mplace.meta.unwrap_meta().to_machine_usize(cx);\n                 }\n                 _ => bug!(\"len not supported on unsized type {:?}\", self.layout.ty),\n             }\n@@ -231,7 +231,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n     #[inline]\n     pub(super) fn vtable(self) -> Scalar<Tag> {\n         match self.layout.ty.kind {\n-            ty::Dynamic(..) => self.mplace.meta.unwrap_unsized(),\n+            ty::Dynamic(..) => self.mplace.meta.unwrap_meta(),\n             _ => bug!(\"vtable not supported on type {:?}\", self.layout.ty),\n         }\n     }\n@@ -312,7 +312,7 @@ where\n         let (ptr, meta) = match *val {\n             Immediate::Scalar(ptr) => (ptr.not_undef()?, MemPlaceMeta::None),\n             Immediate::ScalarPair(ptr, meta) => {\n-                (ptr.not_undef()?, MemPlaceMeta::Unsized(meta.not_undef()?))\n+                (ptr.not_undef()?, MemPlaceMeta::Meta(meta.not_undef()?))\n             }\n         };\n \n@@ -354,7 +354,7 @@ where\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         let size = size.unwrap_or_else(|| {\n             assert!(!place.layout.is_unsized());\n-            assert!(!place.meta.is_unsized());\n+            assert!(!place.meta.has_meta());\n             place.layout.size\n         });\n         self.memory.check_ptr_access(place.ptr, size, place.align)\n@@ -505,7 +505,7 @@ where\n             ty::Array(inner, _) => (MemPlaceMeta::None, self.tcx.mk_array(inner, inner_len)),\n             ty::Slice(..) => {\n                 let len = Scalar::from_uint(inner_len, self.pointer_size());\n-                (MemPlaceMeta::Unsized(len), base.layout.ty)\n+                (MemPlaceMeta::Meta(len), base.layout.ty)\n             }\n             _ => bug!(\"cannot subslice non-array type: `{:?}`\", base.layout.ty),\n         };\n@@ -519,7 +519,7 @@ where\n         variant: VariantIdx,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         // Downcasts only change the layout\n-        assert!(!base.meta.is_unsized());\n+        assert!(!base.meta.has_meta());\n         Ok(MPlaceTy { layout: base.layout.for_variant(self, variant), ..base })\n     }\n \n@@ -1081,7 +1081,7 @@ where\n         let mplace = MemPlace {\n             ptr: ptr.into(),\n             align: Align::from_bytes(1).unwrap(),\n-            meta: MemPlaceMeta::Unsized(meta),\n+            meta: MemPlaceMeta::Meta(meta),\n         };\n \n         let layout = self.layout_of(self.tcx.mk_static_str()).unwrap();"}, {"sha": "a8e67c8f208a94f564877fda13a0619a37fc43a1", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "patch": "@@ -209,7 +209,7 @@ impl_snapshot_for!(\n \n impl_snapshot_for!(\n     enum MemPlaceMeta {\n-        Unsized(s),\n+        Meta(s),\n         None,\n         Poison,\n     }"}, {"sha": "12e8cb6071d92b31453da434edddfc1b29bf5d65", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa5bb6a0396b54a4519a20cd61c321905b5ac2/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=a4fa5bb6a0396b54a4519a20cd61c321905b5ac2", "patch": "@@ -252,7 +252,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         let tail = self.ecx.tcx.struct_tail_erasing_lifetimes(pointee.ty, self.ecx.param_env);\n         match tail.kind {\n             ty::Dynamic(..) => {\n-                let vtable = meta.unwrap_unsized();\n+                let vtable = meta.unwrap_meta();\n                 try_validation!(\n                     self.ecx.memory.check_ptr_access(\n                         vtable,\n@@ -276,7 +276,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             }\n             ty::Slice(..) | ty::Str => {\n                 let _len = try_validation!(\n-                    meta.unwrap_unsized().to_machine_usize(self.ecx),\n+                    meta.unwrap_meta().to_machine_usize(self.ecx),\n                     \"non-integer slice length in wide pointer\",\n                     self.path\n                 );"}]}