{"sha": "9e83b2fe556aaf779261503c0910bf378e45dce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllODNiMmZlNTU2YWFmNzc5MjYxNTAzYzA5MTBiZjM3OGU0NWRjZTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-28T16:54:03Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-30T11:15:25Z"}, "message": "Convert vec::{reverse, swap} to methods.", "tree": {"sha": "0cc4c39baa2ad4df603bb3830cbfacccd8044756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc4c39baa2ad4df603bb3830cbfacccd8044756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e83b2fe556aaf779261503c0910bf378e45dce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e83b2fe556aaf779261503c0910bf378e45dce4", "html_url": "https://github.com/rust-lang/rust/commit/9e83b2fe556aaf779261503c0910bf378e45dce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e83b2fe556aaf779261503c0910bf378e45dce4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a890c2cbf1dd92d79ade5bd8f04142ae5511943f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a890c2cbf1dd92d79ade5bd8f04142ae5511943f", "html_url": "https://github.com/rust-lang/rust/commit/a890c2cbf1dd92d79ade5bd8f04142ae5511943f"}], "stats": {"total": 170, "additions": 77, "deletions": 93}, "files": [{"sha": "3d1ca4a9818b61572568b195464f9b104cec37e9", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -107,7 +107,7 @@ impl<T:Ord> PriorityQueue<T> {\n         let mut end = q.len();\n         while end > 1 {\n             end -= 1;\n-            vec::swap(q.data, 0, end);\n+            q.data.swap(0, end);\n             q.siftdown_range(0, end)\n         }\n         q.to_vec()"}, {"sha": "f59a2414aaeb7b40b33c3545aeea42875992a3c8", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -65,17 +65,17 @@ pub fn merge_sort<T:Copy>(v: &[T], le: Le<T>) -> ~[T] {\n \n fn part<T>(arr: &mut [T], left: uint,\n            right: uint, pivot: uint, compare_func: Le<T>) -> uint {\n-    vec::swap(arr, pivot, right);\n+    arr.swap(pivot, right);\n     let mut storage_index: uint = left;\n     let mut i: uint = left;\n     while i < right {\n         if compare_func(&arr[i], &arr[right]) {\n-            vec::swap(arr, i, storage_index);\n+            arr.swap(i, storage_index);\n             storage_index += 1;\n         }\n         i += 1;\n     }\n-    vec::swap(arr, storage_index, right);\n+    arr.swap(storage_index, right);\n     return storage_index;\n }\n \n@@ -120,29 +120,29 @@ fn qsort3<T:Copy + Ord + Eq>(arr: &mut [T], left: int, right: int) {\n             j -= 1;\n         }\n         if i >= j { break; }\n-        vec::swap(arr, i as uint, j as uint);\n+        arr.swap(i as uint, j as uint);\n         if arr[i] == v {\n             p += 1;\n-            vec::swap(arr, p as uint, i as uint);\n+            arr.swap(p as uint, i as uint);\n         }\n         if v == arr[j] {\n             q -= 1;\n-            vec::swap(arr, j as uint, q as uint);\n+            arr.swap(j as uint, q as uint);\n         }\n     }\n-    vec::swap(arr, i as uint, right as uint);\n+    arr.swap(i as uint, right as uint);\n     j = i - 1;\n     i += 1;\n     let mut k: int = left;\n     while k < p {\n-        vec::swap(arr, k as uint, j as uint);\n+        arr.swap(k as uint, j as uint);\n         k += 1;\n         j -= 1;\n         if k == arr.len() as int { break; }\n     }\n     k = right - 1;\n     while k > q {\n-        vec::swap(arr, i as uint, k as uint);\n+        arr.swap(i as uint, k as uint);\n         k -= 1;\n         i += 1;\n         if k == 0 { break; }\n@@ -259,7 +259,7 @@ fn binarysort<T:Copy + Ord>(array: &mut [T], start: uint) {\n fn reverse_slice<T>(v: &mut [T], start: uint, end:uint) {\n     let mut i = start;\n     while i < end / 2 {\n-        vec::swap(v, i, end - i - 1);\n+        v.swap(i, end - i - 1);\n         i += 1;\n     }\n }\n@@ -479,7 +479,7 @@ impl<T:Copy + Ord> MergeState<T> {\n         let mut len1 = len1;\n         let mut len2 = len2;\n \n-        vec::swap(array, dest, c2);\n+        array.swap(dest, c2);\n         dest += 1; c2 += 1; len2 -= 1;\n \n         if len2 == 0 {\n@@ -501,7 +501,7 @@ impl<T:Copy + Ord> MergeState<T> {\n             loop {\n                 assert!(len1 > 1 && len2 != 0);\n                 if array[c2] < tmp[c1] {\n-                    vec::swap(array, dest, c2);\n+                    array.swap(dest, c2);\n                     dest += 1; c2 += 1; len2 -= 1;\n                     count2 += 1; count1 = 0;\n                     if len2 == 0 {\n@@ -534,7 +534,7 @@ impl<T:Copy + Ord> MergeState<T> {\n                     dest += count1; c1 += count1; len1 -= count1;\n                     if len1 <= 1 { break_outer = true; break; }\n                 }\n-                vec::swap(array, dest, c2);\n+                array.swap(dest, c2);\n                 dest += 1; c2 += 1; len2 -= 1;\n                 if len2 == 0 { break_outer = true; break; }\n \n@@ -589,7 +589,7 @@ impl<T:Copy + Ord> MergeState<T> {\n         let mut len1 = len1;\n         let mut len2 = len2;\n \n-        vec::swap(array, dest, c1);\n+        array.swap(dest, c1);\n         dest -= 1; c1 -= 1; len1 -= 1;\n \n         if len1 == 0 {\n@@ -613,7 +613,7 @@ impl<T:Copy + Ord> MergeState<T> {\n             loop {\n                 assert!(len1 != 0 && len2 > 1);\n                 if tmp[c2] < array[c1] {\n-                    vec::swap(array, dest, c1);\n+                    array.swap(dest, c1);\n                     dest -= 1; c1 -= 1; len1 -= 1;\n                     count1 += 1; count2 = 0;\n                     if len1 == 0 {\n@@ -666,7 +666,7 @@ impl<T:Copy + Ord> MergeState<T> {\n                     copy_vec(array, dest+1, tmp.slice(c2+1, c2+1+count2));\n                     if len2 <= 1 { break_outer = true; break; }\n                 }\n-                vec::swap(array, dest, c1);\n+                array.swap(dest, c1);\n                 dest -= 1; c1 -= 1; len1 -= 1;\n                 if len1 == 0 { break_outer = true; break; }\n                 min_gallop -= 1;\n@@ -1049,7 +1049,7 @@ mod big_tests {\n     fn makeRange(n: uint) -> ~[uint] {\n         let one = do vec::from_fn(n) |i| { i };\n         let mut two = copy one;\n-        vec::reverse(two);\n+        two.reverse();\n         vec::append(two, one)\n     }\n \n@@ -1073,7 +1073,7 @@ mod big_tests {\n             tim_sort(arr); // *sort\n             isSorted(arr);\n \n-            vec::reverse(arr);\n+            arr.reverse();\n             tim_sort(arr); // \\sort\n             isSorted(arr);\n \n@@ -1083,7 +1083,7 @@ mod big_tests {\n             for 3.times {\n                 let i1 = rng.gen_uint_range(0, n);\n                 let i2 = rng.gen_uint_range(0, n);\n-                vec::swap(arr, i1, i2);\n+                arr.swap(i1, i2);\n             }\n             tim_sort(arr); // 3sort\n             isSorted(arr);\n@@ -1145,7 +1145,7 @@ mod big_tests {\n             tim_sort(arr); // *sort\n             isSorted(arr);\n \n-            vec::reverse(arr);\n+            arr.reverse();\n             tim_sort(arr); // \\sort\n             isSorted(arr);\n \n@@ -1155,7 +1155,7 @@ mod big_tests {\n             for 3.times {\n                 let i1 = rng.gen_uint_range(0, n);\n                 let i2 = rng.gen_uint_range(0, n);\n-                vec::swap(arr, i1, i2);\n+                arr.swap(i1, i2);\n             }\n             tim_sort(arr); // 3sort\n             isSorted(arr);"}, {"sha": "1e1e53de9e896002176d1c0fe7cf8f76dbfa9586", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -449,7 +449,7 @@ fn run_tests(opts: &TestOpts,\n     debug!(\"using %u test tasks\", concurrency);\n \n     let mut remaining = filtered_tests;\n-    vec::reverse(remaining);\n+    remaining.reverse();\n     let mut pending = 0;\n \n     let (p, ch) = stream();"}, {"sha": "2ddeb02b56af2bc212d4baff7f642c4baecbe89f", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -18,8 +18,7 @@ use char;\n use str;\n use str::{StrSlice};\n use kinds::Copy;\n-use vec;\n-use vec::{CopyableVector, ImmutableVector};\n+use vec::{CopyableVector, ImmutableVector, MutableVector};\n use vec::OwnedVector;\n use num::{NumCast, Zero, One, cast, pow_with_uint};\n use f64;\n@@ -257,7 +256,7 @@ pub fn to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Copy+\n         _ => ()\n     }\n \n-    vec::reverse(buf);\n+    buf.reverse();\n \n     // Remember start of the fractional digits.\n     // Points one beyond end of buf if none get generated,"}, {"sha": "5f96e38a55af498f4cadf801a85f64fbd18709f0", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -590,7 +590,7 @@ impl<R: Rng> RngUtil for R {\n             // invariant: elements with index >= i have been locked in place.\n             i -= 1u;\n             // lock element i in place.\n-            vec::swap(values, i, self.gen_uint_range(0u, i + 1u));\n+            values.swap(i, self.gen_uint_range(0u, i + 1u));\n         }\n     }\n }"}, {"sha": "bb9b12a43cba44442db3baeaa0e403adbde2edd6", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -251,7 +251,7 @@ pub fn rsplit<T:Copy>(v: &[T], f: &fn(t: &T) -> bool) -> ~[~[T]] {\n         }\n     }\n     result.push(v.slice(0u, end).to_owned());\n-    reverse(result);\n+    result.reverse();\n     result\n }\n \n@@ -278,7 +278,7 @@ pub fn rsplitn<T:Copy>(v: &[T], n: uint, f: &fn(t: &T) -> bool) -> ~[~[T]] {\n         }\n     }\n     result.push(v.slice(0u, end).to_owned());\n-    reverse(result);\n+    result.reverse();\n     result\n }\n \n@@ -751,40 +751,10 @@ pub fn zip<T, U>(mut v: ~[T], mut u: ~[U]) -> ~[(T, U)] {\n         w.push((v.pop(),u.pop()));\n         i -= 1;\n     }\n-    reverse(w);\n+    w.reverse();\n     w\n }\n \n-/**\n- * Swaps two elements in a vector\n- *\n- * # Arguments\n- *\n- * * v  The input vector\n- * * a - The index of the first element\n- * * b - The index of the second element\n- */\n-#[inline]\n-pub fn swap<T>(v: &mut [T], a: uint, b: uint) {\n-    unsafe {\n-        // Can't take two mutable loans from one vector, so instead just cast\n-        // them to their raw pointers to do the swap\n-        let pa: *mut T = &mut v[a];\n-        let pb: *mut T = &mut v[b];\n-        ptr::swap_ptr(pa, pb);\n-    }\n-}\n-\n-/// Reverse the order of elements in a vector, in place\n-pub fn reverse<T>(v: &mut [T]) {\n-    let mut i: uint = 0;\n-    let ln = v.len();\n-    while i < ln / 2 {\n-        swap(v, i, ln - i - 1);\n-        i += 1;\n-    }\n-}\n-\n /// Returns a vector with the order of elements reversed\n pub fn reversed<T:Copy>(v: &[T]) -> ~[T] {\n     let mut rs: ~[T] = ~[];\n@@ -840,8 +810,8 @@ pub fn each_permutation<T:Copy>(values: &[T], fun: &fn(perm : &[T]) -> bool) ->\n         }\n         // swap indices[k] and indices[l]; sort indices[k+1..]\n         // (they're just reversed)\n-        vec::swap(indices, k, l);\n-        reverse(indices.mut_slice(k+1, length));\n+        indices.swap(k, l);\n+        indices.mut_slice(k+1, length).reverse();\n         // fixup permutation based on indices\n         for uint::range(k, length) |i| {\n             permutation[i] = copy values[indices[i]];\n@@ -1598,7 +1568,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         self.push(x);\n         let mut j = len;\n         while j > i {\n-            swap(*self, j, j - 1);\n+            self.swap(j, j - 1);\n             j -= 1;\n         }\n     }\n@@ -1611,7 +1581,7 @@ impl<T> OwnedVector<T> for ~[T] {\n \n         let mut j = i;\n         while j < len - 1 {\n-            swap(*self, j, j + 1);\n+            self.swap(j, j + 1);\n             j += 1;\n         }\n         self.pop()\n@@ -1629,7 +1599,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             fail!(\"vec::swap_remove - index %u >= length %u\", index, ln);\n         }\n         if index < ln - 1 {\n-            swap(*self, index, ln - 1);\n+            self.swap(index, ln - 1);\n         }\n         self.pop()\n     }\n@@ -1660,7 +1630,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             if !f(&self[i]) {\n                 deleted += 1;\n             } else if deleted > 0 {\n-                swap(*self, i - deleted, i);\n+                self.swap(i - deleted, i);\n             }\n         }\n \n@@ -1772,6 +1742,10 @@ pub trait MutableVector<'self, T> {\n     fn mut_iter(self) -> VecMutIterator<'self, T>;\n     fn mut_rev_iter(self) -> VecMutRevIterator<'self, T>;\n \n+    fn swap(self, a: uint, b: uint);\n+\n+    fn reverse(self);\n+\n     /**\n      * Consumes `src` and moves as many elements as it can into `self`\n      * from the range [start,end).\n@@ -1823,6 +1797,34 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         }\n     }\n \n+    /**\n+     * Swaps two elements in a vector\n+     *\n+     * # Arguments\n+     *\n+     * * a - The index of the first element\n+     * * b - The index of the second element\n+     */\n+    fn swap(self, a: uint, b: uint) {\n+        unsafe {\n+            // Can't take two mutable loans from one vector, so instead just cast\n+            // them to their raw pointers to do the swap\n+            let pa: *mut T = &mut self[a];\n+            let pb: *mut T = &mut self[b];\n+            ptr::swap_ptr(pa, pb);\n+        }\n+    }\n+\n+    /// Reverse the order of elements in a vector, in place\n+    fn reverse(self) {\n+        let mut i: uint = 0;\n+        let ln = self.len();\n+        while i < ln / 2 {\n+            self.swap(i, ln - i - 1);\n+            i += 1;\n+        }\n+    }\n+\n     #[inline]\n     fn move_from(self, mut src: ~[T], start: uint, end: uint) -> uint {\n         for self.mut_iter().zip(src.mut_slice(start, end).mut_iter()).advance |(a, b)| {\n@@ -2887,7 +2889,7 @@ mod tests {\n         let mut v: ~[int] = ~[10, 20];\n         assert_eq!(v[0], 10);\n         assert_eq!(v[1], 20);\n-        reverse(v);\n+        v.reverse();\n         assert_eq!(v[0], 20);\n         assert_eq!(v[1], 10);\n         let v2 = reversed::<int>([10, 20]);\n@@ -2900,7 +2902,7 @@ mod tests {\n         let v4 = reversed::<int>([]);\n         assert_eq!(v4, ~[]);\n         let mut v3: ~[int] = ~[];\n-        reverse::<int>(v3);\n+        v3.reverse();\n     }\n \n     #[test]\n@@ -3549,7 +3551,7 @@ mod tests {\n     #[test]\n     fn test_reverse_part() {\n         let mut values = [1,2,3,4,5];\n-        reverse(values.mut_slice(1, 4));\n+        values.mut_slice(1, 4).reverse();\n         assert_eq!(values, [1,4,3,2,5]);\n     }\n "}, {"sha": "fec0f89adbaf8a89f8bd08165619a3a2d918d7f8", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -1,8 +1,6 @@\n // Tests that references to move-by-default values trigger moves when\n // they occur as part of various kinds of expressions.\n \n-use std::vec;\n-\n struct Foo<A> { f: A }\n fn guard(_s: ~str) -> bool {fail!()}\n fn touch<A>(_a: &A) {}\n@@ -92,7 +90,7 @@ fn f110() {\n \n fn f120() {\n     let mut x = ~[~\"hi\", ~\"ho\"];\n-    vec::swap(x, 0, 1);\n+    x.swap(0, 1);\n     touch(&x[0]);\n     touch(&x[1]);\n }"}, {"sha": "356c1596186966693da74c9bb66199d6c189fc07", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -1,13 +1,11 @@\n-use std::vec;\n-\n-trait Reverser {\n-    fn reverse(&self);\n+fn reverse(v: &mut [uint]) {\n+    v.reverse();\n }\n \n fn bar(v: &mut [uint]) {\n-    vec::reverse(v);\n-    vec::reverse(v);\n-    vec::reverse(v);\n+    reverse(v);\n+    reverse(v);\n+    reverse(v);\n }\n \n pub fn main() {"}, {"sha": "556d70f3c88a28cae38d89e20956e3d1e3e6e8cf", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -1,15 +1,3 @@\n-use std::vec;\n-\n-trait Reverser {\n-    fn reverse(self);\n-}\n-\n-impl<'self> Reverser for &'self mut [uint] {\n-    fn reverse(self) {\n-        vec::reverse(self);\n-    }\n-}\n-\n fn bar(v: &mut [uint]) {\n     v.reverse();\n     v.reverse();"}, {"sha": "2ec2eb3c45b573e51db7ad95c2b943aafb7b67ca", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83b2fe556aaf779261503c0910bf378e45dce4/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=9e83b2fe556aaf779261503c0910bf378e45dce4", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n use std::util;\n-use std::vec;\n \n pub fn main() {\n     let mut a: ~[int] = ~[0, 1, 2, 3, 4, 5, 6];\n-    vec::swap(a, 2, 4);\n+    a.swap(2, 4);\n     assert_eq!(a[2], 4);\n     assert_eq!(a[4], 2);\n     let mut n = 42;"}]}