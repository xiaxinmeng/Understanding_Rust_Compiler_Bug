{"sha": "970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDUwM2IyZTEwYmU3YzFiNmFhZDdkM2NjZGNiNmEyY2MxZWM4YzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-16T02:09:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-16T21:23:19Z"}, "message": "Modify primary label message to be inline with error message", "tree": {"sha": "26f4e57ae56e8052d5835c26d705da30d0e767f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f4e57ae56e8052d5835c26d705da30d0e767f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "html_url": "https://github.com/rust-lang/rust/commit/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57413b717e12449612068406063571f6a4b43a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57413b717e12449612068406063571f6a4b43a9", "html_url": "https://github.com/rust-lang/rust/commit/f57413b717e12449612068406063571f6a4b43a9"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "76bb28f7e948763aca47cc0b0d76325932048881", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "patch": "@@ -1359,6 +1359,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         // somewhere else in the obligation chain. Do not suggest non-sense.\n                         return false;\n                     }\n+                    err.span.clear_span_labels();\n+                    err.span_label(span, &format!(\n+                        \"expected an implementor of trait `{}`\",\n+                        obligation.parent_trait_ref.skip_binder(),\n+                    ));\n                     err.span_suggestion(\n                         span,\n                         \"consider borrowing here\","}, {"sha": "fc8c72e4f232004f09126ab5bffe8c50d00c06ad", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "patch": "@@ -736,6 +736,11 @@ impl MultiSpan {\n         replacements_occurred\n     }\n \n+    /// This should be *rarely* used. Remove all the labels in this `MultiSpan`.\n+    pub fn clear_span_labels(&mut self) {\n+        self.span_labels.clear();\n+    }\n+\n     /// Returns the strings to highlight. We always ensure that there\n     /// is an entry for each of the primary spans -- for each primary\n     /// span `P`, if there is at least one label with span `P`, we return"}, {"sha": "e23d48ca6304b012b5498b350b40ab76af64e5f0", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "patch": "@@ -7,7 +7,7 @@ LL | fn is_copy<T: Copy>(_: T) {}\n LL |     is_copy(B { a: 1, b: C });\n    |             ^^^^^^^^^^^^^^^^\n    |             |\n-   |             the trait `std::marker::Copy` is not implemented for `C`\n+   |             expected an implementor of trait `std::marker::Copy`\n    |             help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<C>`\n@@ -21,7 +21,7 @@ LL | fn is_clone<T: Clone>(_: T) {}\n LL |     is_clone(B { a: 1, b: C });\n    |              ^^^^^^^^^^^^^^^^\n    |              |\n-   |              the trait `std::clone::Clone` is not implemented for `C`\n+   |              expected an implementor of trait `std::clone::Clone`\n    |              help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `B<C>`\n@@ -35,7 +35,7 @@ LL | fn is_copy<T: Copy>(_: T) {}\n LL |     is_copy(B { a: 1, b: D });\n    |             ^^^^^^^^^^^^^^^^\n    |             |\n-   |             the trait `std::marker::Copy` is not implemented for `D`\n+   |             expected an implementor of trait `std::marker::Copy`\n    |             help: consider borrowing here: `&B { a: 1, b: D }`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<D>`"}, {"sha": "ecaa39dbd2c8b966098645e9bca5a8736b4afef5", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `std::string::String: std::str::pattern::Pattern<'\n LL |     println!(\"{:?}\", line.find(pattern));\n    |                                ^^^^^^^\n    |                                |\n-   |                                expected an `FnMut<(char,)>` closure, found `std::string::String`\n+   |                                expected an implementor of trait `std::str::pattern::Pattern<'_>`\n    |                                help: consider borrowing here: `&pattern`\n    |\n    = help: the trait `std::ops::FnMut<(char,)>` is not implemented for `std::string::String`"}, {"sha": "cfb8b1d7b5f3cb6cabb482e6398d9559b1676574", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "patch": "@@ -52,7 +52,7 @@ LL | fn is_send<T: Send>(_: T) {}\n LL |     is_send(Box::new(TestType));\n    |             ^^^^^^^^^^^^^^^^^^\n    |             |\n-   |             `dummy2::TestType` cannot be sent between threads safely\n+   |             expected an implementor of trait `std::marker::Send`\n    |             help: consider borrowing here: `&Box::new(TestType)`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy2::TestType`\n@@ -82,7 +82,7 @@ LL | fn is_sync<T: Sync>(_: T) {}\n LL |     is_sync(Outer2(TestType));\n    |             ^^^^^^^^^^^^^^^^\n    |             |\n-   |             `main::TestType` cannot be sent between threads safely\n+   |             expected an implementor of trait `std::marker::Sync`\n    |             help: consider borrowing here: `&Outer2(TestType)`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `main::TestType`"}]}