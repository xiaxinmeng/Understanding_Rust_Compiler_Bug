{"sha": "4d917faa9905432a4ca18fdab29d3d8b951b7d97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOTE3ZmFhOTkwNTQzMmE0Y2ExOGZkYWIyOWQzZDhiOTUxYjdkOTc=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-02T11:38:03Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:22:33Z"}, "message": "Reduce destructuring and re-interning where possible", "tree": {"sha": "d662bf10c2d67e0e7ac108ccac42b6e42f0de920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d662bf10c2d67e0e7ac108ccac42b6e42f0de920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d917faa9905432a4ca18fdab29d3d8b951b7d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d917faa9905432a4ca18fdab29d3d8b951b7d97", "html_url": "https://github.com/rust-lang/rust/commit/4d917faa9905432a4ca18fdab29d3d8b951b7d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d917faa9905432a4ca18fdab29d3d8b951b7d97/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019dba0cebac1944c74644ba7365490ef3a8c753", "url": "https://api.github.com/repos/rust-lang/rust/commits/019dba0cebac1944c74644ba7365490ef3a8c753", "html_url": "https://github.com/rust-lang/rust/commit/019dba0cebac1944c74644ba7365490ef3a8c753"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "503a421beac251b1b49f0c3c9dcbc9d0b73f6c2a", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4d917faa9905432a4ca18fdab29d3d8b951b7d97/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d917faa9905432a4ca18fdab29d3d8b951b7d97/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=4d917faa9905432a4ca18fdab29d3d8b951b7d97", "patch": "@@ -506,18 +506,21 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         \"cannot relate constants of different types\"\n     );\n \n-    let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env()).val;\n+    let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n+    let a = eagerly_eval(a);\n+    let b = eagerly_eval(b);\n \n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n-    let new_const_val = match (eagerly_eval(a), eagerly_eval(b)) {\n+    match (a.val, b.val) {\n         (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n \n-        (ty::ConstKind::Error(d), _) | (_, ty::ConstKind::Error(d)) => Ok(ty::ConstKind::Error(d)),\n+        (ty::ConstKind::Error(_), _) => Ok(a),\n+        (_, ty::ConstKind::Error(_)) => Ok(b),\n \n         (ty::ConstKind::Param(a_p), ty::ConstKind::Param(b_p)) if a_p.index == b_p.index => {\n             return Ok(a);\n@@ -526,15 +529,15 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             return Ok(a);\n         }\n         (ty::ConstKind::Value(a_val), ty::ConstKind::Value(b_val)) => {\n-            let new_val = match (a_val, b_val) {\n+            match (a_val, b_val) {\n                 (ConstValue::Scalar(a_val), ConstValue::Scalar(b_val)) => {\n                     if a_val == b_val {\n-                        Ok(ConstValue::Scalar(a_val))\n+                        Ok(a)\n                     } else if let ty::FnPtr(_) = a.ty.kind() {\n                         let a_instance = tcx.global_alloc(a_val.assert_ptr().alloc_id).unwrap_fn();\n                         let b_instance = tcx.global_alloc(b_val.assert_ptr().alloc_id).unwrap_fn();\n                         if a_instance == b_instance {\n-                            Ok(ConstValue::Scalar(a_val))\n+                            Ok(a)\n                         } else {\n                             Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                         }\n@@ -547,7 +550,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     let a_bytes = get_slice_bytes(&tcx, a_val);\n                     let b_bytes = get_slice_bytes(&tcx, b_val);\n                     if a_bytes == b_bytes {\n-                        Ok(a_val)\n+                        Ok(a)\n                     } else {\n                         Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                     }\n@@ -567,7 +570,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                                     relation.consts(a_field, b_field)?;\n                                 }\n \n-                                Ok(a_val)\n+                                Ok(a)\n                             } else {\n                                 Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                             }\n@@ -585,17 +588,15 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                 }\n \n                 _ => Err(TypeError::ConstMismatch(expected_found(relation, a, b))),\n-            };\n-\n-            new_val.map(ty::ConstKind::Value)\n+            }\n         }\n \n         (\n             ty::ConstKind::Unevaluated(a_def, a_substs, None),\n             ty::ConstKind::Unevaluated(b_def, b_substs, None),\n         ) if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() => {\n             if tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs))) {\n-                Ok(a.val)\n+                Ok(a)\n             } else {\n                 Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n             }\n@@ -610,11 +611,13 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         ) if a_def == b_def && a_promoted == b_promoted => {\n             let substs =\n                 relation.relate_with_variance(ty::Variance::Invariant, a_substs, b_substs)?;\n-            Ok(ty::ConstKind::Unevaluated(a_def, substs, a_promoted))\n+            Ok(tcx.mk_const(ty::Const {\n+                val: ty::ConstKind::Unevaluated(a_def, substs, a_promoted),\n+                ty: a.ty,\n+            }))\n         }\n         _ => Err(TypeError::ConstMismatch(expected_found(relation, a, b))),\n-    };\n-    new_const_val.map(|val| tcx.mk_const(ty::Const { val, ty: a.ty }))\n+    }\n }\n \n impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>> {"}]}