{"sha": "dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZjg2OGUzZGFhYTA3NzdkNTkyMmZhNWYzMzRlZDJjMmFhMTE3Y2E=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-10T23:56:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-10T23:56:41Z"}, "message": "Rollup merge of #75363 - Aaron1011:fix/diag-infcx, r=lcnr\n\nUse existing `infcx` when emitting trait impl diagnostic\n\nFixes #75361\nFixes #74918\n\nPreviously, we were creating a new `InferCtxt`, which caused an ICE when\nused with type variables from the existing `InferCtxt`", "tree": {"sha": "6a7c48f5023e4fcf2132ce2f94a037fb23357f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7c48f5023e4fcf2132ce2f94a037fb23357f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMd65CRBK7hj4Ov3rIwAAdHIIAF0AfzUDjBBYfFiTqEJt7PDS\nloQql4J6WybJjrLZRQYUjWSz2RC8ukn8ZCfXIurxtUElTqxMa9e8XzfvABPYlyE8\nTu1Qt8aArV10b9nqK84R0WXseXl6KvBx6NIjibjXFDpa/N0qHtuKtQb3Qx54YCQ6\nHvOvAXTzto22V3N5u5FvrB8Tj+/TDrqhCt+HeV/GgaWmY1AE2hlVHWUUWb71A7/z\nJAnV1LZa6Np+MidyWWwPkzha0O8vJoU2x8S0tfdoNTyl+izJhebhgRTQ3TT81CCB\nP3uqSFMLnp3lB7tVLzmfk0JmTiTC001OCzCAqd8UhnpTKKiYbilVUa8iGhfzEa0=\n=wEv5\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a7c48f5023e4fcf2132ce2f94a037fb23357f35\nparent 9edec571cbaa0b99ce4640b733629fc05b4524b0\nparent 4ed0c6a464e89116d862773320aeab50464acd5f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1597103801 +0200\ncommitter GitHub <noreply@github.com> 1597103801 +0200\n\nRollup merge of #75363 - Aaron1011:fix/diag-infcx, r=lcnr\n\nUse existing `infcx` when emitting trait impl diagnostic\n\nFixes #75361\nFixes #74918\n\nPreviously, we were creating a new `InferCtxt`, which caused an ICE when\nused with type variables from the existing `InferCtxt`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "html_url": "https://github.com/rust-lang/rust/commit/dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9edec571cbaa0b99ce4640b733629fc05b4524b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9edec571cbaa0b99ce4640b733629fc05b4524b0", "html_url": "https://github.com/rust-lang/rust/commit/9edec571cbaa0b99ce4640b733629fc05b4524b0"}, {"sha": "4ed0c6a464e89116d862773320aeab50464acd5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed0c6a464e89116d862773320aeab50464acd5f", "html_url": "https://github.com/rust-lang/rust/commit/4ed0c6a464e89116d862773320aeab50464acd5f"}], "stats": {"total": 109, "additions": 104, "deletions": 5}, "files": [{"sha": "1ddf88c030660e318958322fbc9cb9bac06d93e3", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "patch": "@@ -2,7 +2,7 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{Subtype, TyCtxtInferExt, ValuePairs};\n+use crate::infer::{Subtype, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n@@ -53,7 +53,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     }\n \n     fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, trait_def_id: DefId) {\n-        let tcx = self.tcx();\n         let trait_sp = self.tcx().def_span(trait_def_id);\n         let mut err = self\n             .tcx()\n@@ -85,9 +84,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             );\n         }\n \n-        if let Some((expected, found)) = tcx\n-            .infer_ctxt()\n-            .enter(|infcx| infcx.expected_found_str_ty(&ExpectedFound { expected, found }))\n+        if let Some((expected, found)) =\n+            self.infcx.expected_found_str_ty(&ExpectedFound { expected, found })\n         {\n             // Highlighted the differences when showing the \"expected/found\" note.\n             err.note_expected_found(&\"\", expected, &\"\", found);"}, {"sha": "0e3ea4bc8c9de0f4e008cc413f9e1cdd465c3bb2", "filename": "src/test/ui/mismatched_types/issue-74918-missing-lifetime.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.rs?ref=dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "patch": "@@ -0,0 +1,28 @@\n+// Regression test for issue #74918\n+// Tests that we don't ICE after emitting an error\n+\n+struct ChunkingIterator<T, S: 'static + Iterator<Item = T>> {\n+    source: S,\n+}\n+\n+impl<T, S: Iterator<Item = T>> Iterator for ChunkingIterator<T, S> {\n+    type Item = IteratorChunk<T, S>; //~ ERROR missing lifetime\n+\n+    fn next(&mut self) -> Option<IteratorChunk<T, S>> { //~ ERROR `impl`\n+        todo!()\n+    }\n+}\n+\n+struct IteratorChunk<'a, T, S: Iterator<Item = T>> {\n+    source: &'a mut S,\n+}\n+\n+impl<T, S: Iterator<Item = T>> Iterator for IteratorChunk<'_, T, S> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<T> {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "da3056eac90093201a1c97c6377012a2b343854e", "filename": "src/test/ui/mismatched_types/issue-74918-missing-lifetime.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr?ref=dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "patch": "@@ -0,0 +1,30 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-74918-missing-lifetime.rs:9:31\n+   |\n+LL |     type Item = IteratorChunk<T, S>;\n+   |                               ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type Item<'a> = IteratorChunk<<'a>T, S>;\n+   |              ^^^^                 ^^^^\n+\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/issue-74918-missing-lifetime.rs:11:5\n+   |\n+LL |     fn next(&mut self) -> Option<IteratorChunk<T, S>> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&mut ChunkingIterator<T, S>) -> std::option::Option<IteratorChunk<'_, T, S>>`\n+   | \n+  ::: $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item>;\n+   |     ----------------------------------------- expected `fn(&mut ChunkingIterator<T, S>) -> std::option::Option<IteratorChunk<'static, _, _>>`\n+   |\n+   = note: expected `fn(&mut ChunkingIterator<T, S>) -> std::option::Option<IteratorChunk<'static, _, _>>`\n+              found `fn(&mut ChunkingIterator<T, S>) -> std::option::Option<IteratorChunk<'_, _, _>>`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "4410514476dc1c34921281e333dc2816c9abc260", "filename": "src/test/ui/mismatched_types/issue-75361-mismatched-impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.rs?ref=dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "patch": "@@ -0,0 +1,24 @@\n+// Regresison test for issue #75361\n+// Tests that we don't ICE on mismatched types with inference variables\n+\n+\n+trait MyTrait {\n+    type Item;\n+}\n+\n+pub trait Graph {\n+  type EdgeType;\n+\n+  fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n+}\n+\n+impl<T> Graph for T {\n+  type EdgeType = T;\n+\n+  fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType> + '_> { //~ ERROR `impl`\n+      panic!()\n+  }\n+\n+}\n+\n+fn main() {}"}, {"sha": "5be7f5271dee87dd1af876174713a32b3dfcb187", "filename": "src/test/ui/mismatched_types/issue-75361-mismatched-impl.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dff868e3daaa0777d5922fa5f334ed2c2aa117ca/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr?ref=dff868e3daaa0777d5922fa5f334ed2c2aa117ca", "patch": "@@ -0,0 +1,19 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/issue-75361-mismatched-impl.rs:18:3\n+   |\n+LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n+   |   --------------------------------------------------------------------- expected `fn(&T) -> std::boxed::Box<(dyn MyTrait<Item = &_> + 'static)>`\n+...\n+LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType> + '_> {\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&T) -> std::boxed::Box<dyn MyTrait<Item = &_>>`\n+   |\n+   = note: expected `fn(&T) -> std::boxed::Box<(dyn MyTrait<Item = &T> + 'static)>`\n+              found `fn(&T) -> std::boxed::Box<dyn MyTrait<Item = &T>>`\n+help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+  --> $DIR/issue-75361-mismatched-impl.rs:12:55\n+   |\n+LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n+   |                                                       ^^^^^^^^^^^^^^ consider borrowing this type parameter in the trait\n+\n+error: aborting due to previous error\n+"}]}