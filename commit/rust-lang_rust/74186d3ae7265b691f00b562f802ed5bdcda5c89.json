{"sha": "74186d3ae7265b691f00b562f802ed5bdcda5c89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MTg2ZDNhZTcyNjViNjkxZjAwYjU2MmY4MDJlZDViZGNkYTVjODk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-02T17:22:23Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-03T16:36:07Z"}, "message": "Tidy up tests and apply suggested changes", "tree": {"sha": "d07bd4a49a3b055be2d87b66c68e08aef48a1691", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07bd4a49a3b055be2d87b66c68e08aef48a1691"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74186d3ae7265b691f00b562f802ed5bdcda5c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74186d3ae7265b691f00b562f802ed5bdcda5c89", "html_url": "https://github.com/rust-lang/rust/commit/74186d3ae7265b691f00b562f802ed5bdcda5c89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74186d3ae7265b691f00b562f802ed5bdcda5c89/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903c7eb2e55ba403f7174110dfdde81184d6ed25", "url": "https://api.github.com/repos/rust-lang/rust/commits/903c7eb2e55ba403f7174110dfdde81184d6ed25", "html_url": "https://github.com/rust-lang/rust/commit/903c7eb2e55ba403f7174110dfdde81184d6ed25"}], "stats": {"total": 179, "additions": 107, "deletions": 72}, "files": [{"sha": "dbe2dfdcb1b1b9627e76b3f52e7365bbf9bbecae", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 107, "deletions": 72, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/74186d3ae7265b691f00b562f802ed5bdcda5c89/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74186d3ae7265b691f00b562f802ed5bdcda5c89/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=74186d3ae7265b691f00b562f802ed5bdcda5c89", "patch": "@@ -34,14 +34,15 @@ pub(crate) fn insert_use_statement(\n     insert_use(position.clone(), make::path_from_text(path_to_import), Some(MergeBehaviour::Full));\n }\n \n+/// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n pub fn insert_use(\n     where_: SyntaxNode,\n     path: ast::Path,\n-    merge_behaviour: Option<MergeBehaviour>,\n+    merge: Option<MergeBehaviour>,\n ) -> SyntaxNode {\n     let use_item = make::use_(make::use_tree(path.clone(), None, None, false));\n     // merge into existing imports if possible\n-    if let Some(mb) = merge_behaviour {\n+    if let Some(mb) = merge {\n         for existing_use in where_.children().filter_map(ast::Use::cast) {\n             if let Some(merged) = try_merge_imports(&existing_use, &use_item, mb) {\n                 let to_delete: SyntaxElement = existing_use.syntax().clone().into();\n@@ -59,17 +60,24 @@ pub fn insert_use(\n     let to_insert: Vec<SyntaxElement> = {\n         let mut buf = Vec::new();\n \n-        if add_blank == AddBlankLine::Before {\n-            buf.push(make::tokens::single_newline().into());\n+        match add_blank {\n+            AddBlankLine::Before => buf.push(make::tokens::single_newline().into()),\n+            AddBlankLine::BeforeTwice => {\n+                buf.push(make::tokens::single_newline().into());\n+                buf.push(make::tokens::single_newline().into());\n+            }\n+            _ => (),\n         }\n \n         buf.push(use_item.syntax().clone().into());\n \n-        if add_blank == AddBlankLine::After {\n-            buf.push(make::tokens::single_newline().into());\n-        } else if add_blank == AddBlankLine::AfterTwice {\n-            buf.push(make::tokens::single_newline().into());\n-            buf.push(make::tokens::single_newline().into());\n+        match add_blank {\n+            AddBlankLine::After => buf.push(make::tokens::single_newline().into()),\n+            AddBlankLine::AfterTwice => {\n+                buf.push(make::tokens::single_newline().into());\n+                buf.push(make::tokens::single_newline().into());\n+            }\n+            _ => (),\n         }\n \n         buf\n@@ -83,8 +91,8 @@ fn try_merge_imports(\n     new: &ast::Use,\n     merge_behaviour: MergeBehaviour,\n ) -> Option<ast::Use> {\n-    // dont merge into re-exports\n-    if old.visibility().map(|vis| vis.pub_token()).is_some() {\n+    // don't merge into re-exports\n+    if old.visibility().and_then(|vis| vis.pub_token()).is_some() {\n         return None;\n     }\n     let old_tree = old.use_tree()?;\n@@ -115,27 +123,24 @@ pub fn try_merge_trees(\n     let rhs_tl = rhs.use_tree_list()?;\n \n     // if we are only allowed to merge the last level check if the split off paths are only one level deep\n-    if merge_behaviour == MergeBehaviour::Last && use_tree_list_is_nested(&lhs_tl)\n-        || use_tree_list_is_nested(&rhs_tl)\n+    if merge_behaviour == MergeBehaviour::Last\n+        && (use_tree_list_is_nested(&lhs_tl) || use_tree_list_is_nested(&rhs_tl))\n     {\n         return None;\n     }\n \n     let should_insert_comma = lhs_tl\n         .r_curly_token()\n         .and_then(|it| skip_trivia_token(it.prev_token()?, Direction::Prev))\n-        .map(|it| it.kind() != T![,])\n-        .unwrap_or(true);\n+        .map(|it| it.kind())\n+        != Some(T![,]);\n     let mut to_insert: Vec<SyntaxElement> = Vec::new();\n     if should_insert_comma {\n         to_insert.push(make::token(T![,]).into());\n         to_insert.push(make::tokens::single_space().into());\n     }\n     to_insert.extend(\n-        rhs_tl\n-            .syntax()\n-            .children_with_tokens()\n-            .filter(|it| it.kind() != T!['{'] && it.kind() != T!['}']),\n+        rhs_tl.syntax().children_with_tokens().filter(|it| !matches!(it.kind(), T!['{'] | T!['}'])),\n     );\n     let pos = InsertPosition::Before(lhs_tl.r_curly_token()?.into());\n     let use_tree_list = lhs_tl.insert_children(pos, to_insert);\n@@ -225,6 +230,7 @@ fn segment_iter(path: &ast::Path) -> impl Iterator<Item = ast::PathSegment> + Cl\n #[derive(PartialEq, Eq)]\n enum AddBlankLine {\n     Before,\n+    BeforeTwice,\n     After,\n     AfterTwice,\n }\n@@ -278,7 +284,9 @@ fn find_insert_position(\n                     }\n                     // there is no such group, so append after the last one\n                     None => match last {\n-                        Some(node) => (InsertPosition::After(node.into()), AddBlankLine::Before),\n+                        Some(node) => {\n+                            (InsertPosition::After(node.into()), AddBlankLine::BeforeTwice)\n+                        }\n                         // there are no imports in this file at all\n                         None => (InsertPosition::First, AddBlankLine::AfterTwice),\n                     },\n@@ -297,12 +305,14 @@ mod tests {\n     #[test]\n     fn insert_start() {\n         check_none(\n-            \"std::bar::A\",\n-            r\"use std::bar::B;\n+            \"std::bar::AA\",\n+            r\"\n+use std::bar::B;\n use std::bar::D;\n use std::bar::F;\n use std::bar::G;\",\n-            r\"use std::bar::A;\n+            r\"\n+use std::bar::AA;\n use std::bar::B;\n use std::bar::D;\n use std::bar::F;\n@@ -313,14 +323,16 @@ use std::bar::G;\",\n     #[test]\n     fn insert_middle() {\n         check_none(\n-            \"std::bar::E\",\n-            r\"use std::bar::A;\n+            \"std::bar::EE\",\n+            r\"\n+use std::bar::A;\n use std::bar::D;\n use std::bar::F;\n use std::bar::G;\",\n-            r\"use std::bar::A;\n+            r\"\n+use std::bar::A;\n use std::bar::D;\n-use std::bar::E;\n+use std::bar::EE;\n use std::bar::F;\n use std::bar::G;\",\n         )\n@@ -329,29 +341,33 @@ use std::bar::G;\",\n     #[test]\n     fn insert_end() {\n         check_none(\n-            \"std::bar::Z\",\n-            r\"use std::bar::A;\n+            \"std::bar::ZZ\",\n+            r\"\n+use std::bar::A;\n use std::bar::D;\n use std::bar::F;\n use std::bar::G;\",\n-            r\"use std::bar::A;\n+            r\"\n+use std::bar::A;\n use std::bar::D;\n use std::bar::F;\n use std::bar::G;\n-use std::bar::Z;\",\n+use std::bar::ZZ;\",\n         )\n     }\n \n     #[test]\n-    fn insert_middle_pnested() {\n+    fn insert_middle_nested() {\n         check_none(\n-            \"std::bar::E\",\n-            r\"use std::bar::A;\n+            \"std::bar::EE\",\n+            r\"\n+use std::bar::A;\n use std::bar::{D, Z}; // example of weird imports due to user\n use std::bar::F;\n use std::bar::G;\",\n-            r\"use std::bar::A;\n-use std::bar::E;\n+            r\"\n+use std::bar::A;\n+use std::bar::EE;\n use std::bar::{D, Z}; // example of weird imports due to user\n use std::bar::F;\n use std::bar::G;\",\n@@ -361,35 +377,39 @@ use std::bar::G;\",\n     #[test]\n     fn insert_middle_groups() {\n         check_none(\n-            \"foo::bar::G\",\n-            r\"use std::bar::A;\n+            \"foo::bar::GG\",\n+            r\"\n+use std::bar::A;\n use std::bar::D;\n \n use foo::bar::F;\n use foo::bar::H;\",\n-            r\"use std::bar::A;\n+            r\"\n+use std::bar::A;\n use std::bar::D;\n \n use foo::bar::F;\n-use foo::bar::G;\n+use foo::bar::GG;\n use foo::bar::H;\",\n         )\n     }\n \n     #[test]\n     fn insert_first_matching_group() {\n         check_none(\n-            \"foo::bar::G\",\n-            r\"use foo::bar::A;\n+            \"foo::bar::GG\",\n+            r\"\n+use foo::bar::A;\n use foo::bar::D;\n \n use std;\n \n use foo::bar::F;\n use foo::bar::H;\",\n-            r\"use foo::bar::A;\n+            r\"\n+use foo::bar::A;\n use foo::bar::D;\n-use foo::bar::G;\n+use foo::bar::GG;\n \n use std;\n \n@@ -399,18 +419,35 @@ use foo::bar::H;\",\n     }\n \n     #[test]\n-    fn insert_missing_group() {\n+    fn insert_missing_group_std() {\n         check_none(\n             \"std::fmt\",\n-            r\"use foo::bar::A;\n+            r\"\n+use foo::bar::A;\n use foo::bar::D;\",\n-            r\"use std::fmt;\n+            r\"\n+use std::fmt;\n \n use foo::bar::A;\n use foo::bar::D;\",\n         )\n     }\n \n+    #[test]\n+    fn insert_missing_group_self() {\n+        check_none(\n+            \"self::fmt\",\n+            r\"\n+use foo::bar::A;\n+use foo::bar::D;\",\n+            r\"\n+use foo::bar::A;\n+use foo::bar::D;\n+\n+use self::fmt;\",\n+        )\n+    }\n+\n     #[test]\n     fn insert_no_imports() {\n         check_full(\n@@ -436,23 +473,12 @@ fn main() {}\",\n     }\n \n     #[test]\n-    fn adds_std_group() {\n-        check_full(\n-            \"std::fmt::Debug\",\n-            r\"use stdx;\",\n-            r\"use std::fmt::Debug;\n-\n-use stdx;\",\n-        )\n-    }\n-\n-    #[test]\n-    fn merges_groups() {\n+    fn merge_groups() {\n         check_last(\"std::io\", r\"use std::fmt;\", r\"use std::{fmt, io};\")\n     }\n \n     #[test]\n-    fn merges_groups_last() {\n+    fn merge_groups_last() {\n         check_last(\n             \"std::io\",\n             r\"use std::fmt::{Result, Display};\",\n@@ -462,7 +488,7 @@ use std::io;\",\n     }\n \n     #[test]\n-    fn merges_groups_full() {\n+    fn merge_groups_full() {\n         check_full(\n             \"std::io\",\n             r\"use std::fmt::{Result, Display};\",\n@@ -471,7 +497,7 @@ use std::io;\",\n     }\n \n     #[test]\n-    fn merges_groups_long_full() {\n+    fn merge_groups_long_full() {\n         check_full(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::Qux;\",\n@@ -480,7 +506,7 @@ use std::io;\",\n     }\n \n     #[test]\n-    fn merges_groups_long_last() {\n+    fn merge_groups_long_last() {\n         check_last(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::Qux;\",\n@@ -489,7 +515,7 @@ use std::io;\",\n     }\n \n     #[test]\n-    fn merges_groups_long_full_list() {\n+    fn merge_groups_long_full_list() {\n         check_full(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, Quux};\",\n@@ -498,7 +524,7 @@ use std::io;\",\n     }\n \n     #[test]\n-    fn merges_groups_long_last_list() {\n+    fn merge_groups_long_last_list() {\n         check_last(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, Quux};\",\n@@ -507,7 +533,7 @@ use std::io;\",\n     }\n \n     #[test]\n-    fn merges_groups_long_full_nested() {\n+    fn merge_groups_long_full_nested() {\n         check_full(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n@@ -516,7 +542,7 @@ use std::io;\",\n     }\n \n     #[test]\n-    fn merges_groups_long_last_nested() {\n+    fn merge_groups_long_last_nested() {\n         check_last(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n@@ -526,7 +552,7 @@ use std::foo::bar::{quux::{Fez, Fizz}, Qux};\",\n     }\n \n     #[test]\n-    fn skip_merges_groups_pub() {\n+    fn merge_groups_skip_pub() {\n         check_full(\n             \"std::io\",\n             r\"pub use std::fmt::{Result, Display};\",\n@@ -535,22 +561,31 @@ use std::io;\",\n         )\n     }\n \n-    // should this be a thing?\n     #[test]\n-    fn split_merge() {\n+    #[ignore] // FIXME: Support this\n+    fn split_out_merge() {\n         check_last(\n             \"std::fmt::Result\",\n             r\"use std::{fmt, io};\",\n-            r\"use std::fmt::Result;\n+            r\"use std::{self, fmt::Result};\n use std::io;\",\n         )\n     }\n \n     #[test]\n-    fn merges_groups_self() {\n+    fn merge_groups_self() {\n         check_full(\"std::fmt::Debug\", r\"use std::fmt;\", r\"use std::fmt::{self, Debug};\")\n     }\n \n+    #[test]\n+    fn merge_self_glob() {\n+        check_full(\n+            \"token::TokenKind\",\n+            r\"use token::TokenKind::*;\",\n+            r\"use token::TokenKind::{self::*, self};\",\n+        )\n+    }\n+\n     fn check(\n         path: &str,\n         ra_fixture_before: &str,"}]}