{"sha": "96ffc74fe3f7dfc85d165d08b040634ce9400e33", "node_id": "C_kwDOAAsO6NoAKDk2ZmZjNzRmZTNmN2RmYzg1ZDE2NWQwOGIwNDA2MzRjZTk0MDBlMzM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-10-11T12:11:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-11T12:11:45Z"}, "message": "Rollup merge of #89753 - jkugelman:must-use-from_value-conversions, r=joshtriplett\n\nAdd #[must_use] to from_value conversions\n\nI added two methods to the list myself. Clippy did not flag them because they take `mut` args, but neither modifies their argument.\n\n```rust\ncore::str           const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str;\nstd::ffi::CString   unsafe fn from_raw(ptr: *mut c_char) -> CString;\n```\n\nI put a custom note on `from_raw`:\n\n```rust\n#[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]\npub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n```\n\nParent issue: #89692\n\nr? ``@joshtriplett``", "tree": {"sha": "dff03f4122cf0b6f2fd61862b5e04adf542a2919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff03f4122cf0b6f2fd61862b5e04adf542a2919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ffc74fe3f7dfc85d165d08b040634ce9400e33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZCoBCRBK7hj4Ov3rIwAA028IAKhQHtprj0sYFPtxee8R79ep\nxyZw1pfGYfzHkRrLMOnsLirkm8nNbBUiqqxw/DmimPgbR9lYnM9CQh9CQtdoXdqF\nx5zNZC0Z7Ilna9p4AtKXx/RRtvUMprVFAgVCcV5unMwQ/MzjajSt5kAa810GMefN\nTjaEE6ogNwfnJvoc5Xk3aVVRxjuzYs4NveYkO3pwqjvVrabw9buR8c8sCSRBblo5\nuEYzRpDYwpuZFRD6xLJTZJYguv45lI0nd3XM1Nrn0/1bjxV/euW501YRhpZWsqLw\npNQ7fiT4QBwWgoArHgLoEgu9LfzHDoGIFCPgkFb6hp2XFcU8i0/zVAO4G8FsL7w=\n=l28O\n-----END PGP SIGNATURE-----\n", "payload": "tree dff03f4122cf0b6f2fd61862b5e04adf542a2919\nparent 9183942e8383b4a2c40f8eeb872c71ab3d8c60fe\nparent cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1633954305 +0200\ncommitter GitHub <noreply@github.com> 1633954305 +0200\n\nRollup merge of #89753 - jkugelman:must-use-from_value-conversions, r=joshtriplett\n\nAdd #[must_use] to from_value conversions\n\nI added two methods to the list myself. Clippy did not flag them because they take `mut` args, but neither modifies their argument.\n\n```rust\ncore::str           const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str;\nstd::ffi::CString   unsafe fn from_raw(ptr: *mut c_char) -> CString;\n```\n\nI put a custom note on `from_raw`:\n\n```rust\n#[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]\npub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n```\n\nParent issue: #89692\n\nr? ``@joshtriplett``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ffc74fe3f7dfc85d165d08b040634ce9400e33", "html_url": "https://github.com/rust-lang/rust/commit/96ffc74fe3f7dfc85d165d08b040634ce9400e33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ffc74fe3f7dfc85d165d08b040634ce9400e33/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9183942e8383b4a2c40f8eeb872c71ab3d8c60fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9183942e8383b4a2c40f8eeb872c71ab3d8c60fe", "html_url": "https://github.com/rust-lang/rust/commit/9183942e8383b4a2c40f8eeb872c71ab3d8c60fe"}, {"sha": "cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "html_url": "https://github.com/rust-lang/rust/commit/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "ac7f23044565617ac79cd5c2881af3009cb3ee23", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -595,6 +595,7 @@ impl str {\n /// assert_eq!(\"\u263a\", &*smile);\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+#[must_use]\n #[inline]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     unsafe { Box::from_raw(Box::into_raw(v) as *mut str) }"}, {"sha": "f11fa92766f1fb3706fb5f87b391bfacf092450d", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -764,6 +764,7 @@ impl String {\n     /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {\n         String { vec: bytes }"}, {"sha": "d4c8ea33501a6a5fb8679f54a05739532bca374d", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -94,6 +94,7 @@ impl Layout {\n     /// [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller must ensure that `align` is greater than zero."}, {"sha": "72921414fb3f29aa37905382b2751e41ff87eece", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -48,6 +48,7 @@ use super::MAX;\n /// assert_eq!(None, c);\n /// ```\n #[doc(alias = \"chr\")]\n+#[must_use]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_u32(i: u32) -> Option<char> {\n@@ -88,6 +89,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// assert_eq!('\u2764', c);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n     // SAFETY: the caller must guarantee that `i` is a valid char value.\n@@ -319,6 +321,7 @@ impl fmt::Display for CharTryFromError {\n /// let c = char::from_digit(1, 37);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n     if radix > 36 {"}, {"sha": "3e7c5b3189cb5ece4084dc6c49d3995412419481", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -136,6 +136,7 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n@@ -177,6 +178,7 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n@@ -230,9 +232,10 @@ impl char {\n     /// use std::char;\n     ///\n     /// // this panics\n-    /// char::from_digit(1, 37);\n+    /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)"}, {"sha": "ad8106df198da3005c3b4e0692aef6e259b86213", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -801,6 +801,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u32) -> Self {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n@@ -885,6 +886,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n@@ -900,6 +902,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n@@ -926,6 +929,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))"}, {"sha": "6a48101e04fdac695166d174e2484cbc73d60946", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -817,6 +817,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u64) -> Self {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n@@ -901,6 +902,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n@@ -916,6 +918,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n@@ -942,6 +945,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))"}, {"sha": "0bdc933013791b2c017ae20a4f0c3f48b61b0f4d", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -297,6 +297,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -328,6 +329,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -2671,6 +2673,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2701,6 +2704,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2742,6 +2746,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "c764f420e27399d3a343fb974ec8d94086efad98", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -657,6 +657,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Saturating(<$t>::from_be(x.0))\n@@ -684,6 +685,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Saturating(<$t>::from_le(x.0))"}, {"sha": "c3b2ecdb30f5b9c2fbc4365acea8ca80d34401fc", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -300,6 +300,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -332,6 +333,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -2321,6 +2323,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2351,6 +2354,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2392,6 +2396,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "f387bd5b41cc453ef9cd956af7f5e65341ff06bc", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -651,6 +651,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Wrapping(<$t>::from_be(x.0))\n@@ -678,6 +679,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Wrapping(<$t>::from_le(x.0))"}, {"sha": "ed9f49f159611f19702787f29161a3423e5ae731", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -155,6 +155,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n@@ -181,6 +182,7 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n /// assert_eq!(\"\ud83d\udc96\", heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`"}, {"sha": "d3c9d21c3c756c0acaec68fa99ad823787d71aef", "filename": "library/core/src/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -12,10 +12,12 @@ pub struct Utf8Lossy {\n }\n \n impl Utf8Lossy {\n+    #[must_use]\n     pub fn from_str(s: &str) -> &Utf8Lossy {\n         Utf8Lossy::from_bytes(s.as_bytes())\n     }\n \n+    #[must_use]\n     pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {\n         // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.\n         unsafe { mem::transmute(bytes) }"}, {"sha": "620bff538799425c28ba158723712b072beca39f", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -159,6 +159,7 @@ pub struct Context<'a> {\n impl<'a> Context<'a> {\n     /// Create a new `Context` from a `&Waker`.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_waker(waker: &'a Waker) -> Self {\n         Context { waker, _marker: PhantomData }\n@@ -252,6 +253,7 @@ impl Waker {\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker { waker }"}, {"sha": "40c5338d13cfd112c465007aa6195b64e7ad501a", "filename": "library/core/src/time.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -204,6 +204,7 @@ impl Duration {\n     /// assert_eq!(0, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_secs(secs: u64) -> Duration {\n@@ -223,6 +224,7 @@ impl Duration {\n     /// assert_eq!(569_000_000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_millis(millis: u64) -> Duration {\n@@ -245,6 +247,7 @@ impl Duration {\n     /// assert_eq!(2000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_micros(micros: u64) -> Duration {\n@@ -267,6 +270,7 @@ impl Duration {\n     /// assert_eq!(123, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n@@ -708,6 +712,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n@@ -769,6 +774,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {"}, {"sha": "8b51c4450c2aa2ce2c12655ab7b83bc93ba63222", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -426,6 +426,7 @@ impl CString {\n     ///     let c_string = CString::from_vec_unchecked(raw);\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {\n         v.reserve_exact(1);\n@@ -477,6 +478,7 @@ impl CString {\n     ///     let c_string = CString::from_raw(raw);\n     /// }\n     /// ```\n+    #[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         // SAFETY: This is called with a pointer that was obtained from a call\n@@ -705,6 +707,7 @@ impl CString {\n     ///     unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n     /// );\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n     pub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self {\n         Self { inner: v.into_boxed_slice() }\n@@ -1168,6 +1171,7 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         // SAFETY: The caller has provided a pointer that points to a valid C\n@@ -1250,6 +1254,7 @@ impl CStr {\n     /// }\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {"}, {"sha": "59a9cd781cb99f32f83fd3f12fe83f9bcad7ef1b", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ffc74fe3f7dfc85d165d08b040634ce9400e33/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=96ffc74fe3f7dfc85d165d08b040634ce9400e33", "patch": "@@ -473,6 +473,7 @@ impl Error {\n     /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_raw_os_error(code: i32) -> Error {\n         Error { repr: Repr::Os(code) }"}]}