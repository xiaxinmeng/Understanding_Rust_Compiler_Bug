{"sha": "ec02f9457cfbd336296951bad66dcb621c865166", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMDJmOTQ1N2NmYmQzMzYyOTY5NTFiYWQ2NmRjYjYyMWM4NjUxNjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:01:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` `resolve::Module::resolved_import_count`", "tree": {"sha": "ec19a09fb7682c15fe68002886d8733cd387c749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec19a09fb7682c15fe68002886d8733cd387c749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec02f9457cfbd336296951bad66dcb621c865166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec02f9457cfbd336296951bad66dcb621c865166", "html_url": "https://github.com/rust-lang/rust/commit/ec02f9457cfbd336296951bad66dcb621c865166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec02f9457cfbd336296951bad66dcb621c865166/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d8380b19f63f1a8acafcc340c7e964b55fda82", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d8380b19f63f1a8acafcc340c7e964b55fda82", "html_url": "https://github.com/rust-lang/rust/commit/01d8380b19f63f1a8acafcc340c7e964b55fda82"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "d6c5de724ba5cccbef75c650e2e15182960db9bf", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec02f9457cfbd336296951bad66dcb621c865166/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec02f9457cfbd336296951bad66dcb621c865166/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ec02f9457cfbd336296951bad66dcb621c865166", "patch": "@@ -450,7 +450,7 @@ struct Module {\n     glob_count: Cell<uint>,\n \n     // The index of the import we're resolving.\n-    resolved_import_count: uint,\n+    resolved_import_count: Cell<uint>,\n \n     // Whether this module is populated. If not populated, any attempt to\n     // access the children must be preceded with a\n@@ -476,14 +476,14 @@ impl Module {\n             anonymous_children: @mut HashMap::new(),\n             import_resolutions: @mut HashMap::new(),\n             glob_count: Cell::new(0),\n-            resolved_import_count: 0,\n+            resolved_import_count: Cell::new(0),\n             populated: Cell::new(!external),\n         }\n     }\n \n     fn all_imports_resolved(&self) -> bool {\n         let imports = &mut *self.imports;\n-        return imports.len() == self.resolved_import_count;\n+        return imports.len() == self.resolved_import_count.get();\n     }\n }\n \n@@ -2039,8 +2039,8 @@ impl Resolver {\n \n         let imports = &mut *module.imports;\n         let import_count = imports.len();\n-        while module.resolved_import_count < import_count {\n-            let import_index = module.resolved_import_count;\n+        while module.resolved_import_count.get() < import_count {\n+            let import_index = module.resolved_import_count.get();\n             let import_directive = imports[import_index];\n             match self.resolve_import_for_module(module, import_directive) {\n                 Failed => {\n@@ -2060,7 +2060,8 @@ impl Resolver {\n                 }\n             }\n \n-            module.resolved_import_count += 1;\n+            module.resolved_import_count\n+                  .set(module.resolved_import_count.get() + 1);\n         }\n     }\n \n@@ -3151,7 +3152,7 @@ impl Resolver {\n     }\n \n     fn report_unresolved_imports(&mut self, module_: @mut Module) {\n-        let index = module_.resolved_import_count;\n+        let index = module_.resolved_import_count.get();\n         let imports: &mut ~[@ImportDirective] = &mut *module_.imports;\n         let import_count = imports.len();\n         if index != import_count {"}]}