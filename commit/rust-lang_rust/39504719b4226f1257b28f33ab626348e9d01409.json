{"sha": "39504719b4226f1257b28f33ab626348e9d01409", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NTA0NzE5YjQyMjZmMTI1N2IyOGYzM2FiNjI2MzQ4ZTlkMDE0MDk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-24T08:36:24Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-25T17:08:55Z"}, "message": "resolve: Don't use @RefCell in trait_map, nothing modifies its entries.", "tree": {"sha": "936e9fcdb98f62823de9b871fbd97a4344a48b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/936e9fcdb98f62823de9b871fbd97a4344a48b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39504719b4226f1257b28f33ab626348e9d01409", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39504719b4226f1257b28f33ab626348e9d01409", "html_url": "https://github.com/rust-lang/rust/commit/39504719b4226f1257b28f33ab626348e9d01409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39504719b4226f1257b28f33ab626348e9d01409/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5532618f44fd58b0630edaba7d7f95c5e3e5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc", "html_url": "https://github.com/rust-lang/rust/commit/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "5dc18bc08f18eb92f3b67664373f295407388653", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39504719b4226f1257b28f33ab626348e9d01409/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39504719b4226f1257b28f33ab626348e9d01409/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=39504719b4226f1257b28f33ab626348e9d01409", "patch": "@@ -46,7 +46,7 @@ struct binding_info {\n type BindingMap = HashMap<Name,binding_info>;\n \n // Trait method resolution\n-pub type TraitMap = HashMap<NodeId,@RefCell<~[DefId]>>;\n+pub type TraitMap = HashMap<NodeId, ~[DefId]>;\n \n // This is the replacement export map. It maps a module to all of the exports\n // within.\n@@ -5255,14 +5255,14 @@ impl Resolver {\n                 // the field name so that we can do some nice error reporting\n                 // later on in typeck.\n                 let traits = self.search_for_traits_containing_method(ident);\n-                self.trait_map.insert(expr.id, @RefCell::new(traits));\n+                self.trait_map.insert(expr.id, traits);\n             }\n             ExprMethodCall(_, ident, _, _) => {\n                 debug!(\"(recording candidate traits for expr) recording \\\n                         traits for {}\",\n                        expr.id);\n                 let traits = self.search_for_traits_containing_method(ident);\n-                self.trait_map.insert(expr.id, @RefCell::new(traits));\n+                self.trait_map.insert(expr.id, traits);\n             }\n             _ => {\n                 // Nothing to do."}, {"sha": "4695521d0d91c76764f7ba3f46ead6b1bd1a1cde", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39504719b4226f1257b28f33ab626348e9d01409/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39504719b4226f1257b28f33ab626348e9d01409/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=39504719b4226f1257b28f33ab626348e9d01409", "patch": "@@ -81,7 +81,6 @@ obtained the type `Foo`, we would never match this method.\n \n \n use middle::subst::Subst;\n-use middle::resolve;\n use middle::ty::*;\n use middle::ty;\n use middle::typeck::astconv::AstConv;\n@@ -396,28 +395,10 @@ impl<'a> LookupContext<'a> {\n         // If the method being called is associated with a trait, then\n         // find all the impls of that trait.  Each of those are\n         // candidates.\n-        let trait_map: &resolve::TraitMap = &self.fcx.ccx.trait_map;\n-        let opt_applicable_traits = trait_map.find(&self.expr.id);\n-        for applicable_traits in opt_applicable_traits.iter() {\n-            let applicable_traits = applicable_traits.borrow();\n-            for trait_did in applicable_traits.get().iter() {\n-                ty::populate_implementations_for_trait_if_necessary(\n-                    self.tcx(),\n-                    *trait_did);\n-\n-                // Look for explicit implementations.\n-                let trait_impls = self.tcx().trait_impls.borrow();\n-                let opt_impl_infos = trait_impls.get().find(trait_did);\n-                for impl_infos in opt_impl_infos.iter() {\n-                    let impl_infos = impl_infos.borrow();\n-                    for impl_info in impl_infos.get().iter() {\n-                        let mut extension_candidates =\n-                            self.extension_candidates.borrow_mut();\n-                        self.push_candidates_from_impl(\n-                            extension_candidates.get(), *impl_info);\n-\n-                    }\n-                }\n+        let opt_applicable_traits = self.fcx.ccx.trait_map.find(&self.expr.id);\n+        for applicable_traits in opt_applicable_traits.move_iter() {\n+            for trait_did in applicable_traits.iter() {\n+                self.push_extension_candidate(*trait_did);\n             }\n         }\n     }"}]}