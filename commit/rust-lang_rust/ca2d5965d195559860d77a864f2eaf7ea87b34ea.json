{"sha": "ca2d5965d195559860d77a864f2eaf7ea87b34ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMmQ1OTY1ZDE5NTU1OTg2MGQ3N2E4NjRmMmVhZjdlYTg3YjM0ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-30T08:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-30T08:56:23Z"}, "message": "auto merge of #9614 : blake2-ppc/rust/lang-item-iter, r=alexcrichton\n\nCleanup in middle::lang_items\r\n\r\nUse static string keys in the lang item hashmap, and convert\r\nthe traversal function to be an iterator.", "tree": {"sha": "bc7e784e6e354f389080f921d13cee9b5b50206c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc7e784e6e354f389080f921d13cee9b5b50206c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2d5965d195559860d77a864f2eaf7ea87b34ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2d5965d195559860d77a864f2eaf7ea87b34ea", "html_url": "https://github.com/rust-lang/rust/commit/ca2d5965d195559860d77a864f2eaf7ea87b34ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2d5965d195559860d77a864f2eaf7ea87b34ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b6056f5d4ae6b527b36c502cc074c2518a3f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b6056f5d4ae6b527b36c502cc074c2518a3f7d", "html_url": "https://github.com/rust-lang/rust/commit/80b6056f5d4ae6b527b36c502cc074c2518a3f7d"}, {"sha": "abcca1c7d1136e64db2853b3c7e38a0417155b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/abcca1c7d1136e64db2853b3c7e38a0417155b97", "html_url": "https://github.com/rust-lang/rust/commit/abcca1c7d1136e64db2853b3c7e38a0417155b97"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "f84d9764714c47e066ed32dfcccbaca0486b62b4", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca2d5965d195559860d77a864f2eaf7ea87b34ea/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2d5965d195559860d77a864f2eaf7ea87b34ea/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=ca2d5965d195559860d77a864f2eaf7ea87b34ea", "patch": "@@ -1574,7 +1574,7 @@ fn encode_crate_deps(ecx: &EncodeContext,\n fn encode_lang_items(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n     ebml_w.start_tag(tag_lang_items);\n \n-    do ecx.tcx.lang_items.each_item |def_id, i| {\n+    for (i, def_id) in ecx.tcx.lang_items.items() {\n         for id in def_id.iter() {\n             if id.crate == LOCAL_CRATE {\n                 ebml_w.start_tag(tag_lang_items_item);\n@@ -1590,8 +1590,7 @@ fn encode_lang_items(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n                 ebml_w.end_tag();   // tag_lang_items_item\n             }\n         }\n-        true\n-    };\n+    }\n \n     ebml_w.end_tag();   // tag_lang_items\n }"}, {"sha": "92c619eba0ecdb101887c154373c7f141193d4b1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 50, "deletions": 48, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ca2d5965d195559860d77a864f2eaf7ea87b34ea/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2d5965d195559860d77a864f2eaf7ea87b34ea/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=ca2d5965d195559860d77a864f2eaf7ea87b34ea", "patch": "@@ -32,6 +32,8 @@ use syntax::visit;\n use syntax::visit::Visitor;\n \n use std::hashmap::HashMap;\n+use std::iter::Enumerate;\n+use std::vec;\n \n pub enum LangItem {\n     FreezeTraitLangItem,               // 0\n@@ -92,8 +94,8 @@ impl LanguageItems {\n         }\n     }\n \n-    pub fn each_item(&self, f: &fn(Option<DefId>, uint) -> bool) -> bool {\n-        self.items.iter().enumerate().advance(|(i, &item)| f(item, i))\n+    pub fn items<'a>(&'a self) -> Enumerate<vec::VecIterator<'a, Option<DefId>>> {\n+        self.items.iter().enumerate()\n     }\n \n     pub fn item_name(index: uint) -> &'static str {\n@@ -298,7 +300,7 @@ struct LanguageItemCollector<'self> {\n     crate: &'self Crate,\n     session: Session,\n \n-    item_refs: HashMap<@str, uint>,\n+    item_refs: HashMap<&'static str, uint>,\n }\n \n struct LanguageItemVisitor<'self> {\n@@ -327,51 +329,51 @@ impl<'self> LanguageItemCollector<'self> {\n                    -> LanguageItemCollector<'a> {\n         let mut item_refs = HashMap::new();\n \n-        item_refs.insert(@\"freeze\", FreezeTraitLangItem as uint);\n-        item_refs.insert(@\"send\", SendTraitLangItem as uint);\n-        item_refs.insert(@\"sized\", SizedTraitLangItem as uint);\n-\n-        item_refs.insert(@\"drop\", DropTraitLangItem as uint);\n-\n-        item_refs.insert(@\"add\", AddTraitLangItem as uint);\n-        item_refs.insert(@\"sub\", SubTraitLangItem as uint);\n-        item_refs.insert(@\"mul\", MulTraitLangItem as uint);\n-        item_refs.insert(@\"div\", DivTraitLangItem as uint);\n-        item_refs.insert(@\"rem\", RemTraitLangItem as uint);\n-        item_refs.insert(@\"neg\", NegTraitLangItem as uint);\n-        item_refs.insert(@\"not\", NotTraitLangItem as uint);\n-        item_refs.insert(@\"bitxor\", BitXorTraitLangItem as uint);\n-        item_refs.insert(@\"bitand\", BitAndTraitLangItem as uint);\n-        item_refs.insert(@\"bitor\", BitOrTraitLangItem as uint);\n-        item_refs.insert(@\"shl\", ShlTraitLangItem as uint);\n-        item_refs.insert(@\"shr\", ShrTraitLangItem as uint);\n-        item_refs.insert(@\"index\", IndexTraitLangItem as uint);\n-\n-        item_refs.insert(@\"eq\", EqTraitLangItem as uint);\n-        item_refs.insert(@\"ord\", OrdTraitLangItem as uint);\n-\n-        item_refs.insert(@\"str_eq\", StrEqFnLangItem as uint);\n-        item_refs.insert(@\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n-        item_refs.insert(@\"fail_\", FailFnLangItem as uint);\n-        item_refs.insert(@\"fail_bounds_check\",\n+        item_refs.insert(\"freeze\", FreezeTraitLangItem as uint);\n+        item_refs.insert(\"send\", SendTraitLangItem as uint);\n+        item_refs.insert(\"sized\", SizedTraitLangItem as uint);\n+\n+        item_refs.insert(\"drop\", DropTraitLangItem as uint);\n+\n+        item_refs.insert(\"add\", AddTraitLangItem as uint);\n+        item_refs.insert(\"sub\", SubTraitLangItem as uint);\n+        item_refs.insert(\"mul\", MulTraitLangItem as uint);\n+        item_refs.insert(\"div\", DivTraitLangItem as uint);\n+        item_refs.insert(\"rem\", RemTraitLangItem as uint);\n+        item_refs.insert(\"neg\", NegTraitLangItem as uint);\n+        item_refs.insert(\"not\", NotTraitLangItem as uint);\n+        item_refs.insert(\"bitxor\", BitXorTraitLangItem as uint);\n+        item_refs.insert(\"bitand\", BitAndTraitLangItem as uint);\n+        item_refs.insert(\"bitor\", BitOrTraitLangItem as uint);\n+        item_refs.insert(\"shl\", ShlTraitLangItem as uint);\n+        item_refs.insert(\"shr\", ShrTraitLangItem as uint);\n+        item_refs.insert(\"index\", IndexTraitLangItem as uint);\n+\n+        item_refs.insert(\"eq\", EqTraitLangItem as uint);\n+        item_refs.insert(\"ord\", OrdTraitLangItem as uint);\n+\n+        item_refs.insert(\"str_eq\", StrEqFnLangItem as uint);\n+        item_refs.insert(\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n+        item_refs.insert(\"fail_\", FailFnLangItem as uint);\n+        item_refs.insert(\"fail_bounds_check\",\n                          FailBoundsCheckFnLangItem as uint);\n-        item_refs.insert(@\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n-        item_refs.insert(@\"closure_exchange_malloc\", ClosureExchangeMallocFnLangItem as uint);\n-        item_refs.insert(@\"exchange_free\", ExchangeFreeFnLangItem as uint);\n-        item_refs.insert(@\"malloc\", MallocFnLangItem as uint);\n-        item_refs.insert(@\"free\", FreeFnLangItem as uint);\n-        item_refs.insert(@\"borrow_as_imm\", BorrowAsImmFnLangItem as uint);\n-        item_refs.insert(@\"borrow_as_mut\", BorrowAsMutFnLangItem as uint);\n-        item_refs.insert(@\"return_to_mut\", ReturnToMutFnLangItem as uint);\n-        item_refs.insert(@\"check_not_borrowed\",\n+        item_refs.insert(\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n+        item_refs.insert(\"closure_exchange_malloc\", ClosureExchangeMallocFnLangItem as uint);\n+        item_refs.insert(\"exchange_free\", ExchangeFreeFnLangItem as uint);\n+        item_refs.insert(\"malloc\", MallocFnLangItem as uint);\n+        item_refs.insert(\"free\", FreeFnLangItem as uint);\n+        item_refs.insert(\"borrow_as_imm\", BorrowAsImmFnLangItem as uint);\n+        item_refs.insert(\"borrow_as_mut\", BorrowAsMutFnLangItem as uint);\n+        item_refs.insert(\"return_to_mut\", ReturnToMutFnLangItem as uint);\n+        item_refs.insert(\"check_not_borrowed\",\n                          CheckNotBorrowedFnLangItem as uint);\n-        item_refs.insert(@\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n-        item_refs.insert(@\"record_borrow\", RecordBorrowFnLangItem as uint);\n-        item_refs.insert(@\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n-        item_refs.insert(@\"start\", StartFnLangItem as uint);\n-        item_refs.insert(@\"ty_desc\", TyDescStructLangItem as uint);\n-        item_refs.insert(@\"ty_visitor\", TyVisitorTraitLangItem as uint);\n-        item_refs.insert(@\"opaque\", OpaqueStructLangItem as uint);\n+        item_refs.insert(\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n+        item_refs.insert(\"record_borrow\", RecordBorrowFnLangItem as uint);\n+        item_refs.insert(\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n+        item_refs.insert(\"start\", StartFnLangItem as uint);\n+        item_refs.insert(\"ty_desc\", TyDescStructLangItem as uint);\n+        item_refs.insert(\"ty_visitor\", TyVisitorTraitLangItem as uint);\n+        item_refs.insert(\"opaque\", OpaqueStructLangItem as uint);\n \n         LanguageItemCollector {\n             crate: crate,\n@@ -416,8 +418,8 @@ impl<'self> LanguageItemCollector<'self> {\n             return;    // Didn't match.\n         }\n \n-        let item_index = self.item_refs.find(&value).map_move(|x| *x);\n-        // prevent borrow checker from considering   ^~~~~~~~~~~\n+        let item_index = self.item_refs.find_equiv(&value).map_move(|x| *x);\n+        // prevent borrow checker from considering         ^~~~~~~~~~~\n         // self to be borrowed (annoying)\n \n         match item_index {"}]}