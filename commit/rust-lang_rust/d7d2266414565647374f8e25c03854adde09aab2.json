{"sha": "d7d2266414565647374f8e25c03854adde09aab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZDIyNjY0MTQ1NjU2NDczNzRmOGUyNWMwMzg1NGFkZGUwOWFhYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-22T08:05:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-22T08:05:35Z"}, "message": "Auto merge of #1249 - RalfJung:rustup, r=RalfJung\n\nCross-test targets\n\nWe should now be able to run Linux targets on macOS hosts and vice versa.\nCc https://github.com/rust-lang/miri/issues/1198", "tree": {"sha": "c2f8bee1f13e7539e499f10bc412abda9cb14f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2f8bee1f13e7539e499f10bc412abda9cb14f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7d2266414565647374f8e25c03854adde09aab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d2266414565647374f8e25c03854adde09aab2", "html_url": "https://github.com/rust-lang/rust/commit/d7d2266414565647374f8e25c03854adde09aab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7d2266414565647374f8e25c03854adde09aab2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "html_url": "https://github.com/rust-lang/rust/commit/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1"}, {"sha": "b843de6dd22f9fdfd998cd0c105cce17a31ab639", "url": "https://api.github.com/repos/rust-lang/rust/commits/b843de6dd22f9fdfd998cd0c105cce17a31ab639", "html_url": "https://github.com/rust-lang/rust/commit/b843de6dd22f9fdfd998cd0c105cce17a31ab639"}], "stats": {"total": 131, "additions": 78, "deletions": 53}, "files": [{"sha": "137ae4fe66255d0dd57711ff9e582c33ccb90150", "filename": ".travis.yml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -21,8 +21,6 @@ env:\n   - RUST_BACKTRACE=1\n \n before_script:\n-# Linux: install extra stuff for cross-compilation\n-- if [[ \"$TRAVIS_OS_NAME\" == linux ]]; then sudo apt update && sudo apt install gcc-multilib; fi\n # Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n   if [[ \"$TRAVIS_EVENT_TYPE\" == cron ]]; then"}, {"sha": "573f9f6ef6e41d6507b6df0fe30a8fdc4b81fbc7", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -52,18 +52,19 @@ all the same flags as `rustc` (though the ones only affecting code generation\n and linking obviously will have no effect) [and more][miri-flags].\n \n Running the Miri driver requires some fiddling with environment variables, so\n-the `miri` script helps you do that.  For example, you can run the driver on a\n-particular file by doing\n+the `miri` script helps you do that.  For example, you can (cross-)run the\n+driver on a particular file by doing\n \n ```sh\n ./miri run tests/run-pass/format.rs\n ./miri run tests/run-pass/hello.rs --target i686-unknown-linux-gnu\n ```\n \n-and you can run the test suite using:\n+and you can (cross-)run the test suite using:\n \n ```\n ./miri test\n+MIRI_TEST_TARGET=i686-unknown-linux-gnu ./miri test\n ```\n \n `./miri test FILTER` only runs those tests that contain `FILTER` in their\n@@ -104,7 +105,8 @@ and then you can use it as if it was installed by `rustup`.  Make sure you use\n the same toolchain when calling `cargo miri` that you used when installing Miri!\n \n There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n-`./run-test.py` in there to execute it.\n+`./run-test.py` in there to execute it. Like `./miri test`, this respects the\n+`MIRI_TEST_TARGET` environment variable to execute the test for another target.\n \n ## Building Miri with a locally built rustc\n "}, {"sha": "59394830d79bc9be87261ac4398f4e1949dc1338", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -76,6 +76,11 @@ Now you can run your project in Miri:\n The first time you run Miri, it will perform some extra setup and install some\n dependencies.  It will ask you for confirmation before installing anything.\n \n+Miri supports cross-execution: if you want to run the program as if it was a\n+Linux program, you can do `cargo miri run --target x86_64-unknown-linux-gnu`.\n+This is particularly useful if you are using Windows, as the Linux target is\n+much better supported than Windows targets.\n+\n You can pass arguments to Miri after the first `--`, and pass arguments to the\n interpreted program or test suite after the second `--`.  For example, `cargo\n miri run -- -Zmiri-disable-validation` runs the program without validation of"}, {"sha": "29c1f3a2a83e0b4fd40b912a48f6c0532771ed14", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -1 +1 @@\n-98803c182b2ba6ef5dccb6bf501958249295eac0\n+38114ff16e7856f98b2b4be7ab4cd29b38bed59a"}, {"sha": "de6c9fac1d5ee8e3b5b63a7032ce452af4eb1b0e", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -190,7 +190,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n-    // FIXME: We always ignore leaks on some platforms where we do not\n+    // FIXME: We always ignore leaks on some OSs where we do not\n     // correctly implement TLS destructors.\n     let target_os = tcx.sess.target.target.target_os.as_str();\n     let ignore_leaks = config.ignore_leaks || target_os == \"windows\" || target_os == \"macos\";"}, {"sha": "36d3181ce4e4b066e9a00bec825fd56b3d684391", "filename": "src/helpers.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -374,16 +374,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n-    /// Helper function used inside the shims of foreign functions to assert that the target\n-    /// platform is `platform`. It panics showing a message with the `name` of the foreign function\n+    /// Helper function used inside the shims of foreign functions to assert that the target OS\n+    /// is `target_os`. It panics showing a message with the `name` of the foreign function\n     /// if this is not the case.\n-    fn assert_platform(&self, platform: &str, name: &str) {\n+    fn assert_target_os(&self, target_os: &str, name: &str) {\n         assert_eq!(\n             self.eval_context_ref().tcx.sess.target.target.target_os,\n-            platform,\n-            \"`{}` is only available on the `{}` platform\",\n+            target_os,\n+            \"`{}` is only available on the `{}` target OS\",\n             name,\n-            platform,\n+            target_os,\n         )\n     }\n "}, {"sha": "693c80f7deaea168a9ed879e7ec7200aa8d77003", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -126,7 +126,7 @@ impl MemoryExtra {\n                     .insert(Symbol::intern(\"environ\"), this.machine.env_vars.environ.unwrap().ptr.assert_ptr().alloc_id)\n                     .unwrap_none();\n             }\n-            _ => {} // No \"extern statics\" supported on this platform\n+            _ => {} // No \"extern statics\" supported on this target\n         }\n         Ok(())\n     }"}, {"sha": "6827b72427fb1a4a32c5018b3ba4053ac75ebc7d", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -437,7 +437,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             _ => match this.tcx.sess.target.target.target_os.as_str() {\n                 \"linux\" | \"macos\" => return posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 \"windows\" => return windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n-                target => throw_unsup_format!(\"the {} target platform is not supported\", target),\n+                target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n             }\n         };\n "}, {"sha": "d799d8ed9a8a6ea7e9206291b3684637143dc6a8", "filename": "src/shims/fs.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -66,9 +66,9 @@ impl FileHandler {\n \n impl<'mir, 'tcx> EvalContextExtPrivate<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    /// Emulate `stat` or `lstat` on the `macos` platform. This function is not intended to be\n+    /// Emulate `stat` or `lstat` on `macos`. This function is not intended to be\n     /// called directly from `emulate_foreign_item_by_name`, so it does not check if isolation is\n-    /// disabled or if the target platform is the correct one. Please use `macos_stat` or\n+    /// disabled or if the target OS is the correct one. Please use `macos_stat` or\n     /// `macos_lstat` instead.\n     fn macos_stat_or_lstat(\n         &mut self,\n@@ -114,7 +114,7 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n         let blksize_t_layout = this.libc_ty_layout(\"blksize_t\")?;\n         let uint32_t_layout = this.libc_ty_layout(\"uint32_t\")?;\n \n-        // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n+        // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit target.\n         let pad_layout = if this.tcx.sess.target.ptr_width == 64 {\n             uint32_t_layout\n         } else {\n@@ -258,10 +258,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let o_wronly = this.eval_libc_i32(\"O_WRONLY\")?;\n         let o_rdwr = this.eval_libc_i32(\"O_RDWR\")?;\n         // The first two bits of the flag correspond to the access mode in linux, macOS and\n-        // windows. We need to check that in fact the access mode flags for the current platform\n-        // only use these two bits, otherwise we are in an unsupported platform and should error.\n+        // windows. We need to check that in fact the access mode flags for the current target\n+        // only use these two bits, otherwise we are in an unsupported target and should error.\n         if (o_rdonly | o_wronly | o_rdwr) & !0b11 != 0 {\n-            throw_unsup_format!(\"access mode flags on this platform are unsupported\");\n+            throw_unsup_format!(\"access mode flags on this target are unsupported\");\n         }\n         let mut writable = true;\n \n@@ -574,7 +574,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        this.assert_platform(\"macos\", \"stat\");\n+        this.assert_target_os(\"macos\", \"stat\");\n         this.check_no_isolation(\"stat\")?;\n         // `stat` always follows symlinks.\n         this.macos_stat_or_lstat(true, path_op, buf_op)\n@@ -587,7 +587,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        this.assert_platform(\"macos\", \"lstat\");\n+        this.assert_target_os(\"macos\", \"lstat\");\n         this.check_no_isolation(\"lstat\")?;\n         this.macos_stat_or_lstat(false, path_op, buf_op)\n     }\n@@ -599,7 +599,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.assert_platform(\"macos\", \"fstat\");\n+        this.assert_target_os(\"macos\", \"fstat\");\n         this.check_no_isolation(\"fstat\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n@@ -621,7 +621,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.assert_platform(\"linux\", \"statx\");\n+        this.assert_target_os(\"linux\", \"statx\");\n         this.check_no_isolation(\"statx\")?;\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n@@ -685,7 +685,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // the `_mask_op` paramter specifies the file information that the caller requested.\n         // However `statx` is allowed to return information that was not requested or to not\n         // return information that was requested. This `mask` represents the information we can\n-        // actually provide in any host platform.\n+        // actually provide for any target.\n         let mut mask =\n             this.eval_libc(\"STATX_TYPE\")?.to_u32()? | this.eval_libc(\"STATX_SIZE\")?.to_u32()?;\n \n@@ -880,7 +880,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.assert_platform(\"linux\", \"readdir64_r\");\n+        this.assert_target_os(\"linux\", \"readdir64_r\");\n         this.check_no_isolation(\"readdir64_r\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n@@ -967,7 +967,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.assert_platform(\"macos\", \"readdir_r\");\n+        this.assert_target_os(\"macos\", \"readdir_r\");\n         this.check_no_isolation(\"readdir_r\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;"}, {"sha": "703e711972a74b5956e12beaa246a93d9374574c", "filename": "src/shims/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -32,11 +32,11 @@ pub struct CatchUnwindData<'tcx> {\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    /// Check if panicking is supported on this platform, and give a good error otherwise.\n+    /// Check if panicking is supported on this target, and give a good error otherwise.\n     fn check_panic_supported(&self) -> InterpResult<'tcx> {\n         match self.eval_context_ref().tcx.sess.target.target.target_os.as_str() {\n             \"linux\" | \"macos\" => Ok(()),\n-            _ => throw_unsup_format!(\"panicking is not supported on this platform\"),\n+            _ => throw_unsup_format!(\"panicking is not supported on this target\"),\n         }\n     }\n "}, {"sha": "58db60e516883f31d2e74c744fb683ad6e6535c1", "filename": "src/shims/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -20,7 +20,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.assert_platform(\"linux\", \"clock_gettime\");\n+        this.assert_target_os(\"linux\", \"clock_gettime\");\n         this.check_no_isolation(\"clock_gettime\")?;\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n@@ -58,7 +58,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.assert_platform(\"macos\", \"gettimeofday\");\n+        this.assert_target_os(\"macos\", \"gettimeofday\");\n         this.check_no_isolation(\"gettimeofday\")?;\n \n         // Using tz is obsolete and should always be null\n@@ -88,7 +88,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn mach_absolute_time(&self) -> InterpResult<'tcx, u64> {\n         let this = self.eval_context_ref();\n \n-        this.assert_platform(\"macos\", \"mach_absolute_time\");\n+        this.assert_target_os(\"macos\", \"mach_absolute_time\");\n         this.check_no_isolation(\"mach_absolute_time\")?;\n \n         // This returns a u64, with time units determined dynamically by `mach_timebase_info`."}, {"sha": "57b23a6a2afe235d8eb8456a72952a297f6216c6", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -7,6 +7,10 @@\n \n import sys, subprocess, os\n \n+CGREEN  = '\\33[32m'\n+CBOLD   = '\\33[1m'\n+CEND    = '\\33[0m'\n+\n def fail(msg):\n     print(\"\\nTEST FAIL: {}\".format(msg))\n     sys.exit(1)\n@@ -67,6 +71,9 @@ def test_cargo_miri_test():\n \n os.chdir(os.path.dirname(os.path.realpath(__file__)))\n \n+target_str = \" for target {}\".format(os.environ['MIRI_TEST_TARGET']) if 'MIRI_TEST_TARGET' in os.environ else \"\"\n+print(CGREEN + CBOLD + \"## Running `cargo miri` tests{}\".format(target_str) + CEND)\n+\n if not 'MIRI_SYSROOT' in os.environ:\n     # Make sure we got a working sysroot.\n     # (If the sysroot gets built later when output is compared, that leads to test failures.)"}, {"sha": "68d5426802b45880034b6c179261267dc1c97fdd", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -45,7 +45,7 @@ fn num_cpus() {\n \n // FIXME: Remove this `cfg` once we fix https://github.com/rust-lang/miri/issues/1059.\n // We cfg-gate the `should_panic` attribute and the `panic!` itself, so that the test\n-// stdout does not depend on the platform.\n+// stdout does not depend on the target.\n #[test]\n #[cfg_attr(not(windows), should_panic(expected=\"Explicit panic\"))]\n fn do_panic() { // In large, friendly letters :)"}, {"sha": "142ba85c42c77d2c88a9f6366f8a820a2bf92efe", "filename": "tests/compile-fail/panic/windows1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/tests%2Fcompile-fail%2Fpanic%2Fwindows1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/tests%2Fcompile-fail%2Fpanic%2Fwindows1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fwindows1.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -3,7 +3,7 @@\n \n // Test that panics on Windows give a reasonable error message.\n \n-// error-pattern: panicking is not supported on this platform\n+// error-pattern: panicking is not supported on this target\n fn main() {\n     core::panic!(\"this is {}\", \"Windows\");\n }"}, {"sha": "da2cfb59362ef2fe1ca8174d3913e19412fca990", "filename": "tests/compile-fail/panic/windows2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/tests%2Fcompile-fail%2Fpanic%2Fwindows2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/tests%2Fcompile-fail%2Fpanic%2Fwindows2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fwindows2.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -3,7 +3,7 @@\n \n // Test that panics on Windows give a reasonable error message.\n \n-// error-pattern: panicking is not supported on this platform\n+// error-pattern: panicking is not supported on this target\n fn main() {\n     std::panic!(\"this is Windows\");\n }"}, {"sha": "a2e7bf5a7d438ab69b86c0cdb85101fec7bdb795", "filename": "tests/compile-fail/panic/windows3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/tests%2Fcompile-fail%2Fpanic%2Fwindows3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/tests%2Fcompile-fail%2Fpanic%2Fwindows3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fwindows3.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -3,7 +3,7 @@\n \n // Test that panics on Windows give a reasonable error message.\n \n-// error-pattern: panicking is not supported on this platform\n+// error-pattern: panicking is not supported on this target\n #[allow(unconditional_panic)]\n fn main() {\n     let _val = 1/0;"}, {"sha": "02031130b8dcc910b25fa0c0bab7cab1fd58aa1d", "filename": "tests/run-pass/bitop-beyond-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbitop-beyond-alignment.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -33,5 +33,5 @@ fn is_u64_aligned(u: &Tag<u64>) -> bool {\n \n pub fn main() {\n     let x = mk_rec();\n-    is_u64_aligned(&x.t); // the result of this is non-deterministic (even with a fixed seed, results vary between platforms)\n+    is_u64_aligned(&x.t); // the result of this is non-deterministic (even with a fixed seed, results vary between targets)\n }"}, {"sha": "e92c37ff2a8c7a4cd860ec31924d6444897285be", "filename": "tests/run-pass/memchr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/tests%2Frun-pass%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/tests%2Frun-pass%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmemchr.rs?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -2,7 +2,7 @@\n \n use core::slice::memchr::{memchr, memrchr};\n \n-// test fallback implementations on all platforms\n+// test fallback implementations on all targets\n fn matches_one() {\n     assert_eq!(Some(0), memchr(b'a', b\"a\"));\n }"}, {"sha": "8b2453584b09a7d9a9af8ceca244c44192ff5f97", "filename": "travis.sh", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d7d2266414565647374f8e25c03854adde09aab2/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7d2266414565647374f8e25c03854adde09aab2/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=d7d2266414565647374f8e25c03854adde09aab2", "patch": "@@ -2,9 +2,6 @@\n set -euo pipefail\n \n # Determine configuration\n-if [ \"$TRAVIS_OS_NAME\" == linux ]; then\n-  FOREIGN_TARGET=i686-unknown-linux-gnu\n-fi\n export CARGO_EXTRA_FLAGS=\"--all-features\"\n export RUSTC_EXTRA_FLAGS=\"-D warnings\"\n \n@@ -16,19 +13,35 @@ echo\n \n # Test\n function run_tests {\n-    ./miri test --locked\n+  if [ -n \"${MIRI_TEST_TARGET+exists}\" ]; then\n+    echo \"Testing foreign architecture $MIRI_TEST_TARGET\"\n+  else\n+    echo \"Testing host architecture\"\n+  fi\n+\n+  ./miri test --locked\n+  if ! [ -n \"${MIRI_TEST_TARGET+exists}\" ]; then\n+    # Only for host architecture: tests with MIR optimizations\n     MIRI_TEST_FLAGS=\"-Z mir-opt-level=3\" ./miri test\n-    # \"miri test\" has built the sysroot for us, now this should pass without\n-    # any interactive questions.\n-    test-cargo-miri/run-test.py\n+  fi\n+  # \"miri test\" has built the sysroot for us, now this should pass without\n+  # any interactive questions.\n+  test-cargo-miri/run-test.py\n+\n+  echo\n }\n \n-echo \"Test host architecture\"\n+# host\n run_tests\n-echo\n+# cross-test 32bit Linux from everywhere\n+MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n \n-if [ -n \"${FOREIGN_TARGET+exists}\" ]; then\n-  echo \"Test foreign architecture ($FOREIGN_TARGET)\"\n-  MIRI_TEST_TARGET=\"$FOREIGN_TARGET\" run_tests\n-  echo\n+if [ \"$TRAVIS_OS_NAME\" == linux ]; then\n+  # cross-test 64bit macOS from Linux\n+  MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n+  # cross-test 32bit Windows from Linux\n+  MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n+elif [ \"$TRAVIS_OS_NAME\" == osx ]; then\n+  # cross-test 64bit Windows from macOS\n+  MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n fi"}]}