{"sha": "f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMzlkMTBjZjczZDhiYzlhNTdmY2RmZTM4YzVmMGIwYTNhOThiNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-06T16:06:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-06T16:06:33Z"}, "message": "auto merge of #12048 : sanxiyn/rust/crate-config, r=alexcrichton", "tree": {"sha": "745138c6ee6d8053b148d3b803dd9d0f54fd8a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/745138c6ee6d8053b148d3b803dd9d0f54fd8a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "html_url": "https://github.com/rust-lang/rust/commit/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27dcd873cb63ddf2057cbae341be9ccae7b011c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/27dcd873cb63ddf2057cbae341be9ccae7b011c3", "html_url": "https://github.com/rust-lang/rust/commit/27dcd873cb63ddf2057cbae341be9ccae7b011c3"}, {"sha": "5719ff73bfe2f9ed769ad3f454407aac6a727444", "url": "https://api.github.com/repos/rust-lang/rust/commits/5719ff73bfe2f9ed769ad3f454407aac6a727444", "html_url": "https://github.com/rust-lang/rust/commit/5719ff73bfe2f9ed769ad3f454407aac6a727444"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "c3b851b76ac04168eeff0e7fea32989eb4f9275d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "patch": "@@ -176,7 +176,6 @@ pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &Input)\n /// harness if one is to be provided and injection of a dependency on the\n /// standard library and prelude.\n pub fn phase_2_configure_and_expand(sess: Session,\n-                                    cfg: ast::CrateConfig,\n                                     loader: &mut CrateLoader,\n                                     mut crate: ast::Crate)\n                                     -> (ast::Crate, syntax::ast_map::Map) {\n@@ -205,7 +204,6 @@ pub fn phase_2_configure_and_expand(sess: Session,\n     crate = time(time_passes, \"expansion\", crate, |crate| {\n         syntax::ext::expand::expand_crate(sess.parse_sess,\n                                           loader,\n-                                          cfg.clone(),\n                                           crate)\n     });\n     // dump the syntax-time crates\n@@ -520,10 +518,10 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &Input,\n     // possible to keep the peak memory usage low\n     let (outputs, trans) = {\n         let (expanded_crate, ast_map) = {\n-            let crate = phase_1_parse_input(sess, cfg.clone(), input);\n+            let crate = phase_1_parse_input(sess, cfg, input);\n             if stop_after_phase_1(sess) { return; }\n             let loader = &mut Loader::new(sess);\n-            phase_2_configure_and_expand(sess, cfg, loader, crate)\n+            phase_2_configure_and_expand(sess, loader, crate)\n         };\n         let outputs = build_output_filenames(input, outdir, output,\n                                              expanded_crate.attrs, sess);\n@@ -610,12 +608,12 @@ pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n                           input: &Input,\n                           ppm: PpMode) {\n-    let crate = phase_1_parse_input(sess, cfg.clone(), input);\n+    let crate = phase_1_parse_input(sess, cfg, input);\n \n     let (crate, ast_map, is_expanded) = match ppm {\n         PpmExpanded | PpmExpandedIdentified | PpmTyped => {\n             let loader = &mut Loader::new(sess);\n-            let (crate, ast_map) = phase_2_configure_and_expand(sess, cfg, loader, crate);\n+            let (crate, ast_map) = phase_2_configure_and_expand(sess, loader, crate);\n             (crate, Some(ast_map), true)\n         }\n         _ => (crate, None, false)"}, {"sha": "1ad60960de63fedcfad64e76c8ec95a8386eda9a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "patch": "@@ -76,9 +76,9 @@ fn get_ast_and_resolve(cpath: &Path,\n         cfg.push(@dummy_spanned(ast::MetaWord(cfg_)));\n     }\n \n-    let crate = phase_1_parse_input(sess, cfg.clone(), &input);\n+    let crate = phase_1_parse_input(sess, cfg, &input);\n     let loader = &mut Loader::new(sess);\n-    let (crate, ast_map) = phase_2_configure_and_expand(sess, cfg, loader, crate);\n+    let (crate, ast_map) = phase_2_configure_and_expand(sess, loader, crate);\n     let driver::driver::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n     } = phase_3_run_analysis_passes(sess, &crate, ast_map);"}, {"sha": "28e62f8fb299aba1939bf533dabb1ab7c6d38dc0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "patch": "@@ -59,9 +59,9 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n                                       span_diagnostic_handler);\n \n     let cfg = driver::build_configuration(sess);\n-    let crate = driver::phase_1_parse_input(sess, cfg.clone(), &input);\n+    let crate = driver::phase_1_parse_input(sess, cfg, &input);\n     let loader = &mut Loader::new(sess);\n-    let (crate, _) = driver::phase_2_configure_and_expand(sess, cfg, loader, crate);\n+    let (crate, _) = driver::phase_2_configure_and_expand(sess, loader, crate);\n \n     let ctx = @core::DocContext {\n         crate: crate,"}, {"sha": "76aa0e981bd4423ffdabbfef6a519a4fc7315d5d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "patch": "@@ -800,9 +800,8 @@ impl<'a> Folder for MacroExpander<'a> {\n \n pub fn expand_crate(parse_sess: @parse::ParseSess,\n                     loader: &mut CrateLoader,\n-                    cfg: ast::CrateConfig,\n                     c: Crate) -> Crate {\n-    let mut cx = ExtCtxt::new(parse_sess, cfg.clone(), loader);\n+    let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), loader);\n     let mut expander = MacroExpander {\n         extsbox: syntax_expander_table(),\n         cx: &mut cx,\n@@ -1033,7 +1032,7 @@ mod test {\n             ~[],sess);\n         // should fail:\n         let mut loader = ErrLoader;\n-        expand_crate(sess,&mut loader,~[],crate_ast);\n+        expand_crate(sess,&mut loader,crate_ast);\n     }\n \n     // make sure that macros can leave scope for modules\n@@ -1048,7 +1047,7 @@ mod test {\n             ~[],sess);\n         // should fail:\n         let mut loader = ErrLoader;\n-        expand_crate(sess,&mut loader,~[],crate_ast);\n+        expand_crate(sess,&mut loader,crate_ast);\n     }\n \n     // macro_escape modules shouldn't cause macros to leave scope\n@@ -1062,7 +1061,7 @@ mod test {\n             ~[], sess);\n         // should fail:\n         let mut loader = ErrLoader;\n-        expand_crate(sess, &mut loader, ~[], crate_ast);\n+        expand_crate(sess, &mut loader, crate_ast);\n     }\n \n     #[test] fn test_contains_flatten (){\n@@ -1135,7 +1134,7 @@ mod test {\n         let (crate_ast,ps) = string_to_crate_and_sess(crate_str);\n         // the cfg argument actually does matter, here...\n         let mut loader = ErrLoader;\n-        expand_crate(ps,&mut loader,~[],crate_ast)\n+        expand_crate(ps,&mut loader,crate_ast)\n     }\n \n     //fn expand_and_resolve(crate_str: @str) -> ast::crate {"}, {"sha": "050ff5cef325f79c605182db620fbbf7c34f6615", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f039d10cf73d8bc9a57fcdfe38c5f0b0a3a98b5a", "patch": "@@ -74,7 +74,7 @@ pub fn parse_crate_from_file(\n     cfg: ast::CrateConfig,\n     sess: @ParseSess\n ) -> ast::Crate {\n-    new_parser_from_file(sess, /*bad*/ cfg.clone(), input).parse_crate_mod()\n+    new_parser_from_file(sess, cfg, input).parse_crate_mod()\n     // why is there no p.abort_if_errors here?\n }\n \n@@ -94,7 +94,7 @@ pub fn parse_crate_from_source_str(name: ~str,\n                                    sess: @ParseSess)\n                                    -> ast::Crate {\n     let mut p = new_parser_from_source_str(sess,\n-                                           /*bad*/ cfg.clone(),\n+                                           cfg,\n                                            name,\n                                            source);\n     maybe_aborted(p.parse_crate_mod(),p)\n@@ -106,7 +106,7 @@ pub fn parse_crate_attrs_from_source_str(name: ~str,\n                                          sess: @ParseSess)\n                                          -> ~[ast::Attribute] {\n     let mut p = new_parser_from_source_str(sess,\n-                                           /*bad*/ cfg.clone(),\n+                                           cfg,\n                                            name,\n                                            source);\n     let (inner, _) = maybe_aborted(p.parse_inner_attrs_and_next(),p);"}]}