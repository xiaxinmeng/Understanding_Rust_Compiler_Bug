{"sha": "df4ea9c39a355e4cff425cca7d58e7758cb3461c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNGVhOWMzOWEzNTVlNGNmZjQyNWNjYTdkNThlNzc1OGNiMzQ2MWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-01T14:57:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-05T19:45:42Z"}, "message": "rustc: Stop putting hashes in filenames by default\n\nThe compiler will no longer insert a hash or version into a filename by default.\nInstead, all output is simply based off the crate name being compiled. For\nexample, a crate name of `foo` would produce the following outputs:\n\n* bin => foo\n* rlib => libfoo.rlib\n* dylib => libfoo.{so,dylib} or foo.dll\n* staticlib => libfoo.a\n\nThe old behavior has been moved behind a new codegen flag,\n`-C extra-filename=<hash>`. For example, with the \"extra filename\" of `bar` and\na crate name of `foo`, the following outputs would be generated:\n\n* bin => foo (same old behavior)\n* rlib => libfoobar.rlib\n* dylib => libfoobar.{so,dylib} or foobar.dll\n* staticlib => libfoobar.a\n\nThe makefiles have been altered to pass a hash by default to invocations of\n`rustc` so all installed rust libraries will have a hash in their filename. This\nis done because the standard libraries are intended to be installed into\nprivileged directories such as /usr/local. Additionally, it involves very few\nbuild system changes!\n\nRFC: 0035-remove-crate-id\n[breaking-change]", "tree": {"sha": "d42b697e0fe9752583051193a4b72d4237182fbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d42b697e0fe9752583051193a4b72d4237182fbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4ea9c39a355e4cff425cca7d58e7758cb3461c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4ea9c39a355e4cff425cca7d58e7758cb3461c", "html_url": "https://github.com/rust-lang/rust/commit/df4ea9c39a355e4cff425cca7d58e7758cb3461c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4ea9c39a355e4cff425cca7d58e7758cb3461c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e44c2b9bbcb3ca7a7ca9e987b6727fd011f7b91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e44c2b9bbcb3ca7a7ca9e987b6727fd011f7b91a", "html_url": "https://github.com/rust-lang/rust/commit/e44c2b9bbcb3ca7a7ca9e987b6727fd011f7b91a"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "c01410a591b7c91dd7b646e5a2a4620a14fc95a9", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4ea9c39a355e4cff425cca7d58e7758cb3461c/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/df4ea9c39a355e4cff425cca7d58e7758cb3461c/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=df4ea9c39a355e4cff425cca7d58e7758cb3461c", "patch": "@@ -16,6 +16,8 @@\n CFG_RELEASE_NUM=0.11.0\n CFG_RELEASE_LABEL=\n \n+CFG_FILENAME_EXTRA=4e7c5e5c\n+\n ifndef CFG_ENABLE_NIGHTLY\n # This is the normal version string\n CFG_RELEASE=$(CFG_RELEASE_NUM)$(CFG_RELEASE_LABEL)"}, {"sha": "b7a570e327511fb639e7437ba118b6ed53b04990", "filename": "mk/target.mk", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df4ea9c39a355e4cff425cca7d58e7758cb3461c/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/df4ea9c39a355e4cff425cca7d58e7758cb3461c/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=df4ea9c39a355e4cff425cca7d58e7758cb3461c", "patch": "@@ -44,6 +44,13 @@ $(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n    $(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n     $(eval $(call RUST_CRATE_FULLDEPS,$(stage),$(target),$(host),$(crate)))))))\n \n+# NOTE: after a stage0 snap this should be just EXTRA_FILENAME, not with a stage\n+# bound\n+EXTRA_FILENAME_0 =\n+EXTRA_FILENAME_1 = -C extra-filename=-$(CFG_FILENAME_EXTRA)\n+EXTRA_FILENAME_2 = -C extra-filename=-$(CFG_FILENAME_EXTRA)\n+EXTRA_FILENAME_3 = -C extra-filename=-$(CFG_FILENAME_EXTRA)\n+\n # RUST_TARGET_STAGE_N template: This defines how target artifacts are built\n # for all stage/target architecture combinations. This is one giant rule which\n # works as follows:\n@@ -85,7 +92,9 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4):\t\t\t\t    \\\n \t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n \t\t-L \"$$(dir $$(LLVM_STDCPP_LOCATION_$(2)))\" \\\n \t\t$$(RUSTFLAGS_$(4)) \\\n-\t\t--out-dir $$(@D) $$<\n+\t\t--out-dir $$(@D) \\\n+\t\t$$(EXTRA_FILENAME_$(1)) \\\n+\t\t$$<\n \t@touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n \t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))"}, {"sha": "1ad8b0b3698f52ba5239f0eaf6eff1b88ae1279c", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df4ea9c39a355e4cff425cca7d58e7758cb3461c/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4ea9c39a355e4cff425cca7d58e7758cb3461c/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=df4ea9c39a355e4cff425cca7d58e7758cb3461c", "patch": "@@ -588,18 +588,6 @@ pub fn find_crate_name(sess: Option<&Session>,\n     }), None)\n }\n \n-pub fn crate_name_hash(sess: &Session, crate_name: &str) -> String {\n-    // This calculates CMH as defined above. Note that we don't use the path of\n-    // the crate id in the hash because lookups are only done by (name/vers),\n-    // not by path.\n-    let mut s = Sha256::new();\n-    s.input_str(crate_name);\n-    for meta in sess.crate_metadata.borrow().iter() {\n-        s.input_str(meta.as_slice());\n-    }\n-    truncated_hash_result(&mut s).as_slice().slice_to(8).to_string()\n-}\n-\n pub fn build_link_meta(krate: &ast::Crate, name: String) -> LinkMeta {\n     let r = LinkMeta {\n         crate_name: name,\n@@ -880,7 +868,7 @@ pub fn filename_for_input(sess: &Session,\n                           crate_type: config::CrateType,\n                           name: &str,\n                           out_filename: &Path) -> Path {\n-    let libname = format!(\"{}-{}\", name, crate_name_hash(sess, name));\n+    let libname = format!(\"{}{}\", name, sess.opts.cg.extra_filename);\n     match crate_type {\n         config::CrateTypeRlib => {\n             out_filename.with_filename(format!(\"lib{}.rlib\", libname))"}, {"sha": "c7f8b4a62ee4e0719af900ea05718fc084987ceb", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4ea9c39a355e4cff425cca7d58e7758cb3461c/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4ea9c39a355e4cff425cca7d58e7758cb3461c/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=df4ea9c39a355e4cff425cca7d58e7758cb3461c", "patch": "@@ -320,6 +320,8 @@ cgoptions!(\n          \"choose the relocation model to use (llc -relocation-model for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list,\n          \"metadata to mangle symbol names with\"),\n+    extra_filename: String = (\"\".to_string(), parse_string,\n+         \"extra data to put in each output filename\"),\n )\n \n pub fn build_codegen_options(matches: &getopts::Matches) -> CodegenOptions"}, {"sha": "12efecb4a0b707de0742ff67614b4a0bdcd5d3b7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df4ea9c39a355e4cff425cca7d58e7758cb3461c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4ea9c39a355e4cff425cca7d58e7758cb3461c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=df4ea9c39a355e4cff425cca7d58e7758cb3461c", "patch": "@@ -903,13 +903,11 @@ pub fn build_output_filenames(input: &Input,\n                 None => Path::new(\".\")\n             };\n \n-            let mut stem = input.filestem();\n-\n             // If a crate name is present, we use it as the link name\n-            match attr::find_crate_name(attrs) {\n-                None => {}\n-                Some(name) => stem = name.get().to_string(),\n-            }\n+           let stem = match attr::find_crate_name(attrs) {\n+                None => input.filestem(),\n+                Some(name) => name.get().to_string(),\n+            };\n             OutputFilenames {\n                 out_directory: dirpath,\n                 out_filestem: stem,"}]}