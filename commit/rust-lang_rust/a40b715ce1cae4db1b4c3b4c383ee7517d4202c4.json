{"sha": "a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGI3MTVjZTFjYWU0ZGIxYjRjM2I0YzM4M2VlNzUxN2Q0MjAyYzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T10:39:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T10:53:05Z"}, "message": "G: unsafe impl & trait", "tree": {"sha": "6d18d8c47065ea28bb4414a52855ad1c2407c81b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d18d8c47065ea28bb4414a52855ad1c2407c81b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "html_url": "https://github.com/rust-lang/rust/commit/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e5313a7c71d8aa873b418575f56d23b2eac6e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5313a7c71d8aa873b418575f56d23b2eac6e7f", "html_url": "https://github.com/rust-lang/rust/commit/5e5313a7c71d8aa873b418575f56d23b2eac6e7f"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "c2fcc44f5be3988da2900fe5ad899a92f7c62051", "filename": "grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -91,6 +91,8 @@ Grammar(\n         \"USE_ITEM\",\n         \"STATIC_ITEM\",\n         \"CONST_ITEM\",\n+        \"TRAIT_ITEM\",\n+        \"IMPL_ITEM\",\n \n         \"EXTERN_BLOCK\",\n         \"ENUM_VARIANT\","}, {"sha": "3612802e17b9b4cc83e805b556b85a65f44673f6", "filename": "src/parser/event_parser/grammar/items/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -3,6 +3,7 @@ use super::*;\n mod structs;\n mod use_item;\n mod consts;\n+mod traits;\n \n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n@@ -80,6 +81,22 @@ fn item(p: &mut Parser) {\n                 CONST_ITEM\n             }\n         },\n+        // TODO: auto trait\n+        // test unsafe_trait\n+        // unsafe trait T {}\n+        UNSAFE_KW if la == TRAIT_KW => {\n+            p.bump();\n+            traits::trait_item(p);\n+            TRAIT_ITEM\n+        }\n+        // TODO: default impl\n+        // test unsafe_impl\n+        // unsafe impl Foo {}\n+        UNSAFE_KW if la == IMPL_KW => {\n+            p.bump();\n+            traits::impl_item(p);\n+            IMPL_ITEM\n+        }\n         MOD_KW => {\n             mod_item(p);\n             MOD_ITEM\n@@ -131,6 +148,7 @@ fn extern_block(p: &mut Parser) {\n     p.bump();\n     p.expect(R_CURLY);\n }\n+\n fn mod_item(p: &mut Parser) {\n     assert!(p.at(MOD_KW));\n     p.bump();"}, {"sha": "3bef9639f0297715d6f50501aec3e2433baefac3", "filename": "src/parser/event_parser/grammar/items/traits.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Ftraits.rs?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -0,0 +1,17 @@\n+use super::*;\n+\n+pub(super) fn trait_item(p: &mut Parser) {\n+    assert!(p.at(TRAIT_KW));\n+    p.bump();\n+    p.expect(IDENT);\n+    p.expect(L_CURLY);\n+    p.expect(R_CURLY);\n+}\n+\n+pub(super) fn impl_item(p: &mut Parser) {\n+    assert!(p.at(IMPL_KW));\n+    p.bump();\n+    p.expect(IDENT);\n+    p.expect(L_CURLY);\n+    p.expect(R_CURLY);\n+}"}, {"sha": "22c615831556a76b79d409e7f636fd6324d0978d", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -92,6 +92,8 @@ pub enum SyntaxKind {\n     USE_ITEM,\n     STATIC_ITEM,\n     CONST_ITEM,\n+    TRAIT_ITEM,\n+    IMPL_ITEM,\n     EXTERN_BLOCK,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -207,6 +209,8 @@ impl SyntaxKind {\n             USE_ITEM => &SyntaxInfo { name: \"USE_ITEM\" },\n             STATIC_ITEM => &SyntaxInfo { name: \"STATIC_ITEM\" },\n             CONST_ITEM => &SyntaxInfo { name: \"CONST_ITEM\" },\n+            TRAIT_ITEM => &SyntaxInfo { name: \"TRAIT_ITEM\" },\n+            IMPL_ITEM => &SyntaxInfo { name: \"IMPL_ITEM\" },\n             EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },"}, {"sha": "04e021550d88d4f6c75a1654127197b6fca1ed84", "filename": "tests/data/parser/inline/0007_unsafe_trait.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0007_unsafe_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0007_unsafe_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0007_unsafe_trait.rs?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -0,0 +1 @@\n+unsafe trait T {}"}, {"sha": "d6f6a4cfa7ba5e42f790edbea80248dc1126c788", "filename": "tests/data/parser/inline/0007_unsafe_trait.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0007_unsafe_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0007_unsafe_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0007_unsafe_trait.txt?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -0,0 +1,11 @@\n+FILE@[0; 18)\n+  TRAIT_ITEM@[0; 18)\n+    UNSAFE_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    TRAIT_KW@[7; 12)\n+    WHITESPACE@[12; 13)\n+    IDENT@[13; 14) \"T\"\n+    WHITESPACE@[14; 15)\n+    L_CURLY@[15; 16)\n+    R_CURLY@[16; 17)\n+    WHITESPACE@[17; 18)"}, {"sha": "41055f41d965443e7c5f28ea7535a4a6bb436a22", "filename": "tests/data/parser/inline/0008_unsafe_impl.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0008_unsafe_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0008_unsafe_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0008_unsafe_impl.rs?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -0,0 +1 @@\n+unsafe impl Foo {}"}, {"sha": "a88a447cb308bcb0af1d633f6d1b017ffc34484b", "filename": "tests/data/parser/inline/0008_unsafe_impl.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0008_unsafe_impl.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tests%2Fdata%2Fparser%2Finline%2F0008_unsafe_impl.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0008_unsafe_impl.txt?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -0,0 +1,11 @@\n+FILE@[0; 19)\n+  IMPL_ITEM@[0; 19)\n+    UNSAFE_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    IMPL_KW@[7; 11)\n+    WHITESPACE@[11; 12)\n+    IDENT@[12; 15) \"Foo\"\n+    WHITESPACE@[15; 16)\n+    L_CURLY@[16; 17)\n+    R_CURLY@[17; 18)\n+    WHITESPACE@[18; 19)"}, {"sha": "9a84d92fc8b279c6112aee3fad68768ae03e91fd", "filename": "tools/src/bin/collect-tests.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tools%2Fsrc%2Fbin%2Fcollect-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b715ce1cae4db1b4c3b4c383ee7517d4202c4/tools%2Fsrc%2Fbin%2Fcollect-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fbin%2Fcollect-tests.rs?ref=a40b715ce1cae4db1b4c3b4c383ee7517d4202c4", "patch": "@@ -79,16 +79,19 @@ fn collect_tests(s: &str) -> Vec<Test> {\n         .map(str::trim_left)\n         .group_by(|line| line.starts_with(prefix));\n \n-    for (is_comment, block) in comment_blocks.into_iter() {\n+    'outer: for (is_comment, block) in comment_blocks.into_iter() {\n         if !is_comment {\n             continue;\n         }\n         let mut block = block.map(|line| &line[prefix.len()..]);\n-        let first = block.next().unwrap();\n-        if !first.starts_with(\"test \") {\n-            continue;\n-        }\n-        let name = first[\"test \".len()..].to_string();\n+\n+        let name = loop {\n+            match block.next() {\n+                Some(line) if line.starts_with(\"test \") => break line[\"test \".len()..].to_string(),\n+                Some(_) => (),\n+                None => continue 'outer,\n+            }\n+        };\n         let text: String = itertools::join(block.chain(::std::iter::once(\"\")), \"\\n\");\n         assert!(!text.trim().is_empty() && text.ends_with(\"\\n\"));\n         res.push(Test { name, text })"}]}