{"sha": "7e7c11cf560527c4a7c70da63455cc23f4c51235", "node_id": "C_kwDOAAsO6NoAKDdlN2MxMWNmNTYwNTI3YzRhN2M3MGRhNjM0NTVjYzIzZjRjNTEyMzU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-12T22:18:32Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-14T18:59:15Z"}, "message": "Show a note where a macro failed to match\n\nThis shows a small note on what the macro matcher was currently\nprocessing to aid with \"no rules expected the token X\" errors.", "tree": {"sha": "a6dcad97396a59b48fe6ba0b77dd268f90ef8d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6dcad97396a59b48fe6ba0b77dd268f90ef8d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7c11cf560527c4a7c70da63455cc23f4c51235", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQJ6c6CwqdNM68IyZpo6WfYrq7txZRLDmHx9hwr5WHm4aUJ8t9wh8yEp56Rr8Q/GvC7\nkUIu13rld78T5P4dnLOQU=\n-----END SSH SIGNATURE-----", "payload": "tree a6dcad97396a59b48fe6ba0b77dd268f90ef8d0b\nparent 8ef2485bd59cad3674b9c7de29316c20d7ddc6e7\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668291512 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668452355 +0100\n\nShow a note where a macro failed to match\n\nThis shows a small note on what the macro matcher was currently\nprocessing to aid with \"no rules expected the token X\" errors.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7c11cf560527c4a7c70da63455cc23f4c51235", "html_url": "https://github.com/rust-lang/rust/commit/7e7c11cf560527c4a7c70da63455cc23f4c51235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7c11cf560527c4a7c70da63455cc23f4c51235/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "html_url": "https://github.com/rust-lang/rust/commit/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7"}], "stats": {"total": 366, "additions": 355, "deletions": 11}, "files": [{"sha": "d161868edce778677f02f7526acb6addf0069bb8", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -76,6 +76,7 @@ pub(crate) use ParseResult::*;\n use crate::mbe::{macro_rules::Tracker, KleeneOp, TokenTree};\n \n use rustc_ast::token::{self, DocComment, Nonterminal, NonterminalKind, Token};\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorGuaranteed;\n@@ -86,6 +87,7 @@ use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n+use std::fmt::Display;\n \n /// A unit within a matcher that a `MatcherPos` can refer to. Similar to (and derived from)\n /// `mbe::TokenTree`, but designed specifically for fast and easy traversal during matching.\n@@ -96,7 +98,7 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n ///\n /// This means a matcher can be represented by `&[MatcherLoc]`, and traversal mostly involves\n /// simply incrementing the current matcher position index by one.\n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Clone)]\n pub(crate) enum MatcherLoc {\n     Token {\n         token: Token,\n@@ -129,6 +131,46 @@ pub(crate) enum MatcherLoc {\n     Eof,\n }\n \n+impl MatcherLoc {\n+    pub(super) fn span(&self) -> Option<Span> {\n+        match self {\n+            MatcherLoc::Token { token } => Some(token.span),\n+            MatcherLoc::Delimited => None,\n+            MatcherLoc::Sequence { .. } => None,\n+            MatcherLoc::SequenceKleeneOpNoSep { .. } => None,\n+            MatcherLoc::SequenceSep { .. } => None,\n+            MatcherLoc::SequenceKleeneOpAfterSep { .. } => None,\n+            MatcherLoc::MetaVarDecl { span, .. } => Some(*span),\n+            MatcherLoc::Eof => None,\n+        }\n+    }\n+}\n+\n+impl Display for MatcherLoc {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            MatcherLoc::Token { token } | MatcherLoc::SequenceSep { separator: token } => {\n+                write!(f, \"`{}`\", pprust::token_to_string(token))\n+            }\n+            MatcherLoc::MetaVarDecl { bind, kind, .. } => {\n+                write!(f, \"meta-variable `${bind}\")?;\n+                if let Some(kind) = kind {\n+                    write!(f, \":{}\", kind)?;\n+                }\n+                write!(f, \"`\")?;\n+                Ok(())\n+            }\n+            MatcherLoc::Eof => f.write_str(\"end of macro\"),\n+\n+            // These are not printed in the diagnostic\n+            MatcherLoc::Delimited => f.write_str(\"delimiter\"),\n+            MatcherLoc::Sequence { .. } => f.write_str(\"sequence start\"),\n+            MatcherLoc::SequenceKleeneOpNoSep { .. } => f.write_str(\"sequence end\"),\n+            MatcherLoc::SequenceKleeneOpAfterSep { .. } => f.write_str(\"sequence end\"),\n+        }\n+    }\n+}\n+\n pub(super) fn compute_locs(matcher: &[TokenTree]) -> Vec<MatcherLoc> {\n     fn inner(\n         tts: &[TokenTree],\n@@ -398,6 +440,10 @@ impl TtParser {\n         }\n     }\n \n+    pub(super) fn has_no_remaining_items_for_step(&self) -> bool {\n+        self.cur_mps.is_empty()\n+    }\n+\n     /// Process the matcher positions of `cur_mps` until it is empty. In the process, this will\n     /// produce more mps in `next_mps` and `bb_mps`.\n     ///"}, {"sha": "80c2db030fc575ebafbae0117fd31b2741c8c0dc", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -337,7 +337,7 @@ fn expand_macro<'cx>(\n         return result;\n     }\n \n-    let Some((token, label)) = tracker.best_failure else {\n+    let Some((token, label, remaining_matcher)) = tracker.best_failure else {\n         return tracker.result.expect(\"must have encountered Error or ErrorReported\");\n     };\n \n@@ -351,6 +351,12 @@ fn expand_macro<'cx>(\n \n     annotate_doc_comment(&mut err, sess.source_map(), span);\n \n+    if let Some(span) = remaining_matcher.span() {\n+        err.span_note(span, format!(\"while trying to match {remaining_matcher}\"));\n+    } else {\n+        err.note(format!(\"while trying to match {remaining_matcher}\"));\n+    }\n+\n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n     if let Some((arg, comma_span)) = arg.add_comma() {\n         for lhs in lhses {\n@@ -379,17 +385,22 @@ fn expand_macro<'cx>(\n }\n \n /// The tracker used for the slow error path that collects useful info for diagnostics.\n-struct CollectTrackerAndEmitter<'a, 'cx> {\n+struct CollectTrackerAndEmitter<'a, 'cx, 'matcher> {\n     cx: &'a mut ExtCtxt<'cx>,\n+    remaining_matcher: Option<&'matcher MatcherLoc>,\n     /// Which arm's failure should we report? (the one furthest along)\n-    best_failure: Option<(Token, &'static str)>,\n+    best_failure: Option<(Token, &'static str, MatcherLoc)>,\n     root_span: Span,\n     result: Option<Box<dyn MacResult + 'cx>>,\n }\n \n-impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx> {\n-    fn before_match_loc(&mut self, _parser: &TtParser, _matcher: &'matcher MatcherLoc) {\n-        // Empty for now.\n+impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx, 'matcher> {\n+    fn before_match_loc(&mut self, parser: &TtParser, matcher: &'matcher MatcherLoc) {\n+        if self.remaining_matcher.is_none()\n+            || (parser.has_no_remaining_items_for_step() && *matcher != MatcherLoc::Eof)\n+        {\n+            self.remaining_matcher = Some(matcher);\n+        }\n     }\n \n     fn after_arm(&mut self, result: &NamedParseResult) {\n@@ -398,8 +409,16 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx>\n                 unreachable!(\"should not collect detailed info for successful macro match\");\n             }\n             Failure(token, msg) => match self.best_failure {\n-                Some((ref best_token, _)) if best_token.span.lo() >= token.span.lo() => {}\n-                _ => self.best_failure = Some((token.clone(), msg)),\n+                Some((ref best_token, _, _)) if best_token.span.lo() >= token.span.lo() => {}\n+                _ => {\n+                    self.best_failure = Some((\n+                        token.clone(),\n+                        msg,\n+                        self.remaining_matcher\n+                            .expect(\"must have collected matcher already\")\n+                            .clone(),\n+                    ))\n+                }\n             },\n             Error(err_sp, msg) => {\n                 let span = err_sp.substitute_dummy(self.root_span);\n@@ -415,9 +434,9 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx>\n     }\n }\n \n-impl<'a, 'cx> CollectTrackerAndEmitter<'a, 'cx> {\n+impl<'a, 'cx> CollectTrackerAndEmitter<'a, 'cx, '_> {\n     fn new(cx: &'a mut ExtCtxt<'cx>, root_span: Span) -> Self {\n-        Self { cx, best_failure: None, root_span, result: None }\n+        Self { cx, remaining_matcher: None, best_failure: None, root_span, result: None }\n     }\n }\n "}, {"sha": "ec4a001f4d01a6f35e622964ebf0f66f4e74cc02", "filename": "src/test/ui/array-slice-vec/vec-macro-with-comma-only.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-macro-with-comma-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-macro-with-comma-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-macro-with-comma-only.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -3,6 +3,8 @@ error: no rules expected the token `,`\n    |\n LL |     vec![,];\n    |          ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match end of macro\n \n error: aborting due to previous error\n "}, {"sha": "9f73b91aabebfbbe2ee843665c253b02400fdb6b", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -53,6 +53,12 @@ LL |     macro_rules! gimme_a_const {\n ...\n LL |   let _fail = Example::<gimme_a_const!()>;\n    |                         ^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$rusty:ident`\n+  --> $DIR/macro-fail.rs:28:8\n+   |\n+LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n+   |        ^^^^^^^^^^^^^\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/macro-fail.rs:14:33"}, {"sha": "39944622d07b9ec0c1e5a2eceadf6d635399fe96", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -3,12 +3,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:17:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fa83908e6666e70a62d1f87e8fb939c406afd358", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -3,12 +3,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:17:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1a4a94e973327b64958ca5fba2a6e025d46571ec", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -25,12 +25,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:21:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n   --> $DIR/auxiliary/edition-kw-macro-2015.rs:27:23"}, {"sha": "19eb7ac98239eb4b37e9cfc385e038faec0777e8", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -25,12 +25,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:21:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n   --> $DIR/auxiliary/edition-kw-macro-2018.rs:27:23"}, {"sha": "7cc8d8fe9229a62e85bb63f46d7b10961553f574", "filename": "src/test/ui/empty/empty-comment.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! one_arg_macro {\n ...\n LL |     one_arg_macro!(/**/);\n    |     ^^^^^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$fmt:expr`\n+  --> $DIR/empty-comment.rs:6:6\n+   |\n+LL |     ($fmt:expr) => (print!(concat!($fmt, \"\\n\")));\n+   |      ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "af8f54291ff47ce1c30f3d8bc98d821db2989053", "filename": "src/test/ui/fail-simple.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Ffail-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Ffail-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffail-simple.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -3,6 +3,8 @@ error: no rules expected the token `@`\n    |\n LL |     panic!(@);\n    |            ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match end of macro\n \n error: aborting due to previous error\n "}, {"sha": "b04a0eef37139ec322483240df4a7b43f1ecddf9", "filename": "src/test/ui/issues/issue-7970a.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! one_arg_macro {\n ...\n LL |     one_arg_macro!();\n    |     ^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$fmt:expr`\n+  --> $DIR/issue-7970a.rs:2:6\n+   |\n+LL |     ($fmt:expr) => (print!(concat!($fmt, \"\\n\")));\n+   |      ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1e73320e43912a5ea607652e45b917f2507a4156", "filename": "src/test/ui/macros/assert-trailing-junk.with-generic-asset.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.with-generic-asset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.with-generic-asset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.with-generic-asset.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -17,6 +17,8 @@ LL |     assert!(true, \"whatever\" blah);\n    |                             -^^^^ no rules expected this token in macro call\n    |                             |\n    |                             help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: unexpected string literal\n   --> $DIR/assert-trailing-junk.rs:18:18\n@@ -33,6 +35,8 @@ LL |     assert!(true \"whatever\" blah);\n    |                            -^^^^ no rules expected this token in macro call\n    |                            |\n    |                            help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: macro requires an expression as an argument\n   --> $DIR/assert-trailing-junk.rs:22:5"}, {"sha": "1e73320e43912a5ea607652e45b917f2507a4156", "filename": "src/test/ui/macros/assert-trailing-junk.without-generic-asset.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.without-generic-asset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.without-generic-asset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.without-generic-asset.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -17,6 +17,8 @@ LL |     assert!(true, \"whatever\" blah);\n    |                             -^^^^ no rules expected this token in macro call\n    |                             |\n    |                             help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: unexpected string literal\n   --> $DIR/assert-trailing-junk.rs:18:18\n@@ -33,6 +35,8 @@ LL |     assert!(true \"whatever\" blah);\n    |                            -^^^^ no rules expected this token in macro call\n    |                            |\n    |                            help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: macro requires an expression as an argument\n   --> $DIR/assert-trailing-junk.rs:22:5"}, {"sha": "7c45b85bc8d4e811bf256eb3440b6f525d8104bc", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015.stderr", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -12,6 +12,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:26:11\n@@ -21,6 +23,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:27:11\n@@ -30,6 +34,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:29:5\n@@ -39,6 +45,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:30:15\n@@ -48,6 +60,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:31:15\n@@ -57,6 +75,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:32:15\n@@ -66,6 +90,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:36:5\n@@ -75,6 +105,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:37:15\n@@ -84,6 +120,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:38:15\n@@ -93,6 +135,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:39:15\n@@ -102,6 +150,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "696520b28268a0ce81cec0f0b14187b2116a4c72", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.stderr", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -12,6 +12,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:26:11\n@@ -21,6 +23,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:27:11\n@@ -30,6 +34,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:29:5\n@@ -39,6 +45,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:30:15\n@@ -48,6 +60,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:31:15\n@@ -57,6 +75,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:32:15\n@@ -66,6 +90,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:36:5\n@@ -75,6 +105,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:37:15\n@@ -84,6 +120,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:38:15\n@@ -93,6 +135,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:39:15\n@@ -102,6 +150,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "e1ed87f94355152fd51799f9b9a1c1feb2ce8deb", "filename": "src/test/ui/macros/macro-non-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! m { ($x:lifetime) => { } }\n ...\n LL |     m!(a);\n    |        ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$x:lifetime`\n+  --> $DIR/macro-non-lifetime.rs:3:19\n+   |\n+LL | macro_rules! m { ($x:lifetime) => { } }\n+   |                   ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "81877a29ed8ae74593cc50fd5ce4001439ec27c8", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -14,6 +14,12 @@ LL |     foo!(a b);\n    |           -^ no rules expected this token in macro call\n    |           |\n    |           help: missing comma here\n+   |\n+note: while trying to match meta-variable `$a:ident`\n+  --> $DIR/missing-comma.rs:2:6\n+   |\n+LL |     ($a:ident) => ();\n+   |      ^^^^^^^^\n \n error: no rules expected the token `e`\n   --> $DIR/missing-comma.rs:23:21\n@@ -25,6 +31,12 @@ LL |     foo!(a, b, c, d e);\n    |                    -^ no rules expected this token in macro call\n    |                    |\n    |                    help: missing comma here\n+   |\n+note: while trying to match meta-variable `$d:ident`\n+  --> $DIR/missing-comma.rs:5:36\n+   |\n+LL |     ($a:ident, $b:ident, $c:ident, $d:ident) => ();\n+   |                                    ^^^^^^^^\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:25:18\n@@ -36,6 +48,12 @@ LL |     foo!(a, b, c d, e);\n    |                 -^ no rules expected this token in macro call\n    |                 |\n    |                 help: missing comma here\n+   |\n+note: while trying to match meta-variable `$c:ident`\n+  --> $DIR/missing-comma.rs:4:26\n+   |\n+LL |     ($a:ident, $b:ident, $c:ident) => ();\n+   |                          ^^^^^^^^\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:27:18\n@@ -45,6 +63,12 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a, b, c d e);\n    |                  ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$c:ident`\n+  --> $DIR/missing-comma.rs:4:26\n+   |\n+LL |     ($a:ident, $b:ident, $c:ident) => ();\n+   |                          ^^^^^^^^\n \n error: unexpected end of macro invocation\n   --> $DIR/missing-comma.rs:29:23\n@@ -54,6 +78,12 @@ LL | macro_rules! bar {\n ...\n LL |     bar!(Level::Error, );\n    |                       ^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$arg:tt`\n+  --> $DIR/missing-comma.rs:10:19\n+   |\n+LL |     ($lvl:expr, $($arg:tt)+) => {}\n+   |                   ^^^^^^^\n \n error: no rules expected the token `,`\n   --> $DIR/missing-comma.rs:32:38\n@@ -63,6 +93,12 @@ LL | macro_rules! check {\n ...\n LL |     check!(<str as Debug>::fmt, \"fmt\",);\n    |                                      ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$expected:expr`\n+  --> $DIR/missing-comma.rs:14:14\n+   |\n+LL |     ($ty:ty, $expected:expr) => {};\n+   |              ^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "5bbd5439098335afff89b48dec3a06c73b2f7591", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -10,6 +10,14 @@ LL |     n!(a $nt_item b);\n LL | complex_nonterminal!(enum E {});\n    | ------------------------------- in this macro invocation\n    |\n+note: while trying to match `enum E {}`\n+  --> $DIR/nonterminal-matching.rs:15:15\n+   |\n+LL |     macro n(a $nt_item b) {\n+   |               ^^^^^^^^\n+...\n+LL | complex_nonterminal!(enum E {});\n+   | ------------------------------- in this macro invocation\n    = note: this error originates in the macro `complex_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "21e47da075716b64cbc8ae341768bd01837aa28c", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -10,6 +10,7 @@ LL |         my_faulty_macro!(bcd);\n LL |     my_faulty_macro!();\n    |     ------------------ in this macro invocation\n    |\n+   = note: while trying to match end of macro\n    = note: this error originates in the macro `my_faulty_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro"}, {"sha": "acc2099bbc6a80eb03af1a538ea444cc7d6188aa", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail-2018.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! accept_pat {\n ...\n LL | accept_pat!(p | q);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$p:pat`\n+  --> $DIR/or-patterns-syntactic-fail-2018.rs:9:6\n+   |\n+LL |     ($p:pat) => {};\n+   |      ^^^^^^\n \n error: no rules expected the token `|`\n   --> $DIR/or-patterns-syntactic-fail-2018.rs:13:13\n@@ -15,6 +21,12 @@ LL | macro_rules! accept_pat {\n ...\n LL | accept_pat!(|p| q);\n    |             ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$p:pat`\n+  --> $DIR/or-patterns-syntactic-fail-2018.rs:9:6\n+   |\n+LL |     ($p:pat) => {};\n+   |      ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eaeb62d2cfd98515e8b4ed394ed0c80afc6f35fc", "filename": "src/test/ui/parser/macro/macro-doc-comments-1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -9,6 +9,12 @@ LL |     //! Inner\n    |     |\n    |     no rules expected this token in macro call\n    |     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match\n+   |\n+note: while trying to match `[`\n+  --> $DIR/macro-doc-comments-1.rs:2:7\n+   |\n+LL |     (#[$outer:meta]) => ()\n+   |       ^\n \n error: aborting due to previous error\n "}, {"sha": "1dcd95f6fad4f235b810e4ed696d72b5873c2510", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -9,6 +9,12 @@ LL |     /// Outer\n    |     |\n    |     no rules expected this token in macro call\n    |     outer doc comments expand to `#[doc = \"...\"]`, which is what this macro attempted to match\n+   |\n+note: while trying to match `!`\n+  --> $DIR/macro-doc-comments-2.rs:2:7\n+   |\n+LL |     (#![$inner:meta]) => ()\n+   |       ^\n \n error: aborting due to previous error\n "}, {"sha": "96fe11911b7a0af0e12e6c6aad2cf17cf31433f7", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -72,6 +72,12 @@ LL |     macro_rules! use_expr {\n ...\n LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$e:expr`\n+  --> $DIR/feature-gate.rs:61:10\n+   |\n+LL |         ($e:expr) => {\n+   |          ^^^^^^^\n \n error[E0658]: `if let` guards are experimental\n   --> $DIR/feature-gate.rs:7:12"}, {"sha": "7a43b71fc8b890799133c495be8d7d10eecbe19b", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -18,6 +18,12 @@ LL |     macro_rules! use_expr {\n ...\n LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$e:expr`\n+  --> $DIR/feature-gate.rs:50:10\n+   |\n+LL |         ($e:expr) => {\n+   |          ^^^^^^^\n \n error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:14:16"}, {"sha": "b0e4d88f67186eafb8ff2e7900a17e6bf7826d22", "filename": "src/test/ui/underscore-ident-matcher.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c11cf560527c4a7c70da63455cc23f4c51235/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr?ref=7e7c11cf560527c4a7c70da63455cc23f4c51235", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! identity {\n ...\n LL |     let identity!(_) = 10;\n    |                   ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$i:ident`\n+  --> $DIR/underscore-ident-matcher.rs:2:6\n+   |\n+LL |     ($i: ident) => (\n+   |      ^^^^^^^^^\n \n error: aborting due to previous error\n "}]}