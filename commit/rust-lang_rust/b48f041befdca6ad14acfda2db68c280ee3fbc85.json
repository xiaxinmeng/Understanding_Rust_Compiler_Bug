{"sha": "b48f041befdca6ad14acfda2db68c280ee3fbc85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGYwNDFiZWZkY2E2YWQxNGFjZmRhMmRiNjhjMjgwZWUzZmJjODU=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-16T16:59:28Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-06-25T09:17:00Z"}, "message": "Added the `cargo dev remove` command for convenience", "tree": {"sha": "4fd318849c144030811c9604d3da9b937bb91744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fd318849c144030811c9604d3da9b937bb91744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48f041befdca6ad14acfda2db68c280ee3fbc85", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDVnwwACgkQHKDfKvWd\naKUrBxAAsB5RIblSOrS0zJT7n5OyzQpcUV8+HLFNbJHIUrXAIPHwNOy+IKBp9YyH\nIX7blt+EHElRyZt/Dj9yRaimfiG2yXM1rvSArNQF/Qeq/cJ2DNCBZ+G/yPTlzPJB\ndxaZfEc2+R6mGqifhc5Wkkb2G9KvgMl1rQCeI2A8E9w3dUsJ7Yk32AXTzgDjgYx6\nd9xzv+Dzuh3fGjMBtfZ8J7TZnK3dlTycbkQ08L02gUBBXnwWibPETrROIbPcyi+Q\nI/BcMCQMHdVbDE7KZxa+N8BiGrPxfRTHZw554KU6NNA0rDDVkn4so0GwB+xx5/fj\nm1C1maA7PaibaLqXhNe+tzpe5K4htH/AtVz01INSc4Cc0qJXWjz0QuV3/AIBE0WE\nd2ldR2vmzLVE1EXv/hXBqLn7X7yPz0wDRt4fEPVWzHT9CPmcnY7BkArn7r1n9U/V\n9m/3Ht2opdKoieEd4thJQViUCI1sqxFoMlaV4TwX57ekKm0G3vlannecn2b0OwJm\nh8mlqIq7Cnz7cpLO9afT/YNVeC6uXn7mRh+NC81VhaLBT1YH10qbVXPfNhoOr1lA\nUGC0u61mywnxxAld1V9CUlA77i6v8R15/7Ny+fcm9Ei2cAZR3C74v7xMw8oKvG7Z\nUcYdQ2Pv/2aLo0PO+Hj7QuJaVWOj+uXwGtCAv+2kP8gQuKK5fB0=\n=iiXl\n-----END PGP SIGNATURE-----", "payload": "tree 4fd318849c144030811c9604d3da9b937bb91744\nparent 3d0984975e555e122499e58d3fbc20e99b7be589\nauthor xFrednet <xFrednet@gmail.com> 1623862768 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1624612620 +0200\n\nAdded the `cargo dev remove` command for convenience\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48f041befdca6ad14acfda2db68c280ee3fbc85", "html_url": "https://github.com/rust-lang/rust/commit/b48f041befdca6ad14acfda2db68c280ee3fbc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48f041befdca6ad14acfda2db68c280ee3fbc85/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0984975e555e122499e58d3fbc20e99b7be589", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0984975e555e122499e58d3fbc20e99b7be589", "html_url": "https://github.com/rust-lang/rust/commit/3d0984975e555e122499e58d3fbc20e99b7be589"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "70c3d93ed47333a4c1249f804212f3479b74f22b", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b48f041befdca6ad14acfda2db68c280ee3fbc85/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f041befdca6ad14acfda2db68c280ee3fbc85/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=b48f041befdca6ad14acfda2db68c280ee3fbc85", "patch": "@@ -38,9 +38,14 @@ fn main() {\n         },\n         (\"setup\", Some(sub_command)) => match sub_command.subcommand() {\n             (\"intellij\", Some(matches)) => setup::intellij::run(matches.value_of(\"rustc-repo-path\")),\n-            (\"git-hook\", Some(matches)) => setup::git_hook::run(matches.is_present(\"force-override\")),\n+            (\"git-hook\", Some(matches)) => setup::git_hook::install_hook(matches.is_present(\"force-override\")),\n             _ => {},\n         },\n+        (\"remove\", Some(sub_command)) => {\n+            if let (\"git-hook\", Some(_)) = sub_command.subcommand() {\n+                setup::git_hook::remove_hook();\n+            }\n+        },\n         (\"serve\", Some(matches)) => {\n             let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n             let lint = matches.value_of(\"lint\");\n@@ -173,6 +178,12 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         ),\n                 ),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"remove\")\n+                .about(\"Support for undoing changes done by the setup command\")\n+                .setting(AppSettings::ArgRequiredElseHelp)\n+                .subcommand(SubCommand::with_name(\"git-hook\").about(\"Remove any existing pre-commit git hook\")),\n+        )\n         .subcommand(\n             SubCommand::with_name(\"serve\")\n                 .about(\"Launch a local 'ALL the Clippy Lints' website in a browser\")"}, {"sha": "beb07a073fe5d630ab7ab84e242177985f8d67b4", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b48f041befdca6ad14acfda2db68c280ee3fbc85/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f041befdca6ad14acfda2db68c280ee3fbc85/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=b48f041befdca6ad14acfda2db68c280ee3fbc85", "patch": "@@ -6,11 +6,11 @@ use std::path::Path;\n /// the hook if `clippy_dev` would be used in the rust tree. The hook also references this tool\n /// for formatting and should therefor only be used in a normal clone of clippy\n const REPO_GIT_DIR: &str = \".git\";\n-const HOOK_SOURCE_PATH: &str = \"util/etc/pre-commit.sh\";\n-const HOOK_TARGET_PATH: &str = \".git/hooks/pre-commit\";\n+const HOOK_SOURCE_FILE: &str = \"util/etc/pre-commit.sh\";\n+const HOOK_TARGET_FILE: &str = \".git/hooks/pre-commit\";\n \n-pub fn run(force_override: bool) {\n-    if let Err(_) = check_precondition(force_override) {\n+pub fn install_hook(force_override: bool) {\n+    if check_precondition(force_override).is_err() {\n         return;\n     }\n \n@@ -23,11 +23,14 @@ pub fn run(force_override: bool) {\n     // that we can check in a file with execution permissions and the sync it to create\n     // a file with the flag set. We then copy this file here. The copy function will also\n     // include the `execute` permission.\n-    match fs::copy(HOOK_SOURCE_PATH, HOOK_TARGET_PATH) {\n-        Ok(_) => println!(\"Git hook successfully installed :)\"),\n+    match fs::copy(HOOK_SOURCE_FILE, HOOK_TARGET_FILE) {\n+        Ok(_) => {\n+            println!(\"note: the hook can be removed with `cargo dev remove git-hook`\");\n+            println!(\"Git hook successfully installed :)\");\n+        },\n         Err(err) => println!(\n             \"error: unable to copy `{}` to `{}` ({})\",\n-            HOOK_SOURCE_PATH, HOOK_TARGET_PATH, err\n+            HOOK_SOURCE_FILE, HOOK_TARGET_FILE, err\n         ),\n     }\n }\n@@ -41,21 +44,33 @@ fn check_precondition(force_override: bool) -> Result<(), ()> {\n     }\n \n     // Make sure that we don't override an existing hook by accident\n-    let path = Path::new(HOOK_TARGET_PATH);\n+    let path = Path::new(HOOK_TARGET_FILE);\n     if path.exists() {\n-        if !force_override {\n-            println!(\"warn: The found `.git` directory already has a commit hook\");\n+        if force_override || super::ask_yes_no_question(\"Do you want to override the existing pre-commit hook it?\") {\n+            return delete_git_hook_file(path);\n         }\n+        return Err(());\n+    }\n+\n+    Ok(())\n+}\n \n-        if force_override || super::ask_yes_no_question(\"Do you want to override it?\") {\n-            if fs::remove_file(path).is_err() {\n-                println!(\"error: unable to delete existing pre-commit git hook\");\n-                return Err(());\n-            }\n-        } else {\n-            return Err(());\n+pub fn remove_hook() {\n+    let path = Path::new(HOOK_TARGET_FILE);\n+    if path.exists() {\n+        if delete_git_hook_file(path).is_ok() {\n+            println!(\"Git hook successfully removed :)\");\n         }\n+    } else {\n+        println!(\"No pre-commit hook was found. You're good to go :)\");\n     }\n+}\n \n-    Ok(())\n+fn delete_git_hook_file(path: &Path) -> Result<(), ()> {\n+    if fs::remove_file(path).is_err() {\n+        println!(\"error: unable to delete existing pre-commit git hook\");\n+        Err(())\n+    } else {\n+        Ok(())\n+    }\n }"}]}