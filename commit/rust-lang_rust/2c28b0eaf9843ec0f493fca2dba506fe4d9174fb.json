{"sha": "2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "node_id": "C_kwDOAAsO6NoAKDJjMjhiMGVhZjk4NDNlYzBmNDkzZmNhMmRiYTUwNmZlNGQ5MTc0ZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T00:44:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T00:44:53Z"}, "message": "Auto merge of #96134 - Dylan-DPC:rollup-ejug3yq, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95346 (Stablize `const_extern_fn` for \"Rust\" and \"C\")\n - #95933 (htmldocck: Compare HTML tree instead of plain text html)\n - #96105 (Make the debug output for `TargetSelection` less verbose)\n - #96112 (Strict provenance lint diagnostics improvements)\n - #96119 (update Miri)\n - #96124 (to_digit tweak)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5911ea08448072405a169ece70c78e940b5445d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5911ea08448072405a169ece70c78e940b5445d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "html_url": "https://github.com/rust-lang/rust/commit/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563ef23529ae800b2b136cabdc71a81d86a75f58", "url": "https://api.github.com/repos/rust-lang/rust/commits/563ef23529ae800b2b136cabdc71a81d86a75f58", "html_url": "https://github.com/rust-lang/rust/commit/563ef23529ae800b2b136cabdc71a81d86a75f58"}, {"sha": "b47265e65866cf94ee3bb82908bbc5138ed1f5a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b47265e65866cf94ee3bb82908bbc5138ed1f5a7", "html_url": "https://github.com/rust-lang/rust/commit/b47265e65866cf94ee3bb82908bbc5138ed1f5a7"}], "stats": {"total": 285, "additions": 185, "deletions": 100}, "files": [{"sha": "649af48e48adf624311ba4f4e37a6ef2c69c6783", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -58,9 +58,22 @@ struct PostExpansionVisitor<'a> {\n }\n \n impl<'a> PostExpansionVisitor<'a> {\n-    fn check_abi(&self, abi: ast::StrLit) {\n+    fn check_abi(&self, abi: ast::StrLit, constness: ast::Const) {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n+        if let ast::Const::Yes(_) = constness {\n+            match symbol_unescaped.as_str() {\n+                // Stable\n+                \"Rust\" | \"C\" => {}\n+                abi => gate_feature_post!(\n+                    &self,\n+                    const_extern_fn,\n+                    span,\n+                    &format!(\"`{}` as a `const fn` ABI is unstable\", abi)\n+                ),\n+            }\n+        }\n+\n         match symbol_unescaped.as_str() {\n             // Stable\n             \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n@@ -261,9 +274,9 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn check_extern(&self, ext: ast::Extern) {\n+    fn check_extern(&self, ext: ast::Extern, constness: ast::Const) {\n         if let ast::Extern::Explicit(abi) = ext {\n-            self.check_abi(abi);\n+            self.check_abi(abi, constness);\n         }\n     }\n \n@@ -437,7 +450,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n                 if let Some(abi) = foreign_module.abi {\n-                    self.check_abi(abi);\n+                    self.check_abi(abi, ast::Const::No);\n                 }\n             }\n \n@@ -560,7 +573,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_ty(&mut self, ty: &'a ast::Ty) {\n         match ty.kind {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n-                self.check_extern(bare_fn_ty.ext);\n+                // Function pointers cannot be `const`\n+                self.check_extern(bare_fn_ty.ext, ast::Const::No);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n@@ -660,18 +674,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_fn(&mut self, fn_kind: FnKind<'a>, span: Span, _: NodeId) {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in `visit_assoc_item` below.\n-            self.check_extern(header.ext);\n-\n-            if let (ast::Const::Yes(_), ast::Extern::Implicit)\n-            | (ast::Const::Yes(_), ast::Extern::Explicit(_)) = (header.constness, header.ext)\n-            {\n-                gate_feature_post!(\n-                    &self,\n-                    const_extern_fn,\n-                    span,\n-                    \"`const extern fn` definitions are unstable\"\n-                );\n-            }\n+            self.check_extern(header.ext, header.constness);\n         }\n \n         if fn_kind.ctxt() != Some(FnCtxt::Foreign) && fn_kind.decl().c_variadic() {"}, {"sha": "bb387064e27fe0e583c16f63a565cf8e96d94383", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -523,6 +523,9 @@ impl<'a> Parser<'a> {\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {\n+            // If we ever start to allow `const fn()`, then update\n+            // feature gating for `#![feature(const_extern_fn)]` to\n+            // cover it.\n             self.error_fn_ptr_bad_qualifier(whole_span, span, \"const\");\n         }\n         if let ast::Async::Yes { span, .. } = asyncness {"}, {"sha": "a153997599aba5dafb5822172b1bc1ffbd1c8ccd", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -993,20 +993,33 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 ));\n \n                 let msg = \"use `.addr()` to obtain the address of a pointer\";\n-                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n-                    let scalar_cast = match t_c {\n-                        ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n-                        _ => format!(\" as {}\", self.cast_ty),\n-                    };\n+\n+                let expr_prec = self.expr.precedence().order();\n+                let needs_parens = expr_prec < rustc_ast::util::parser::PREC_POSTFIX;\n+\n+                let scalar_cast = match t_c {\n+                    ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n+                    _ => format!(\" as {}\", self.cast_ty),\n+                };\n+\n+                let cast_span = self.expr_span.shrink_to_hi().to(self.cast_span);\n+\n+                if needs_parens {\n+                    let suggestions = vec![\n+                        (self.expr_span.shrink_to_lo(), String::from(\"(\")),\n+                        (cast_span, format!(\").addr(){scalar_cast}\")),\n+                    ];\n+\n+                    err.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n+                } else {\n                     err.span_suggestion(\n-                        self.span,\n+                        cast_span,\n                         msg,\n-                        format!(\"({snippet}).addr(){scalar_cast}\"),\n-                        Applicability::MaybeIncorrect\n+                        format!(\".addr(){scalar_cast}\"),\n+                        Applicability::MaybeIncorrect,\n                     );\n-                } else {\n-                    err.help(msg);\n                 }\n+\n                 err.help(\n                     \"if you can't comply with strict provenance and need to expose the pointer \\\n                     provenance you can use `.expose_addr()` instead\"\n@@ -1028,16 +1041,12 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     self.expr_ty, self.cast_ty\n                 ));\n                 let msg = \"use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\";\n-                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n-                    err.span_suggestion(\n-                        self.span,\n-                        msg,\n-                        format!(\"(...).with_addr({snippet})\"),\n-                        Applicability::HasPlaceholders,\n-                    );\n-                } else {\n-                    err.help(msg);\n-                }\n+                let suggestions = vec![\n+                    (self.expr_span.shrink_to_lo(), String::from(\"(...).with_addr(\")),\n+                    (self.expr_span.shrink_to_hi().to(self.cast_span), String::from(\")\")),\n+                ];\n+\n+                err.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n                 err.help(\n                     \"if you can't comply with strict provenance and don't have a pointer with \\\n                     the correct provenance you can use `std::ptr::from_exposed_addr()` instead\""}, {"sha": "0bec38a877ed5fcd2ce0d6a7f908077f25691604", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -343,10 +343,10 @@ impl char {\n                   without modifying the original\"]\n     #[inline]\n     pub const fn to_digit(self, radix: u32) -> Option<u32> {\n-        assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n         // If not a digit, a number greater than radix will be created.\n         let mut digit = (self as u32).wrapping_sub('0' as u32);\n         if radix > 10 {\n+            assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n             if digit < 10 {\n                 return Some(digit);\n             }"}, {"sha": "d7c29f6900a534028c53746ff9c1182f58380ddb", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -221,7 +221,7 @@ impl FromStr for LlvmLibunwind {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n     file: Option<Interned<String>>,\n@@ -276,6 +276,12 @@ impl fmt::Display for TargetSelection {\n     }\n }\n \n+impl fmt::Debug for TargetSelection {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self)\n+    }\n+}\n+\n impl PartialEq<&str> for TargetSelection {\n     fn eq(&self, other: &&str) -> bool {\n         self.triple == *other"}, {"sha": "df215f318239ec9e7120a0c58d83592704166cae", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -285,6 +285,11 @@ def flatten(node):\n     return ''.join(acc)\n \n \n+def make_xml(text):\n+    xml = ET.XML('<xml>%s</xml>' % text)\n+    return xml\n+\n+\n def normalize_xpath(path):\n     path = path.replace(\"{{channel}}\", channel)\n     if path.startswith('//'):\n@@ -401,7 +406,7 @@ def get_tree_count(tree, path):\n     return len(tree.findall(path))\n \n \n-def check_snapshot(snapshot_name, tree, normalize_to_text):\n+def check_snapshot(snapshot_name, actual_tree, normalize_to_text):\n     assert rust_test_path.endswith('.rs')\n     snapshot_path = '{}.{}.{}'.format(rust_test_path[:-3], snapshot_name, 'html')\n     try:\n@@ -414,11 +419,15 @@ def check_snapshot(snapshot_name, tree, normalize_to_text):\n             raise FailedCheck('No saved snapshot value')\n \n     if not normalize_to_text:\n-        actual_str = ET.tostring(tree).decode('utf-8')\n+        actual_str = ET.tostring(actual_tree).decode('utf-8')\n     else:\n-        actual_str = flatten(tree)\n+        actual_str = flatten(actual_tree)\n+\n+    if not expected_str \\\n+        or (not normalize_to_text and\n+            not compare_tree(make_xml(actual_str), make_xml(expected_str), stderr)) \\\n+        or (normalize_to_text and actual_str != expected_str):\n \n-    if expected_str != actual_str:\n         if bless:\n             with open(snapshot_path, 'w') as snapshot_file:\n                 snapshot_file.write(actual_str)\n@@ -430,6 +439,59 @@ def check_snapshot(snapshot_name, tree, normalize_to_text):\n             print()\n             raise FailedCheck('Actual snapshot value is different than expected')\n \n+\n+# Adapted from https://github.com/formencode/formencode/blob/3a1ba9de2fdd494dd945510a4568a3afeddb0b2e/formencode/doctest_xml_compare.py#L72-L120\n+def compare_tree(x1, x2, reporter=None):\n+    if x1.tag != x2.tag:\n+        if reporter:\n+            reporter('Tags do not match: %s and %s' % (x1.tag, x2.tag))\n+        return False\n+    for name, value in x1.attrib.items():\n+        if x2.attrib.get(name) != value:\n+            if reporter:\n+                reporter('Attributes do not match: %s=%r, %s=%r'\n+                         % (name, value, name, x2.attrib.get(name)))\n+            return False\n+    for name in x2.attrib:\n+        if name not in x1.attrib:\n+            if reporter:\n+                reporter('x2 has an attribute x1 is missing: %s'\n+                         % name)\n+            return False\n+    if not text_compare(x1.text, x2.text):\n+        if reporter:\n+            reporter('text: %r != %r' % (x1.text, x2.text))\n+        return False\n+    if not text_compare(x1.tail, x2.tail):\n+        if reporter:\n+            reporter('tail: %r != %r' % (x1.tail, x2.tail))\n+        return False\n+    cl1 = list(x1)\n+    cl2 = list(x2)\n+    if len(cl1) != len(cl2):\n+        if reporter:\n+            reporter('children length differs, %i != %i'\n+                     % (len(cl1), len(cl2)))\n+        return False\n+    i = 0\n+    for c1, c2 in zip(cl1, cl2):\n+        i += 1\n+        if not compare_tree(c1, c2, reporter=reporter):\n+            if reporter:\n+                reporter('children %i do not match: %s'\n+                         % (i, c1.tag))\n+            return False\n+    return True\n+\n+\n+def text_compare(t1, t2):\n+    if not t1 and not t2:\n+        return True\n+    if t1 == '*' or t2 == '*':\n+        return True\n+    return (t1 or '').strip() == (t2 or '').strip()\n+\n+\n def stderr(*args):\n     if sys.version_info.major < 3:\n         file = codecs.getwriter('utf-8')(sys.stderr)"}, {"sha": "f7bed91b03787bd899c01c2189ae16f28f7e31e1", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -1,10 +1,13 @@\n-// Check that `const extern fn` and `const unsafe extern fn` are feature-gated.\n+// Check that `const extern fn` and `const unsafe extern fn` are feature-gated\n+// for certain ABIs.\n \n-const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n-const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n-const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern \"C\" fn bar2() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern \"Rust\" fn bar3() {} //~ ERROR `const extern fn` definitions are unstable\n+const extern fn foo1() {}\n+const extern \"C\" fn foo2() {}\n+const extern \"Rust\" fn foo3() {}\n+const extern \"cdecl\" fn foo4() {} //~ ERROR `cdecl` as a `const fn` ABI is unstable\n+const unsafe extern fn bar1() {}\n+const unsafe extern \"C\" fn bar2() {}\n+const unsafe extern \"Rust\" fn bar3() {}\n+const unsafe extern \"cdecl\" fn bar4() {} //~ ERROR `cdecl` as a `const fn` ABI is unstable\n \n fn main() {}"}, {"sha": "f8c3107bd221aa40b2f56682e3a871748b60ecb0", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -1,57 +1,21 @@\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:3:1\n+error[E0658]: `cdecl` as a `const fn` ABI is unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:7:14\n    |\n-LL | const extern fn foo1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const extern \"cdecl\" fn foo4() {}\n+   |              ^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:4:1\n+error[E0658]: `cdecl` as a `const fn` ABI is unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:11:21\n    |\n-LL | const extern \"C\" fn foo2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern \"cdecl\" fn bar4() {}\n+   |                     ^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:5:1\n-   |\n-LL | const extern \"Rust\" fn foo3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:6:1\n-   |\n-LL | const unsafe extern fn bar1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:7:1\n-   |\n-LL | const unsafe extern \"C\" fn bar2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:8:1\n-   |\n-LL | const unsafe extern \"Rust\" fn bar3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "c85934aa3ba153f0f1f22dbc91c2bc2afeb61029", "filename": "src/test/ui/lint/lint-strict-provenance-fuzzy-casts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -13,7 +13,7 @@ LL | #![deny(fuzzy_provenance_casts)]\n help: use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\n    |\n LL |     let dangling = (...).with_addr(16_usize);\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++        ~\n \n error: aborting due to previous error\n "}, {"sha": "9799a05375682729832a496ced23d7957a0800a6", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -8,4 +8,11 @@ fn main() {\n \n     let addr_32bit = &x as *const u8 as u32;\n     //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+\n+    // don't add unnecessary parens in the suggestion\n+    let ptr = &x as *const u8;\n+    let ptr_addr = ptr as usize;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+    let ptr_addr_32bit = ptr as u32;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n }"}, {"sha": "05178b34b11462738b2df489f468f90d683f0b32", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.stderr", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -2,22 +2,50 @@ error: under strict provenance it is considered bad style to cast pointer `*cons\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:6:23\n    |\n LL |     let addr: usize = &x as *const u8 as usize;\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:2:9\n    |\n LL | #![deny(lossy_provenance_casts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+help: use `.addr()` to obtain the address of a pointer\n+   |\n+LL |     let addr: usize = (&x as *const u8).addr();\n+   |                       +               ~~~~~~~~\n \n error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:9:22\n    |\n LL |     let addr_32bit = &x as *const u8 as u32;\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr() as u32`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+help: use `.addr()` to obtain the address of a pointer\n+   |\n+LL |     let addr_32bit = (&x as *const u8).addr() as u32;\n+   |                      +               ~~~~~~~~~~~~~~~\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:14:20\n+   |\n+LL |     let ptr_addr = ptr as usize;\n+   |                    ^^^---------\n+   |                       |\n+   |                       help: use `.addr()` to obtain the address of a pointer: `.addr()`\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:16:26\n+   |\n+LL |     let ptr_addr_32bit = ptr as u32;\n+   |                          ^^^-------\n+   |                             |\n+   |                             help: use `.addr()` to obtain the address of a pointer: `.addr() as u32`\n    |\n    = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "1ef91e122775060acb1fbda2c9a366891af3ea89", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "patch": "@@ -1 +1 @@\n-Subproject commit c568f32f165d86aba51ec544756c3c833acbabd7\n+Subproject commit 1ef91e122775060acb1fbda2c9a366891af3ea89"}]}