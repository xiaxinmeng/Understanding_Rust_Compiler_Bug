{"sha": "1194c6369eda50c55d421bd6641edee1e0ebbfe2", "node_id": "C_kwDOAAsO6NoAKDExOTRjNjM2OWVkYTUwYzU1ZDQyMWJkNjY0MWVkZWUxZTBlYmJmZTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T00:00:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T00:00:23Z"}, "message": "Auto merge of #8932 - dswij:pr-8879, r=giraffate\n\n`needless_return` checks for macro expr in return stmts\n\ncloses #8879\n\nMacro expressions in returns were not checked by `needless_return`. The test added in [this commit](https://github.com/rust-lang/rust-clippy/commit/6396a7a425293745b1810566851c17cf08d36985#diff-a869168cfafb7e6e5010feb76a16389d6c96d59e98113dee5c2b304a5160e43aR51-R55) seems to have regressed.\n\nchangelog: [`needless_return`] checks for macro exprs in return statements", "tree": {"sha": "03570bb0f0c086b64c12728bc7381d14940bad82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03570bb0f0c086b64c12728bc7381d14940bad82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1194c6369eda50c55d421bd6641edee1e0ebbfe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1194c6369eda50c55d421bd6641edee1e0ebbfe2", "html_url": "https://github.com/rust-lang/rust/commit/1194c6369eda50c55d421bd6641edee1e0ebbfe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1194c6369eda50c55d421bd6641edee1e0ebbfe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97e5449a70f0a933d4c3c75527211010d511cac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e5449a70f0a933d4c3c75527211010d511cac5", "html_url": "https://github.com/rust-lang/rust/commit/97e5449a70f0a933d4c3c75527211010d511cac5"}, {"sha": "678dcdd2be649e83eb1ce766f3ba141030f69e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/678dcdd2be649e83eb1ce766f3ba141030f69e49", "html_url": "https://github.com/rust-lang/rust/commit/678dcdd2be649e83eb1ce766f3ba141030f69e49"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "8989db54f6c5fb20bb19c3c3a1ef9540c32320d6", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1194c6369eda50c55d421bd6641edee1e0ebbfe2/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1194c6369eda50c55d421bd6641edee1e0ebbfe2/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=1194c6369eda50c55d421bd6641edee1e0ebbfe2", "patch": "@@ -97,7 +97,7 @@ pub(super) fn check<'tcx>(\n         let func_snippet = snippet(cx, map_arg.span, \"..\");\n         let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n                        `and_then(..)` instead\";\n-        return span_lint_and_sugg(\n+        span_lint_and_sugg(\n             cx,\n             OPTION_MAP_OR_NONE,\n             expr.span,\n@@ -110,7 +110,7 @@ pub(super) fn check<'tcx>(\n         let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n                        `ok()` instead\";\n         let self_snippet = snippet(cx, recv.span, \"..\");\n-        return span_lint_and_sugg(\n+        span_lint_and_sugg(\n             cx,\n             RESULT_MAP_OR_INTO_OPTION,\n             expr.span,"}, {"sha": "e525eba53e2aa6332852ad0d91ae7b4c67869b72", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1194c6369eda50c55d421bd6641edee1e0ebbfe2/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1194c6369eda50c55d421bd6641edee1e0ebbfe2/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=1194c6369eda50c55d421bd6641edee1e0ebbfe2", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -226,14 +226,10 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n     }\n     match inner_span {\n         Some(inner_span) => {\n-            if in_external_macro(cx.tcx.sess, inner_span) || inner_span.from_expansion() {\n-                return;\n-            }\n-\n+            let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-                if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                    diag.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n-                }\n+                let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n+                diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n             });\n         },\n         None => match replacement {\n@@ -287,7 +283,7 @@ struct BorrowVisitor<'a, 'tcx> {\n \n impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if self.borrows {\n+        if self.borrows || expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "7c828430b78533301ed3bd325a6787eca61de872", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1194c6369eda50c55d421bd6641edee1e0ebbfe2/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1194c6369eda50c55d421bd6641edee1e0ebbfe2/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=1194c6369eda50c55d421bd6641edee1e0ebbfe2", "patch": "@@ -53,7 +53,7 @@ fn test_closure() {\n }\n \n fn test_macro_call() -> i32 {\n-    return the_answer!();\n+    the_answer!()\n }\n \n fn test_void_fun() {\n@@ -175,7 +175,7 @@ async fn async_test_closure() {\n }\n \n async fn async_test_macro_call() -> i32 {\n-    return the_answer!();\n+    the_answer!()\n }\n \n async fn async_test_void_fun() {\n@@ -223,4 +223,10 @@ fn let_else() {\n     let Some(1) = Some(1) else { return };\n }\n \n+fn needless_return_macro() -> String {\n+    let _ = \"foo\";\n+    let _ = \"bar\";\n+    format!(\"Hello {}\", \"world!\")\n+}\n+\n fn main() {}"}, {"sha": "fe82af00e67503c9591cb4bc338cc20f49f03b98", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1194c6369eda50c55d421bd6641edee1e0ebbfe2/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1194c6369eda50c55d421bd6641edee1e0ebbfe2/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=1194c6369eda50c55d421bd6641edee1e0ebbfe2", "patch": "@@ -223,4 +223,10 @@ fn let_else() {\n     let Some(1) = Some(1) else { return };\n }\n \n+fn needless_return_macro() -> String {\n+    let _ = \"foo\";\n+    let _ = \"bar\";\n+    return format!(\"Hello {}\", \"world!\");\n+}\n+\n fn main() {}"}, {"sha": "4c8be47b025e21b60c8d348d4d908ce842175b6c", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1194c6369eda50c55d421bd6641edee1e0ebbfe2/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1194c6369eda50c55d421bd6641edee1e0ebbfe2/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=1194c6369eda50c55d421bd6641edee1e0ebbfe2", "patch": "@@ -48,6 +48,12 @@ error: unneeded `return` statement\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:56:5\n+   |\n+LL |     return the_answer!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+\n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:60:5\n    |\n@@ -168,6 +174,12 @@ error: unneeded `return` statement\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:178:5\n+   |\n+LL |     return the_answer!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+\n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:182:5\n    |\n@@ -204,5 +216,11 @@ error: unneeded `return` statement\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n-error: aborting due to 34 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:229:5\n+   |\n+LL |     return format!(\"Hello {}\", \"world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `format!(\"Hello {}\", \"world!\")`\n+\n+error: aborting due to 37 previous errors\n "}]}