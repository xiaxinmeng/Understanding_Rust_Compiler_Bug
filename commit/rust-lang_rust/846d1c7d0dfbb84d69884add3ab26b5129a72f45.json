{"sha": "846d1c7d0dfbb84d69884add3ab26b5129a72f45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NmQxYzdkMGRmYmI4NGQ2OTg4NGFkZDNhYjI2YjUxMjlhNzJmNDU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-27T12:01:41Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-02T12:29:29Z"}, "message": "rand: replace Rng.shuffle's functionality with .shuffle_mut.\n\nDeprecates the `shuffle_mut` name in favour of `shuffle` too.\n\nIn future there will be many different types of owned\nvectors/vector-likes (e.g. DST's ~[], Vec, SmallVec, Rope, ...), and so\nprivileging just `Vec` with the \"functional\" `shuffle` method is silly.", "tree": {"sha": "7a8c7b02d20b755fd2a6f5f02019e8b04a63f8ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a8c7b02d20b755fd2a6f5f02019e8b04a63f8ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/846d1c7d0dfbb84d69884add3ab26b5129a72f45", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/846d1c7d0dfbb84d69884add3ab26b5129a72f45", "html_url": "https://github.com/rust-lang/rust/commit/846d1c7d0dfbb84d69884add3ab26b5129a72f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/846d1c7d0dfbb84d69884add3ab26b5129a72f45/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d85560a98940e7938d0b074d7d0a9ec6a417c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d85560a98940e7938d0b074d7d0a9ec6a417c5", "html_url": "https://github.com/rust-lang/rust/commit/c5d85560a98940e7938d0b074d7d0a9ec6a417c5"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "25e680ae77d711b1bc94fc255afa1858f3731d4a", "filename": "src/librand/lib.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/846d1c7d0dfbb84d69884add3ab26b5129a72f45/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846d1c7d0dfbb84d69884add3ab26b5129a72f45/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=846d1c7d0dfbb84d69884add3ab26b5129a72f45", "patch": "@@ -293,21 +293,7 @@ pub trait Rng {\n         }\n     }\n \n-    /// Shuffle a vec\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// use rand::{task_rng, Rng};\n-    ///\n-    /// println!(\"{}\", task_rng().shuffle(vec!(1,2,3)));\n-    /// ```\n-    fn shuffle<T>(&mut self, mut values: Vec<T>) -> Vec<T> {\n-        self.shuffle_mut(values.as_mut_slice());\n-        values\n-    }\n-\n-    /// Shuffle a mutable vector in place.\n+    /// Shuffle a mutable slice in place.\n     ///\n     /// # Example\n     ///\n@@ -316,12 +302,12 @@ pub trait Rng {\n     ///\n     /// let mut rng = task_rng();\n     /// let mut y = [1,2,3];\n-    /// rng.shuffle_mut(y);\n-    /// println!(\"{:?}\", y);\n-    /// rng.shuffle_mut(y);\n-    /// println!(\"{:?}\", y);\n+    /// rng.shuffle(y);\n+    /// println!(\"{}\", y.as_slice());\n+    /// rng.shuffle(y);\n+    /// println!(\"{}\", y.as_slice());\n     /// ```\n-    fn shuffle_mut<T>(&mut self, values: &mut [T]) {\n+    fn shuffle<T>(&mut self, values: &mut [T]) {\n         let mut i = values.len();\n         while i >= 2u {\n             // invariant: elements with index >= i have been locked in place.\n@@ -331,6 +317,12 @@ pub trait Rng {\n         }\n     }\n \n+    /// Shuffle a mutable slice in place.\n+    #[deprecated=\"renamed to `.shuffle`\"]\n+    fn shuffle_mut<T>(&mut self, values: &mut [T]) {\n+        self.shuffle(values)\n+    }\n+\n     /// Randomly sample up to `n` elements from an iterator.\n     ///\n     /// # Example\n@@ -811,16 +803,28 @@ mod test {\n     #[test]\n     fn test_shuffle() {\n         let mut r = task_rng();\n-        let empty = Vec::<int>::new();\n-        assert_eq!(r.shuffle(vec!()), empty);\n-        assert_eq!(r.shuffle(vec!(1, 1, 1)), vec!(1, 1, 1));\n+        let mut empty: &mut [int] = &mut [];\n+        r.shuffle(empty);\n+        let mut one = [1];\n+        r.shuffle(one);\n+        assert_eq!(one.as_slice(), &[1]);\n+\n+        let mut two = [1, 2];\n+        r.shuffle(two);\n+        assert!(two == [1, 2] || two == [2, 1]);\n+\n+        let mut x = [1, 1, 1];\n+        r.shuffle(x);\n+        assert_eq!(x.as_slice(), &[1, 1, 1]);\n     }\n \n     #[test]\n     fn test_task_rng() {\n         let mut r = task_rng();\n         r.gen::<int>();\n-        assert_eq!(r.shuffle(vec!(1, 1, 1)), vec!(1, 1, 1));\n+        let mut v = [1, 1, 1];\n+        r.shuffle(v);\n+        assert_eq!(v.as_slice(), &[1, 1, 1]);\n         assert_eq!(r.gen_range(0u, 1u), 0u);\n     }\n \n@@ -934,7 +938,7 @@ mod bench {\n         let mut rng = XorShiftRng::new().unwrap();\n         let x : &mut[uint] = [1,..100];\n         bh.iter(|| {\n-            rng.shuffle_mut(x);\n+            rng.shuffle(x);\n         })\n     }\n }"}]}