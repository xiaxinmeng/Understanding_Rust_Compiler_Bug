{"sha": "6d2cb6c688ce0a8aa309236dd04b45149f8eee3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMmNiNmM2ODhjZTBhOGFhMzA5MjM2ZGQwNGI0NTE0OWY4ZWVlM2M=", "commit": {"author": {"name": "Bastien Dejean", "email": "nihilhill@gmail.com", "date": "2015-09-17T16:53:01Z"}, "committer": {"name": "Bastien Dejean", "email": "nihilhill@gmail.com", "date": "2015-09-17T16:53:01Z"}, "message": "trpl: Fix off-by-one highest memory address", "tree": {"sha": "bb98a1cc0cb313a804486ff9e4d01bc7473ca6a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb98a1cc0cb313a804486ff9e4d01bc7473ca6a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2cb6c688ce0a8aa309236dd04b45149f8eee3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2cb6c688ce0a8aa309236dd04b45149f8eee3c", "html_url": "https://github.com/rust-lang/rust/commit/6d2cb6c688ce0a8aa309236dd04b45149f8eee3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2cb6c688ce0a8aa309236dd04b45149f8eee3c/comments", "author": {"login": "baskerville", "id": 159419, "node_id": "MDQ6VXNlcjE1OTQxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/159419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/baskerville", "html_url": "https://github.com/baskerville", "followers_url": "https://api.github.com/users/baskerville/followers", "following_url": "https://api.github.com/users/baskerville/following{/other_user}", "gists_url": "https://api.github.com/users/baskerville/gists{/gist_id}", "starred_url": "https://api.github.com/users/baskerville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/baskerville/subscriptions", "organizations_url": "https://api.github.com/users/baskerville/orgs", "repos_url": "https://api.github.com/users/baskerville/repos", "events_url": "https://api.github.com/users/baskerville/events{/privacy}", "received_events_url": "https://api.github.com/users/baskerville/received_events", "type": "User", "site_admin": false}, "committer": {"login": "baskerville", "id": 159419, "node_id": "MDQ6VXNlcjE1OTQxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/159419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/baskerville", "html_url": "https://github.com/baskerville", "followers_url": "https://api.github.com/users/baskerville/followers", "following_url": "https://api.github.com/users/baskerville/following{/other_user}", "gists_url": "https://api.github.com/users/baskerville/gists{/gist_id}", "starred_url": "https://api.github.com/users/baskerville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/baskerville/subscriptions", "organizations_url": "https://api.github.com/users/baskerville/orgs", "repos_url": "https://api.github.com/users/baskerville/repos", "events_url": "https://api.github.com/users/baskerville/events{/privacy}", "received_events_url": "https://api.github.com/users/baskerville/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be0d0ad924f9fd0162d31669b58bc39734e91d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be0d0ad924f9fd0162d31669b58bc39734e91d8", "html_url": "https://github.com/rust-lang/rust/commit/2be0d0ad924f9fd0162d31669b58bc39734e91d8"}], "stats": {"total": 172, "additions": 86, "deletions": 86}, "files": [{"sha": "aca736ef2ac3b63848cef087a7f7168e05ff2ece", "filename": "src/doc/trpl/the-stack-and-the-heap.md", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cb6c688ce0a8aa309236dd04b45149f8eee3c/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cb6c688ce0a8aa309236dd04b45149f8eee3c/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md?ref=6d2cb6c688ce0a8aa309236dd04b45149f8eee3c", "patch": "@@ -217,18 +217,18 @@ on the heap. The actual value of the box is a structure which has a pointer to\n it allocates some memory for the heap, and puts `5` there. The memory now looks\n like this:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 5                |\n-| ...             | ...  | ...              |\n-| 1               | y    | 42               |\n-| 0               | x    | \u2192 2<sup>30</sup> |\n-\n-We have 2<sup>30</sup> in our hypothetical computer with 1GB of RAM. And since\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 5                      |\n+| ...                  | ...  | ...                    |\n+| 1                    | y    | 42                     |\n+| 0                    | x    | \u2192 (2<sup>30</sup>) - 1 |\n+\n+We have (2<sup>30</sup>) - 1 in our hypothetical computer with 1GB of RAM. And since\n our stack grows from zero, the easiest place to allocate memory is from the\n other end. So our first value is at the highest place in memory. And the value\n of the struct at `x` has a [raw pointer][rawpointer] to the place we\u2019ve\n-allocated on the heap, so the value of `x` is 2<sup>30</sup>, the memory\n+allocated on the heap, so the value of `x` is (2<sup>30</sup>) - 1, the memory\n location we\u2019ve asked for.\n \n [rawpointer]: raw-pointers.html\n@@ -244,18 +244,18 @@ layout of a program which has been running for a while now:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-| 2<sup>30</sup>       |      | 5                      |\n-| (2<sup>30</sup>) - 1 |      |                        |\n+| (2<sup>30</sup>) - 1 |      | 5                      |\n | (2<sup>30</sup>) - 2 |      |                        |\n-| (2<sup>30</sup>) - 3 |      | 42                     |\n+| (2<sup>30</sup>) - 3 |      |                        |\n+| (2<sup>30</sup>) - 4 |      | 42                     |\n | ...                  | ...  | ...                    |\n-| 3                    | y    | \u2192 (2<sup>30</sup>) - 3 |\n+| 3                    | y    | \u2192 (2<sup>30</sup>) - 4 |\n | 2                    | y    | 42                     |\n | 1                    | y    | 42                     |\n-| 0                    | x    | \u2192 2<sup>30</sup>       |\n+| 0                    | x    | \u2192 (2<sup>30</sup>) - 1 |\n \n In this case, we\u2019ve allocated four things on the heap, but deallocated two of\n-them. There\u2019s a gap between 2<sup>30</sup> and (2<sup>30</sup>) - 3 which isn\u2019t\n+them. There\u2019s a gap between (2<sup>30</sup>) - 1 and (2<sup>30</sup>) - 4 which isn\u2019t\n currently being used. The specific details of how and why this happens depends\n on what kind of strategy you use to manage the heap. Different programs can use\n different \u2018memory allocators\u2019, which are libraries that manage this for you.\n@@ -366,105 +366,105 @@ fn main() {\n \n First, we call `main()`:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 20               |\n-| ...             | ...  | ...              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n We allocate memory for `j`, `i`, and `h`. `i` is on the heap, and so has a\n value pointing there.\n \n Next, at the end of `main()`, `foo()` gets called:\n \n-| Address         | Name | Value           |\n-|-----------------|------|-----------------|\n-| 2<sup>30</sup>  |      | 20              |\n-| ...             | ...  | ...             |\n-| 5               | z    | \u2192 4             |\n-| 4               | y    | 10              |\n-| 3               | x    | \u2192 0             |\n-| 2               | j    | \u2192 0             |\n-| 1               | i    | \u2192 2<sup>30</sup>|\n-| 0               | h    | 3               |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n Space gets allocated for `x`, `y`, and `z`. The argument `x` has the same value\n as `j`, since that\u2019s what we passed it in. It\u2019s a pointer to the `0` address,\n since `j` points at `h`.\n \n Next, `foo()` calls `baz()`, passing `z`:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 20               |\n-| ...             | ...  | ...              |\n-| 7               | g    | 100              |\n-| 6               | f    | \u2192 4              |\n-| 5               | z    | \u2192 4              |\n-| 4               | y    | 10               |\n-| 3               | x    | \u2192 0              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 7                    | g    | 100                    |\n+| 6                    | f    | \u2192 4                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n We\u2019ve allocated memory for `f` and `g`. `baz()` is very short, so when it\u2019s\n over, we get rid of its stack frame:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 20               |\n-| ...             | ...  | ...              |\n-| 5               | z    | \u2192 4              |\n-| 4               | y    | 10               |\n-| 3               | x    | \u2192 0              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n Next, `foo()` calls `bar()` with `x` and `z`:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-|  2<sup>30</sup>      |      | 20                     |\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| (2<sup>30</sup>) - 2 |      | 5                      |\n | ...                  | ...  | ...                    |\n | 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n | 8                    | c    | 5                      |\n | 7                    | b    | \u2192 4                    |\n | 6                    | a    | \u2192 0                    |\n | 5                    | z    | \u2192 4                    |\n | 4                    | y    | 10                     |\n | 3                    | x    | \u2192 0                    |\n | 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n | 0                    | h    | 3                      |\n \n We end up allocating another value on the heap, and so we have to subtract one\n-from 2<sup>30</sup>. It\u2019s easier to just write that than `1,073,741,823`. In any\n+from (2<sup>30</sup>) - 1. It\u2019s easier to just write that than `1,073,741,822`. In any\n case, we set up the variables as usual.\n \n At the end of `bar()`, it calls `baz()`:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-|  2<sup>30</sup>      |      | 20                     |\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| (2<sup>30</sup>) - 2 |      | 5                      |\n | ...                  | ...  | ...                    |\n | 12                   | g    | 100                    |\n | 11                   | f    | \u2192 9                    |\n | 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n | 8                    | c    | 5                      |\n | 7                    | b    | \u2192 4                    |\n | 6                    | a    | \u2192 0                    |\n | 5                    | z    | \u2192 4                    |\n | 4                    | y    | 10                     |\n | 3                    | x    | \u2192 0                    |\n | 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n | 0                    | h    | 3                      |\n \n With this, we\u2019re at our deepest point! Whew! Congrats for following along this\n@@ -474,44 +474,44 @@ After `baz()` is over, we get rid of `f` and `g`:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-|  2<sup>30</sup>      |      | 20                     |\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| (2<sup>30</sup>) - 2 |      | 5                      |\n | ...                  | ...  | ...                    |\n | 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n | 8                    | c    | 5                      |\n | 7                    | b    | \u2192 4                    |\n | 6                    | a    | \u2192 0                    |\n | 5                    | z    | \u2192 4                    |\n | 4                    | y    | 10                     |\n | 3                    | x    | \u2192 0                    |\n | 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n | 0                    | h    | 3                      |\n \n Next, we return from `bar()`. `d` in this case is a `Box<T>`, so it also frees\n-what it points to: (2<sup>30</sup>) - 1.\n-\n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-|  2<sup>30</sup> |      | 20               |\n-| ...             | ...  | ...              |\n-| 5               | z    | \u2192 4              |\n-| 4               | y    | 10               |\n-| 3               | x    | \u2192 0              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+what it points to: (2<sup>30</sup>) - 2.\n+\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n And after that, `foo()` returns:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-|  2<sup>30</sup> |      | 20               |\n-| ...             | ...  | ...              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n And then, finally, `main()`, which cleans the rest up. When `i` is `Drop`ped,\n it will clean up the last of the heap too."}]}