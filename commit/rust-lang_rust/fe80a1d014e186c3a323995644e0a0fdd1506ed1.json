{"sha": "fe80a1d014e186c3a323995644e0a0fdd1506ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlODBhMWQwMTRlMTg2YzNhMzIzOTk1NjQ0ZTBhMGZkZDE1MDZlZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-30T01:26:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-30T01:26:18Z"}, "message": "Rollup merge of #38587 - GuillaumeGomez:arc_docs, r=frewsxcv\n\nAdd missing urls in Arc docs\n\nr? @frewsxcv", "tree": {"sha": "5121d3a9f2fa1214e5c357bd290ce27aef1c57d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5121d3a9f2fa1214e5c357bd290ce27aef1c57d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe80a1d014e186c3a323995644e0a0fdd1506ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe80a1d014e186c3a323995644e0a0fdd1506ed1", "html_url": "https://github.com/rust-lang/rust/commit/fe80a1d014e186c3a323995644e0a0fdd1506ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe80a1d014e186c3a323995644e0a0fdd1506ed1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcfd50474450cdf6b858d4f033f201264370a730", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfd50474450cdf6b858d4f033f201264370a730", "html_url": "https://github.com/rust-lang/rust/commit/bcfd50474450cdf6b858d4f033f201264370a730"}, {"sha": "f4bd94f779f3e3815ba9d68dd1d39a224cce8760", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bd94f779f3e3815ba9d68dd1d39a224cce8760", "html_url": "https://github.com/rust-lang/rust/commit/f4bd94f779f3e3815ba9d68dd1d39a224cce8760"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "e1a240a0d2ebad258669f4b17edc5614bca190b9", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe80a1d014e186c3a323995644e0a0fdd1506ed1/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe80a1d014e186c3a323995644e0a0fdd1506ed1/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=fe80a1d014e186c3a323995644e0a0fdd1506ed1", "patch": "@@ -55,24 +55,24 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [`RwLock`][rwlock], or one of the [`Atomic`][atomic] types.\n ///\n /// `Arc` uses atomic operations for reference counting, so `Arc`s can be\n-/// sent between threads. In other words, `Arc<T>` implements [`Send`][send]\n-/// as long as `T` implements `Send` and [`Sync`][sync]. The disadvantage is\n+/// sent between threads. In other words, `Arc<T>` implements [`Send`]\n+/// as long as `T` implements [`Send`] and [`Sync`][sync]. The disadvantage is\n /// that atomic operations are more expensive than ordinary memory accesses.\n /// If you are not sharing reference-counted values between threads, consider\n-/// using [`rc::Rc`][rc] for lower overhead. `Rc` is a safe default, because\n-/// the compiler will catch any attempt to send an `Rc` between threads.\n+/// using [`rc::Rc`] for lower overhead. [`Rc`] is a safe default, because\n+/// the compiler will catch any attempt to send an [`Rc`] between threads.\n /// However, a library might choose `Arc` in order to give library consumers\n /// more flexibility.\n ///\n /// The [`downgrade`][downgrade] method can be used to create a non-owning\n-/// [`Weak`][weak] pointer. A `Weak` pointer can be [`upgrade`][upgrade]d\n-/// to an `Arc`, but this will return [`None`][option] if the value has\n-/// already been dropped.\n+/// [`Weak`][weak] pointer. A [`Weak`][weak] pointer can be [`upgrade`][upgrade]d\n+/// to an `Arc`, but this will return [`None`] if the value has already been\n+/// dropped.\n ///\n /// A cycle between `Arc` pointers will never be deallocated. For this reason,\n-/// `Weak` is used to break cycles. For example, a tree could have strong\n-/// `Arc` pointers from parent nodes to children, and `Weak` pointers from\n-/// children back to their parents.\n+/// [`Weak`][weak] is used to break cycles. For example, a tree could have\n+/// strong `Arc` pointers from parent nodes to children, and [`Weak`][weak]\n+/// pointers from children back to their parents.\n ///\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n /// so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\n@@ -86,22 +86,22 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// Arc::downgrade(&my_arc);\n /// ```\n ///\n-/// `Weak<T>` does not auto-dereference to `T`, because the value may have\n+/// [`Weak<T>`][weak] does not auto-dereference to `T`, because the value may have\n /// already been destroyed.\n ///\n /// [arc]: struct.Arc.html\n /// [weak]: struct.Weak.html\n-/// [rc]: ../../std/rc/struct.Rc.html\n+/// [`Rc`]: ../../std/rc/struct.Rc.html\n /// [clone]: ../../std/clone/trait.Clone.html#tymethod.clone\n /// [mutex]: ../../std/sync/struct.Mutex.html\n /// [rwlock]: ../../std/sync/struct.RwLock.html\n /// [atomic]: ../../std/sync/atomic/index.html\n-/// [send]: ../../std/marker/trait.Send.html\n+/// [`Send`]: ../../std/marker/trait.Send.html\n /// [sync]: ../../std/marker/trait.Sync.html\n /// [deref]: ../../std/ops/trait.Deref.html\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n-/// [option]: ../../std/option/enum.Option.html\n+/// [`None`]: ../../std/option/enum.Option.html#variant.None\n /// [assoc]: ../../book/method-syntax.html#associated-functions\n ///\n /// # Examples\n@@ -127,7 +127,9 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// }\n /// ```\n ///\n-/// Sharing a mutable `AtomicUsize`:\n+/// Sharing a mutable [`AtomicUsize`]:\n+///\n+/// [`AtomicUsize`]: ../../std/sync/atomic/struct.AtomicUsize.html\n ///\n /// ```no_run\n /// use std::sync::Arc;"}]}