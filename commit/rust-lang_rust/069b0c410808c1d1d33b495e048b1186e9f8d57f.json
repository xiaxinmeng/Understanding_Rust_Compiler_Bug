{"sha": "069b0c410808c1d1d33b495e048b1186e9f8d57f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OWIwYzQxMDgwOGMxZDFkMzNiNDk1ZTA0OGIxMTg2ZTlmOGQ1N2Y=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-03T14:20:44Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-03T14:25:41Z"}, "message": "Cleanup\n\n`for` loops are no longer closures.", "tree": {"sha": "94b6fae7696502689e011ee5fa6a2a32ec2ab4c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b6fae7696502689e011ee5fa6a2a32ec2ab4c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069b0c410808c1d1d33b495e048b1186e9f8d57f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069b0c410808c1d1d33b495e048b1186e9f8d57f", "html_url": "https://github.com/rust-lang/rust/commit/069b0c410808c1d1d33b495e048b1186e9f8d57f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069b0c410808c1d1d33b495e048b1186e9f8d57f/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bae4a763df95c436ce9f1286b1d593e67218932", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bae4a763df95c436ce9f1286b1d593e67218932", "html_url": "https://github.com/rust-lang/rust/commit/6bae4a763df95c436ce9f1286b1d593e67218932"}], "stats": {"total": 20, "additions": 1, "deletions": 19}, "files": [{"sha": "2ca823929fd3885a28629e1b94f341697c2e3f6f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/069b0c410808c1d1d33b495e048b1186e9f8d57f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069b0c410808c1d1d33b495e048b1186e9f8d57f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=069b0c410808c1d1d33b495e048b1186e9f8d57f", "patch": "@@ -911,17 +911,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn compute(&mut self, body: &hir::Expr) -> LiveNode {\n-        // if there is a `break` or `continue` at the top level, then it's\n-        // effectively a return---this only occurs in `for` loops,\n-        // where the body is really a closure.\n-\n         debug!(\"compute: using id for body, {}\", self.ir.tcx.hir().node_to_pretty_string(body.id));\n \n-        let exit_ln = self.s.exit_ln;\n-\n-        self.break_ln.insert(body.id, exit_ln);\n-        self.cont_ln.insert(body.id, exit_ln);\n-\n         // the fallthrough exit is only for those cases where we do not\n         // explicitly return:\n         let s = self.s;\n@@ -1024,19 +1015,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&e, succ)\n             }\n \n-            hir::ExprKind::Closure(.., blk_id, _, _) => {\n+            hir::ExprKind::Closure(..) => {\n                 debug!(\"{} is an ExprKind::Closure\",\n                        self.ir.tcx.hir().node_to_pretty_string(expr.id));\n \n-                // The next-node for a break is the successor of the entire\n-                // loop. The next-node for a continue is the top of this loop.\n-                let node = self.live_node(expr.hir_id, expr.span);\n-\n-                let break_ln = succ;\n-                let cont_ln = node;\n-                self.break_ln.insert(blk_id.node_id, break_ln);\n-                self.cont_ln.insert(blk_id.node_id, cont_ln);\n-\n                 // the construction of a closure itself is not important,\n                 // but we have to consider the closed over variables.\n                 let caps = self.ir.capture_info_map.get(&expr.id).cloned().unwrap_or_else(||"}]}