{"sha": "458383dd337f276d091fa2de81bb7c1d31dde5fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODM4M2RkMzM3ZjI3NmQwOTFmYTJkZTgxYmI3YzFkMzFkZGU1ZmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T16:16:29Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:55:18Z"}, "message": "parse_if_expr: recover on attributes", "tree": {"sha": "064c57b7be465e8364441365612d52d8bcc084ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064c57b7be465e8364441365612d52d8bcc084ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/458383dd337f276d091fa2de81bb7c1d31dde5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/458383dd337f276d091fa2de81bb7c1d31dde5fa", "html_url": "https://github.com/rust-lang/rust/commit/458383dd337f276d091fa2de81bb7c1d31dde5fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/458383dd337f276d091fa2de81bb7c1d31dde5fa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3ae46de972f3e70319c25a5da69378454cb88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3ae46de972f3e70319c25a5da69378454cb88d", "html_url": "https://github.com/rust-lang/rust/commit/ba3ae46de972f3e70319c25a5da69378454cb88d"}], "stats": {"total": 162, "additions": 98, "deletions": 64}, "files": [{"sha": "fe75062ee503cb63fbebcaf5228fcb154d941326", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n+#![feature(bindings_after_at)]\n \n use rustc_ast::ast;\n use rustc_ast::token::{self, Nonterminal};"}, {"sha": "7f6f90431fc940a3dbfec9ca3247ff22efeee51e", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -1514,13 +1514,16 @@ impl<'a> Parser<'a> {\n         let thn = if self.eat_keyword(kw::Else) || !cond.returns() {\n             self.error_missing_if_cond(lo, cond.span)\n         } else {\n+            let attrs = self.parse_outer_attributes()?; // For recovery.\n             let not_block = self.token != token::OpenDelim(token::Brace);\n-            self.parse_block().map_err(|mut err| {\n+            let block = self.parse_block().map_err(|mut err| {\n                 if not_block {\n                     err.span_label(lo, \"this `if` expression has a condition, but no block\");\n                 }\n                 err\n-            })?\n+            })?;\n+            self.error_on_if_block_attrs(lo, false, block.span, &attrs);\n+            block\n         };\n         let els = if self.eat_keyword(kw::Else) { Some(self.parse_else_expr()?) } else { None };\n         Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::If(cond, thn, els), attrs))\n@@ -1562,12 +1565,40 @@ impl<'a> Parser<'a> {\n \n     /// Parses an `else { ... }` expression (`else` token already eaten).\n     fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        if self.eat_keyword(kw::If) {\n-            self.parse_if_expr(AttrVec::new())\n+        let ctx_span = self.prev_token.span; // `else`\n+        let attrs = self.parse_outer_attributes()?; // For recovery.\n+        let expr = if self.eat_keyword(kw::If) {\n+            self.parse_if_expr(AttrVec::new())?\n         } else {\n             let blk = self.parse_block()?;\n-            Ok(self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()))\n-        }\n+            self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new())\n+        };\n+        self.error_on_if_block_attrs(ctx_span, true, expr.span, &attrs);\n+        Ok(expr)\n+    }\n+\n+    fn error_on_if_block_attrs(\n+        &self,\n+        ctx_span: Span,\n+        is_ctx_else: bool,\n+        branch_span: Span,\n+        attrs: &[ast::Attribute],\n+    ) {\n+        let (span, last) = match attrs {\n+            [] => return,\n+            [x0 @ xn] | [x0, .., xn] => (x0.span.to(xn.span), xn.span),\n+        };\n+        let ctx = if is_ctx_else { \"else\" } else { \"if\" };\n+        self.struct_span_err(last, \"outer attributes are not allowed on `if` and `else` branches\")\n+            .span_label(branch_span, \"the attributes are attached to this branch\")\n+            .span_label(ctx_span, format!(\"the branch belongs to this `{}`\", ctx))\n+            .span_suggestion(\n+                span,\n+                \"remove the attributes\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n     }\n \n     /// Parses `for <src_pat> in <src_expr> <src_loop_block>` (`for` token already eaten)."}, {"sha": "15cafef97fb774f668ca9f108010059692168b64", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -352,8 +352,7 @@ impl<'a> Parser<'a> {\n     fn recover_attrs_no_item(&mut self, attrs: &[Attribute]) -> PResult<'a, ()> {\n         let (start, end) = match attrs {\n             [] => return Ok(()),\n-            [x0] => (x0, x0),\n-            [x0, .., xn] => (x0, xn),\n+            [x0 @ xn] | [x0, .., xn] => (x0, xn),\n         };\n         let msg = if end.is_doc_comment() {\n             \"expected item after doc comment\""}, {"sha": "85da7cf6bb8c3d453cc2558e11aac91b1f6e58b9", "filename": "src/test/ui/if-attrs/else-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.rs?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -8,7 +8,7 @@ fn if_else_parse_error() {\n #[cfg(FALSE)]\n fn else_attr_ifparse_error() {\n     if true {\n-    } else #[attr] if false { //~ ERROR expected\n+    } else #[attr] if false { //~ ERROR outer attributes are not allowed\n     } else {\n     }\n }"}, {"sha": "2733377054d7d93df1d1cc38e7ff4ed361a5963a", "filename": "src/test/ui/if-attrs/else-attrs.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.stderr?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -4,18 +4,17 @@ error: expected expression, found keyword `else`\n LL |     } #[attr] else if false {\n    |               ^^^^ expected expression\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/else-attrs.rs:11:12\n    |\n-LL |     } else #[attr] if false {\n-   |            ^ expected `{`\n-   |\n-help: try placing this code inside a block\n-   |\n-LL |     } else #[attr] { if false {\n-LL |     } else {\n-LL |     } }\n-   |\n+LL |       } else #[attr] if false {\n+   |  _______----_^^^^^^^_-\n+   | |       |    |\n+   | |       |    help: remove the attributes\n+   | |       the branch belongs to this `else`\n+LL | |     } else {\n+LL | |     }\n+   | |_____- the attributes are attached to this branch\n \n error: expected expression, found keyword `else`\n   --> $DIR/else-attrs.rs:20:15"}, {"sha": "09f494bdc2fed2b6a8cf2d25ea4eea15652de015", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -39,35 +39,35 @@ fn main() {}\n #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n //~^ ERROR expected one of\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n //~^ ERROR expected one of\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n-//~^ ERROR expected `{`, found `#`\n+//~^ ERROR outer attributes are not allowed on `if`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n "}, {"sha": "6dfe7aad6ea64b3412b04c781e26fcd907c0744c", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -136,14 +136,14 @@ LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:41:37\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n-   |                                --   ^       -- help: try placing this code inside a block: `{ {} }`\n+   |                                --   ^^^^^^^ -- the attributes are attached to this branch\n    |                                |    |\n-   |                                |    expected `{`\n-   |                                this `if` expression has a condition, but no block\n+   |                                |    help: remove the attributes\n+   |                                the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:43:38\n@@ -159,13 +159,14 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n    |                                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:47:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n-   |                                             ^       -- help: try placing this code inside a block: `{ {} }`\n-   |                                             |\n-   |                                             expected `{`\n+   |                                        ---- ^^^^^^^ -- the attributes are attached to this branch\n+   |                                        |    |\n+   |                                        |    help: remove the attributes\n+   |                                        the branch belongs to this `else`\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:49:46\n@@ -175,22 +176,23 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n-   |                                             ^       ------- help: try placing this code inside a block: `{ if 0 {} }`\n-   |                                             |\n-   |                                             expected `{`\n+   |                                        ---- ^^^^^^^ ------- the attributes are attached to this branch\n+   |                                        |    |\n+   |                                        |    help: remove the attributes\n+   |                                        the branch belongs to this `else`\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:53:50\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n-   |                                             --   ^       -- help: try placing this code inside a block: `{ {} }`\n+   |                                             --   ^^^^^^^ -- the attributes are attached to this branch\n    |                                             |    |\n-   |                                             |    expected `{`\n-   |                                             this `if` expression has a condition, but no block\n+   |                                             |    help: remove the attributes\n+   |                                             the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:55:51\n@@ -200,14 +202,14 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:57:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n-   |                                --           ^       -- help: try placing this code inside a block: `{ {} }`\n+   |                                --           ^^^^^^^ -- the attributes are attached to this branch\n    |                                |            |\n-   |                                |            expected `{`\n-   |                                this `if` expression has a condition, but no block\n+   |                                |            help: remove the attributes\n+   |                                the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:59:46\n@@ -223,13 +225,14 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n    |                                                ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:63:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n-   |                                                     ^       -- help: try placing this code inside a block: `{ {} }`\n-   |                                                     |\n-   |                                                     expected `{`\n+   |                                                ---- ^^^^^^^ -- the attributes are attached to this branch\n+   |                                                |    |\n+   |                                                |    help: remove the attributes\n+   |                                                the branch belongs to this `else`\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:65:54\n@@ -239,22 +242,23 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:67:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n-   |                                                     ^       --------------- help: try placing this code inside a block: `{ if let _ = 0 {} }`\n-   |                                                     |\n-   |                                                     expected `{`\n+   |                                                ---- ^^^^^^^ --------------- the attributes are attached to this branch\n+   |                                                |    |\n+   |                                                |    help: remove the attributes\n+   |                                                the branch belongs to this `else`\n \n-error: expected `{`, found `#`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:69:66\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n-   |                                                     --           ^       -- help: try placing this code inside a block: `{ {} }`\n+   |                                                     --           ^^^^^^^ -- the attributes are attached to this branch\n    |                                                     |            |\n-   |                                                     |            expected `{`\n-   |                                                     this `if` expression has a condition, but no block\n+   |                                                     |            help: remove the attributes\n+   |                                                     the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:71:67"}, {"sha": "343eac1b81ff0dc958a0e183ec9bdb11f2458ed6", "filename": "src/test/ui/parser/doc-comment-in-if-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     if true /*!*/ {}\n-    //~^ ERROR expected `{`, found doc comment `/*!*/`\n+    //~^ ERROR outer attributes are not allowed on\n     //~| ERROR expected outer doc comment\n }"}, {"sha": "af21b78733f90baa9c6f92d9dcbd105b6d3e2847", "filename": "src/test/ui/parser/doc-comment-in-if-statement.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/458383dd337f276d091fa2de81bb7c1d31dde5fa/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr?ref=458383dd337f276d091fa2de81bb7c1d31dde5fa", "patch": "@@ -6,14 +6,14 @@ LL |     if true /*!*/ {}\n    |\n    = note: inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n \n-error: expected `{`, found doc comment `/*!*/`\n+error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/doc-comment-in-if-statement.rs:2:13\n    |\n LL |     if true /*!*/ {}\n-   |     --      ^^^^^ -- help: try placing this code inside a block: `{ {} }`\n+   |     --      ^^^^^ -- the attributes are attached to this branch\n    |     |       |\n-   |     |       expected `{`\n-   |     this `if` expression has a condition, but no block\n+   |     |       help: remove the attributes\n+   |     the branch belongs to this `if`\n \n error: aborting due to 2 previous errors\n "}]}