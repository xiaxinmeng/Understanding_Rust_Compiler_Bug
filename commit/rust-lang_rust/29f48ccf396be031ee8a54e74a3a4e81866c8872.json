{"sha": "29f48ccf396be031ee8a54e74a3a4e81866c8872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZjQ4Y2NmMzk2YmUwMzFlZThhNTRlNzRhM2E0ZTgxODY2Yzg4NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-03T20:13:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-03T20:13:09Z"}, "message": "Auto merge of #50338 - japaric:panic-impl, r=alexcrichton\n\nimplement #[panic_implementation]\n\nThis implements the `#[panic_implementation]` attribute as instructed in https://github.com/rust-lang/rust/issues/44489#issuecomment-381324623\n\nI haven't run the full test suite yet but at least all the compile-fail tests pass.\n\nr? @nagisa", "tree": {"sha": "2f33ba908db3f5cf869d2be0cb8e1bd98a683543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f33ba908db3f5cf869d2be0cb8e1bd98a683543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f48ccf396be031ee8a54e74a3a4e81866c8872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f48ccf396be031ee8a54e74a3a4e81866c8872", "html_url": "https://github.com/rust-lang/rust/commit/29f48ccf396be031ee8a54e74a3a4e81866c8872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f48ccf396be031ee8a54e74a3a4e81866c8872/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5f17ccff09569c2dd22df9330364a92fec2295", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5f17ccff09569c2dd22df9330364a92fec2295", "html_url": "https://github.com/rust-lang/rust/commit/be5f17ccff09569c2dd22df9330364a92fec2295"}, {"sha": "8ad15dea3f9ac9b0fcfad4a61a70aa47ecc4d938", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad15dea3f9ac9b0fcfad4a61a70aa47ecc4d938", "html_url": "https://github.com/rust-lang/rust/commit/8ad15dea3f9ac9b0fcfad4a61a70aa47ecc4d938"}], "stats": {"total": 556, "additions": 492, "deletions": 64}, "files": [{"sha": "bac619fd4a30d2c17e50d45415d55d1ef42600d6", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -19,6 +19,7 @@ sugar for dynamic allocations via `malloc` and `free`:\n #![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n #![no_std]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n extern crate libc;\n \n@@ -50,7 +51,7 @@ fn main(_argc: isize, _argv: *const *const u8) -> isize {\n }\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n+#[lang = \"panic_impl\"] extern fn rust_begin_panic(info: &PanicInfo) -> ! { unsafe { intrinsics::abort() } }\n #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n #[no_mangle] pub extern fn rust_eh_register_frames () {}\n #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n@@ -110,6 +111,7 @@ in the same format as C:\n #![feature(start)]\n #![no_std]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -134,12 +136,9 @@ pub extern fn rust_eh_personality() {\n pub extern fn rust_eh_unwind_resume() {\n }\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n #[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32,\n-                               _column: u32) -> ! {\n+pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n     unsafe { intrinsics::abort() }\n }\n ```\n@@ -155,6 +154,7 @@ compiler's name mangling too:\n #![no_std]\n #![no_main]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -179,12 +179,9 @@ pub extern fn rust_eh_personality() {\n pub extern fn rust_eh_unwind_resume() {\n }\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n #[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32,\n-                               _column: u32) -> ! {\n+pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n     unsafe { intrinsics::abort() }\n }\n ```\n@@ -215,7 +212,7 @@ called. The language item's name is `eh_personality`.\n \n The second function, `rust_begin_panic`, is also used by the failure mechanisms of the\n compiler. When a panic happens, this controls the message that's displayed on\n-the screen. While the language item's name is `panic_fmt`, the symbol name is\n+the screen. While the language item's name is `panic_impl`, the symbol name is\n `rust_begin_panic`.\n \n A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_resume`\n@@ -259,8 +256,8 @@ the source code.\n   - `msvc_try_filter`: `libpanic_unwind/seh.rs` (SEH)\n   - `panic`: `libcore/panicking.rs`\n   - `panic_bounds_check`: `libcore/panicking.rs`\n-  - `panic_fmt`: `libcore/panicking.rs`\n-  - `panic_fmt`: `libstd/panicking.rs`\n+  - `panic_impl`: `libcore/panicking.rs`\n+  - `panic_impl`: `libstd/panicking.rs`\n - Allocations\n   - `owned_box`: `liballoc/boxed.rs`\n   - `exchange_malloc`: `liballoc/heap.rs`"}, {"sha": "c3b7f2e41e15b27b265f37fcc75e53801538ef8c", "filename": "src/doc/unstable-book/src/language-features/used.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -87,11 +87,13 @@ This condition can be met using `#[used]` and `#[link_section]` plus a linker\n script.\n \n ``` rust,ignore\n-#![feature(lang_items)]\n+#![feature(panic_implementation)]\n #![feature(used)]\n #![no_main]\n #![no_std]\n \n+use core::panic::PanicInfo;\n+\n extern \"C\" fn reset_handler() -> ! {\n     loop {}\n }\n@@ -100,8 +102,10 @@ extern \"C\" fn reset_handler() -> ! {\n #[used]\n static RESET_HANDLER: extern \"C\" fn() -> ! = reset_handler;\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() {}\n+#[panic_implementation]\n+fn panic_impl(info: &PanicInfo) -> ! {\n+    loop {}\n+}\n ```\n \n ``` text"}, {"sha": "e6ab64a331272c9109f97863d4a458023b852d40", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -41,7 +41,7 @@\n //!   dictate the panic message, the file at which panic was invoked, and the\n //!   line and column inside the file. It is up to consumers of this core\n //!   library to define this panic function; it is only required to never\n-//!   return. This requires a `lang` attribute named `panic_fmt`.\n+//!   return. This requires a `lang` attribute named `panic_impl`.\n //!\n //! * `rust_eh_personality` - is used by the failure mechanisms of the\n //!    compiler. This is often mapped to GCC's personality function, but crates"}, {"sha": "37ae05309af1dca6eb75cf6f2cfa0fca60fb6e16", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -35,6 +35,7 @@ use fmt;\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[cfg_attr(not(stage0), lang = \"panic_info\")]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct PanicInfo<'a> {\n@@ -53,7 +54,8 @@ impl<'a> PanicInfo<'a> {\n     pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n                                 location: Location<'a>)\n                                 -> Self {\n-        PanicInfo { payload: &(), location, message }\n+        struct NoPayload;\n+        PanicInfo { payload: &NoPayload, location, message }\n     }\n \n     #[doc(hidden)]\n@@ -121,7 +123,7 @@ impl<'a> PanicInfo<'a> {\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location> {\n         // NOTE: If this is changed to sometimes return None,\n-        // deal with that case in std::panicking::default_hook.\n+        // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n         Some(&self.location)\n     }\n }"}, {"sha": "0d4f8d1141e739490225c4a688bdc68198a540ea", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -37,6 +37,8 @@\n             issue = \"0\")]\n \n use fmt;\n+#[cfg(not(stage0))]\n+use panic::{Location, PanicInfo};\n \n #[cold] #[inline(never)] // this is the slow path, always\n #[lang = \"panic\"]\n@@ -59,6 +61,7 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                            len, index), file_line_col)\n }\n \n+#[cfg(stage0)]\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n     #[allow(improper_ctypes)]\n@@ -70,3 +73,21 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32))\n     let (file, line, col) = *file_line_col;\n     unsafe { panic_impl(fmt, file, line, col) }\n }\n+\n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)]\n+pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo) -> !;\n+    }\n+\n+    let (file, line, col) = *file_line_col;\n+    let pi = PanicInfo::internal_constructor(\n+        Some(&fmt),\n+        Location::internal_constructor(file, line, col),\n+    );\n+    unsafe { panic_impl(&pi) }\n+}"}, {"sha": "61f05ca347358781a75f399b0d3d8963d6901dc9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -637,8 +637,8 @@ Erroneous code example:\n ```compile_fail,E0152\n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-struct Foo; // error: duplicate lang item found: `panic_fmt`\n+#[lang = \"panic_impl\"]\n+struct Foo; // error: duplicate lang item found: `panic_impl`\n ```\n \n Lang items are already implemented in the standard library. Unless you are\n@@ -824,7 +824,7 @@ A list of available external lang items is available in\n #![feature(lang_items)]\n \n extern \"C\" {\n-    #[lang = \"panic_fmt\"] // ok!\n+    #[lang = \"panic_impl\"] // ok!\n     fn cake();\n }\n ```"}, {"sha": "7ebc0d4a4de5a4a358566bb002ad670eeb730ff0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt,\n                                     id: ast::NodeId,\n                                     attrs: &[ast::Attribute]) -> bool {\n-    if attr::contains_name(attrs, \"lang\") {\n+    if attr::contains_name(attrs, \"lang\") || attr::contains_name(attrs, \"panic_implementation\") {\n         return true;\n     }\n "}, {"sha": "fe676919a7d14d23aa08e0050e01869bcfdfb7e2", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -185,6 +185,8 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n             if let Some(value) = attribute.value_str() {\n                 return Some((value, attribute.span));\n             }\n+        } else if attribute.check_name(\"panic_implementation\") {\n+            return Some((Symbol::intern(\"panic_impl\"), attribute.span))\n         }\n     }\n \n@@ -299,7 +301,8 @@ language_item_table! {\n     // lang item, but do not have it defined.\n     PanicFnLangItem,                 \"panic\",                   panic_fn;\n     PanicBoundsCheckFnLangItem,      \"panic_bounds_check\",      panic_bounds_check_fn;\n-    PanicFmtLangItem,                \"panic_fmt\",               panic_fmt;\n+    PanicInfoLangItem,               \"panic_info\",              panic_info;\n+    PanicImplLangItem,               \"panic_impl\",              panic_impl;\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;"}, {"sha": "3c2ea047218a7bfb16d119383a0b23af10c24a94", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -148,7 +148,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n ) }\n \n weak_lang_items! {\n-    panic_fmt,          PanicFmtLangItem,           rust_begin_unwind;\n+    panic_impl,         PanicImplLangItem,          rust_begin_unwind;\n     eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n     eh_unwind_resume,   EhUnwindResumeLangItem,     rust_eh_unwind_resume;\n     oom,                OomLangItem,                rust_oom;"}, {"sha": "c2c71d90f06744e30ffaa93589c97e355a4d2ad3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -96,7 +96,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n-use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate};\n+use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::maps::Providers;\n@@ -130,7 +130,7 @@ use syntax_pos::{self, BytePos, Span, MultiSpan};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Node;\n-use rustc::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind, Item_};\n use rustc::middle::lang_items;\n \n mod autoderef;\n@@ -1129,6 +1129,60 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         }\n     }\n \n+    // Check that a function marked as `#[panic_implementation]` has signature `fn(&PanicInfo) -> !`\n+    if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n+        if panic_impl_did == fn_hir_id.owner_def_id() {\n+            if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n+                if declared_ret_ty.sty != ty::TyNever {\n+                    fcx.tcx.sess.span_err(\n+                        decl.output.span(),\n+                        \"return type should be `!`\",\n+                    );\n+                }\n+\n+                let inputs = fn_sig.inputs();\n+                let span = fcx.tcx.hir.span(fn_id);\n+                if inputs.len() == 1 {\n+                    let arg_is_panic_info = match inputs[0].sty {\n+                        ty::TyRef(region, ty, mutbl) => match ty.sty {\n+                            ty::TyAdt(ref adt, _) => {\n+                                adt.did == panic_info_did &&\n+                                    mutbl == hir::Mutability::MutImmutable &&\n+                                    *region != RegionKind::ReStatic\n+                            },\n+                            _ => false,\n+                        },\n+                        _ => false,\n+                    };\n+\n+                    if !arg_is_panic_info {\n+                        fcx.tcx.sess.span_err(\n+                            decl.inputs[0].span,\n+                            \"argument should be `&PanicInfo`\",\n+                        );\n+                    }\n+\n+                    if let Node::NodeItem(item) = fcx.tcx.hir.get(fn_id) {\n+                        if let Item_::ItemFn(_, _, _, _, ref generics, _) = item.node {\n+                            if !generics.params.is_empty() {\n+                                fcx.tcx.sess.span_err(\n+                                    span,\n+                                    \"`#[panic_implementation]` function should have no type \\\n+                                     parameters\",\n+                                );\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    fcx.tcx.sess.span_err(span, \"function should have one argument\");\n+                }\n+            } else {\n+                fcx.tcx.sess.err(\"language item required, but not found: `panic_info`\");\n+            }\n+        }\n+\n+    }\n+\n     (fcx, gen_ty)\n }\n "}, {"sha": "c576245edb755c1d271fbf04f431951efe50a265", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -317,6 +317,8 @@\n #![cfg_attr(windows, feature(used))]\n #![feature(doc_alias)]\n #![feature(float_internals)]\n+#![feature(panic_info_message)]\n+#![cfg_attr(not(stage0), feature(panic_implementation))]\n \n #![default_lib_allocator]\n "}, {"sha": "0808efa2ecea51f9974deb34b8582b4a7deefb30", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 75, "deletions": 27, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -319,68 +319,116 @@ pub fn panicking() -> bool {\n \n /// Entry point of panic from the libcore crate.\n #[cfg(not(test))]\n+#[cfg(stage0)]\n #[lang = \"panic_fmt\"]\n-#[unwind(allowed)]\n pub extern fn rust_begin_panic(msg: fmt::Arguments,\n                                file: &'static str,\n                                line: u32,\n                                col: u32) -> ! {\n     begin_panic_fmt(&msg, &(file, line, col))\n }\n \n+/// Entry point of panic from the libcore crate.\n+#[cfg(not(test))]\n+#[cfg(not(stage0))]\n+#[panic_implementation]\n+#[unwind(allowed)]\n+pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n+    continue_panic_fmt(&info)\n+}\n+\n /// The entry point for panicking with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call\n /// site as much as possible (so that `panic!()` has as low an impact\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n+#[cfg(stage0)]\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[inline(never)] #[cold]\n pub fn begin_panic_fmt(msg: &fmt::Arguments,\n                        file_line_col: &(&'static str, u32, u32)) -> ! {\n-    use fmt::Write;\n-\n     // We do two allocations here, unfortunately. But (a) they're\n     // required with the current scheme, and (b) we don't handle\n     // panic + OOM properly anyway (see comment in begin_panic\n     // below).\n \n     rust_panic_with_hook(&mut PanicPayload::new(msg), Some(msg), file_line_col);\n+}\n+\n+// NOTE(stage0) move into `continue_panic_fmt` on next stage0 update\n+struct PanicPayload<'a> {\n+    inner: &'a fmt::Arguments<'a>,\n+    string: Option<String>,\n+}\n \n-    struct PanicPayload<'a> {\n-        inner: &'a fmt::Arguments<'a>,\n-        string: Option<String>,\n+impl<'a> PanicPayload<'a> {\n+    fn new(inner: &'a fmt::Arguments<'a>) -> PanicPayload<'a> {\n+        PanicPayload { inner, string: None }\n     }\n \n-    impl<'a> PanicPayload<'a> {\n-        fn new(inner: &'a fmt::Arguments<'a>) -> PanicPayload<'a> {\n-            PanicPayload { inner, string: None }\n-        }\n+    fn fill(&mut self) -> &mut String {\n+        use fmt::Write;\n \n-        fn fill(&mut self) -> &mut String {\n-            let inner = self.inner;\n-            self.string.get_or_insert_with(|| {\n-                let mut s = String::new();\n-                drop(s.write_fmt(*inner));\n-                s\n-            })\n-        }\n+        let inner = self.inner;\n+        self.string.get_or_insert_with(|| {\n+            let mut s = String::new();\n+            drop(s.write_fmt(*inner));\n+            s\n+        })\n     }\n+}\n \n-    unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n-            let contents = mem::replace(self.fill(), String::new());\n-            Box::into_raw(Box::new(contents))\n-        }\n+unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n+    fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        let contents = mem::replace(self.fill(), String::new());\n+        Box::into_raw(Box::new(contents))\n+    }\n \n-        fn get(&mut self) -> &(Any + Send) {\n-            self.fill()\n-        }\n+    fn get(&mut self) -> &(Any + Send) {\n+        self.fill()\n     }\n }\n \n+/// The entry point for panicking with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `panic!()` has as low an impact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n+#[cfg(not(stage0))]\n+#[unstable(feature = \"libstd_sys_internals\",\n+           reason = \"used by the panic! macro\",\n+           issue = \"0\")]\n+#[inline(never)] #[cold]\n+pub fn begin_panic_fmt(msg: &fmt::Arguments,\n+                       file_line_col: &(&'static str, u32, u32)) -> ! {\n+    let (file, line, col) = *file_line_col;\n+    let info = PanicInfo::internal_constructor(\n+        Some(msg),\n+        Location::internal_constructor(file, line, col),\n+    );\n+    continue_panic_fmt(&info)\n+}\n+\n+#[cfg(not(stage0))]\n+fn continue_panic_fmt(info: &PanicInfo) -> ! {\n+    // We do two allocations here, unfortunately. But (a) they're\n+    // required with the current scheme, and (b) we don't handle\n+    // panic + OOM properly anyway (see comment in begin_panic\n+    // below).\n+\n+    let loc = info.location().unwrap(); // The current implementation always returns Some\n+    let msg = info.message().unwrap(); // The current implementation always returns Some\n+    let file_line_col = (loc.file(), loc.line(), loc.column());\n+    rust_panic_with_hook(\n+        &mut PanicPayload::new(msg),\n+        info.message(),\n+        &file_line_col);\n+}\n+\n /// This is the entry point of panicking for panic!() and assert!().\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n@@ -431,7 +479,7 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n /// abort or unwind.\n fn rust_panic_with_hook(payload: &mut BoxMeUp,\n                         message: Option<&fmt::Arguments>,\n-                        file_line_col: &(&'static str, u32, u32)) -> ! {\n+                        file_line_col: &(&str, u32, u32)) -> ! {\n     let (file, line, col) = *file_line_col;\n \n     let panics = update_panic_count(1);"}, {"sha": "7349745fefea100b1b9b1c6de4739e7ee089dd49", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -475,6 +475,9 @@ declare_features! (\n \n     // 'a: { break 'a; }\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n+\n+    // #[panic_implementation]\n+    (active, panic_implementation, \"1.28.0\", Some(44489), None),\n );\n \n declare_features! (\n@@ -1069,6 +1072,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"attribute is currently unstable\",\n                                  cfg_fn!(wasm_custom_section))),\n \n+    // RFC 2070\n+    (\"panic_implementation\", Normal, Gated(Stability::Unstable,\n+                           \"panic_implementation\",\n+                           \"#[panic_implementation] is an unstable feature\",\n+                           cfg_fn!(panic_implementation))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),"}, {"sha": "db16ac325ac595c8d93335623d8e90c67a3859b8", "filename": "src/test/compile-fail/auxiliary/some-panic-impl.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+#![feature(panic_implementation)]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "176aa7cca53576065e0044acb25ff7660be18536", "filename": "src/test/compile-fail/duplicate_entry_error.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -14,9 +14,11 @@\n \n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() -> ! {\n-//~^ ERROR: duplicate lang item found: `panic_fmt`.\n+use std::panic::PanicInfo;\n+\n+#[lang = \"panic_impl\"]\n+fn panic_impl(info: &PanicInfo) -> ! {\n+//~^ ERROR: duplicate lang item found: `panic_impl`.\n     loop {}\n }\n "}, {"sha": "ae9fbc7b13bd53db338dfc94f6e316e40194f767", "filename": "src/test/compile-fail/feature-gate-panic-implementation.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation] //~ ERROR #[panic_implementation] is an unstable feature (see issue #44489)\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "1c2bf1573dcc1900e2f2becbc6396ccc58a016f0", "filename": "src/test/compile-fail/no_owned_box_lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -21,4 +21,4 @@ fn main() {\n \n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n #[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\n-#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\n+#[lang = \"panic_impl\"] fn panic_impl() -> ! { loop {} }"}, {"sha": "fec11fdbd7ba13c247029efd2e81bbacffe88cb1", "filename": "src/test/compile-fail/panic-implementation-bad-signature-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(\n+    info: PanicInfo, //~ ERROR argument should be `&PanicInfo`\n+) -> () //~ ERROR return type should be `!`\n+{\n+}"}, {"sha": "2a628c05699cc57cd4fea776f700686dccc0e9b4", "filename": "src/test/compile-fail/panic-implementation-bad-signature-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(\n+    info: &'static PanicInfo, //~ ERROR argument should be `&PanicInfo`\n+) -> !\n+{\n+    loop {}\n+}"}, {"sha": "29337025b707667924b002781b83114bc558031b", "filename": "src/test/compile-fail/panic-implementation-bad-signature-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic() -> ! { //~ ERROR function should have one argument\n+    loop {}\n+}"}, {"sha": "d5f942ba2d62fc29b760d805042dd990c33abb70", "filename": "src/test/compile-fail/panic-implementation-bad-signature-4.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic<T>(pi: &PanicInfo) -> ! {\n+    //~^ ERROR `#[panic_implementation]` function should have no type parameters\n+    loop {}\n+}"}, {"sha": "017113af409bb2870e798d8bd9c94bbce3a46a72", "filename": "src/test/compile-fail/panic-implementation-duplicate.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(lang_items)]\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"panic_impl\"]\n+fn panic2(info: &PanicInfo) -> ! { //~ ERROR duplicate lang item found: `panic_impl`.\n+    loop {}\n+}"}, {"sha": "597f44d98326dc6e441cb4ea81bcd76462f44cf4", "filename": "src/test/compile-fail/panic-implementation-requires-panic-info.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+// error-pattern: language item required, but not found: `panic_info`\n+\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![feature(panic_implementation)]\n+#![no_core]\n+#![no_main]\n+\n+#[panic_implementation]\n+fn panic() -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}"}, {"sha": "f25cd3605c1dd00450651b1a9d06cf1cfaeee375", "filename": "src/test/compile-fail/panic-implementation-std.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-std.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: duplicate lang item found: `panic_impl`.\n+\n+#![feature(panic_implementation)]\n+\n+use std::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "78dc545c036f889b27420d8c4caf8c35ebcaff41", "filename": "src/test/compile-fail/panic-implementation-twice.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-twice.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:some-panic-impl.rs\n+\n+#![feature(panic_implementation)]\n+#![feature(lang_items)]\n+#![no_std]\n+#![no_main]\n+\n+extern crate some_panic_impl;\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    //~^ error duplicate lang item found: `panic_impl`\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh() {}"}, {"sha": "d9848a554aba5bbde1a5c0a0458e7d29c72e36c4", "filename": "src/test/compile-fail/panic-runtime/auxiliary/panic-runtime-lang-items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -15,8 +15,10 @@\n #![no_std]\n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() {}\n+use core::panic::PanicInfo;\n+\n+#[lang = \"panic_impl\"]\n+fn panic_impl(info: &PanicInfo) -> ! { loop {} }\n #[lang = \"eh_personality\"]\n fn eh_personality() {}\n #[lang = \"eh_unwind_resume\"]"}, {"sha": "7b988c3595f5eb123a90e1f299e1199d0c7030c0", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:weak-lang-items.rs\n-// error-pattern: language item required, but not found: `panic_fmt`\n+// error-pattern: language item required, but not found: `panic_impl`\n // error-pattern: language item required, but not found: `eh_personality`\n // ignore-wasm32-bare compiled with panic=abort, personality not required\n "}, {"sha": "1714578b2ba288d1f1198c8ee472ff8ca923a342", "filename": "src/test/run-make-fulldeps/panic-impl-transitive/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2FMakefile?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,7 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# NOTE we use --emit=llvm-ir to avoid running the linker (linking will fail because there's no main\n+# in this crate)\n+all:\n+\t$(RUSTC) panic-impl-provider.rs\n+\t$(RUSTC) panic-impl-consumer.rs -C panic=abort --emit=llvm-ir -L $(TMPDIR)"}, {"sha": "592fab8be85ece9c8b9a59a59c8692cbe5f3585b", "filename": "src/test/run-make-fulldeps/panic-impl-transitive/panic-impl-consumer.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-consumer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-consumer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-consumer.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![no_main]\n+\n+// this crate provides the `panic_impl` lang item so we don't need to define it here\n+extern crate panic_impl_provider;"}, {"sha": "46cdf2e2fa55e5397fb4d60ccdc436acebbbec8d", "filename": "src/test/run-make-fulldeps/panic-impl-transitive/panic-impl-provider.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-provider.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-provider.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-provider.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(panic_implementation)]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "8fbad7b3ff301c0acd32e4cff9c11de2ec973051", "filename": "src/test/ui/error-codes/E0152.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n struct Foo; //~ ERROR E0152\n \n fn main() {"}, {"sha": "c7f5f362efb28492ccadfc82b5102ba16bb82731", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29f48ccf396be031ee8a54e74a3a4e81866c8872/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=29f48ccf396be031ee8a54e74a3a4e81866c8872", "patch": "@@ -1,4 +1,4 @@\n-error[E0152]: duplicate lang item found: `panic_fmt`.\n+error[E0152]: duplicate lang item found: `panic_impl`.\n   --> $DIR/E0152.rs:14:1\n    |\n LL | struct Foo; //~ ERROR E0152"}]}