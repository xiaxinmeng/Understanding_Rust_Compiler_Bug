{"sha": "28fafc45e6a3f7ea822072310f3d459595d4dc43", "node_id": "C_kwDOAAsO6NoAKDI4ZmFmYzQ1ZTZhM2Y3ZWE4MjIwNzIzMTBmM2Q0NTk1OTVkNGRjNDM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T14:06:46Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T14:06:46Z"}, "message": "lower-generic vs. outlive", "tree": {"sha": "b77a208bea173cfae396c149e938557bf83e00a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b77a208bea173cfae396c149e938557bf83e00a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28fafc45e6a3f7ea822072310f3d459595d4dc43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28fafc45e6a3f7ea822072310f3d459595d4dc43", "html_url": "https://github.com/rust-lang/rust/commit/28fafc45e6a3f7ea822072310f3d459595d4dc43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28fafc45e6a3f7ea822072310f3d459595d4dc43/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70497d9d10e4807f209dc386adaba025eb95420f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70497d9d10e4807f209dc386adaba025eb95420f", "html_url": "https://github.com/rust-lang/rust/commit/70497d9d10e4807f209dc386adaba025eb95420f"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "86b025dce5edac979f911adbd82c24eb358e9404", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28fafc45e6a3f7ea822072310f3d459595d4dc43/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fafc45e6a3f7ea822072310f3d459595d4dc43/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=28fafc45e6a3f7ea822072310f3d459595d4dc43", "patch": "@@ -268,8 +268,8 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         //     fn foo<'a, A>(x: &'a A) { x.bar() }\n         //\n         // The problem is that the type of `x` is `&'a A`. To be\n-        // well-formed, then, A must be lower-generic by `'a`, but we\n-        // don't know that this holds from first principles.\n+        // well-formed, then, A must outlive `'a`, but we don't know that\n+        // this holds from first principles.\n         let from_region_bound_pairs = self.region_bound_pairs.iter().filter_map(|&(r, p)| {\n             debug!(\n                 \"declared_generic_bounds_from_env_for_erased_ty: region_bound_pair = {:?}\","}]}