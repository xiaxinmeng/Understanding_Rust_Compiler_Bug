{"sha": "848dbc93ee88be407549619ae9df36f2aebc12fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OGRiYzkzZWU4OGJlNDA3NTQ5NjE5YWU5ZGYzNmYyYWViYzEyZmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-06T05:12:39Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-06T05:16:07Z"}, "message": "std: add an external iterator for mutating vec elements", "tree": {"sha": "e71eb1a4cd1fd76e1d91c49c508ff343ab6c5800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71eb1a4cd1fd76e1d91c49c508ff343ab6c5800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848dbc93ee88be407549619ae9df36f2aebc12fb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848dbc93ee88be407549619ae9df36f2aebc12fb", "html_url": "https://github.com/rust-lang/rust/commit/848dbc93ee88be407549619ae9df36f2aebc12fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848dbc93ee88be407549619ae9df36f2aebc12fb/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5ef0766da03b15262c410953316541ff9f931d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ef0766da03b15262c410953316541ff9f931d4", "html_url": "https://github.com/rust-lang/rust/commit/f5ef0766da03b15262c410953316541ff9f931d4"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "58b0193d300d37df1e277b130e2e499d4d943ae3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/848dbc93ee88be407549619ae9df36f2aebc12fb/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848dbc93ee88be407549619ae9df36f2aebc12fb/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=848dbc93ee88be407549619ae9df36f2aebc12fb", "patch": "@@ -2427,6 +2427,7 @@ impl<T:Eq> OwnedEqVector<T> for ~[T] {\n #[allow(missing_doc)]\n pub trait MutableVector<'self, T> {\n     fn mut_slice(self, start: uint, end: uint) -> &'self mut [T];\n+    fn mut_iter(self) -> MutVecIterator<'self, T>;\n \n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T;\n     unsafe fn unsafe_set(&self, index: uint, val: T);\n@@ -2438,6 +2439,15 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         mut_slice(self, start, end)\n     }\n \n+    #[inline]\n+    fn mut_iter(self) -> MutVecIterator<'self, T> {\n+        unsafe {\n+            let p = vec::raw::to_mut_ptr(self);\n+            MutVecIterator{ptr: p, end: p.offset(self.len()),\n+                           lifetime: cast::transmute(p)}\n+        }\n+    }\n+\n     #[inline(always)]\n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T {\n         let pair_ptr: &(*mut T, uint) = transmute(self);\n@@ -2962,6 +2972,30 @@ impl<'self, T> Iterator<&'self T> for VecIterator<'self, T> {\n     }\n }\n \n+/// An external iterator for vectors with the possibility of mutating\n+/// elements. (use with the std::iterator module)\n+pub struct MutVecIterator<'self, T> {\n+    priv ptr: *mut T,\n+    priv end: *mut T,\n+    priv lifetime: &'self mut T // FIXME: #5922\n+}\n+\n+// could be implemented with &[T] with .slice(), but this avoids bounds checks\n+impl<'self, T> Iterator<&'self mut T> for MutVecIterator<'self, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self mut T> {\n+        unsafe {\n+            if self.ptr == self.end {\n+                None\n+            } else {\n+                let old = self.ptr;\n+                self.ptr = self.ptr.offset(1);\n+                Some(cast::transmute(old))\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use option::{None, Option, Some};\n@@ -4669,6 +4703,16 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_mut_iterator() {\n+        use iterator::*;\n+        let mut xs = [1, 2, 3, 4, 5];\n+        for xs.mut_iter().advance |x| {\n+            *x += 1;\n+        }\n+        assert_eq!(xs, [2, 3, 4, 5, 6])\n+    }\n+\n     #[test]\n     fn test_reverse_part() {\n         let mut values = [1,2,3,4,5];"}, {"sha": "8c78b226483930fc71d6ba7cd9776209e740c33e", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/848dbc93ee88be407549619ae9df36f2aebc12fb/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848dbc93ee88be407549619ae9df36f2aebc12fb/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=848dbc93ee88be407549619ae9df36f2aebc12fb", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::iterator::*;\n+\n+fn main() {\n+    let mut xs = ~[1, 2, 3, 4];\n+\n+    for xs.mut_iter().advance |x| {\n+        xs.push(1) //~ ERROR cannot borrow `xs` as mutable\n+    }\n+}"}]}