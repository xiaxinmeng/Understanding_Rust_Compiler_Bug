{"sha": "510976b4e671b51fc7cacf9c957a124e367ce9ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMDk3NmI0ZTY3MWI1MWZjN2NhY2Y5Yzk1N2ExMjRlMzY3Y2U5ZWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-08T20:34:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-08T20:34:22Z"}, "message": "Rollup merge of #64078 - Mark-Simulacrum:compiletest-lint-unused, r=petrochenkov\n\ncompiletest: disable -Aunused for run-pass tests\n\nDisabled the flag, but that led to quite a bit of fall out -- I think most of it is benign but I've not investigated thoroughly.\n\nr? @petrochenkov", "tree": {"sha": "026caea15ff5343480d755fb92747ba3fe66345f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026caea15ff5343480d755fb92747ba3fe66345f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/510976b4e671b51fc7cacf9c957a124e367ce9ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddWXOCRBK7hj4Ov3rIwAAdHIIAB4+f5k005RvY5/o9+gw6L6l\ncweryRyKxNfMIUgAGE6QqsHcXS5g/SERHzFbboJ/Ylr7TjAio9q+olpzvnSrhu3B\n3pxVAJ0qeG4fjV/ZLrdCHrSDmERB7ZQULcvilaJM5OU6sjTk0sXdhTkocjDzOeoH\nAKiSs5Uq44it772CvRGD87mEeQWo7gzuh6TMqSvIZb4yeE7jRpte5FWQDd60H4xr\nr48l0jT1cnbKEfq+ZayKUqJRO/1MacZJXnS0Lqt67E2fusB/J8iu9C10Jo7Iu4PE\nlZVf02TRIeWC+bDeYedqU5oRuCEk1Bcyx5514GYINi6Yu9fPumqh9ceT8wcGVsI=\n=uWrB\n-----END PGP SIGNATURE-----\n", "payload": "tree 026caea15ff5343480d755fb92747ba3fe66345f\nparent 2b8116dced2c6c5d02e1c4359e89dc0919d6001b\nparent 6fdbece55f7ccba7ac16808bd62ead27d6da9500\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567974862 +0200\ncommitter GitHub <noreply@github.com> 1567974862 +0200\n\nRollup merge of #64078 - Mark-Simulacrum:compiletest-lint-unused, r=petrochenkov\n\ncompiletest: disable -Aunused for run-pass tests\n\nDisabled the flag, but that led to quite a bit of fall out -- I think most of it is benign but I've not investigated thoroughly.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/510976b4e671b51fc7cacf9c957a124e367ce9ed", "html_url": "https://github.com/rust-lang/rust/commit/510976b4e671b51fc7cacf9c957a124e367ce9ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/510976b4e671b51fc7cacf9c957a124e367ce9ed/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "html_url": "https://github.com/rust-lang/rust/commit/2b8116dced2c6c5d02e1c4359e89dc0919d6001b"}, {"sha": "6fdbece55f7ccba7ac16808bd62ead27d6da9500", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdbece55f7ccba7ac16808bd62ead27d6da9500", "html_url": "https://github.com/rust-lang/rust/commit/6fdbece55f7ccba7ac16808bd62ead27d6da9500"}], "stats": {"total": 200, "additions": 131, "deletions": 69}, "files": [{"sha": "ceca54b7cd75fd0c6dadc85ef7c66e30b6ab19d5", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "3c9f511338f6965bf5ed40ab181caa721d47b505", "filename": "src/test/ui/associated-type-bounds/fn-apit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-apit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-apit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-apit.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_aux;"}, {"sha": "c4e8092c211d627d0530d50f6817b606d20ae833", "filename": "src/test/ui/associated-type-bounds/fn-dyn-apit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-dyn-apit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-dyn-apit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-dyn-apit.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-dyn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_dyn_aux;"}, {"sha": "8fa7212d6275ba436638a76ba37cf57923861897", "filename": "src/test/ui/associated-type-bounds/fn-inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-inline.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_aux;"}, {"sha": "9c4f82ac991c8cde97299a1e968a69795171cbc8", "filename": "src/test/ui/associated-type-bounds/fn-where.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-where.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_aux;"}, {"sha": "96df13e372a24fdec950d7e0374f1d4c939fc658", "filename": "src/test/ui/associated-type-bounds/fn-wrap-apit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-wrap-apit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-wrap-apit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-wrap-apit.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -2,6 +2,7 @@\n // aux-build:fn-aux.rs\n \n #![feature(associated_type_bounds)]\n+#![allow(dead_code)]\n \n extern crate fn_aux;\n "}, {"sha": "2c1ce1c3785ae9b7f4554aff4d9db0dd97d5bade", "filename": "src/test/ui/associated-type-bounds/struct-bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fstruct-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fstruct-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fstruct-bounds.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n trait Tr1 { type As1; }"}, {"sha": "b9fc1a88cee13ad015e8bbe6a7eef5ab80c62ee9", "filename": "src/test/ui/async-await/argument-patterns.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n-// run-pass\n+// check-pass\n \n-#![allow(unused_variables)]\n #![deny(unused_mut)]\n \n type A = Vec<u32>;"}, {"sha": "1dc7315e88c111b5fd480b796cba4e1e40731f45", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![allow(unused)]\n+\n // edition:2018\n // aux-build:arc_wake.rs\n "}, {"sha": "15cc9fbc81fb7886f40b4ae95e128e1320b72e2d", "filename": "src/test/ui/async-await/drop-order/drop-order-for-locals-when-cancelled.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -3,14 +3,16 @@\n // run-pass\n \n #![deny(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_must_use)]\n+#![allow(path_statements)]\n \n // Test that the drop order for locals in a fn and async fn matches up.\n extern crate arc_wake;\n \n use arc_wake::ArcWake;\n use std::cell::RefCell;\n use std::future::Future;\n-use std::marker::PhantomData;\n use std::pin::Pin;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -42,7 +44,7 @@ struct NeverReady;\n \n impl Future for NeverReady {\n     type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n         Poll::Pending\n     }\n }"}, {"sha": "9e8304935bffc6c713a7d8eaa5d7d5e56e3b7aa2", "filename": "src/test/ui/async-await/drop-order/drop-order-when-cancelled.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -6,6 +6,8 @@\n // parameters (used or unused) are not dropped until the async fn is cancelled.\n // This file is mostly copy-pasted from drop-order-for-async-fn-parameters.rs\n \n+#![allow(unused_variables)]\n+\n extern crate arc_wake;\n \n use arc_wake::ArcWake;\n@@ -43,7 +45,7 @@ struct NeverReady;\n \n impl Future for NeverReady {\n     type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n         Poll::Pending\n     }\n }"}, {"sha": "c3b3392cfc495ab6ac5289efc3a5808c7661d0ad", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -0,0 +1,8 @@\n+warning: unnecessary parentheses around assigned value\n+  --> $DIR/issue-54752-async-block.rs:6:22\n+   |\n+LL | fn main() { let _a = (async  { }); }\n+   |                      ^^^^^^^^^^^^ help: remove these parentheses\n+   |\n+   = note: `#[warn(unused_parens)]` on by default\n+"}, {"sha": "c2e24a96b1d930f46065c1c087e40ab539423cd6", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -4,7 +4,7 @@\n \n // run-pass\n \n-// compile-flags: --edition=2018\n+// compile-flags: --edition=2018 -Aunused\n \n pub enum Uninhabited { }\n "}, {"sha": "e788ca5ff49c32a20cbabe1b0839048f2514e0c4", "filename": "src/test/ui/async-await/multiple-lifetimes/hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-// run-pass\n+// check-pass\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n "}, {"sha": "6587dfdbc03f3af267e22006bf5e60b7ed94e379", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -17,7 +17,7 @@\n // revisions: zflag edition\n //[zflag]compile-flags: -Z borrowck=migrate\n //[edition]edition:2018\n-//[zflag] run-pass\n+//[zflag] check-pass\n \n pub struct Block<'a> {\n     current: &'a u8,"}, {"sha": "22eaa119f2467167e57ed7373b8b9df23e00f145", "filename": "src/test/ui/borrowck/issue-10876.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n enum Nat {\n     S(Box<Nat>),"}, {"sha": "599138a9ce0f118adaacfc30d595bbace9849500", "filename": "src/test/ui/borrowck/two-phase-multiple-activations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -11,13 +11,13 @@ pub trait FakeRead {\n }\n \n impl FakeRead for Foo {\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n+    fn read_to_end(&mut self, _buf: &mut Vec<u8>) -> Result<usize> {\n         Ok(4)\n     }\n }\n \n fn main() {\n     let mut a = Foo {};\n     let mut v = Vec::new();\n-    a.read_to_end(&mut v);\n+    a.read_to_end(&mut v).unwrap();\n }"}, {"sha": "7acc50819a6ad4ed2869bff7a4ffc0aa8ade6fb4", "filename": "src/test/ui/const-generics/apit-with-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash"}, {"sha": "2d1a405ebdd808d85a9f0bf4fa0dd9821493a869", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -3,6 +3,8 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n+#![allow(dead_code)]\n+\n struct ArrayStruct<T, const N: usize> {\n     data: [T; N],\n }"}, {"sha": "bc5188133d7f15124873c97f7ac071170887956b", "filename": "src/test/ui/const-generics/const-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -3,7 +3,7 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-#[allow(dead_code)]\n+#![allow(dead_code, unused_variables)]\n \n struct ConstArray<T, const LEN: usize> {\n     array: [T; LEN],"}, {"sha": "45d37b6a2f3c5d115214bb5dd00954e94f112ad0", "filename": "src/test/ui/const-generics/issue-61422.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n@@ -8,7 +8,7 @@ use std::mem;\n fn foo<const SIZE: usize>() {\n     let arr: [u8; SIZE] = unsafe {\n         #[allow(deprecated)]\n-        let mut array: [u8; SIZE] = mem::uninitialized();\n+        let array: [u8; SIZE] = mem::uninitialized();\n         array\n     };\n }"}, {"sha": "8025b3af8f1bf5cee7b0216c0b586e4ef5d15acf", "filename": "src/test/ui/const-generics/unused-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash"}, {"sha": "f0e1d8263022b98bf104561a97278ce8d50a405e", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(const_fn_union)]\n+#![allow(dead_code)]\n \n #[repr(C)]\n union Transmute<T: Copy, U: Copy> {"}, {"sha": "7cdbb22f9245960bcdf243e676c9c7c14a1a7da6", "filename": "src/test/ui/consts/const-labeled-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// build-pass\n \n // Using labeled break in a while loop has caused an illegal instruction being\n // generated, and an ICE later."}, {"sha": "9b7daf2e674fbffb0884bd575c3028fa978bc2d1", "filename": "src/test/ui/consts/packed_pattern.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.stderr?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable pattern\n+  --> $DIR/packed_pattern.rs:16:9\n+   |\n+LL |         FOO => unreachable!(),\n+   |         ^^^\n+   |\n+   = note: `#[warn(unreachable_patterns)]` on by default\n+"}, {"sha": "6cc0225d3043d0252dbbaf3626988deaf4d3cc22", "filename": "src/test/ui/consts/packed_pattern2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.stderr?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable pattern\n+  --> $DIR/packed_pattern2.rs:24:9\n+   |\n+LL |         FOO => unreachable!(),\n+   |         ^^^\n+   |\n+   = note: `#[warn(unreachable_patterns)]` on by default\n+"}, {"sha": "464ddcc4cdb94b1945d76814eafa01549cef9dc9", "filename": "src/test/ui/deprecation/deprecation-in-future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![deny(deprecated_in_future)]\n "}, {"sha": "91063edf0f6c4badf45a759ad86bcb9722290287", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -8,6 +8,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(slice_patterns)]\n+#![allow(unused)]\n \n use std::{\n     cell::{Cell, RefCell},"}, {"sha": "392e7233b567aecf26e5402746ccc5b536c399e5", "filename": "src/test/ui/hrtb/issue-57639.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -10,7 +10,7 @@\n //\n // See [this comment on GitHub][c] for more details.\n //\n-// run-pass\n+// check-pass\n //\n // [c]: https://github.com/rust-lang/rust/issues/57639#issuecomment-455685861\n "}, {"sha": "73402e55a4fd835f0f08086b800d611f9b9546e5", "filename": "src/test/ui/if-ret.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-ret.stderr?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable block in `if` expression\n+  --> $DIR/if-ret.rs:6:24\n+   |\n+LL | fn foo() { if (return) { } }\n+   |                        ^^^\n+   |\n+   = note: `#[warn(unreachable_code)]` on by default\n+"}, {"sha": "9dab334a217c29004296e3f6bb315bba946c2a2e", "filename": "src/test/ui/impl-trait/closure-calling-parent-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -5,7 +5,7 @@\n // `foo` and hence is treated opaquely within the closure body.  This\n // resulted in a failed subtype relationship.\n //\n-// run-pass\n+// check-pass\n \n fn foo() -> impl Copy { || foo(); }\n fn bar() -> impl Copy { || bar(); }"}, {"sha": "3f9750249250686cae0442f9ab70968971bc1bbe", "filename": "src/test/ui/impl-trait/issues/issue-53457.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(type_alias_impl_trait)]\n \n@@ -9,7 +9,7 @@ fn bar<F: Fn(&i32) + Clone>(f: F) -> F {\n }\n \n fn foo() -> X {\n-    bar(|x| ())\n+    bar(|_| ())\n }\n \n fn main() {}"}, {"sha": "3911769b0c63d245cd2aadffeb8b2d34df768884", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-// run-pass\n+// check-pass\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n "}, {"sha": "3c8682bb62aa5ff2fdadf68a46f159479531637d", "filename": "src/test/ui/impl-trait/needs_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,9 +1,7 @@\n-// run-pass\n+// check-pass\n \n #![feature(member_constraints)]\n \n-use std::fmt::Debug;\n-\n trait MultiRegionTrait<'a, 'b> {}\n impl<'a, 'b> MultiRegionTrait<'a, 'b> for (&'a u32, &'b u32) {}\n "}, {"sha": "c60e06c3ceb3504dafb7a71cfa7b5268e98c8f1a", "filename": "src/test/ui/issues/issue-26448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n pub struct Bar<T> {\n     items: Vec<&'static str>,"}, {"sha": "d48022c09fee3670edde7a7e5c9b79b5c66c60a6", "filename": "src/test/ui/issues/issue-26448-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n pub struct Item {\n     _inner: &'static str,"}, {"sha": "12af8a8e875af20e4e3690d846054d046d15124e", "filename": "src/test/ui/issues/issue-27697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-27697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-27697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27697.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n use std::ops::Deref;\n "}, {"sha": "2f594b48e697f2b0e0ef0b4c11bcdb9fce8a031e", "filename": "src/test/ui/issues/issue-38591.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-38591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-38591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38591.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n struct S<T> {\n     t : T,"}, {"sha": "8c8cccfb2bb820ec91793c74a73071bfbb2b8be3", "filename": "src/test/ui/issues/issue-43806.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-43806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-43806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43806.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![deny(unused_results)]\n "}, {"sha": "f564aefe78ced4e6770c4833a1983087fb588e01", "filename": "src/test/ui/issues/issue-48132.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -3,6 +3,8 @@\n \n // run-pass\n \n+#![allow(dead_code)]\n+\n struct Inner<I, V> {\n     iterator: I,\n     item: V,"}, {"sha": "f81203dc41299701e937cfd13b46cbe2bc2e826e", "filename": "src/test/ui/issues/issue-48179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #48132. This was failing due to problems around\n // the projection caching and dropck type enumeration.\n \n-// run-pass\n+// check-pass\n \n pub struct Container<T: Iterator> {\n     value: Option<T::Item>,"}, {"sha": "de7d6a0d80c9e528bde9feb0f38b9872c705600c", "filename": "src/test/ui/issues/issue-61711-once-caused-rustc-inf-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-61711-once-caused-rustc-inf-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fissues%2Fissue-61711-once-caused-rustc-inf-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61711-once-caused-rustc-inf-loop.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -5,7 +5,7 @@\n // aux-build:xcrate-issue-61711-b.rs\n // compile-flags:--extern xcrate_issue_61711_b\n \n-// run-pass\n+// build-pass\n \n fn f<F: Fn(xcrate_issue_61711_b::Struct)>(_: F) { }\n fn main() { }"}, {"sha": "9a0ec253322e41e6ff42bd5dda7cc2d12ce9f95f", "filename": "src/test/ui/lint/empty-lint-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,6 +1,6 @@\n #![feature(lint_reasons)]\n \n-// run-pass\n+// check-pass\n \n // Empty (and reason-only) lint attributes are legal\u2014although we may want to\n // lint them in the future (Issue #55112)."}, {"sha": "aab2dc267d59423ad6a7dde49b021541a81ded08", "filename": "src/test/ui/nll/issue-55288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n struct Slice(&'static [&'static [u8]]);\n "}, {"sha": "32e45184a91952294baf158ed83ac9ab1530a282", "filename": "src/test/ui/nll/issue-57960.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -30,7 +30,6 @@ fn digits(x: u8) -> u32 {\n         OneDigit::FIRST..=OneDigit::LAST => 1,\n         TwoDigits::FIRST..=TwoDigits::LAST => 2,\n         ThreeDigits::FIRST..=ThreeDigits::LAST => 3,\n-        _ => unreachable!(),\n     }\n }\n "}, {"sha": "bb6d981e0133f2ca443469bbd849fb61494cb958", "filename": "src/test/ui/nll/normalization-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,6 +1,6 @@\n // Check that lifetime bounds get checked the right way around with NLL enabled.\n \n-//run-pass\n+// check-pass\n \n trait Visitor<'d> {\n     type Value;"}, {"sha": "3b06b0db370655f1c8d903f8c70bf58516667d9b", "filename": "src/test/ui/nll/promotable-mutable-zst-doesnt-conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,11 +1,11 @@\n // Check that mutable promoted length zero arrays don't check for conflicting\n // access\n \n-// run-pass\n+// check-pass\n \n pub fn main() {\n     let mut x: Vec<&[i32; 0]> = Vec::new();\n-    for i in 0..10 {\n+    for _ in 0..10 {\n         x.push(&[]);\n     }\n }"}, {"sha": "147413663897d9cd4663f9f85a5b37cd8f985106", "filename": "src/test/ui/nll/user-annotations/issue-55219.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -3,7 +3,7 @@\n // The `Self::HASH_LEN` here expands to a \"self-type\" where `T` is not\n // known. This unbound inference variable was causing an ICE.\n //\n-// run-pass\n+// check-pass\n \n pub struct Foo<T>(T);\n "}, {"sha": "df905c8786a189102d163f2bb8a0c97752fd9c4d", "filename": "src/test/ui/nll/user-annotations/normalize-self-ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -2,7 +2,7 @@\n // the inherent impl requires normalization to be equal to the\n // user-provided type.\n //\n-// run-pass\n+// check-pass\n \n trait Mirror {\n     type Me;\n@@ -15,7 +15,7 @@ impl<T> Mirror for T {\n struct Foo<A, B>(A, B);\n \n impl<A> Foo<A, <A as Mirror>::Me> {\n-    fn m(b: A) { }\n+    fn m(_: A) { }\n }\n \n fn main() {"}, {"sha": "041e410df85c985d038a75f4e7eb854810a67665", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -11,8 +11,8 @@ use std::sync::mpsc::channel;\n fn main() {\n     let (tx, rx) = channel();\n     let x = Some(rx);\n-    tx.send(false);\n-    tx.send(false);\n+    tx.send(false).unwrap();\n+    tx.send(false).unwrap();\n     match x {\n         Some(z) if z.recv().unwrap() => { panic!() },\n         Some(z) => { assert!(!z.recv().unwrap()); },"}, {"sha": "fe7df44590b8df8636690d1e0eae4a80b34900de", "filename": "src/test/ui/rfc-2008-non-exhaustive/variants_same_crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -10,11 +10,11 @@ pub enum NonExhaustiveVariants {\n \n fn main() {\n     let variant_tuple = NonExhaustiveVariants::Tuple(340);\n-    let variant_struct = NonExhaustiveVariants::Struct { field: 340 };\n+    let _variant_struct = NonExhaustiveVariants::Struct { field: 340 };\n \n     match variant_tuple {\n         NonExhaustiveVariants::Unit => \"\",\n-        NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n-        NonExhaustiveVariants::Struct { field } => \"\"\n+        NonExhaustiveVariants::Tuple(_fe_tpl) => \"\",\n+        NonExhaustiveVariants::Struct { field: _ } => \"\"\n     };\n }"}, {"sha": "b95105b59eddb9b37db35a0b9685e35c55127eb2", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -2,8 +2,6 @@\n \n #![allow(irrefutable_let_patterns)]\n \n-use std::ops::Range;\n-\n fn main() {\n     let x: bool;\n     // This should associate as: `(x = (true && false));`."}, {"sha": "be7ef658411e1fca918aec26d10da548ffc6796d", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable block in `if` expression\n+  --> $DIR/protect-precedences.rs:13:41\n+   |\n+LL |         if let _ = return true && false {};\n+   |                                         ^^\n+   |\n+   = note: `#[warn(unreachable_code)]` on by default\n+"}, {"sha": "1440f02df1df884d135709cbc13669d44d24189b", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n // This test checks that trait objects involving trait aliases are well-formed.\n "}, {"sha": "19fcc78721ab13afd10d486b0c4a748002b25930", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args-pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -9,13 +9,13 @@\n \n #![allow(irrefutable_let_patterns)]\n \n-enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n+enum Enum<T> { TSVariant(T), SVariant { _v: T }, UVariant }\n type Alias<T> = Enum<T>;\n type AliasFixed = Enum<()>;\n \n macro_rules! is_variant {\n     (TSVariant, $expr:expr) => (is_variant!(@check TSVariant, (_), $expr));\n-    (SVariant, $expr:expr) => (is_variant!(@check SVariant, { v: _ }, $expr));\n+    (SVariant, $expr:expr) => (is_variant!(@check SVariant, { _v: _ }, $expr));\n     (UVariant, $expr:expr) => (is_variant!(@check UVariant, {}, $expr));\n     (@check $variant:ident, $matcher:tt, $expr:expr) => (\n         assert!(if let Enum::$variant::<()> $matcher = $expr { true } else { false },\n@@ -37,14 +37,14 @@ fn main() {\n \n     // Struct variant\n \n-    is_variant!(SVariant, Enum::SVariant { v: () });\n-    is_variant!(SVariant, Enum::SVariant::<()> { v: () });\n-    is_variant!(SVariant, Enum::<()>::SVariant { v: () });\n+    is_variant!(SVariant, Enum::SVariant { _v: () });\n+    is_variant!(SVariant, Enum::SVariant::<()> { _v: () });\n+    is_variant!(SVariant, Enum::<()>::SVariant { _v: () });\n \n-    is_variant!(SVariant, Alias::SVariant { v: () });\n-    is_variant!(SVariant, Alias::<()>::SVariant { v: () });\n+    is_variant!(SVariant, Alias::SVariant { _v: () });\n+    is_variant!(SVariant, Alias::<()>::SVariant { _v: () });\n \n-    is_variant!(SVariant, AliasFixed::SVariant { v: () });\n+    is_variant!(SVariant, AliasFixed::SVariant { _v: () });\n \n     // Unit variant\n "}, {"sha": "53babefae81c09df44a687c4e2c1c0939c43b814", "filename": "src/test/ui/while-let.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#[allow(dead_code)]\n fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n@@ -12,16 +13,16 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1, { //~ WARN irrefutable while-let\n+    foo!(_a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1, { //~ WARN irrefutable while-let\n+    bar!(_a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    while let a = 1 { //~ WARN irrefutable while-let\n+    while let _a = 1 { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n         break;\n     }"}, {"sha": "30307ecaeadf244faf12bfcd8aa67f7262c54c57", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1,31 +1,31 @@\n warning: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:6:13\n+  --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n    |               ^^^^^\n ...\n-LL | /     foo!(a, 1, {\n+LL | /     foo!(_a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:6:13\n+  --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n    |               ^^^^^\n ...\n-LL | /     bar!(a, 1, {\n+LL | /     bar!(_a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n \n warning: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:24:5\n+  --> $DIR/while-let.rs:25:5\n    |\n-LL | /     while let a = 1 {\n+LL | /     while let _a = 1 {\n LL | |         println!(\"irrefutable pattern\");\n LL | |         break;\n LL | |     }"}, {"sha": "48dd68d0f61eededa6001b1b640ff1cc1a179a9e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -628,6 +628,11 @@ impl TestProps {\n         }\n         self.pass_mode\n     }\n+\n+    // does not consider CLI override for pass mode\n+    pub fn local_pass_mode(&self) -> Option<PassMode> {\n+        self.pass_mode\n+    }\n }\n \n fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {"}, {"sha": "aff554678a3f406d161b1526f56464f6b1df37b3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510976b4e671b51fc7cacf9c957a124e367ce9ed/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=510976b4e671b51fc7cacf9c957a124e367ce9ed", "patch": "@@ -1557,7 +1557,11 @@ impl<'test> TestCx<'test> {\n                 // want to actually assert warnings about all this code. Instead\n                 // let's just ignore unused code warnings by defaults and tests\n                 // can turn it back on if needed.\n-                if !self.config.src_base.ends_with(\"rustdoc-ui\") {\n+                if !self.config.src_base.ends_with(\"rustdoc-ui\") &&\n+                    // Note that we don't call pass_mode() here as we don't want\n+                    // to set unused to allow if we've overriden the pass mode\n+                    // via command line flags.\n+                    self.props.local_pass_mode() != Some(PassMode::Run) {\n                     rustc.args(&[\"-A\", \"unused\"]);\n                 }\n             }"}]}