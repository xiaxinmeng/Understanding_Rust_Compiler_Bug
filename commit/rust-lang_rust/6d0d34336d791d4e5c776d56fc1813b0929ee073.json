{"sha": "6d0d34336d791d4e5c776d56fc1813b0929ee073", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMGQzNDMzNmQ3OTFkNGU1Yzc3NmQ1NmZjMTgxM2IwOTI5ZWUwNzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-08T19:25:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-08T19:25:57Z"}, "message": "Rollup merge of #48699 - frewsxcv:frewsxcv-impl-trait, r=nikomatsakis\n\nReplace iterator structures with `impl Trait`.\n\nTwo commits:\n\n* Replace iterator structures with `impl Trait`.\n* Run rustfmt on `src/librustc_data_structures/graph/mod.rs`.", "tree": {"sha": "31e32eb157494f1933eed3f46df9cea83e43371b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e32eb157494f1933eed3f46df9cea83e43371b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0d34336d791d4e5c776d56fc1813b0929ee073", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaoY5FCRBK7hj4Ov3rIwAAdHIIAKMvAJ0YLCoqMokiVmCyuyDa\n3tL4tDPnrpfwYyJ33UTVN45G/So5vUw5aBj6dD5w7UCEhsDjEFJ7N63T2oFQG4LH\nNFN3TAm/iakEfLAwpEoMaWeJ/MtLPDcvtH+X/qco8zqIletjZCHfg5SzjjOBh5sg\nElfj1p9eoUXaSTKVbWHbK01q6pDwSDq56hkVqTsfD0rku+Os6EGjgpwIyKB4r0Hp\nzvhRcbYaRgKzmhO6kuKuYZrwyCDWTPJuyeLrG+lIWYkrWOiN8CS26bexMKpQJU2I\n4jJ0tgAsAAu3GPlg0zZAe/ksgYlHrlH2tSjdTXZnsxlt99i+UIxhIM2nKwwtmFo=\n=sI/0\n-----END PGP SIGNATURE-----\n", "payload": "tree 31e32eb157494f1933eed3f46df9cea83e43371b\nparent d7f44ac52c06b3232dfe6b4fd542c17ce9c8da9e\nparent 08a01825364c429675d28b326e047ce4bc56ff7f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1520537157 -0800\ncommitter GitHub <noreply@github.com> 1520537157 -0800\n\nRollup merge of #48699 - frewsxcv:frewsxcv-impl-trait, r=nikomatsakis\n\nReplace iterator structures with `impl Trait`.\n\nTwo commits:\n\n* Replace iterator structures with `impl Trait`.\n* Run rustfmt on `src/librustc_data_structures/graph/mod.rs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d34336d791d4e5c776d56fc1813b0929ee073", "html_url": "https://github.com/rust-lang/rust/commit/6d0d34336d791d4e5c776d56fc1813b0929ee073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d34336d791d4e5c776d56fc1813b0929ee073/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f44ac52c06b3232dfe6b4fd542c17ce9c8da9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f44ac52c06b3232dfe6b4fd542c17ce9c8da9e", "html_url": "https://github.com/rust-lang/rust/commit/d7f44ac52c06b3232dfe6b4fd542c17ce9c8da9e"}, {"sha": "08a01825364c429675d28b326e047ce4bc56ff7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a01825364c429675d28b326e047ce4bc56ff7f", "html_url": "https://github.com/rust-lang/rust/commit/08a01825364c429675d28b326e047ce4bc56ff7f"}], "stats": {"total": 152, "additions": 53, "deletions": 99}, "files": [{"sha": "1945b82c03145218b9ac3c3730ff9ac0e4425182", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 52, "deletions": 99, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d34336d791d4e5c776d56fc1813b0929ee073/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d34336d791d4e5c776d56fc1813b0929ee073/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=6d0d34336d791d4e5c776d56fc1813b0929ee073", "patch": "@@ -196,30 +196,30 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n     // # Iterating over nodes, edges\n \n-    pub fn enumerated_nodes(&self) -> EnumeratedNodes<N> {\n-        EnumeratedNodes {\n-            iter: self.nodes.iter().enumerate()\n-        }\n+    pub fn enumerated_nodes(&self) -> impl Iterator<Item = (NodeIndex, &Node<N>)> {\n+        self.nodes\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, n)| (NodeIndex(idx), n))\n     }\n \n-    pub fn enumerated_edges(&self) -> EnumeratedEdges<E> {\n-        EnumeratedEdges {\n-            iter: self.edges.iter().enumerate()\n-        }\n+    pub fn enumerated_edges(&self) -> impl Iterator<Item = (EdgeIndex, &Edge<E>)> {\n+        self.edges\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, e)| (EdgeIndex(idx), e))\n     }\n \n-    pub fn each_node<'a, F>(&'a self, mut f: F) -> bool\n-        where F: FnMut(NodeIndex, &'a Node<N>) -> bool\n-    {\n+    pub fn each_node<'a>(&'a self, mut f: impl FnMut(NodeIndex, &'a Node<N>) -> bool) -> bool {\n         //! Iterates over all edges defined in the graph.\n-        self.enumerated_nodes().all(|(node_idx, node)| f(node_idx, node))\n+        self.enumerated_nodes()\n+            .all(|(node_idx, node)| f(node_idx, node))\n     }\n \n-    pub fn each_edge<'a, F>(&'a self, mut f: F) -> bool\n-        where F: FnMut(EdgeIndex, &'a Edge<E>) -> bool\n-    {\n+    pub fn each_edge<'a>(&'a self, mut f: impl FnMut(EdgeIndex, &'a Edge<E>) -> bool) -> bool {\n         //! Iterates over all edges defined in the graph\n-        self.enumerated_edges().all(|(edge_idx, edge)| f(edge_idx, edge))\n+        self.enumerated_edges()\n+            .all(|(edge_idx, edge)| f(edge_idx, edge))\n     }\n \n     pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<N, E> {\n@@ -239,26 +239,33 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         }\n     }\n \n-    pub fn successor_nodes(&self, source: NodeIndex) -> AdjacentTargets<N, E> {\n+    pub fn successor_nodes<'a>(\n+        &'a self,\n+        source: NodeIndex,\n+    ) -> impl Iterator<Item = NodeIndex> + 'a {\n         self.outgoing_edges(source).targets()\n     }\n \n-    pub fn predecessor_nodes(&self, target: NodeIndex) -> AdjacentSources<N, E> {\n+    pub fn predecessor_nodes<'a>(\n+        &'a self,\n+        target: NodeIndex,\n+    ) -> impl Iterator<Item = NodeIndex> + 'a {\n         self.incoming_edges(target).sources()\n     }\n \n-    pub fn depth_traverse<'a>(&'a self,\n-                              start: NodeIndex,\n-                              direction: Direction)\n-                              -> DepthFirstTraversal<'a, N, E> {\n+    pub fn depth_traverse<'a>(\n+        &'a self,\n+        start: NodeIndex,\n+        direction: Direction,\n+    ) -> DepthFirstTraversal<'a, N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n \n-    pub fn nodes_in_postorder<'a>(&'a self,\n-                                  direction: Direction,\n-                                  entry_node: NodeIndex)\n-                                  -> Vec<NodeIndex>\n-    {\n+    pub fn nodes_in_postorder<'a>(\n+        &'a self,\n+        direction: Direction,\n+        entry_node: NodeIndex,\n+    ) -> Vec<NodeIndex> {\n         let mut visited = BitVector::new(self.len_nodes());\n         let mut stack = vec![];\n         let mut result = Vec::with_capacity(self.len_nodes());\n@@ -268,7 +275,8 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n             }\n         };\n \n-        for node in Some(entry_node).into_iter()\n+        for node in Some(entry_node)\n+            .into_iter()\n             .chain(self.enumerated_nodes().map(|(node, _)| node))\n         {\n             push_node(&mut stack, node);\n@@ -293,50 +301,23 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n // # Iterators\n \n-pub struct EnumeratedNodes<'g, N>\n-    where N: 'g,\n-{\n-    iter: ::std::iter::Enumerate<::std::slice::Iter<'g, Node<N>>>\n-}\n-\n-impl<'g, N: Debug> Iterator for EnumeratedNodes<'g, N> {\n-    type Item = (NodeIndex, &'g Node<N>);\n-\n-    fn next(&mut self) -> Option<(NodeIndex, &'g Node<N>)> {\n-        self.iter.next().map(|(idx, n)| (NodeIndex(idx), n))\n-    }\n-}\n-\n-pub struct EnumeratedEdges<'g, E>\n-    where E: 'g,\n-{\n-    iter: ::std::iter::Enumerate<::std::slice::Iter<'g, Edge<E>>>\n-}\n-\n-impl<'g, E: Debug> Iterator for EnumeratedEdges<'g, E> {\n-    type Item = (EdgeIndex, &'g Edge<E>);\n-\n-    fn next(&mut self) -> Option<(EdgeIndex, &'g Edge<E>)> {\n-        self.iter.next().map(|(idx, e)| (EdgeIndex(idx), e))\n-    }\n-}\n-\n pub struct AdjacentEdges<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n+where\n+    N: 'g,\n+    E: 'g,\n {\n     graph: &'g Graph<N, E>,\n     direction: Direction,\n     next: EdgeIndex,\n }\n \n-impl<'g, N, E> AdjacentEdges<'g, N, E> {\n-    fn targets(self) -> AdjacentTargets<'g, N, E> {\n-        AdjacentTargets { edges: self }\n+impl<'g, N: Debug, E: Debug> AdjacentEdges<'g, N, E> {\n+    fn targets(self) -> impl Iterator<Item = NodeIndex> + 'g {\n+        self.into_iter().map(|(_, edge)| edge.target)\n     }\n \n-    fn sources(self) -> AdjacentSources<'g, N, E> {\n-        AdjacentSources { edges: self }\n+    fn sources(self) -> impl Iterator<Item = NodeIndex> + 'g {\n+        self.into_iter().map(|(_, edge)| edge.source)\n     }\n }\n \n@@ -355,39 +336,10 @@ impl<'g, N: Debug, E: Debug> Iterator for AdjacentEdges<'g, N, E> {\n     }\n }\n \n-pub struct AdjacentTargets<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n-{\n-    edges: AdjacentEdges<'g, N, E>,\n-}\n-\n-impl<'g, N: Debug, E: Debug> Iterator for AdjacentTargets<'g, N, E> {\n-    type Item = NodeIndex;\n-\n-    fn next(&mut self) -> Option<NodeIndex> {\n-        self.edges.next().map(|(_, edge)| edge.target)\n-    }\n-}\n-\n-pub struct AdjacentSources<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n-{\n-    edges: AdjacentEdges<'g, N, E>,\n-}\n-\n-impl<'g, N: Debug, E: Debug> Iterator for AdjacentSources<'g, N, E> {\n-    type Item = NodeIndex;\n-\n-    fn next(&mut self) -> Option<NodeIndex> {\n-        self.edges.next().map(|(_, edge)| edge.source)\n-    }\n-}\n-\n pub struct DepthFirstTraversal<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n+where\n+    N: 'g,\n+    E: 'g,\n {\n     graph: &'g Graph<N, E>,\n     stack: Vec<NodeIndex>,\n@@ -396,10 +348,11 @@ pub struct DepthFirstTraversal<'g, N, E>\n }\n \n impl<'g, N: Debug, E: Debug> DepthFirstTraversal<'g, N, E> {\n-    pub fn with_start_node(graph: &'g Graph<N, E>,\n-                           start_node: NodeIndex,\n-                           direction: Direction)\n-                           -> Self {\n+    pub fn with_start_node(\n+        graph: &'g Graph<N, E>,\n+        start_node: NodeIndex,\n+        direction: Direction,\n+    ) -> Self {\n         let mut visited = BitVector::new(graph.len_nodes());\n         visited.insert(start_node.node_id());\n         DepthFirstTraversal {"}, {"sha": "81246aea1b56e26541ab98414fbc92984927f1ac", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d34336d791d4e5c776d56fc1813b0929ee073/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d34336d791d4e5c776d56fc1813b0929ee073/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=6d0d34336d791d4e5c776d56fc1813b0929ee073", "patch": "@@ -34,6 +34,7 @@\n #![feature(underscore_lifetimes)]\n #![feature(macro_vis_matcher)]\n #![feature(allow_internal_unstable)]\n+#![feature(universal_impl_trait)]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]"}]}