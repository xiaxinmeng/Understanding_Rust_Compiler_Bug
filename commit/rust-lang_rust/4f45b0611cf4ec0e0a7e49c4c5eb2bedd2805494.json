{"sha": "4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNDViMDYxMWNmNGVjMGUwYTdlNDljNGM1ZWIyYmVkZDI4MDU0OTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-05-17T18:32:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-05T16:03:47Z"}, "message": "Add AdHocCalls and pass self to build_controller as Box<Self>", "tree": {"sha": "6a704bd6319cfcf6aa1b694c0bdccd8760ba1ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a704bd6319cfcf6aa1b694c0bdccd8760ba1ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494", "html_url": "https://github.com/rust-lang/rust/commit/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218", "html_url": "https://github.com/rust-lang/rust/commit/90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "991918a1729eac4ea3cbbf924423d713e1a6d3ae", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494", "patch": "@@ -454,7 +454,7 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<CodegenBackend> {\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n pub fn run_compiler<'a>(args: &[String],\n-                        callbacks: &mut (CompilerCalls<'a> + sync::Send),\n+                        callbacks: Box<CompilerCalls<'a> + sync::Send + 'a>,\n                         file_loader: Option<Box<FileLoader + Send + Sync + 'static>>,\n                         emitter_dest: Option<Box<Write + Send>>)\n                         -> (CompileResult, Option<Session>)\n@@ -478,7 +478,7 @@ fn run_compiler_with_pool<'a>(\n     matches: getopts::Matches,\n     sopts: config::Options,\n     cfg: ast::CrateConfig,\n-    callbacks: &mut (CompilerCalls<'a> + sync::Send),\n+    mut callbacks: Box<CompilerCalls<'a> + sync::Send + 'a>,\n     file_loader: Option<Box<FileLoader + Send + Sync + 'static>>,\n     emitter_dest: Option<Box<Write + Send>>\n ) -> (CompileResult, Option<Session>) {\n@@ -642,12 +642,12 @@ impl Compilation {\n     }\n }\n \n-// A trait for customising the compilation process. Offers a number of hooks for\n-// executing custom code or customising input.\n+/// A trait for customising the compilation process. Offers a number of hooks for\n+/// executing custom code or customising input.\n pub trait CompilerCalls<'a> {\n-    // Hook for a callback early in the process of handling arguments. This will\n-    // be called straight after options have been parsed but before anything\n-    // else (e.g., selecting input and output).\n+    /// Hook for a callback early in the process of handling arguments. This will\n+    /// be called straight after options have been parsed but before anything\n+    /// else (e.g., selecting input and output).\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n@@ -658,9 +658,9 @@ pub trait CompilerCalls<'a> {\n         Compilation::Continue\n     }\n \n-    // Hook for a callback late in the process of handling arguments. This will\n-    // be called just before actual compilation starts (and before build_controller\n-    // is called), after all arguments etc. have been completely handled.\n+    /// Hook for a callback late in the process of handling arguments. This will\n+    /// be called just before actual compilation starts (and before build_controller\n+    /// is called), after all arguments etc. have been completely handled.\n     fn late_callback(&mut self,\n                      _: &CodegenBackend,\n                      _: &getopts::Matches,\n@@ -673,21 +673,21 @@ pub trait CompilerCalls<'a> {\n         Compilation::Continue\n     }\n \n-    // Called after we extract the input from the arguments. Gives the implementer\n-    // an opportunity to change the inputs or to add some custom input handling.\n-    // The default behaviour is to simply pass through the inputs.\n+    /// Called after we extract the input from the arguments. Gives the implementer\n+    /// an opportunity to change the inputs or to add some custom input handling.\n+    /// The default behaviour is to simply pass through the inputs.\n     fn some_input(&mut self,\n                   input: Input,\n                   input_path: Option<PathBuf>)\n                   -> (Input, Option<PathBuf>) {\n         (input, input_path)\n     }\n \n-    // Called after we extract the input from the arguments if there is no valid\n-    // input. Gives the implementer an opportunity to supply alternate input (by\n-    // returning a Some value) or to add custom behaviour for this error such as\n-    // emitting error messages. Returning None will cause compilation to stop\n-    // at this point.\n+    /// Called after we extract the input from the arguments if there is no valid\n+    /// input. Gives the implementer an opportunity to supply alternate input (by\n+    /// returning a Some value) or to add custom behaviour for this error such as\n+    /// emitting error messages. Returning None will cause compilation to stop\n+    /// at this point.\n     fn no_input(&mut self,\n                 _: &getopts::Matches,\n                 _: &config::Options,\n@@ -701,13 +701,41 @@ pub trait CompilerCalls<'a> {\n \n     // Create a CompilController struct for controlling the behaviour of\n     // compilation.\n-    fn build_controller(&mut self, _: &Session, _: &getopts::Matches) -> CompileController<'a>;\n+    fn build_controller(\n+        self: Box<Self>,\n+        _: &Session,\n+        _: &getopts::Matches\n+    ) -> CompileController<'a>;\n }\n \n-// CompilerCalls instance for a regular rustc build.\n+/// CompilerCalls instance for a regular rustc build.\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n+/// CompilerCalls instance for quick access to the result of one compile phase.\n+pub enum AdHocCalls<'a> {\n+    AfterAnalysis(Compilation, Box<Fn(&mut ::driver::CompileState) + 'a>)\n+}\n+\n+impl<'a> CompilerCalls<'a> for AdHocCalls<'a> {\n+    fn build_controller(\n+        self: Box<Self>,\n+        _: &Session,\n+        _: &getopts::Matches\n+    ) -> CompileController<'a> {\n+        let mut control = CompileController::basic();\n+\n+        match *self {\n+            AdHocCalls::AfterAnalysis(c, f) => {\n+                control.after_analysis.stop = c;\n+                control.after_analysis.callback = f;\n+            }\n+        }\n+\n+        control\n+    }\n+}\n+\n // FIXME remove these and use winapi 0.3 instead\n // Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs\n #[cfg(unix)]\n@@ -878,7 +906,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             .and_then(|| RustcDefaultCalls::list_metadata(sess, cstore, matches, input))\n     }\n \n-    fn build_controller(&mut self,\n+    fn build_controller(self: Box<Self>,\n                         sess: &Session,\n                         matches: &getopts::Matches)\n                         -> CompileController<'a> {\n@@ -1693,7 +1721,7 @@ pub fn main() {\n             }))\n             .collect::<Vec<_>>();\n         run_compiler(&args,\n-                     &mut RustcDefaultCalls,\n+                     Box::new(RustcDefaultCalls),\n                      None,\n                      None)\n     });"}, {"sha": "b3a6fb4d590ae279925001b94b39f85eaacdc8bd", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=4f45b0611cf4ec0e0a7e49c4c5eb2bedd2805494", "patch": "@@ -31,19 +31,19 @@ use syntax::ast;\n \n use std::path::PathBuf;\n \n-struct TestCalls {\n-    count: u32\n+struct TestCalls<'a> {\n+    count: &'a mut u32\n }\n \n-impl<'a> CompilerCalls<'a> for TestCalls {\n+impl<'a> CompilerCalls<'a> for TestCalls<'a> {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n                       _: &ast::CrateConfig,\n                       _: &errors::registry::Registry,\n                       _: config::ErrorOutputType)\n                       -> Compilation {\n-        self.count *= 2;\n+        *self.count *= 2;\n         Compilation::Continue\n     }\n \n@@ -56,13 +56,13 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)\n                      -> Compilation {\n-        self.count *= 3;\n+        *self.count *= 3;\n         Compilation::Stop\n     }\n \n     fn some_input(&mut self, input: Input, input_path: Option<PathBuf>)\n                   -> (Input, Option<PathBuf>) {\n-        self.count *= 5;\n+        *self.count *= 5;\n         (input, input_path)\n     }\n \n@@ -77,7 +77,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n         panic!(\"This shouldn't happen\");\n     }\n \n-    fn build_controller(&mut self,\n+    fn build_controller(self: Box<Self>,\n                         _: &Session,\n                         _: &getopts::Matches)\n                         -> driver::CompileController<'a> {\n@@ -87,9 +87,12 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n \n \n fn main() {\n-    let mut tc = TestCalls { count: 1 };\n-    // we should never get use this filename, but lets make sure they are valid args.\n-    let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-    rustc_driver::run_compiler(&args, &mut tc, None, None);\n-    assert_eq!(tc.count, 30);\n+    let mut count = 1;\n+    {\n+        let tc = TestCalls { count: &mut count };\n+        // we should never get use this filename, but lets make sure they are valid args.\n+        let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n+        rustc_driver::run_compiler(&args, Box::new(tc), None, None);\n+    }\n+    assert_eq!(count, 30);\n }"}]}