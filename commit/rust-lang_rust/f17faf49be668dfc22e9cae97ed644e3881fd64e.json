{"sha": "f17faf49be668dfc22e9cae97ed644e3881fd64e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxN2ZhZjQ5YmU2NjhkZmMyMmU5Y2FlOTdlZDY0NGUzODgxZmQ2NGU=", "commit": {"author": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2014-11-25T23:53:05Z"}, "committer": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2014-11-25T23:53:05Z"}, "message": "Never generate multiple extern {} blocks in mklldeps.py.", "tree": {"sha": "c17da969ad0f99911c835b72a7352ecbf04fb88b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c17da969ad0f99911c835b72a7352ecbf04fb88b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17faf49be668dfc22e9cae97ed644e3881fd64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17faf49be668dfc22e9cae97ed644e3881fd64e", "html_url": "https://github.com/rust-lang/rust/commit/f17faf49be668dfc22e9cae97ed644e3881fd64e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17faf49be668dfc22e9cae97ed644e3881fd64e/comments", "author": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d520fcf2f71148db1df4377757258f7f7b7f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d520fcf2f71148db1df4377757258f7f7b7f3a", "html_url": "https://github.com/rust-lang/rust/commit/80d520fcf2f71148db1df4377757258f7f7b7f3a"}], "stats": {"total": 101, "additions": 40, "deletions": 61}, "files": [{"sha": "834ba074c62102ecf51184434f4b96fedc5f3648", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 40, "deletions": 61, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f17faf49be668dfc22e9cae97ed644e3881fd64e/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/f17faf49be668dfc22e9cae97ed644e3881fd64e/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=f17faf49be668dfc22e9cae97ed644e3881fd64e", "patch": "@@ -19,6 +19,7 @@\n components = sys.argv[2].split(' ')\n components = [i for i in components if i]  # ignore extra whitespaces\n enable_static = sys.argv[3]\n+llconfig = sys.argv[4]\n \n f.write(\"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n@@ -44,69 +45,47 @@ def run(args):\n         sys.exit(1)\n     return out\n \n-for llconfig in sys.argv[4:]:\n-    f.write(\"\\n\")\n-\n-    out = run([llconfig, '--host-target'])\n-    arch, os = out.split('-', 1)\n-    arch = 'x86' if arch == 'i686' or arch == 'i386' else arch\n-    if 'darwin' in os:\n-        os = 'macos'\n-    elif 'linux' in os:\n-        os = 'linux'\n-    elif 'freebsd' in os:\n-        os = 'freebsd'\n-    elif 'dragonfly' in os:\n-        os = 'dragonfly'\n-    elif 'android' in os:\n-        os = 'android'\n-    elif 'win' in os or 'mingw' in os:\n-        os = 'windows'\n-    cfg = [\n-        \"target_arch = \\\"\" + arch + \"\\\"\",\n-        \"target_os = \\\"\" + os + \"\\\"\",\n-    ]\n-\n-    f.write(\"#[cfg(all(\" + ', '.join(cfg) + \"))]\\n\")\n-\n-    version = run([llconfig, '--version']).strip()\n-\n-    # LLVM libs\n-    if version < '3.5':\n-      args = [llconfig, '--libs']\n-    else:\n-      args = [llconfig, '--libs', '--system-libs']\n-    args.extend(components)\n-    out = run(args)\n-    for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n-        lib = lib.strip()[2:] # chop of the leading '-l'\n-        f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n-        # LLVM libraries are all static libraries\n-        if 'LLVM' in lib:\n-            f.write(\", kind = \\\"static\\\"\")\n-        f.write(\")]\\n\")\n-\n-    # llvm-config before 3.5 didn't have a system-libs flag\n-    if version < '3.5':\n-      if os == 'win32':\n+f.write(\"\\n\")\n+\n+version = run([llconfig, '--version']).strip()\n+\n+# LLVM libs\n+if version < '3.5':\n+    args = [llconfig, '--libs']\n+else:\n+    args = [llconfig, '--libs', '--system-libs']\n+\n+args.extend(components)\n+out = run(args)\n+for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n+    lib = lib.strip()[2:] # chop of the leading '-l'\n+    f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n+    # LLVM libraries are all static libraries\n+    if 'LLVM' in lib:\n+        f.write(\", kind = \\\"static\\\"\")\n+    f.write(\")]\\n\")\n+\n+# llvm-config before 3.5 didn't have a system-libs flag\n+if version < '3.5':\n+    if os == 'win32':\n         f.write(\"#[link(name = \\\"imagehlp\\\")]\")\n \n-    # LLVM ldflags\n-    out = run([llconfig, '--ldflags'])\n-    for lib in out.strip().split(' '):\n-        if lib[:2] == \"-l\":\n-            f.write(\"#[link(name = \\\"\" + lib[2:] + \"\\\")]\\n\")\n-\n-    # C++ runtime library\n-    out = run([llconfig, '--cxxflags'])\n-    if enable_static == '1':\n-      assert('stdlib=libc++' not in out)\n-      f.write(\"#[link(name = \\\"stdc++\\\", kind = \\\"static\\\")]\\n\")\n-    else:\n-      if 'stdlib=libc++' in out:\n+# LLVM ldflags\n+out = run([llconfig, '--ldflags'])\n+for lib in out.strip().split(' '):\n+    if lib[:2] == \"-l\":\n+        f.write(\"#[link(name = \\\"\" + lib[2:] + \"\\\")]\\n\")\n+\n+# C++ runtime library\n+out = run([llconfig, '--cxxflags'])\n+if enable_static == '1':\n+    assert('stdlib=libc++' not in out)\n+    f.write(\"#[link(name = \\\"stdc++\\\", kind = \\\"static\\\")]\\n\")\n+else:\n+    if 'stdlib=libc++' in out:\n         f.write(\"#[link(name = \\\"c++\\\")]\\n\")\n-      else:\n+    else:\n         f.write(\"#[link(name = \\\"stdc++\\\")]\\n\")\n \n-    # Attach everything to an extern block\n-    f.write(\"extern {}\\n\")\n+# Attach everything to an extern block\n+f.write(\"extern {}\\n\")"}]}