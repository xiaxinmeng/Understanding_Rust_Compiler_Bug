{"sha": "eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYTkzYzNhMGY3Y2Y4YTBiNzQ0N2FiMjIwODFjY2QyMDgyNGQ5ZTY=", "commit": {"author": {"name": "arthurprs", "email": "arthurprs@gmail.com", "date": "2016-10-29T21:12:12Z"}, "committer": {"name": "arthurprs", "email": "arthurprs@gmail.com", "date": "2016-10-31T20:12:27Z"}, "message": "Don't reuse RandomState seeds", "tree": {"sha": "fdd8efbbb7e3438cb9758081781af66ac7faac3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd8efbbb7e3438cb9758081781af66ac7faac3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6", "html_url": "https://github.com/rust-lang/rust/commit/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6/comments", "author": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a319d13a9beba484a5c7e4e9c674ef905fd3d6f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a319d13a9beba484a5c7e4e9c674ef905fd3d6f4", "html_url": "https://github.com/rust-lang/rust/commit/a319d13a9beba484a5c7e4e9c674ef905fd3d6f4"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "ece51d6d82616753a762bc1c7c36705efe872d4f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6", "patch": "@@ -11,6 +11,7 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n+use cell::Cell;\n use borrow::Borrow;\n use cmp::max;\n use fmt::{self, Debug};\n@@ -2049,24 +2050,21 @@ impl RandomState {\n         // many hash maps are created on a thread. To solve this performance\n         // trap we cache the first set of randomly generated keys per-thread.\n         //\n-        // In doing this, however, we lose the property that all hash maps have\n-        // nondeterministic iteration order as all of those created on the same\n-        // thread would have the same hash keys. This property has been nice in\n-        // the past as it allows for maximal flexibility in the implementation\n-        // of `HashMap` itself.\n-        //\n-        // The constraint here (if there even is one) is just that maps created\n-        // on the same thread have the same iteration order, and that *may* be\n-        // relied upon even though it is not a documented guarantee at all of\n-        // the `HashMap` type. In any case we've decided that this is reasonable\n-        // for now, so caching keys thread-locally seems fine.\n-        thread_local!(static KEYS: (u64, u64) = {\n+        // Later in #36481 it was discovered that exposing a deterministic\n+        // iteration order allows a form of DOS attack. To counter that we\n+        // increment one of the seeds on every RandomState creation, giving\n+        // every corresponding HashMap a different iteration order.\n+        thread_local!(static KEYS: Cell<(u64, u64)> = {\n             let r = rand::OsRng::new();\n             let mut r = r.expect(\"failed to create an OS RNG\");\n-            (r.gen(), r.gen())\n+            Cell::new((r.gen(), r.gen()))\n         });\n \n-        KEYS.with(|&(k0, k1)| RandomState { k0: k0, k1: k1 })\n+        KEYS.with(|keys| {\n+            let (k0, k1) = keys.get();\n+            keys.set((k0.wrapping_add(1), k1));\n+            RandomState { k0: k0, k1: k1 }\n+        })\n     }\n }\n "}]}