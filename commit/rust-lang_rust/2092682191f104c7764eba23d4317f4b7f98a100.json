{"sha": "2092682191f104c7764eba23d4317f4b7f98a100", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTI2ODIxOTFmMTA0Yzc3NjRlYmEyM2Q0MzE3ZjRiN2Y5OGExMDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-11T22:18:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-12T07:08:27Z"}, "message": "resolve: Do not use \"resolve\"/\"resolution\" in error messages", "tree": {"sha": "b6d0ef4142d8e1c8722d70702f68b1fc72740f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d0ef4142d8e1c8722d70702f68b1fc72740f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2092682191f104c7764eba23d4317f4b7f98a100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2092682191f104c7764eba23d4317f4b7f98a100", "html_url": "https://github.com/rust-lang/rust/commit/2092682191f104c7764eba23d4317f4b7f98a100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2092682191f104c7764eba23d4317f4b7f98a100/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513d942a7ef853edf46fc3a5965e3baed42675ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/513d942a7ef853edf46fc3a5965e3baed42675ca", "html_url": "https://github.com/rust-lang/rust/commit/513d942a7ef853edf46fc3a5965e3baed42675ca"}], "stats": {"total": 598, "additions": 304, "deletions": 294}, "files": [{"sha": "a8ecf93cd15114e93e11e9074948f49dcce29e28", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -2084,10 +2084,25 @@ impl<'a> Resolver<'a> {\n             let expected = source.descr_expected();\n             let path_str = names_to_string(path);\n             let code = source.error_code(def.is_some());\n-            let base_msg = if let Some(def) = def {\n-                format!(\"expected {}, found {} `{}`\", expected, def.kind_name(), path_str)\n+            let (base_msg, fallback_label) = if let Some(def) = def {\n+                (format!(\"expected {}, found {} `{}`\", expected, def.kind_name(), path_str),\n+                 format!(\"not a {}\", expected))\n             } else {\n-                format!(\"unresolved {} `{}`\", expected, path_str)\n+                let item_str = path[path.len() - 1];\n+                let (mod_prefix, mod_str) = if path.len() == 1 {\n+                    (format!(\"\"), format!(\"this scope\"))\n+                } else if path.len() == 2 && path[0].name == keywords::CrateRoot.name() {\n+                    (format!(\"\"), format!(\"the crate root\"))\n+                } else {\n+                    let mod_path = &path[..path.len() - 1];\n+                    let mod_prefix = match this.resolve_path(mod_path, Some(TypeNS), None) {\n+                        PathResult::Module(module) => module.def(),\n+                        _ => None,\n+                    }.map_or(format!(\"\"), |def| format!(\"{} \", def.kind_name()));\n+                    (mod_prefix, format!(\"`{}`\", names_to_string(mod_path)))\n+                };\n+                (format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n+                 format!(\"not found in {}\", mod_str))\n             };\n             let mut err = this.session.struct_span_err_with_code(span, &base_msg, code);\n \n@@ -2177,12 +2192,8 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n-            // Fallback labels.\n-            if def.is_some() {\n-                err.span_label(span, &format!(\"not a {}\", expected));\n-            } else {\n-                err.span_label(span, &format!(\"no resolution found\"));\n-            }\n+            // Fallback label.\n+            err.span_label(span, &fallback_label);\n             err\n         };\n         let report_errors = |this: &mut Self, def: Option<Def>| {\n@@ -2983,8 +2994,8 @@ impl<'a> Resolver<'a> {\n             let participle = |binding: &NameBinding| {\n                 if binding.is_import() { \"imported\" } else { \"defined\" }\n             };\n-            let msg1 = format!(\"`{}` could resolve to the name {} here\", name, participle(b1));\n-            let msg2 = format!(\"`{}` could also resolve to the name {} here\", name, participle(b2));\n+            let msg1 = format!(\"`{}` could refer to the name {} here\", name, participle(b1));\n+            let msg2 = format!(\"`{}` could also refer to the name {} here\", name, participle(b2));\n             let note = if !lexical && b1.is_glob_import() {\n                 format!(\"consider adding an explicit import of `{}` to disambiguate\", name)\n             } else if let Def::Macro(..) = b1.def() {"}, {"sha": "403797b6d318ed37833fd8fa679bee9cc0223f02", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -380,8 +380,8 @@ impl<'a> Resolver<'a> {\n                 MacroBinding::Modern(binding) => (binding.span, \"imported\"),\n                 MacroBinding::Legacy(binding) => (binding.span, \"defined\"),\n             };\n-            let msg1 = format!(\"`{}` could resolve to the macro {} here\", ident, participle);\n-            let msg2 = format!(\"`{}` could also resolve to the macro imported here\", ident);\n+            let msg1 = format!(\"`{}` could refer to the macro {} here\", ident, participle);\n+            let msg2 = format!(\"`{}` could also refer to the macro imported here\", ident);\n             self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", ident))\n                 .span_note(legacy_span, &msg1)\n                 .span_note(resolution.span, &msg2)"}, {"sha": "c676076aef34ae22b336331521a2e4707cbd6d72", "filename": "src/test/compile-fail-fulldeps/macro-crate-doesnt-resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,5 +14,5 @@\n extern crate macro_crate_test;\n \n fn main() {\n-    macro_crate_test::foo(); //~ ERROR unresolved function `macro_crate_test::foo`\n+    macro_crate_test::foo(); //~ ERROR cannot find function `foo` in module `macro_crate_test`\n }"}, {"sha": "bd25561065beabefea04652ce87e2a3c62d25d88", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -39,6 +39,6 @@ fn main() {\n \n     assert_eq!(pprust::expr_to_string(&*quote_expr!(&cx, 23)), \"23\");\n \n-    let expr = quote_expr!(&cx, 2 - $abcd + 7); //~ ERROR unresolved value `abcd`\n+    let expr = quote_expr!(&cx, 2 - $abcd + 7); //~ ERROR cannot find value `abcd` in this scope\n     assert_eq!(pprust::expr_to_string(&*expr), \"2 - $abcd + 7\");\n }"}, {"sha": "64afd702f5d82cd50a49cfa1819ab2f72ff658d0", "filename": "src/test/compile-fail/associated-path-shl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -11,10 +11,10 @@\n // Check that associated paths starting with `<<` are successfully parsed.\n \n fn main() {\n-    let _: <<A>::B>::C; //~ ERROR unresolved type `A`\n-    let _ = <<A>::B>::C; //~ ERROR unresolved type `A`\n-    let <<A>::B>::C; //~ ERROR unresolved type `A`\n-    let 0 ... <<A>::B>::C; //~ ERROR unresolved type `A`\n+    let _: <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+    let _ = <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+    let <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+    let 0 ... <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n                            //~^ ERROR only char and numeric types are allowed in range patterns\n-    <<A>::B>::C; //~ ERROR unresolved type `A`\n+    <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n }"}, {"sha": "6f2ee854543da265be0514d22c70522af48fef1e", "filename": "src/test/compile-fail/associated-types-eq-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -17,7 +17,7 @@ pub trait Foo {\n }\n \n fn foo2<I: Foo>(x: I) {\n-    let _: A = x.boo(); //~ ERROR unresolved type `A`\n+    let _: A = x.boo(); //~ ERROR cannot find type `A` in this scope\n }\n \n pub fn main() {}"}, {"sha": "bd62dc663776b54c1499e9f5b709af0cda4f935b", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -12,7 +12,7 @@ mod m1 {}\n \n fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n     log(debug, m1::arguments);\n-    //~^ ERROR unresolved function `log`\n-    //~| ERROR unresolved value `debug`\n-    //~| ERROR unresolved value `m1::arguments`\n+    //~^ ERROR cannot find function `log` in this scope\n+    //~| ERROR cannot find value `debug` in this scope\n+    //~| ERROR cannot find value `arguments` in module `m1`\n }"}, {"sha": "06b72d1ed47f47d1218240b6931b174fd8164406", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,7 +14,7 @@ mod m1 {\n \n fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n     log(debug, m1::arguments);\n-    //~^ ERROR unresolved function `log`\n-    //~| ERROR unresolved value `debug`\n+    //~^ ERROR cannot find function `log` in this scope\n+    //~| ERROR cannot find value `debug` in this scope\n     //~| ERROR expected value, found module `m1::arguments`\n }"}, {"sha": "372bf4cac8734e2e570247facadb4bfa46080540", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -16,8 +16,8 @@ impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n       println!(\"Meow\");\n-      meows += 1; //~ ERROR unresolved value `meows`\n-      sleep();     //~ ERROR unresolved function `sleep`\n+      meows += 1; //~ ERROR cannot find value `meows` in this scope\n+      sleep();     //~ ERROR cannot find function `sleep` in this scope\n     }\n \n }"}, {"sha": "56d2455ca2126033e1bf305a7acc2731fce693af", "filename": "src/test/compile-fail/coherence-error-suppression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-error-suppression.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -16,7 +16,7 @@ impl Foo for i8 {}\n impl Foo for i16 {}\n impl Foo for i32 {}\n impl Foo for i64 {}\n-impl Foo for DoesNotExist {} //~ ERROR unresolved type `DoesNotExist`\n+impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n impl Foo for u8 {}\n impl Foo for u16 {}\n impl Foo for u32 {}"}, {"sha": "2e1d3c55a8f4db24a0e9be888d33eb78d128b19a", "filename": "src/test/compile-fail/derived-errors/issue-31997.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-31997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-31997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-31997.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -20,7 +20,7 @@ fn closure<F, T>(x: F) -> Result<T, ()>\n }\n \n fn foo() -> Result<(), ()> {\n-    try!(closure(|| bar(0 as *mut _))); //~ ERROR unresolved function `bar`\n+    try!(closure(|| bar(0 as *mut _))); //~ ERROR cannot find function `bar` in this scope\n     Ok(())\n }\n "}, {"sha": "01de94bddbd96cea040833ba41781d8fa35c9cb1", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { println!(\"doing\"); this_does_nothing_what_the; println!(\"boing\"); }\n-//~^ ERROR unresolved value `this_does_nothing_what_the`\n+//~^ ERROR cannot find value `this_does_nothing_what_the` in this scope"}, {"sha": "36bd54f599b511eee102fb155967bafc5e2ef4fc", "filename": "src/test/compile-fail/enums-pats-not-idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fenums-pats-not-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fenums-pats-not-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenums-pats-not-idents.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let a(1) = 13; //~ ERROR unresolved tuple struct/variant `a`\n+    let a(1) = 13; //~ ERROR cannot find tuple struct/variant `a` in this scope\n }"}, {"sha": "c28ea70c752c161a6cd18e64d81ab55c5b662522", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -10,11 +10,11 @@\n \n mod foo {\n     pub fn x(y: isize) { log(debug, y); }\n-    //~^ ERROR unresolved function `log`\n-    //~| ERROR unresolved value `debug`\n+    //~^ ERROR cannot find function `log` in this scope\n+    //~| ERROR cannot find value `debug` in this scope\n     fn z(y: isize) { log(debug, y); }\n-    //~^ ERROR unresolved function `log`\n-    //~| ERROR unresolved value `debug`\n+    //~^ ERROR cannot find function `log` in this scope\n+    //~| ERROR cannot find value `debug` in this scope\n }\n \n fn main() { foo::z(10); } //~ ERROR function `z` is private"}, {"sha": "9493a1ae892602478dd36ef27f27c53fcb3dbc7c", "filename": "src/test/compile-fail/extern-with-type-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -24,7 +24,7 @@ extern \"rust-intrinsic\" {\n \n     // Unresolved bounds should still error.\n     fn align_of<T: NoSuchTrait>() -> usize;\n-    //~^ ERROR unresolved trait `NoSuchTrait`\n+    //~^ ERROR cannot find trait `NoSuchTrait` in this scope\n }\n \n fn main() {}"}, {"sha": "7e9d4df005db946085b8eed459f54675b4e5cac8", "filename": "src/test/compile-fail/for-expn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Ffor-expn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Ffor-expn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-expn.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -13,7 +13,7 @@\n fn main() {\n     // Odd formatting to make sure we get the right span.\n     for t in &\n-      foo //~ ERROR unresolved value `foo`\n+      foo //~ ERROR cannot find value `foo` in this scope\n     {\n     }\n }"}, {"sha": "d938642197092a8c432793af3a7455eb09b08260", "filename": "src/test/compile-fail/for-loop-hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Ffor-loop-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Ffor-loop-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-hygiene.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -13,6 +13,6 @@\n \n fn main() {\n     for _ in 0..10 {\n-        iter.next();  //~ ERROR unresolved value `iter`\n+        iter.next();  //~ ERROR cannot find value `iter` in this scope\n     }\n }"}, {"sha": "2723b4ce256d9f3cb9b557333c0cc48d3bc77ca6", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -29,13 +29,13 @@ mod bar {\n fn foo<T>() {}\n \n fn main() {\n-    fpriv(); //~ ERROR unresolved function `fpriv`\n-    epriv(); //~ ERROR unresolved function `epriv`\n+    fpriv(); //~ ERROR cannot find function `fpriv` in this scope\n+    epriv(); //~ ERROR cannot find function `epriv` in this scope\n     B; //~ ERROR expected value, found enum `B`\n-    C; //~ ERROR unresolved value `C`\n-    import(); //~ ERROR: unresolved function `import`\n+    C; //~ ERROR cannot find value `C` in this scope\n+    import(); //~ ERROR: cannot find function `import` in this scope\n \n-    foo::<A>(); //~ ERROR: unresolved type `A`\n-    foo::<C>(); //~ ERROR: unresolved type `C`\n-    foo::<D>(); //~ ERROR: unresolved type `D`\n+    foo::<A>(); //~ ERROR: cannot find type `A` in this scope\n+    foo::<C>(); //~ ERROR: cannot find type `C` in this scope\n+    foo::<D>(); //~ ERROR: cannot find type `D` in this scope\n }"}, {"sha": "774eaf174d96d6eabd7a500e929f5f1b6c9b1a18", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -21,6 +21,6 @@ mod module_of_many_things {\n fn main() {\n     f1();\n     f2();\n-    f999(); //~ ERROR unresolved function `f999`\n+    f999(); //~ ERROR cannot find function `f999` in this scope\n     f4();\n }"}, {"sha": "d9cc17791ed563bd7ce65ab7d3435a2eb3fe4e47", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved\n-\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }\n@@ -25,5 +23,5 @@ mod circ2 {\n mod test {\n     use circ1::*;\n \n-    fn test() { f1066(); }\n+    fn test() { f1066(); } //~ ERROR cannot find function `f1066` in this scope\n }"}, {"sha": "f857f018f6706eff1b96bd76694e0e5d6594ae6f", "filename": "src/test/compile-fail/imports/duplicate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -32,13 +32,13 @@ mod e {\n }\n \n mod f {\n-    pub use a::*; //~ NOTE `foo` could resolve to the name imported here\n-    pub use b::*; //~ NOTE `foo` could also resolve to the name imported here\n+    pub use a::*; //~ NOTE `foo` could refer to the name imported here\n+    pub use b::*; //~ NOTE `foo` could also refer to the name imported here\n }\n \n mod g {\n-    pub use a::*; //~ NOTE `foo` could resolve to the name imported here\n-    pub use f::*; //~ NOTE `foo` could also resolve to the name imported here\n+    pub use a::*; //~ NOTE `foo` could refer to the name imported here\n+    pub use f::*; //~ NOTE `foo` could also refer to the name imported here\n }\n \n fn main() {"}, {"sha": "48e7ca0eee454e4b2550e75c6a8f85306e33fa4f", "filename": "src/test/compile-fail/imports/macro-paths.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Fmacro-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Fmacro-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Fmacro-paths.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -21,22 +21,22 @@ mod foo {\n }\n \n fn f() {\n-    use foo::*; //~ NOTE could also resolve to the name imported here\n+    use foo::*; //~ NOTE could also refer to the name imported here\n     bar::m! { //~ ERROR ambiguous\n               //~| NOTE macro-expanded items do not shadow when used in a macro invocation path\n-        mod bar { pub use two_macros::m; } //~ NOTE could resolve to the name defined here\n+        mod bar { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n                                            //~^^^ NOTE in this expansion\n     }\n }\n \n-pub mod baz { //~ NOTE could also resolve to the name defined here\n+pub mod baz { //~ NOTE could also refer to the name defined here\n     pub use two_macros::m;\n }\n \n fn g() {\n     baz::m! { //~ ERROR ambiguous\n               //~| NOTE macro-expanded items do not shadow when used in a macro invocation path\n-        mod baz { pub use two_macros::m; } //~ NOTE could resolve to the name defined here\n+        mod baz { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n                                            //~^^^ NOTE in this expansion\n     }\n }"}, {"sha": "cfa7681dc22771d8f2ff81a47064c9073f335133", "filename": "src/test/compile-fail/imports/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Fmacros.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -24,16 +24,16 @@ mod m1 {\n }\n \n mod m2 {\n-    use two_macros::*; //~ NOTE could also resolve\n+    use two_macros::*; //~ NOTE could also refer\n     m! { //~ ERROR ambiguous\n          //~| NOTE macro-expanded macro imports do not shadow\n-        use foo::m; //~ NOTE could resolve to the name imported here\n+        use foo::m; //~ NOTE could refer to the name imported here\n                     //~^^^ NOTE in this expansion\n     }\n }\n \n mod m3 {\n-    use two_macros::m; //~ NOTE could also resolve\n+    use two_macros::m; //~ NOTE could also refer\n     fn f() {\n         use two_macros::n as m; // This shadows the above import\n         m!();\n@@ -42,14 +42,14 @@ mod m3 {\n     fn g() {\n         m! { //~ ERROR ambiguous\n              //~| NOTE macro-expanded macro imports do not shadow\n-            use two_macros::n as m; //~ NOTE could resolve to the name imported here\n+            use two_macros::n as m; //~ NOTE could refer to the name imported here\n                                     //~^^^ NOTE in this expansion\n         }\n     }\n }\n \n mod m4 {\n-    macro_rules! m { () => {} } //~ NOTE could resolve to the macro defined here\n-    use two_macros::m; //~ NOTE could also resolve to the macro imported here\n+    macro_rules! m { () => {} } //~ NOTE could refer to the macro defined here\n+    use two_macros::m; //~ NOTE could also refer to the macro imported here\n     m!(); //~ ERROR ambiguous\n }"}, {"sha": "eb36129799a4e21e833b7927f1af65df1f956c13", "filename": "src/test/compile-fail/imports/rfc-1560-warning-cycle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -17,8 +17,8 @@ mod bar {\n     struct Foo;\n \n     mod baz {\n-        use *; //~ NOTE `Foo` could resolve to the name imported here\n-        use bar::*; //~ NOTE `Foo` could also resolve to the name imported here\n+        use *; //~ NOTE `Foo` could refer to the name imported here\n+        use bar::*; //~ NOTE `Foo` could also refer to the name imported here\n         fn f(_: Foo) {}\n         //~^ WARN `Foo` is ambiguous\n         //~| WARN hard error in a future release"}, {"sha": "48bf71f5892b9cf7b8b078bc29249037c3e1fe11", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    println!(\"{}\", x); //~ ERROR unresolved value `x`\n+    println!(\"{}\", x); //~ ERROR cannot find value `x` in this scope\n }"}, {"sha": "d224b8a548c84101df3375b01cf9c1de23e89f2b", "filename": "src/test/compile-fail/issue-15167.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -11,10 +11,10 @@\n // macro f should not be able to inject a reference to 'n'.\n \n macro_rules! f { () => (n) }\n-//~^ ERROR unresolved value `n`\n-//~| ERROR unresolved value `n`\n-//~| ERROR unresolved value `n`\n-//~| ERROR unresolved value `n`\n+//~^ ERROR cannot find value `n` in this scope\n+//~| ERROR cannot find value `n` in this scope\n+//~| ERROR cannot find value `n` in this scope\n+//~| ERROR cannot find value `n` in this scope\n \n fn main() -> (){\n     for n in 0..1 {"}, {"sha": "4c815e689d46244727ed219d90d1d42d31bb6bb3", "filename": "src/test/compile-fail/issue-18058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-18058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-18058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18058.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n impl Undefined {}\n-//~^ ERROR unresolved type `Undefined`\n+//~^ ERROR cannot find type `Undefined` in this scope\n \n fn main() {}"}, {"sha": "9b6a87702a9ea6d4e6c9f4391c64533117c70335", "filename": "src/test/compile-fail/issue-19883.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -17,7 +17,7 @@ trait From<Src> {\n trait To: Sized {\n     fn to<Dst: From<Self>>(self) ->\n         <Dst as From<Self>>::Dst\n-        //~^ ERROR unresolved associated type `From::Dst`\n+        //~^ ERROR cannot find associated type `Dst` in trait `From`\n     {\n         From::from(self)\n     }"}, {"sha": "ffa881b49c500fd919cef98eba89c385a610d5fe", "filename": "src/test/compile-fail/issue-22037.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-22037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-22037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22037.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -11,7 +11,7 @@\n trait A {\n     type Output;\n     fn a(&self) -> <Self as A>::X;\n-    //~^ ERROR unresolved associated type `A::X`\n+    //~^ ERROR cannot find associated type `X` in trait `A`\n }\n \n impl A for u32 {"}, {"sha": "ae7fb01e057c650e8b428a373d3d7fe61f720494", "filename": "src/test/compile-fail/issue-22384.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,5 +14,5 @@ trait Trait {\n \n fn main() {\n     <<i32 as Copy>::foobar as Trait>::foo();\n-    //~^ ERROR unresolved associated type `Copy::foobar`\n+    //~^ ERROR cannot find associated type `foobar` in trait `Copy`\n }"}, {"sha": "e3fd9c48a5256f29ed014f7daa42a45c9c4a7ead", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() { println!(\"{}\", foobar); } //~ ERROR unresolved value `foobar`\n+fn main() { println!(\"{}\", foobar); } //~ ERROR cannot find value `foobar` in this scope"}, {"sha": "187d91731d0d62c2bbb1c1ec49cade852d1c7ead", "filename": "src/test/compile-fail/issue-28388-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -10,6 +10,6 @@\n \n // Prefix in imports with empty braces should be resolved and checked privacy, stability, etc.\n \n-use foo::{}; //~ ERROR unresolved module or enum `foo`\n+use foo::{}; //~ ERROR cannot find module or enum `foo` in the crate root\n \n fn main() {}"}, {"sha": "61721fe58b345d4bc459211f094ebcfbe13156b8", "filename": "src/test/compile-fail/issue-30589.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-30589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-30589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30589.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -10,7 +10,7 @@\n \n use std::fmt;\n \n-impl fmt::Display for DecoderError { //~ ERROR unresolved type `DecoderError`\n+impl fmt::Display for DecoderError { //~ ERROR cannot find type `DecoderError` in this scope\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Missing data: {}\", self.0)\n     }"}, {"sha": "8dc58eee5fb815089edbd8900c96b84c5c6d8b6f", "filename": "src/test/compile-fail/issue-31212.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-31212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-31212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31212.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -16,5 +16,5 @@ mod foo {\n }\n \n fn main() {\n-    foo::f(); //~ ERROR unresolved\n+    foo::f(); //~ ERROR cannot find function `f` in module `foo`\n }"}, {"sha": "514255e46769e8b6c34f373cf67ae859b7b7dec3", "filename": "src/test/compile-fail/issue-31845.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,7 +14,7 @@ fn f() {\n     fn g() {}\n     mod foo {\n         fn h() {\n-           g(); //~ ERROR unresolved function `g`\n+           g(); //~ ERROR cannot find function `g` in this scope\n         }\n     }\n }"}, {"sha": "aff908e58153063c82a666a7b4469379dfb5a737", "filename": "src/test/compile-fail/issue-34334.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34334.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -11,5 +11,5 @@\n fn main () {\n     let sr: Vec<(u32, _, _) = vec![]; //~ ERROR expected one of `+`, `,`, or `>`, found `=`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-    //~^ ERROR unresolved value `sr`\n+    //~^ ERROR cannot find value `sr` in this scope\n }"}, {"sha": "9943cfb9bca5486e1ac67dffe253c911feefa59c", "filename": "src/test/compile-fail/issue-35075.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-35075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-35075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35075.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n struct Bar<T> {\n-    inner: Foo<T> //~ ERROR unresolved type `Foo`\n+    inner: Foo<T> //~ ERROR cannot find type `Foo` in this scope\n }\n \n enum Baz<T> {\n-    Foo(Foo<T>) //~ ERROR unresolved type `Foo`\n+    Foo(Foo<T>) //~ ERROR cannot find type `Foo` in this scope\n }\n \n fn main() {}"}, {"sha": "70c8f92de63cbf3112d647982de2c73895009a85", "filename": "src/test/compile-fail/issue-37534.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-37534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-37534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-37534.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo<T: ?Hash> { }\n-//~^ ERROR unresolved trait `Hash`\n+//~^ ERROR cannot find trait `Hash` in this scope\n //~^^ ERROR parameter `T` is never used\n //~^^^ WARN default bound relaxed for a type parameter, but this does nothing\n "}, {"sha": "33abc196a6bf31b277e73a57f650967270e01b0f", "filename": "src/test/compile-fail/issue-4366-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -23,7 +23,7 @@ mod a {\n     pub mod sub {\n         use a::b::*;\n         fn sub() -> bar { 1 }\n-        //~^ ERROR unresolved type `bar`\n+        //~^ ERROR cannot find type `bar` in this scope\n     }\n }\n "}, {"sha": "47fd426592c1dd8a6e9d153428c1c5af3125c6bd", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -25,7 +25,7 @@ mod a {\n     }\n     pub mod sub {\n         use a::b::*;\n-        fn sub() -> isize { foo(); 1 } //~ ERROR unresolved function `foo`\n+        fn sub() -> isize { foo(); 1 } //~ ERROR cannot find function `foo` in this scope\n     }\n }\n "}, {"sha": "1bb6f34b8e93f6b8ffb0bbed73695ad65abfa2e7", "filename": "src/test/compile-fail/issue-5099.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-5099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-5099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5099.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n \n-trait B < A > { fn a() -> A { this.a } } //~ ERROR unresolved value `this`\n+trait B < A > { fn a() -> A { this.a } } //~ ERROR cannot find value `this` in this scope\n \n fn main() {}"}, {"sha": "bb802f353afd089a51662183b3caa46626fd4b9a", "filename": "src/test/compile-fail/issue-5927.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -11,8 +11,8 @@\n \n fn main() {\n     let z = match 3 {\n-        x(1) => x(1) //~ ERROR unresolved tuple struct/variant `x`\n-        //~^ ERROR unresolved function `x`\n+        x(1) => x(1) //~ ERROR cannot find tuple struct/variant `x` in this scope\n+        //~^ ERROR cannot find function `x` in this scope\n     };\n     assert!(z == 3);\n }"}, {"sha": "9bcdd690187e8bdd8dfe8800904c61e7a3bb4892", "filename": "src/test/compile-fail/issue-7607-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: isize\n }\n \n-impl Fo { //~ ERROR unresolved type `Fo`\n+impl Fo { //~ ERROR cannot find type `Fo` in this scope\n     fn foo() {}\n }\n "}, {"sha": "926cae788aa5277bddd61628a747ae59a4a2196d", "filename": "src/test/compile-fail/issue-8767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl B { //~ ERROR unresolved type `B`\n+impl B { //~ ERROR cannot find type `B` in this scope\n }\n \n fn main() {"}, {"sha": "f01aab92356dd624ff1e70234f207f5b6a5d84d6", "filename": "src/test/compile-fail/keyword-self-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let Self = \"foo\"; //~ ERROR unresolved unit struct/variant or constant `Self`\n+    let Self = \"foo\"; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n }"}, {"sha": "acb58596fe45ae0132e4c5c3042e92217cce6511", "filename": "src/test/compile-fail/macro-outer-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -25,6 +25,6 @@ test!(b,\n // test1!(#[bar])\n #[qux]\n fn main() {\n-    a::bar(); //~ ERROR unresolved function `a::bar`\n+    a::bar(); //~ ERROR cannot find function `bar` in module `a`\n     b::bar();\n }"}, {"sha": "3b168fec953f24eff15a290168ebf5492caa3124", "filename": "src/test/compile-fail/macro-parameter-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmacro-parameter-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmacro-parameter-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-parameter-span.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -18,6 +18,6 @@ macro_rules! foo {\n // not to the macro variable '$id'\n fn main() {\n     foo!(\n-        x //~ ERROR unresolved value `x`\n+        x //~ ERROR cannot find value `x` in this scope\n         );\n }"}, {"sha": "888094fd016ac1f7052b5f18616ae1f77647d3dc", "filename": "src/test/compile-fail/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -16,6 +16,6 @@ fn my_panic() -> ! { panic!(); }\n fn main() {\n     match true { false => { my_panic(); } true => { } }\n \n-    println!(\"{}\", x); //~ ERROR unresolved value `x`\n+    println!(\"{}\", x); //~ ERROR cannot find value `x` in this scope\n     let x: isize;\n }"}, {"sha": "11c04e3803538c459ae3e989052bd1bdec7154e1", "filename": "src/test/compile-fail/match-vec-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -34,7 +34,7 @@ fn main() {\n         [0, 1, 2, 3, x..] => {} //~ ERROR pattern requires\n     };\n \n-    match does_not_exist { //~ ERROR unresolved value `does_not_exist`\n+    match does_not_exist { //~ ERROR cannot find value `does_not_exist` in this scope\n         [] => {}\n     };\n }"}, {"sha": "52837479869bb6693fbe0b156da611916156a81b", "filename": "src/test/compile-fail/mod_file_correct_spans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -13,5 +13,6 @@\n mod mod_file_aux;\n \n fn main() {\n-    assert!(mod_file_aux::bar() == 10); //~ ERROR unresolved function `mod_file_aux::bar`\n+    assert!(mod_file_aux::bar() == 10);\n+    //~^ ERROR cannot find function `bar` in module `mod_file_aux`\n }"}, {"sha": "bfcb0f4e863290844c395ce94c66247656beb317", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -13,6 +13,6 @@ use std::option::*;\n fn main() {\n   let None: isize = 42; //~ ERROR let bindings cannot shadow unit variants\n   log(debug, None);\n-  //~^ ERROR unresolved function `log`\n-  //~| ERROR unresolved value `debug`\n+  //~^ ERROR cannot find function `log` in this scope\n+  //~| ERROR cannot find value `debug` in this scope\n }"}, {"sha": "67800f8de4e35858baf6a826a13c446560f679e0", "filename": "src/test/compile-fail/namespaced-enum-glob-import-no-impls-xcrate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -18,8 +18,8 @@ mod m {\n pub fn main() {\n     use namespaced_enums::Foo::*;\n \n-    foo(); //~ ERROR unresolved function `foo`\n-    m::foo(); //~ ERROR unresolved function `m::foo`\n-    bar(); //~ ERROR unresolved function `bar`\n-    m::bar(); //~ ERROR unresolved function `m::bar`\n+    foo(); //~ ERROR cannot find function `foo` in this scope\n+    m::foo(); //~ ERROR cannot find function `foo` in module `m`\n+    bar(); //~ ERROR cannot find function `bar` in this scope\n+    m::bar(); //~ ERROR cannot find function `bar` in module `m`\n }"}, {"sha": "d5e659c236e6906da35089a6547354b19783ce50", "filename": "src/test/compile-fail/namespaced-enum-glob-import-no-impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -28,8 +28,8 @@ mod m {\n pub fn main() {\n     use m2::Foo::*;\n \n-    foo(); //~ ERROR unresolved function `foo`\n-    m::foo(); //~ ERROR unresolved function `m::foo`\n-    bar(); //~ ERROR unresolved function `bar`\n-    m::bar(); //~ ERROR unresolved function `m::bar`\n+    foo(); //~ ERROR cannot find function `foo` in this scope\n+    m::foo(); //~ ERROR cannot find function `foo` in module `m`\n+    bar(); //~ ERROR cannot find function `bar` in this scope\n+    m::bar(); //~ ERROR cannot find function `bar` in module `m`\n }"}, {"sha": "f0c41ff78548bcac2cd10478bf975e70d3510db0", "filename": "src/test/compile-fail/nested-cfg-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fnested-cfg-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fnested-cfg-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-cfg-attrs.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -11,4 +11,4 @@\n #[cfg_attr(all(), cfg_attr(all(), cfg(foo)))]\n fn f() {}\n \n-fn main() { f() } //~ ERROR unresolved function `f`\n+fn main() { f() } //~ ERROR cannot find function `f` in this scope"}, {"sha": "c64839ad0deb1882023c38cec783d7e0abd2200c", "filename": "src/test/compile-fail/no-implicit-prelude-nested.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude-nested.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -18,41 +18,41 @@\n mod foo {\n     mod baz {\n         struct Test;\n-        impl Add for Test {} //~ ERROR unresolved trait `Add`\n-        impl Clone for Test {} //~ ERROR unresolved trait `Clone`\n-        impl Iterator for Test {} //~ ERROR unresolved trait `Iterator`\n-        impl ToString for Test {} //~ ERROR unresolved trait `ToString`\n-        impl Writer for Test {} //~ ERROR unresolved trait `Writer`\n+        impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n+        impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+        impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n+        impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n+        impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope\n \n         fn foo() {\n-            drop(2) //~ ERROR unresolved function `drop`\n+            drop(2) //~ ERROR cannot find function `drop` in this scope\n         }\n     }\n \n     struct Test;\n-    impl Add for Test {} //~ ERROR unresolved trait `Add`\n-    impl Clone for Test {} //~ ERROR unresolved trait `Clone`\n-    impl Iterator for Test {} //~ ERROR unresolved trait `Iterator`\n-    impl ToString for Test {} //~ ERROR unresolved trait `ToString`\n-    impl Writer for Test {} //~ ERROR unresolved trait `Writer`\n+    impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n+    impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+    impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n+    impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n+    impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope\n \n     fn foo() {\n-        drop(2) //~ ERROR unresolved function `drop`\n+        drop(2) //~ ERROR cannot find function `drop` in this scope\n     }\n }\n \n fn qux() {\n     #[no_implicit_prelude]\n     mod qux_inner {\n         struct Test;\n-        impl Add for Test {} //~ ERROR unresolved trait `Add`\n-        impl Clone for Test {} //~ ERROR unresolved trait `Clone`\n-        impl Iterator for Test {} //~ ERROR unresolved trait `Iterator`\n-        impl ToString for Test {} //~ ERROR unresolved trait `ToString`\n-        impl Writer for Test {} //~ ERROR unresolved trait `Writer`\n+        impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n+        impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+        impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n+        impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n+        impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope\n \n         fn foo() {\n-            drop(2) //~ ERROR unresolved function `drop`\n+            drop(2) //~ ERROR cannot find function `drop` in this scope\n         }\n     }\n }"}, {"sha": "0e39d9ebdc12b7abbc1fdbd0e21526b230f68c53", "filename": "src/test/compile-fail/no-implicit-prelude.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -17,12 +17,12 @@\n // fail with the same error message).\n \n struct Test;\n-impl Add for Test {} //~ ERROR unresolved trait `Add`\n-impl Clone for Test {} //~ ERROR unresolved trait `Clone`\n-impl Iterator for Test {} //~ ERROR unresolved trait `Iterator`\n-impl ToString for Test {} //~ ERROR unresolved trait `ToString`\n-impl Writer for Test {} //~ ERROR unresolved trait `Writer`\n+impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n+impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n+impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n+impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope\n \n fn main() {\n-    drop(2) //~ ERROR unresolved function `drop`\n+    drop(2) //~ ERROR cannot find function `drop` in this scope\n }"}, {"sha": "d8e7411bded2cbfcaa1baa91a805c5ac0d460d6e", "filename": "src/test/compile-fail/no-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-link.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -15,5 +15,5 @@ extern crate empty_struct;\n //~^ WARN custom derive crates and `#[no_link]` crates have no effect without `#[macro_use]`\n \n fn main() {\n-    empty_struct::XEmpty1; //~ ERROR unresolved value `empty_struct::XEmpty1`\n+    empty_struct::XEmpty1; //~ ERROR cannot find value `XEmpty1` in module `empty_struct`\n }"}, {"sha": "9fb4d6facddabde1b9e5e587e2667bf05c38f0fc", "filename": "src/test/compile-fail/parser-recovery-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fparser-recovery-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fparser-recovery-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparser-recovery-1.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,11 +14,11 @@\n \n trait Foo {\n     fn bar() {\n-        let x = foo(); //~ ERROR unresolved function `foo`\n+        let x = foo(); //~ ERROR cannot find function `foo` in this scope\n \n }\n \n fn main() {\n     let x = y.;  //~ ERROR unexpected token\n-                 //~^ ERROR unresolved value `y`\n+                 //~^ ERROR cannot find value `y` in this scope\n } //~ ERROR this file contains an un-closed delimiter"}, {"sha": "03b1a9b876f4573efafd1f8a6366032d0b3cc567", "filename": "src/test/compile-fail/parser-recovery-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fparser-recovery-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fparser-recovery-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparser-recovery-2.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,11 +14,11 @@\n \n trait Foo {\n     fn bar() {\n-        let x = foo(); //~ ERROR unresolved function `foo`\n+        let x = foo(); //~ ERROR cannot find function `foo` in this scope\n     ) //~ ERROR incorrect close delimiter: `)`\n }\n \n fn main() {\n     let x = y.;  //~ ERROR unexpected token\n-                 //~^ ERROR unresolved value `y`\n+                 //~^ ERROR cannot find value `y` in this scope\n }"}, {"sha": "26d411c915482bdd89dcd78b20ead5376abd075e", "filename": "src/test/compile-fail/pattern-macro-hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fpattern-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fpattern-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-macro-hygiene.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -12,5 +12,5 @@ macro_rules! foo { () => ( x ) }\n \n fn main() {\n     let foo!() = 2;\n-    x + 1; //~ ERROR unresolved value `x`\n+    x + 1; //~ ERROR cannot find value `x` in this scope\n }"}, {"sha": "e7e522f99d41fd64804f6a5b074f3a6d3797e5ac", "filename": "src/test/compile-fail/privacy-ns1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -57,8 +57,8 @@ pub mod foo3 {\n fn test_glob3() {\n     use foo3::*;\n \n-    Bar();  //~ ERROR unresolved function `Bar`\n-    let _x: Box<Bar>;  //~ ERROR unresolved type `Bar`\n+    Bar();  //~ ERROR cannot find function `Bar` in this scope\n+    let _x: Box<Bar>;  //~ ERROR cannot find type `Bar` in this scope\n }\n \n fn main() {"}, {"sha": "da7086cf554c3860788b0b004f1bdc4f81e6d6e6", "filename": "src/test/compile-fail/privacy/restricted/ty-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -20,7 +20,7 @@ m!{ S<u8> } //~ ERROR type or lifetime parameters in visibility path\n \n mod foo {\n     struct S(pub(foo<T>) ()); //~ ERROR type or lifetime parameters in visibility path\n-    //~^ ERROR unresolved type `T`\n+    //~^ ERROR cannot find type `T` in this scope\n }\n \n fn main() {}"}, {"sha": "b57b73325c008d92c55e439cfb6ca76496fe28b1", "filename": "src/test/compile-fail/recursive-reexports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Frecursive-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Frecursive-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-reexports.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -12,6 +12,6 @@\n \n extern crate recursive_reexports;\n \n-fn f() -> recursive_reexports::S {} //~ ERROR unresolved type `recursive_reexports::S`\n+fn f() -> recursive_reexports::S {} //~ ERROR cannot find type `S` in module `recursive_reexports`\n \n fn main() {}"}, {"sha": "370782fc7d9e90dbb71d802387581efbe0a0e07c", "filename": "src/test/compile-fail/resolve-bad-import-prefix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-bad-import-prefix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-bad-import-prefix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-bad-import-prefix.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -19,6 +19,6 @@ use m::{}; // OK\n use E::{}; // OK\n use S::{}; //~ ERROR expected module or enum, found struct `S`\n use Tr::{}; //~ ERROR expected module or enum, found trait `Tr`\n-use Nonexistent::{}; //~ ERROR unresolved module or enum `Nonexistent`\n+use Nonexistent::{}; //~ ERROR cannot find module or enum `Nonexistent` in the crate root\n \n fn main () {}"}, {"sha": "6b5cd4dce265ac8461a88ecb1ba227861dc25efc", "filename": "src/test/compile-fail/resolve-bad-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-bad-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-bad-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-bad-visibility.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -16,8 +16,8 @@ trait Tr {}\n pub(E) struct S; //~ ERROR expected module, found enum `E`\n pub(Tr) struct Z; //~ ERROR expected module, found trait `Tr`\n pub(std::vec) struct F; //~ ERROR visibilities can only be restricted to ancestor modules\n-pub(nonexistent) struct G; //~ ERROR unresolved module `nonexistent`\n-pub(too_soon) struct H; //~ ERROR unresolved module `too_soon`\n+pub(nonexistent) struct G; //~ ERROR cannot find module `nonexistent` in the crate root\n+pub(too_soon) struct H; //~ ERROR cannot find module `too_soon` in the crate root\n \n // Visibilities are resolved eagerly without waiting for modules becoming fully populated.\n // Visibilities can only use ancestor modules legally which are always available in time,"}, {"sha": "c1584b0bdcd5269be36d0e3ef4601d37a0c93503", "filename": "src/test/compile-fail/resolve-primitive-fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-primitive-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-primitive-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-primitive-fallback.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -16,5 +16,5 @@ fn main() {\n \n     // Make sure primitive type fallback doesn't work with global paths\n     let _: ::u8;\n-    //~^ ERROR unresolved type `u8`\n+    //~^ ERROR cannot find type `u8` in the crate root\n }"}, {"sha": "9432e727fa5b7f1d1bade9a267babdd4a47b6b59", "filename": "src/test/compile-fail/resolve-unknown-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -10,10 +10,10 @@\n \n \n trait NewTrait : SomeNonExistentTrait {}\n-//~^ ERROR unresolved trait `SomeNonExistentTrait`\n+//~^ ERROR cannot find trait `SomeNonExistentTrait` in this scope\n \n impl SomeNonExistentTrait for isize {}\n-//~^ ERROR unresolved trait `SomeNonExistentTrait`\n+//~^ ERROR cannot find trait `SomeNonExistentTrait` in this scope\n \n fn f<T:SomeNonExistentTrait>() {}\n-//~^ ERROR unresolved trait `SomeNonExistentTrait`\n+//~^ ERROR cannot find trait `SomeNonExistentTrait` in this scope"}, {"sha": "962fe9f66aa4d337d4cc51fbcc1e95cfebb98b6c", "filename": "src/test/compile-fail/rmeta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Frmeta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Frmeta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frmeta.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,5 +14,5 @@\n // Check that building a metadata crate finds an error.\n \n fn main() {\n-    let _ = Foo; //~ ERROR unresolved value `Foo`\n+    let _ = Foo; //~ ERROR cannot find value `Foo` in this scope\n }"}, {"sha": "8331ae0b307d95ebd222685fdf2147be7be246c8", "filename": "src/test/compile-fail/self_type_keyword-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fself_type_keyword-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fself_type_keyword-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself_type_keyword-2.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -12,12 +12,12 @@ use self::Self as Foo; //~ ERROR unresolved import `self::Self`\n \n pub fn main() {\n     let Self = 5;\n-    //~^ ERROR unresolved unit struct/variant or constant `Self`\n+    //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n \n     match 15 {\n         Self => (),\n-        //~^ ERROR unresolved unit struct/variant or constant `Self`\n+        //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n         Foo { x: Self } => (),\n-        //~^ ERROR unresolved unit struct/variant or constant `Self`\n+        //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n     }\n }"}, {"sha": "02372a3919da553727c406bc4341520391dc9cf4", "filename": "src/test/compile-fail/struct-fields-shorthand-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand-unresolved.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -19,6 +19,6 @@ fn main() {\n     let x = 0;\n     let foo = Foo {\n         x,\n-        y //~ ERROR unresolved value `y`\n+        y //~ ERROR cannot find value `y` in this scope\n     };\n }"}, {"sha": "96adfea43f39db9ec748d924e46dd3edadbb5a40", "filename": "src/test/compile-fail/syntax-extension-minor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n     // this now fails (correctly, I claim) because hygiene prevents\n     // the assembled identifier from being a reference to the binding.\n     assert!(concat_idents!(asd, f_f, dsa) == \"<.<\".to_string());\n-    //~^ ERROR unresolved value `asdf_fdsa`\n+    //~^ ERROR cannot find value `asdf_fdsa` in this scope\n \n     assert_eq!(stringify!(use_mention_distinction), \"use_mention_distinction\");\n }"}, {"sha": "71cae0b6df9d8a8b323022ba6c8dac353ff80a24", "filename": "src/test/compile-fail/test-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -14,5 +14,5 @@\n fn foo() {}\n \n fn main() {\n-    foo(); //~ ERROR unresolved function `foo`\n+    foo(); //~ ERROR cannot find function `foo` in this scope\n }"}, {"sha": "f7120ddb11402bb86f4f26c823e1604a943146c1", "filename": "src/test/compile-fail/ufcs-partially-resolved.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fufcs-partially-resolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fcompile-fail%2Fufcs-partially-resolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-partially-resolved.rs?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -26,37 +26,37 @@ enum E { Y }\n type A = u32;\n \n fn main() {\n-    let _: <u8 as Tr>::N; //~ ERROR unresolved associated type `Tr::N`\n-    let _: <u8 as E>::N; //~ ERROR unresolved associated type `E::N`\n-    let _: <u8 as A>::N; //~ ERROR unresolved associated type `A::N`\n-    <u8 as Tr>::N; //~ ERROR unresolved method or associated constant `Tr::N`\n-    <u8 as E>::N; //~ ERROR unresolved method or associated constant `E::N`\n-    <u8 as A>::N; //~ ERROR unresolved method or associated constant `A::N`\n+    let _: <u8 as Tr>::N; //~ ERROR cannot find associated type `N` in trait `Tr`\n+    let _: <u8 as E>::N; //~ ERROR cannot find associated type `N` in enum `E`\n+    let _: <u8 as A>::N; //~ ERROR cannot find associated type `N` in `A`\n+    <u8 as Tr>::N; //~ ERROR cannot find method or associated constant `N` in trait `Tr`\n+    <u8 as E>::N; //~ ERROR cannot find method or associated constant `N` in enum `E`\n+    <u8 as A>::N; //~ ERROR cannot find method or associated constant `N` in `A`\n     let _: <u8 as Tr>::Y; // OK\n     let _: <u8 as E>::Y; //~ ERROR expected associated type, found variant `E::Y`\n     <u8 as Tr>::Y; // OK\n     <u8 as E>::Y; //~ ERROR expected method or associated constant, found unit variant `E::Y`\n \n-    let _: <u8 as Tr>::N::NN; //~ ERROR unresolved associated type `Tr::N`\n-    let _: <u8 as E>::N::NN; //~ ERROR unresolved associated type `E::N`\n-    let _: <u8 as A>::N::NN; //~ ERROR unresolved associated type `A::N`\n-    <u8 as Tr>::N::NN; //~ ERROR unresolved associated type `Tr::N`\n-    <u8 as E>::N::NN; //~ ERROR unresolved associated type `E::N`\n-    <u8 as A>::N::NN; //~ ERROR unresolved associated type `A::N`\n+    let _: <u8 as Tr>::N::NN; //~ ERROR cannot find associated type `N` in trait `Tr`\n+    let _: <u8 as E>::N::NN; //~ ERROR cannot find associated type `N` in enum `E`\n+    let _: <u8 as A>::N::NN; //~ ERROR cannot find associated type `N` in `A`\n+    <u8 as Tr>::N::NN; //~ ERROR cannot find associated type `N` in trait `Tr`\n+    <u8 as E>::N::NN; //~ ERROR cannot find associated type `N` in enum `E`\n+    <u8 as A>::N::NN; //~ ERROR cannot find associated type `N` in `A`\n     let _: <u8 as Tr>::Y::NN; //~ ERROR ambiguous associated type\n     let _: <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n     <u8 as Tr>::Y::NN; //~ ERROR no associated item named `NN` found for type `<u8 as Tr>::Y`\n     <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n \n-    let _: <u8 as Tr::N>::NN; //~ ERROR unresolved associated type `Tr::N::NN`\n-    let _: <u8 as E::N>::NN; //~ ERROR unresolved associated type `E::N::NN`\n-    let _: <u8 as A::N>::NN; //~ ERROR unresolved associated type `A::N::NN`\n-    <u8 as Tr::N>::NN; //~ ERROR unresolved method or associated constant `Tr::N::NN`\n-    <u8 as E::N>::NN; //~ ERROR unresolved method or associated constant `E::N::NN`\n-    <u8 as A::N>::NN; //~ ERROR unresolved method or associated constant `A::N::NN`\n-    let _: <u8 as Tr::Y>::NN; //~ ERROR unresolved associated type `Tr::Y::NN`\n+    let _: <u8 as Tr::N>::NN; //~ ERROR cannot find associated type `NN` in `Tr::N`\n+    let _: <u8 as E::N>::NN; //~ ERROR cannot find associated type `NN` in `E::N`\n+    let _: <u8 as A::N>::NN; //~ ERROR cannot find associated type `NN` in `A::N`\n+    <u8 as Tr::N>::NN; //~ ERROR cannot find method or associated constant `NN` in `Tr::N`\n+    <u8 as E::N>::NN; //~ ERROR cannot find method or associated constant `NN` in `E::N`\n+    <u8 as A::N>::NN; //~ ERROR cannot find method or associated constant `NN` in `A::N`\n+    let _: <u8 as Tr::Y>::NN; //~ ERROR cannot find associated type `NN` in `Tr::Y`\n     let _: <u8 as E::Y>::NN; //~ ERROR failed to resolve. Not a module `Y`\n-    <u8 as Tr::Y>::NN; //~ ERROR unresolved method or associated constant `Tr::Y::NN`\n+    <u8 as Tr::Y>::NN; //~ ERROR cannot find method or associated constant `NN` in `Tr::Y`\n     <u8 as E::Y>::NN; //~ ERROR failed to resolve. Not a module `Y`\n \n     let _: <u8 as Dr>::Z; //~ ERROR expected associated type, found method `Dr::Z`"}, {"sha": "657deca4e6d491afc2398aa5e4c4da6bda8df00a", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,8 +1,8 @@\n-error[E0425]: unresolved value `bar`\n+error[E0425]: cannot find value `bar` in this scope\n   --> $DIR/tab.rs:14:2\n    |\n 14 | \\tbar;\n-   | \\t^^^ no resolution found\n+   | \\t^^^ not found in this scope\n \n error: aborting due to previous error\n "}, {"sha": "8b69d112d4d42b8390db27b5a03056557656aa02", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,17 +1,17 @@\n-error[E0425]: unresolved value `fake`\n+error[E0425]: cannot find value `fake` in this scope\n   --> $DIR/macro-backtrace-nested.rs:15:12\n    |\n 15 |     () => (fake)\n-   |            ^^^^ no resolution found\n+   |            ^^^^ not found in this scope\n ...\n 27 |     1 + call_nested_expr!();\n    |         ------------------- in this macro invocation\n \n-error[E0425]: unresolved value `fake`\n+error[E0425]: cannot find value `fake` in this scope\n   --> $DIR/macro-backtrace-nested.rs:15:12\n    |\n 15 |     () => (fake)\n-   |            ^^^^ no resolution found\n+   |            ^^^^ not found in this scope\n ...\n 28 |     call_nested_expr_sum!();\n    |     ------------------------ in this macro invocation"}, {"sha": "204c574a3a996ec2be5e2c58fd97fa3b3bdbf2d9", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,26 +1,26 @@\n-error[E0425]: unresolved value `namespaced_enums::A`\n+error[E0425]: cannot find value `A` in module `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:15:13\n    |\n 15 |     let _ = namespaced_enums::A;\n-   |             ^^^^^^^^^^^^^^^^^^^ no resolution found\n+   |             ^^^^^^^^^^^^^^^^^^^ not found in `namespaced_enums`\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use namespaced_enums::Foo::A;`\n \n-error[E0425]: unresolved function `namespaced_enums::B`\n+error[E0425]: cannot find function `B` in module `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:18:13\n    |\n 18 |     let _ = namespaced_enums::B(10);\n-   |             ^^^^^^^^^^^^^^^^^^^ no resolution found\n+   |             ^^^^^^^^^^^^^^^^^^^ not found in `namespaced_enums`\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use namespaced_enums::Foo::B;`\n \n-error[E0422]: unresolved struct, variant or union type `namespaced_enums::C`\n+error[E0422]: cannot find struct, variant or union type `C` in module `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:21:13\n    |\n 21 |     let _ = namespaced_enums::C { a: 10 };\n-   |             ^^^^^^^^^^^^^^^^^^^ no resolution found\n+   |             ^^^^^^^^^^^^^^^^^^^ not found in `namespaced_enums`\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use namespaced_enums::Foo::C;`"}, {"sha": "18eb2fabdacb541d351401a235a146ac198948b1", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,142 +1,142 @@\n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:29:9\n    |\n 29 |         baz();\n    |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `a`\n+error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:32:9\n    |\n 32 |         a;\n-   |         ^ no resolution found\n+   |         ^ not found in this scope\n \n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:40:9\n    |\n 40 |         baz();\n    |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `x`\n+error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:43:9\n    |\n 43 |         x;\n    |         ^ did you mean `self.x`?\n \n-error[E0425]: unresolved value `y`\n+error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-14254.rs:46:9\n    |\n 46 |         y;\n    |         ^ did you mean `self.y`?\n \n-error[E0425]: unresolved value `a`\n+error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:49:9\n    |\n 49 |         a;\n-   |         ^ no resolution found\n+   |         ^ not found in this scope\n \n-error[E0425]: unresolved value `bah`\n+error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:52:9\n    |\n 52 |         bah;\n    |         ^^^ did you mean `Self::bah`?\n \n-error[E0425]: unresolved value `b`\n+error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:55:9\n    |\n 55 |         b;\n-   |         ^ no resolution found\n+   |         ^ not found in this scope\n \n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:63:9\n    |\n 63 |         baz();\n    |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `x`\n+error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:66:9\n    |\n 66 |         x;\n    |         ^ did you mean `self.x`?\n \n-error[E0425]: unresolved value `y`\n+error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-14254.rs:69:9\n    |\n 69 |         y;\n    |         ^ did you mean `self.y`?\n \n-error[E0425]: unresolved value `a`\n+error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:72:9\n    |\n 72 |         a;\n-   |         ^ no resolution found\n+   |         ^ not found in this scope\n \n-error[E0425]: unresolved value `bah`\n+error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:75:9\n    |\n 75 |         bah;\n    |         ^^^ did you mean `Self::bah`?\n \n-error[E0425]: unresolved value `b`\n+error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:78:9\n    |\n 78 |         b;\n-   |         ^ no resolution found\n+   |         ^ not found in this scope\n \n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:86:9\n    |\n 86 |         baz();\n    |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `bah`\n+error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:89:9\n    |\n 89 |         bah;\n    |         ^^^ did you mean `Self::bah`?\n \n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:97:9\n    |\n 97 |         baz();\n    |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `bah`\n+error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:100:9\n     |\n 100 |         bah;\n     |         ^^^ did you mean `Self::bah`?\n \n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n    --> $DIR/issue-14254.rs:108:9\n     |\n 108 |         baz();\n     |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `bah`\n+error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:111:9\n     |\n 111 |         bah;\n     |         ^^^ did you mean `Self::bah`?\n \n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n    --> $DIR/issue-14254.rs:119:9\n     |\n 119 |         baz();\n     |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `bah`\n+error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:122:9\n     |\n 122 |         bah;\n     |         ^^^ did you mean `Self::bah`?\n \n-error[E0425]: unresolved function `baz`\n+error[E0425]: cannot find function `baz` in this scope\n    --> $DIR/issue-14254.rs:130:9\n     |\n 130 |         baz();\n     |         ^^^ did you mean `self.baz(...)`?\n \n-error[E0425]: unresolved value `bah`\n+error[E0425]: cannot find value `bah` in this scope\n    --> $DIR/issue-14254.rs:133:9\n     |\n 133 |         bah;"}, {"sha": "335510ed7e9d5478793d527a12213fe97abf3921", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,8 +1,8 @@\n-error[E0422]: unresolved struct, variant or union type `E`\n+error[E0422]: cannot find struct, variant or union type `E` in this scope\n   --> $DIR/issue-17518.rs:16:5\n    |\n 16 |     E { name: \"foobar\" }; //~ ERROR unresolved struct, variant or union type `E`\n-   |     ^ no resolution found\n+   |     ^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use SomeEnum::E;`"}, {"sha": "d9c2f9e681eeed7faf49662ee703c69ef06fe417", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,19 +1,19 @@\n-error[E0405]: unresolved trait `Mul`\n+error[E0405]: cannot find trait `Mul` in this scope\n   --> $DIR/issue-21221-1.rs:53:6\n    |\n 53 | impl Mul for Foo {\n-   |      ^^^ no resolution found\n+   |      ^^^ not found in this scope\n    |\n    = help: possible candidates are found in other modules, you can import them into scope:\n    = help:   `use mul1::Mul;`\n    = help:   `use mul2::Mul;`\n    = help:   `use std::ops::Mul;`\n \n-error[E0412]: unresolved type `Mul`\n+error[E0412]: cannot find type `Mul` in this scope\n   --> $DIR/issue-21221-1.rs:72:16\n    |\n 72 | fn getMul() -> Mul {\n-   |                ^^^ no resolution found\n+   |                ^^^ not found in this scope\n    |\n    = help: possible candidates are found in other modules, you can import them into scope:\n    = help:   `use mul1::Mul;`\n@@ -22,17 +22,17 @@ error[E0412]: unresolved type `Mul`\n    = help:   `use mul4::Mul;`\n    = help:   and 2 other candidates\n \n-error[E0405]: unresolved trait `ThisTraitReallyDoesntExistInAnyModuleReally`\n+error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n   --> $DIR/issue-21221-1.rs:83:6\n    |\n 83 | impl ThisTraitReallyDoesntExistInAnyModuleReally for Foo {\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no resolution found\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n \n-error[E0405]: unresolved trait `Div`\n+error[E0405]: cannot find trait `Div` in this scope\n   --> $DIR/issue-21221-1.rs:88:6\n    |\n 88 | impl Div for Foo {\n-   |      ^^^ no resolution found\n+   |      ^^^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use std::ops::Div;`"}, {"sha": "eb5b1ab6918a9aea667e767e74d7f6bd520bec55", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,8 +1,8 @@\n-error[E0405]: unresolved trait `T`\n+error[E0405]: cannot find trait `T` in this scope\n   --> $DIR/issue-21221-2.rs:28:6\n    |\n 28 | impl T for Foo { }\n-   |      ^ no resolution found\n+   |      ^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use foo::bar::T;`"}, {"sha": "3594e9105a276b20977c93d265338ffd55dc94d4", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,8 +1,8 @@\n-error[E0405]: unresolved trait `OuterTrait`\n+error[E0405]: cannot find trait `OuterTrait` in this scope\n   --> $DIR/issue-21221-3.rs:25:6\n    |\n 25 | impl OuterTrait for Foo {}\n-   |      ^^^^^^^^^^ no resolution found\n+   |      ^^^^^^^^^^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use issue_21221_3::outer::OuterTrait;`"}, {"sha": "98486e5743cc98f6717526546ed92a0ed535a007", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,8 +1,8 @@\n-error[E0405]: unresolved trait `T`\n+error[E0405]: cannot find trait `T` in this scope\n   --> $DIR/issue-21221-4.rs:20:6\n    |\n 20 | impl T for Foo {}\n-   |      ^ no resolution found\n+   |      ^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n    = help:   `use issue_21221_4::T;`"}, {"sha": "70de352d73ebe0d6e76fc37eb02dbee7a15b3c59", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,4 +1,4 @@\n-error[E0411]: unresolved type `Self`\n+error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/issue-23305.rs:15:12\n    |\n 15 | impl ToNbt<Self> {}"}, {"sha": "039887d8da65fe169b5695d5b880f6d1a47f2724", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,22 +1,22 @@\n-error[E0425]: unresolved function `shave`\n+error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:27:5\n    |\n 27 |     shave();\n-   |     ^^^^^ no resolution found\n+   |     ^^^^^ not found in this scope\n \n-error[E0425]: unresolved function `clone`\n+error[E0425]: cannot find function `clone` in this scope\n   --> $DIR/issue-2356.rs:35:5\n    |\n 35 |     clone();\n    |     ^^^^^ did you mean `self.clone(...)`?\n \n-error[E0425]: unresolved function `default`\n+error[E0425]: cannot find function `default` in this scope\n   --> $DIR/issue-2356.rs:43:5\n    |\n 43 |     default();\n    |     ^^^^^^^ did you mean `Self::default`?\n \n-error[E0425]: unresolved value `whiskers`\n+error[E0425]: cannot find value `whiskers` in this scope\n   --> $DIR/issue-2356.rs:52:5\n    |\n 52 |     whiskers -= other;\n@@ -25,67 +25,67 @@ error[E0425]: unresolved value `whiskers`\n    |     did you mean `self.whiskers`?\n    |     `self` value is only available in methods with `self` parameter\n \n-error[E0425]: unresolved function `shave`\n+error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:57:5\n    |\n 57 |     shave(4);\n    |     ^^^^^ did you mean `Self::shave`?\n \n-error[E0425]: unresolved function `purr`\n+error[E0425]: cannot find function `purr` in this scope\n   --> $DIR/issue-2356.rs:60:5\n    |\n 60 |     purr();\n-   |     ^^^^ no resolution found\n+   |     ^^^^ not found in this scope\n \n-error[E0425]: unresolved function `static_method`\n+error[E0425]: cannot find function `static_method` in this scope\n   --> $DIR/issue-2356.rs:70:9\n    |\n 70 |         static_method();\n-   |         ^^^^^^^^^^^^^ no resolution found\n+   |         ^^^^^^^^^^^^^ not found in this scope\n \n-error[E0425]: unresolved function `purr`\n+error[E0425]: cannot find function `purr` in this scope\n   --> $DIR/issue-2356.rs:73:9\n    |\n 73 |         purr();\n-   |         ^^^^ no resolution found\n+   |         ^^^^ not found in this scope\n \n-error[E0425]: unresolved function `purr`\n+error[E0425]: cannot find function `purr` in this scope\n   --> $DIR/issue-2356.rs:76:9\n    |\n 76 |         purr();\n-   |         ^^^^ no resolution found\n+   |         ^^^^ not found in this scope\n \n-error[E0425]: unresolved function `purr`\n+error[E0425]: cannot find function `purr` in this scope\n   --> $DIR/issue-2356.rs:79:9\n    |\n 79 |         purr();\n-   |         ^^^^ no resolution found\n+   |         ^^^^ not found in this scope\n \n error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:87:8\n    |\n 87 |     if self.whiskers > 3 {\n    |        ^^^^ `self` value is only available in methods with `self` parameter\n \n-error[E0425]: unresolved function `grow_older`\n+error[E0425]: cannot find function `grow_older` in this scope\n   --> $DIR/issue-2356.rs:95:5\n    |\n 95 |     grow_older();\n-   |     ^^^^^^^^^^ no resolution found\n+   |     ^^^^^^^^^^ not found in this scope\n \n-error[E0425]: unresolved function `shave`\n+error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:98:5\n    |\n 98 |     shave();\n-   |     ^^^^^ no resolution found\n+   |     ^^^^^ not found in this scope\n \n-error[E0425]: unresolved value `whiskers`\n+error[E0425]: cannot find value `whiskers` in this scope\n    --> $DIR/issue-2356.rs:104:5\n     |\n 104 |     whiskers = 0;\n     |     ^^^^^^^^ did you mean `self.whiskers`?\n \n-error[E0425]: unresolved value `whiskers`\n+error[E0425]: cannot find value `whiskers` in this scope\n    --> $DIR/issue-2356.rs:110:5\n     |\n 110 |     whiskers = 4;\n@@ -94,11 +94,11 @@ error[E0425]: unresolved value `whiskers`\n     |     did you mean `self.whiskers`?\n     |     `self` value is only available in methods with `self` parameter\n \n-error[E0425]: unresolved function `purr_louder`\n+error[E0425]: cannot find function `purr_louder` in this scope\n    --> $DIR/issue-2356.rs:115:5\n     |\n 115 |     purr_louder();\n-    |     ^^^^^^^^^^^ no resolution found\n+    |     ^^^^^^^^^^^ not found in this scope\n \n error[E0424]: expected value, found module `self`\n    --> $DIR/issue-2356.rs:122:5"}, {"sha": "111710d515a92f28c3e4a479913e9fac3bd76c6b", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,4 +1,4 @@\n-error[E0411]: unresolved type `Self`\n+error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/issue-24968.rs:11:11\n    |\n 11 | fn foo(_: Self) {"}, {"sha": "7975c168de7d4d39075ed8e349aeeec795b8f249", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,52 +1,52 @@\n-error[E0412]: unresolved type `field`\n+error[E0412]: cannot find type `field` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:26:16\n    |\n 26 |         let _: field;\n-   |                ^^^^^ no resolution found\n+   |                ^^^^^ not found in this scope\n \n-error[E0531]: unresolved tuple struct/variant `field`\n+error[E0531]: cannot find tuple struct/variant `field` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:29:13\n    |\n 29 |         let field(..);\n-   |             ^^^^^ no resolution found\n+   |             ^^^^^ not found in this scope\n \n-error[E0425]: unresolved value `field`\n+error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:32:9\n    |\n 32 |         field;\n    |         ^^^^^ did you mean `self.field`?\n \n-error[E0412]: unresolved type `Type`\n+error[E0412]: cannot find type `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:36:16\n    |\n 36 |         let _: Type;\n    |                ^^^^ did you mean `Self::Type`?\n \n-error[E0531]: unresolved tuple struct/variant `Type`\n+error[E0531]: cannot find tuple struct/variant `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:39:13\n    |\n 39 |         let Type(..);\n-   |             ^^^^ no resolution found\n+   |             ^^^^ not found in this scope\n \n-error[E0425]: unresolved value `Type`\n+error[E0425]: cannot find value `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:42:9\n    |\n 42 |         Type;\n-   |         ^^^^ no resolution found\n+   |         ^^^^ not found in this scope\n \n-error[E0412]: unresolved type `method`\n+error[E0412]: cannot find type `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:46:16\n    |\n 46 |         let _: method;\n-   |                ^^^^^^ no resolution found\n+   |                ^^^^^^ not found in this scope\n \n-error[E0531]: unresolved tuple struct/variant `method`\n+error[E0531]: cannot find tuple struct/variant `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:49:13\n    |\n 49 |         let method(..);\n-   |             ^^^^^^ no resolution found\n+   |             ^^^^^^ not found in this scope\n \n-error[E0425]: unresolved value `method`\n+error[E0425]: cannot find value `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:52:9\n    |\n 52 |         method;"}, {"sha": "e7df8140bc577bbb0d207cf85801c736c330d6a9", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,22 +1,22 @@\n-error[E0425]: unresolved value `field`\n+error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:27:13\n    |\n 27 |             field;\n-   |             ^^^^^ no resolution found\n+   |             ^^^^^ not found in this scope\n \n-error[E0425]: unresolved function `method`\n+error[E0425]: cannot find function `method` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:30:13\n    |\n 30 |             method();\n-   |             ^^^^^^ no resolution found\n+   |             ^^^^^^ not found in this scope\n \n-error[E0425]: unresolved value `field`\n+error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:35:9\n    |\n 35 |         field;\n    |         ^^^^^ did you mean `self.field`?\n \n-error[E0425]: unresolved function `method`\n+error[E0425]: cannot find function `method` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:38:9\n    |\n 38 |         method();"}, {"sha": "feb12612e660419a04b8db46ad4da603f9ead61d", "filename": "src/test/ui/resolve/token-error-correct-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -10,11 +10,11 @@ note: unclosed delimiter\n 14 |     if foo {\n    |            ^\n \n-error[E0425]: unresolved value `foo`\n+error[E0425]: cannot find value `foo` in this scope\n   --> $DIR/token-error-correct-2.rs:14:8\n    |\n 14 |     if foo {\n-   |        ^^^ no resolution found\n+   |        ^^^ not found in this scope\n \n error: aborting due to 2 previous errors\n "}, {"sha": "adb88ab572cb7acefc157879448c15359db8e631", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -22,11 +22,11 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n 29 |         } else { //~ ERROR: incorrect close delimiter: `}`\n    |         ^\n \n-error[E0425]: unresolved function `is_directory`\n+error[E0425]: cannot find function `is_directory` in this scope\n   --> $DIR/token-error-correct-3.rs:21:13\n    |\n 21 |         if !is_directory(path.as_ref()) { //~ ERROR: unresolved function `is_directory`\n-   |             ^^^^^^^^^^^^ no resolution found\n+   |             ^^^^^^^^^^^^ not found in this scope\n \n error[E0308]: mismatched types\n   --> $DIR/token-error-correct-3.rs:25:13"}, {"sha": "248a923efaf3641af64a9bfaab05739bfbf3b76e", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -40,17 +40,17 @@ error: expected expression, found `)`\n 23 | }\n    | ^\n \n-error[E0425]: unresolved function `foo`\n+error[E0425]: cannot find function `foo` in this scope\n   --> $DIR/token-error-correct.rs:14:5\n    |\n 14 |     foo(bar(;\n-   |     ^^^ no resolution found\n+   |     ^^^ not found in this scope\n \n-error[E0425]: unresolved function `bar`\n+error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/token-error-correct.rs:14:9\n    |\n 14 |     foo(bar(;\n-   |         ^^^ no resolution found\n+   |         ^^^ not found in this scope\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f0d363f7335f72c19d650efcfbdc3b38b1d78a7c", "filename": "src/test/ui/resolve/unboxed-closure-sugar-nonexistent-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,8 +1,8 @@\n-error[E0405]: unresolved trait `Nonexist`\n+error[E0405]: cannot find trait `Nonexist` in this scope\n   --> $DIR/unboxed-closure-sugar-nonexistent-trait.rs:11:8\n    |\n 11 | fn f<F:Nonexist(isize) -> isize>(x: F) {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^ no resolution found\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n \n error[E0404]: expected trait, found type alias `Typedef`\n   --> $DIR/unboxed-closure-sugar-nonexistent-trait.rs:17:8"}, {"sha": "5fbaf66e014af073f45aef78a325c8347a7c1cef", "filename": "src/test/ui/resolve/unresolved_static_type_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,4 +1,4 @@\n-error[E0425]: unresolved value `cx`\n+error[E0425]: cannot find value `cx` in this scope\n   --> $DIR/unresolved_static_type_field.rs:19:11\n    |\n 19 |         f(cx);"}, {"sha": "dca0a93f897baaa42de4d950161856983dd49876", "filename": "src/test/ui/span/typo-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2092682191f104c7764eba23d4317f4b7f98a100/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr?ref=2092682191f104c7764eba23d4317f4b7f98a100", "patch": "@@ -1,10 +1,10 @@\n-error[E0425]: unresolved value `bar`\n+error[E0425]: cannot find value `bar` in this scope\n   --> $DIR/typo-suggestion.rs:15:26\n    |\n 15 |     println!(\"Hello {}\", bar);\n-   |                          ^^^ no resolution found\n+   |                          ^^^ not found in this scope\n \n-error[E0425]: unresolved value `fob`\n+error[E0425]: cannot find value `fob` in this scope\n   --> $DIR/typo-suggestion.rs:18:26\n    |\n 18 |     println!(\"Hello {}\", fob);"}]}