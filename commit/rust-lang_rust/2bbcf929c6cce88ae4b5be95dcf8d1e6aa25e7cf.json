{"sha": "2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYmNmOTI5YzZjY2U4OGFlNGI1YmU5NWRjZjhkMWU2YWEyNWU3Y2Y=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-09-08T16:24:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-08T16:24:18Z"}, "message": "Rollup merge of #88648 - kpreid:option, r=Mark-Simulacrum\n\nCorrect \u201ccopies\u201d to \u201cmoves\u201d in `<Option<T> as From<T>>::from` doc, and other copyediting\n\nThe `impl<T> From<T> for Option<T>` has no `Copy` or `Clone` bound, so its operation is guaranteed to be a move. The call site might copy, but the function itself cannot.\n\nSince that would have been a rather small PR, I also reviewed the other documentation in the file and made other improvements (in separate commits): adding periods and commas, linking `Deref::Target`, and clarifying what \"a container\" is in `FromIterator`.", "tree": {"sha": "ffccfd82da1385d30907e773a02e485429de93a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffccfd82da1385d30907e773a02e485429de93a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhOOOzCRBK7hj4Ov3rIwAA6Y8IAHc29+FmbXjJQpougJ8q8gwg\nkt2iXarCF4KgbXZmJXR9qYIyHWpTlcaAnAzCf3kACBNB2MnEgUeqlV8yBusJI/7i\nRBogF1y6xXa1GyxR/0q36yoW3CUDXSH10CgMSKfUN6dmuwv+AC3GludQJVSjoYDG\nIi1luiCcC0Tjf2aIeL6q9iy9kRxhaWEVDzeIJtcq/rrZg3uiDGuRTeUqreH3Na6i\nNLFuV4cN2qJRId043jiUMHDYjtY9fSuGicns1RRLOAts17H/g0JAN9meDQl3h2xk\nOzF7QPkrwa34aS+xhhDjmfOTmRYlKCJwQbBWJXe7VxFETadKaO75MffvKKgtEJI=\n=/mi1\n-----END PGP SIGNATURE-----\n", "payload": "tree ffccfd82da1385d30907e773a02e485429de93a1\nparent b1c782f20b99bddf4244d0228fff401e1215f4df\nparent 9a3a2a1c3784905eee405becdbd2e5c7ebd5dbce\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1631118258 -0400\ncommitter GitHub <noreply@github.com> 1631118258 -0400\n\nRollup merge of #88648 - kpreid:option, r=Mark-Simulacrum\n\nCorrect \u201ccopies\u201d to \u201cmoves\u201d in `<Option<T> as From<T>>::from` doc, and other copyediting\n\nThe `impl<T> From<T> for Option<T>` has no `Copy` or `Clone` bound, so its operation is guaranteed to be a move. The call site might copy, but the function itself cannot.\n\nSince that would have been a rather small PR, I also reviewed the other documentation in the file and made other improvements (in separate commits): adding periods and commas, linking `Deref::Target`, and clarifying what \"a container\" is in `FromIterator`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf", "html_url": "https://github.com/rust-lang/rust/commit/2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c782f20b99bddf4244d0228fff401e1215f4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c782f20b99bddf4244d0228fff401e1215f4df", "html_url": "https://github.com/rust-lang/rust/commit/b1c782f20b99bddf4244d0228fff401e1215f4df"}, {"sha": "9a3a2a1c3784905eee405becdbd2e5c7ebd5dbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3a2a1c3784905eee405becdbd2e5c7ebd5dbce", "html_url": "https://github.com/rust-lang/rust/commit/9a3a2a1c3784905eee405becdbd2e5c7ebd5dbce"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "907726f0c345c8a3736cbae493697e861aba609c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=2bbcf929c6cce88ae4b5be95dcf8d1e6aa25e7cf", "patch": "@@ -1173,7 +1173,7 @@ impl<T> Option<T> {\n     // Entry-like operations to insert a value and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `value` into the option then returns a mutable reference to it.\n+    /// Inserts `value` into the option, then returns a mutable reference to it.\n     ///\n     /// If the option already contains a value, the old value is dropped.\n     ///\n@@ -1397,7 +1397,7 @@ impl<T> Option<T> {\n }\n \n impl<T, U> Option<(T, U)> {\n-    /// Unzips an option containing a tuple of two options\n+    /// Unzips an option containing a tuple of two options.\n     ///\n     /// If `self` is `Some((a, b))` this method returns `(Some(a), Some(b))`.\n     /// Otherwise, `(None, None)` is returned.\n@@ -1500,7 +1500,7 @@ impl<T: Clone> Option<&mut T> {\n }\n \n impl<T: Default> Option<T> {\n-    /// Returns the contained [`Some`] value or a default\n+    /// Returns the contained [`Some`] value or a default.\n     ///\n     /// Consumes the `self` argument then, if [`Some`], returns the contained\n     /// value, otherwise if [`None`], returns the [default value] for that\n@@ -1561,7 +1561,7 @@ impl<T: DerefMut> Option<T> {\n     /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n     ///\n     /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to\n-    /// the inner type's `Deref::Target` type.\n+    /// the inner type's [`Deref::Target`] type.\n     ///\n     /// # Examples\n     ///\n@@ -1701,7 +1701,7 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n \n #[stable(since = \"1.12.0\", feature = \"option_from\")]\n impl<T> From<T> for Option<T> {\n-    /// Copies `val` into a new `Some`.\n+    /// Moves `val` into a new [`Some`].\n     ///\n     /// # Examples\n     ///\n@@ -1942,8 +1942,8 @@ unsafe impl<A> TrustedLen for IntoIter<A> {}\n impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// Takes each element in the [`Iterator`]: if it is [`None`][Option::None],\n     /// no further elements are taken, and the [`None`][Option::None] is\n-    /// returned. Should no [`None`][Option::None] occur, a container with the\n-    /// values of each [`Option`] is returned.\n+    /// returned. Should no [`None`][Option::None] occur, a container of type\n+    /// `V` containing the values of each [`Option`] is returned.\n     ///\n     /// # Examples\n     ///\n@@ -2039,7 +2039,7 @@ impl<T> ops::FromResidual for Option<T> {\n }\n \n impl<T> Option<Option<T>> {\n-    /// Converts from `Option<Option<T>>` to `Option<T>`\n+    /// Converts from `Option<Option<T>>` to `Option<T>`.\n     ///\n     /// # Examples\n     ///"}]}