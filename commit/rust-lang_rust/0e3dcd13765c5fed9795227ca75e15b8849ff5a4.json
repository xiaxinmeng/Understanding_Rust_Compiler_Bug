{"sha": "0e3dcd13765c5fed9795227ca75e15b8849ff5a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlM2RjZDEzNzY1YzVmZWQ5Nzk1MjI3Y2E3NWUxNWI4ODQ5ZmY1YTQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-07T15:29:22Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-07-03T07:59:04Z"}, "message": "Improve `NOT_UNSAFE_PTR_ARG_DEREF` with functions", "tree": {"sha": "fa5611aa678ffc1295cca5ef965c528c6da1a29a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa5611aa678ffc1295cca5ef965c528c6da1a29a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3dcd13765c5fed9795227ca75e15b8849ff5a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXeMXIAAoJEDu/TT4u95+Ybs0QANo8IEz0Cb8xhEQtRCIxmPtV\nXJzj/Ztxzis8TEKoCSt9B/SvYLt9EFVu496PzwXXYxHmkweAhclvCkGjJ3TDDoqE\nWMkFRGe0yfVfaUhxswUYTu9VqM4Kvg00vwfo/vY+vWc95kZa63Agdr2/lUDlBHXx\nHE5AJvIpYq+iIayPlQC9Z27DskUZPwWKRcLDz9dzoyfrprfFNP9HE0dUNhc2g9ic\nvPH+cXUw4VYF97ysc6dce/c2eMI1R3QEXqyvgdwT49C+J9odPTjF6OE5pVTZs6LV\nnPaJm8at8y3+lJLnqz06ZTblhZVR2YKzjmfLaYC9IfztNgZrOJLrLVeCn3rrUhGm\nb34cH/wCRZI8YJUEQfBRE2MZa2y9b3Gg4TIDENwLvRkYqpVISxIcKKijyfTh5f2j\nDKu4uqE7L6tlrFy33c4VpCqwxWSCa4ed8b2eRKElo2G6gxu6igag5n+WzTSwhKh8\nTEGO6aUmbZ8fIiP5u9yI+uLxXu7sB6ArI6o1IPgr4VAq3jZT7MBsDQ4ppn1MZIwx\nrGpBQ7TE+hOiJXS04rgdCD7cJPS9pc+cl8qrOknzi2B+Tb9qKK7q+5rDr4if+Ii4\nOmf0XIyLmoHRVDPizSuBap+bkejDwbCDZObEB+5jGcu2OVJdVaiW/TKhN2XcXOXt\nmvyVF3LjTirHsgZYH29p\n=jOyF\n-----END PGP SIGNATURE-----", "payload": "tree fa5611aa678ffc1295cca5ef965c528c6da1a29a\nparent 7781f1d7c5a8ec31f9994ebad0ae1ca140e69ef7\nauthor mcarton <cartonmartin+git@gmail.com> 1465313362 +0200\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1467532744 +0530\n\nImprove `NOT_UNSAFE_PTR_ARG_DEREF` with functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3dcd13765c5fed9795227ca75e15b8849ff5a4", "html_url": "https://github.com/rust-lang/rust/commit/0e3dcd13765c5fed9795227ca75e15b8849ff5a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3dcd13765c5fed9795227ca75e15b8849ff5a4/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7781f1d7c5a8ec31f9994ebad0ae1ca140e69ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7781f1d7c5a8ec31f9994ebad0ae1ca140e69ef7", "html_url": "https://github.com/rust-lang/rust/commit/7781f1d7c5a8ec31f9994ebad0ae1ca140e69ef7"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "3159a3e8979c8219320cb904b932bf1e904ad7e9", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e3dcd13765c5fed9795227ca75e15b8849ff5a4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e3dcd13765c5fed9795227ca75e15b8849ff5a4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0e3dcd13765c5fed9795227ca75e15b8849ff5a4", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 157 lints included in this crate:\n+There are 158 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}, {"sha": "a1918aed69f9b30b6d556e46718c05c7324a9184", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0e3dcd13765c5fed9795227ca75e15b8849ff5a4/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3dcd13765c5fed9795227ca75e15b8849ff5a4/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=0e3dcd13765c5fed9795227ca75e15b8849ff5a4", "patch": "@@ -88,15 +88,15 @@ impl LateLintPass for Functions {\n             self.check_arg_number(cx, decl, span);\n         }\n \n-        self.check_raw_ptr(cx, unsafety, decl, block, span, nodeid);\n+        self.check_raw_ptr(cx, unsafety, decl, block, nodeid);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n         if let hir::MethodTraitItem(ref sig, ref block) = item.node {\n             self.check_arg_number(cx, &sig.decl, item.span);\n \n             if let Some(ref block) = *block {\n-                self.check_raw_ptr(cx, sig.unsafety, &sig.decl, block, item.span, item.id);\n+                self.check_raw_ptr(cx, sig.unsafety, &sig.decl, block, item.id);\n             }\n         }\n     }\n@@ -113,7 +113,7 @@ impl Functions {\n         }\n     }\n \n-    fn check_raw_ptr(&self, cx: &LateContext, unsafety: hir::Unsafety, decl: &hir::FnDecl, block: &hir::Block, span: Span, nodeid: ast::NodeId) {\n+    fn check_raw_ptr(&self, cx: &LateContext, unsafety: hir::Unsafety, decl: &hir::FnDecl, block: &hir::Block, nodeid: ast::NodeId) {\n         if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(nodeid) {\n             let raw_ptrs = decl.inputs.iter().filter_map(|arg| raw_ptr_arg(cx, arg)).collect::<HashSet<_>>();\n \n@@ -144,32 +144,43 @@ struct DerefVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx, 'v> hir::intravisit::Visitor<'v> for DerefVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'v hir::Expr) {\n-        let ptr = match expr.node {\n-            hir::ExprUnary(hir::UnDeref, ref ptr) => Some(ptr),\n+        match expr.node {\n+            hir::ExprCall(ref f, ref args) => {\n+                let ty = self.cx.tcx.expr_ty(f);\n+\n+                if type_is_unsafe_function(ty) {\n+                    for arg in args {\n+                        self.check_arg(arg);\n+                    }\n+                }\n+            }\n             hir::ExprMethodCall(_, _, ref args) => {\n                 let method_call = ty::MethodCall::expr(expr.id);\n                 let base_type = self.cx.tcx.tables.borrow().method_map[&method_call].ty;\n \n                 if type_is_unsafe_function(base_type) {\n-                    Some(&args[0])\n-                } else {\n-                    None\n-                }\n-            }\n-            _ => None,\n-        };\n-\n-        if let Some(ptr) = ptr {\n-            if let Some(def) = self.cx.tcx.def_map.borrow().get(&ptr.id) {\n-                if self.ptrs.contains(&def.def_id()) {\n-                    span_lint(self.cx,\n-                              NOT_UNSAFE_PTR_ARG_DEREF,\n-                              ptr.span,\n-                              \"this public function dereferences a raw pointer but is not marked `unsafe`\");\n+                    for arg in args {\n+                        self.check_arg(arg);\n+                    }\n                 }\n             }\n+            hir::ExprUnary(hir::UnDeref, ref ptr) => self.check_arg(ptr),\n+            _ => (),\n         }\n \n         hir::intravisit::walk_expr(self, expr);\n     }\n }\n+\n+impl<'a, 'tcx: 'a> DerefVisitor<'a, 'tcx> {\n+    fn check_arg(&self, ptr: &hir::Expr) {\n+        if let Some(def) = self.cx.tcx.def_map.borrow().get(&ptr.id) {\n+            if self.ptrs.contains(&def.def_id()) {\n+                span_lint(self.cx,\n+                          NOT_UNSAFE_PTR_ARG_DEREF,\n+                          ptr.span,\n+                          \"this public function dereferences a raw pointer but is not marked `unsafe`\");\n+            }\n+        }\n+    }\n+}"}, {"sha": "f7ee41d281699d631863a8f4e3e4b1f97d526160", "filename": "tests/compile-fail/functions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e3dcd13765c5fed9795227ca75e15b8849ff5a4/tests%2Fcompile-fail%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3dcd13765c5fed9795227ca75e15b8849ff5a4/tests%2Fcompile-fail%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunctions.rs?ref=0e3dcd13765c5fed9795227ca75e15b8849ff5a4", "patch": "@@ -36,6 +36,10 @@ impl Foo for Bar {\n     fn ptr(p: *const u8) {\n         println!(\"{}\", unsafe { *p });\n         //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+        println!(\"{:?}\", unsafe { p.as_ref() });\n+        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+        unsafe { std::ptr::read(p) };\n+        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n     }\n }\n \n@@ -50,6 +54,8 @@ pub fn public(p: *const u8) {\n     //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n     println!(\"{:?}\", unsafe { p.as_ref() });\n     //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+    unsafe { std::ptr::read(p) };\n+    //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n }\n \n impl Bar {\n@@ -62,6 +68,8 @@ impl Bar {\n         //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n         println!(\"{:?}\", unsafe { p.as_ref() });\n         //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n+        unsafe { std::ptr::read(p) };\n+        //~^ ERROR: this public function dereferences a raw pointer but is not marked `unsafe`\n     }\n \n     pub fn public_ok(self, p: *const u8) {"}]}