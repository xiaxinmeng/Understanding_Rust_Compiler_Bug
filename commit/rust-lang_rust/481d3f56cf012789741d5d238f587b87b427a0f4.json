{"sha": "481d3f56cf012789741d5d238f587b87b427a0f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MWQzZjU2Y2YwMTI3ODk3NDFkNWQyMzhmNTg3Yjg3YjQyN2EwZjQ=", "commit": {"author": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-24T13:31:44Z"}, "committer": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-24T13:42:11Z"}, "message": "Assist to flip equality (==) and negative equality (!=) operands.", "tree": {"sha": "9dd514418ff843ab84f14af3a9850af5a5012aa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd514418ff843ab84f14af3a9850af5a5012aa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/481d3f56cf012789741d5d238f587b87b427a0f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/481d3f56cf012789741d5d238f587b87b427a0f4", "html_url": "https://github.com/rust-lang/rust/commit/481d3f56cf012789741d5d238f587b87b427a0f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/481d3f56cf012789741d5d238f587b87b427a0f4/comments", "author": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a8f48039fbfcbbf58e1dadcc95465fe9503691", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a8f48039fbfcbbf58e1dadcc95465fe9503691", "html_url": "https://github.com/rust-lang/rust/commit/18a8f48039fbfcbbf58e1dadcc95465fe9503691"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "22494a7c748f28e4c6f6038aa05dc8821f37bb64", "filename": "crates/ra_assists/src/flip_eq_operands.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/481d3f56cf012789741d5d238f587b87b427a0f4/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481d3f56cf012789741d5d238f587b87b427a0f4/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs?ref=481d3f56cf012789741d5d238f587b87b427a0f4", "patch": "@@ -0,0 +1,87 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::{\n+    ast::{AstNode, BinExpr, BinOp}\n+};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+pub(crate) fn flip_eq_operands(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let expr = ctx.node_at_offset::<BinExpr>()?;\n+    let allowed_ops = [BinOp::EqualityTest, BinOp::NegatedEqualityTest];\n+    let expr_op = expr.op()?;\n+    if ! allowed_ops.iter().any(|o| *o == expr_op) {\n+        return None;\n+    }\n+    let node = expr.syntax();\n+    let prev = node.first_child()?;\n+    let next = node.last_child()?;\n+    ctx.add_action(AssistId(\"flip_eq_operands\"), \"flip equality operands\", |edit| {\n+        edit.target(node.range());\n+        edit.replace(prev.range(), next.text());\n+        edit.replace(next.range(), prev.text());\n+    });\n+\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{check_assist, check_assist_target};\n+\n+    #[test]\n+    fn flip_eq_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_eq_operands,\n+            \"fn f() { let res = 1 ==<|> 2; }\",\n+            \"fn f() { let res = 2 ==<|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_neq_operands_for_simple_stmt() {\n+        check_assist(\n+            flip_eq_operands,\n+            \"fn f() { let res = 1 !=<|> 2; }\",\n+            \"fn f() { let res = 2 !=<|> 1; }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_eq_operands_for_complex_stmt() {\n+        check_assist(\n+            flip_eq_operands,\n+            \"fn f() { let res = (1 + 1) ==<|> (2 + 2); }\",\n+            \"fn f() { let res = (2 + 2) ==<|> (1 + 1); }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_eq_operands_in_match_expr() {\n+        check_assist(\n+            flip_eq_operands,\n+            r#\"\n+            fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n+                match other.downcast_ref::<Self>() {\n+                    None => false,\n+                    Some(it) => it ==<|> self,\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n+                match other.downcast_ref::<Self>() {\n+                    None => false,\n+                    Some(it) => self ==<|> it,\n+                }\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_eq_operands_target() {\n+        check_assist_target(flip_eq_operands, \"fn f() { let res = 1 ==<|> 2; }\", \"1 == 2\")\n+    }\n+}"}, {"sha": "eb5248ae486f5325b599f80e4bd745e25202f3be", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481d3f56cf012789741d5d238f587b87b427a0f4/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481d3f56cf012789741d5d238f587b87b427a0f4/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=481d3f56cf012789741d5d238f587b87b427a0f4", "patch": "@@ -88,6 +88,7 @@ where\n mod add_derive;\n mod add_impl;\n mod flip_comma;\n+mod flip_eq_operands;\n mod change_visibility;\n mod fill_match_arms;\n mod fill_struct_fields;\n@@ -106,6 +107,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         fill_match_arms::fill_match_arms,\n         fill_struct_fields::fill_struct_fields,\n         flip_comma::flip_comma,\n+        flip_eq_operands::flip_eq_operands,\n         introduce_variable::introduce_variable,\n         replace_if_let_with_match::replace_if_let_with_match,\n         split_import::split_import,"}]}