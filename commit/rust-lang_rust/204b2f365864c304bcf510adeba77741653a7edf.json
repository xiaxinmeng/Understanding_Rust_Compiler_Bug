{"sha": "204b2f365864c304bcf510adeba77741653a7edf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNGIyZjM2NTg2NGMzMDRiY2Y1MTBhZGViYTc3NzQxNjUzYTdlZGY=", "commit": {"author": {"name": "KRAAI, MATTHEW [VISUS]", "email": "mkraai@its.jnj.com", "date": "2019-08-19T16:30:32Z"}, "committer": {"name": "KRAAI, MATTHEW [VISUS]", "email": "mkraai@its.jnj.com", "date": "2019-08-19T16:30:32Z"}, "message": "Remove in_macro_or_desugar", "tree": {"sha": "44fc81d99ece7e716b08e33c6597cc1c55f76b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44fc81d99ece7e716b08e33c6597cc1c55f76b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204b2f365864c304bcf510adeba77741653a7edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204b2f365864c304bcf510adeba77741653a7edf", "html_url": "https://github.com/rust-lang/rust/commit/204b2f365864c304bcf510adeba77741653a7edf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204b2f365864c304bcf510adeba77741653a7edf/comments", "author": null, "committer": null, "parents": [{"sha": "918d609002e6b65296c4e3e251f77ce00393d53f", "url": "https://api.github.com/repos/rust-lang/rust/commits/918d609002e6b65296c4e3e251f77ce00393d53f", "html_url": "https://github.com/rust-lang/rust/commit/918d609002e6b65296c4e3e251f77ce00393d53f"}], "stats": {"total": 277, "additions": 129, "deletions": 148}, "files": [{"sha": "347c6478b47c6d3329d61f16a90cdc179862d4ca", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n use crate::consts::{constant, Constant};\n-use crate::utils::{in_macro_or_desugar, is_direct_expn_of, is_expn_of, span_help_and_lint};\n+use crate::utils::{is_direct_expn_of, is_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -55,12 +55,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n             }\n         };\n         if let Some(debug_assert_span) = is_expn_of(e.span, \"debug_assert\") {\n-            if in_macro_or_desugar(debug_assert_span) {\n+            if debug_assert_span.from_expansion() {\n                 return;\n             }\n             lint_assert_cb(true);\n         } else if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\") {\n-            if in_macro_or_desugar(assert_span) {\n+            if assert_span.from_expansion() {\n                 return;\n             }\n             lint_assert_cb(false);"}, {"sha": "1159df5475ac0bb3e1e8d6e1cec46cd46993db91", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -2,8 +2,8 @@\n \n use crate::reexport::*;\n use crate::utils::{\n-    in_macro_or_desugar, is_present_in_source, last_line_of_span, match_def_path, paths, snippet_opt, span_lint,\n-    span_lint_and_sugg, span_lint_and_then, without_block_comments,\n+    is_present_in_source, last_line_of_span, match_def_path, paths, snippet_opt, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n use rustc::hir::*;\n@@ -412,7 +412,7 @@ fn is_relevant_expr(cx: &LateContext<'_, '_>, tables: &ty::TypeckTables<'_>, exp\n }\n \n fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attribute]) {\n-    if in_macro_or_desugar(span) {\n+    if span.from_expansion() {\n         return;\n     }\n "}, {"sha": "c2ff8c83373b670741e3b89cc2ee6a12afcb5d9f", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         if let ExprKind::Closure(_, _, eid, _, _) = expr.node {\n             let body = self.cx.tcx.hir().body(eid);\n             let ex = &body.value;\n-            if matches!(ex.node, ExprKind::Block(_, _)) && !in_macro_or_desugar(body.value.span) {\n+            if matches!(ex.node, ExprKind::Block(_, _)) && !body.value.span.from_expansion() {\n                 self.found_block = Some(ex);\n                 return;\n             }\n@@ -79,7 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         if let Some(ex) = &block.expr {\n                             // don't dig into the expression here, just suggest that they remove\n                             // the block\n-                            if in_macro_or_desugar(expr.span) || differing_macro_contexts(expr.span, ex.span) {\n+                            if expr.span.from_expansion() || differing_macro_contexts(expr.span, ex.span) {\n                                 return;\n                             }\n                             span_help_and_lint(\n@@ -96,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         }\n                     } else {\n                         let span = block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n-                        if in_macro_or_desugar(span) || differing_macro_contexts(expr.span, span) {\n+                        if span.from_expansion() || differing_macro_contexts(expr.span, span) {\n                             return;\n                         }\n                         // move block higher"}, {"sha": "b520a3e25769dc6ddfca24ab1cc1eedd315ccda6", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,5 @@\n use crate::utils::{\n-    get_trait_def_id, implements_trait, in_macro, in_macro_or_desugar, match_type, paths, snippet_opt,\n-    span_lint_and_then, SpanlessEq,\n+    get_trait_def_id, implements_trait, in_macro, match_type, paths, snippet_opt, span_lint_and_then, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc::hir::intravisit::*;\n@@ -106,7 +105,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         }\n \n         // prevent folding of `cfg!` macros and the like\n-        if !in_macro_or_desugar(e.span) {\n+        if !e.span.from_expansion() {\n             match &e.node {\n                 ExprKind::Unary(UnNot, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n                 ExprKind::Binary(binop, lhs, rhs) => match &binop.node {"}, {"sha": "88b8d8688b669e2f44423a57efe52ed42d699f1d", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -9,7 +9,7 @@ use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::Attribute;\n use syntax::source_map::Span;\n \n-use crate::utils::{in_macro_or_desugar, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n+use crate::utils::{is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity.\n@@ -42,7 +42,7 @@ impl_lint_pass!(CognitiveComplexity => [COGNITIVE_COMPLEXITY]);\n \n impl CognitiveComplexity {\n     fn check<'a, 'tcx>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {\n-        if in_macro_or_desugar(span) {\n+        if span.from_expansion() {\n             return;\n         }\n "}, {"sha": "6c33f362633c1298912ce36a37979e85bb10aba4", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -18,9 +18,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast;\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    in_macro_or_desugar, snippet_block, snippet_block_with_applicability, span_lint_and_sugg, span_lint_and_then,\n-};\n+use crate::utils::{snippet_block, snippet_block_with_applicability, span_lint_and_sugg, span_lint_and_then};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -77,7 +75,7 @@ declare_lint_pass!(CollapsibleIf => [COLLAPSIBLE_IF]);\n \n impl EarlyLintPass for CollapsibleIf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if !in_macro_or_desugar(expr.span) {\n+        if !expr.span.from_expansion() {\n             check_if(cx, expr)\n         }\n     }\n@@ -108,7 +106,7 @@ fn check_collapsible_maybe_if_let(cx: &EarlyContext<'_>, else_: &ast::Expr) {\n         if let ast::ExprKind::Block(ref block, _) = else_.node;\n         if !block_starts_with_comment(cx, block);\n         if let Some(else_) = expr_block(block);\n-        if !in_macro_or_desugar(else_.span);\n+        if !else_.span.from_expansion();\n         if let ast::ExprKind::If(..) = else_.node;\n         then {\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "df354073df80fbd8b630a16c53539e0c1582b1a6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,4 @@\n-use crate::utils::{\n-    get_parent_expr, higher, in_macro_or_desugar, same_tys, snippet, span_lint_and_then, span_note_and_lint,\n-};\n+use crate::utils::{get_parent_expr, higher, same_tys, snippet, span_lint_and_then, span_note_and_lint};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -109,7 +107,7 @@ declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if !in_macro_or_desugar(expr.span) {\n+        if !expr.span.from_expansion() {\n             // skip ifs directly in else, it will be checked in the parent if\n             if let Some(expr) = get_parent_expr(cx, expr) {\n                 if let Some((_, _, Some(ref else_expr))) = higher::if_block(&expr) {"}, {"sha": "5e1a860ae80fa895d0b224c802a5684944a43b6d", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro_or_desugar, span_lint};\n+use crate::utils::span_lint;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n@@ -27,7 +27,7 @@ declare_lint_pass!(DoubleParens => [DOUBLE_PARENS]);\n \n impl EarlyLintPass for DoubleParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_macro_or_desugar(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "277844983658cd15f8d620c51eb5eb7c66a89b13", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,6 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use crate::utils::{camel_case, in_macro_or_desugar, is_present_in_source};\n+use crate::utils::{camel_case, is_present_in_source};\n use crate::utils::{span_help_and_lint, span_lint};\n use rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n@@ -248,7 +248,7 @@ impl EarlyLintPass for EnumVariantNames {\n         let item_name = item.ident.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n-        if !in_macro_or_desugar(item.span) && is_present_in_source(cx, item.span) {\n+        if !item.span.from_expansion() && is_present_in_source(cx, item.span) {\n             if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n                 // constants don't have surrounding modules\n                 if !mod_camel.is_empty() {"}, {"sha": "9c8380ab7de7c4f919c02351e4cba33ec33e565f", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,4 @@\n-use crate::utils::{\n-    implements_trait, in_macro_or_desugar, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq,\n-};\n+use crate::utils::{implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -52,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n     #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Binary(op, ref left, ref right) = e.node {\n-            if in_macro_or_desugar(e.span) {\n+            if e.span.from_expansion() {\n                 return;\n             }\n             if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {"}, {"sha": "190f4e7b56e8ab42231859392b09feb267ab6c31", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -4,7 +4,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{in_macro_or_desugar, span_lint};\n+use crate::utils::span_lint;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for erasing operations, e.g., `x * 0`.\n@@ -31,7 +31,7 @@ declare_lint_pass!(ErasingOp => [ERASING_OP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro_or_desugar(e.span) {\n+        if e.span.from_expansion() {\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, ref left, ref right) = e.node {"}, {"sha": "6e8d4585161e94c61ff29d6e459d572916133204", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::paths;\n use crate::utils::{\n-    in_macro_or_desugar, is_expn_of, last_path_segment, match_def_path, match_type, resolve_node, snippet,\n-    span_lint_and_then, walk_ptrs_ty,\n+    is_expn_of, last_path_segment, match_def_path, match_type, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::hir::*;\n@@ -40,7 +39,7 @@ declare_lint_pass!(UselessFormat => [USELESS_FORMAT]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessFormat {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some(span) = is_expn_of(expr.span, \"format\") {\n-            if in_macro_or_desugar(span) {\n+            if span.from_expansion() {\n                 return;\n             }\n             match expr.node {"}, {"sha": "463530211157e9fd5e16f9d23f6423fc10e96312", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{differing_macro_contexts, in_macro_or_desugar, snippet_opt, span_note_and_lint};\n+use crate::utils::{differing_macro_contexts, snippet_opt, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -107,7 +107,7 @@ impl EarlyLintPass for Formatting {\n /// Implementation of the `SUSPICIOUS_ASSIGNMENT_FORMATTING` lint.\n fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n     if let ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n-        if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro_or_desugar(lhs.span) {\n+        if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion() {\n             let eq_span = lhs.span.between(rhs.span);\n             if let ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n@@ -139,7 +139,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n         if let ExprKind::If(_, then, Some(else_)) = &expr.node;\n         if is_block(else_) || is_if(else_);\n         if !differing_macro_contexts(then.span, else_.span);\n-        if !in_macro_or_desugar(then.span) && !in_external_macro(cx.sess, expr.span);\n+        if !then.span.from_expansion() && !in_external_macro(cx.sess, expr.span);\n \n         // workaround for rust-lang/rust#43081\n         if expr.span.lo().0 != 0 && expr.span.hi().0 != 0;\n@@ -205,7 +205,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n \n fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n     if !differing_macro_contexts(first.span, second.span)\n-        && !in_macro_or_desugar(first.span)\n+        && !first.span.from_expansion()\n         && is_if(first)\n         && (is_block(second) || is_if(second))\n     {"}, {"sha": "2441dd914affeeff8081c5919820d6f213473ca5", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,5 @@\n use crate::utils::{\n-    in_macro_or_desugar, match_def_path, match_trait_method, same_tys, snippet, snippet_with_macro_callsite,\n-    span_lint_and_then,\n+    match_def_path, match_trait_method, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then,\n };\n use crate::utils::{paths, resolve_node};\n use rustc::hir::*;\n@@ -34,7 +33,7 @@ impl_lint_pass!(IdentityConversion => [IDENTITY_CONVERSION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro_or_desugar(e.span) {\n+        if e.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "55f8701ab18bbd4c81bd4c1610b965924c07a2f7", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -5,7 +5,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{clip, in_macro_or_desugar, snippet, span_lint, unsext};\n+use crate::utils::{clip, snippet, span_lint, unsext};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for identity operations, e.g., `x + 0`.\n@@ -29,7 +29,7 @@ declare_lint_pass!(IdentityOp => [IDENTITY_OP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro_or_desugar(e.span) {\n+        if e.span.from_expansion() {\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, ref left, ref right) = e.node {"}, {"sha": "b1b05bdc17fd71bbffe25a15836850f4fea3f92c", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    in_macro_or_desugar, match_def_path,\n+    match_def_path,\n     paths::{BEGIN_PANIC, BEGIN_PANIC_FMT},\n     resolve_node, snippet_opt, span_lint_and_then,\n };\n@@ -138,7 +138,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n \n         // checking return type through MIR, HIR is not able to determine inferred closure return types\n         // make sure it's not a macro\n-        if !mir.return_ty().is_unit() && !in_macro_or_desugar(span) {\n+        if !mir.return_ty().is_unit() && !span.from_expansion() {\n             expr_match(cx, &body.value);\n         }\n     }"}, {"sha": "eb29a6d436ab098c35db531fb07668403afab5d3", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -4,8 +4,8 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{\n-    get_trait_def_id, implements_trait, in_macro_or_desugar, match_type, paths, return_ty, span_help_and_lint,\n-    trait_ref_of_method, walk_ptrs_ty,\n+    get_trait_def_id, implements_trait, match_type, paths, return_ty, span_help_and_lint, trait_ref_of_method,\n+    walk_ptrs_ty,\n };\n \n declare_clippy_lint! {\n@@ -94,7 +94,7 @@ declare_lint_pass!(InherentToString => [INHERENT_TO_STRING, INHERENT_TO_STRING_S\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem) {\n-        if in_macro_or_desugar(impl_item.span) {\n+        if impl_item.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "5a17134676010e828b533c4bff1e1e70332eb17c", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,6 @@\n //! lint when items are used after statements\n \n-use crate::utils::{in_macro_or_desugar, span_lint};\n+use crate::utils::span_lint;\n use matches::matches;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -38,7 +38,7 @@ declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {\n-        if in_macro_or_desugar(item.span) {\n+        if item.span.from_expansion() {\n             return;\n         }\n \n@@ -52,7 +52,7 @@ impl EarlyLintPass for ItemsAfterStatements {\n         // lint on all further items\n         for stmt in stmts {\n             if let StmtKind::Item(ref it) = *stmt {\n-                if in_macro_or_desugar(it.span) {\n+                if it.span.from_expansion() {\n                     return;\n                 }\n                 if let ItemKind::MacroDef(..) = it.node {"}, {"sha": "a1c61edbba5832fefbbdbfbd61f8c0339767d1bf", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,4 @@\n-use crate::utils::{\n-    get_item_name, in_macro_or_desugar, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n-};\n+use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n use rustc::hir::def_id::DefId;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -75,7 +73,7 @@ declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if in_macro_or_desugar(item.span) {\n+        if item.span.from_expansion() {\n             return;\n         }\n \n@@ -87,7 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro_or_desugar(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "b1da7483a600d078143ba9d3edcee42dab54a66d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -11,7 +11,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{in_macro_or_desugar, sext, sugg};\n+use crate::utils::{sext, sugg};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::mem_categorization::Categorization;\n@@ -470,7 +470,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n     #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // we don't want to check expanded macros\n-        if in_macro_or_desugar(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n \n@@ -1034,7 +1034,7 @@ fn check_for_loop_range<'a, 'tcx>(\n     body: &'tcx Expr,\n     expr: &'tcx Expr,\n ) {\n-    if in_macro_or_desugar(expr.span) {\n+    if expr.span.from_expansion() {\n         return;\n     }\n "}, {"sha": "09c1f4b3c97986f38b0250dd1a56cacb5119a8e9", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::paths;\n use crate::utils::{\n-    in_macro_or_desugar, is_copy, match_trait_method, match_type, remove_blocks, snippet_with_applicability,\n-    span_lint_and_sugg,\n+    is_copy, match_trait_method, match_type, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc::hir;\n@@ -44,7 +43,7 @@ declare_lint_pass!(MapClone => [MAP_CLONE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n-        if in_macro_or_desugar(e.span) {\n+        if e.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "7d46478a6fd3a652e32e3415e2a42e7dd271d528", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths;\n-use crate::utils::{in_macro_or_desugar, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n+use crate::utils::{iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -257,7 +257,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapUnit {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &hir::Stmt) {\n-        if in_macro_or_desugar(stmt.span) {\n+        if stmt.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "6b6fd2bb2087756d7110a568269323f2c5c9d2c4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -2,8 +2,8 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    expr_block, in_macro_or_desugar, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks,\n-    snippet, snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,\n+    expr_block, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n+    snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::hir::def::CtorKind;\n@@ -597,7 +597,7 @@ fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr:\n         }));\n \n         span_lint_and_then(cx, MATCH_REF_PATS, expr.span, title, |db| {\n-            if !in_macro_or_desugar(expr.span) {\n+            if !expr.span.from_expansion() {\n                 multispan_sugg(db, msg.to_owned(), suggs);\n             }\n         });"}, {"sha": "21cfeadba2be5576ad415ae11f252ca75db17237", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -21,11 +21,11 @@ use syntax::symbol::LocalInternedString;\n use crate::utils::sugg;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, in_macro_or_desugar,\n-    is_copy, is_ctor_function, is_expn_of, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n-    match_trait_method, match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys,\n-    single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n-    span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n+    is_ctor_function, is_expn_of, iter_input_pats, last_path_segment, match_def_path, match_qpath, match_trait_method,\n+    match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path,\n+    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n use crate::utils::{paths, span_help_and_lint};\n \n@@ -2150,7 +2150,7 @@ fn lint_option_and_then_some(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &\n                         return;\n                     }\n \n-                    let some_inner_snip = if in_macro_or_desugar(inner_expr.span) {\n+                    let some_inner_snip = if inner_expr.span.from_expansion() {\n                         snippet_with_macro_callsite(cx, inner_expr.span, \"_\")\n                     } else {\n                         snippet(cx, inner_expr.span, \"_\")"}, {"sha": "8cae91f434cd5f8e1388ebf0224ea3f9a618f8b9", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -12,8 +12,8 @@ use syntax::source_map::{ExpnKind, Span};\n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_item_name, get_parent_expr, implements_trait, in_constant, in_macro_or_desugar, is_integer_literal,\n-    iter_input_pats, last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint, span_lint_and_then,\n+    get_item_name, get_parent_expr, implements_trait, in_constant, is_integer_literal, iter_input_pats,\n+    last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint, span_lint_and_then,\n     span_lint_hir_and_then, walk_ptrs_ty, SpanlessEq,\n };\n \n@@ -48,8 +48,8 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// **What it does:** Checks for comparisons to NaN.\n     ///\n-    /// **Why is this bad?** NaN does not compare meaningfully to anything \u2013 not\n-    /// even itself \u2013 so those comparisons are simply wrong.\n+    /// **Why is this bad?** NaN does not compare meaningfully to anything   not\n+    /// even itself   so those comparisons are simply wrong.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -641,7 +641,7 @@ fn in_attributes_expansion(expr: &Expr) -> bool {\n /// Tests whether `res` is a variable defined outside a macro.\n fn non_macro_local(cx: &LateContext<'_, '_>, res: def::Res) -> bool {\n     if let def::Res::Local(id) = res {\n-        !in_macro_or_desugar(cx.tcx.hir().span(id))\n+        !cx.tcx.hir().span(id).from_expansion()\n     } else {\n         false\n     }"}, {"sha": "6c575fd94a87ffc11be94534c931a8a10be7d87b", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -5,7 +5,7 @@\n // [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n //\n \n-use crate::utils::{in_macro_or_desugar, span_lint};\n+use crate::utils::span_lint;\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n@@ -85,7 +85,7 @@ impl MissingDoc {\n             return;\n         }\n \n-        if in_macro_or_desugar(sp) {\n+        if sp.from_expansion() {\n             return;\n         }\n "}, {"sha": "7d28b32c32992d235bddcc5ac4547f0e77f935ef", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, in_macro_or_desugar, span_lint, span_lint_and_sugg};\n+use crate::utils::{higher, span_lint, span_lint_and_sugg};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -129,7 +129,7 @@ declare_lint_pass!(BoolComparison => [BOOL_COMPARISON]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro_or_desugar(e.span) {\n+        if e.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "3a0b6d0fbdf0a83ff3355630bb0e650b453475d3", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{in_macro_or_desugar, snippet_opt, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, Expr, ExprKind, HirId, Item, MutImmutable, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -38,7 +38,7 @@ impl_lint_pass!(NeedlessBorrow => [NEEDLESS_BORROW]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro_or_desugar(e.span) || self.derived_item.is_some() {\n+        if e.span.from_expansion() || self.derived_item.is_some() {\n             return;\n         }\n         if let ExprKind::AddrOf(MutImmutable, ref inner) = e.node {\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n     }\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if in_macro_or_desugar(pat.span) || self.derived_item.is_some() {\n+        if pat.span.from_expansion() || self.derived_item.is_some() {\n             return;\n         }\n         if_chain! {"}, {"sha": "714c746f68d6b2240e9cc921b6a2ee1ac0e0971e", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{in_macro_or_desugar, snippet, span_lint_and_then};\n+use crate::utils::{snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -54,7 +54,7 @@ declare_lint_pass!(NeedlessBorrowedRef => [NEEDLESS_BORROWED_REFERENCE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if in_macro_or_desugar(pat.span) {\n+        if pat.span.from_expansion() {\n             // OK, simple enough, lints doesn't check in macro.\n             return;\n         }"}, {"sha": "79da82ae3e20adf854905fcadb10e8f9d01a9d97", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -39,7 +39,7 @@ use std::borrow::Cow;\n use syntax::ast;\n use syntax::source_map::{original_sp, DUMMY_SP};\n \n-use crate::utils::{in_macro_or_desugar, snippet, snippet_block, span_help_and_lint, trim_multiline};\n+use crate::utils::{snippet, snippet_block, span_help_and_lint, trim_multiline};\n \n declare_clippy_lint! {\n     /// **What it does:** The lint checks for `if`-statements appearing in loops\n@@ -120,7 +120,7 @@ declare_lint_pass!(NeedlessContinue => [NEEDLESS_CONTINUE]);\n \n impl EarlyLintPass for NeedlessContinue {\n     fn check_expr(&mut self, ctx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if !in_macro_or_desugar(expr.span) {\n+        if !expr.span.from_expansion() {\n             check_and_warn(ctx, expr);\n         }\n     }"}, {"sha": "f09fb22f82ade2dfa7432027121de8891204922a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::ptr::get_spans;\n use crate::utils::{\n-    get_trait_def_id, implements_trait, in_macro_or_desugar, is_copy, is_self, match_type, multispan_sugg, paths,\n-    snippet, snippet_opt, span_lint_and_then,\n+    get_trait_def_id, implements_trait, is_copy, is_self, match_type, multispan_sugg, paths, snippet, snippet_opt,\n+    span_lint_and_then,\n };\n use if_chain::if_chain;\n use matches::matches;\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if in_macro_or_desugar(span) {\n+        if span.from_expansion() {\n             return;\n         }\n "}, {"sha": "078aa6923f2d3feb0e1d4261ffe337a700dcc8f2", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{has_drop, in_macro_or_desugar, snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{has_drop, snippet_opt, span_lint, span_lint_and_sugg};\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -43,7 +43,7 @@ declare_clippy_lint! {\n }\n \n fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n-    if in_macro_or_desugar(expr.span) {\n+    if expr.span.from_expansion() {\n         return false;\n     }\n     match expr.node {\n@@ -103,7 +103,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoEffect {\n             } else if let Some(reduced) = reduce_expression(cx, expr) {\n                 let mut snippet = String::new();\n                 for e in reduced {\n-                    if in_macro_or_desugar(e.span) {\n+                    if e.span.from_expansion() {\n                         return;\n                     }\n                     if let Some(snip) = snippet_opt(cx, e.span) {\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoEffect {\n }\n \n fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec<&'a Expr>> {\n-    if in_macro_or_desugar(expr.span) {\n+    if expr.span.from_expansion() {\n         return None;\n     }\n     match expr.node {"}, {"sha": "56922c73110bfb26fd6b2cd697be951c0be92735", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -14,7 +14,7 @@ use rustc_errors::Applicability;\n use rustc_typeck::hir_ty_to_ty;\n use syntax_pos::{InnerSpan, Span, DUMMY_SP};\n \n-use crate::utils::{in_constant, in_macro_or_desugar, is_copy, span_lint_and_then};\n+use crate::utils::{in_constant, is_copy, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for declaration of `const` items which is interior\n@@ -119,7 +119,7 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: S\n \n     let (lint, msg, span) = source.lint();\n     span_lint_and_then(cx, lint, span, msg, |db| {\n-        if in_macro_or_desugar(span) {\n+        if span.from_expansion() {\n             return; // Don't give suggestions into macros.\n         }\n         match source {"}, {"sha": "8e57b8ed77859b0ff33c2ca72f0eb8470b84e25c", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro_or_desugar, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -32,7 +32,7 @@ declare_lint_pass!(Precedence => [PRECEDENCE]);\n \n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_macro_or_desugar(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "68bf1febc6d6c89695c43f51ebb8b23de9fa8c24", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    has_drop, in_macro_or_desugar, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_hir,\n-    span_lint_hir_and_then, walk_ptrs_ty_depth,\n+    has_drop, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_hir, span_lint_hir_and_then,\n+    walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n use matches::matches;\n@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         for (bb, bbdata) in mir.basic_blocks().iter_enumerated() {\n             let terminator = bbdata.terminator();\n \n-            if in_macro_or_desugar(terminator.source_info.span) {\n+            if terminator.source_info.span.from_expansion() {\n                 continue;\n             }\n "}, {"sha": "6a1ef19dd6cd68e8bb0559e0694108b8f1b747ed", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro_or_desugar, snippet, span_lint_and_then};\n+use crate::utils::{snippet, span_lint_and_then};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -78,7 +78,7 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !in_macro_or_desugar(item.span) {\n+        if !item.span.from_expansion() {\n             if let ItemKind::Const(ref var_type, _) = item.node {\n                 self.visit_type(var_type, cx, \"Constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue"}, {"sha": "3cc053a0ebf6e9ae7c61d155d96c6e4025faebbb", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use syntax::visit::FnKind;\n use syntax_pos::BytePos;\n \n-use crate::utils::{in_macro_or_desugar, match_path_ast, snippet_opt, span_lint_and_then};\n+use crate::utils::{match_path_ast, snippet_opt, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block.\n@@ -155,7 +155,7 @@ impl Return {\n     ) {\n         match inner_span {\n             Some(inner_span) => {\n-                if in_external_macro(cx.sess(), inner_span) || in_macro_or_desugar(inner_span) {\n+                if in_external_macro(cx.sess(), inner_span) || inner_span.from_expansion() {\n                     return;\n                 }\n \n@@ -245,7 +245,7 @@ impl EarlyLintPass for Return {\n         if_chain! {\n             if let ast::FunctionRetTy::Ty(ref ty) = decl.output;\n             if let ast::TyKind::Tup(ref vals) = ty.node;\n-            if vals.is_empty() && !in_macro_or_desugar(ty.span) && get_def(span) == get_def(ty.span);\n+            if vals.is_empty() && !ty.span.from_expansion() && get_def(span) == get_def(ty.span);\n             then {\n                 let (rspan, appl) = if let Ok(fn_source) =\n                         cx.sess().source_map()\n@@ -277,7 +277,7 @@ impl EarlyLintPass for Return {\n         if_chain! {\n             if let Some(ref stmt) = block.stmts.last();\n             if let ast::StmtKind::Expr(ref expr) = stmt.node;\n-            if is_unit_expr(expr) && !in_macro_or_desugar(expr.span);\n+            if is_unit_expr(expr) && !expr.span.from_expansion();\n             then {\n                 let sp = expr.span;\n                 span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |db| {\n@@ -295,7 +295,7 @@ impl EarlyLintPass for Return {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         match e.node {\n             ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n-                if is_unit_expr(expr) && !in_macro_or_desugar(expr.span) {\n+                if is_unit_expr(expr) && !expr.span.from_expansion() {\n                     span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |db| {\n                         db.span_suggestion(\n                             expr.span,"}, {"sha": "4135fc87fcd1970434004437bcc22b0493edd3de", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -145,7 +145,7 @@ declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        use crate::utils::{in_macro_or_desugar, snippet, snippet_with_applicability};\n+        use crate::utils::{snippet, snippet_with_applicability};\n         use syntax::ast::{LitKind, StrStyle};\n \n         if let ExprKind::MethodCall(ref path, _, ref args) = e.node {\n@@ -177,7 +177,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n                         } else if callsite == expanded\n                             && lit_content.as_str().chars().all(|c| c.is_ascii())\n                             && lit_content.as_str().len() <= MAX_LENGTH_BYTE_STRING_LIT\n-                            && !in_macro_or_desugar(args[0].span)\n+                            && !args[0].span.from_expansion()\n                         {\n                             span_lint_and_sugg(\n                                 cx,"}, {"sha": "eb6e46c3014eca6b13d3a95b6e9c5166ddf0f700", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,6 +1,6 @@\n use std::cmp;\n \n-use crate::utils::{in_macro_or_desugar, is_copy, is_self_ty, snippet, span_lint_and_sugg};\n+use crate::utils::{is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n@@ -127,7 +127,7 @@ impl_lint_pass!(TriviallyCopyPassByRef => [TRIVIALLY_COPY_PASS_BY_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n-        if in_macro_or_desugar(item.span) {\n+        if item.span.from_expansion() {\n             return;\n         }\n \n@@ -145,7 +145,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if in_macro_or_desugar(span) {\n+        if span.from_expansion() {\n             return;\n         }\n "}, {"sha": "4d9934cee30adbe7ce13e3011f10760ce59900d2", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro_or_desugar, match_qpath, paths, snippet, snippet_with_macro_callsite, span_lint_and_sugg};\n+use crate::utils::{match_qpath, paths, snippet, snippet_with_macro_callsite, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -67,7 +67,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n \n             then {\n                 let err_type = cx.tables.expr_ty(err_arg);\n-                let origin_snippet = if in_macro_or_desugar(err_arg.span) {\n+                let origin_snippet = if err_arg.span.from_expansion() {\n                     snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n                 } else {\n                     snippet(cx, err_arg.span, \"_\")"}, {"sha": "24eba166c7b147cbd73f0e7c0d375870d58a2154", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -23,8 +23,8 @@ use syntax::symbol::sym;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro_or_desugar, int_bits, last_path_segment,\n-    match_def_path, match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, last_path_segment, match_def_path,\n+    match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n     snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n@@ -234,7 +234,7 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n /// local bindings should only be checked for the `BORROWED_BOX` lint.\n #[allow(clippy::too_many_lines)]\n fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n-    if in_macro_or_desugar(hir_ty.span) {\n+    if hir_ty.span.from_expansion() {\n         return;\n     }\n     match hir_ty.node {\n@@ -462,7 +462,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnitValue {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if let StmtKind::Local(ref local) = stmt.node {\n             if is_unit(cx.tables.pat_ty(&local.pat)) {\n-                if in_external_macro(cx.sess(), stmt.span) || in_macro_or_desugar(local.pat.span) {\n+                if in_external_macro(cx.sess(), stmt.span) || local.pat.span.from_expansion() {\n                     return;\n                 }\n                 if higher::is_from_for_desugar(local) {\n@@ -526,7 +526,7 @@ declare_lint_pass!(UnitCmp => [UNIT_CMP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro_or_desugar(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, ref left, _) = expr.node {\n@@ -575,7 +575,7 @@ declare_lint_pass!(UnitArg => [UNIT_ARG]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro_or_desugar(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n \n@@ -1115,7 +1115,7 @@ fn fp_ty_mantissa_nbits(typ: Ty<'_>) -> u32 {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro_or_desugar(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n@@ -1381,7 +1381,7 @@ impl<'a, 'tcx> TypeComplexity {\n     }\n \n     fn check_type(&self, cx: &LateContext<'_, '_>, ty: &hir::Ty) {\n-        if in_macro_or_desugar(ty.span) {\n+        if ty.span.from_expansion() {\n             return;\n         }\n         let score = {\n@@ -1485,7 +1485,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n         if let ExprKind::Cast(ref e, _) = expr.node {\n             if let ExprKind::Lit(ref l) = e.node {\n                 if let LitKind::Char(_) = l.node {\n-                    if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !in_macro_or_desugar(expr.span) {\n+                    if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !expr.span.from_expansion() {\n                         let msg = \"casting character literal to u8. `char`s \\\n                                    are 4 bytes wide in rust, so casting to u8 \\\n                                    truncates them\";\n@@ -1646,7 +1646,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n \n         if let ExprKind::Binary(ref cmp, ref lhs, ref rhs) = expr.node {\n             if let Some((culprit, result)) = detect_absurd_comparison(cx, cmp.node, lhs, rhs) {\n-                if !in_macro_or_desugar(expr.span) {\n+                if !expr.span.from_expansion() {\n                     let msg = \"this comparison involving the minimum or maximum element for this \\\n                                type contains a case that is always true or always false\";\n "}, {"sha": "197b9a8146edcffbbcb95e87bd8f3b1192f17377", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro_or_desugar, span_lint};\n+use crate::utils::span_lint;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -44,7 +44,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n         span: Span,\n         fn_id: hir::HirId,\n     ) {\n-        if in_macro_or_desugar(span) {\n+        if span.from_expansion() {\n             return;\n         }\n "}, {"sha": "061d4aa7460c457f97edea353d314a7d6e26a4fc", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -2,9 +2,7 @@ use if_chain::if_chain;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{\n-    higher::if_block, in_macro_or_desugar, match_type, paths, span_lint_and_then, usage::is_potentially_mutated,\n-};\n+use crate::utils::{higher::if_block, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use syntax::source_map::Span;\n@@ -197,7 +195,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unwrap {\n         span: Span,\n         fn_id: HirId,\n     ) {\n-        if in_macro_or_desugar(span) {\n+        if span.from_expansion() {\n             return;\n         }\n "}, {"sha": "2d772d77ed10be1810431f986722900f85b57c52", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -92,11 +92,6 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n     }\n }\n \n-/// Returns `true` if this `span` was expanded by any macro or desugaring\n-pub fn in_macro_or_desugar(span: Span) -> bool {\n-    span.from_expansion()\n-}\n-\n /// Returns `true` if this `span` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n     if span.from_expansion() {\n@@ -349,7 +344,7 @@ pub fn method_calls(expr: &Expr, max_depth: usize) -> (Vec<Symbol>, Vec<&[Expr]>\n     let mut current = expr;\n     for _ in 0..max_depth {\n         if let ExprKind::MethodCall(path, _, args) = &current.node {\n-            if args.iter().any(|e| in_macro_or_desugar(e.span)) {\n+            if args.iter().any(|e| e.span.from_expansion()) {\n                 break;\n             }\n             method_names.push(path.ident.name);\n@@ -376,7 +371,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n         // method chains are stored last -> first\n         if let ExprKind::MethodCall(ref path, _, ref args) = current.node {\n             if path.ident.name.as_str() == *method_name {\n-                if args.iter().any(|e| in_macro_or_desugar(e.span)) {\n+                if args.iter().any(|e| e.span.from_expansion()) {\n                     return None;\n                 }\n                 matched.push(&**args); // build up `matched` backwards\n@@ -471,7 +466,7 @@ pub fn snippet_with_applicability<'a, T: LintContext>(\n     default: &'a str,\n     applicability: &mut Applicability,\n ) -> Cow<'a, str> {\n-    if *applicability != Applicability::Unspecified && in_macro_or_desugar(span) {\n+    if *applicability != Applicability::Unspecified && span.from_expansion() {\n         *applicability = Applicability::MaybeIncorrect;\n     }\n     snippet_opt(cx, span).map_or_else(\n@@ -536,7 +531,7 @@ pub fn last_line_of_span<T: LintContext>(cx: &T, span: Span) -> Span {\n pub fn expr_block<'a, T: LintContext>(cx: &T, expr: &Expr, option: Option<String>, default: &'a str) -> Cow<'a, str> {\n     let code = snippet_block(cx, expr.span, default);\n     let string = option.unwrap_or_default();\n-    if in_macro_or_desugar(expr.span) {\n+    if expr.span.from_expansion() {\n         Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n     } else if let ExprKind::Block(_, _) = expr.node {\n         Cow::Owned(format!(\"{}{}\", code, string))"}, {"sha": "b1b5791b15d8c7bfdee68292d17bf99e673ed4e8", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -1,7 +1,7 @@\n //! Contains utility functions to generate suggestions.\n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::utils::{higher, in_macro_or_desugar, snippet, snippet_opt, snippet_with_macro_callsite};\n+use crate::utils::{higher, snippet, snippet_opt, snippet_with_macro_callsite};\n use matches::matches;\n use rustc::hir;\n use rustc::lint::{EarlyContext, LateContext, LintContext};\n@@ -69,7 +69,7 @@ impl<'a> Sugg<'a> {\n         default: &'a str,\n         applicability: &mut Applicability,\n     ) -> Self {\n-        if *applicability != Applicability::Unspecified && in_macro_or_desugar(expr.span) {\n+        if *applicability != Applicability::Unspecified && expr.span.from_expansion() {\n             *applicability = Applicability::MaybeIncorrect;\n         }\n         Self::hir_opt(cx, expr).unwrap_or_else(|| {"}, {"sha": "452852f1060b3d6ab1dbcd955e29ee8b9d17cdde", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204b2f365864c304bcf510adeba77741653a7edf/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/204b2f365864c304bcf510adeba77741653a7edf/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=204b2f365864c304bcf510adeba77741653a7edf", "patch": "@@ -392,7 +392,7 @@ Here are some pointers to things you are likely going to need for every lint:\n   is already in here (`implements_trait`, `match_path`, `snippet`, etc)\n * [Clippy diagnostics][diagnostics]\n * [The `if_chain` macro][if_chain]\n-* [`in_macro_or_desugar`][in_macro_or_desugar] and [`in_external_macro`][in_external_macro]\n+* [`from_expansion`][from_expansion] and [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n * [The rustc guide][rustc_guide] explains a lot of internal compiler concepts\n@@ -432,7 +432,7 @@ don't hesitate to ask on Discord, IRC or in the issue/PR.\n [if_chain]: https://docs.rs/if_chain/0.1.2/if_chain/\n [ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/index.html\n [ast]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/index.html\n-[in_macro_or_desugar]: https://github.com/rust-lang/rust-clippy/blob/d0717d1f9531a03d154aaeb0cad94c243915a146/clippy_lints/src/utils/mod.rs#L94\n+[from_expansion]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax_pos/struct.Span.html#method.from_expansion\n [in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/fn.in_external_macro.html\n [play]: https://play.rust-lang.org\n [author_example]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f093b986e80ad62f3b67a1f24f5e66e2"}]}