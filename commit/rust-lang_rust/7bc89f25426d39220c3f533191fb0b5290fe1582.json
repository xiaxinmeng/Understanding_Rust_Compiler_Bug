{"sha": "7bc89f25426d39220c3f533191fb0b5290fe1582", "node_id": "C_kwDOAAsO6NoAKDdiYzg5ZjI1NDI2ZDM5MjIwYzNmNTMzMTkxZmIwYjUyOTBmZTE1ODI", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-11T21:40:57Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:11Z"}, "message": "formatting", "tree": {"sha": "4d8120046d2bb0a7068c9a4e78f0c47e9e296602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d8120046d2bb0a7068c9a4e78f0c47e9e296602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc89f25426d39220c3f533191fb0b5290fe1582", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0psACgkQeO9fUvOM\nSb2Oggv/fnIuabp9ZM1U3X1LQXDhJBaRaO9Y7JpZZWPKCV6ljGSLERLpd1wN2LcC\nmxHvJgtcr1J6kiINRlc59E9jn9/HwG8e6hWXP3GlOigpMSn9fPzCawGhhSZY2Y44\nQnsl1uWhdIXVA2MP04gZ0LpW88fW1m724sMkiTn/RuTVCyicW9z3h0mIwFC5gDAM\nA1x9fYG2gA36e6ckRq+Ra5sdtLMZtr/J4D6s8inmh9CYOKSyYaKTgTeLQkZGTwJZ\nc08Idu4CxJS7mT5+/ilK54Kb1Rmwc0j0+Nod+w5tLAbIg++qCnY7B6yUE0WrMhbF\ndXHiFEVtajO9Qg5Ghx0LRGkD13ZzJIJeI889sAiR0wMB2c1sv2o3pQ+WZjhjmoYz\npeF5+NQbHcbD7exs/YJCbNI3ZPEPEQrvo4dbElcFOUOTPR8cjKoeKLcYqevBZNsb\nAEY0Vdc/JM3/bo1sfMhDSyYoCVapvOAK4aYkFIGma1HFEP621wfVtWWV7168N+fV\n09TSIvNp\n=NDbz\n-----END PGP SIGNATURE-----", "payload": "tree 4d8120046d2bb0a7068c9a4e78f0c47e9e296602\nparent bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641937257 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123931 +0000\n\nformatting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc89f25426d39220c3f533191fb0b5290fe1582", "html_url": "https://github.com/rust-lang/rust/commit/7bc89f25426d39220c3f533191fb0b5290fe1582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc89f25426d39220c3f533191fb0b5290fe1582/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a", "html_url": "https://github.com/rust-lang/rust/commit/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "69d1bc0adcf500da54733f96c083c678efa4a969", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7bc89f25426d39220c3f533191fb0b5290fe1582/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc89f25426d39220c3f533191fb0b5290fe1582/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=7bc89f25426d39220c3f533191fb0b5290fe1582", "patch": "@@ -1,8 +1,8 @@\n use hir::TypeInfo;\n-use std::{iter::successors, collections::HashMap};\n+use std::{collections::HashMap, iter::successors};\n use syntax::{\n     algo::neighbor,\n-    ast::{self, AstNode, Pat, MatchArm, HasName},\n+    ast::{self, AstNode, HasName, MatchArm, Pat},\n     Direction,\n };\n \n@@ -107,8 +107,10 @@ fn are_same_types(\n         }\n \n         let unwrapped_current_arm_type = current_arm_type.unwrap().1;\n-        \n-        if let (Some(other_arm_type), Some(current_arm_type)) = (other_arm_type_entry.1, unwrapped_current_arm_type) {\n+\n+        if let (Some(other_arm_type), Some(current_arm_type)) =\n+            (other_arm_type_entry.1, unwrapped_current_arm_type)\n+        {\n             if other_arm_type.original != current_arm_type.original {\n                 return false;\n             }\n@@ -120,28 +122,32 @@ fn are_same_types(\n \n fn get_arm_types(context: &AssistContext, arm: &MatchArm) -> HashMap<String, Option<TypeInfo>> {\n     let mut mapping: HashMap<String, Option<TypeInfo>> = HashMap::new();\n-    \n-    fn recurse(pat: &Option<Pat>, map: &mut HashMap<String, Option<TypeInfo>>, ctx: &AssistContext) {\n+\n+    fn recurse(\n+        pat: &Option<Pat>,\n+        map: &mut HashMap<String, Option<TypeInfo>>,\n+        ctx: &AssistContext,\n+    ) {\n         if let Some(local_pat) = pat {\n             match pat {\n                 Some(ast::Pat::TupleStructPat(tuple)) => {\n                     for field in tuple.fields() {\n                         recurse(&Some(field), map, ctx);\n                     }\n-                },\n+                }\n                 Some(ast::Pat::RecordPat(record)) => {\n                     if let Some(field_list) = record.record_pat_field_list() {\n                         for field in field_list.fields() {\n                             recurse(&field.pat(), map, ctx);\n                         }\n                     }\n-                },\n+                }\n                 Some(ast::Pat::IdentPat(ident_pat)) => {\n                     if let Some(name) = ident_pat.name() {\n                         let pat_type = ctx.sema.type_of_pat(local_pat);\n                         map.insert(name.text().to_string(), pat_type);\n                     }\n-                },\n+                }\n                 _ => (),\n             }\n         }\n@@ -552,7 +558,7 @@ fn func(x: MyEnum) {\n         MyEnum::Move { x, y } | MyEnum::Crawl { x, y } => \"\",\n     };\n }\n-        \"#,        \n+        \"#,\n         )\n     }\n \n@@ -572,7 +578,7 @@ fn func(x: MyEnum) {\n         MyEnum::Crawl { a, b } => \"\",\n     };\n }\n-        \"#       \n+        \"#,\n         )\n     }\n \n@@ -629,7 +635,7 @@ fn main(msg: Message) {\n     };\n }\n         \"#,\n-        r#\"\n+            r#\"\n enum Color {\n     Rgb(i32, i32, i32),\n     Hsv(i32, i32, i32),\n@@ -680,7 +686,7 @@ fn func(x: MyEnum) {\n         MyEnum::Move { x, .. } | MyEnum::Crawl { x, .. } => \"\",\n     };\n }\n-        \"#,        \n+        \"#,\n         )\n     }\n \n@@ -706,7 +712,7 @@ fn main(msg: Message) {\n         _ => \"other\"\n     };\n }\n-        \"#,        \n+        \"#,\n         )\n     }\n }"}]}