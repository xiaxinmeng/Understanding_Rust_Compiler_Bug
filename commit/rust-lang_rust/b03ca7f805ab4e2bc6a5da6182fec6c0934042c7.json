{"sha": "b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwM2NhN2Y4MDVhYjRlMmJjNmE1ZGE2MTgyZmVjNmMwOTM0MDQyYzc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-28T23:32:25Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-29T22:36:16Z"}, "message": "Separate integers into signed and unsigned.\n\nThis is necessary to reflect the ARM APIs accurately, since some\nfunctions explicitly take an unsigned parameter and a signed one, of the\nsame integer shape, so the no-duplicates check will fail unless we\ndistinguish.", "tree": {"sha": "da8c552cb89ed98b1f0166a4232ac66fc3045ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8c552cb89ed98b1f0166a4232ac66fc3045ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "html_url": "https://github.com/rust-lang/rust/commit/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5787357506202644f6ea85d8c58483fb4a04de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5787357506202644f6ea85d8c58483fb4a04de0", "html_url": "https://github.com/rust-lang/rust/commit/f5787357506202644f6ea85d8c58483fb4a04de0"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "476b9ee31feb2bae14116f4c9eceda87874f656a", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "patch": "@@ -30,7 +30,7 @@ pub struct Intrinsic {\n \n #[derive(Clone, Hash, Eq, PartialEq)]\n pub enum Type {\n-    Integer(u8),\n+    Integer(/* signed */ bool, u8),\n     Float(u8),\n     Pointer(Box<Type>),\n     Vector(Box<Type>, u8),\n@@ -40,7 +40,8 @@ pub enum IntrinsicDef {\n     Named(&'static str),\n }\n \n-fn i(width: u8) -> Type { Type::Integer(width) }\n+fn i(width: u8) -> Type { Type::Integer(true, width) }\n+fn u(width: u8) -> Type { Type::Integer(false, width) }\n fn f(width: u8) -> Type { Type::Float(width) }\n fn v(x: Type, length: u8) -> Type { Type::Vector(Box::new(x), length) }\n "}, {"sha": "d6275f2b9e83ac090cc963952867490ada581ad6", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "patch": "@@ -927,7 +927,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type) -> Type {\n                 use intrinsics::Type::*;\n                 match *t {\n-                    Integer(x) => Type::ix(ccx, x as u64),\n+                    Integer(_signed, x) => Type::ix(ccx, x as u64),\n                     Float(x) => {\n                         match x {\n                             32 => Type::f32(ccx),"}, {"sha": "24b63f5d4f4a61cf06fe802f4baaa0e7e134363e", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "patch": "@@ -456,13 +456,15 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n     };\n \n     match *expected {\n-        Integer(bits) => match (bits, &t.sty) {\n-            (8, &ty::TyInt(ast::TyI8)) | (8, &ty::TyUint(ast::TyU8)) |\n-            (16, &ty::TyInt(ast::TyI16)) | (16, &ty::TyUint(ast::TyU16)) |\n-            (32, &ty::TyInt(ast::TyI32)) | (32, &ty::TyUint(ast::TyU32)) |\n-            (64, &ty::TyInt(ast::TyI64)) | (64, &ty::TyUint(ast::TyU64)) => {},\n+        Integer(signed, bits) => match (signed, bits, &t.sty) {\n+            (true, 8, &ty::TyInt(ast::TyI8)) | (false, 8, &ty::TyUint(ast::TyU8)) |\n+            (true, 16, &ty::TyInt(ast::TyI16)) | (false, 16, &ty::TyUint(ast::TyU16)) |\n+            (true, 32, &ty::TyInt(ast::TyI32)) | (false, 32, &ty::TyUint(ast::TyU32)) |\n+            (true, 64, &ty::TyInt(ast::TyI64)) | (false, 64, &ty::TyUint(ast::TyU64)) => {},\n             _ => simple_error(&format!(\"`{}`\", t),\n-                              &format!(\"`i{n}` or `u{n}`\", n = bits)),\n+                              &format!(\"`{}{n}`\",\n+                                       if signed {\"i\"} else {\"u\"},\n+                                       n = bits)),\n         },\n         Float(bits) => match (bits, &t.sty) {\n             (32, &ty::TyFloat(ast::TyF32)) |"}, {"sha": "ef1f4d6f230b3639026f563c017c1f47d3b4ec04", "filename": "src/test/compile-fail/simd-intrinsic-declaration-type.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-declaration-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ca7f805ab4e2bc6a5da6182fec6c0934042c7/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-declaration-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-declaration-type.rs?ref=b03ca7f805ab4e2bc6a5da6182fec6c0934042c7", "patch": "@@ -25,27 +25,38 @@ struct f32x4(f32, f32, f32, f32);\n #[repr(simd)]\n struct i64x2(i64, i64);\n \n-// signed vs. unsigned doesn't matter\n-mod i {\n-    use i16x8;\n+// correct signatures work well\n+mod right {\n+    use {i16x8, u16x8};\n     extern \"platform-intrinsic\" {\n         fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8;\n+        fn x86_mm_adds_epu16(x: u16x8, y: u16x8) -> u16x8;\n     }\n }\n-mod u {\n-    use u16x8;\n+// but incorrect ones don't.\n+\n+mod signedness {\n+    use {i16x8, u16x8};\n+    // signedness matters\n     extern \"platform-intrinsic\" {\n         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n+        //~^ ERROR intrinsic argument 1 has wrong type\n+        //~^^ ERROR intrinsic argument 2 has wrong type\n+        //~^^^ ERROR intrinsic return value has wrong type\n+        fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n+        //~^ ERROR intrinsic argument 1 has wrong type\n+        //~^^ ERROR intrinsic argument 2 has wrong type\n+        //~^^^ ERROR intrinsic return value has wrong type\n     }\n }\n-// but lengths do\n+// as do lengths\n extern \"platform-intrinsic\" {\n     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n     //~^ ERROR intrinsic argument 1 has wrong type\n     //~^^ ERROR intrinsic argument 2 has wrong type\n     //~^^^ ERROR intrinsic return value has wrong type\n }\n-// and so does int vs. float\n+// and so does int vs. float:\n extern \"platform-intrinsic\" {\n     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n     //~^ ERROR intrinsic argument 1 has wrong type"}]}