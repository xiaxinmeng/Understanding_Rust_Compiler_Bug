{"sha": "ea3504057e73f541af64451a1b5d2c691d5c01bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMzUwNDA1N2U3M2Y1NDFhZjY0NDUxYTFiNWQyYzY5MWQ1YzAxYmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T10:45:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T10:56:33Z"}, "message": "split import assist", "tree": {"sha": "6e9822bea3fbda059fa02661f6e6137770885520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e9822bea3fbda059fa02661f6e6137770885520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3504057e73f541af64451a1b5d2c691d5c01bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3504057e73f541af64451a1b5d2c691d5c01bc", "html_url": "https://github.com/rust-lang/rust/commit/ea3504057e73f541af64451a1b5d2c691d5c01bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3504057e73f541af64451a1b5d2c691d5c01bc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481713a0e17e1557288e88a6b1a173b111792998", "url": "https://api.github.com/repos/rust-lang/rust/commits/481713a0e17e1557288e88a6b1a173b111792998", "html_url": "https://github.com/rust-lang/rust/commit/481713a0e17e1557288e88a6b1a173b111792998"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "607a25115ddf155e17727d63ed9de804a542922f", "filename": "crates/ra_analysis/src/goto_defenition.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs?ref=ea3504057e73f541af64451a1b5d2c691d5c01bc", "patch": "@@ -0,0 +1,73 @@\n+use ra_db::FileId;\n+use ra_syntax::ast;\n+\n+use crate::db::RootDatabase;\n+\n+pub fn goto_defenition(db: &RootDatabase, position: FilePosition,\n+) -> Cancelable<Option<Vec<NavigationTarget>>> {\n+    let file = db.source_file(position.file_id);\n+    let syntax = file.syntax();\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n+        return Ok(Some(reference_defenition(db, position.file_id, name_ref)));\n+    }\n+    if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset)  {\n+        return Ok(Some(name_defenition(db, position.file_idname)));\n+    }\n+    Ok(None)\n+}\n+\n+fn reference_defenition(db: &RootDatabase, file_id: FileId, name_ref: ast::NameRef) -> Cancelable<Vec<Nav>> {\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n+        let mut rr = ReferenceResolution::new(name_ref.syntax().range());\n+        if let Some(fn_descr) =\n+            source_binder::function_from_child_node(self, position.file_id, name_ref.syntax())?\n+        {\n+            let scope = fn_descr.scopes(self);\n+            // First try to resolve the symbol locally\n+            if let Some(entry) = scope.resolve_local_name(name_ref) {\n+                rr.resolves_to.push(NavigationTarget {\n+                    file_id: position.file_id,\n+                    name: entry.name().to_string().into(),\n+                    range: entry.ptr().range(),\n+                    kind: NAME,\n+                    ptr: None,\n+                });\n+                return Ok(Some(rr));\n+            };\n+        }\n+        // If that fails try the index based approach.\n+        rr.resolves_to.extend(\n+            self.index_resolve(name_ref)?\n+                .into_iter()\n+                .map(NavigationTarget::from_symbol),\n+        );\n+        return Ok(Some(rr));\n+    }\n+        if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n+            let mut rr = ReferenceResolution::new(name.syntax().range());\n+            if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n+                if module.has_semi() {\n+                    if let Some(child_module) =\n+                        source_binder::module_from_declaration(self, position.file_id, module)?\n+                    {\n+                        let file_id = child_module.file_id();\n+                        let name = match child_module.name() {\n+                            Some(name) => name.to_string().into(),\n+                            None => \"\".into(),\n+                        };\n+                        let symbol = NavigationTarget {\n+                            file_id,\n+                            name,\n+                            range: TextRange::offset_len(0.into(), 0.into()),\n+                            kind: MODULE,\n+                            ptr: None,\n+                        };\n+                        rr.resolves_to.push(symbol);\n+                        return Ok(Some(rr));\n+                    }\n+                }\n+            }\n+        }\n+        Ok(None)\n+\n+}"}, {"sha": "57b78342a0914d98b98df9ffcd9f1c60ca78e23c", "filename": "crates/ra_editor/src/assists.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_editor%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_editor%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fassists.rs?ref=ea3504057e73f541af64451a1b5d2c691d5c01bc", "patch": "@@ -8,6 +8,7 @@ mod add_derive;\n mod add_impl;\n mod introduce_variable;\n mod change_visibility;\n+mod split_import;\n \n use ra_text_edit::{TextEdit, TextEditBuilder};\n use ra_syntax::{\n@@ -23,6 +24,7 @@ pub use self::{\n     add_impl::add_impl,\n     introduce_variable::introduce_variable,\n     change_visibility::change_visibility,\n+    split_import::split_import,\n };\n \n /// Return all the assists applicable at the given position.\n@@ -34,6 +36,7 @@ pub fn assists(file: &SourceFileNode, range: TextRange) -> Vec<LocalEdit> {\n         add_impl,\n         introduce_variable,\n         change_visibility,\n+        split_import,\n     ]\n     .iter()\n     .filter_map(|&assist| ctx.clone().apply(assist))"}, {"sha": "75f9e8dfbb1bce7f0b07dee8ee2ab856db8b60d2", "filename": "crates/ra_editor/src/assists/split_import.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_editor%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_editor%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fassists%2Fsplit_import.rs?ref=ea3504057e73f541af64451a1b5d2c691d5c01bc", "patch": "@@ -0,0 +1,44 @@\n+use ra_syntax::{\n+    TextUnit, AstNode, SyntaxKind::COLONCOLON,\n+    ast,\n+    algo::generate,\n+};\n+\n+use crate::assists::{AssistCtx, Assist};\n+\n+pub fn split_import(ctx: AssistCtx) -> Option<Assist> {\n+    let colon_colon = ctx\n+        .leaf_at_offset()\n+        .find(|leaf| leaf.kind() == COLONCOLON)?;\n+    let path = colon_colon.parent().and_then(ast::Path::cast)?;\n+    let top_path = generate(Some(path), |it| it.parent_path()).last()?;\n+\n+    let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast);\n+    if use_tree.is_none() {\n+        return None;\n+    }\n+\n+    let l_curly = colon_colon.range().end();\n+    let r_curly = top_path.syntax().range().end();\n+\n+    ctx.build(\"split import\", |edit| {\n+        edit.insert(l_curly, \"{\");\n+        edit.insert(r_curly, \"}\");\n+        edit.set_cursor(l_curly + TextUnit::of_str(\"{\"));\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::assists::check_assist;\n+\n+    #[test]\n+    fn test_split_import() {\n+        check_assist(\n+            split_import,\n+            \"use crate::<|>db::RootDatabase;\",\n+            \"use crate::{<|>db::RootDatabase};\",\n+        )\n+    }\n+}"}, {"sha": "c10169d90a42716b366283680bbc18c9677f01e0", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3504057e73f541af64451a1b5d2c691d5c01bc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=ea3504057e73f541af64451a1b5d2c691d5c01bc", "patch": "@@ -363,6 +363,12 @@ impl<'a> PathSegment<'a> {\n     }\n }\n \n+impl<'a> Path<'a> {\n+    pub fn parent_path(self) -> Option<Path<'a>> {\n+        self.syntax().parent().and_then(Path::cast)\n+    }\n+}\n+\n impl<'a> UseTree<'a> {\n     pub fn has_star(self) -> bool {\n         self.syntax().children().any(|it| it.kind() == STAR)"}]}