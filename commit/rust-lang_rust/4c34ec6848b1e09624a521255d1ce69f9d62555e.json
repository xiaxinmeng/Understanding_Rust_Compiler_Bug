{"sha": "4c34ec6848b1e09624a521255d1ce69f9d62555e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzRlYzY4NDhiMWUwOTYyNGE1MjEyNTVkMWNlNjlmOWQ2MjU1NWU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-25T23:19:14Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-03T18:36:11Z"}, "message": "Live variable analysis", "tree": {"sha": "58342dff1eea2ced23b49e779402aee9bb73a992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58342dff1eea2ced23b49e779402aee9bb73a992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c34ec6848b1e09624a521255d1ce69f9d62555e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c34ec6848b1e09624a521255d1ce69f9d62555e", "html_url": "https://github.com/rust-lang/rust/commit/4c34ec6848b1e09624a521255d1ce69f9d62555e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c34ec6848b1e09624a521255d1ce69f9d62555e/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20899dbd5363132a0e85119419c85626407bd510", "url": "https://api.github.com/repos/rust-lang/rust/commits/20899dbd5363132a0e85119419c85626407bd510", "html_url": "https://github.com/rust-lang/rust/commit/20899dbd5363132a0e85119419c85626407bd510"}], "stats": {"total": 143, "additions": 141, "deletions": 2}, "files": [{"sha": "5e9bec89ac08d0982da4abb48c3b9f3eaee16fdb", "filename": "src/librustc_mir/dataflow/impls/liveness.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/4c34ec6848b1e09624a521255d1ce69f9d62555e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c34ec6848b1e09624a521255d1ce69f9d62555e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs?ref=4c34ec6848b1e09624a521255d1ce69f9d62555e", "patch": "@@ -0,0 +1,137 @@\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n+use rustc_middle::mir::{self, Local, Location};\n+\n+use crate::dataflow::{AnalysisDomain, Backward, BottomValue, GenKill, GenKillAnalysis};\n+\n+/// A [live-variable dataflow analysis][liveness].\n+///\n+/// [liveness]: https://en.wikipedia.org/wiki/Live_variable_analysis\n+pub struct MaybeLiveLocals;\n+\n+impl MaybeLiveLocals {\n+    fn transfer_function<T>(&self, trans: &'a mut T) -> TransferFunction<'a, T> {\n+        TransferFunction(trans)\n+    }\n+}\n+\n+impl BottomValue for MaybeLiveLocals {\n+    // bottom = not live\n+    const BOTTOM_VALUE: bool = false;\n+}\n+\n+impl AnalysisDomain<'tcx> for MaybeLiveLocals {\n+    type Idx = Local;\n+    type Direction = Backward;\n+\n+    const NAME: &'static str = \"liveness\";\n+\n+    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n+        body.local_decls.len()\n+    }\n+\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut BitSet<Self::Idx>) {\n+        // No variables are live until we observe a use\n+    }\n+}\n+\n+impl GenKillAnalysis<'tcx> for MaybeLiveLocals {\n+    fn statement_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        statement: &mir::Statement<'tcx>,\n+        location: Location,\n+    ) {\n+        self.transfer_function(trans).visit_statement(statement, location);\n+    }\n+\n+    fn terminator_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        terminator: &mir::Terminator<'tcx>,\n+        location: Location,\n+    ) {\n+        self.transfer_function(trans).visit_terminator(terminator, location);\n+    }\n+\n+    fn call_return_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        _block: mir::BasicBlock,\n+        _func: &mir::Operand<'tcx>,\n+        _args: &[mir::Operand<'tcx>],\n+        dest_place: mir::Place<'tcx>,\n+    ) {\n+        if let Some(local) = dest_place.as_local() {\n+            trans.kill(local);\n+        }\n+    }\n+\n+    fn yield_resume_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        _resume_block: mir::BasicBlock,\n+        resume_place: mir::Place<'tcx>,\n+    ) {\n+        if let Some(local) = resume_place.as_local() {\n+            trans.kill(local);\n+        }\n+    }\n+}\n+\n+struct TransferFunction<'a, T>(&'a mut T);\n+\n+impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n+where\n+    T: GenKill<Local>,\n+{\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+        match DefUse::for_place(context) {\n+            Some(DefUse::Def) => self.0.kill(local),\n+            Some(DefUse::Use) => self.0.gen(local),\n+            _ => {}\n+        }\n+    }\n+}\n+\n+#[derive(Eq, PartialEq, Clone)]\n+enum DefUse {\n+    Def,\n+    Use,\n+}\n+\n+impl DefUse {\n+    fn for_place(context: PlaceContext) -> Option<DefUse> {\n+        match context {\n+            PlaceContext::NonUse(_) => None,\n+\n+            PlaceContext::MutatingUse(MutatingUseContext::Store) => Some(DefUse::Def),\n+\n+            // `MutatingUseContext::Call` and `MutatingUseContext::Yield` indicate that this is the\n+            // destination place for a `Call` return or `Yield` resume respectively. Since this is\n+            // only a `Def` when the function returns succesfully, we handle this case separately\n+            // in `call_return_effect` above.\n+            PlaceContext::MutatingUse(MutatingUseContext::Call | MutatingUseContext::Yield) => None,\n+\n+            // All other contexts are uses...\n+            PlaceContext::MutatingUse(\n+                MutatingUseContext::AddressOf\n+                | MutatingUseContext::AsmOutput\n+                | MutatingUseContext::Borrow\n+                | MutatingUseContext::Drop\n+                | MutatingUseContext::Projection\n+                | MutatingUseContext::Retag,\n+            )\n+            | PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::AddressOf\n+                | NonMutatingUseContext::Copy\n+                | NonMutatingUseContext::Inspect\n+                | NonMutatingUseContext::Move\n+                | NonMutatingUseContext::Projection\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::UniqueBorrow,\n+            ) => Some(DefUse::Use),\n+        }\n+    }\n+}"}, {"sha": "222ae137d96e225f15405342f07b86764df907d3", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c34ec6848b1e09624a521255d1ce69f9d62555e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c34ec6848b1e09624a521255d1ce69f9d62555e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=4c34ec6848b1e09624a521255d1ce69f9d62555e", "patch": "@@ -21,9 +21,11 @@ use super::on_lookup_result_bits;\n use crate::dataflow::drop_flag_effects;\n \n mod borrowed_locals;\n+mod liveness;\n mod storage_liveness;\n \n pub use self::borrowed_locals::*;\n+pub use self::liveness::MaybeLiveLocals;\n pub use self::storage_liveness::*;\n \n pub(super) mod borrows;"}, {"sha": "a05b4a5385d9c391234abee618b80f68bbd50f7f", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c34ec6848b1e09624a521255d1ce69f9d62555e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c34ec6848b1e09624a521255d1ce69f9d62555e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=4c34ec6848b1e09624a521255d1ce69f9d62555e", "patch": "@@ -10,8 +10,8 @@ pub use self::framework::{\n };\n pub use self::impls::{\n     borrows::Borrows, DefinitelyInitializedPlaces, EverInitializedPlaces, MaybeBorrowedLocals,\n-    MaybeInitializedPlaces, MaybeMutBorrowedLocals, MaybeRequiresStorage, MaybeStorageLive,\n-    MaybeUninitializedPlaces,\n+    MaybeInitializedPlaces, MaybeLiveLocals, MaybeMutBorrowedLocals, MaybeRequiresStorage,\n+    MaybeStorageLive, MaybeUninitializedPlaces,\n };\n \n use self::move_paths::MoveData;"}]}