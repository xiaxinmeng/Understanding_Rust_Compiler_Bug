{"sha": "26893487722d07b3f31a6addfc88e6948620989c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ODkzNDg3NzIyZDA3YjNmMzFhNmFkZGZjODhlNjk0ODYyMDk4OWM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-14T18:46:10Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-14T18:46:10Z"}, "message": "Give literal expression default values for now", "tree": {"sha": "9e4c52766f6939c20debbc39629880471ab877cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4c52766f6939c20debbc39629880471ab877cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26893487722d07b3f31a6addfc88e6948620989c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26893487722d07b3f31a6addfc88e6948620989c", "html_url": "https://github.com/rust-lang/rust/commit/26893487722d07b3f31a6addfc88e6948620989c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26893487722d07b3f31a6addfc88e6948620989c/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a6a50c759302e8a8d59bf6c53c72ec804324b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a6a50c759302e8a8d59bf6c53c72ec804324b3", "html_url": "https://github.com/rust-lang/rust/commit/a9a6a50c759302e8a8d59bf6c53c72ec804324b3"}], "stats": {"total": 32, "additions": 9, "deletions": 23}, "files": [{"sha": "2696592a43ba7763ab0ac7d8442e3f1493a683e4", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26893487722d07b3f31a6addfc88e6948620989c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26893487722d07b3f31a6addfc88e6948620989c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=26893487722d07b3f31a6addfc88e6948620989c", "patch": "@@ -654,7 +654,6 @@ impl ExprCollector {\n                 } else {\n                     return self.alloc_expr(Expr::Missing, syntax_ptr);\n                 };\n-                let c = child.syntax();\n \n                 let lit = match child.flavor() {\n                     LiteralFlavor::IntNumber { suffix } => {\n@@ -663,9 +662,9 @@ impl ExprCollector {\n                             .and_then(|name| UncertainIntTy::from_name(&name));\n \n                         if let Some(kn) = known_name {\n-                            Literal::Int(0u64, kn)\n+                            Literal::Int(Default::default(), kn)\n                         } else {\n-                            Literal::Int(0u64, UncertainIntTy::Unknown)\n+                            Literal::Int(Default::default(), UncertainIntTy::Unknown)\n                         }\n                     }\n                     LiteralFlavor::FloatNumber { suffix } => {\n@@ -674,31 +673,18 @@ impl ExprCollector {\n                             .and_then(|name| UncertainFloatTy::from_name(&name));\n \n                         if let Some(kn) = known_name {\n-                            Literal::Float(0u64, kn)\n+                            Literal::Float(Default::default(), kn)\n                         } else {\n-                            Literal::Float(0u64, UncertainFloatTy::Unknown)\n+                            Literal::Float(Default::default(), UncertainFloatTy::Unknown)\n                         }\n                     }\n-                    LiteralFlavor::ByteString => {\n-                        // FIXME: this is completely incorrect for a variety\n-                        // of reasons, but at least it gives the right type\n-                        let bytes = c.text().to_string().into_bytes();\n-                        Literal::ByteString(bytes)\n-                    }\n-                    LiteralFlavor::String => {\n-                        // FIXME: this likely includes the \" characters\n-                        let text = c.text().to_string();\n-                        Literal::String(text)\n-                    }\n+                    LiteralFlavor::ByteString => Literal::ByteString(Default::default()),\n+                    LiteralFlavor::String => Literal::String(Default::default()),\n                     LiteralFlavor::Byte => {\n-                        let character = c.text().char_at(1).unwrap_or('X');\n-                        Literal::Int(character as u8 as u64, UncertainIntTy::Unsigned(UintTy::U8))\n-                    }\n-                    LiteralFlavor::Bool => Literal::Bool(true),\n-                    LiteralFlavor::Char => {\n-                        let character = c.text().char_at(1).unwrap_or('X');\n-                        Literal::Char(character)\n+                        Literal::Int(Default::default(), UncertainIntTy::Unsigned(UintTy::U8))\n                     }\n+                    LiteralFlavor::Bool => Literal::Bool(Default::default()),\n+                    LiteralFlavor::Char => Literal::Char(Default::default()),\n                 };\n                 self.alloc_expr(Expr::Literal(lit), syntax_ptr)\n             }"}]}