{"sha": "9c627c33dde998cfe42bcde07e1c5692370daf63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNjI3YzMzZGRlOTk4Y2ZlNDJiY2RlMDdlMWM1NjkyMzcwZGFmNjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T10:08:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T10:11:21Z"}, "message": "also expose and use encode_utf16_raw for wtf8", "tree": {"sha": "59cd9bb446c94b2a8003d4a18df605b99553c2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59cd9bb446c94b2a8003d4a18df605b99553c2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c627c33dde998cfe42bcde07e1c5692370daf63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c627c33dde998cfe42bcde07e1c5692370daf63", "html_url": "https://github.com/rust-lang/rust/commit/9c627c33dde998cfe42bcde07e1c5692370daf63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c627c33dde998cfe42bcde07e1c5692370daf63/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3182cdf9baf8ed9e8ae24f4742ee5d3d01c2b54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3182cdf9baf8ed9e8ae24f4742ee5d3d01c2b54a", "html_url": "https://github.com/rust-lang/rust/commit/3182cdf9baf8ed9e8ae24f4742ee5d3d01c2b54a"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "b1b3c70efb1c7e86e22040039db9974bff9c6cf6", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9c627c33dde998cfe42bcde07e1c5692370daf63/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c627c33dde998cfe42bcde07e1c5692370daf63/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=9c627c33dde998cfe42bcde07e1c5692370daf63", "patch": "@@ -701,28 +701,7 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16] {\n-        let mut code = self as u32;\n-        // SAFETY: each arm checks whether there are enough bits to write into\n-        unsafe {\n-            if (code & 0xFFFF) == code && !dst.is_empty() {\n-                // The BMP falls through (assuming non-surrogate, as it should)\n-                *dst.get_unchecked_mut(0) = code as u16;\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n-            } else if dst.len() >= 2 {\n-                // Supplementary planes break into surrogates.\n-                code -= 0x1_0000;\n-                *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n-                *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n-            } else {\n-                panic!(\n-                    \"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf16(),\n-                    code,\n-                    dst.len(),\n-                )\n-            }\n-        }\n+        encode_utf16_raw(self as u32, dst)\n     }\n \n     /// Returns `true` if this `char` has the `Alphabetic` property.\n@@ -1692,3 +1671,39 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut str {\n     // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n     unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n }\n+\n+/// Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\n+/// and then returns the subslice of the buffer that contains the encoded character.\n+///\n+/// Unlike `char::encode_utf16`, this method can be called on codepoints in the surrogate range.\n+///\n+/// # Panics\n+///\n+/// Panics if the buffer is not large enough.\n+/// A buffer of length 2 is large enough to encode any `char`.\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+#[doc(hidden)]\n+#[inline]\n+pub fn encode_utf16_raw(mut code: u32, dst: &mut [u16]) -> &mut [u16] {\n+    // SAFETY: each arm checks whether there are enough bits to write into\n+    unsafe {\n+        if (code & 0xFFFF) == code && !dst.is_empty() {\n+            // The BMP falls through (assuming non-surrogate, as it should)\n+            *dst.get_unchecked_mut(0) = code as u16;\n+            slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n+        } else if dst.len() >= 2 {\n+            // Supplementary planes break into surrogates.\n+            code -= 0x1_0000;\n+            *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n+            *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n+            slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n+        } else {\n+            panic!(\n+                \"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n+                from_u32_unchecked(code).len_utf16(),\n+                code,\n+                dst.len(),\n+            )\n+        }\n+    }\n+}"}, {"sha": "1b4e906e4e47523615759379f91b63c7636db132", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c627c33dde998cfe42bcde07e1c5692370daf63/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c627c33dde998cfe42bcde07e1c5692370daf63/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=9c627c33dde998cfe42bcde07e1c5692370daf63", "patch": "@@ -39,6 +39,8 @@ pub use crate::unicode::UNICODE_VERSION;\n \n // perma-unstable re-exports\n #[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+pub use self::methods::encode_utf16_raw;\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n pub use self::methods::encode_utf8_raw;\n \n use crate::fmt::{self, Write};"}, {"sha": "9f589c93ae59c44a6cdfa56583801c1c4ae6b162", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c627c33dde998cfe42bcde07e1c5692370daf63/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c627c33dde998cfe42bcde07e1c5692370daf63/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=9c627c33dde998cfe42bcde07e1c5692370daf63", "patch": "@@ -828,8 +828,7 @@ impl<'a> Iterator for EncodeWide<'a> {\n \n         let mut buf = [0; 2];\n         self.code_points.next().map(|code_point| {\n-            let c = unsafe { char::from_u32_unchecked(code_point.value) };\n-            let n = c.encode_utf16(&mut buf).len();\n+            let n = char::encode_utf16_raw(code_point.value, &mut buf).len();\n             if n == 2 {\n                 self.extra = buf[1];\n             }"}]}