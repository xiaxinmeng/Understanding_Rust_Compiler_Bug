{"sha": "480c44918c73922b134b670cbd33014b8fcfc883", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MGM0NDkxOGM3MzkyMmIxMzRiNjcwY2JkMzMwMTRiOGZjZmM4ODM=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-01-11T20:32:40Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-01-11T20:32:40Z"}, "message": "Disable cargo checking in workspaces with no cargo projects", "tree": {"sha": "d26ccf2d4cce9639b6f7b3373734d989c8861ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26ccf2d4cce9639b6f7b3373734d989c8861ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/480c44918c73922b134b670cbd33014b8fcfc883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/480c44918c73922b134b670cbd33014b8fcfc883", "html_url": "https://github.com/rust-lang/rust/commit/480c44918c73922b134b670cbd33014b8fcfc883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/480c44918c73922b134b670cbd33014b8fcfc883/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6da18e99d2fb4e67e3bc7503059282b5e14bd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6da18e99d2fb4e67e3bc7503059282b5e14bd13", "html_url": "https://github.com/rust-lang/rust/commit/d6da18e99d2fb4e67e3bc7503059282b5e14bd13"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "cb0856aa43e6d5a5f1f31b1f0a3cded4c0036f27", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/480c44918c73922b134b670cbd33014b8fcfc883/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/480c44918c73922b134b670cbd33014b8fcfc883/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=480c44918c73922b134b670cbd33014b8fcfc883", "patch": "@@ -58,6 +58,12 @@ impl CheckWatcher {\n         CheckWatcher { task_recv, cmd_send: Some(cmd_send), handle: Some(handle), shared }\n     }\n \n+    /// Returns a CheckWatcher that doesn't actually do anything\n+    pub fn dummy() -> CheckWatcher {\n+        let shared = Arc::new(RwLock::new(CheckWatcherSharedState::new()));\n+        CheckWatcher { task_recv: never(), cmd_send: None, handle: None, shared }\n+    }\n+\n     /// Schedule a re-start of the cargo check worker.\n     pub fn update(&self) {\n         if let Some(cmd_send) = &self.cmd_send {"}, {"sha": "a52bd263366a41396990e36312b7aa9d684ec03f", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/480c44918c73922b134b670cbd33014b8fcfc883/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/480c44918c73922b134b670cbd33014b8fcfc883/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=480c44918c73922b134b670cbd33014b8fcfc883", "patch": "@@ -132,20 +132,20 @@ impl WorldState {\n         change.set_crate_graph(crate_graph);\n \n         // FIXME: Figure out the multi-workspace situation\n-        let check_watcher = {\n-            let first_workspace = workspaces.first().unwrap();\n-            let cargo_project_root = match first_workspace {\n-                ProjectWorkspace::Cargo { cargo, .. } => cargo.workspace_root().to_path_buf(),\n-                ProjectWorkspace::Json { .. } => {\n-                    log::warn!(\n-                        \"Cargo check watching only supported for cargo workspaces, disabling\"\n-                    );\n-                    options.cargo_watch.enable = false;\n-                    PathBuf::new()\n-                }\n-            };\n-            CheckWatcher::new(&options.cargo_watch, cargo_project_root)\n-        };\n+        let check_watcher = workspaces\n+            .iter()\n+            .find_map(|w| match w {\n+                ProjectWorkspace::Cargo { cargo, .. } => Some(cargo),\n+                ProjectWorkspace::Json { .. } => None,\n+            })\n+            .map(|cargo| {\n+                let cargo_project_root = cargo.workspace_root().to_path_buf();\n+                CheckWatcher::new(&options.cargo_watch, cargo_project_root)\n+            })\n+            .unwrap_or_else(|| {\n+                log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n+                CheckWatcher::dummy()\n+            });\n \n         let mut analysis_host = AnalysisHost::new(lru_capacity, feature_flags);\n         analysis_host.apply_change(change);"}]}