{"sha": "2851f9f70795a0735562266a30cf9ad672f1e24b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NTFmOWY3MDc5NWEwNzM1NTYyMjY2YTMwY2Y5YWQ2NzJmMWUyNGI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-27T21:34:16Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-03T14:03:25Z"}, "message": "Expand on lint implementation section, wrap lines", "tree": {"sha": "a1d131bbb1f89abebd8efe836113105b5c3b9bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d131bbb1f89abebd8efe836113105b5c3b9bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2851f9f70795a0735562266a30cf9ad672f1e24b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlx73rMACgkQtvoGpuDi\nZlsdRw/9FRF8IkLSSrOR3mdICYry5qURFZJsmv40gXN8gN6fv/roWyjoOLFFkuoq\nY62tMnxhaCXSzGwywAmxVT+XPiSDU461kGVq6jM3FLqjBlQ0S8392gxqgW/YjSBE\nWHsBj10eyN2hltA2m+rt8LC/J2nBGEJbf321srtoEZbPrqk0gyVOEx1OdmKXEInO\nRWwWZTRp+Q9T/yMDAtC5U2cR7QociHgLm9ieHnEmf6IjC9qF6tfd2XX6mqprpw0g\nNmaniovOBhC4Qk09SI0zW0OrybXUfWm6Ohmi7kG8OD/arMd1jgy1M4sd/PyYJp5g\n+YKt3NBZKutPJMhrhWufjUI8/SGCVV2wD2cCcwlZ7M0moYor9rB0kKHXGgI6qr/Q\nfu2HhR9+ept7L8ksUeLbn0XxdJypECkm6OM+IDVRNMrugHB+eN/Y/BGU+8eQ7dmv\nO/CdkFjaEENXeOs+DFvMXSFSLWk+T+8T9bZRTGyWbtC5+H4bPbJxzsH/RCx9Xj2m\nJgj1KpvGus8ltIf6azK1Ynnsl0zPe2n92NlXa+ke4NhXgyfMPT9UjJINifB2LOFG\n412pwJ0B8fW/PMEqIggPKhLUAb2ZjezDH5P5WkBJ79lNHcJ8eSICrEk4yAEu5Xzo\nVlqAjsus0Ja29Ffu1ylLCuMT9ZjSqMH3yWMdBBXozXghE4a+7BY=\n=FrBW\n-----END PGP SIGNATURE-----", "payload": "tree a1d131bbb1f89abebd8efe836113105b5c3b9bac\nparent ef97c13f5e5e2bd5ba1aae5602891941a2ce4fc7\nauthor Philipp Hansch <dev@phansch.net> 1551303256 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551621805 +0100\n\nExpand on lint implementation section, wrap lines\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2851f9f70795a0735562266a30cf9ad672f1e24b", "html_url": "https://github.com/rust-lang/rust/commit/2851f9f70795a0735562266a30cf9ad672f1e24b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2851f9f70795a0735562266a30cf9ad672f1e24b/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef97c13f5e5e2bd5ba1aae5602891941a2ce4fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef97c13f5e5e2bd5ba1aae5602891941a2ce4fc7", "html_url": "https://github.com/rust-lang/rust/commit/ef97c13f5e5e2bd5ba1aae5602891941a2ce4fc7"}], "stats": {"total": 88, "additions": 65, "deletions": 23}, "files": [{"sha": "c61e247f9cfa31d17900c83cd2a0f9183a593d32", "filename": "doc/adding_lints.md", "status": "modified", "additions": 65, "deletions": 23, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2851f9f70795a0735562266a30cf9ad672f1e24b/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/2851f9f70795a0735562266a30cf9ad672f1e24b/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=2851f9f70795a0735562266a30cf9ad672f1e24b", "patch": "@@ -88,7 +88,8 @@ use rustc::lint::{LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n ```\n \n-The next step is to provide a lint declaration. Lints are declared using the [`declare_clippy_lint!`][declare_clippy_lint] macro:\n+The next step is to provide a lint declaration. Lints are declared using the\n+[`declare_clippy_lint!`][declare_clippy_lint] macro:\n \n ```rust\n declare_clippy_lint! {\n@@ -107,7 +108,8 @@ state the thing that is being checked for and read well when used with\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-With our lint declaration done, we will now make sure that our lint declaration is assigned to a lint pass:\n+With our lint declaration done, we will now make sure that our lint declaration\n+is assigned to a lint pass:\n \n ```rust\n // clippy_lints/src/foo_functions.rs\n@@ -130,31 +132,43 @@ impl LintPass for FooFunctionsPass {\n }\n ```\n \n-Don't worry about the `name` method here. As long as it includes the name of the lint pass it should be fine.\n+Don't worry about the `name` method here. As long as it includes the name of the\n+lint pass it should be fine.\n \n Next you should run `util/dev update_lints` to register the lint in various\n places, mainly in `clippy_lints/src/lib.rs`.\n \n-While `update_lints` automates some things, it doesn't automate everything. We will have to register our lint pass manually in the `register_plugins` function in `clippy_lints/src/lib.rs`:\n+While `update_lints` automates some things, it doesn't automate everything. We\n+will have to register our lint pass manually in the `register_plugins` function\n+in `clippy_lints/src/lib.rs`:\n \n ```rust\n reg.register_early_lint_pass(box foo_functions::FooFunctionsPass);\n ```\n \n-Without that, running the UI tests would produce an error like `unknown clippy lint: clippy::foo_functions`.\n-The next decision we have to make is which lint pass our lint is going to need.\n+Without that, running the UI tests would produce an error like `unknown clippy\n+lint: clippy::foo_functions`.  The next decision we have to make is which lint\n+pass our lint is going to need.\n \n ### Lint passes\n \n Writing a lint that just checks for the name of a function means that we just\n have to deal with the AST and don't have to deal with the type system at all.\n This is good, because it makes writing this particular lint less complicated.\n \n-We have to make this decision with every new Clippy lint. It boils down to using either `EarlyLintPass` or `LateLintPass`. This is a result of Rust's compilation process. You can read more about it [in the rustc guide][compilation_stages].\n+We have to make this decision with every new Clippy lint. It boils down to using\n+either [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass].\n+This is a result of Rust's compilation process. You can read more about it [in\n+the rustc guide][compilation_stages].\n \n-In short, the `LateLintPass` has access to type information while the `EarlyLintPass` doesn't. If you don't need access to type information, use the `EarlyLintPass`. The `EarlyLintPass` is also faster. However linting speed hasn't really been a concern with Clippy so far.\n+In short, the `LateLintPass` has access to type information while the\n+`EarlyLintPass` doesn't. If you don't need access to type information, use the\n+`EarlyLintPass`. The `EarlyLintPass` is also faster. However linting speed\n+hasn't really been a concern with Clippy so far.\n \n-Since we don't need type information for checking the function name, we are going to use the `EarlyLintPass`. It has to be imported as well, changing our imports to:\n+Since we don't need type information for checking the function name, we are\n+going to use the `EarlyLintPass`. It has to be imported as well, changing our\n+imports to:\n \n ```rust\n use rustc::lint::{LintArray, LintPass, EarlyLintPass, EarlyContext};\n@@ -165,20 +179,25 @@ use rustc::{declare_tool_lint, lint_array};\n \n With UI tests in place, we can start working on the implementation of the lint logic. We can keep executing the tests until we make them pass.\n \n-Let's start by emitting a lint for every function definition.\n+Let's start by implementing the `EarlyLintPass` for our `FooFunctionsPass`:\n \n ```rust\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for FooFunctionsPass {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n         // TODO: Emit lint here\n     }\n }\n ```\n \n-We implement the [`check_fn`][check_fn] method from the [`EarlyLintPass`][early_lint_pass] trait. This gives us access to various information about the function that is currently being checked. More on that in the next section. Let's worry about the details later and emit our lint for *every* function definition first.\n+We implement the [`check_fn`][check_fn] method from the\n+[`EarlyLintPass`][early_lint_pass] trait. This gives us access to various\n+information about the function that is currently being checked. More on that in\n+the next section. Let's worry about the details later and emit our lint for\n+*every* function definition first.\n \n-Depending on how complex we want our lint message to be, we can choose from a variety of lint emission functions.\n-They can all be found in  [`clippy_lints/src/utils/diagnostics.rs`][diagnostics].\n+Depending on how complex we want our lint message to be, we can choose from a\n+variety of lint emission functions.  They can all be found in\n+[`clippy_lints/src/utils/diagnostics.rs`][diagnostics].\n \n \n ```rust\n@@ -203,12 +222,33 @@ so this section is kept rather short.\n Using the [`check_fn`][check_fn] method gives us access to [`FnKind`][fn_kind]\n that has two relevant variants for us `FnKind::ItemFn` and `FnKind::Method`.\n Both provide access to the name of the function/method via an [`Ident`][ident].\n-and delegate our check to it's own function, passing through only the data we\n-need.\n \n-In our example, the implementation would look like:\n+With that we can expand our `check_fn` method to:\n+\n+```rust\n+impl EarlyLintPass for Pass {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n+        if !is_foo_fn(fn_kind) { return; }\n+        span_help_and_lint(\n+            cx,\n+            FOO_FUNCTIONS,\n+            span,\n+            \"function named `foo`\",\n+            \"consider using a more meaningful name\"\n+        );\n+    }\n+}\n+```\n+\n+We separate the lint conditional from the lint emissions because it makes the\n+code a bit easier to read. In some cases this separation would also allow to\n+write some unit tests (as opposed to UI tests) for the separate function.\n+\n+In our example, `is_foo_fn` looks like:\n \n ```rust\n+// use statements, impl EarlyLintPass, check_fn, ..\n+\n fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n     match fn_kind {\n         FnKind::ItemFn(ident, ..) | FnKind::Method(ident, ..) => {\n@@ -219,12 +259,12 @@ fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n }\n ```\n \n-\n Now you'll want to also run the full test suite with `cargo test`. Apart from\n running all other UI tests, this ensures that our lint implementation is not\n-violating any Clippy lints itself. If you are still following the example,\n-you'll see that the `FooFunctionsPass` violates a Clippy lint. So we are going\n-to rename that struct to just `Pass`:\n+violating any Clippy lints itself.\n+\n+If you are still following the example, you'll see that the `FooFunctionsPass`\n+violates a Clippy lint. So we are going to rename that struct to just `Pass`:\n \n ```rust\n #[derive(Copy, Clone)]\n@@ -233,6 +273,8 @@ pub struct Pass;\n impl LintPass for Pass { /* .. */ }\n ```\n \n+That should be it for the lint implementation. Running `cargo test` should now\n+pass and we can finish up our work by adding some documentation.\n \n ### Documentation\n \n@@ -255,9 +297,9 @@ Please document your lint with a doc comment akin to the following:\n /// Insert a short example of code that triggers the lint\n ///\n /// // Good\n-/// Insert a short example of improved code that doesnt trigger the lint\n+/// Insert a short example of improved code that doesn't trigger the lint\n /// ```\n-declare_clippy_lint! // ...\n+declare_clippy_lint! { /* ... */ }\n ```\n \n Once your lint is merged, this documentation will show up in the [lint"}]}