{"sha": "f28a63bdf0f18057f0c4be578eb10c7dcc7929de", "node_id": "C_kwDOAAsO6NoAKGYyOGE2M2JkZjBmMTgwNTdmMGM0YmU1NzhlYjEwYzdkY2M3OTI5ZGU", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-05-20T11:42:12Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-05-20T11:42:12Z"}, "message": "implement and use tools/rustdoc-gui-test in bootstrap", "tree": {"sha": "3dc10cb6d67da46caf54e49a671ea4eadfa40f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dc10cb6d67da46caf54e49a671ea4eadfa40f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f28a63bdf0f18057f0c4be578eb10c7dcc7929de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f28a63bdf0f18057f0c4be578eb10c7dcc7929de", "html_url": "https://github.com/rust-lang/rust/commit/f28a63bdf0f18057f0c4be578eb10c7dcc7929de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f28a63bdf0f18057f0c4be578eb10c7dcc7929de/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02ea750f0bf5b85c1b11f45c22aa8eccdcfcc57d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02ea750f0bf5b85c1b11f45c22aa8eccdcfcc57d", "html_url": "https://github.com/rust-lang/rust/commit/02ea750f0bf5b85c1b11f45c22aa8eccdcfcc57d"}], "stats": {"total": 120, "additions": 31, "deletions": 89}, "files": [{"sha": "1b07f64fb5ea2c8a69ca30b3e6cd2d866a3c6d82", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f28a63bdf0f18057f0c4be578eb10c7dcc7929de/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28a63bdf0f18057f0c4be578eb10c7dcc7929de/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f28a63bdf0f18057f0c4be578eb10c7dcc7929de", "patch": "@@ -689,7 +689,8 @@ impl<'a> Builder<'a> {\n                 tool::Miri,\n                 tool::CargoMiri,\n                 llvm::Lld,\n-                llvm::CrtBeginEnd\n+                llvm::CrtBeginEnd,\n+                tool::RustdocGUITest,\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,"}, {"sha": "8c62b9b3a99bf2fc3d5c156d531ecee71541b4d7", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 28, "deletions": 88, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/f28a63bdf0f18057f0c4be578eb10c7dcc7929de/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28a63bdf0f18057f0c4be578eb10c7dcc7929de/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f28a63bdf0f18057f0c4be578eb10c7dcc7929de", "patch": "@@ -942,28 +942,6 @@ fn get_browser_ui_test_version(npm: &Path) -> Option<String> {\n         .or_else(|| get_browser_ui_test_version_inner(npm, true))\n }\n \n-fn compare_browser_ui_test_version(installed_version: &str, src: &Path) {\n-    match fs::read_to_string(\n-        src.join(\"src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version\"),\n-    ) {\n-        Ok(v) => {\n-            if v.trim() != installed_version {\n-                eprintln!(\n-                    \"\u26a0\ufe0f Installed version of browser-ui-test (`{}`) is different than the \\\n-                     one used in the CI (`{}`)\",\n-                    installed_version, v\n-                );\n-                eprintln!(\n-                    \"You can install this version using `npm update browser-ui-test` or by using \\\n-                     `npm install browser-ui-test@{}`\",\n-                    v,\n-                );\n-            }\n-        }\n-        Err(e) => eprintln!(\"Couldn't find the CI browser-ui-test version: {:?}\", e),\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocGUI {\n     pub target: TargetSelection,\n@@ -995,94 +973,56 @@ impl Step for RustdocGUI {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let nodejs = builder.config.nodejs.as_ref().expect(\"nodejs isn't available\");\n-        let npm = builder.config.npm.as_ref().expect(\"npm isn't available\");\n-\n         builder.ensure(compile::Std::new(self.compiler, self.target));\n \n-        // The goal here is to check if the necessary packages are installed, and if not, we\n-        // panic.\n-        match get_browser_ui_test_version(&npm) {\n-            Some(version) => {\n-                // We also check the version currently used in CI and emit a warning if it's not the\n-                // same one.\n-                compare_browser_ui_test_version(&version, &builder.build.src);\n-            }\n-            None => {\n-                eprintln!(\n-                    \"error: rustdoc-gui test suite cannot be run because npm `browser-ui-test` \\\n-                     dependency is missing\",\n-                );\n-                eprintln!(\n-                    \"If you want to install the `{0}` dependency, run `npm install {0}`\",\n-                    \"browser-ui-test\",\n-                );\n-                panic!(\"Cannot run rustdoc-gui tests\");\n-            }\n-        }\n+        let mut cmd = builder.tool_cmd(Tool::RustdocGUITest);\n \n         let out_dir = builder.test_out(self.target).join(\"rustdoc-gui\");\n-\n-        // We remove existing folder to be sure there won't be artifacts remaining.\n         builder.clear_if_dirty(&out_dir, &builder.rustdoc(self.compiler));\n \n-        let src_path = builder.build.src.join(\"tests/rustdoc-gui/src\");\n-        // We generate docs for the libraries present in the rustdoc-gui's src folder.\n-        for entry in src_path.read_dir().expect(\"read_dir call failed\") {\n-            if let Ok(entry) = entry {\n-                let path = entry.path();\n+        if let Some(src) = builder.config.src.to_str() {\n+            cmd.arg(\"--rust-src\").arg(src);\n+        }\n \n-                if !path.is_dir() {\n-                    continue;\n-                }\n+        if let Some(out_dir) = out_dir.to_str() {\n+            cmd.arg(\"--out-dir\").arg(out_dir);\n+        }\n \n-                let mut cargo = Command::new(&builder.initial_cargo);\n-                cargo\n-                    .arg(\"doc\")\n-                    .arg(\"--target-dir\")\n-                    .arg(&out_dir)\n-                    .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-                    .env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n-                    .env(\"RUSTC\", builder.rustc(self.compiler))\n-                    .current_dir(path);\n-                // FIXME: implement a `// compile-flags` command or similar\n-                //        instead of hard-coding this test\n-                if entry.file_name() == \"link_to_definition\" {\n-                    cargo.env(\"RUSTDOCFLAGS\", \"-Zunstable-options --generate-link-to-definition\");\n-                } else if entry.file_name() == \"scrape_examples\" {\n-                    cargo.arg(\"-Zrustdoc-scrape-examples\");\n-                } else if entry.file_name() == \"extend_css\" {\n-                    cargo.env(\"RUSTDOCFLAGS\", &format!(\"--extend-css extra.css\"));\n-                }\n-                builder.run(&mut cargo);\n-            }\n+        if let Some(initial_cargo) = builder.config.initial_cargo.to_str() {\n+            cmd.arg(\"--initial-cargo\").arg(initial_cargo);\n         }\n \n-        // We now run GUI tests.\n-        let mut command = Command::new(&nodejs);\n-        command\n-            .arg(builder.build.src.join(\"src/tools/rustdoc-gui/tester.js\"))\n-            .arg(\"--jobs\")\n-            .arg(&builder.jobs().to_string())\n-            .arg(\"--doc-folder\")\n-            .arg(out_dir.join(\"doc\"))\n-            .arg(\"--tests-folder\")\n-            .arg(builder.build.src.join(\"tests/rustdoc-gui\"));\n+        cmd.arg(\"--jobs\").arg(builder.jobs().to_string());\n+\n+        cmd.env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n+            .env(\"RUSTC\", builder.rustc(self.compiler));\n+\n         for path in &builder.paths {\n             if let Some(p) = util::is_valid_test_suite_arg(path, \"tests/rustdoc-gui\", builder) {\n                 if !p.ends_with(\".goml\") {\n                     eprintln!(\"A non-goml file was given: `{}`\", path.display());\n                     panic!(\"Cannot run rustdoc-gui tests\");\n                 }\n                 if let Some(name) = path.file_name().and_then(|f| f.to_str()) {\n-                    command.arg(\"--file\").arg(name);\n+                    cmd.arg(\"--goml-file\").arg(name);\n                 }\n             }\n         }\n+\n         for test_arg in builder.config.test_args() {\n-            command.arg(test_arg);\n+            cmd.arg(\"--test-arg\").arg(test_arg);\n         }\n-        builder.run(&mut command);\n+\n+        if let Some(ref nodejs) = builder.config.nodejs {\n+            cmd.arg(\"--nodejs\").arg(nodejs);\n+        }\n+\n+        if let Some(ref npm) = builder.config.npm {\n+            cmd.arg(\"--npm\").arg(npm);\n+        }\n+\n+        let _time = util::timeit(&builder);\n+        crate::render_tests::try_run_tests(builder, &mut cmd);\n     }\n }\n "}, {"sha": "b3791efaf58cfc43a601d1f5e03066eb854a3178", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28a63bdf0f18057f0c4be578eb10c7dcc7929de/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28a63bdf0f18057f0c4be578eb10c7dcc7929de/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=f28a63bdf0f18057f0c4be578eb10c7dcc7929de", "patch": "@@ -302,6 +302,7 @@ bootstrap_tool!(\n     GenerateCopyright, \"src/tools/generate-copyright\", \"generate-copyright\";\n     SuggestTests, \"src/tools/suggest-tests\", \"suggest-tests\";\n     GenerateWindowsSys, \"src/tools/generate-windows-sys\", \"generate-windows-sys\";\n+    RustdocGUITest, \"src/tools/rustdoc-gui-test\", \"rustdoc-gui-test\", is_unstable_tool = true, allow_features = \"test\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}]}