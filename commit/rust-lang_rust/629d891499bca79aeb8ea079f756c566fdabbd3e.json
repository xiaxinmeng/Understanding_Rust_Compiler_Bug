{"sha": "629d891499bca79aeb8ea079f756c566fdabbd3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOWQ4OTE0OTliY2E3OWFlYjhlYTA3OWY3NTZjNTY2ZmRhYmJkM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-19T00:56:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-19T00:56:21Z"}, "message": "Auto merge of #52486 - kennytm:rollup, r=kennytm\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #51628 (use checked write in `LineWriter` example)\n - #52116 (Handle array manually in str case conversion methods)\n - #52218 (Amend option.take examples)\n - #52418 (Do not use desugared ident when suggesting adding a type)\n - #52439 (Revert some changes from #51917 to fix custom libdir)\n - #52455 (Fix doc comment: use `?` instead of `.unwrap()`)\n - #52458 (rustc: Fix a suggestion for the `proc_macro` feature)\n - #52464 (Allow clippy to be installed with make install)\n - #52472 (rustc: Enable `use_extern_macros` in 2018 edition)\n - #52477 (Clarify short-circuiting behvaior of Iterator::zip.)\n - #52480 (Cleanup #24958)\n - #52487 (Don't build twice the sanitizers on Linux)\n - #52510 (rustdoc: remove FIXME about macro redirects)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "57437d0b26123c42852dd692743584fcb35a631d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57437d0b26123c42852dd692743584fcb35a631d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/629d891499bca79aeb8ea079f756c566fdabbd3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/629d891499bca79aeb8ea079f756c566fdabbd3e", "html_url": "https://github.com/rust-lang/rust/commit/629d891499bca79aeb8ea079f756c566fdabbd3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/629d891499bca79aeb8ea079f756c566fdabbd3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166795dda66ce8132e2686923704d6bdcb5c2bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/166795dda66ce8132e2686923704d6bdcb5c2bc3", "html_url": "https://github.com/rust-lang/rust/commit/166795dda66ce8132e2686923704d6bdcb5c2bc3"}, {"sha": "ae9c550415f639791e83b4b058c69f2842a4ff5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9c550415f639791e83b4b058c69f2842a4ff5c", "html_url": "https://github.com/rust-lang/rust/commit/ae9c550415f639791e83b4b058c69f2842a4ff5c"}], "stats": {"total": 195, "additions": 153, "deletions": 42}, "files": [{"sha": "a54e58665cceb8177b936b6744c0bfe50537e683", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     };\n \n     let mut dylib_path = bootstrap::util::dylib_path();\n-    dylib_path.insert(0, PathBuf::from(libdir));\n+    dylib_path.insert(0, PathBuf::from(libdir.clone()));\n \n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n@@ -69,6 +69,7 @@ fn main() {\n \n     if verbose > 1 {\n         eprintln!(\"rustdoc command: {:?}\", cmd);\n+        eprintln!(\"libdir: {:?}\", libdir);\n     }\n \n     std::process::exit(match cmd.status() {"}, {"sha": "c67787b5b0ae5e70147c09ef1741c92a4fffc8e3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -459,6 +459,7 @@ impl<'a> Builder<'a> {\n                 dist::Cargo,\n                 dist::Rls,\n                 dist::Rustfmt,\n+                dist::Clippy,\n                 dist::LlvmTools,\n                 dist::Extended,\n                 dist::HashSign\n@@ -469,6 +470,7 @@ impl<'a> Builder<'a> {\n                 install::Cargo,\n                 install::Rls,\n                 install::Rustfmt,\n+                install::Clippy,\n                 install::Analysis,\n                 install::Src,\n                 install::Rustc\n@@ -825,7 +827,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n         if cmd != \"build\" && cmd != \"check\" && want_rustdoc {\n-            cargo.env(\"RUSTDOC_LIBDIR\", &libdir);\n+            cargo.env(\"RUSTDOC_LIBDIR\", self.sysroot_libdir(compiler, self.config.build));\n         }\n \n         if mode.is_tool() {"}, {"sha": "00e5dee256eebc4c2d4f993b6a60500434941cb1", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -15,6 +15,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::time::{SystemTime, UNIX_EPOCH};\n use std::{env, fs};\n+use std::thread;\n \n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n@@ -181,7 +182,9 @@ pub struct NativeLibBoilerplate {\n \n impl Drop for NativeLibBoilerplate {\n     fn drop(&mut self) {\n-        t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n+        if !thread::panicking() {\n+            t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n+        }\n     }\n }\n \n@@ -225,24 +228,34 @@ pub fn native_lib_boilerplate(\n     }\n }\n \n-pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoilerplate, ()> {\n-    let (link_name, search_path) = match &*env::var(\"TARGET\").unwrap() {\n+pub fn sanitizer_lib_boilerplate(sanitizer_name: &str)\n+    -> Result<(NativeLibBoilerplate, String), ()>\n+{\n+    let (link_name, search_path, dynamic) = match &*env::var(\"TARGET\").unwrap() {\n         \"x86_64-unknown-linux-gnu\" => (\n             format!(\"clang_rt.{}-x86_64\", sanitizer_name),\n             \"build/lib/linux\",\n+            false,\n         ),\n         \"x86_64-apple-darwin\" => (\n-            format!(\"dylib=clang_rt.{}_osx_dynamic\", sanitizer_name),\n+            format!(\"clang_rt.{}_osx_dynamic\", sanitizer_name),\n             \"build/lib/darwin\",\n+            true,\n         ),\n         _ => return Err(()),\n     };\n-    native_lib_boilerplate(\n+    let to_link = if dynamic {\n+        format!(\"dylib={}\", link_name)\n+    } else {\n+        format!(\"static={}\", link_name)\n+    };\n+    let lib = native_lib_boilerplate(\n         \"libcompiler_builtins/compiler-rt\",\n         sanitizer_name,\n-        &link_name,\n+        &to_link,\n         search_path,\n-    )\n+    )?;\n+    Ok((lib, link_name))\n }\n \n fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {"}, {"sha": "4d6434c378e82cb50c3119273626a527149303b9", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -45,6 +45,7 @@ use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n use core::ptr;\n use core::iter::FusedIterator;\n+use core::unicode::conversions;\n \n use borrow::{Borrow, ToOwned};\n use boxed::Box;\n@@ -369,7 +370,18 @@ impl str {\n                 // See https://github.com/rust-lang/rust/issues/26035\n                 map_uppercase_sigma(self, i, &mut s)\n             } else {\n-                s.extend(c.to_lowercase());\n+                match conversions::to_lower(c) {\n+                    [a, '\\0', _] => s.push(a),\n+                    [a, b, '\\0'] => {\n+                        s.push(a);\n+                        s.push(b);\n+                    }\n+                    [a, b, c] => {\n+                        s.push(a);\n+                        s.push(b);\n+                        s.push(c);\n+                    }\n+                }\n             }\n         }\n         return s;\n@@ -423,7 +435,20 @@ impl str {\n     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     pub fn to_uppercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n-        s.extend(self.chars().flat_map(|c| c.to_uppercase()));\n+        for c in self[..].chars() {\n+            match conversions::to_upper(c) {\n+                [a, '\\0', _] => s.push(a),\n+                [a, b, '\\0'] => {\n+                    s.push(a);\n+                    s.push(b);\n+                }\n+                [a, b, c] => {\n+                    s.push(a);\n+                    s.push(b);\n+                    s.push(c);\n+                }\n+            }\n+        }\n         return s;\n     }\n "}, {"sha": "afc273d265b9c0e89748a2de3ce534b21d75d8ec", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -384,7 +384,9 @@ pub trait Iterator {\n     ///\n     /// In other words, it zips two iterators together, into a single one.\n     ///\n-    /// If either iterator returns [`None`], [`next`] will return [`None`].\n+    /// If either iterator returns [`None`], [`next`] from the zipped iterator\n+    /// will return [`None`]. If the first iterator returns [`None`], `zip` will\n+    /// short-circuit and `next` will not be called on the second iterator.\n     ///\n     /// # Examples\n     ///"}, {"sha": "9f9dbd0777a14a1eda741a99881e94ced49de72a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -833,12 +833,14 @@ impl<T> Option<T> {\n     ///\n     /// ```\n     /// let mut x = Some(2);\n-    /// x.take();\n+    /// let y = x.take();\n     /// assert_eq!(x, None);\n+    /// assert_eq!(y, Some(2));\n     ///\n     /// let mut x: Option<u32> = None;\n-    /// x.take();\n+    /// let y = x.take();\n     /// assert_eq!(x, None);\n+    /// assert_eq!(y, None);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "e5cda880f8807044ce97d25f482f31c942b370b1", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -20,6 +20,9 @@ pub(crate) mod version;\n pub mod derived_property {\n     pub use unicode::tables::derived_property::{Case_Ignorable, Cased};\n }\n+pub mod conversions {\n+    pub use unicode::tables::conversions::{to_lower, to_upper};\n+}\n \n // For use in libsyntax\n pub mod property {"}, {"sha": "93fb282546bb05de85533dc1dc3c7cec3e06ce23", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -4011,8 +4011,12 @@ impl<'a> LoweringContext<'a> {\n                 let iter = self.str_to_ident(\"iter\");\n \n                 let next_ident = self.str_to_ident(\"__next\");\n+                let next_sp = self.allow_internal_unstable(\n+                    CompilerDesugaringKind::ForLoop,\n+                    head_sp,\n+                );\n                 let next_pat = self.pat_ident_binding_mode(\n-                    pat.span,\n+                    next_sp,\n                     next_ident,\n                     hir::BindingAnnotation::Mutable,\n                 );"}, {"sha": "c9ac6cdedbbc66fc882db6f3ee1e062351465b01", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -412,6 +412,7 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n     DotFill,\n     QuestionMark,\n     ExistentialReturnType,\n+    ForLoop,\n     Catch\n });\n "}, {"sha": "04d14f40b850b7867ffd9b7e9f098955159b09b2", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -13,6 +13,7 @@ use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use infer::InferCtxt;\n use infer::type_variable::TypeVariableOrigin;\n use ty::{self, Ty, TyInfer, TyVar};\n+use syntax::codemap::CompilerDesugaringKind;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n \n@@ -132,7 +133,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             labels.push((pattern.span, format!(\"consider giving this closure parameter a type\")));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n-                labels.push((pattern.span, format!(\"consider giving `{}` a type\", simple_ident)));\n+                match pattern.span.compiler_desugaring_kind() {\n+                    None => labels.push((pattern.span,\n+                                         format!(\"consider giving `{}` a type\", simple_ident))),\n+                    Some(CompilerDesugaringKind::ForLoop) => labels.push((\n+                        pattern.span,\n+                        \"the element type for this iterator is not specified\".to_string(),\n+                    )),\n+                    _ => {}\n+                }\n             } else {\n                 labels.push((pattern.span, format!(\"consider giving the pattern a type\")));\n             }"}, {"sha": "b8614c520e7cfa601857b4f6017d44a3e58ccdfe", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"asan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"asan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"asan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}, {"sha": "05e40cdceddda2847915cca54422d40401383e94", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"lsan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"lsan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"lsan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}, {"sha": "4abfc3585602fee0030e8183063b93e48de05f5a", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"msan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"msan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"msan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}, {"sha": "177e4ed8cf376d31a08d3f8530d798dd278c729c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -4521,7 +4521,7 @@ impl<'a> Resolver<'a> {\n                     attr::mark_known(attr);\n \n                     let msg = \"attribute procedural macros are experimental\";\n-                    let feature = \"proc_macro\";\n+                    let feature = \"use_extern_macros\";\n \n                     feature_err(&self.session.parse_sess, feature,\n                                 attr.span, GateIssue::Language, msg)"}, {"sha": "38595478c74337edde1bcc413704c37e190211b3", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"tsan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"tsan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"tsan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}, {"sha": "3070458d0beba1fb610266e3326b8385ec78076f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -1968,7 +1968,6 @@ impl Context {\n \n                 // If the item is a macro, redirect from the old macro URL (with !)\n                 // to the new one (without).\n-                // FIXME(#35705) remove this redirect.\n                 if item_type == ItemType::Macro {\n                     let redir_name = format!(\"{}.{}!.html\", item_type, name);\n                     let redir_dst = self.dst.join(redir_name);"}, {"sha": "189569683a9cf78fad5f243f5e33afc1057e48e3", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -738,7 +738,7 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// reducing the number of actual writes to the file.\n ///\n /// ```no_run\n-/// use std::fs::File;\n+/// use std::fs::{self, File};\n /// use std::io::prelude::*;\n /// use std::io::LineWriter;\n ///\n@@ -752,17 +752,30 @@ impl<W> fmt::Display for IntoInnerError<W> {\n ///     let file = File::create(\"poem.txt\")?;\n ///     let mut file = LineWriter::new(file);\n ///\n-///     for &byte in road_not_taken.iter() {\n-///        file.write(&[byte]).unwrap();\n-///     }\n+///     file.write_all(b\"I shall be telling this with a sigh\")?;\n+///\n+///     // No bytes are written until a newline is encountered (or\n+///     // the internal buffer is filled).\n+///     assert_eq!(fs::read_to_string(\"poem.txt\")?, \"\");\n+///     file.write_all(b\"\\n\")?;\n+///     assert_eq!(\n+///         fs::read_to_string(\"poem.txt\")?,\n+///         \"I shall be telling this with a sigh\\n\",\n+///     );\n ///\n-///     // let's check we did the right thing.\n-///     let mut file = File::open(\"poem.txt\")?;\n-///     let mut contents = String::new();\n+///     // Write the rest of the poem.\n+///     file.write_all(b\"Somewhere ages and ages hence:\n+/// Two roads diverged in a wood, and I -\n+/// I took the one less traveled by,\n+/// And that has made all the difference.\")?;\n ///\n-///     file.read_to_string(&mut contents)?;\n+///     // The last line of the poem doesn't end in a newline, so\n+///     // we have to flush or drop the `LineWriter` to finish\n+///     // writing.\n+///     file.flush()?;\n ///\n-///     assert_eq!(contents.as_bytes(), &road_not_taken[..]);\n+///     // Confirm the whole poem was written.\n+///     assert_eq!(fs::read(\"poem.txt\")?, &road_not_taken[..]);\n ///     Ok(())\n /// }\n /// ```\n@@ -862,7 +875,7 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// The internal buffer is written out before returning the writer.\n     ///\n-    // # Errors\n+    /// # Errors\n     ///\n     /// An `Err` will be returned if an error occurs while flushing the buffer.\n     ///"}, {"sha": "6b4bbdddf32df8e63fb40d2da12d986904935bb8", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -81,7 +81,7 @@ pub struct TcpStream(net_imp::TcpStream);\n /// }\n ///\n /// fn main() -> io::Result<()> {\n-///     let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+///     let listener = TcpListener::bind(\"127.0.0.1:80\")?;\n ///\n ///     // accept connections and process them serially\n ///     for stream in listener.incoming() {"}, {"sha": "84b5f9659b5aa1be1da0d019995e75311315b0a0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -284,7 +284,7 @@ declare_features! (\n     // Allows #[link(..., cfg(..))]\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n-    (active, use_extern_macros, \"1.15.0\", Some(35896), None),\n+    (active, use_extern_macros, \"1.15.0\", Some(35896), Some(Edition::Edition2018)),\n \n     // `extern \"ptx-*\" fn()`\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),"}, {"sha": "1531f030127e302516fe924b350571ac3d5e3675", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -602,6 +602,7 @@ pub enum CompilerDesugaringKind {\n     /// `impl Trait` with `Foo`.\n     ExistentialReturnType,\n     Async,\n+    ForLoop,\n }\n \n impl CompilerDesugaringKind {\n@@ -612,6 +613,7 @@ impl CompilerDesugaringKind {\n             CompilerDesugaringKind::QuestionMark => \"?\",\n             CompilerDesugaringKind::Catch => \"do catch\",\n             CompilerDesugaringKind::ExistentialReturnType => \"existential type\",\n+            CompilerDesugaringKind::ForLoop => \"for loop\",\n         })\n     }\n }"}, {"sha": "3ec8b048b12bfe5892609543d8305b265db40439", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -11,9 +11,6 @@\n // ignore-tidy-linelength\n // ignore-lldb\n // ignore-gdb // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n-// ignore-android: FIXME(#24958)\n-// ignore-arm: FIXME(#24958)\n-// ignore-aarch64: FIXME(#24958)\n \n // compile-flags:-g\n "}, {"sha": "a7a7ea7c69b69713083945f29d43a63def77d39a", "filename": "src/test/ui/issue-20261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fui%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fui%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20261.stderr?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-20261.rs:14:11\n    |\n LL |     for (ref i,) in [].iter() {\n-   |         -------- consider giving `__next` a type\n+   |                     --------- the element type for this iterator is not specified\n LL |         i.clone();\n    |           ^^^^^ cannot infer type for `_`\n    |"}, {"sha": "34217c6236c43e8db3634cb0696ec895917d7f55", "filename": "src/test/ui/issue-51116.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fui%2Fissue-51116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fui%2Fissue-51116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51116.rs?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let tiles = Default::default();\n+    for row in &mut tiles {\n+        for tile in row {\n+            //~^ NOTE the element type for this iterator is not specified\n+            *tile = 0;\n+            //~^ ERROR type annotations needed\n+            //~| NOTE cannot infer type for `_`\n+            //~| NOTE type must be known at this point\n+        }\n+    }\n+\n+    let tiles: [[usize; 3]; 3] = tiles;\n+}"}, {"sha": "0c38688340bf333641cad9ad7842b04e291941fc", "filename": "src/test/ui/issue-51116.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fui%2Fissue-51116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/629d891499bca79aeb8ea079f756c566fdabbd3e/src%2Ftest%2Fui%2Fissue-51116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51116.stderr?ref=629d891499bca79aeb8ea079f756c566fdabbd3e", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-51116.rs:16:13\n+   |\n+LL |         for tile in row {\n+   |                     --- the element type for this iterator is not specified\n+LL |             //~^ NOTE the element type for this iterator is not specified\n+LL |             *tile = 0;\n+   |             ^^^^^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}