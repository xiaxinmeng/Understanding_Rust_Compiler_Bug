{"sha": "fad295b299d9e93950c27acd6a12026d100185fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZDI5NWIyOTlkOWU5Mzk1MGMyN2FjZDZhMTIwMjZkMTAwMTg1ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T16:03:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T16:03:35Z"}, "message": "Auto merge of #87271 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nThis is an out-of-cycle Clippy update, to fix 3 ICEs before the release (This should be merged before beta is branched):\n\nrust-lang/rust-clippy#7470\nrust-lang/rust-clippy#7471\nrust-lang/rust-clippy#7473\n\ncc `@jackh726` `@JohnTitor` rust-lang/rust-clippy#7470 was caused by #86867. I saw the same ICE in the last rustup for Clippy though, so this might be a more general problem. Is there something we should check before calling `layout_of`? Should we always check for `ty.has_escaping_bound_vars()` before calling `layout_of`? Or is this overkill?\n\nr? `@Manishearth`", "tree": {"sha": "691f8ee832c7ecdb967f387408a6cb52784b2b9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/691f8ee832c7ecdb967f387408a6cb52784b2b9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad295b299d9e93950c27acd6a12026d100185fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad295b299d9e93950c27acd6a12026d100185fe", "html_url": "https://github.com/rust-lang/rust/commit/fad295b299d9e93950c27acd6a12026d100185fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad295b299d9e93950c27acd6a12026d100185fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b543e0dc03193cde5538099e3996b23aeacb8eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/b543e0dc03193cde5538099e3996b23aeacb8eca", "html_url": "https://github.com/rust-lang/rust/commit/b543e0dc03193cde5538099e3996b23aeacb8eca"}, {"sha": "b10966be750994a5c5664f7e02aa3f4a52e723d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10966be750994a5c5664f7e02aa3f4a52e723d2", "html_url": "https://github.com/rust-lang/rust/commit/b10966be750994a5c5664f7e02aa3f4a52e723d2"}], "stats": {"total": 766, "additions": 468, "deletions": 298}, "files": [{"sha": "5e00dec2e775f064b31ffd75dd2054e7c4366294", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -2772,6 +2772,7 @@ Released 2018-09-13\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`self_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment\n+[`self_named_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructor\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "17ce3cd809f6fcb9e88618b955750b5fd9372516", "filename": "src/tools/clippy/clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 28, "deletions": 65, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::implements_trait;\n-use clippy_utils::{eq_expr_value, get_trait_def_id, trait_ref_of_method};\n-use clippy_utils::{higher, paths, sugg};\n+use clippy_utils::{binop_traits, sugg};\n+use clippy_utils::{eq_expr_value, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -85,71 +85,34 @@ impl<'tcx> LateLintPass<'tcx> for AssignOps {\n                     let lint = |assignee: &hir::Expr<'_>, rhs: &hir::Expr<'_>| {\n                         let ty = cx.typeck_results().expr_ty(assignee);\n                         let rty = cx.typeck_results().expr_ty(rhs);\n-                        macro_rules! ops {\n-                            ($op:expr,\n-                             $cx:expr,\n-                             $ty:expr,\n-                             $rty:expr,\n-                             $($trait_name:ident),+) => {\n-                                match $op {\n-                                    $(hir::BinOpKind::$trait_name => {\n-                                        let [krate, module] = paths::OPS_MODULE;\n-                                        let path: [&str; 3] = [krate, module, concat!(stringify!($trait_name), \"Assign\")];\n-                                        let trait_id = if let Some(trait_id) = get_trait_def_id($cx, &path) {\n-                                            trait_id\n-                                        } else {\n-                                            return; // useless if the trait doesn't exist\n-                                        };\n-                                        // check that we are not inside an `impl AssignOp` of this exact operation\n-                                        let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id);\n-                                        if_chain! {\n-                                            if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n-                                            if trait_ref.path.res.def_id() == trait_id;\n-                                            then { return; }\n+                        if_chain! {\n+                            if let Some((_, lang_item)) = binop_traits(op.node);\n+                            if let Ok(trait_id) = cx.tcx.lang_items().require(lang_item);\n+                            let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id);\n+                            if trait_ref_of_method(cx, parent_fn)\n+                                .map_or(true, |t| t.path.res.def_id() != trait_id);\n+                            if implements_trait(cx, ty, trait_id, &[rty.into()]);\n+                            then {\n+                                span_lint_and_then(\n+                                    cx,\n+                                    ASSIGN_OP_PATTERN,\n+                                    expr.span,\n+                                    \"manual implementation of an assign operation\",\n+                                    |diag| {\n+                                        if let (Some(snip_a), Some(snip_r)) =\n+                                            (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n+                                        {\n+                                            diag.span_suggestion(\n+                                                expr.span,\n+                                                \"replace it with\",\n+                                                format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                                Applicability::MachineApplicable,\n+                                            );\n                                         }\n-                                        implements_trait($cx, $ty, trait_id, &[$rty])\n-                                    },)*\n-                                    _ => false,\n-                                }\n+                                    },\n+                                );\n                             }\n                         }\n-                        if ops!(\n-                            op.node,\n-                            cx,\n-                            ty,\n-                            rty.into(),\n-                            Add,\n-                            Sub,\n-                            Mul,\n-                            Div,\n-                            Rem,\n-                            And,\n-                            Or,\n-                            BitAnd,\n-                            BitOr,\n-                            BitXor,\n-                            Shr,\n-                            Shl\n-                        ) {\n-                            span_lint_and_then(\n-                                cx,\n-                                ASSIGN_OP_PATTERN,\n-                                expr.span,\n-                                \"manual implementation of an assign operation\",\n-                                |diag| {\n-                                    if let (Some(snip_a), Some(snip_r)) =\n-                                        (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n-                                    {\n-                                        diag.span_suggestion(\n-                                            expr.span,\n-                                            \"replace it with\",\n-                                            format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n-                                            Applicability::MachineApplicable,\n-                                        );\n-                                    }\n-                                },\n-                            );\n-                        }\n                     };\n \n                     let mut visitor = ExprVisitor {\n@@ -206,7 +169,7 @@ fn lint_misrefactored_assign_op(\n             if let (Some(snip_a), Some(snip_r)) = (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs_other.span)) {\n                 let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n                 let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n-                let long = format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n+                let long = format!(\"{} = {}\", snip_a, sugg::make_binop(op.node.into(), a, r));\n                 diag.span_suggestion(\n                     expr.span,\n                     &format!("}, {"sha": "d39cabfb2825beb141d1afacd5cecde3b087866d", "filename": "src/tools/clippy/clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n             if macro_with_not_op(&left.kind) || macro_with_not_op(&right.kind) {\n                 return;\n             }\n-            if is_useless_with_eq_exprs(higher::binop(op.node)) && eq_expr_value(cx, left, right) {\n+            if is_useless_with_eq_exprs(op.node.into()) && eq_expr_value(cx, left, right) {\n                 span_lint(\n                     cx,\n                     EQ_OP,"}, {"sha": "aa763b5c5e666f9120e067c2d151d4a93f3a9fc6", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -330,6 +330,7 @@ mod regex;\n mod repeat_once;\n mod returns;\n mod self_assignment;\n+mod self_named_constructor;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n@@ -900,6 +901,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         self_assignment::SELF_ASSIGNMENT,\n+        self_named_constructor::SELF_NAMED_CONSTRUCTOR,\n         semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n         serde_api::SERDE_API_MISUSE,\n         shadow::SHADOW_REUSE,\n@@ -1406,6 +1408,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(returns::LET_AND_RETURN),\n         LintId::of(returns::NEEDLESS_RETURN),\n         LintId::of(self_assignment::SELF_ASSIGNMENT),\n+        LintId::of(self_named_constructor::SELF_NAMED_CONSTRUCTOR),\n         LintId::of(serde_api::SERDE_API_MISUSE),\n         LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n@@ -1559,6 +1562,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(returns::LET_AND_RETURN),\n         LintId::of(returns::NEEDLESS_RETURN),\n+        LintId::of(self_named_constructor::SELF_NAMED_CONSTRUCTOR),\n         LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n@@ -2101,6 +2105,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let scripts = conf.allowed_scripts.clone();\n     store.register_early_pass(move || box disallowed_script_idents::DisallowedScriptIdents::new(&scripts));\n     store.register_late_pass(|| box strlen_on_c_strings::StrlenOnCStrings);\n+    store.register_late_pass(move || box self_named_constructor::SelfNamedConstructor);\n }\n \n #[rustfmt::skip]"}, {"sha": "66e3d957894173317445026cbc24a76f9d50b095", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -721,7 +721,7 @@ fn check_single_match_single_pattern(\n     expr: &Expr<'_>,\n     els: Option<&Expr<'_>>,\n ) {\n-    if is_wild(&arms[1].pat) {\n+    if is_wild(arms[1].pat) {\n         report_single_match_single_pattern(cx, ex, arms, expr, els);\n     }\n }\n@@ -1287,7 +1287,7 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n         if let Some((b1_arm, b0_arms)) = arms.split_last();\n         if let Some(b0) = find_bool_lit(&b0_arms[0].body.kind, desugared);\n         if let Some(b1) = find_bool_lit(&b1_arm.body.kind, desugared);\n-        if is_wild(&b1_arm.pat);\n+        if is_wild(b1_arm.pat);\n         if b0 != b1;\n         let if_guard = &b0_arms[0].guard;\n         if if_guard.is_none() || b0_arms.len() == 1;"}, {"sha": "da991e1d90c8e0770532099329f557450cee558a", "filename": "src/tools/clippy/clippy_lints/src/self_named_constructor.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructor.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -0,0 +1,91 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::return_ty;\n+use clippy_utils::ty::{contains_adt_constructor, contains_ty};\n+use rustc_hir::{Impl, ImplItem, ImplItemKind, ItemKind, Node};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns when constructors have the same name as their types.\n+    ///\n+    /// **Why is this bad?** Repeating the name of the type is redundant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// struct Foo {}\n+    ///\n+    /// impl Foo {\n+    ///     pub fn foo() -> Foo {\n+    ///         Foo {}\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// struct Foo {}\n+    ///\n+    /// impl Foo {\n+    ///     pub fn new() -> Foo {\n+    ///         Foo {}\n+    ///     }\n+    /// }\n+    /// ```\n+    pub SELF_NAMED_CONSTRUCTOR,\n+    style,\n+    \"method should not have the same name as the type it is implemented for\"\n+}\n+\n+declare_lint_pass!(SelfNamedConstructor => [SELF_NAMED_CONSTRUCTOR]);\n+\n+impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructor {\n+    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n+        match impl_item.kind {\n+            ImplItemKind::Fn(ref sig, _) => {\n+                if sig.decl.implicit_self.has_implicit_self() {\n+                    return;\n+                }\n+            },\n+            _ => return,\n+        }\n+\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let item = cx.tcx.hir().expect_item(parent);\n+        let self_ty = cx.tcx.type_of(item.def_id);\n+        let ret_ty = return_ty(cx, impl_item.hir_id());\n+\n+        // Do not check trait impls\n+        if matches!(item.kind, ItemKind::Impl(Impl { of_trait: Some(_), .. })) {\n+            return;\n+        }\n+\n+        // Ensure method is constructor-like\n+        if let Some(self_adt) = self_ty.ty_adt_def() {\n+            if !contains_adt_constructor(ret_ty, self_adt) {\n+                return;\n+            }\n+        } else if !contains_ty(ret_ty, self_ty) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let Some(self_def) = self_ty.ty_adt_def();\n+            if let Some(self_local_did) = self_def.did.as_local();\n+            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n+            if let Some(Node::Item(x)) = cx.tcx.hir().find(self_id);\n+            let type_name = x.ident.name.as_str().to_lowercase();\n+            if impl_item.ident.name.as_str() == type_name || impl_item.ident.name.as_str().replace(\"_\", \"\") == type_name;\n+\n+            then {\n+                span_lint(\n+                    cx,\n+                    SELF_NAMED_CONSTRUCTOR,\n+                    impl_item.span,\n+                    &format!(\"constructor `{}` has the same name as the type\", impl_item.ident.name),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "f2bffd553210b1d5d0c531543a60a7b02b286bd9", "filename": "src/tools/clippy/clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 28, "deletions": 115, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{get_trait_def_id, paths, trait_ref_of_method};\n+use clippy_utils::{binop_traits, trait_ref_of_method, BINOP_TRAITS, OP_ASSIGN_TRAITS};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -55,135 +55,48 @@ declare_lint_pass!(SuspiciousImpl => [SUSPICIOUS_ARITHMETIC_IMPL, SUSPICIOUS_OP_\n \n impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if let hir::ExprKind::Binary(binop, _, _) | hir::ExprKind::AssignOp(binop, ..) = expr.kind {\n-            match binop.node {\n-                hir::BinOpKind::Eq\n-                | hir::BinOpKind::Lt\n-                | hir::BinOpKind::Le\n-                | hir::BinOpKind::Ne\n-                | hir::BinOpKind::Ge\n-                | hir::BinOpKind::Gt => return,\n-                _ => {},\n-            }\n+        if_chain! {\n+            if let hir::ExprKind::Binary(binop, _, _) | hir::ExprKind::AssignOp(binop, ..) = expr.kind;\n+            if let Some((binop_trait_lang, op_assign_trait_lang)) = binop_traits(binop.node);\n+            if let Ok(binop_trait_id) = cx.tcx.lang_items().require(binop_trait_lang);\n+            if let Ok(op_assign_trait_id) = cx.tcx.lang_items().require(op_assign_trait_lang);\n \n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n             let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n-            if_chain! {\n-                if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get(parent_fn);\n-                if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n-                then {\n-                    let body = cx.tcx.hir().body(body_id);\n-                    let mut visitor = BinaryExprVisitor { nb_binops: 0 };\n-                    walk_expr(&mut visitor, &body.value);\n-                    if visitor.nb_binops > 1 {\n-                        return;\n-                    }\n-                }\n-            }\n-\n-            if let Some(impl_trait) = check_binop(\n-                cx,\n-                expr,\n-                binop.node,\n-                &[\n-                    \"Add\", \"Sub\", \"Mul\", \"Div\", \"Rem\", \"BitAnd\", \"BitOr\", \"BitXor\", \"Shl\", \"Shr\",\n-                ],\n-                &[\n-                    hir::BinOpKind::Add,\n-                    hir::BinOpKind::Sub,\n-                    hir::BinOpKind::Mul,\n-                    hir::BinOpKind::Div,\n-                    hir::BinOpKind::Rem,\n-                    hir::BinOpKind::BitAnd,\n-                    hir::BinOpKind::BitOr,\n-                    hir::BinOpKind::BitXor,\n-                    hir::BinOpKind::Shl,\n-                    hir::BinOpKind::Shr,\n-                ],\n-            ) {\n-                span_lint(\n-                    cx,\n-                    SUSPICIOUS_ARITHMETIC_IMPL,\n-                    binop.span,\n-                    &format!(\"suspicious use of binary operator in `{}` impl\", impl_trait),\n-                );\n-            }\n-\n-            if let Some(impl_trait) = check_binop(\n-                cx,\n-                expr,\n-                binop.node,\n-                &[\n-                    \"AddAssign\",\n-                    \"SubAssign\",\n-                    \"MulAssign\",\n-                    \"DivAssign\",\n-                    \"BitAndAssign\",\n-                    \"BitOrAssign\",\n-                    \"BitXorAssign\",\n-                    \"RemAssign\",\n-                    \"ShlAssign\",\n-                    \"ShrAssign\",\n-                ],\n-                &[\n-                    hir::BinOpKind::Add,\n-                    hir::BinOpKind::Sub,\n-                    hir::BinOpKind::Mul,\n-                    hir::BinOpKind::Div,\n-                    hir::BinOpKind::BitAnd,\n-                    hir::BinOpKind::BitOr,\n-                    hir::BinOpKind::BitXor,\n-                    hir::BinOpKind::Rem,\n-                    hir::BinOpKind::Shl,\n-                    hir::BinOpKind::Shr,\n-                ],\n-            ) {\n+            if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get(parent_fn);\n+            if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n+            let body = cx.tcx.hir().body(body_id);\n+            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n+            if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n+            let trait_id = trait_ref.path.res.def_id();\n+            if ![binop_trait_id, op_assign_trait_id].contains(&trait_id);\n+            if let Some(&(_, lint)) = [\n+                (&BINOP_TRAITS, SUSPICIOUS_ARITHMETIC_IMPL),\n+                (&OP_ASSIGN_TRAITS, SUSPICIOUS_OP_ASSIGN_IMPL),\n+            ]\n+                .iter()\n+                .find(|&(ts, _)| ts.iter().any(|&t| Ok(trait_id) == cx.tcx.lang_items().require(t)));\n+            if count_binops(&body.value) == 1;\n+            then {\n                 span_lint(\n                     cx,\n-                    SUSPICIOUS_OP_ASSIGN_IMPL,\n+                    lint,\n                     binop.span,\n-                    &format!(\"suspicious use of binary operator in `{}` impl\", impl_trait),\n+                    &format!(\"suspicious use of `{}` in `{}` impl\", binop.node.as_str(), cx.tcx.item_name(trait_id)),\n                 );\n             }\n         }\n     }\n }\n \n-fn check_binop(\n-    cx: &LateContext<'_>,\n-    expr: &hir::Expr<'_>,\n-    binop: hir::BinOpKind,\n-    traits: &[&'static str],\n-    expected_ops: &[hir::BinOpKind],\n-) -> Option<&'static str> {\n-    let mut trait_ids = vec![];\n-    let [krate, module] = paths::OPS_MODULE;\n-\n-    for &t in traits {\n-        let path = [krate, module, t];\n-        if let Some(trait_id) = get_trait_def_id(cx, &path) {\n-            trait_ids.push(trait_id);\n-        } else {\n-            return None;\n-        }\n-    }\n-\n-    // Get the actually implemented trait\n-    let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n-\n-    if_chain! {\n-        if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n-        if let Some(idx) = trait_ids.iter().position(|&tid| tid == trait_ref.path.res.def_id());\n-        if binop != expected_ops[idx];\n-        then{\n-            return Some(traits[idx])\n-        }\n-    }\n-\n-    None\n+fn count_binops(expr: &hir::Expr<'_>) -> u32 {\n+    let mut visitor = BinaryExprVisitor::default();\n+    visitor.visit_expr(expr);\n+    visitor.nb_binops\n }\n \n+#[derive(Default)]\n struct BinaryExprVisitor {\n     nb_binops: u32,\n }"}, {"sha": "053bbc9aea67433ddf6c83d1cecf141a319b946c", "filename": "src/tools/clippy/clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Adt, Ty};\n+use rustc_middle::ty::{Adt, Ty, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n use rustc_target::abi::LayoutOf as _;\n@@ -52,6 +52,9 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n             if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP);\n             if let Adt(_, substs) = ty.kind();\n             let ty = substs.type_at(1);\n+            // Fixes https://github.com/rust-lang/rust-clippy/issues/7447 because of\n+            // https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/sty.rs#L968\n+            if !ty.has_escaping_bound_vars();\n             // Do this to prevent `layout_of` crashing, being unable to fully normalize `ty`.\n             if is_normalizable(cx, cx.param_env, ty);\n             if let Ok(layout) = cx.layout_of(ty);"}, {"sha": "f32f1109b08e64ec963dea3b653f120e816d0f0d", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -11,31 +11,6 @@ use rustc_hir::{BorrowKind, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::{sym, ExpnKind, Span, Symbol};\n \n-/// Converts a hir binary operator to the corresponding `ast` type.\n-#[must_use]\n-pub fn binop(op: hir::BinOpKind) -> ast::BinOpKind {\n-    match op {\n-        hir::BinOpKind::Eq => ast::BinOpKind::Eq,\n-        hir::BinOpKind::Ge => ast::BinOpKind::Ge,\n-        hir::BinOpKind::Gt => ast::BinOpKind::Gt,\n-        hir::BinOpKind::Le => ast::BinOpKind::Le,\n-        hir::BinOpKind::Lt => ast::BinOpKind::Lt,\n-        hir::BinOpKind::Ne => ast::BinOpKind::Ne,\n-        hir::BinOpKind::Or => ast::BinOpKind::Or,\n-        hir::BinOpKind::Add => ast::BinOpKind::Add,\n-        hir::BinOpKind::And => ast::BinOpKind::And,\n-        hir::BinOpKind::BitAnd => ast::BinOpKind::BitAnd,\n-        hir::BinOpKind::BitOr => ast::BinOpKind::BitOr,\n-        hir::BinOpKind::BitXor => ast::BinOpKind::BitXor,\n-        hir::BinOpKind::Div => ast::BinOpKind::Div,\n-        hir::BinOpKind::Mul => ast::BinOpKind::Mul,\n-        hir::BinOpKind::Rem => ast::BinOpKind::Rem,\n-        hir::BinOpKind::Shl => ast::BinOpKind::Shl,\n-        hir::BinOpKind::Shr => ast::BinOpKind::Shr,\n-        hir::BinOpKind::Sub => ast::BinOpKind::Sub,\n-    }\n-}\n-\n /// Represent a range akin to `ast::ExprKind::Range`.\n #[derive(Debug, Copy, Clone)]\n pub struct Range<'a> {"}, {"sha": "00db52a9457d85d50b30fb15da254764a55aa835", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -909,12 +909,8 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n     if is_integer_literal(e, value) {\n         return true;\n     }\n-    let map = cx.tcx.hir();\n-    let parent_item = map.get_parent_item(e.hir_id);\n-    if let Some((Constant::Int(v), _)) = map\n-        .maybe_body_owned_by(parent_item)\n-        .and_then(|body_id| constant(cx, cx.tcx.typeck_body(body_id), e))\n-    {\n+    let enclosing_body = cx.tcx.hir().local_def_id(cx.tcx.hir().enclosing_body_owner(e.hir_id));\n+    if let Some((Constant::Int(v), _)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n         value == v\n     } else {\n         false\n@@ -1041,18 +1037,14 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         PatKind::Struct(ref qpath, fields, _) => {\n             is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n         },\n-        PatKind::TupleStruct(ref qpath, pats, _) => {\n-            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats)\n-        },\n+        PatKind::TupleStruct(ref qpath, pats, _) => is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats),\n         PatKind::Slice(head, middle, tail) => {\n             match &cx.typeck_results().node_type(pat.hir_id).kind() {\n                 rustc_ty::Slice(..) => {\n                     // [..] is the only irrefutable slice pattern.\n                     !head.is_empty() || middle.is_none() || !tail.is_empty()\n                 },\n-                rustc_ty::Array(..) => {\n-                    are_refutable(cx, head.iter().chain(middle).chain(tail.iter()))\n-                },\n+                rustc_ty::Array(..) => are_refutable(cx, head.iter().chain(middle).chain(tail.iter())),\n                 _ => {\n                     // unreachable!()\n                     true\n@@ -1710,3 +1702,34 @@ pub fn is_test_module_or_function(tcx: TyCtxt<'_>, item: &Item<'_>) -> bool {\n \n     matches!(item.kind, ItemKind::Mod(..)) && item.ident.name.as_str().contains(\"test\")\n }\n+\n+macro_rules! op_utils {\n+    ($($name:ident $assign:ident)*) => {\n+        /// Binary operation traits like `LangItem::Add`\n+        pub static BINOP_TRAITS: &[LangItem] = &[$(LangItem::$name,)*];\n+\n+        /// Operator-Assign traits like `LangItem::AddAssign`\n+        pub static OP_ASSIGN_TRAITS: &[LangItem] = &[$(LangItem::$assign,)*];\n+\n+        /// Converts `BinOpKind::Add` to `(LangItem::Add, LangItem::AddAssign)`, for example\n+        pub fn binop_traits(kind: hir::BinOpKind) -> Option<(LangItem, LangItem)> {\n+            match kind {\n+                $(hir::BinOpKind::$name => Some((LangItem::$name, LangItem::$assign)),)*\n+                _ => None,\n+            }\n+        }\n+    };\n+}\n+\n+op_utils! {\n+    Add    AddAssign\n+    Sub    SubAssign\n+    Mul    MulAssign\n+    Div    DivAssign\n+    Rem    RemAssign\n+    BitXor BitXorAssign\n+    BitAnd BitAndAssign\n+    BitOr  BitOrAssign\n+    Shl    ShlAssign\n+    Shr    ShrAssign\n+}"}, {"sha": "3bd75b10e90588d45f47832a08e0ea6851737398", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -154,7 +154,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Err => Sugg::NonParen(snippet),\n             hir::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n             hir::ExprKind::AssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),\n-            hir::ExprKind::Binary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(higher::binop(op.node)), snippet),\n+            hir::ExprKind::Binary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(op.node.into()), snippet),\n             hir::ExprKind::Cast(..) => Sugg::BinOp(AssocOp::As, snippet),\n             hir::ExprKind::Type(..) => Sugg::BinOp(AssocOp::Colon, snippet),\n         }"}, {"sha": "523d55219ab6919fac1f8208c7fc739f8f98fc58", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -257,10 +257,12 @@ pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symb\n     }\n }\n \n-/// Checks if the type is equal to a lang item\n+/// Checks if the type is equal to a lang item.\n+///\n+/// Returns `false` if the `LangItem` is not defined.\n pub fn is_type_lang_item(cx: &LateContext<'_>, ty: Ty<'_>, lang_item: hir::LangItem) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => cx.tcx.lang_items().require(lang_item).unwrap() == adt.did,\n+        ty::Adt(adt, _) => cx.tcx.lang_items().require(lang_item).map_or(false, |li| li == adt.did),\n         _ => false,\n     }\n }"}, {"sha": "43d3792f5952125a80cb1eccb4b9d35213301a60", "filename": "src/tools/clippy/doc/basics.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -14,6 +14,7 @@ the codebase take a look at [Adding Lints] or [Common Tools].\n   - [lintcheck](#lintcheck)\n   - [PR](#pr)\n   - [Common Abbreviations](#common-abbreviations)\n+  - [Install from source](#install-from-source)\n \n ## Get the Code\n \n@@ -128,4 +129,45 @@ This is a concise list of abbreviations that can come up during Clippy developme\n general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n an abbreviation or meaning is unclear to you.\n \n+## Install from source\n+\n+If you are hacking on Clippy and want to install it from source, do the following:\n+\n+First, take note of the toolchain [override](https://rust-lang.github.io/rustup/overrides.html) in `/rust-toolchain`.\n+We will use this override to install Clippy into the right toolchain.\n+\n+> Tip: You can view the active toolchain for the current directory with `rustup show active-toolchain`.\n+\n+From the Clippy project root, run the following command to build the Clippy binaries and copy them into the\n+toolchain directory. This will override the currently installed Clippy component.\n+\n+```terminal\n+cargo build --release --bin cargo-clippy --bin clippy-driver -Zunstable-options --out-dir \"$(rustc --print=sysroot)/bin\"\n+```\n+\n+Now you may run `cargo clippy` in any project, using the toolchain where you just installed Clippy.\n+\n+```terminal\n+cd my-project\n+cargo +nightly-2021-07-01 clippy\n+```\n+\n+...or `clippy-driver`\n+\n+```terminal\n+clippy-driver +nightly-2021-07-01 <filename>\n+```\n+\n+If you need to restore the default Clippy installation, run the following (from the Clippy project root).\n+\n+```terminal\n+rustup component remove clippy\n+rustup component add clippy\n+```\n+\n+> **DO NOT** install using `cargo install --path . --force` since this will overwrite rustup\n+[proxies](https://rust-lang.github.io/rustup/concepts/proxies.html). That is, `~/.cargo/bin/cargo-clippy` and\n+`~/.cargo/bin/clippy-driver` should be hard or soft links to `~/.cargo/bin/rustup`. You can repair these by running\n+`rustup update`.\n+\n [glossary]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html"}, {"sha": "3a2005e787228e2b6ab961b7a4d977c3106b09bf", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-07-15\"\n+channel = \"nightly-2021-07-19\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "8d9a1af8ff1180b50e824588b55bbcddc0cb93ea", "filename": "src/tools/clippy/tests/ui/crashes/ice-6179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6179.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -7,7 +7,7 @@\n struct Foo {}\n \n impl Foo {\n-    fn foo() -> Self {\n+    fn new() -> Self {\n         impl Foo {\n             fn bar() {}\n         }"}, {"sha": "7d2351d606f138ffe11e37fdde7e208ccd17279f", "filename": "src/tools/clippy/tests/ui/crashes/ice-7340.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7340.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -0,0 +1,6 @@\n+#![allow(clippy::no_effect)]\n+\n+fn main() {\n+    const CONSTANT: usize = 8;\n+    [1; 1 % CONSTANT];\n+}"}, {"sha": "aaa422d88c3e05607afccf53e4184d6d5bf7596e", "filename": "src/tools/clippy/tests/ui/crashes/ice-7410.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7410.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7410.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7410.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -Clink-arg=-nostartfiles\n+// ignore-macos\n+// ignore-windows\n+\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+#![allow(clippy::redundant_pattern_matching)]\n+\n+use core::panic::PanicInfo;\n+\n+struct S;\n+\n+impl Drop for S {\n+    fn drop(&mut self) {}\n+}\n+\n+#[start]\n+fn main(argc: isize, argv: *const *const u8) -> isize {\n+    if let Some(_) = Some(S) {\n+    } else {\n+    }\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "fdb77f322579f27983782c571b5902f54a5aded7", "filename": "src/tools/clippy/tests/ui/issue-7447.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -0,0 +1,25 @@\n+use std::{borrow::Cow, collections::BTreeMap, marker::PhantomData, sync::Arc};\n+\n+fn byte_view<'a>(s: &'a ByteView<'_>) -> BTreeMap<&'a str, ByteView<'a>> {\n+    panic!()\n+}\n+\n+fn group_entries(s: &()) -> BTreeMap<Cow<'_, str>, Vec<Cow<'_, str>>> {\n+    todo!()\n+}\n+\n+struct Mmap;\n+\n+enum ByteViewBacking<'a> {\n+    Buf(Cow<'a, [u8]>),\n+    Mmap(Mmap),\n+}\n+\n+pub struct ByteView<'a> {\n+    backing: Arc<ByteViewBacking<'a>>,\n+}\n+\n+fn main() {\n+    byte_view(panic!());\n+    group_entries(panic!());\n+}"}, {"sha": "cc699b79e433ca39756717f16714487a05421da7", "filename": "src/tools/clippy/tests/ui/issue_4266.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_4266.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_4266.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_4266.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -25,7 +25,9 @@ async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {\n struct Foo;\n impl Foo {\n     // ok\n-    pub async fn foo(&mut self) {}\n+    pub async fn new(&mut self) -> Self {\n+        Foo {}\n+    }\n }\n \n // rust-lang/rust#61115"}, {"sha": "d5724bf661c634ec89f3d83ac580a5c75facd6c6", "filename": "src/tools/clippy/tests/ui/missing-doc-impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-impl.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -59,7 +59,9 @@ pub trait E: Sized {\n }\n \n impl Foo {\n-    pub fn foo() {}\n+    pub fn new() -> Self {\n+        Foo { a: 0, b: 0 }\n+    }\n     fn bar() {}\n }\n "}, {"sha": "bda63d66a174af725e68b1f3b833cdb240e066e4", "filename": "src/tools/clippy/tests/ui/missing-doc-impl.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-impl.stderr?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -78,23 +78,25 @@ LL |     type AssociatedTypeDef = Self;\n error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:62:5\n    |\n-LL |     pub fn foo() {}\n-   |     ^^^^^^^^^^^^^^^\n+LL | /     pub fn new() -> Self {\n+LL | |         Foo { a: 0, b: 0 }\n+LL | |     }\n+   | |_____^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:63:5\n+  --> $DIR/missing-doc-impl.rs:65:5\n    |\n LL |     fn bar() {}\n    |     ^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:67:5\n+  --> $DIR/missing-doc-impl.rs:69:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:71:5\n+  --> $DIR/missing-doc-impl.rs:73:5\n    |\n LL | /     fn foo2() -> u32 {\n LL | |         1"}, {"sha": "6d2cbb6ad96fa865870159854b8e1d053d6f0b75", "filename": "src/tools/clippy/tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -84,7 +84,7 @@ mod with_drop {\n \n     impl A {\n         // This can not be const because the type implements `Drop`.\n-        pub fn a(self) -> B {\n+        pub fn b(self) -> B {\n             B\n         }\n     }"}, {"sha": "5917ffc3e12ea94efcc44ffbc7074ce0cbba7893", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -6,7 +6,8 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n-    clippy::needless_return\n+    clippy::needless_return,\n+    clippy::self_named_constructor\n )]\n \n use std::cell::Cell;"}, {"sha": "d26dcb9fcc33e8a0353a86b0000867f776cbef77", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -6,7 +6,8 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n-    clippy::needless_return\n+    clippy::needless_return,\n+    clippy::self_named_constructor\n )]\n \n use std::cell::Cell;"}, {"sha": "8026d643c44882c476a9d8a9cfd059aa4ab389e9", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -1,5 +1,5 @@\n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:39:5\n+  --> $DIR/fixable.rs:40:5\n    |\n LL | /     if x {\n LL | |         true\n@@ -11,7 +11,7 @@ LL | |     };\n    = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:44:5\n+  --> $DIR/fixable.rs:45:5\n    |\n LL | /     if x {\n LL | |         false\n@@ -21,7 +21,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:49:5\n+  --> $DIR/fixable.rs:50:5\n    |\n LL | /     if x && y {\n LL | |         false\n@@ -31,7 +31,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:69:5\n+  --> $DIR/fixable.rs:70:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -41,7 +41,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:77:5\n+  --> $DIR/fixable.rs:78:5\n    |\n LL | /     if x {\n LL | |         return false;\n@@ -51,7 +51,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:85:5\n+  --> $DIR/fixable.rs:86:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:93:5\n+  --> $DIR/fixable.rs:94:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -71,33 +71,33 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:101:8\n+  --> $DIR/fixable.rs:102:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:105:8\n+  --> $DIR/fixable.rs:106:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:115:8\n+  --> $DIR/fixable.rs:116:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:116:8\n+  --> $DIR/fixable.rs:117:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:125:12\n+  --> $DIR/fixable.rs:126:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^"}, {"sha": "7658b86a8d6d4853d00907adcd6a07bbe3e39035", "filename": "src/tools/clippy/tests/ui/self_named_constructor.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_named_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_named_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_named_constructor.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -0,0 +1,59 @@\n+#![warn(clippy::self_named_constructor)]\n+\n+struct ShouldSpawn;\n+struct ShouldNotSpawn;\n+\n+impl ShouldSpawn {\n+    pub fn should_spawn() -> ShouldSpawn {\n+        ShouldSpawn\n+    }\n+\n+    fn should_not_spawn() -> ShouldNotSpawn {\n+        ShouldNotSpawn\n+    }\n+}\n+\n+impl ShouldNotSpawn {\n+    pub fn new() -> ShouldNotSpawn {\n+        ShouldNotSpawn\n+    }\n+}\n+\n+struct ShouldNotSpawnWithTrait;\n+\n+trait ShouldNotSpawnTrait {\n+    type Item;\n+}\n+\n+impl ShouldNotSpawnTrait for ShouldNotSpawnWithTrait {\n+    type Item = Self;\n+}\n+\n+impl ShouldNotSpawnWithTrait {\n+    pub fn should_not_spawn_with_trait() -> impl ShouldNotSpawnTrait<Item = Self> {\n+        ShouldNotSpawnWithTrait\n+    }\n+}\n+\n+// Same trait name and same type name should not spawn the lint\n+#[derive(Default)]\n+pub struct Default;\n+\n+trait TraitSameTypeName {\n+    fn should_not_spawn() -> Self;\n+}\n+impl TraitSameTypeName for ShouldNotSpawn {\n+    fn should_not_spawn() -> Self {\n+        ShouldNotSpawn\n+    }\n+}\n+\n+struct SelfMethodShouldNotSpawn;\n+\n+impl SelfMethodShouldNotSpawn {\n+    fn self_method_should_not_spawn(self) -> Self {\n+        SelfMethodShouldNotSpawn\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1e2c34ac2f7b92fb8eb048aab3e168fae8e2a57e", "filename": "src/tools/clippy/tests/ui/self_named_constructor.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_named_constructor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_named_constructor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_named_constructor.stderr?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -0,0 +1,12 @@\n+error: constructor `should_spawn` has the same name as the type\n+  --> $DIR/self_named_constructor.rs:7:5\n+   |\n+LL | /     pub fn should_spawn() -> ShouldSpawn {\n+LL | |         ShouldSpawn\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::self-named-constructor` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ced1305874e58611862db7bdccddc65428b911fa", "filename": "src/tools/clippy/tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -1,56 +1,56 @@\n-error: suspicious use of binary operator in `Add` impl\n+error: suspicious use of `-` in `Add` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:13:20\n    |\n LL |         Foo(self.0 - other.0)\n    |                    ^\n    |\n    = note: `-D clippy::suspicious-arithmetic-impl` implied by `-D warnings`\n \n-error: suspicious use of binary operator in `AddAssign` impl\n+error: suspicious use of `-` in `AddAssign` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:19:23\n    |\n LL |         *self = *self - other;\n    |                       ^\n    |\n    = note: `-D clippy::suspicious-op-assign-impl` implied by `-D warnings`\n \n-error: suspicious use of binary operator in `MulAssign` impl\n+error: suspicious use of `/` in `MulAssign` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:32:16\n    |\n LL |         self.0 /= other.0;\n    |                ^^\n \n-error: suspicious use of binary operator in `Rem` impl\n+error: suspicious use of `/` in `Rem` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:70:20\n    |\n LL |         Foo(self.0 / other.0)\n    |                    ^\n \n-error: suspicious use of binary operator in `BitAnd` impl\n+error: suspicious use of `|` in `BitAnd` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:78:20\n    |\n LL |         Foo(self.0 | other.0)\n    |                    ^\n \n-error: suspicious use of binary operator in `BitOr` impl\n+error: suspicious use of `^` in `BitOr` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:86:20\n    |\n LL |         Foo(self.0 ^ other.0)\n    |                    ^\n \n-error: suspicious use of binary operator in `BitXor` impl\n+error: suspicious use of `&` in `BitXor` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:94:20\n    |\n LL |         Foo(self.0 & other.0)\n    |                    ^\n \n-error: suspicious use of binary operator in `Shl` impl\n+error: suspicious use of `>>` in `Shl` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:102:20\n    |\n LL |         Foo(self.0 >> other.0)\n    |                    ^^\n \n-error: suspicious use of binary operator in `Shr` impl\n+error: suspicious use of `<<` in `Shr` impl\n   --> $DIR/suspicious_arithmetic_impl.rs:110:20\n    |\n LL |         Foo(self.0 << other.0)"}, {"sha": "df0fdaccb344a588981721eca88629d3348c6234", "filename": "src/tools/clippy/tests/ui/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -6,7 +6,8 @@\n     clippy::unused_unit,\n     clippy::unnecessary_wraps,\n     clippy::or_fun_call,\n-    clippy::needless_question_mark\n+    clippy::needless_question_mark,\n+    clippy::self_named_constructor\n )]\n \n use std::fmt::Debug;"}, {"sha": "8155c4ae1107b23f57ac42a0439381850f975fdb", "filename": "src/tools/clippy/tests/ui/unit_arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:55:5\n+  --> $DIR/unit_arg.rs:56:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -20,7 +20,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:58:5\n+  --> $DIR/unit_arg.rs:59:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:59:5\n+  --> $DIR/unit_arg.rs:60:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -54,7 +54,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:64:5\n+  --> $DIR/unit_arg.rs:65:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -74,7 +74,7 @@ LL |     b.bar(());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:67:5\n+  --> $DIR/unit_arg.rs:68:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -87,7 +87,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:68:5\n+  --> $DIR/unit_arg.rs:69:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -110,7 +110,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:72:5\n+  --> $DIR/unit_arg.rs:73:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -140,7 +140,7 @@ LL |         foo(2);\n  ...\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:83:13\n+  --> $DIR/unit_arg.rs:84:13\n    |\n LL |     None.or(Some(foo(2)));\n    |             ^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     });\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:86:5\n+  --> $DIR/unit_arg.rs:87:5\n    |\n LL |     foo(foo(()));\n    |     ^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:123:5\n+  --> $DIR/unit_arg.rs:124:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^"}, {"sha": "23fc7632511c2e27449b1a442871e677e94eeacb", "filename": "src/tools/clippy/tests/ui/use_self.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -4,7 +4,12 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n+#![allow(\n+    clippy::should_implement_trait,\n+    clippy::upper_case_acronyms,\n+    clippy::from_over_into,\n+    clippy::self_named_constructor\n+)]\n \n #[macro_use]\n extern crate proc_macro_derive;"}, {"sha": "bb46a33992371cd62e5e2cb5c75d0afdcf5c9941", "filename": "src/tools/clippy/tests/ui/use_self.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -4,7 +4,12 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n+#![allow(\n+    clippy::should_implement_trait,\n+    clippy::upper_case_acronyms,\n+    clippy::from_over_into,\n+    clippy::self_named_constructor\n+)]\n \n #[macro_use]\n extern crate proc_macro_derive;"}, {"sha": "e14368a11aa746eddd1fffeeb88c3bc36c35982d", "filename": "src/tools/clippy/tests/ui/use_self.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fad295b299d9e93950c27acd6a12026d100185fe/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr?ref=fad295b299d9e93950c27acd6a12026d100185fe", "patch": "@@ -1,169 +1,169 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:18:21\n+  --> $DIR/use_self.rs:23:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:19:13\n+  --> $DIR/use_self.rs:24:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:21:22\n+  --> $DIR/use_self.rs:26:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:22:13\n+  --> $DIR/use_self.rs:27:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:27:25\n+  --> $DIR/use_self.rs:32:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:28:13\n+  --> $DIR/use_self.rs:33:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:93:24\n+  --> $DIR/use_self.rs:98:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:93:55\n+  --> $DIR/use_self.rs:98:55\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                                                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:108:13\n+  --> $DIR/use_self.rs:113:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:143:29\n+  --> $DIR/use_self.rs:148:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:144:21\n+  --> $DIR/use_self.rs:149:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:155:21\n+  --> $DIR/use_self.rs:160:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:156:13\n+  --> $DIR/use_self.rs:161:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:173:21\n+  --> $DIR/use_self.rs:178:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:174:21\n+  --> $DIR/use_self.rs:179:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:175:21\n+  --> $DIR/use_self.rs:180:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:217:13\n+  --> $DIR/use_self.rs:222:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:218:13\n+  --> $DIR/use_self.rs:223:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:220:13\n+  --> $DIR/use_self.rs:225:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:239:13\n+  --> $DIR/use_self.rs:244:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:253:25\n+  --> $DIR/use_self.rs:258:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:254:13\n+  --> $DIR/use_self.rs:259:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:16\n+  --> $DIR/use_self.rs:263:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:22\n+  --> $DIR/use_self.rs:263:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:281:29\n+  --> $DIR/use_self.rs:286:29\n    |\n LL |         fn foo(value: T) -> Foo<T> {\n    |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:282:13\n+  --> $DIR/use_self.rs:287:13\n    |\n LL |             Foo::<T> { value }\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:454:13\n+  --> $DIR/use_self.rs:459:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:491:13\n+  --> $DIR/use_self.rs:496:13\n    |\n LL |             S2::new()\n    |             ^^ help: use the applicable keyword: `Self`"}]}