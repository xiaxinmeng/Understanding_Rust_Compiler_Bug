{"sha": "c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NmM2ZTk2OTc4Y2Q4MTEzMDU4N2U5ZjRkMWZhNTJkYzFiMTgzZDY=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-04-11T20:02:43Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-04-24T21:51:49Z"}, "message": "More methods for str boxes.", "tree": {"sha": "98339df32166aa47788c639e3f74de8776f3367c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98339df32166aa47788c639e3f74de8776f3367c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "html_url": "https://github.com/rust-lang/rust/commit/c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "968ae7babecfc6c62ef9699ff052d9ab00411848", "url": "https://api.github.com/repos/rust-lang/rust/commits/968ae7babecfc6c62ef9699ff052d9ab00411848", "html_url": "https://github.com/rust-lang/rust/commit/968ae7babecfc6c62ef9699ff052d9ab00411848"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "76196173b11e50a67b3535128e2a7dbb278e6123", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -207,6 +207,7 @@\n     - [str_checked_slicing](library-features/str-checked-slicing.md)\n     - [str_escape](library-features/str-escape.md)\n     - [str_internals](library-features/str-internals.md)\n+    - [str_box_extras](library-features/str-box-extras.md)\n     - [str_mut_extras](library-features/str-mut-extras.md)\n     - [test](library-features/test.md)\n     - [thread_id](library-features/thread-id.md)"}, {"sha": "d05dcafa84da9adf74d6c497d4648436c69895c6", "filename": "src/doc/unstable-book/src/library-features/str-box-extras.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstr-box-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstr-box-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstr-box-extras.md?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -0,0 +1,9 @@\n+# `str_box_extras`\n+\n+The tracking issue for this feature is: [#str_box_extras]\n+\n+[#str_box_extras]: https://github.com/rust-lang/rust/issues/41119\n+\n+------------------------\n+\n+"}, {"sha": "b03e3bb7a4bdc9afa4e0bd8cb8361166c4188f83", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -68,6 +68,7 @@ use core::ops::{CoerceUnsized, Deref, DerefMut};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, Unique};\n use core::convert::From;\n+use str::from_boxed_utf8_unchecked;\n \n /// A value that represents the heap. This is the default place that the `box`\n /// keyword allocates into when no place is supplied.\n@@ -320,8 +321,7 @@ impl<T> Default for Box<[T]> {\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n impl Default for Box<str> {\n     fn default() -> Box<str> {\n-        let default: Box<[u8]> = Default::default();\n-        unsafe { mem::transmute(default) }\n+        unsafe { from_boxed_utf8_unchecked(Default::default()) }\n     }\n }\n \n@@ -366,7 +366,7 @@ impl Clone for Box<str> {\n         let buf = RawVec::with_capacity(len);\n         unsafe {\n             ptr::copy_nonoverlapping(self.as_ptr(), buf.ptr(), len);\n-            mem::transmute(buf.into_box()) // bytes to str ~magic\n+            from_boxed_utf8_unchecked(buf.into_box())\n         }\n     }\n }\n@@ -441,8 +441,16 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a> From<&'a str> for Box<str> {\n     fn from(s: &'a str) -> Box<str> {\n-        let boxed: Box<[u8]> = Box::from(s.as_bytes());\n-        unsafe { mem::transmute(boxed) }\n+        unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n+    }\n+}\n+\n+#[stable(feature = \"boxed_str_conv\", since = \"1.18.0\")]\n+impl From<Box<str>> for Box<[u8]> {\n+    fn from(s: Box<str>) -> Self {\n+        unsafe {\n+            mem::transmute(s)\n+        }\n     }\n }\n "}, {"sha": "418a084da67878ff2c375b78cdf7153f70ed051c", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -128,6 +128,8 @@ mod boxed_test;\n pub mod arc;\n pub mod rc;\n pub mod raw_vec;\n+#[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+pub mod str;\n pub mod oom;\n \n pub use oom::oom;"}, {"sha": "c87db16a0f417595c1bacc46c4b5df12c7d33ac7", "filename": "src/liballoc/str.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012-2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Methods for dealing with boxed strings.\n+use core::mem;\n+\n+use boxed::Box;\n+\n+/// Converts a boxed slice of bytes to a boxed string slice without checking\n+/// that the string contains valid UTF-8.\n+#[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n+    mem::transmute(v)\n+}"}, {"sha": "c3db76e6c759d7134090993751fee36bdbad76fb", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -60,6 +60,7 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]\n+#![feature(str_box_extras)]\n #![feature(str_mut_extras)]\n #![feature(trusted_len)]\n #![feature(unicode)]"}, {"sha": "964660183e751c31f6a465e248c7e37b28ba74a3", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -70,14 +70,17 @@ pub use core::str::{Matches, RMatches};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{MatchIndices, RMatchIndices};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::str::{from_utf8, Chars, CharIndices, Bytes};\n+pub use core::str::{from_utf8, from_utf8_mut, Chars, CharIndices, Bytes};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{from_utf8_unchecked, from_utf8_unchecked_mut, ParseBoolError};\n+#[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+pub use alloc::str::from_boxed_utf8_unchecked;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use std_unicode::str::SplitWhitespace;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::pattern;\n \n+\n #[unstable(feature = \"slice_concat_ext\",\n            reason = \"trait should not have to exist\",\n            issue = \"27747\")]\n@@ -1715,6 +1718,12 @@ impl str {\n         core_str::StrExt::parse(self)\n     }\n \n+    /// Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n+    #[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+    pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> {\n+        self.into()\n+    }\n+\n     /// Replaces all matches of a pattern with another string.\n     ///\n     /// `replace` creates a new [`String`], and copies the data from this string slice into it."}, {"sha": "69dfb466d707ea38cc8868f9a0c20a8d4f173dc0", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66c6e96978cd81130587e9f4d1fa52dc1b183d6/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c66c6e96978cd81130587e9f4d1fa52dc1b183d6", "patch": "@@ -56,10 +56,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use alloc::str as alloc_str;\n+\n use core::fmt;\n use core::hash;\n use core::iter::{FromIterator, FusedIterator};\n-use core::mem;\n use core::ops::{self, Add, AddAssign, Index, IndexMut};\n use core::ptr;\n use core::str as core_str;\n@@ -1398,7 +1399,7 @@ impl String {\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n-        unsafe { mem::transmute::<Box<[u8]>, Box<str>>(slice) }\n+        unsafe { alloc_str::from_boxed_utf8_unchecked(slice) }\n     }\n }\n "}]}