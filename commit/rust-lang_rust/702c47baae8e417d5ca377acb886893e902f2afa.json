{"sha": "702c47baae8e417d5ca377acb886893e902f2afa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMmM0N2JhYWU4ZTQxN2Q1Y2EzNzdhY2I4ODY4OTNlOTAyZjJhZmE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-26T16:02:26Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-05T11:41:03Z"}, "message": "core: mark relevant functions with #[rustc_inherit_overflow_checks].", "tree": {"sha": "3c959c5283aea249f63f36b48f8a4f2fc6fcd761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c959c5283aea249f63f36b48f8a4f2fc6fcd761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/702c47baae8e417d5ca377acb886893e902f2afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/702c47baae8e417d5ca377acb886893e902f2afa", "html_url": "https://github.com/rust-lang/rust/commit/702c47baae8e417d5ca377acb886893e902f2afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/702c47baae8e417d5ca377acb886893e902f2afa/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4adc967ed168d5469e39267d4ac81383434830b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4adc967ed168d5469e39267d4ac81383434830b4", "html_url": "https://github.com/rust-lang/rust/commit/4adc967ed168d5469e39267d4ac81383434830b4"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "71ca5ccdc8dfbe713d3dde62264a623f617c90c3", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=702c47baae8e417d5ca377acb886893e902f2afa", "patch": "@@ -172,6 +172,7 @@ pub trait Iterator {\n     /// assert_eq!(a.iter().count(), 5);\n     /// ```\n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn count(self) -> usize where Self: Sized {\n         // Might overflow."}, {"sha": "ae1e311682617cbffb4215a2ed76cf6a62259590", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=702c47baae8e417d5ca377acb886893e902f2afa", "patch": "@@ -510,6 +510,7 @@ impl<A, B> Iterator for Chain<A, B> where\n     }\n \n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn count(self) -> usize {\n         match self.state {\n             ChainState::Both => self.a.count() + self.b.count(),\n@@ -932,6 +933,7 @@ impl<I> Iterator for Enumerate<I> where I: Iterator {\n     ///\n     /// Might panic if the index of the element overflows a `usize`.\n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {\n         self.iter.next().map(|a| {\n             let ret = (self.count, a);\n@@ -947,6 +949,7 @@ impl<I> Iterator for Enumerate<I> where I: Iterator {\n     }\n \n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn nth(&mut self, n: usize) -> Option<(usize, I::Item)> {\n         self.iter.nth(n).map(|a| {\n             let i = self.count + n;\n@@ -1008,6 +1011,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n     }\n \n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn count(self) -> usize {\n         (if self.peeked.is_some() { 1 } else { 0 }) + self.iter.count()\n     }"}, {"sha": "883e9206dde1d3ad9e2a8fd3e4bc1b0c373ba939", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=702c47baae8e417d5ca377acb886893e902f2afa", "patch": "@@ -1033,7 +1033,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n+        #[rustc_inherit_overflow_checks]\n         pub fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = Self::one();\n@@ -1075,7 +1075,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n+        #[rustc_inherit_overflow_checks]\n         pub fn abs(self) -> Self {\n             if self.is_negative() {\n                 // Note that the #[inline] above means that the overflow\n@@ -2061,7 +2061,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n+        #[rustc_inherit_overflow_checks]\n         pub fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = Self::one();"}, {"sha": "50c4dc697c2062f7de9c2f9e3661cc228749c27d", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702c47baae8e417d5ca377acb886893e902f2afa/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=702c47baae8e417d5ca377acb886893e902f2afa", "patch": "@@ -208,6 +208,7 @@ macro_rules! add_impl {\n             type Output = $t;\n \n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn add(self, other: $t) -> $t { self + other }\n         }\n \n@@ -261,6 +262,7 @@ macro_rules! sub_impl {\n             type Output = $t;\n \n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn sub(self, other: $t) -> $t { self - other }\n         }\n \n@@ -314,6 +316,7 @@ macro_rules! mul_impl {\n             type Output = $t;\n \n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn mul(self, other: $t) -> $t { self * other }\n         }\n \n@@ -511,6 +514,7 @@ macro_rules! neg_impl_core {\n             type Output = $t;\n \n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn neg(self) -> $t { let $id = self; $body }\n         }\n \n@@ -788,6 +792,7 @@ macro_rules! shl_impl {\n             type Output = $t;\n \n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn shl(self, other: $f) -> $t {\n                 self << other\n             }\n@@ -859,6 +864,7 @@ macro_rules! shr_impl {\n             type Output = $t;\n \n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn shr(self, other: $f) -> $t {\n                 self >> other\n             }\n@@ -923,6 +929,7 @@ macro_rules! add_assign_impl {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl AddAssign for $t {\n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn add_assign(&mut self, other: $t) { *self += other }\n         }\n     )+)\n@@ -967,6 +974,7 @@ macro_rules! sub_assign_impl {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl SubAssign for $t {\n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn sub_assign(&mut self, other: $t) { *self -= other }\n         }\n     )+)\n@@ -1011,6 +1019,7 @@ macro_rules! mul_assign_impl {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl MulAssign for $t {\n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn mul_assign(&mut self, other: $t) { *self *= other }\n         }\n     )+)\n@@ -1275,6 +1284,7 @@ macro_rules! shl_assign_impl {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for $t {\n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn shl_assign(&mut self, other: $f) {\n                 *self <<= other\n             }\n@@ -1337,6 +1347,7 @@ macro_rules! shr_assign_impl {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for $t {\n             #[inline]\n+            #[rustc_inherit_overflow_checks]\n             fn shr_assign(&mut self, other: $f) {\n                 *self >>= other\n             }"}]}