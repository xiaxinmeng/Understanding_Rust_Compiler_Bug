{"sha": "80df25e1601880a2386495b469b19b60034ca382", "node_id": "C_kwDOAAsO6NoAKDgwZGYyNWUxNjAxODgwYTIzODY0OTViNDY5YjE5YjYwMDM0Y2EzODI", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-10-07T00:28:51Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `levels.rs`", "tree": {"sha": "4d40b453124be8d6c94f6cc427d6d678a0d39199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d40b453124be8d6c94f6cc427d6d678a0d39199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80df25e1601880a2386495b469b19b60034ca382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80df25e1601880a2386495b469b19b60034ca382", "html_url": "https://github.com/rust-lang/rust/commit/80df25e1601880a2386495b469b19b60034ca382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80df25e1601880a2386495b469b19b60034ca382/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab66ea61cf4b6f47109d9c24d5a3ce3ea169c60a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab66ea61cf4b6f47109d9c24d5a3ce3ea169c60a", "html_url": "https://github.com/rust-lang/rust/commit/ab66ea61cf4b6f47109d9c24d5a3ce3ea169c60a"}], "stats": {"total": 235, "additions": 128, "deletions": 107}, "files": [{"sha": "babdbb1cc196212c6b93540348b12c2a488ddd5b", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=80df25e1601880a2386495b469b19b60034ca382", "patch": "@@ -20,6 +20,18 @@ lint_deprecated_lint_name =\n     lint name `{$name}` is deprecated and may not have an effect in the future.\n     .suggestion = change it to\n \n+lint_renamed_or_removed_lint_suggestion = use the new name\n+\n+lint_unknown_lint =\n+    unknown lint: `{$name}`\n+    .suggestion = did you mean\n+\n+lint_ignored_unless_crate_specified = {$level}({$name}) is ignored unless specified at crate level\n+\n+lint_unknown_gated_lint =\n+    unknown lint: `{$name}`\n+    .note = the `{$name}` lint is unstable\n+\n lint_hidden_unicode_codepoints = unicode codepoint changing visible direction of text present in {$label}\n     .label = this {$label} contains {$count ->\n         [one] an invisible"}, {"sha": "0ea643fd69b6818e8ca668b074a11749c1a7295b", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=80df25e1601880a2386495b469b19b60034ca382", "patch": "@@ -10,12 +10,12 @@ use rustc_span::{Span, Symbol};\n \n #[derive(Diagnostic)]\n #[diag(lint_overruled_attribute, code = \"E0453\")]\n-pub struct OverruledAttribute {\n+pub struct OverruledAttribute<'a> {\n     #[primary_span]\n     pub span: Span,\n     #[label]\n     pub overruled: Span,\n-    pub lint_level: String,\n+    pub lint_level: &'a str,\n     pub lint_source: Symbol,\n     #[subdiagnostic]\n     pub sub: OverruledAttributeSub,"}, {"sha": "b335f330f5d415511abe8b8e29b3fbe708f90cd8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 39, "deletions": 103, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=80df25e1601880a2386495b469b19b60034ca382", "patch": "@@ -1,12 +1,15 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use crate::context::{CheckLintNameResult, LintStore};\n use crate::late::unerased_lint_store;\n-use crate::lints::DeprecatedLintName;\n+use crate::lints::{\n+    DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAtributeLint, RenamedOrRemovedLint,\n+    UnknownLint,\n+};\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{\n-    Applicability, DecorateLint, Diagnostic, DiagnosticBuilder, DiagnosticMessage, MultiSpan,\n-};\n+use rustc_errors::{fluent, DecorateLint, DiagnosticBuilder, DiagnosticMessage, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::HirId;\n@@ -18,6 +21,7 @@ use rustc_middle::lint::{\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n+use rustc_session::lint::builtin::{RENAMED_AND_REMOVED_LINTS, UNKNOWN_LINTS, UNUSED_ATTRIBUTES};\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS, SINGLE_USE_LIFETIMES, UNFULFILLED_LINT_EXPECTATIONS},\n     Level, Lint, LintExpectationId, LintId,\n@@ -586,57 +590,32 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     old_src,\n                     id_name\n                 );\n-\n-                let decorate_diag = |diag: &mut Diagnostic| {\n-                    diag.span_label(src.span(), \"overruled by previous forbid\");\n-                    match old_src {\n-                        LintLevelSource::Default => {\n-                            diag.note(&format!(\n-                                \"`forbid` lint level is the default for {}\",\n-                                id.to_string()\n-                            ));\n-                        }\n-                        LintLevelSource::Node { span, reason, .. } => {\n-                            diag.span_label(span, \"`forbid` level set here\");\n-                            if let Some(rationale) = reason {\n-                                diag.note(rationale.as_str());\n-                            }\n-                        }\n-                        LintLevelSource::CommandLine(_, _) => {\n-                            diag.note(\"`forbid` lint level was set on command line\");\n-                        }\n+                let sub = match old_src {\n+                    LintLevelSource::Default => {\n+                        OverruledAttributeSub::DefaultSource { id: id.to_string() }\n+                    }\n+                    LintLevelSource::Node { span, reason, .. } => {\n+                        OverruledAttributeSub::NodeSource { span, reason }\n                     }\n+                    LintLevelSource::CommandLine(_, _) => OverruledAttributeSub::CommandLineSource,\n                 };\n                 if !fcw_warning {\n                     self.sess.emit_err(OverruledAttribute {\n                         span: src.span(),\n                         overruled: src.span(),\n-                        lint_level: level.as_str().to_string(),\n+                        lint_level: level.as_str(),\n                         lint_source: src.name(),\n-                        sub: match old_src {\n-                            LintLevelSource::Default => {\n-                                OverruledAttributeSub::DefaultSource { id: id.to_string() }\n-                            }\n-                            LintLevelSource::Node { span, reason, .. } => {\n-                                OverruledAttributeSub::NodeSource { span, reason }\n-                            }\n-                            LintLevelSource::CommandLine(_, _) => {\n-                                OverruledAttributeSub::CommandLineSource\n-                            }\n-                        },\n+                        sub,\n                     });\n                 } else {\n-                    self.struct_lint(\n+                    self.emit_spanned_lint(\n                         FORBIDDEN_LINT_GROUPS,\n-                        Some(src.span().into()),\n-                        format!(\n-                            \"{}({}) incompatible with previous forbid\",\n-                            level.as_str(),\n-                            src.name(),\n-                        ),\n-                        |lint| {\n-                            decorate_diag(lint);\n-                            lint\n+                        src.span().into(),\n+                        OverruledAtributeLint {\n+                            overruled: src.span(),\n+                            lint_level: level.as_str(),\n+                            lint_source: src.name(),\n+                            sub,\n                         },\n                     );\n                 }\n@@ -908,54 +887,22 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     _ if !self.warn_about_weird_lints => {}\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n-                        let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                        let (renamed_lint_level, src) = self.provider.get_lint_level(lint, &sess);\n-                        struct_lint_level(\n-                            self.sess,\n-                            lint,\n-                            renamed_lint_level,\n-                            src,\n-                            Some(sp.into()),\n-                            msg,\n-                            |lint| {\n-                                if let Some(new_name) = &renamed {\n-                                    lint.span_suggestion(\n-                                        sp,\n-                                        \"use the new name\",\n-                                        new_name,\n-                                        Applicability::MachineApplicable,\n-                                    );\n-                                }\n-                                lint\n-                            },\n+                        self.emit_spanned_lint(\n+                            RENAMED_AND_REMOVED_LINTS,\n+                            sp.into(),\n+                            RenamedOrRemovedLint { msg, suggestion: sp, renamed },\n                         );\n                     }\n                     CheckLintNameResult::NoLint(suggestion) => {\n-                        let lint = builtin::UNKNOWN_LINTS;\n-                        let (level, src) = self.provider.get_lint_level(lint, self.sess);\n                         let name = if let Some(tool_ident) = tool_ident {\n                             format!(\"{}::{}\", tool_ident.name, name)\n                         } else {\n                             name.to_string()\n                         };\n-                        struct_lint_level(\n-                            self.sess,\n-                            lint,\n-                            level,\n-                            src,\n-                            Some(sp.into()),\n-                            format!(\"unknown lint: `{}`\", name),\n-                            |lint| {\n-                                if let Some(suggestion) = suggestion {\n-                                    lint.span_suggestion(\n-                                        sp,\n-                                        \"did you mean\",\n-                                        suggestion,\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                }\n-                                lint\n-                            },\n+                        self.emit_spanned_lint(\n+                            UNKNOWN_LINTS,\n+                            sp.into(),\n+                            UnknownLint { name, suggestion: sp, replace: suggestion },\n                         );\n                     }\n                 }\n@@ -1001,20 +948,10 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     continue\n                 };\n \n-                let lint = builtin::UNUSED_ATTRIBUTES;\n-                let (lint_level, lint_src) = self.provider.get_lint_level(lint, &self.sess);\n-                struct_lint_level(\n-                    self.sess,\n-                    lint,\n-                    lint_level,\n-                    lint_src,\n-                    Some(lint_attr_span.into()),\n-                    format!(\n-                        \"{}({}) is ignored unless specified at crate level\",\n-                        level.as_str(),\n-                        lint_attr_name\n-                    ),\n-                    |lint| lint,\n+                self.emit_spanned_lint(\n+                    UNUSED_ATTRIBUTES,\n+                    lint_attr_span.into(),\n+                    IgnoredUnlessCrateSpecified { level: level.as_str(), name: lint_attr_name },\n                 );\n                 // don't set a separate error for every lint in the group\n                 break;\n@@ -1038,11 +975,10 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     level,\n                     src,\n                     Some(span.into()),\n-                    format!(\"unknown lint: `{}`\", lint_id.lint.name_lower()),\n+                    fluent::lint_unknown_gated_lint,\n                     |lint| {\n-                        lint.note(\n-                            &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower(),),\n-                        );\n+                        lint.set_arg(\"name\", lint_id.lint.name_lower());\n+                        lint.note(fluent::note);\n                         add_feature_diagnostics(lint, &self.sess.parse_sess, feature);\n                         lint\n                     },"}, {"sha": "eb86bb7b9250396f933e3fa1f92e35af250b60ba", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df25e1601880a2386495b469b19b60034ca382/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=80df25e1601880a2386495b469b19b60034ca382", "patch": "@@ -4,7 +4,7 @@ use rustc_macros::{LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{Predicate, Ty, TyCtxt};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n-use crate::LateContext;\n+use crate::{errors::OverruledAttributeSub, LateContext};\n \n // array_into_iter.rs\n #[derive(LintDiagnostic)]\n@@ -51,14 +51,87 @@ pub struct EnumIntrinsicsMemVariant<'a> {\n \n // levels.rs\n #[derive(LintDiagnostic)]\n-#[diag(lint::deprecated_lint_name)]\n+#[diag(lint_overruled_attribute)]\n+pub struct OverruledAtributeLint<'a> {\n+    #[label]\n+    pub overruled: Span,\n+    pub lint_level: &'a str,\n+    pub lint_source: Symbol,\n+    #[subdiagnostic]\n+    pub sub: OverruledAttributeSub,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_deprecated_lint_name)]\n pub struct DeprecatedLintName<'a> {\n     pub name: String,\n     #[suggestion(code = \"{replace}\", applicability = \"machine-applicable\")]\n     pub suggestion: Span,\n     pub replace: &'a str,\n }\n \n+pub struct RenamedOrRemovedLint<'a> {\n+    pub msg: &'a str,\n+    pub suggestion: Span,\n+    pub renamed: &'a Option<String>,\n+}\n+\n+impl<'a> DecorateLint<'a, ()> for RenamedOrRemovedLint<'_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n+        if let Some(new_name) = self.renamed {\n+            diag.span_suggestion(\n+                self.suggestion,\n+                fluent::lint_renamed_or_removed_lint_suggestion,\n+                new_name,\n+                Applicability::MachineApplicable,\n+            );\n+        };\n+        diag\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        rustc_errors::DiagnosticMessage::Str(self.msg.to_string())\n+    }\n+}\n+\n+pub struct UnknownLint<'a> {\n+    pub name: String,\n+    pub suggestion: Span,\n+    pub replace: &'a Option<Symbol>,\n+}\n+\n+impl<'a> DecorateLint<'a, ()> for UnknownLint<'_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n+        diag.set_arg(\"name\", self.name);\n+        if let Some(replace) = self.replace {\n+            diag.span_suggestion(\n+                self.suggestion,\n+                fluent::suggestion,\n+                replace,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+        diag\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        fluent::lint_unknown_lint\n+    }\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_ignored_unless_crate_specified)]\n+pub struct IgnoredUnlessCrateSpecified<'a> {\n+    pub level: &'a str,\n+    pub name: Symbol,\n+}\n+\n // methods.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_cstring_ptr)]"}]}