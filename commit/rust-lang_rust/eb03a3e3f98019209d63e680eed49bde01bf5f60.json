{"sha": "eb03a3e3f98019209d63e680eed49bde01bf5f60", "node_id": "C_kwDOAAsO6NoAKGViMDNhM2UzZjk4MDE5MjA5ZDYzZTY4MGVlZDQ5YmRlMDFiZjVmNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T21:34:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T21:34:05Z"}, "message": "Auto merge of #111363 - asquared31415:tidy_no_random_ui_tests, r=fee1-dead\n\nAdd a tidy check to find unexpected files in UI tests, and clean up the results\n\nWhile looking at UI tests, I noticed several weird files that were not being tested, some from even pre-1.0. I added a tidy check that fails if any files not known to compiletest or not used in tests (via manual list) are present in the ui tests.\n\nUnfortunately the root entry limit had to be raised by 1 to accommodate the stderr file for one of the tests.\n\nr? `@fee1-dead`", "tree": {"sha": "a694e1bb6cc2fdd59d6aa130e1310dbf3731e3cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a694e1bb6cc2fdd59d6aa130e1310dbf3731e3cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb03a3e3f98019209d63e680eed49bde01bf5f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb03a3e3f98019209d63e680eed49bde01bf5f60", "html_url": "https://github.com/rust-lang/rust/commit/eb03a3e3f98019209d63e680eed49bde01bf5f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb03a3e3f98019209d63e680eed49bde01bf5f60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c41369acc445d04129db40ba998dd7a89fb0d2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c41369acc445d04129db40ba998dd7a89fb0d2e", "html_url": "https://github.com/rust-lang/rust/commit/2c41369acc445d04129db40ba998dd7a89fb0d2e"}, {"sha": "517ea5652a773d51c3cc431e86d5ba2f443c2fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/517ea5652a773d51c3cc431e86d5ba2f443c2fd2", "html_url": "https://github.com/rust-lang/rust/commit/517ea5652a773d51c3cc431e86d5ba2f443c2fd2"}], "stats": {"total": 122, "additions": 82, "deletions": 40}, "files": [{"sha": "ee12f4acb107791f14b0b47601b3113a35974ad4", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "patch": "@@ -4,13 +4,38 @@\n \n use ignore::Walk;\n use std::collections::HashMap;\n+use std::ffi::OsStr;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n const ISSUES_ENTRY_LIMIT: usize = 1920;\n-const ROOT_ENTRY_LIMIT: usize = 895;\n+const ROOT_ENTRY_LIMIT: usize = 896;\n+\n+const EXPECTED_TEST_FILE_EXTENSIONS: &[&str] = &[\n+    \"rs\",     // test source files\n+    \"stderr\", // expected stderr file, corresponds to a rs file\n+    \"stdout\", // expected stdout file, corresponds to a rs file\n+    \"fixed\",  // expected source file after applying fixes\n+    \"md\",     // test directory descriptions\n+    \"ftl\",    // translation tests\n+];\n+\n+const EXTENSION_EXCEPTION_PATHS: &[&str] = &[\n+    \"tests/ui/asm/named-asm-labels.s\", // loading an external asm file to test named labels lint\n+    \"tests/ui/check-cfg/my-awesome-platform.json\", // testing custom targets with cfgs\n+    \"tests/ui/commandline-argfile-badutf8.args\", // passing args via a file\n+    \"tests/ui/commandline-argfile.args\", // passing args via a file\n+    \"tests/ui/crate-loading/auxiliary/libfoo.rlib\", // testing loading a manually created rlib\n+    \"tests/ui/include-macros/data.bin\", // testing including data with the include macros\n+    \"tests/ui/include-macros/file.txt\", // testing including data with the include macros\n+    \"tests/ui/macros/macro-expanded-include/file.txt\", // testing including data with the include macros\n+    \"tests/ui/macros/not-utf8.bin\", // testing including data with the include macros\n+    \"tests/ui/macros/syntax-extension-source-utils-files/includeme.fragment\", // more include\n+    \"tests/ui/unused-crate-deps/test.mk\", // why would you use make\n+    \"tests/ui/proc-macro/auxiliary/included-file.txt\", // more include\n+];\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {\n     let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n@@ -66,7 +91,14 @@ pub fn check(path: &Path, bad: &mut bool) {\n     let paths = [ui.as_path(), ui_fulldeps.as_path()];\n     crate::walk::walk_no_read(&paths, |_, _| false, &mut |entry| {\n         let file_path = entry.path();\n-        if let Some(ext) = file_path.extension() {\n+        if let Some(ext) = file_path.extension().and_then(OsStr::to_str) {\n+            // files that are neither an expected extension or an exception should not exist\n+            // they're probably typos or not meant to exist\n+            if !(EXPECTED_TEST_FILE_EXTENSIONS.contains(&ext)\n+                || EXTENSION_EXCEPTION_PATHS.iter().any(|path| file_path.ends_with(path)))\n+            {\n+                tidy_error!(bad, \"file {} has unexpected extension {}\", file_path.display(), ext);\n+            }\n             if ext == \"stderr\" || ext == \"stdout\" {\n                 // Test output filenames have one of the formats:\n                 // ```"}, {"sha": "89ba26dfd6f4b1c109fcbd008bcfd3c035132275", "filename": "tests/ui/attr-bad-crate-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fattr-bad-crate-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fattr-bad-crate-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattr-bad-crate-attr.rs?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "previous_filename": "tests/ui/attr-bad-crate-attr.rc"}, {"sha": "ff420eeea4a0618b7179aec6929c1c696a08409e", "filename": "tests/ui/attr-bad-crate-attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fattr-bad-crate-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fattr-bad-crate-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattr-bad-crate-attr.stderr?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "patch": "@@ -0,0 +1,8 @@\n+error: expected item after attributes\n+  --> $DIR/attr-bad-crate-attr.rs:4:1\n+   |\n+LL | #[attr = \"val\"] // Unterminated\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d950743b41c0d9b52063f449768884b2ddd8e669", "filename": "tests/ui/dupe-first-attr.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fdupe-first-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fdupe-first-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdupe-first-attr.rs?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "patch": "@@ -1,24 +1,26 @@\n+// run-pass\n+\n // Regression test for a problem with the first mod attribute\n // being applied to every mod\n \n // pretty-expanded FIXME #23616\n \n #[cfg(target_os = \"linux\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"macos\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"windows\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"freebsd\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"dragonfly\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"android\")]\n-mod hello;\n+mod hello {}\n \n-pub fn main() { }\n+fn main() {}", "previous_filename": "tests/ui/dupe-first-attr.rc"}, {"sha": "dc1115b82db40a8a77bfc8509b79dbbee6f7d43a", "filename": "tests/ui/extern/auxiliary/invalid-utf8.txt", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt?ref=2c41369acc445d04129db40ba998dd7a89fb0d2e", "patch": "@@ -1 +0,0 @@\n-\ufffd(\n\\ No newline at end of file"}, {"sha": "6eb47e3d85be43929ce348a0d8454660073fcc9e", "filename": "tests/ui/feature-gates/auxiliary/debugger-visualizer.natvis", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis?ref=2c41369acc445d04129db40ba998dd7a89fb0d2e", "patch": "@@ -1,3 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n-</AutoVisualizer>"}, {"sha": "cd5fd3145055c56a8917c2a83866e6ab9af86f4b", "filename": "tests/ui/issues/auxiliary/issue-3136-a.rc", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rc?ref=2c41369acc445d04129db40ba998dd7a89fb0d2e", "patch": "@@ -1,4 +0,0 @@\n-#![crate_type = \"lib\"]\n-\n-#[path = \"issue-3136-a.rs\"]\n-pub mod issue_3136_a;"}, {"sha": "22bb1c8f97709c7d0ab69237caf2cb5290422d33", "filename": "tests/ui/issues/auxiliary/issue-3136-a.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rs?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "patch": "@@ -1,11 +1,14 @@\n+#![crate_type = \"lib\"]\n+\n trait x {\n     fn use_x<T>(&self);\n }\n struct y(());\n impl x for y {\n     fn use_x<T>(&self) {\n-        struct foo { //~ ERROR quux\n-            i: ()\n+        struct foo {\n+            //~ ERROR quux\n+            i: (),\n         }\n         fn new_foo<T>(i: ()) -> foo {\n             foo { i: i }"}, {"sha": "33d97fe7c834f5e973eed52b2df87fe2570b6491", "filename": "tests/ui/issues/issue-3136-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fissues%2Fissue-3136-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fissues%2Fissue-3136-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3136-b.rs?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// aux-build:issue-3136-a.rc\n+// aux-build:issue-3136-a.rs\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "eb1f2a549b16b504f51e919880a1054daa9e25e6", "filename": "tests/ui/kindck/kindck-send-unsafe.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "patch": "@@ -1,11 +1,15 @@\n extern crate core;\n \n-fn assert_send<T:Send>() { }\n+fn assert_send<T: Send>() {}\n+\n+fn test70() {\n+    assert_send::<*mut isize>();\n+    //~^ ERROR `*mut isize` cannot be sent between threads safely\n+}\n \n fn test71<'a>() {\n     assert_send::<*mut &'a isize>();\n     //~^ ERROR `*mut &'a isize` cannot be sent between threads safely\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "3f0444ec9c80777e08155259569ea70d5eb3a6ba", "filename": "tests/ui/kindck/kindck-send-unsafe.rs~rust-lang_master", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs%7Erust-lang_master", "raw_url": "https://github.com/rust-lang/rust/raw/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs%7Erust-lang_master", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs%7Erust-lang_master?ref=2c41369acc445d04129db40ba998dd7a89fb0d2e", "patch": "@@ -1,12 +0,0 @@\n-fn assert_send<T:Send>() { }\n-\n-// unsafe ptrs are ok unless they point at unsendable things\n-fn test70() {\n-    assert_send::<*mut int>();\n-}\n-fn test71<'a>() {\n-    assert_send::<*mut &'a int>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn main() {\n-}"}, {"sha": "f1a5054abbc4702538907a30d7934288cfb1ced3", "filename": "tests/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb03a3e3f98019209d63e680eed49bde01bf5f60/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=eb03a3e3f98019209d63e680eed49bde01bf5f60", "patch": "@@ -1,16 +1,29 @@\n-error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n+error[E0277]: `*mut isize` cannot be sent between threads safely\n   --> $DIR/kindck-send-unsafe.rs:6:19\n    |\n+LL |     assert_send::<*mut isize>();\n+   |                   ^^^^^^^^^^ `*mut isize` cannot be sent between threads safely\n+   |\n+   = help: the trait `Send` is not implemented for `*mut isize`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-unsafe.rs:3:19\n+   |\n+LL | fn assert_send<T: Send>() {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n+  --> $DIR/kindck-send-unsafe.rs:11:19\n+   |\n LL |     assert_send::<*mut &'a isize>();\n    |                   ^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `*mut &'a isize`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-unsafe.rs:3:18\n+  --> $DIR/kindck-send-unsafe.rs:3:19\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ^^^^ required by this bound in `assert_send`\n+LL | fn assert_send<T: Send>() {}\n+   |                   ^^^^ required by this bound in `assert_send`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}