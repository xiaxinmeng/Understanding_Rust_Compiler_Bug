{"sha": "c902fdca459a9ee31a6ea81236cb250bc037255b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDJmZGNhNDU5YTllZTMxYTZlYTgxMjM2Y2IyNTBiYzAzNzI1NWI=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-05-31T17:18:20Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-05-31T17:18:20Z"}, "message": "Remove unnecessary SpecFromIter impls", "tree": {"sha": "5c12135e65f4c6e5dc58eb7793d001523dcdf0bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c12135e65f4c6e5dc58eb7793d001523dcdf0bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c902fdca459a9ee31a6ea81236cb250bc037255b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c902fdca459a9ee31a6ea81236cb250bc037255b", "html_url": "https://github.com/rust-lang/rust/commit/c902fdca459a9ee31a6ea81236cb250bc037255b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c902fdca459a9ee31a6ea81236cb250bc037255b/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7baa7afd0fc8061c5b815a7aab9b40d1cd406ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7baa7afd0fc8061c5b815a7aab9b40d1cd406ce8", "html_url": "https://github.com/rust-lang/rust/commit/7baa7afd0fc8061c5b815a7aab9b40d1cd406ce8"}], "stats": {"total": 31, "additions": 0, "deletions": 31}, "files": [{"sha": "d7a957d85ff85ab0a2e8a568d0631955895deda1", "filename": "library/alloc/src/vec/spec_from_iter.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c902fdca459a9ee31a6ea81236cb250bc037255b/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c902fdca459a9ee31a6ea81236cb250bc037255b/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs?ref=c902fdca459a9ee31a6ea81236cb250bc037255b", "patch": "@@ -1,6 +1,5 @@\n use core::mem::ManuallyDrop;\n use core::ptr::{self};\n-use core::slice::{self};\n \n use super::{IntoIter, SpecExtend, SpecFromIterNested, Vec};\n \n@@ -65,33 +64,3 @@ impl<T> SpecFromIter<T, IntoIter<T>> for Vec<T> {\n         vec\n     }\n }\n-\n-impl<'a, T: 'a, I> SpecFromIter<&'a T, I> for Vec<T>\n-where\n-    I: Iterator<Item = &'a T>,\n-    T: Clone,\n-{\n-    default fn from_iter(iterator: I) -> Self {\n-        SpecFromIter::from_iter(iterator.cloned())\n-    }\n-}\n-\n-// This utilizes `iterator.as_slice().to_vec()` since spec_extend\n-// must take more steps to reason about the final capacity + length\n-// and thus do more work. `to_vec()` directly allocates the correct amount\n-// and fills it exactly.\n-impl<'a, T: 'a + Clone> SpecFromIter<&'a T, slice::Iter<'a, T>> for Vec<T> {\n-    #[cfg(not(test))]\n-    fn from_iter(iterator: slice::Iter<'a, T>) -> Self {\n-        iterator.as_slice().to_vec()\n-    }\n-\n-    // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is\n-    // required for this method definition, is not available. Instead use the\n-    // `slice::to_vec`  function which is only available with cfg(test)\n-    // NB see the slice::hack module in slice.rs for more information\n-    #[cfg(test)]\n-    fn from_iter(iterator: slice::Iter<'a, T>) -> Self {\n-        crate::slice::to_vec(iterator.as_slice(), crate::alloc::Global)\n-    }\n-}"}]}