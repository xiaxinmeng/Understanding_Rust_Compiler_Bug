{"sha": "8b5549defb629210a8ffc1af08b3209e084fbfd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTU0OWRlZmI2MjkyMTBhOGZmYzFhZjA4YjMyMDllMDg0ZmJmZDg=", "commit": {"author": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-11T15:04:19Z"}, "committer": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-11T15:04:19Z"}, "message": "Fix @alexcrichton comments", "tree": {"sha": "95bed7600a6ff2e3425884c6feb63f16d54f3da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95bed7600a6ff2e3425884c6feb63f16d54f3da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b5549defb629210a8ffc1af08b3209e084fbfd8", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE4PWe0/2fDR3tomkkxB9lBMEWQgkFAllk6PMACgkQxB9lBMEW\nQgnF1Af/a6F1c/StCoDuwt9kad8Z3n2cRVQhMl2iXGrVHMtCD9WYOE9e8FcFi5lb\nR0V12lQ/jk1IR5+LoAGljN7zx4eD7nHFb3efHYbvFaSvGkBxeXP/ydg9uV44xACu\nuL7TMw8MM1RisbniiDa+3hoH5ODtD2glKR6sFrONQ2s+CA4HDP8MoCwmfx92FmjF\n44CoSC3jxxCF+QojfZvMZk+RqCmak9LJLxLIbDxh0G+O3oWNvVX56SbEbBCxqQ0C\nRVGO2vX13sUWjMddv9qCI6hN+YvJA1Rh2211iUqH4HBiZ9mNVSqnbKvLQ7JrZeTZ\nhB0LpHk8k/QEqY742WldkEpHcj39pA==\n=juCo\n-----END PGP SIGNATURE-----", "payload": "tree 95bed7600a6ff2e3425884c6feb63f16d54f3da3\nparent a45c8b09e86ea4eed283a6163b44c493d15ee5c3\nauthor Lee Bousfield <ljbousfield@gmail.com> 1499785459 -0400\ncommitter Lee Bousfield <ljbousfield@gmail.com> 1499785459 -0400\n\nFix @alexcrichton comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5549defb629210a8ffc1af08b3209e084fbfd8", "html_url": "https://github.com/rust-lang/rust/commit/8b5549defb629210a8ffc1af08b3209e084fbfd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b5549defb629210a8ffc1af08b3209e084fbfd8/comments", "author": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "html_url": "https://github.com/rust-lang/rust/commit/a45c8b09e86ea4eed283a6163b44c493d15ee5c3"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "fb489bf487b8bd66db3823874e67166c31f91d52", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b5549defb629210a8ffc1af08b3209e084fbfd8/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5549defb629210a8ffc1af08b3209e084fbfd8/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=8b5549defb629210a8ffc1af08b3209e084fbfd8", "patch": "@@ -17,7 +17,7 @@ use io::{self, Initializer, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use thread::LocalKey;\n+use thread::{LocalKey, LocalKeyState};\n \n /// Stdout used by print! and println! macros\n thread_local! {\n@@ -674,14 +674,20 @@ fn print_to<T>(args: fmt::Arguments,\n                local_s: &'static LocalKey<RefCell<Option<Box<Write+Send>>>>,\n                global_s: fn() -> T,\n                label: &str) where T: Write {\n-    let result = local_s.try_with(|s| {\n-        if let Ok(mut borrowed) = s.try_borrow_mut() {\n-            if let Some(w) = borrowed.as_mut() {\n-                return w.write_fmt(args);\n-            }\n+    let result = match local_s.state() {\n+        LocalKeyState::Uninitialized |\n+        LocalKeyState::Destroyed => global_s().write_fmt(args),\n+        LocalKeyState::Valid => {\n+            local_s.with(|s| {\n+                if let Ok(mut borrowed) = s.try_borrow_mut() {\n+                    if let Some(w) = borrowed.as_mut() {\n+                        return w.write_fmt(args);\n+                    }\n+                }\n+                global_s().write_fmt(args)\n+            })\n         }\n-        global_s().write_fmt(args)\n-    }).unwrap_or_else(|_| global_s().write_fmt(args));\n+    };\n     if let Err(e) = result {\n         panic!(\"failed printing to {}: {}\", label, e);\n     }"}, {"sha": "07a3a01ce8666074adebb1ccff2d506c0303f1d3", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5549defb629210a8ffc1af08b3209e084fbfd8/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5549defb629210a8ffc1af08b3209e084fbfd8/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=8b5549defb629210a8ffc1af08b3209e084fbfd8", "patch": "@@ -159,7 +159,7 @@ use time::Duration;\n #[macro_use] mod local;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::local::{LocalKey, LocalKeyState};\n+pub use self::local::{LocalKey, LocalKeyState, AccessError};\n \n // The types used by the thread_local! macro to access TLS keys. Note that there\n // are two types, the \"OS\" type and the \"fast\" type. The OS thread local key"}, {"sha": "c072ec0679d73d9c081dfcf53e645adee71e22f5", "filename": "src/test/run-pass/tls-try-with.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b5549defb629210a8ffc1af08b3209e084fbfd8/src%2Ftest%2Frun-pass%2Ftls-try-with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5549defb629210a8ffc1af08b3209e084fbfd8/src%2Ftest%2Frun-pass%2Ftls-try-with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftls-try-with.rs?ref=8b5549defb629210a8ffc1af08b3209e084fbfd8", "patch": "@@ -14,13 +14,16 @@\n \n use std::thread;\n \n+static mut DROP_RUN: bool = false;\n+\n struct Foo;\n \n thread_local!(static FOO: Foo = Foo {});\n \n impl Drop for Foo {\n     fn drop(&mut self) {\n         assert!(FOO.try_with(|_| panic!(\"`try_with` closure run\")).is_err());\n+        unsafe { DROP_RUN = true; }\n     }\n }\n \n@@ -30,4 +33,5 @@ fn main() {\n             132\n         }).expect(\"`try_with` failed\"), 132);\n     }).join().unwrap();\n+    assert!(unsafe { DROP_RUN });\n }"}]}