{"sha": "3b6852abf0d6171151a6dda98a648a1088dabbb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjg1MmFiZjBkNjE3MTE1MWE2ZGRhOThhNjQ4YTEwODhkYWJiYjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-04T11:22:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-04T11:22:11Z"}, "message": "Merge branch 'master' into align_offset", "tree": {"sha": "5287875130931a47a3ae4d649b45227bed8b5f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5287875130931a47a3ae4d649b45227bed8b5f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6852abf0d6171151a6dda98a648a1088dabbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6852abf0d6171151a6dda98a648a1088dabbb9", "html_url": "https://github.com/rust-lang/rust/commit/3b6852abf0d6171151a6dda98a648a1088dabbb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6852abf0d6171151a6dda98a648a1088dabbb9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf25ef9d9d22d91c9bf3ceb8ab2262a16370d171", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf25ef9d9d22d91c9bf3ceb8ab2262a16370d171", "html_url": "https://github.com/rust-lang/rust/commit/cf25ef9d9d22d91c9bf3ceb8ab2262a16370d171"}, {"sha": "9386f05e6d079a7b2a653ae2cf0697f5e9927ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9386f05e6d079a7b2a653ae2cf0697f5e9927ef9", "html_url": "https://github.com/rust-lang/rust/commit/9386f05e6d079a7b2a653ae2cf0697f5e9927ef9"}], "stats": {"total": 133, "additions": 68, "deletions": 65}, "files": [{"sha": "43858eec5719c9259d6c2f91d706e931deed5330", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -16,7 +16,7 @@ script:\n   xargo/build.sh\n - |\n   # Test plain miri\n-  cargo build --release --features \"cargo_miri\" &&\n+  cargo build --locked --release --features \"cargo_miri\" &&\n   cargo test --release --all &&\n   cargo install --features \"cargo_miri\"\n - |\n@@ -31,7 +31,7 @@ script:\n - |\n   # test that the rustc_tests binary compiles\n   cd rustc_tests &&\n-  cargo build --release &&\n+  cargo build --locked --release &&\n   cd ..\n notifications:\n   email:"}, {"sha": "2e0f1e3562ba967f24cad228bdd071f21e285fde", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -2,7 +2,7 @@\n name = \"rustc_miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"backtrace 0.3.2 (git+https://github.com/alexcrichton/backtrace-rs)\",\n+ \"backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -20,10 +20,10 @@ dependencies = [\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.2\"\n-source = \"git+https://github.com/alexcrichton/backtrace-rs#ac8f8d150ad114b735a020c37762426fc7ad18c4\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\",\n+ \"backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -35,7 +35,7 @@ dependencies = [\n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.12\"\n-source = \"git+https://github.com/alexcrichton/backtrace-rs#ac8f8d150ad114b735a020c37762426fc7ad18c4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -68,11 +68,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.2.9\"\n+version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -184,12 +185,11 @@ version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_miri 0.1.0\",\n- \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -343,13 +343,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n-\"checksum backtrace 0.3.2 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n-\"checksum backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n+\"checksum backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99f2ce94e22b8e664d95c57fff45b98a966c2252b60691d0b7aeeccd88d70983\"\n+\"checksum backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afccc5772ba333abccdf60d55200fa3406f8c59dcf54d5f7998c9107d3799c7c\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff81738b726f5d099632ceaffe7fb65b90212e8dce59d518729e7e8634032d3d\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n-\"checksum compiletest_rs 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dc4720203de7b490e2808cad3e9090e8850eed4ecd4176b246551a952f4ead7\"\n+\"checksum compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2741d378feb7a434dba54228c89a70b4e427fee521de67cdda3750b8a0265f5a\"\n \"checksum conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ff10625fd0ac447827aa30ea8b861fead473bb60aeb73af6c1c58caf0d1299\"\n \"checksum custom_derive 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef8ae57c4978a2acd8b869ce6b9ca1dfe817bff704c220209fdef2c0b75a01b9\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\""}, {"sha": "5dbf4521c9885a9fe8f36827c7ad97da407305b6", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -10,18 +10,15 @@ build = \"build.rs\"\n [[bin]]\n doc = false\n name = \"miri\"\n-test = false\n path = \"miri/bin/miri.rs\"\n \n [[bin]]\n doc = false\n name = \"cargo-miri\"\n-test = false\n path = \"miri/bin/cargo-miri.rs\"\n required-features = [\"cargo_miri\"]\n \n [lib]\n-test = false\n path = \"miri/lib.rs\"\n \n [dependencies]\n@@ -36,8 +33,7 @@ rustc_miri = { path = \"src/librustc_mir\" }\n cargo_miri = [\"cargo_metadata\"]\n \n [dev-dependencies]\n-compiletest_rs = \"0.2.6\"\n-tempdir = \"0.3\"\n+compiletest_rs = { version = \"0.2.10\", features = [\"tmp\"] }\n \n [workspace]\n exclude = [\"xargo\", \"cargo-miri-test\", \"rustc_tests\"]"}, {"sha": "a1e273a96bdb8a21440f880d2b27d3e402ae69f9", "filename": "rustc_tests/Cargo.lock", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/rustc_tests%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/rustc_tests%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2FCargo.lock?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -15,25 +15,25 @@ dependencies = [\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.2\"\n-source = \"git+https://github.com/alexcrichton/backtrace-rs#ac8f8d150ad114b735a020c37762426fc7ad18c4\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\",\n+ \"backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.12\"\n-source = \"git+https://github.com/alexcrichton/backtrace-rs#ac8f8d150ad114b735a020c37762426fc7ad18c4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -85,7 +85,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.28\"\n+version = \"0.2.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -106,7 +106,7 @@ name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -146,7 +146,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"rustc_miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"backtrace 0.3.2 (git+https://github.com/alexcrichton/backtrace-rs)\",\n+ \"backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -193,16 +193,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n-\"checksum backtrace 0.3.2 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n-\"checksum backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n+\"checksum backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99f2ce94e22b8e664d95c57fff45b98a966c2252b60691d0b7aeeccd88d70983\"\n+\"checksum backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afccc5772ba333abccdf60d55200fa3406f8c59dcf54d5f7998c9107d3799c7c\"\n \"checksum byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff81738b726f5d099632ceaffe7fb65b90212e8dce59d518729e7e8634032d3d\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n \"checksum gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8310f7e9c890398b0e80e301c4f474e9918d2b27fca8f48486ca775fa9ffc5a\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n-\"checksum libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb7b49972ee23d8aa1026c365a5b440ba08e35075f18c459980c7395c221ec48\"\n+\"checksum libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2370ca07ec338939e356443dac2296f581453c35fe1e3a3ed06023c49435f915\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\""}, {"sha": "c72de828c8d2b813580d794f197bd75f251d15da", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -16,4 +16,4 @@ log = \"0.3.6\"\n log_settings = \"0.1.1\"\n lazy_static = \"0.2.8\"\n regex = \"0.2.2\"\n-backtrace = { version = \"0.3\", git = \"https://github.com/alexcrichton/backtrace-rs\" }\n+backtrace = \"0.3.3\""}, {"sha": "44777caa4f5d2f8e085c9990a3ef27135dd03064", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -4,7 +4,7 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::middle::const_val::ConstVal;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n use rustc::mir;\n use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size, Align, HasDataLayout};\n@@ -106,7 +106,7 @@ pub enum StackPopCleanup {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DynamicLifetime {\n     pub frame: usize,\n-    pub region: Option<CodeExtent>, // \"None\" indicates \"until the function ends\"\n+    pub region: Option<region::Scope>, // \"None\" indicates \"until the function ends\"\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "7454f1c908e0f1d34b5f16986308a355af6e8513", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -6,7 +6,7 @@ use std::cell::Cell;\n use rustc::ty::Instance;\n use rustc::ty::layout::{self, TargetDataLayout, HasDataLayout};\n use syntax::ast::Mutability;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n \n use super::{EvalResult, EvalErrorKind, PrimVal, Pointer, EvalContext, DynamicLifetime, Machine,\n             RangeMap};\n@@ -26,7 +26,7 @@ pub enum AccessKind {\n struct LockInfo {\n     /// Stores for which lifetimes (of the original write lock) we got\n     /// which suspensions.\n-    suspended: HashMap<DynamicLifetime, Vec<CodeExtent>>,\n+    suspended: HashMap<DynamicLifetime, Vec<region::Scope>>,\n     /// The current state of the lock that's actually effective.\n     active: Lock,\n }\n@@ -567,7 +567,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        region: Option<CodeExtent>,\n+        region: Option<region::Scope>,\n         kind: AccessKind,\n     ) -> EvalResult<'tcx> {\n         let frame = self.cur_frame;\n@@ -620,8 +620,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        lock_region: Option<CodeExtent>,\n-        suspend: Option<CodeExtent>,\n+        lock_region: Option<region::Scope>,\n+        suspend: Option<region::Scope>,\n     ) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n@@ -680,8 +680,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        lock_region: Option<CodeExtent>,\n-        suspended_region: CodeExtent,\n+        lock_region: Option<region::Scope>,\n+        suspended_region: region::Scope,\n     ) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n@@ -741,7 +741,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(crate) fn locks_lifetime_ended(&mut self, ending_region: Option<CodeExtent>) {\n+    pub(crate) fn locks_lifetime_ended(&mut self, ending_region: Option<region::Scope>) {\n         let cur_frame = self.cur_frame;\n         trace!(\n             \"Releasing frame {} locks that expire at {:?}\","}, {"sha": "7dfc781520cde0e8ce782a349f5b3ce65e2ca58f", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::subst::{Substs, Subst};\n use rustc::traits;\n use rustc::infer::InferCtxt;\n use rustc::traits::Reveal;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n \n use super::{EvalError, EvalResult, EvalErrorKind, EvalContext, DynamicLifetime, AccessKind, Value,\n             Lvalue, LvalueExtra, Machine};\n@@ -17,8 +17,8 @@ pub type ValidationQuery<'tcx> = ValidationOperand<'tcx, Lvalue>;\n enum ValidationMode {\n     Acquire,\n     /// Recover because the given region ended\n-    Recover(CodeExtent),\n-    ReleaseUntil(Option<CodeExtent>),\n+    Recover(region::Scope),\n+    ReleaseUntil(Option<region::Scope>),\n }\n \n impl ValidationMode {\n@@ -89,34 +89,34 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let mode = match op {\n             ValidationOp::Acquire => ValidationMode::Acquire,\n             ValidationOp::Release => ValidationMode::ReleaseUntil(None),\n-            ValidationOp::Suspend(ce) => {\n+            ValidationOp::Suspend(scope) => {\n                 if query.mutbl == MutMutable {\n                     let lft = DynamicLifetime {\n                         frame: self.cur_frame(),\n-                        region: Some(ce),\n+                        region: Some(scope),\n                     };\n-                    trace!(\"Suspending {:?} until {:?}\", query, ce);\n+                    trace!(\"Suspending {:?} until {:?}\", query, scope);\n                     self.suspended.entry(lft).or_insert_with(Vec::new).push(\n                         query.clone(),\n                     );\n                 }\n-                ValidationMode::ReleaseUntil(Some(ce))\n+                ValidationMode::ReleaseUntil(Some(scope))\n             }\n         };\n         self.validate(query, mode)\n     }\n \n-    pub(crate) fn end_region(&mut self, ce: CodeExtent) -> EvalResult<'tcx> {\n-        self.memory.locks_lifetime_ended(Some(ce));\n+    pub(crate) fn end_region(&mut self, scope: region::Scope) -> EvalResult<'tcx> {\n+        self.memory.locks_lifetime_ended(Some(scope));\n         // Recover suspended lvals\n         let lft = DynamicLifetime {\n             frame: self.cur_frame(),\n-            region: Some(ce),\n+            region: Some(scope),\n         };\n         if let Some(queries) = self.suspended.remove(&lft) {\n             for query in queries {\n                 trace!(\"Recovering {:?} from suspension\", query);\n-                self.validate(query, ValidationMode::Recover(ce))?;\n+                self.validate(query, ValidationMode::Recover(scope))?;\n             }\n         }\n         Ok(())\n@@ -268,7 +268,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         &mut self,\n         val: Value,\n         pointee_ty: Ty<'tcx>,\n-        re: Option<CodeExtent>,\n+        re: Option<region::Scope>,\n         mutbl: Mutability,\n         mode: ValidationMode,\n     ) -> EvalResult<'tcx> {\n@@ -459,7 +459,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 // we record the region of this borrow to the context.\n                 if query.re == None {\n                     match *region {\n-                        ReScope(ce) => query.re = Some(ce),\n+                        ReScope(scope) => query.re = Some(scope),\n                         // It is possible for us to encounter erased lifetimes here because the lifetimes in\n                         // this functions' Subst will be erased.\n                         _ => {}"}, {"sha": "f9d99206e27816e067f8dd7f07d5cb4f26b52ad9", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -1,12 +1,10 @@\n #![feature(slice_concat_ext)]\n \n extern crate compiletest_rs as compiletest;\n-extern crate tempdir;\n \n use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n-use tempdir::TempDir;\n \n macro_rules! eprintln {\n     ($($arg:tt)*) => {\n@@ -37,10 +35,8 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n         path,\n         target\n     );\n-    let build_dir = TempDir::new(\"miri-tests\").unwrap();\n-    let mut config = compiletest::Config::default();\n+    let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n-    config.build_base = build_dir.path().to_owned();\n     config.rustc_path = miri_path();\n     let mut flags = Vec::new();\n     if rustc_test_suite().is_some() {\n@@ -70,10 +66,8 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n \n fn run_pass(path: &str) {\n     eprintln!(\"## Running run-pass tests in {} against rustc\", path);\n-    let build_dir = TempDir::new(\"miri-tests\").unwrap();\n-    let mut config = compiletest::Config::default();\n+    let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n-    config.build_base = build_dir.path().to_owned();\n     config.src_base = PathBuf::from(path);\n     if let Some(rustc_path) = rustc_test_suite() {\n         config.rustc_path = rustc_path;\n@@ -95,10 +89,8 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n         target,\n         opt_str\n     );\n-    let build_dir = TempDir::new(\"miri-tests\").unwrap();\n-    let mut config = compiletest::Config::default();\n+    let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n-    config.build_base = build_dir.path().to_owned();\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.host = host.to_owned();"}, {"sha": "fd44e04ee22c80e0827a2934b2e5138e4f0becb7", "filename": "tests/run-pass/dst-field-align.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-field-align.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME: Broken by #296\n+// compile-flags: -Zmir-emit-validate=0\n+\n #![allow(dead_code)]\n \n struct Foo<T: ?Sized> {"}, {"sha": "194bc9be0ad6ab05613b8f63bfe2b7fd7345e275", "filename": "tests/run-pass/mir_coercions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_coercions.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n #![feature(coerce_unsized, unsize)]\n \n use std::ops::CoerceUnsized;"}, {"sha": "0578ecbbb12908f5ca4ff48016bc7109662c1d7e", "filename": "tests/run-pass/non_capture_closure_to_fn_ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n // allow(const_err) to work around a bug in warnings\n #[allow(const_err)]\n static FOO: fn() = || { assert_ne!(42, 43) };"}, {"sha": "ae4a9eb5cf10efefe20a430df0004ab9ab13fba1", "filename": "tests/run-pass/subslice_array.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fsubslice_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Fsubslice_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsubslice_array.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n #![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n "}, {"sha": "426e1360a3d14237a3a8e2afbc76154b7eda8d29", "filename": "tests/run-pass/tuple_like_enum_variant_constructor_pointer_opt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6852abf0d6171151a6dda98a648a1088dabbb9/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs?ref=3b6852abf0d6171151a6dda98a648a1088dabbb9", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n fn main() {\n     let x = 5;\n     assert_eq!(Some(&x).map(Some), Some(Some(&x)));"}]}