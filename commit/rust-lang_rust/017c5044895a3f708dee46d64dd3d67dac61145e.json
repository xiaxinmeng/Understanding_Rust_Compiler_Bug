{"sha": "017c5044895a3f708dee46d64dd3d67dac61145e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxN2M1MDQ0ODk1YTNmNzA4ZGVlNDZkNjRkZDNkNjdkYWM2MTE0NWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T01:07:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T18:48:04Z"}, "message": "syntax: Expand format!() deterministically\n\nPreviously, format!(\"{a}{b}\", a=foo(), b=bar()) has foo() and bar() run in a\nnondeterminisc order. This is clearly a non-desirable property, so this commit\nuses iteration over a list instead of iteration over a hash map to provide\ndeterministic code generation of these format arguments.", "tree": {"sha": "e6a509363a77afee8d59d236e478e7e43fd52c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6a509363a77afee8d59d236e478e7e43fd52c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017c5044895a3f708dee46d64dd3d67dac61145e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017c5044895a3f708dee46d64dd3d67dac61145e", "html_url": "https://github.com/rust-lang/rust/commit/017c5044895a3f708dee46d64dd3d67dac61145e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017c5044895a3f708dee46d64dd3d67dac61145e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec57db083ff10fc4da0a2f25df5acf1d4398e560", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec57db083ff10fc4da0a2f25df5acf1d4398e560", "html_url": "https://github.com/rust-lang/rust/commit/ec57db083ff10fc4da0a2f25df5acf1d4398e560"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "4b9925c8d9f3e9a4875d623dac5ba4afe34bc500", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/017c5044895a3f708dee46d64dd3d67dac61145e/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c5044895a3f708dee46d64dd3d67dac61145e/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=017c5044895a3f708dee46d64dd3d67dac61145e", "patch": "@@ -135,5 +135,6 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n     // phew, not our responsibility any more!\n     format::expand_preparsed_format_args(cx, span,\n                                          format_closure,\n-                                         format_string, exprs, HashMap::new())\n+                                         format_string, exprs, ~[],\n+                                         HashMap::new())\n }"}, {"sha": "2642ee00458c12015861328f26194e030f5b1cff", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/017c5044895a3f708dee46d64dd3d67dac61145e/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c5044895a3f708dee46d64dd3d67dac61145e/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=017c5044895a3f708dee46d64dd3d67dac61145e", "patch": "@@ -43,9 +43,13 @@ struct Context<'a> {\n     // them.\n     args: ~[@ast::Expr],\n     arg_types: ~[Option<ArgumentType>],\n-    // Parsed named expressions and the types that we've found for them so far\n+    // Parsed named expressions and the types that we've found for them so far.\n+    // Note that we keep a side-array of the ordering of the named arguments\n+    // found to be sure that we can translate them in the same order that they\n+    // were declared in.\n     names: HashMap<~str, @ast::Expr>,\n     name_types: HashMap<~str, ArgumentType>,\n+    name_ordering: ~[~str],\n \n     // Collection of the compiled `rt::Piece` structures\n     pieces: ~[@ast::Expr],\n@@ -63,12 +67,15 @@ struct Context<'a> {\n ///\n /// If parsing succeeds, the second return value is:\n ///\n-///     Some((fmtstr, unnamed arguments, named arguments))\n-fn parse_args(ecx: &mut ExtCtxt, sp: Span,\n-              tts: &[ast::TokenTree]) -> (@ast::Expr, Option<(@ast::Expr, ~[@ast::Expr],\n-                                                              HashMap<~str, @ast::Expr>)>) {\n+///     Some((fmtstr, unnamed arguments, ordering of named arguments,\n+///           named arguments))\n+fn parse_args(ecx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n+    -> (@ast::Expr, Option<(@ast::Expr, ~[@ast::Expr], ~[~str],\n+                            HashMap<~str, @ast::Expr>)>)\n+{\n     let mut args = ~[];\n     let mut names = HashMap::<~str, @ast::Expr>::new();\n+    let mut order = ~[];\n \n     let mut p = rsparse::new_parser_from_tts(ecx.parse_sess(),\n                                              ecx.cfg(),\n@@ -125,12 +132,13 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span,\n                     continue\n                 }\n             }\n+            order.push(name.to_str());\n             names.insert(name.to_str(), e);\n         } else {\n             args.push(p.parse_expr());\n         }\n     }\n-    return (extra, Some((fmtstr, args, names)));\n+    return (extra, Some((fmtstr, args, order, names)));\n }\n \n impl<'a> Context<'a> {\n@@ -661,10 +669,11 @@ impl<'a> Context<'a> {\n             locals.push(self.format_arg(e.span, Exact(i),\n                                         self.ecx.expr_ident(e.span, name)));\n         }\n-        for (name, &e) in self.names.iter() {\n-            if !self.name_types.contains_key(name) {\n-                continue\n-            }\n+        for name in self.name_ordering.iter() {\n+            let e = match self.names.find(name) {\n+                Some(&e) if self.name_types.contains_key(name) => e,\n+                Some(..) | None => continue\n+            };\n \n             let lname = self.ecx.ident_of(format!(\"__arg{}\", *name));\n             pats.push(self.ecx.pat_ident(e.span, lname));\n@@ -810,8 +819,9 @@ pub fn expand_args(ecx: &mut ExtCtxt, sp: Span,\n                    tts: &[ast::TokenTree]) -> base::MacResult {\n \n     match parse_args(ecx, sp, tts) {\n-        (extra, Some((efmt, args, names))) => {\n-            MRExpr(expand_preparsed_format_args(ecx, sp, extra, efmt, args, names))\n+        (extra, Some((efmt, args, order, names))) => {\n+            MRExpr(expand_preparsed_format_args(ecx, sp, extra, efmt, args,\n+                                                order, names))\n         }\n         (_, None) => MRExpr(ecx.expr_uint(sp, 2))\n     }\n@@ -823,6 +833,7 @@ pub fn expand_args(ecx: &mut ExtCtxt, sp: Span,\n pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                     extra: @ast::Expr,\n                                     efmt: @ast::Expr, args: ~[@ast::Expr],\n+                                    name_ordering: ~[~str],\n                                     names: HashMap<~str, @ast::Expr>) -> @ast::Expr {\n     let arg_types = vec::from_fn(args.len(), |_| None);\n     let mut cx = Context {\n@@ -832,6 +843,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         names: names,\n         name_positions: HashMap::new(),\n         name_types: HashMap::new(),\n+        name_ordering: name_ordering,\n         nest_level: 0,\n         next_arg: 0,\n         pieces: ~[],"}, {"sha": "564f7b43426395d756c2a23b730c8290ac6236b2", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/017c5044895a3f708dee46d64dd3d67dac61145e/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c5044895a3f708dee46d64dd3d67dac61145e/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=017c5044895a3f708dee46d64dd3d67dac61145e", "patch": "@@ -139,6 +139,7 @@ pub fn main() {\n \n     test_write();\n     test_print();\n+    test_order();\n \n     // make sure that format! doesn't move out of local variables\n     let a = ~3;\n@@ -202,3 +203,18 @@ fn test_format_args() {\n     let s = format_args!(fmt::format, \"hello {}\", \"world\");\n     t!(s, \"hello world\");\n }\n+\n+fn test_order() {\n+    // Make sure format!() arguments are always evaluated in a left-to-right\n+    // ordering\n+    fn foo() -> int {\n+        static mut FOO: int = 0;\n+        unsafe {\n+            FOO += 1;\n+            FOO\n+        }\n+    }\n+    assert_eq!(format!(\"{} {} {a} {b} {} {c}\",\n+                       foo(), foo(), foo(), a=foo(), b=foo(), c=foo()),\n+               ~\"1 2 4 5 3 6\");\n+}"}]}