{"sha": "e873eef1e37eb45bdafda02ad4a3a4d599cee401", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NzNlZWYxZTM3ZWI0NWJkYWZkYTAyYWQ0YTNhNGQ1OTljZWU0MDE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-07T08:26:12Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:05:05Z"}, "message": "explicitly handle errors in fulfill", "tree": {"sha": "dd7bfec75244a1844196b89e07080beb469c24dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7bfec75244a1844196b89e07080beb469c24dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e873eef1e37eb45bdafda02ad4a3a4d599cee401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e873eef1e37eb45bdafda02ad4a3a4d599cee401", "html_url": "https://github.com/rust-lang/rust/commit/e873eef1e37eb45bdafda02ad4a3a4d599cee401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e873eef1e37eb45bdafda02ad4a3a4d599cee401/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd7ea88fb887627dd551309b951a5b69ea90d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd7ea88fb887627dd551309b951a5b69ea90d98", "html_url": "https://github.com/rust-lang/rust/commit/afd7ea88fb887627dd551309b951a5b69ea90d98"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "98f6ac0e5472846c326a727447cd932c6dfb7ff2", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e873eef1e37eb45bdafda02ad4a3a4d599cee401/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e873eef1e37eb45bdafda02ad4a3a4d599cee401/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=e873eef1e37eb45bdafda02ad4a3a4d599cee401", "patch": "@@ -2,6 +2,7 @@ use crate::infer::{InferCtxt, TyOrConstInferVar};\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n+use rustc_errors::ErrorReported;\n use rustc_infer::traits::{TraitEngine, TraitEngineExt as _};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -544,11 +545,9 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                                         .filter_map(|ty| TyOrConstInferVar::maybe_from_ty(ty))\n                                         .collect(),\n                                 );\n-                                Err(ProcessResult::Unchanged)\n-                            }\n-                            Err(err) => {\n-                                Err(ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err))))\n+                                Err(ErrorHandled::TooGeneric)\n                             }\n+                            Err(err) => Err(err),\n                         }\n                     } else {\n                         Ok(c)\n@@ -572,15 +571,17 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                             }\n                         }\n                     }\n-                    // FIXME(skinny121) How to report both errors if both produces errors?\n-                    (Err(result @ ProcessResult::Error(_)), _)\n-                    | (_, Err(result @ ProcessResult::Error(_))) => result,\n-                    (Err(ProcessResult::Unchanged), _) | (_, Err(ProcessResult::Unchanged)) => {\n+                    (Err(ErrorHandled::Reported(ErrorReported)), _)\n+                    | (_, Err(ErrorHandled::Reported(ErrorReported))) => ProcessResult::Error(\n+                        CodeSelectionError(ConstEvalFailure(ErrorHandled::Reported(ErrorReported))),\n+                    ),\n+                    (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => span_bug!(\n+                        obligation.cause.span(self.selcx.tcx()),\n+                        \"ConstEquate: const_eval_resolve returned an unexpected error\"\n+                    ),\n+                    (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n                         ProcessResult::Unchanged\n                     }\n-                    _ => {\n-                        unreachable!(\"evaluate shouldn't itself return ProcessResult::Changed(..)\")\n-                    }\n                 }\n             }\n         }"}, {"sha": "9a7844f5e8f10e1f60eb8255207469ffad2ef7d0", "filename": "src/test/ui/const-generics/lazy-normalization/lazy-normalization-feature-gate.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e873eef1e37eb45bdafda02ad4a3a4d599cee401/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e873eef1e37eb45bdafda02ad4a3a4d599cee401/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.stderr?ref=e873eef1e37eb45bdafda02ad4a3a4d599cee401", "patch": "@@ -1,40 +1,40 @@\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/lazy-normalization-feature-gate-hack.rs:2:12\n+  --> $DIR/lazy-normalization-feature-gate.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0391]: cycle detected when const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate-hack.rs:6:1: 6:72>::{{constant}}#0`\n-  --> $DIR/lazy-normalization-feature-gate-hack.rs:6:58\n+error[E0391]: cycle detected when const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`\n+  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n    |\n LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n    |                                                          ^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate-hack.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate-hack.rs:6:58\n+note: ...which requires const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n+  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n    |\n LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n    |                                                          ^^^^^^^^^^\n-note: ...which requires const-evaluating `<impl at $DIR/lazy-normalization-feature-gate-hack.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate-hack.rs:6:58\n+note: ...which requires const-evaluating `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n+  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n    |\n LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n    |                                                          ^^^^^^^^^^\n-note: ...which requires type-checking `<impl at $DIR/lazy-normalization-feature-gate-hack.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate-hack.rs:6:58\n+note: ...which requires type-checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n+  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n    |\n LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n    |                                                          ^^^^^^^^^^\n-note: ...which requires processing `<impl at $DIR/lazy-normalization-feature-gate-hack.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate-hack.rs:6:58\n+note: ...which requires processing `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n+  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n    |\n LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n    |                                                          ^^^^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate-hack.rs:6:1: 6:72>::{{constant}}#0`, completing the cycle\n-note: cycle used when processing `<impl at $DIR/lazy-normalization-feature-gate-hack.rs:6:1: 6:72>`\n-  --> $DIR/lazy-normalization-feature-gate-hack.rs:6:1\n+   = note: ...which again requires const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`, completing the cycle\n+note: cycle used when processing `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>`\n+  --> $DIR/lazy-normalization-feature-gate.rs:6:1\n    |\n LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}