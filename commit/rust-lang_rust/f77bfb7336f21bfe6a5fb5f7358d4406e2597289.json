{"sha": "f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "node_id": "C_kwDOAAsO6NoAKGY3N2JmYjczMzZmMjFiZmU2YTVmYjVmNzM1OGQ0NDA2ZTI1OTcyODk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-01T18:51:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-01T18:51:29Z"}, "message": "Auto merge of #108620 - Dylan-DPC:rollup-o5c4evy, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108143 (rustdoc: search by macro when query ends with `!`)\n - #108394 (Make `x doc --open` work on every book)\n - #108427 (Recover from for-else and while-else)\n - #108462 (Fix `VecDeque::append` capacity overflow for ZSTs)\n - #108568 (Make associated_item_def_ids for traits use an unstable option to also return associated types for RPITITs)\n - #108604 (Add regression test for #107280)\n - #108605 (Add regression test for #105821)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7738ae65bf5cf98431ea15fc7f82234343a9b939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7738ae65bf5cf98431ea15fc7f82234343a9b939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "html_url": "https://github.com/rust-lang/rust/commit/f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "609496eecf5dcf335c1808e4bc1eee58d489a14b", "url": "https://api.github.com/repos/rust-lang/rust/commits/609496eecf5dcf335c1808e4bc1eee58d489a14b", "html_url": "https://github.com/rust-lang/rust/commit/609496eecf5dcf335c1808e4bc1eee58d489a14b"}, {"sha": "02e4eefd88a55776cbb163c1ba025f0736e52026", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e4eefd88a55776cbb163c1ba025f0736e52026", "html_url": "https://github.com/rust-lang/rust/commit/02e4eefd88a55776cbb163c1ba025f0736e52026"}], "stats": {"total": 714, "additions": 642, "deletions": 72}, "files": [{"sha": "ccb07804b9661d9415965592f86525b77bc3197b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -1101,9 +1101,18 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n     }\n }\n \n-// Return `false` to avoid encoding impl trait in trait, while we don't use the query.\n-fn should_encode_fn_impl_trait_in_trait<'tcx>(_tcx: TyCtxt<'tcx>, _def_id: DefId) -> bool {\n-    false\n+// We only encode impl trait in trait when using `lower-impl-trait-in-trait-to-assoc-ty` unstable\n+// option.\n+fn should_encode_fn_impl_trait_in_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty\n+        && let Some(assoc_item) = tcx.opt_associated_item(def_id)\n+        && assoc_item.container == ty::AssocItemContainer::TraitContainer\n+        && assoc_item.kind == ty::AssocKind::Fn\n+    {\n+        true\n+    } else {\n+        false\n+    }\n }\n \n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {"}, {"sha": "c9da711e556f5b9d0f7670f4b94f6a1bda4e1790", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -177,6 +177,7 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n+    providers.opt_rpitit_info = |_, _| None;\n     providers.all_local_trait_impls = |tcx, ()| &tcx.resolutions(()).trait_impls;\n     providers.expn_that_defined = |tcx, id| {\n         let id = id.expect_local();"}, {"sha": "51feae3cf8a6184ba9f23e5d381ae75d4fc3b1ce", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -90,6 +90,7 @@ rustc_queries! {\n     /// Definitions that were generated with no HIR, would be feeded to return `None`.\n     query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        feedable\n     }\n \n     /// Gives access to the HIR node's parent for the HIR owner `key`.\n@@ -166,6 +167,7 @@ rustc_queries! {\n         }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query collect_return_position_impl_trait_in_trait_tys(key: DefId)\n@@ -222,6 +224,7 @@ rustc_queries! {\n         arena_cache\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n@@ -264,6 +267,7 @@ rustc_queries! {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Elaborated version of the predicates from `explicit_item_bounds`.\n@@ -588,6 +592,7 @@ rustc_queries! {\n         desc { |tcx| \"computing explicit predicates of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Returns the inferred outlives predicates (e.g., for `struct\n@@ -596,6 +601,7 @@ rustc_queries! {\n         desc { |tcx| \"computing inferred outlives predicates of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Maps from the `DefId` of a trait to the list of\n@@ -728,6 +734,7 @@ rustc_queries! {\n         desc { |tcx| \"computing associated item data for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Collects the associated items defined on a trait or impl.\n@@ -1142,6 +1149,15 @@ rustc_queries! {\n         desc { |tcx| \"looking up definition kind of `{}`\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n+    }\n+\n+    /// The `opt_rpitit_info` query returns the pair of the def id of the function where the RPIT\n+    /// is defined and the opaque def id if any.\n+    query opt_rpitit_info(def_id: DefId) -> Option<ty::ImplTraitInTraitData> {\n+        desc { |tcx| \"opt_rpitit_info `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n+        feedable\n     }\n \n     /// Gets the span for the definition.\n@@ -1157,6 +1173,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query lookup_stability(def_id: DefId) -> Option<attr::Stability> {\n@@ -1498,6 +1515,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query check_well_formed(key: hir::OwnerId) -> () {\n@@ -1695,6 +1713,7 @@ rustc_queries! {\n     query visibility(def_id: DefId) -> ty::Visibility<DefId> {\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n+        feedable\n     }\n \n     query inhabited_predicate_adt(key: DefId) -> ty::inhabitedness::InhabitedPredicate<'tcx> {"}, {"sha": "5df01b8abc3b20a7e05a4af923e2a96f703de815", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -2071,6 +2071,12 @@ pub enum ImplOverlapKind {\n     Issue33140,\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+pub enum ImplTraitInTraitData {\n+    Trait { fn_def_id: DefId, opaque_def_id: DefId },\n+    Impl { fn_def_id: DefId },\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {\n         self.typeck(self.hir().body_owner_def_id(body))"}, {"sha": "e76e91fc1b1351eb00cd8aa6c4923a47e2b76e40", "filename": "compiler/rustc_parse/locales/en-US.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -151,6 +151,10 @@ parse_missing_in_in_for_loop = missing `in` in `for` loop\n parse_missing_expression_in_for_loop = missing expression to iterate on in `for` loop\n     .suggestion = try adding an expression to the `for` loop\n \n+parse_loop_else = `{$loop_kind}...else` loops are not supported\n+    .note = consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    .loop_keyword = `else` is attached to this loop\n+\n parse_missing_comma_after_match_arm = expected `,` following `match` arm\n     .suggestion = missing a comma here to end this `match` arm\n "}, {"sha": "1662db36d10f915372baef23964aa54e7ef3b337", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -451,6 +451,17 @@ pub(crate) struct MissingExpressionInForLoop {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_loop_else)]\n+#[note]\n+pub(crate) struct LoopElseNotSupported {\n+    #[primary_span]\n+    pub span: Span,\n+    pub loop_kind: &'static str,\n+    #[label(parse_loop_keyword)]\n+    pub loop_kw: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_missing_comma_after_match_arm)]\n pub(crate) struct MissingCommaAfterMatchArm {"}, {"sha": "b2951e7a1847dfa1ac4314c033a8a551d930226d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -2503,9 +2503,27 @@ impl<'a> Parser<'a> {\n         let (attrs, loop_block) = self.parse_inner_attrs_and_block()?;\n \n         let kind = ExprKind::ForLoop(pat, expr, loop_block, opt_label);\n+\n+        self.recover_loop_else(\"for\", lo)?;\n+\n         Ok(self.mk_expr_with_attrs(lo.to(self.prev_token.span), kind, attrs))\n     }\n \n+    /// Recovers from an `else` clause after a loop (`for...else`, `while...else`)\n+    fn recover_loop_else(&mut self, loop_kind: &'static str, loop_kw: Span) -> PResult<'a, ()> {\n+        if self.token.is_keyword(kw::Else) && self.may_recover() {\n+            let else_span = self.token.span;\n+            self.bump();\n+            let else_clause = self.parse_expr_else()?;\n+            self.sess.emit_err(errors::LoopElseNotSupported {\n+                span: else_span.to(else_clause.span),\n+                loop_kind,\n+                loop_kw,\n+            });\n+        }\n+        Ok(())\n+    }\n+\n     fn error_missing_in_for_loop(&mut self) {\n         let (span, sub): (_, fn(_) -> _) = if self.token.is_ident_named(sym::of) {\n             // Possibly using JS syntax (#75311).\n@@ -2530,6 +2548,9 @@ impl<'a> Parser<'a> {\n             err.span_label(cond.span, \"this `while` condition successfully parsed\");\n             err\n         })?;\n+\n+        self.recover_loop_else(\"while\", lo)?;\n+\n         Ok(self.mk_expr_with_attrs(\n             lo.to(self.prev_token.span),\n             ExprKind::While(cond, body, opt_label),\n@@ -2541,6 +2562,7 @@ impl<'a> Parser<'a> {\n     fn parse_expr_loop(&mut self, opt_label: Option<Label>, lo: Span) -> PResult<'a, P<Expr>> {\n         let loop_span = self.prev_token.span;\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n+        self.recover_loop_else(\"loop\", lo)?;\n         Ok(self.mk_expr_with_attrs(\n             lo.to(self.prev_token.span),\n             ExprKind::Loop(body, opt_label, loop_span),"}, {"sha": "b466a3fcdee915891e444fa6f81021e7b3a44b7c", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -1503,6 +1503,9 @@ options! {\n         \"what location details should be tracked when using caller_location, either \\\n         `none`, or a comma separated list of location details, for which \\\n         valid options are `file`, `line`, and `column` (default: `file,line,column`)\"),\n+    lower_impl_trait_in_trait_to_assoc_ty: bool = (false, parse_bool, [TRACKED],\n+        \"modify the lowering strategy for `impl Trait` in traits so that they are lowered to \\\n+        generic associated types\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "efbbfe6c24b560c5f64251a6edd250255587e4a2", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 90, "deletions": 6, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -4,7 +4,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, ImplTraitInTraitData, InternalSubsts, TyCtxt};\n+use rustc_span::symbol::kw;\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n@@ -21,9 +22,37 @@ pub fn provide(providers: &mut ty::query::Providers) {\n fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     let item = tcx.hir().expect_item(def_id.expect_local());\n     match item.kind {\n-        hir::ItemKind::Trait(.., ref trait_item_refs) => tcx.arena.alloc_from_iter(\n-            trait_item_refs.iter().map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id()),\n-        ),\n+        hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+                // We collect RPITITs for each trait method's return type and create a\n+                // corresponding associated item using associated_items_for_impl_trait_in_trait\n+                // query.\n+                tcx.arena.alloc_from_iter(\n+                    trait_item_refs\n+                        .iter()\n+                        .map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id())\n+                        .chain(\n+                            trait_item_refs\n+                                .iter()\n+                                .filter(|trait_item_ref| {\n+                                    matches!(trait_item_ref.kind, hir::AssocItemKind::Fn { .. })\n+                                })\n+                                .flat_map(|trait_item_ref| {\n+                                    let trait_fn_def_id =\n+                                        trait_item_ref.id.owner_id.def_id.to_def_id();\n+                                    tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id)\n+                                })\n+                                .map(|def_id| *def_id),\n+                        ),\n+                )\n+            } else {\n+                tcx.arena.alloc_from_iter(\n+                    trait_item_refs\n+                        .iter()\n+                        .map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id()),\n+                )\n+            }\n+        }\n         hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n             impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n         ),\n@@ -193,10 +222,65 @@ fn associated_item_for_impl_trait_in_trait(\n     let span = tcx.def_span(opaque_ty_def_id);\n     let trait_assoc_ty =\n         tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n-    trait_assoc_ty.def_id()\n+\n+    let local_def_id = trait_assoc_ty.def_id();\n+    let def_id = local_def_id.to_def_id();\n+\n+    trait_assoc_ty.opt_def_kind(Some(DefKind::AssocTy));\n+\n+    // There's no HIR associated with this new synthesized `def_id`, so feed\n+    // `opt_local_def_id_to_hir_id` with `None`.\n+    trait_assoc_ty.opt_local_def_id_to_hir_id(None);\n+\n+    // Copy span of the opaque.\n+    trait_assoc_ty.def_ident_span(Some(span));\n+\n+    // Add the def_id of the function and opaque that generated this synthesized associated type.\n+    trait_assoc_ty.opt_rpitit_info(Some(ImplTraitInTraitData::Trait {\n+        fn_def_id,\n+        opaque_def_id: opaque_ty_def_id.to_def_id(),\n+    }));\n+\n+    trait_assoc_ty.associated_item(ty::AssocItem {\n+        name: kw::Empty,\n+        kind: ty::AssocKind::Type,\n+        def_id,\n+        trait_item_def_id: None,\n+        container: ty::TraitContainer,\n+        fn_has_self_parameter: false,\n+    });\n+\n+    // Copy visility of the containing function.\n+    trait_assoc_ty.visibility(tcx.visibility(fn_def_id));\n+\n+    // Copy impl_defaultness of the containing function.\n+    trait_assoc_ty.impl_defaultness(tcx.impl_defaultness(fn_def_id));\n+\n+    // Copy type_of of the opaque.\n+    trait_assoc_ty.type_of(ty::EarlyBinder(tcx.mk_opaque(\n+        opaque_ty_def_id.to_def_id(),\n+        InternalSubsts::identity_for_item(tcx, opaque_ty_def_id.to_def_id()),\n+    )));\n+\n+    // Copy generics_of of the opaque.\n+    trait_assoc_ty.generics_of(tcx.generics_of(opaque_ty_def_id).clone());\n+\n+    // There are no predicates for the synthesized associated type.\n+    trait_assoc_ty.explicit_predicates_of(ty::GenericPredicates {\n+        parent: Some(trait_def_id),\n+        predicates: &[],\n+    });\n+\n+    // There are no inferred outlives for the synthesized associated type.\n+    trait_assoc_ty.inferred_outlives_of(&[]);\n+\n+    // FIXME implement this.\n+    trait_assoc_ty.explicit_item_bounds(&[]);\n+\n+    local_def_id\n }\n \n-/// Given an `trait_assoc_def_id` that corresponds to a previously synthethized impl trait in trait\n+/// Given an `trait_assoc_def_id` that corresponds to a previously synthesized impl trait in trait\n /// into an associated type and an `impl_def_id` corresponding to an impl block, create and return\n /// the corresponding associated item inside the impl block.\n fn impl_associated_item_for_impl_trait_in_trait("}, {"sha": "8317ac431a5e1b5ba24091cd391a57302cebe55d", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -1924,7 +1924,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n         if T::IS_ZST {\n-            self.len += other.len;\n+            self.len = self.len.checked_add(other.len).expect(\"capacity overflow\");\n             other.len = 0;\n             other.head = 0;\n             return;"}, {"sha": "5a0b852e8d5e2b94fe3cfd52002512a0969ddbfe", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -1045,6 +1045,20 @@ fn test_append_double_drop() {\n     assert_eq!(count_b, 1);\n }\n \n+#[test]\n+#[should_panic]\n+fn test_append_zst_capacity_overflow() {\n+    let mut v = Vec::with_capacity(usize::MAX);\n+    // note: using resize instead of set_len here would\n+    //       be *extremely* slow in unoptimized builds.\n+    // SAFETY: `v` has capacity `usize::MAX`, and no initialization\n+    //         is needed for empty tuples.\n+    unsafe { v.set_len(usize::MAX) };\n+    let mut v = VecDeque::from(v);\n+    let mut w = vec![()].into();\n+    v.append(&mut w);\n+}\n+\n #[test]\n fn test_retain() {\n     let mut buf = VecDeque::new();"}, {"sha": "cc80763ef4495386f7d05f00b828f96a89a70c96", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -62,6 +62,7 @@ macro_rules! book {\n                     target: self.target,\n                     name: INTERNER.intern_str($book_name),\n                     src: INTERNER.intern_path(builder.src.join($path)),\n+                    parent: Some(self),\n                 })\n             }\n         }\n@@ -119,18 +120,20 @@ impl Step for UnstableBook {\n             target: self.target,\n             name: INTERNER.intern_str(\"unstable-book\"),\n             src: INTERNER.intern_path(builder.md_doc_out(self.target).join(\"unstable-book\")),\n+            parent: Some(self),\n         })\n     }\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-struct RustbookSrc {\n+struct RustbookSrc<P: Step> {\n     target: TargetSelection,\n     name: Interned<String>,\n     src: Interned<PathBuf>,\n+    parent: Option<P>,\n }\n \n-impl Step for RustbookSrc {\n+impl<P: Step> Step for RustbookSrc<P> {\n     type Output = ();\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -152,13 +155,18 @@ impl Step for RustbookSrc {\n         let index = out.join(\"index.html\");\n         let rustbook = builder.tool_exe(Tool::Rustbook);\n         let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);\n-        if builder.config.dry_run() || up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n-            return;\n+\n+        if !builder.config.dry_run() && !(up_to_date(&src, &index) || up_to_date(&rustbook, &index))\n+        {\n+            builder.info(&format!(\"Rustbook ({}) - {}\", target, name));\n+            let _ = fs::remove_dir_all(&out);\n+\n+            builder.run(rustbook_cmd.arg(\"build\").arg(&src).arg(\"-d\").arg(out));\n         }\n-        builder.info(&format!(\"Rustbook ({}) - {}\", target, name));\n-        let _ = fs::remove_dir_all(&out);\n \n-        builder.run(rustbook_cmd.arg(\"build\").arg(&src).arg(\"-d\").arg(out));\n+        if self.parent.is_some() {\n+            builder.maybe_open_in_browser::<P>(index)\n+        }\n     }\n }\n \n@@ -205,6 +213,7 @@ impl Step for TheBook {\n             target,\n             name: INTERNER.intern_str(\"book\"),\n             src: INTERNER.intern_path(builder.src.join(&relative_path)),\n+            parent: Some(self),\n         });\n \n         // building older edition redirects\n@@ -213,6 +222,9 @@ impl Step for TheBook {\n                 target,\n                 name: INTERNER.intern_string(format!(\"book/{}\", edition)),\n                 src: INTERNER.intern_path(builder.src.join(&relative_path).join(edition)),\n+                // There should only be one book that is marked as the parent for each target, so\n+                // treat the other editions as not having a parent.\n+                parent: Option::<Self>::None,\n             });\n         }\n \n@@ -228,10 +240,6 @@ impl Step for TheBook {\n \n             invoke_rustdoc(builder, compiler, &shared_assets, target, path);\n         }\n-\n-        let out = builder.doc_out(target);\n-        let index = out.join(\"book\").join(\"index.html\");\n-        builder.maybe_open_in_browser::<Self>(index);\n     }\n }\n \n@@ -1032,10 +1040,7 @@ impl Step for RustcBook {\n             target: self.target,\n             name: INTERNER.intern_str(\"rustc\"),\n             src: INTERNER.intern_path(out_base),\n+            parent: Some(self),\n         });\n-\n-        let out = builder.doc_out(self.target);\n-        let index = out.join(\"rustc\").join(\"index.html\");\n-        builder.maybe_open_in_browser::<Self>(index);\n     }\n }"}, {"sha": "28a004a92531a895059962406ff3c163457d5318", "filename": "src/doc/rustdoc/src/how-to-read-rustdoc.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -84,6 +84,9 @@ When typing in the search bar, you can prefix your search term with a type\n followed by a colon (such as `mod:`) to restrict the results to just that\n kind of item. (The available items are listed in the help popup.)\n \n+Searching for `println!` will search for a macro named `println`, just like\n+searching for `macro:println` does.\n+\n ### Changing displayed theme\n \n You can change the displayed theme by opening the settings menu (the gear"}, {"sha": "6501d32531fc1774f4ea6c4b7cc4059a3cf47dd7", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -300,20 +300,21 @@ function initSearch(rawSearchIndex) {\n      * @return {integer}\n      */\n     function getIdentEndPosition(parserState) {\n+        const start = parserState.pos;\n         let end = parserState.pos;\n-        let foundExclamation = false;\n+        let foundExclamation = -1;\n         while (parserState.pos < parserState.length) {\n             const c = parserState.userQuery[parserState.pos];\n             if (!isIdentCharacter(c)) {\n                 if (c === \"!\") {\n-                    if (foundExclamation) {\n+                    if (foundExclamation !== -1) {\n                         throw new Error(\"Cannot have more than one `!` in an ident\");\n                     } else if (parserState.pos + 1 < parserState.length &&\n                         isIdentCharacter(parserState.userQuery[parserState.pos + 1])\n                     ) {\n                         throw new Error(\"`!` can only be at the end of an ident\");\n                     }\n-                    foundExclamation = true;\n+                    foundExclamation = parserState.pos;\n                 } else if (isErrorCharacter(c)) {\n                     throw new Error(`Unexpected \\`${c}\\``);\n                 } else if (\n@@ -326,16 +327,35 @@ function initSearch(rawSearchIndex) {\n                     if (!isPathStart(parserState)) {\n                         break;\n                     }\n+                    if (foundExclamation !== -1) {\n+                        if (start <= (end - 2)) {\n+                            throw new Error(\"Cannot have associated items in macros\");\n+                        } else {\n+                            // if start == end - 1, we got the never type\n+                            // while the never type has no associated macros, we still\n+                            // can parse a path like that\n+                            foundExclamation = -1;\n+                        }\n+                    }\n                     // Skip current \":\".\n                     parserState.pos += 1;\n-                    foundExclamation = false;\n                 } else {\n                     throw new Error(`Unexpected \\`${c}\\``);\n                 }\n             }\n             parserState.pos += 1;\n             end = parserState.pos;\n         }\n+        // if start == end - 1, we got the never type\n+        if (foundExclamation !== -1 && start <= (end - 2)) {\n+            if (parserState.typeFilter === null) {\n+                parserState.typeFilter = \"macro\";\n+            } else if (parserState.typeFilter !== \"macro\") {\n+                throw new Error(\"Invalid search type: macro `!` and \" +\n+                    `\\`${parserState.typeFilter}\\` both specified`);\n+            }\n+            end = foundExclamation;\n+        }\n         return end;\n     }\n \n@@ -589,8 +609,8 @@ function initSearch(rawSearchIndex) {\n      *\n      * The supported syntax by this parser is as follow:\n      *\n-     * ident = *(ALPHA / DIGIT / \"_\") [!]\n-     * path = ident *(DOUBLE-COLON ident)\n+     * ident = *(ALPHA / DIGIT / \"_\")\n+     * path = ident *(DOUBLE-COLON ident) [!]\n      * arg = path [generics]\n      * arg-without-generic = path\n      * type-sep = COMMA/WS *(COMMA/WS)"}, {"sha": "f82a2472063ce62b15086a0d630d789a3363881d", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -37,6 +37,8 @@ const QUERY = [\n     \"mod : :\",\n     \"a!a\",\n     \"a!!\",\n+    \"mod:a!\",\n+    \"a!::a\",\n ];\n \n const PARSED = [\n@@ -382,4 +384,22 @@ const PARSED = [\n         userQuery: \"a!!\",\n         error: 'Cannot have more than one `!` in an ident',\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"mod:a!\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"mod:a!\",\n+        error: 'Invalid search type: macro `!` and `mod` both specified',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a!::a\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a!::a\",\n+        error: 'Cannot have associated items in macros',\n+    },\n ];"}, {"sha": "01f65b478f8e9bdb0a6e298fc18aebd32f1284cc", "filename": "tests/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-filter.js?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -1,4 +1,4 @@\n-const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo'];\n+const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo', 'macro!', 'macro:mac!', 'a::mac!'];\n \n const PARSED = [\n     {\n@@ -40,4 +40,49 @@ const PARSED = [\n         userQuery: \"macro<f>:foo\",\n         error: \"Unexpected `:`\",\n     },\n+    {\n+        elems: [{\n+            name: \"macro\",\n+            fullPath: [\"macro\"],\n+            pathWithoutLast: [],\n+            pathLast: \"macro\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        original: \"macro!\",\n+        returned: [],\n+        typeFilter: 14,\n+        userQuery: \"macro!\",\n+        error: null,\n+    },\n+    {\n+        elems: [{\n+            name: \"mac\",\n+            fullPath: [\"mac\"],\n+            pathWithoutLast: [],\n+            pathLast: \"mac\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        original: \"macro:mac!\",\n+        returned: [],\n+        typeFilter: 14,\n+        userQuery: \"macro:mac!\",\n+        error: null,\n+    },\n+    {\n+        elems: [{\n+            name: \"a::mac\",\n+            fullPath: [\"a\", \"mac\"],\n+            pathWithoutLast: [\"a\"],\n+            pathLast: \"mac\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        original: \"a::mac!\",\n+        returned: [],\n+        typeFilter: 14,\n+        userQuery: \"a::mac!\",\n+        error: null,\n+    },\n ];"}, {"sha": "6c17d00f16edc1e6658dcdb4a386e993ca467251", "filename": "tests/rustdoc-js-std/parser-ident.js", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js-std%2Fparser-ident.js", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js-std%2Fparser-ident.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-ident.js?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -3,6 +3,7 @@ const QUERY = [\n     \"!\",\n     \"a!\",\n     \"a!::b\",\n+    \"!::b\",\n     \"a!::b!\",\n ];\n \n@@ -47,47 +48,50 @@ const PARSED = [\n     },\n     {\n         elems: [{\n-            name: \"a!\",\n-            fullPath: [\"a!\"],\n+            name: \"a\",\n+            fullPath: [\"a\"],\n             pathWithoutLast: [],\n-            pathLast: \"a!\",\n+            pathLast: \"a\",\n             generics: [],\n         }],\n         foundElems: 1,\n         original: \"a!\",\n         returned: [],\n-        typeFilter: -1,\n+        typeFilter: 14,\n         userQuery: \"a!\",\n         error: null,\n     },\n     {\n-        elems: [{\n-            name: \"a!::b\",\n-            fullPath: [\"a!\", \"b\"],\n-            pathWithoutLast: [\"a!\"],\n-            pathLast: \"b\",\n-            generics: [],\n-        }],\n-        foundElems: 1,\n+        elems: [],\n+        foundElems: 0,\n         original: \"a!::b\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"a!::b\",\n-        error: null,\n+        error: \"Cannot have associated items in macros\",\n     },\n     {\n         elems: [{\n-            name: \"a!::b!\",\n-            fullPath: [\"a!\", \"b!\"],\n-            pathWithoutLast: [\"a!\"],\n-            pathLast: \"b!\",\n+            name: \"!::b\",\n+            fullPath: [\"!\", \"b\"],\n+            pathWithoutLast: [\"!\"],\n+            pathLast: \"b\",\n             generics: [],\n         }],\n         foundElems: 1,\n+        original: \"!::b\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"!::b\",\n+        error: null,\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n         original: \"a!::b!\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"a!::b!\",\n-        error: null,\n+        error: \"Cannot have associated items in macros\",\n     },\n ];"}, {"sha": "2b179ce146bf0cc5a1b7f77169c554ede5b80fe6", "filename": "tests/rustdoc-js/macro-search.js", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js%2Fmacro-search.js", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js%2Fmacro-search.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fmacro-search.js?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,10 @@\n+// exact-check\n+\n+const QUERY = 'abracadabra!';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'macro_search', 'name': 'abracadabra' },\n+        { 'path': 'macro_search', 'name': 'abracadabra_b' },\n+    ],\n+};"}, {"sha": "dc397490cf583f996e75b6dff5c7710dddbd57ff", "filename": "tests/rustdoc-js/macro-search.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js%2Fmacro-search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-js%2Fmacro-search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fmacro-search.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,10 @@\n+#[macro_export]\n+macro_rules! abracadabra {\n+    () => {}\n+}\n+#[macro_export]\n+macro_rules! abracadabra_b {\n+    () => {}\n+}\n+pub fn abracadabra() {}\n+pub fn abracadabra_c() {}"}, {"sha": "79e6b94f1aca54663d771fa3dd3c7bca59db90ac", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -87,6 +87,7 @@\n     -Z                          llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n     -Z                       llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n     -Z                       location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n+    -Z lower-impl-trait-in-trait-to-assoc-ty=val -- modify the lowering strategy for `impl Trait` in traits so that they are lowered to generic associated types\n     -Z                                    ls=val -- list the symbols defined by a library crate (default: no)\n     -Z                       macro-backtrace=val -- show macro backtraces (default: no)\n     -Z           maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)"}, {"sha": "85fce87403a9bb8e9acb1a3da2d5feffa38c4721", "filename": "tests/ui/async-await/issues/issue-107280.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,15 @@\n+// edition:2021\n+\n+async fn foo() {\n+    inner::<false>().await\n+    //~^ ERROR: function takes 2 generic arguments but 1 generic argument was supplied\n+    //~| ERROR: type inside `async fn` body must be known in this context\n+    //~| ERROR: type inside `async fn` body must be known in this context\n+    //~| ERROR: type inside `async fn` body must be known in this context\n+    //~| ERROR: type inside `async fn` body must be known in this context\n+    //~| ERROR: type inside `async fn` body must be known in this context\n+}\n+\n+async fn inner<T, const PING: bool>() {}\n+\n+fn main() {}"}, {"sha": "dd3e10fcc187c94854750f93f6151ceafe23c5e8", "filename": "tests/ui/async-await/issues/issue-107280.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,82 @@\n+error[E0107]: function takes 2 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-107280.rs:4:5\n+   |\n+LL |     inner::<false>().await\n+   |     ^^^^^   ----- supplied 1 generic argument\n+   |     |\n+   |     expected 2 generic arguments\n+   |\n+note: function defined here, with 2 generic parameters: `T`, `PING`\n+  --> $DIR/issue-107280.rs:13:10\n+   |\n+LL | async fn inner<T, const PING: bool>() {}\n+   |          ^^^^^ -  ----------------\n+help: add missing generic argument\n+   |\n+LL |     inner::<false, PING>().await\n+   |                  ++++++\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/issue-107280.rs:4:5\n+   |\n+LL |     inner::<false>().await\n+   |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/issue-107280.rs:4:21\n+   |\n+LL |     inner::<false>().await\n+   |                     ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/issue-107280.rs:4:5\n+   |\n+LL |     inner::<false>().await\n+   |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/issue-107280.rs:4:21\n+   |\n+LL |     inner::<false>().await\n+   |                     ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/issue-107280.rs:4:5\n+   |\n+LL |     inner::<false>().await\n+   |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/issue-107280.rs:4:21\n+   |\n+LL |     inner::<false>().await\n+   |                     ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/issue-107280.rs:4:5\n+   |\n+LL |     inner::<false>().await\n+   |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/issue-107280.rs:4:21\n+   |\n+LL |     inner::<false>().await\n+   |                     ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/issue-107280.rs:4:5\n+   |\n+LL |     inner::<false>().await\n+   |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/issue-107280.rs:4:21\n+   |\n+LL |     inner::<false>().await\n+   |                     ^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0107, E0698.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "cba2e22c4602b932c60f4605bc45ba139ab0872d", "filename": "tests/ui/const-generics/issues/issue-105821.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params, const_ptr_read, generic_const_exprs)]\n+#![allow(dead_code)]\n+\n+const fn catone<const M: usize>(_a: &[u8; M]) -> [u8; M + 1]\n+where\n+    [(); M + 1]:,\n+{\n+    unimplemented!()\n+}\n+\n+struct Catter<const A: &'static [u8]>;\n+impl<const A: &'static [u8]> Catter<A>\n+where\n+    [(); A.len() + 1]:,\n+{\n+    const ZEROS: &'static [u8; A.len()] = &[0_u8; A.len()];\n+    const R: &'static [u8] = &catone(Self::ZEROS);\n+}\n+\n+fn main() {}"}, {"sha": "16252e980e4fff764df2248c85aadac87a083a38", "filename": "tests/ui/for/for-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-err.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    for _ in 0..1 {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `for...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    }\n+}"}, {"sha": "b330d1076476921c7a7fa7e1aa87dc8b8d13ba7f", "filename": "tests/ui/for/for-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-err.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,17 @@\n+error: `for...else` loops are not supported\n+  --> $DIR/for-else-err.rs:4:7\n+   |\n+LL |       for _ in 0..1 {\n+   |       --- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "c0b96f9729456c6ae8564699370e1f52370cef40", "filename": "tests/ui/for/for-else-let-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-let-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-let-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-let-else-err.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let _ = for _ in 0..1 {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `for...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "a2396a8fbb161af9882c4f51211353e4f1732809", "filename": "tests/ui/for/for-else-let-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-let-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Ffor%2Ffor-else-let-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-let-else-err.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,17 @@\n+error: `for...else` loops are not supported\n+  --> $DIR/for-else-let-else-err.rs:4:7\n+   |\n+LL |       let _ = for _ in 0..1 {\n+   |               --- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d85e3878cc98d65b37aa8a09cbb6ad6fb1352b4", "filename": "tests/ui/let-else/let-else-brace-before-else.fixed", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -7,10 +7,6 @@ fn main() {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;\n     };\n-    let Some(1) = (loop { break Some(1) }) else {\n-        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n-        return;\n-    };\n     let 2 = 1 + (match 1 { n => n }) else {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;"}, {"sha": "5c3375b3f28661246801c5b9fea459806f5e3a3e", "filename": "tests/ui/let-else/let-else-brace-before-else.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -7,10 +7,6 @@ fn main() {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;\n     };\n-    let Some(1) = loop { break Some(1) } else {\n-        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n-        return;\n-    };\n     let 2 = 1 + match 1 { n => n } else {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;"}, {"sha": "ee53213d8c27e3e32b2f004dbe84e3ae25912367", "filename": "tests/ui/let-else/let-else-brace-before-else.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -10,18 +10,7 @@ LL |     let Some(1) = ({ Some(1) }) else {\n    |                   +           +\n \n error: right curly brace `}` before `else` in a `let...else` statement not allowed\n-  --> $DIR/let-else-brace-before-else.rs:10:40\n-   |\n-LL |     let Some(1) = loop { break Some(1) } else {\n-   |                                        ^\n-   |\n-help: wrap the expression in parentheses\n-   |\n-LL |     let Some(1) = (loop { break Some(1) }) else {\n-   |                   +                      +\n-\n-error: right curly brace `}` before `else` in a `let...else` statement not allowed\n-  --> $DIR/let-else-brace-before-else.rs:14:34\n+  --> $DIR/let-else-brace-before-else.rs:10:34\n    |\n LL |     let 2 = 1 + match 1 { n => n } else {\n    |                                  ^\n@@ -32,7 +21,7 @@ LL |     let 2 = 1 + (match 1 { n => n }) else {\n    |                 +                  +\n \n error: right curly brace `}` before `else` in a `let...else` statement not allowed\n-  --> $DIR/let-else-brace-before-else.rs:18:40\n+  --> $DIR/let-else-brace-before-else.rs:14:40\n    |\n LL |     let Some(1) = unsafe { unsafe_fn() } else {\n    |                                        ^\n@@ -42,5 +31,5 @@ help: wrap the expression in parentheses\n LL |     let Some(1) = (unsafe { unsafe_fn() }) else {\n    |                   +                      +\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "670d8a145c0afb3c71da485e68922f4ea1ea19bc", "filename": "tests/ui/loops/loop-else-break-with-value.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-break-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-break-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-break-with-value.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let Some(1) = loop {\n+        //~^ NOTE `else` is attached to this loop\n+        break Some(1)\n+    } else {\n+        //~^ ERROR `loop...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+        return;\n+    };\n+}"}, {"sha": "972e2d341ec0d0fe36efe8204078a52bd04bfdb0", "filename": "tests/ui/loops/loop-else-break-with-value.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-break-with-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-break-with-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-break-with-value.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,18 @@\n+error: `loop...else` loops are not supported\n+  --> $DIR/loop-else-break-with-value.rs:5:7\n+   |\n+LL |       let Some(1) = loop {\n+   |                     ---- `else` is attached to this loop\n+...\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |         return;\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "202a09c255c2e901b40c9ea58c49c3dd83fe7404", "filename": "tests/ui/loops/loop-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-err.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    loop {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `loop...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    }\n+}"}, {"sha": "c2c5c84cded5d3ffade497c0b56ac72f3d2b80f6", "filename": "tests/ui/loops/loop-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-err.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,17 @@\n+error: `loop...else` loops are not supported\n+  --> $DIR/loop-else-err.rs:4:7\n+   |\n+LL |       loop {\n+   |       ---- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "e828ffef549e8a47b87621dd350420e07e83d9d7", "filename": "tests/ui/loops/loop-else-let-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-let-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-let-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-let-else-err.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let _ = loop {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `loop...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "a57c784ff6fca9d08fc5081421a218d06190296c", "filename": "tests/ui/loops/loop-else-let-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-let-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Floops%2Floop-else-let-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-let-else-err.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,17 @@\n+error: `loop...else` loops are not supported\n+  --> $DIR/loop-else-let-else-err.rs:4:7\n+   |\n+LL |       let _ = loop {\n+   |               ---- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "36b60fbd4be2416ca84b0d5d2dda8a3da195b199", "filename": "tests/ui/while/while-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-err.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    while false {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `while...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "88f715d56660918ee8600f80effbae0d2b81d046", "filename": "tests/ui/while/while-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-err.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,17 @@\n+error: `while...else` loops are not supported\n+  --> $DIR/while-else-err.rs:4:7\n+   |\n+LL |       while false {\n+   |       ----- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "6d9909347c3b11372139d6e316c36387827fdd30", "filename": "tests/ui/while/while-else-let-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.rs?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let _ = while false {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `while...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "431d37c007c6d1da78bf44f14e915f7a10cff4f6", "filename": "tests/ui/while/while-else-let-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.stderr?ref=f77bfb7336f21bfe6a5fb5f7358d4406e2597289", "patch": "@@ -0,0 +1,17 @@\n+error: `while...else` loops are not supported\n+  --> $DIR/while-else-let-else-err.rs:4:7\n+   |\n+LL |       let _ = while false {\n+   |               ----- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}]}