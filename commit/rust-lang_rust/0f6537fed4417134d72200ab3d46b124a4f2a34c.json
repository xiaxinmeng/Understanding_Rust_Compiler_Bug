{"sha": "0f6537fed4417134d72200ab3d46b124a4f2a34c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNjUzN2ZlZDQ0MTcxMzRkNzIyMDBhYjNkNDZiMTI0YTRmMmEzNGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-12T07:17:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-12T08:49:57Z"}, "message": "Gate literal box expressions in addition to types\n\nCloses #10920", "tree": {"sha": "6388c6f218d000fca2dd57adedb3ed77f5496a84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6388c6f218d000fca2dd57adedb3ed77f5496a84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f6537fed4417134d72200ab3d46b124a4f2a34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6537fed4417134d72200ab3d46b124a4f2a34c", "html_url": "https://github.com/rust-lang/rust/commit/0f6537fed4417134d72200ab3d46b124a4f2a34c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f6537fed4417134d72200ab3d46b124a4f2a34c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b12dca7f97a51c6cbb4f47ea6e095d841a97c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b12dca7f97a51c6cbb4f47ea6e095d841a97c1a", "html_url": "https://github.com/rust-lang/rust/commit/1b12dca7f97a51c6cbb4f47ea6e095d841a97c1a"}], "stats": {"total": 203, "additions": 187, "deletions": 16}, "files": [{"sha": "6bbf18de693fa73a8c590304047fca52504ee772", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -77,6 +77,14 @@ impl Context {\n         }\n     }\n \n+    fn gate_box(&self, span: Span) {\n+        self.gate_feature(\"managed_boxes\", span,\n+                          \"The managed box syntax is being replaced by the \\\n+                           `std::gc::Gc` and `std::rc::Rc` types. Equivalent \\\n+                           functionality to managed trait objects will be \\\n+                           implemented but is currently missing.\");\n+    }\n+\n     fn has_feature(&self, feature: &str) -> bool {\n         self.features.iter().any(|n| n.as_slice() == feature)\n     }\n@@ -172,17 +180,24 @@ impl Visitor<()> for Context {\n                                    experimental and likely to be removed\");\n \n             },\n-            ast::ty_box(_) => {\n-                self.gate_feature(\"managed_boxes\", t.span,\n-                                  \"The managed box syntax is being replaced by the `std::gc::Gc` \\\n-                                  and `std::rc::Rc` types. Equivalent functionality to managed \\\n-                                  trait objects will be implemented but is currently missing.\");\n-            }\n+            ast::ty_box(_) => { self.gate_box(t.span); }\n             _ => {}\n         }\n \n         visit::walk_ty(self, t, ());\n     }\n+\n+    fn visit_expr(&mut self, e: @ast::Expr, _: ()) {\n+        match e.node {\n+            ast::ExprUnary(_, ast::UnBox(..), _) |\n+            ast::ExprVstore(_, ast::ExprVstoreBox) |\n+            ast::ExprVstore(_, ast::ExprVstoreMutBox) => {\n+                self.gate_box(e.span);\n+            }\n+            _ => {}\n+        }\n+        visit::walk_expr(self, e, ());\n+    }\n }\n \n pub fn check_crate(sess: Session, crate: &ast::Crate) {"}, {"sha": "311becc63eff192d5cbea3227e0cd383f5d1b218", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n \n     // Testing that method lookup does not automatically borrow"}, {"sha": "bfc1884ac5a7f2a3bfc2e71c97fd81c3218b27ae", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n struct Point {\n     x: int,\n     y: int,"}, {"sha": "5c6f7082ed03bd2d61bc37ee7380257ca661699a", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n struct point { x: int, y: int }\n \n trait methods {"}, {"sha": "84c2db8bd576bdab4ecd8b829b7cfce652df7c62", "filename": "src/test/compile-fail/borrowck-mut-boxed-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-boxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-boxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-boxed-vec.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     let v = @mut [ 1, 2, 3 ];\n     for _x in v.iter() {"}, {"sha": "a4d184e346b0e64aa8c11778148399898d53a023", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n mod my_mod {\n     pub struct MyStruct {\n         priv priv_field: int"}, {"sha": "34e506ed015c828df0fa670c797914ba22e211ec", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -1,6 +1,8 @@\n // Tests that references to move-by-default values trigger moves when\n // they occur as part of various kinds of expressions.\n \n+#[feature(managed_boxes)];\n+\n struct Foo<A> { f: A }\n fn guard(_s: ~str) -> bool {fail!()}\n fn touch<A>(_a: &A) {}"}, {"sha": "c8183d70f87d1b57cd17ef4db0ec37b0e7decab4", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n enum t { a, b, }\n \n fn main() {"}, {"sha": "f08272f58acd763120fd7c25048f09c1dee2e81c", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     let f; //~ ERROR cyclic type of infinite size\n     f = @f;"}, {"sha": "35f5ac1bb18a8534b5eaa9d9702b4d35b4e98355", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -1,3 +1,5 @@\n+#[feature(managed_boxes)];\n+\n fn f<T:'static>(_: T) {}\n \n fn main() {"}, {"sha": "b9965b18229364dc7ac4522523f487c52c8330e7", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn f<T:Send>(_i: T) {\n }\n "}, {"sha": "c9bc061995d3e847086a1455a9de1d7dec93954b", "filename": "src/test/run-fail/borrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n //\n // for a detailed explanation of what is going on here.\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     let a = @mut [3i];\n     let b = @mut [a];"}, {"sha": "284882ff6f5d57347d4c6f00012416de5a13a7d7", "filename": "src/test/run-fail/borrowck-wg-fail-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -3,6 +3,8 @@\n // Test that write guards trigger when there is a write to a field\n // of a frozen structure.\n \n+#[feature(managed_boxes)];\n+\n struct S {\n     x: int\n }"}, {"sha": "2643ed261f944ce36d39f809d829ccc5b83e2c0c", "filename": "src/test/run-fail/borrowck-wg-fail-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -3,6 +3,8 @@\n // Test that write guards trigger when there is a write to a directly\n // frozen @mut box.\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     let x = @mut 3;\n     let _y: &mut int = x;"}, {"sha": "d33e39e09a852f67c0fc89acec3df7b1a003f2c8", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slice-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -3,6 +3,8 @@\n // Test that write guards trigger when there is a coercion to\n // a slice on the receiver of a method.\n \n+#[feature(managed_boxes)];\n+\n trait MyMutSlice {\n     fn my_mut_slice(self) -> Self;\n }"}, {"sha": "63287981bdcc89fde16502cbb7678b6905435050", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slices.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -2,6 +2,8 @@\n \n // Test that write guards trigger when arguments are coerced to slices.\n \n+#[feature(managed_boxes)];\n+\n fn add(x:&mut [int], y:&[int])\n {\n     x[0] = x[0] + y[0];"}, {"sha": "0820b94e181c4fc1890a25579a09a9762fd585be", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -3,6 +3,8 @@\n // Test that write guards trigger when we are indexing into\n // an @mut vector.\n \n+#[feature(managed_boxes)];\n+\n fn add(x:&mut int, y:&int)\n {\n     *x = *x + *y;"}, {"sha": "5ee9cd37e87b8fc74e41d1d9b364204ad5fb8751", "filename": "src/test/run-fail/borrowck-wg-two-array-indices.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -3,6 +3,8 @@\n // Test that arguments trigger when there are *two mutable* borrows\n // of indices.\n \n+#[feature(managed_boxes)];\n+\n fn add(x:&mut int, y:&mut int)\n {\n     *x = *x + *y;"}, {"sha": "4ed79147947e29842a2ee90bfaeff4739c8f8e48", "filename": "src/test/run-fail/unwind-assert.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     let _a = @0;\n     assert!(false);"}, {"sha": "6740331d2f048d846a5f9a9664557c7ab5b77dba", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n use std::cast;\n \n fn failfn() {"}, {"sha": "410b86d57146b48bc52b1ccfce70a789e8b97503", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "c4747c6089ef5f3b156ef080f9e5bed94f8f300b", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "e99c050d16a2045831d3d32faacca94668a64aec", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "4a5cd270116051569e91b3ff6958f97af5d90f8a", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "6cbccfb29f9102fee994122f68ca142245b7a0f7", "filename": "src/test/run-fail/unwind-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "4acd1ba6b1b90f87edde65cba82d2efa93df022e", "filename": "src/test/run-fail/unwind-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     @0;\n     fail!();"}, {"sha": "9b5b9be3415263a48d88d8eac5b41ef8782761c2", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,7 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n #[allow(unreachable_code)];\n #[allow(unused_variable)];\n "}, {"sha": "0ac8b2b26e968f1adac27229d138cf3b5d7e9cf4", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn x(it: |int|) {\n     let _a = @0;\n     it(1);"}, {"sha": "44cc3145c44077135777cfb7ed1bd7f6272449f5", "filename": "src/test/run-fail/unwind-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-match.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n // Issue #945\n // error-pattern:non-exhaustive match failure\n fn test_box() {"}, {"sha": "b87303467cee5a20a1c5661303bec51fe841a5fd", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -11,6 +11,8 @@\n // exec-env:RUST_NEWRT=1\n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     let _count = @mut 0u;\n     let mut map = std::hashmap::HashMap::new();"}, {"sha": "3805f955d73ad15a4b2a93ea37a86040461b1a22", "filename": "src/test/run-fail/unwind-nested.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn main() {\n     let _a = @0;\n     {"}, {"sha": "7239cad762d904620c1c244ebb0a1506eca61bfb", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn f() -> ~[int] { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might"}, {"sha": "6339e72fe469cc54fd7651f031cc5a3fa2606738", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn f() -> ~[int] { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might"}, {"sha": "9560e0275d490a157703199ad89db2598b0bc893", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn f() -> ~[int] { fail!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might"}, {"sha": "bd875ada18ece1f1380680ae840c7f1ccf23d94f", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn f() {\n     let _a = @0;\n     fail!();"}, {"sha": "265a616f3dea481b6e208b8a9624b86b8bd5c8e7", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#[feature(managed_boxes)];\n+\n fn f() {\n     fail!();\n }"}, {"sha": "667d9b738c23f1239268e5f0d1c9563d5e4c938c", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -11,6 +11,8 @@\n // Testing that method lookup automatically both borrows vectors to slices\n // and also references them to create the &self pointer\n \n+#[feature(managed_boxes)];\n+\n trait MyIter {\n     fn test_imm(&self);\n }"}, {"sha": "79784688d497dbd325ca8adc2d87e2df08918736", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n trait double {\n     fn double(@self) -> uint;\n }"}, {"sha": "1a04abe3196e01e5336986c3f833f7c0b46862fb", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n trait double {\n     fn double(@self) -> uint;\n }"}, {"sha": "5ae959ef169998e2d3fb4030be78c8393520471e", "filename": "src/test/run-pass/borrowck-borrow-from-at-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-at-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-at-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-at-vec.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn sum_slice(x: &[int]) -> int {\n     let mut sum = 0;\n     for i in x.iter() { sum += *i; }"}, {"sha": "0f37288d51db6d2d9d94ccb0a1bdf180182e8c2f", "filename": "src/test/run-pass/borrowck-preserve-box-in-discr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+#[feature(managed_boxes)];\n+\n use std::ptr;\n \n struct F { f: ~int }"}, {"sha": "77fe7d14dcba6f472ee700617967ac78ff08e142", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -12,6 +12,8 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+#[feature(managed_boxes)];\n+\n use std::ptr;\n \n fn borrow(x: &int, f: |x: &int|) {"}, {"sha": "2fd2c689a3c50f7fe4828c97dae47fb986807fda", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+#[feature(managed_boxes)];\n+\n use std::ptr;\n \n struct F { f: ~int }"}, {"sha": "d950fce109b1326f9d1ca6d80c76b08ce65825d8", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -12,6 +12,8 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+#[feature(managed_boxes)];\n+\n use std::ptr;\n \n fn borrow(x: &int, f: |x: &int|) {"}, {"sha": "5c0f238e0bcc432fa655c41e6b186b9a44dcbeb4", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -12,6 +12,8 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+#[feature(managed_boxes)];\n+\n use std::ptr;\n \n fn borrow(x: &int, f: |x: &int|) {"}, {"sha": "57365e98f97e9885468c9e822999388a1d49ee90", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+#[feature(managed_boxes)];\n+\n fn testfn(cond: bool) {\n     let mut x = @3;\n     let mut y = @4;"}, {"sha": "e820ec67d6f69d04a8a94bf0ed25b87e54e3ba0a", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -12,6 +12,8 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+#[feature(managed_boxes)];\n+\n use std::ptr;\n \n fn borrow(x: &int, f: |x: &int|) {"}, {"sha": "aaa08ea49b32acb9dc254d92630636b019922131", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n enum newtype {\n     newtype(int)\n }"}, {"sha": "27d337a28bf89dff623dc72d14331006945c45b7", "filename": "src/test/run-pass/borrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -26,6 +26,7 @@\n //\n // run-fail/borrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs\n \n+#[feature(managed_boxes)];\n \n pub fn main() {\n     let a = @mut 3i;"}, {"sha": "f561dba2423274401ef1ccbcc6256b172d0ccb9b", "filename": "src/test/run-pass/borrowck-wg-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -1,3 +1,5 @@\n+#[feature(managed_boxes)];\n+\n fn f(x: &int) {\n     println(x.to_str());\n }"}, {"sha": "efd0572c8c633b88a12ec286ef888549b8f8f401", "filename": "src/test/run-pass/borrowck-wg-two-imm-borrows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -1,5 +1,7 @@\n // Test that we can borrow the same @mut box twice, so long as both are imm.\n \n+#[feature(managed_boxes)];\n+\n fn add(x:&int, y:&int)\n {\n     *x + *y;"}, {"sha": "77484b8da4a7de415f704c4c4d3823c094cb0332", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n pub fn main() {\n     let (&x, &y, &z) = (&3, &'a', &@\"No pets!\");\n     assert_eq!(x, 3);"}, {"sha": "6b8f4089fdfcf4762b423e83ae8e1a04f1de1746", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -11,6 +11,8 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_borrow_lib.rs\n \n+#[feature(managed_boxes)];\n+\n extern mod cci_borrow_lib;\n use cci_borrow_lib::foo;\n "}, {"sha": "997e2f03abd9277ce8b3d9a92433913fe83503d1", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#[feature(managed_boxes)];\n \n pub fn main() { let x = @mut 5; *x = 1000; info!(\"{:?}\", *x); }"}, {"sha": "e9620d4dea4201f0eedb6f00b64602f7494346d0", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -13,7 +13,7 @@\n \n // xfail-fast\n \n-#[feature(struct_variant)];\n+#[feature(struct_variant, managed_boxes)];\n \n extern mod extra;\n "}, {"sha": "6d6a2a60af0e139a0049645638f70ec386c27b10", "filename": "src/test/run-pass/expr-block-box.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n+#[feature(managed_boxes)];\n \n pub fn main() { let x = { @100 }; assert!((*x == 100)); }"}, {"sha": "8ed2a9a6b3fc80eedbbb95cba2fc92b96dd3112b", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n // Regression test for issue #388\n pub fn main() { let _x = { { @10 } }; }"}, {"sha": "3149ed49f7ea7ac6451c4ae637508e4aa5037bf4", "filename": "src/test/run-pass/expr-elseif-ref2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n // Regression test for issue #388\n pub fn main() {\n     let _x = if false {"}, {"sha": "b83c7b8852c9f805168703f92cb215143803f44d", "filename": "src/test/run-pass/expr-if-box.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n+#[feature(managed_boxes)];\n \n // Tests for if as expressions returning boxed types\n fn test_box() {"}, {"sha": "8557f409b75c2a0c31f47badac38731065238bc0", "filename": "src/test/run-pass/expr-match-box.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n+#[feature(managed_boxes)];\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {"}, {"sha": "163a1253ef0a55fca7f64a50f4a05404f502021f", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n "}, {"sha": "1d2b0197f08e1dadfe9e22c4acc9739786630969", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn move_val_init<T>(dst: &mut T, src: T);"}, {"sha": "e4d7483c5cf81f017f98c15617ae1516790f62ef", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n struct Font {\n     fontbuf: uint,\n     cairo_font: uint,"}, {"sha": "9d379e8bfe7d7d4bcc3860f13773a808140ab27f", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,9 @@\n \n // xfail-fast\n // aux-build:issue-3012-1.rs\n+\n+#[feature(managed_boxes)];\n+\n extern mod socketlib;\n \n use socketlib::socket;"}, {"sha": "8a30cc9674860750762b0a210cc7c2a494a2b244", "filename": "src/test/run-pass/issue-3860.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3860.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n struct Foo { x: int }\n \n impl Foo {"}, {"sha": "62174a70d07fe2983deda38134b18734ba5e1615", "filename": "src/test/run-pass/issue-4092.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4092.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n use std::hashmap::HashMap;\n \n pub fn main() {"}, {"sha": "a5c318a20f47d8c0e4cc1187e03cfcd454262db0", "filename": "src/test/run-pass/issue-5517.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5517.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n pub fn main() {\n     let box1 = @mut 42;\n     let _x = *(&mut *box1) == 42 || *(&mut *box1) == 31337;"}, {"sha": "ffb7a0a5bb30e5446b5c77672fd670bba7cf66de", "filename": "src/test/run-pass/issue-5926.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-5926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-5926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5926.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n #[allow(unused_mut)];\n \n pub fn main() {"}, {"sha": "6b68e3c9ed7171b3d2dfe8b0a94ad95e8ef10466", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n pub fn main() {\n     match Left(@17) {\n         Right(()) => {}"}, {"sha": "ecb8e3ca0ed5d3a3ec165eb89700c423574e6f54", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n \n fn assert_repr_eq<T>(obj : T, expected : ~str) {\n "}, {"sha": "a5f87e6c5365dcc8a824522e0131989f033cfe8b", "filename": "src/test/run-pass/issue-9382.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9382.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n #[allow(unnecessary_allocation)];\n \n // Tests for a previous bug that occured due to an interaction"}, {"sha": "a499c14802596c227b63fd18397fd32d8d70c36e", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -11,6 +11,7 @@\n // This should typecheck even though the type of e is not fully\n // resolved when we finish typechecking the ||.\n \n+#[feature(managed_boxes)];\n \n struct Refs { refs: ~[int], n: int }\n "}, {"sha": "a1453a38455791db40d5de75b7ce42b9b4e28907", "filename": "src/test/run-pass/let-destruct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n struct xx(int);\n \n struct X { x: xx, y: int }"}, {"sha": "14d4ea3ff35fc24455689bef7519484c6aa4c963", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n \n struct X { x: int, y: int, z: int }\n "}, {"sha": "aa25d13e0cd556ea02c5c3d91c4ade9c060eef70", "filename": "src/test/run-pass/nested-exhaustive-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fnested-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fnested-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-exhaustive-match.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n struct Foo { foo: bool, bar: Option<int>, baz: int }\n \n pub fn main() {"}, {"sha": "d6d015d4785886f83957e0d22e9786319c6578ec", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n trait get {\n     fn get(self) -> int;\n }"}, {"sha": "3b0a457559ccf6bdc95da43c3995f549b4cc65b7", "filename": "src/test/run-pass/regions-appearance-constraint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-appearance-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-appearance-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-appearance-constraint.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n /* Tests conditional rooting of the box y */\n \n+#[feature(managed_boxes)];\n+\n fn testfn(cond: bool) {\n     let mut x = @3;\n     let mut y = @4;"}, {"sha": "5b1b1dd8ec3b481873bca2d3b6c5fe35121a73e0", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn foo(x: &uint) -> uint {\n     *x\n }"}, {"sha": "3c0fcba2064fba9e96f9b7e2086c21023a17b92b", "filename": "src/test/run-pass/regions-borrow-evec-at.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn foo(x: &[uint]) -> uint {\n     x[0]\n }"}, {"sha": "8ccda6824bdfd994e738b5400503cd245fbf470c", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn foo<'r>(x: &'r uint) -> &'r uint { x }\n fn bar(x: &uint) -> uint { *x }\n "}, {"sha": "1f21ca9ef1b2d276e83af938a5d5f9e65f784471", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n \n pub fn main() {"}, {"sha": "7db4ce8caf2490be17f369be6ffbfdecdbcccb46", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n struct Point {x: int, y: int}\n \n fn x_coord<'r>(p: &'r Point) -> &'r int {"}, {"sha": "03497de0d554fb725af20e22a2ca25377027b1b7", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n #[deriving(Clone)]\n struct Foo {\n     a: ~str,"}, {"sha": "da00e1595dee47293c3e8c209e34fa0164b95f23", "filename": "src/test/run-pass/struct-field-assignability.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fstruct-field-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fstruct-field-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-field-assignability.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -1,3 +1,5 @@\n+#[feature(managed_boxes)];\n+\n struct Foo<'a> {\n     x: &'a int\n }"}, {"sha": "e721a9a96dba75c55d497e8f2488e35a4c5c76e9", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-fast\n \n+#[feature(managed_boxes)];\n+\n fn p_foo<T>(_pinned: T) { }\n fn s_foo<T>(_shared: T) { }\n fn u_foo<T:Send>(_unique: T) { }"}, {"sha": "8fb2b9b40f4fb11ee6862d9db4290b0fd0a21d16", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n fn f<T>(t: T) -> T {\n     let t1 = t;\n     t1"}, {"sha": "48a49996aeebb963123473f4d0c5f15b5c603867", "filename": "src/test/run-pass/unique-copy-box.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-copy-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n #[allow(unused_variable)];\n \n use std::managed;"}, {"sha": "173919608de016a781784f89f855851e63e09398", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n extern mod extra;\n \n use std::task;"}, {"sha": "cd9d9603ffb1ed0fdf029788429e8dea8e9b2e22", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -1,3 +1,5 @@\n+#[feature(managed_boxes)];\n+\n pub fn main() {\n     let x = @[1, 2, 3];\n     match x {"}, {"sha": "16a895f7231621542076dfb4326d447eb4a92de2", "filename": "src/test/run-pass/vec-to_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6537fed4417134d72200ab3d46b124a4f2a34c/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-to_str.rs?ref=0f6537fed4417134d72200ab3d46b124a4f2a34c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(managed_boxes)];\n+\n pub fn main() {\n     assert_eq!((~[0, 1]).to_str(), ~\"[0, 1]\");\n     assert_eq!((&[1, 2]).to_str(), ~\"[1, 2]\");"}]}