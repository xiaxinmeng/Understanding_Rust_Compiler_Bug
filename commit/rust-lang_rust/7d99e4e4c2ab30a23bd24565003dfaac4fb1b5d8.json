{"sha": "7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOTllNGU0YzJhYjMwYTIzYmQyNDU2NTAwM2RmYWFjNGZiMWI1ZDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T18:18:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T18:18:41Z"}, "message": "check_pat_slice: shadow 'expected' to make sure it's not used again", "tree": {"sha": "9af30fb8293d615594cc7e1c58415c9e5b2aad42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9af30fb8293d615594cc7e1c58415c9e5b2aad42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8", "html_url": "https://github.com/rust-lang/rust/commit/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a93a0e860486f3748ef934332477d54a2f1ebbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a93a0e860486f3748ef934332477d54a2f1ebbc", "html_url": "https://github.com/rust-lang/rust/commit/3a93a0e860486f3748ef934332477d54a2f1ebbc"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "0465726c42e34ed4bf5bf058de16401edaa5319d", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=7d99e4e4c2ab30a23bd24565003dfaac4fb1b5d8", "patch": "@@ -1175,8 +1175,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         discrim_span: Option<Span>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let expected_ty = self.structurally_resolved_type(span, expected);\n-        let (inner_ty, slice_ty) = match expected_ty.kind {\n+        let expected = self.structurally_resolved_type(span, expected);\n+        let (inner_ty, slice_ty) = match expected.kind {\n             // An array, so we might have something like `let [a, b, c] = [0, 1, 2];`.\n             ty::Array(inner_ty, size) => {\n                 let slice_ty = if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n@@ -1208,11 +1208,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n                 (inner_ty, slice_ty)\n             }\n-            ty::Slice(inner_ty) => (inner_ty, expected_ty),\n+            ty::Slice(inner_ty) => (inner_ty, expected),\n             // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n-                if !expected_ty.references_error() {\n-                    self.error_expected_array_or_slice(span, expected_ty);\n+                if !expected.references_error() {\n+                    self.error_expected_array_or_slice(span, expected);\n                 }\n                 (tcx.types.err, tcx.types.err)\n             }\n@@ -1230,7 +1230,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for elt in after {\n             self.check_pat(&elt, inner_ty, def_bm, discrim_span);\n         }\n-        expected_ty\n+        expected\n     }\n \n     fn error_scrutinee_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {"}]}