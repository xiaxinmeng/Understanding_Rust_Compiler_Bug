{"sha": "d12689c022d56d63c03a73925054c95d060e34c4", "node_id": "C_kwDOAAsO6NoAKGQxMjY4OWMwMjJkNTZkNjNjMDNhNzM5MjUwNTRjOTVkMDYwZTM0YzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-02T07:23:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-05T16:40:42Z"}, "message": "Explain why `&T` is cloned when `T` is not `Clone`", "tree": {"sha": "c904fe3cdab738554927e994bda4a9ed9f9a95ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c904fe3cdab738554927e994bda4a9ed9f9a95ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12689c022d56d63c03a73925054c95d060e34c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12689c022d56d63c03a73925054c95d060e34c4", "html_url": "https://github.com/rust-lang/rust/commit/d12689c022d56d63c03a73925054c95d060e34c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12689c022d56d63c03a73925054c95d060e34c4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634770c0a7f8598164ab825cfe419cc8b03c36e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/634770c0a7f8598164ab825cfe419cc8b03c36e5", "html_url": "https://github.com/rust-lang/rust/commit/634770c0a7f8598164ab825cfe419cc8b03c36e5"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "83e535b3c32477f22d2523ecada2657c0cefa16c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12689c022d56d63c03a73925054c95d060e34c4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12689c022d56d63c03a73925054c95d060e34c4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d12689c022d56d63c03a73925054c95d060e34c4", "patch": "@@ -40,6 +40,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_parentheses(err, expr);\n         self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected);\n+        self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n         self.report_closure_inferred_return_type(err, expected);\n@@ -630,7 +631,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     Applicability::MachineApplicable,\n                                     true,\n                                 ));\n-\n                     }\n                 }\n                 _ => {}"}, {"sha": "93a0900c7e80d93300c554ce9b3b9ecee62ba658", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d12689c022d56d63c03a73925054c95d060e34c4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12689c022d56d63c03a73925054c95d060e34c4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=d12689c022d56d63c03a73925054c95d060e34c4", "patch": "@@ -2,8 +2,6 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_span::{self, Span};\n-\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n@@ -13,12 +11,14 @@ use rustc_hir::{\n     WherePredicate,\n };\n use rustc_infer::infer::{self, TyCtxtInferExt};\n-\n+use rustc_infer::traits;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, Ty};\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::{self, Binder, ToPredicate, Ty};\n use rustc_span::symbol::{kw, sym};\n+use rustc_span::Span;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n \n-use rustc_middle::ty::subst::GenericArgKind;\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -846,4 +846,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let node = self.tcx.hir().get(id);\n         matches!(node, Node::Stmt(Stmt { kind: StmtKind::Local(..), .. }))\n     }\n+\n+    /// Suggest that `&T` was cloned instead of `T` because `T` does not implement `Clone`,\n+    /// which is a side-effect of autoref.\n+    pub(crate) fn note_type_is_not_clone(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expected_ty: Ty<'tcx>,\n+        found_ty: Ty<'tcx>,\n+        expr: &hir::Expr<'_>,\n+    ) {\n+        let hir::ExprKind::MethodCall(segment, &[ref callee_expr], _) = expr.kind else { return; };\n+        let Some(clone_trait_did) = self.tcx.lang_items().clone_trait() else { return; };\n+        let ty::Ref(_, pointee_ty, _) = found_ty.kind() else { return };\n+        let results = self.typeck_results.borrow();\n+        // First, look for a `Clone::clone` call\n+        if segment.ident.name == sym::clone\n+            && results.type_dependent_def_id(expr.hir_id).map_or(\n+                false,\n+                |did| {\n+                    self.tcx.associated_item(did).container\n+                        == ty::AssocItemContainer::TraitContainer(clone_trait_did)\n+                },\n+            )\n+            // If that clone call hasn't already dereferenced the self type (i.e. don't give this\n+            // diagnostic in cases where we have `(&&T).clone()` and we expect `T`).\n+            && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n+            // Check that we're in fact trying to clone into the expected type\n+            && self.can_coerce(*pointee_ty, expected_ty)\n+            // And the expected type doesn't implement `Clone`\n+            && !self.predicate_must_hold_considering_regions(&traits::Obligation {\n+                cause: traits::ObligationCause::dummy(),\n+                param_env: self.param_env,\n+                recursion_depth: 0,\n+                predicate: ty::Binder::dummy(ty::TraitRef {\n+                    def_id: clone_trait_did,\n+                    substs: self.tcx.mk_substs([expected_ty.into()].iter()),\n+                })\n+                .without_const()\n+                .to_predicate(self.tcx),\n+            })\n+        {\n+            diag.span_note(\n+                callee_expr.span,\n+                &format!(\n+                    \"`{expected_ty}` does not implement `Clone`, so `{found_ty}` was cloned instead\"\n+                ),\n+            );\n+        }\n+    }\n }"}, {"sha": "9279e4c3901db303674d35d8ea5f23d980296d3d", "filename": "src/test/ui/typeck/explain_clone_autoref.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d12689c022d56d63c03a73925054c95d060e34c4/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12689c022d56d63c03a73925054c95d060e34c4/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs?ref=d12689c022d56d63c03a73925054c95d060e34c4", "patch": "@@ -0,0 +1,13 @@\n+struct NotClone;\n+\n+fn main() {\n+    clone_thing(&NotClone);\n+}\n+\n+fn clone_thing(nc: &NotClone) -> NotClone {\n+    //~^ NOTE expected `NotClone` because of return type\n+    nc.clone()\n+    //~^ ERROR mismatched type\n+    //~| NOTE `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n+    //~| NOTE expected struct `NotClone`, found `&NotClone`\n+}"}, {"sha": "faac680ea19318f02e674ec0e5ddb67ad34cf9eb", "filename": "src/test/ui/typeck/explain_clone_autoref.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d12689c022d56d63c03a73925054c95d060e34c4/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12689c022d56d63c03a73925054c95d060e34c4/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr?ref=d12689c022d56d63c03a73925054c95d060e34c4", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/explain_clone_autoref.rs:9:5\n+   |\n+LL | fn clone_thing(nc: &NotClone) -> NotClone {\n+   |                                  -------- expected `NotClone` because of return type\n+LL |\n+LL |     nc.clone()\n+   |     ^^^^^^^^^^ expected struct `NotClone`, found `&NotClone`\n+   |\n+note: `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n+  --> $DIR/explain_clone_autoref.rs:9:5\n+   |\n+LL |     nc.clone()\n+   |     ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}