{"sha": "e9a4d94c4445552830f5f08ba0903d90f1b42c16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YTRkOTRjNDQ0NTU1MjgzMGY1ZjA4YmEwOTAzZDkwZjFiNDJjMTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T14:06:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "extract parse_break_expr", "tree": {"sha": "d0ccf6eeaa04139492a6a4f2595508c55963c603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ccf6eeaa04139492a6a4f2595508c55963c603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9a4d94c4445552830f5f08ba0903d90f1b42c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a4d94c4445552830f5f08ba0903d90f1b42c16", "html_url": "https://github.com/rust-lang/rust/commit/e9a4d94c4445552830f5f08ba0903d90f1b42c16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9a4d94c4445552830f5f08ba0903d90f1b42c16/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c0ef1a8bd3822a8008462a01056cc4090516af", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c0ef1a8bd3822a8008462a01056cc4090516af", "html_url": "https://github.com/rust-lang/rust/commit/a3c0ef1a8bd3822a8008462a01056cc4090516af"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "1d3c35c6466abcd94cacf8aaac0ed24843f33535", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e9a4d94c4445552830f5f08ba0903d90f1b42c16/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a4d94c4445552830f5f08ba0903d90f1b42c16/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=e9a4d94c4445552830f5f08ba0903d90f1b42c16", "patch": "@@ -907,16 +907,7 @@ impl<'a> Parser<'a> {\n                 if self.eat_keyword(kw::Return) {\n                     return self.parse_return_expr(attrs);\n                 } else if self.eat_keyword(kw::Break) {\n-                    let label = self.eat_label();\n-                    let e = if self.token.can_begin_expr()\n-                               && !(self.token == token::OpenDelim(token::Brace)\n-                                    && self.restrictions.contains(\n-                                           Restrictions::NO_STRUCT_LITERAL)) {\n-                        Some(self.parse_expr()?)\n-                    } else {\n-                        None\n-                    };\n-                    (self.prev_span, ExprKind::Break(label, e))\n+                    return self.parse_break_expr(attrs);\n                 } else if self.eat_keyword(kw::Yield) {\n                     return self.parse_yield_expr(attrs);\n                 } else if self.eat_keyword(kw::Let) {\n@@ -1109,6 +1100,21 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    /// Parse `\"('label \":\")? break expr?`.\n+    fn parse_break_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        let lo = self.prev_span;\n+        let label = self.eat_label();\n+        let kind = if self.token != token::OpenDelim(token::Brace)\n+            || !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n+        {\n+            self.parse_expr_opt()?\n+        } else {\n+            None\n+        };\n+        let expr = self.mk_expr(lo.to(self.prev_span), ExprKind::Break(label, kind), attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n     /// Parse `\"yield\" expr?`.\n     fn parse_yield_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;"}]}