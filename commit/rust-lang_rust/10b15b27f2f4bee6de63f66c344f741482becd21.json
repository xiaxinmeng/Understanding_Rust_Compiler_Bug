{"sha": "10b15b27f2f4bee6de63f66c344f741482becd21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYjE1YjI3ZjJmNGJlZTZkZTYzZjY2YzM0NGY3NDE0ODJiZWNkMjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-31T15:48:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-31T15:48:41Z"}, "message": "Merge #8952\n\n8952: add support of impl block for doctest into runnables r=matklad a=bnjjj\n\nclose #6356 \n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "2873a060f977b0fe48b0b9c5c31be21a1abc96a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2873a060f977b0fe48b0b9c5c31be21a1abc96a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b15b27f2f4bee6de63f66c344f741482becd21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgtQVZCRBK7hj4Ov3rIwAABkUIAIonjIndVTsOq4Y+YA7ZJnAi\nS3b6UFAB5Kcd7jAlGwek89dGLNTZQbDR+gwzgfVtv6vrvtYOdz7TuknVNxBgp3ev\njeklcqTbn2mGxYPPiXbXGAuYTyhqRcDIX49dunn8i1sam73ahEizUgvUXLMek4/8\nAJXR9vTMZAfbsaP2wqRmpE5P6QP0qQYmj3FG+frvQNmIl7pS9yrGeb0AjmU1r5wW\nHjqyihSYIzDXqb30nU68UWIZbCU49hJhaRLaUGyM/drnWAnBM9sQvwiqv0Aggzqj\nWveQxa2cGomHUUZx0WoTUDCOjXKg+p2f1BNfyrwAMzxsYPRofetST2VXssdzD+0=\n=8Xt8\n-----END PGP SIGNATURE-----\n", "payload": "tree 2873a060f977b0fe48b0b9c5c31be21a1abc96a8\nparent d1b1867af7b603f15dc299399c5e2a56dca58df6\nparent 629ab189948e7a0fc726542d4c902ca4f8731c4f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622476121 +0000\ncommitter GitHub <noreply@github.com> 1622476121 +0000\n\nMerge #8952\n\n8952: add support of impl block for doctest into runnables r=matklad a=bnjjj\n\nclose #6356 \n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b15b27f2f4bee6de63f66c344f741482becd21", "html_url": "https://github.com/rust-lang/rust/commit/10b15b27f2f4bee6de63f66c344f741482becd21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b15b27f2f4bee6de63f66c344f741482becd21/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b1867af7b603f15dc299399c5e2a56dca58df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b1867af7b603f15dc299399c5e2a56dca58df6", "html_url": "https://github.com/rust-lang/rust/commit/d1b1867af7b603f15dc299399c5e2a56dca58df6"}, {"sha": "629ab189948e7a0fc726542d4c902ca4f8731c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/629ab189948e7a0fc726542d4c902ca4f8731c4f", "html_url": "https://github.com/rust-lang/rust/commit/629ab189948e7a0fc726542d4c902ca4f8731c4f"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "55205495118fe43d9b2a06c25fd94b7f7e46b2dc", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/10b15b27f2f4bee6de63f66c344f741482becd21/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b15b27f2f4bee6de63f66c344f741482becd21/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=10b15b27f2f4bee6de63f66c344f741482becd21", "patch": "@@ -113,6 +113,7 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n             res.extend(runnable.or_else(|| module_def_doctest(&sema, def)))\n         }\n         Either::Right(impl_) => {\n+            res.extend(runnable_impl(&sema, &impl_));\n             res.extend(impl_.items(db).into_iter().filter_map(|assoc| match assoc {\n                 hir::AssocItem::Function(it) => {\n                     runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n@@ -270,6 +271,26 @@ pub(crate) fn runnable_mod(sema: &Semantics<RootDatabase>, def: hir::Module) ->\n     Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n+pub(crate) fn runnable_impl(sema: &Semantics<RootDatabase>, def: &hir::Impl) -> Option<Runnable> {\n+    let attrs = def.attrs(sema.db);\n+    if !has_runnable_doc_test(&attrs) {\n+        return None;\n+    }\n+    let cfg = attrs.cfg();\n+    let nav = def.try_to_nav(sema.db)?;\n+    let ty = def.self_ty(sema.db);\n+    let adt_name = ty.as_adt()?.name(sema.db);\n+    let mut ty_args = ty.type_arguments().peekable();\n+    let params = if ty_args.peek().is_some() {\n+        format!(\"<{}>\", ty_args.format_with(\", \", |ty, cb| cb(&ty.display(sema.db))))\n+    } else {\n+        String::new()\n+    };\n+    let test_id = TestId::Path(format!(\"{}{}\", adt_name, params));\n+\n+    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg })\n+}\n+\n fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Option<Runnable> {\n     let attrs = match def {\n         hir::ModuleDef::Module(it) => it.attrs(sema.db),\n@@ -610,8 +631,23 @@ fn should_have_no_runnable_6() {}\n /// ```\n struct StructWithRunnable(String);\n \n+/// ```\n+/// let x = 5;\n+/// ```\n+impl StructWithRunnable {}\n+\n+trait Test {\n+    fn test() -> usize {\n+        5usize\n+    }\n+}\n+\n+/// ```\n+/// let x = 5;\n+/// ```\n+impl Test for StructWithRunnable {}\n \"#,\n-            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n+            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -717,6 +753,40 @@ struct StructWithRunnable(String);\n                         },\n                         cfg: None,\n                     },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 967..1024,\n+                            focus_range: 1003..1021,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"StructWithRunnable\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1088..1154,\n+                            focus_range: 1133..1151,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"StructWithRunnable\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n                 ]\n             \"#]],\n         );"}]}