{"sha": "7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "node_id": "C_kwDOAAsO6NoAKDdlZTRhYTcwMDMyMWQwZGMyYTc2M2EzMjRmZDFjMDgyOGQ3M2Y3MGY", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-27T15:33:57Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:21Z"}, "message": "lint: port non-fmt-panic diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "0ccd46d0bbccdf5d6abddbbf094387a9e5ac8919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ccd46d0bbccdf5d6abddbbf094387a9e5ac8919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "html_url": "https://github.com/rust-lang/rust/commit/7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e4bf115f2c4a4ac051f49dab862610fe57f622", "url": "https://api.github.com/repos/rust-lang/rust/commits/48e4bf115f2c4a4ac051f49dab862610fe57f622", "html_url": "https://github.com/rust-lang/rust/commit/48e4bf115f2c4a4ac051f49dab862610fe57f622"}], "stats": {"total": 223, "additions": 132, "deletions": 91}, "files": [{"sha": "39c0e7d3fa61646a02466433d9d95ca24898dfbb", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "patch": "@@ -72,3 +72,39 @@ lint-mixed-script-confusables =\n     the usage of Script Group `{$set}` in this crate consists solely of mixed script confusables\n     .includes-note = the usage includes {$includes}\n     .note = please recheck to make sure their usages are indeed what you want\n+\n+lint-non-fmt-panic = panic message is not a string literal\n+    .note = this usage of `{$name}!()` is deprecated; it will be a hard error in Rust 2021\n+    .more-info-note = for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+    .supports-fmt-note = the `{$name}!()` macro supports formatting, so there's no need for the `format!()` macro here\n+    .supports-fmt-suggestion = remove the `format!(..)` macro call\n+    .display-suggestion = add a \"{\"{\"}{\"}\"}\" format string to `Display` the message\n+    .debug-suggestion =\n+        add a \"{\"{\"}:?{\"}\"}\" format string to use the `Debug` implementation of `{$ty}`\n+    .panic-suggestion = {$already_suggested ->\n+        [true] or use\n+        *[false] use\n+    } std::panic::panic_any instead\n+\n+lint-non-fmt-panic-unused =\n+    panic message contains {$count ->\n+        [one] an unused\n+        *[other] unused\n+    } formatting {$count ->\n+        [one] placeholder\n+        *[other] placeholders\n+    }\n+    .note = this message is not used as a format string when given without arguments, but will be in Rust 2021\n+    .add-args-suggestion = add the missing {$count ->\n+        [one] argument\n+        *[other] arguments\n+    }\n+    .add-fmt-suggestion = or add a \"{\"{\"}{\"}\"}\" format string to use the message literally\n+\n+lint-non-fmt-panic-braces =\n+    panic message contains {$count ->\n+        [one] a brace\n+        *[other] braces\n+    }\n+    .note = this message is not used as a format string, but will be in Rust 2021\n+    .suggestion = add a \"{\"{\"}{\"}\"}\" format string to use the message literally"}, {"sha": "63c0d58bc9cf24da61e459e5d7c066baf25775c8", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "patch": "@@ -39,6 +39,16 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n+impl IntoDiagnosticArg for bool {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        if self {\n+            DiagnosticArgValue::Str(Cow::Borrowed(\"true\"))\n+        } else {\n+            DiagnosticArgValue::Str(Cow::Borrowed(\"false\"))\n+        }\n+    }\n+}\n+\n impl IntoDiagnosticArg for String {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         DiagnosticArgValue::Str(Cow::Owned(self))"}, {"sha": "cdad2d2e8f93e0d4bb18fa0c53032ef7bb085bfb", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "patch": "@@ -1,6 +1,6 @@\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n-use rustc_errors::{pluralize, Applicability};\n+use rustc_errors::{fluent, Applicability};\n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::lint::in_external_macro;\n@@ -120,20 +120,21 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n     }\n \n     cx.struct_span_lint(NON_FMT_PANICS, arg_span, |lint| {\n-        let mut l = lint.build(\"panic message is not a string literal\");\n-        l.note(&format!(\"this usage of {}!() is deprecated; it will be a hard error in Rust 2021\", symbol));\n-        l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n+        let mut l = lint.build(fluent::lint::non_fmt_panic);\n+        l.set_arg(\"name\", symbol);\n+        l.note(fluent::lint::note);\n+        l.note(fluent::lint::more_info_note);\n         if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n             l.emit();\n             return;\n         }\n         if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n             // A case of `panic!(format!(..))`.\n-            l.note(format!(\"the {}!() macro supports formatting, so there's no need for the format!() macro here\", symbol).as_str());\n+            l.note(fluent::lint::supports_fmt_note);\n             if let Some((open, close, _)) = find_delimiters(cx, arg_span) {\n                 l.multipart_suggestion(\n-                    \"remove the `format!(..)` macro call\",\n+                    fluent::lint::supports_fmt_suggestion,\n                     vec![\n                         (arg_span.until(open.shrink_to_hi()), \"\".into()),\n                         (close.until(arg_span.shrink_to_hi()), \"\".into()),\n@@ -153,12 +154,18 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n             );\n \n             let (suggest_display, suggest_debug) = cx.tcx.infer_ctxt().enter(|infcx| {\n-                let display = is_str || cx.tcx.get_diagnostic_item(sym::Display).map(|t| {\n-                    infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n-                }) == Some(true);\n-                let debug = !display && cx.tcx.get_diagnostic_item(sym::Debug).map(|t| {\n-                    infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n-                }) == Some(true);\n+                let display = is_str\n+                    || cx.tcx.get_diagnostic_item(sym::Display).map(|t| {\n+                        infcx\n+                            .type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env)\n+                            .may_apply()\n+                    }) == Some(true);\n+                let debug = !display\n+                    && cx.tcx.get_diagnostic_item(sym::Debug).map(|t| {\n+                        infcx\n+                            .type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env)\n+                            .may_apply()\n+                    }) == Some(true);\n                 (display, debug)\n             });\n \n@@ -175,33 +182,25 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n             if suggest_display {\n                 l.span_suggestion_verbose(\n                     arg_span.shrink_to_lo(),\n-                    \"add a \\\"{}\\\" format string to Display the message\",\n+                    fluent::lint::display_suggestion,\n                     \"\\\"{}\\\", \",\n                     fmt_applicability,\n                 );\n             } else if suggest_debug {\n+                l.set_arg(\"ty\", ty);\n                 l.span_suggestion_verbose(\n                     arg_span.shrink_to_lo(),\n-                    &format!(\n-                        \"add a \\\"{{:?}}\\\" format string to use the Debug implementation of `{}`\",\n-                        ty,\n-                    ),\n+                    fluent::lint::debug_suggestion,\n                     \"\\\"{:?}\\\", \",\n                     fmt_applicability,\n                 );\n             }\n \n             if suggest_panic_any {\n                 if let Some((open, close, del)) = find_delimiters(cx, span) {\n+                    l.set_arg(\"already_suggested\", suggest_display || suggest_debug);\n                     l.multipart_suggestion(\n-                        &format!(\n-                            \"{}use std::panic::panic_any instead\",\n-                            if suggest_display || suggest_debug {\n-                                \"or \"\n-                            } else {\n-                                \"\"\n-                            },\n-                        ),\n+                        fluent::lint::panic_suggestion,\n                         if del == '(' {\n                             vec![(span.until(open), \"std::panic::panic_any\".into())]\n                         } else {\n@@ -260,21 +259,19 @@ fn check_panic_str<'tcx>(\n                 .collect(),\n         };\n         cx.struct_span_lint(NON_FMT_PANICS, arg_spans, |lint| {\n-            let mut l = lint.build(match n_arguments {\n-                1 => \"panic message contains an unused formatting placeholder\",\n-                _ => \"panic message contains unused formatting placeholders\",\n-            });\n-            l.note(\"this message is not used as a format string when given without arguments, but will be in Rust 2021\");\n+            let mut l = lint.build(fluent::lint::non_fmt_panic_unused);\n+            l.set_arg(\"count\", n_arguments);\n+            l.note(fluent::lint::note);\n             if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_hi(),\n-                    &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n+                    fluent::lint::add_args_suggestion,\n                     \", ...\",\n                     Applicability::HasPlaceholders,\n                 );\n                 l.span_suggestion(\n                     arg.span.shrink_to_lo(),\n-                    \"or add a \\\"{}\\\" format string to use the message literally\",\n+                    fluent::lint::add_fmt_suggestion,\n                     \"\\\"{}\\\", \",\n                     Applicability::MachineApplicable,\n                 );\n@@ -289,17 +286,15 @@ fn check_panic_str<'tcx>(\n                     .map(|(i, _)| fmt_span.from_inner(InnerSpan { start: i, end: i + 1 }))\n                     .collect()\n             });\n-        let msg = match &brace_spans {\n-            Some(v) if v.len() == 1 => \"panic message contains a brace\",\n-            _ => \"panic message contains braces\",\n-        };\n+        let count = brace_spans.as_ref().map(|v| v.len()).unwrap_or(/* any number >1 */ 2);\n         cx.struct_span_lint(NON_FMT_PANICS, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n-            let mut l = lint.build(msg);\n-            l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n+            let mut l = lint.build(fluent::lint::non_fmt_panic_braces);\n+            l.set_arg(\"count\", count);\n+            l.note(fluent::lint::note);\n             if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_lo(),\n-                    \"add a \\\"{}\\\" format string to use the message literally\",\n+                    fluent::lint::suggestion,\n                     \"\\\"{}\\\", \",\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "f06dedc229845bd02b500b5daa8bce0d8aa62c0c", "filename": "src/test/ui/consts/const-eval/const_panic_stability.e2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr?ref=7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "patch": "@@ -5,9 +5,9 @@ LL |     panic!({ \"foo\" });\n    |            ^^^^^^^^^\n    |\n    = note: `#[warn(non_fmt_panics)]` on by default\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", { \"foo\" });\n    |            +++++"}, {"sha": "6e4434e6f33723fc2fec20d72c240e6c7515bf92", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ee4aa700321d0dc2a763a324fd1c0828d73f70f/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "patch": "@@ -73,9 +73,9 @@ warning: panic message is not a string literal\n LL |     assert!(false, S);\n    |                    ^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     assert!(false, \"{}\", S);\n    |                    +++++\n@@ -86,9 +86,9 @@ warning: panic message is not a string literal\n LL |     assert!(false, 123);\n    |                    ^^^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     assert!(false, \"{}\", 123);\n    |                    +++++\n@@ -99,9 +99,9 @@ warning: panic message is not a string literal\n LL |     assert!(false, Some(123));\n    |                    ^^^^^^^^^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{:?}\" format string to use the Debug implementation of `Option<i32>`\n+help: add a \"{:?}\" format string to use the `Debug` implementation of `Option<i32>`\n    |\n LL |     assert!(false, \"{:?}\", Some(123));\n    |                    +++++++\n@@ -124,9 +124,9 @@ warning: panic message is not a string literal\n LL |     panic!(C);\n    |            ^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", C);\n    |            +++++\n@@ -137,9 +137,9 @@ warning: panic message is not a string literal\n LL |     panic!(S);\n    |            ^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", S);\n    |            +++++\n@@ -150,9 +150,9 @@ warning: panic message is not a string literal\n LL |     unreachable!(S);\n    |                  ^\n    |\n-   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `unreachable!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     unreachable!(\"{}\", S);\n    |                  +++++\n@@ -163,9 +163,9 @@ warning: panic message is not a string literal\n LL |     unreachable!(S);\n    |                  ^\n    |\n-   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `unreachable!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     unreachable!(\"{}\", S);\n    |                  +++++\n@@ -176,9 +176,9 @@ warning: panic message is not a string literal\n LL |     std::panic!(123);\n    |                 ^^^\n    |\n-   = note: this usage of std::panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `std::panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     std::panic!(\"{}\", 123);\n    |                 +++++\n@@ -193,9 +193,9 @@ warning: panic message is not a string literal\n LL |     core::panic!(&*\"abc\");\n    |                  ^^^^^^^\n    |\n-   = note: this usage of core::panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `core::panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     core::panic!(\"{}\", &*\"abc\");\n    |                  +++++\n@@ -206,9 +206,9 @@ warning: panic message is not a string literal\n LL |     panic!(Some(123));\n    |            ^^^^^^^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{:?}\" format string to use the Debug implementation of `Option<i32>`\n+help: add a \"{:?}\" format string to use the `Debug` implementation of `Option<i32>`\n    |\n LL |     panic!(\"{:?}\", Some(123));\n    |            +++++++\n@@ -259,9 +259,9 @@ warning: panic message is not a string literal\n LL |     panic!(a!());\n    |            ^^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", a!());\n    |            +++++\n@@ -276,9 +276,9 @@ warning: panic message is not a string literal\n LL |     unreachable!(a!());\n    |                  ^^^^\n    |\n-   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `unreachable!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     unreachable!(\"{}\", a!());\n    |                  +++++\n@@ -289,9 +289,9 @@ warning: panic message is not a string literal\n LL |     panic!(format!(\"{}\", 1));\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-   = note: the panic!() macro supports formatting, so there's no need for the format!() macro here\n+   = note: the `panic!()` macro supports formatting, so there's no need for the `format!()` macro here\n help: remove the `format!(..)` macro call\n    |\n LL -     panic!(format!(\"{}\", 1));\n@@ -304,9 +304,9 @@ warning: panic message is not a string literal\n LL |     unreachable!(format!(\"{}\", 1));\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `unreachable!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-   = note: the unreachable!() macro supports formatting, so there's no need for the format!() macro here\n+   = note: the `unreachable!()` macro supports formatting, so there's no need for the `format!()` macro here\n help: remove the `format!(..)` macro call\n    |\n LL -     unreachable!(format!(\"{}\", 1));\n@@ -319,9 +319,9 @@ warning: panic message is not a string literal\n LL |     assert!(false, format!(\"{}\", 1));\n    |                    ^^^^^^^^^^^^^^^^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-   = note: the assert!() macro supports formatting, so there's no need for the format!() macro here\n+   = note: the `assert!()` macro supports formatting, so there's no need for the `format!()` macro here\n help: remove the `format!(..)` macro call\n    |\n LL -     assert!(false, format!(\"{}\", 1));\n@@ -334,9 +334,9 @@ warning: panic message is not a string literal\n LL |     debug_assert!(false, format!(\"{}\", 1));\n    |                          ^^^^^^^^^^^^^^^^\n    |\n-   = note: this usage of debug_assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `debug_assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-   = note: the debug_assert!() macro supports formatting, so there's no need for the format!() macro here\n+   = note: the `debug_assert!()` macro supports formatting, so there's no need for the `format!()` macro here\n help: remove the `format!(..)` macro call\n    |\n LL -     debug_assert!(false, format!(\"{}\", 1));\n@@ -349,9 +349,9 @@ warning: panic message is not a string literal\n LL |     panic![123];\n    |            ^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic![\"{}\", 123];\n    |            +++++\n@@ -366,9 +366,9 @@ warning: panic message is not a string literal\n LL |     panic!{123};\n    |            ^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!{\"{}\", 123};\n    |            +++++\n@@ -385,7 +385,7 @@ LL |     panic!(v);\n    |     |\n    |     help: use std::panic::panic_any instead: `std::panic::panic_any`\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n \n warning: panic message is not a string literal\n@@ -394,7 +394,7 @@ warning: panic message is not a string literal\n LL |     assert!(false, v);\n    |                    ^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n \n warning: panic message is not a string literal\n@@ -403,9 +403,9 @@ warning: panic message is not a string literal\n LL |     panic!(v);\n    |            ^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{:?}\" format string to use the Debug implementation of `T`\n+help: add a \"{:?}\" format string to use the `Debug` implementation of `T`\n    |\n LL |     panic!(\"{:?}\", v);\n    |            +++++++\n@@ -420,9 +420,9 @@ warning: panic message is not a string literal\n LL |     assert!(false, v);\n    |                    ^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{:?}\" format string to use the Debug implementation of `T`\n+help: add a \"{:?}\" format string to use the `Debug` implementation of `T`\n    |\n LL |     assert!(false, \"{:?}\", v);\n    |                    +++++++\n@@ -433,9 +433,9 @@ warning: panic message is not a string literal\n LL |     panic!(v);\n    |            ^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", v);\n    |            +++++\n@@ -450,9 +450,9 @@ warning: panic message is not a string literal\n LL |     assert!(false, v);\n    |                    ^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     assert!(false, \"{}\", v);\n    |                    +++++\n@@ -463,9 +463,9 @@ warning: panic message is not a string literal\n LL |     panic!(v);\n    |            ^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", v);\n    |            +++++\n@@ -480,9 +480,9 @@ warning: panic message is not a string literal\n LL |     assert!(false, v);\n    |                    ^\n    |\n-   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of `assert!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-help: add a \"{}\" format string to Display the message\n+help: add a \"{}\" format string to `Display` the message\n    |\n LL |     assert!(false, \"{}\", v);\n    |                    +++++"}]}