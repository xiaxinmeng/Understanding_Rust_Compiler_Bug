{"sha": "6b27005f2f8b20834838828588233b877a29d509", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMjcwMDVmMmY4YjIwODM0ODM4ODI4NTg4MjMzYjg3N2EyOWQ1MDk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-30T17:30:47Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-04T11:09:26Z"}, "message": "require reimplementations of all items when a defaulted associated type is overriden\n\nThis is a\n[breaking-change]\nbut it follows the RFC (not sure whether it will be accepted).", "tree": {"sha": "282bc78a385126bec9081dce88c3269301b6e013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/282bc78a385126bec9081dce88c3269301b6e013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b27005f2f8b20834838828588233b877a29d509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b27005f2f8b20834838828588233b877a29d509", "html_url": "https://github.com/rust-lang/rust/commit/6b27005f2f8b20834838828588233b877a29d509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b27005f2f8b20834838828588233b877a29d509/comments", "author": null, "committer": null, "parents": [{"sha": "ace86701a949bd9d0a7b2e9b6f43de52e99ccc35", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace86701a949bd9d0a7b2e9b6f43de52e99ccc35", "html_url": "https://github.com/rust-lang/rust/commit/ace86701a949bd9d0a7b2e9b6f43de52e99ccc35"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "9704bef6487749b1968c84d6dc5eaa613e762fad", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6b27005f2f8b20834838828588233b877a29d509/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b27005f2f8b20834838828588233b877a29d509/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6b27005f2f8b20834838828588233b877a29d509", "patch": "@@ -846,6 +846,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     // Locate trait methods\n     let tcx = ccx.tcx;\n     let trait_items = tcx.trait_items(impl_trait_ref.def_id);\n+    let mut overridden_associated_type = None;\n \n     // Check existing impl methods to see if they are both present in trait\n     // and compatible with trait signature\n@@ -911,8 +912,10 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     _ => tcx.sess.span_bug(impl_item.span, \"non-type impl-item for type\")\n                 };\n \n-                if let &ty::TypeTraitItem(..) = ty_trait_item {\n-                    // ...\n+                if let &ty::TypeTraitItem(ref at) = ty_trait_item {\n+                    if let Some(_) = at.ty {\n+                        overridden_associated_type = Some(impl_item);\n+                    }\n                 } else {\n                     span_err!(tcx.sess, impl_item.span, E0325,\n                               \"item `{}` is an associated type, \\\n@@ -930,6 +933,8 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let provided_methods = tcx.provided_trait_methods(impl_trait_ref.def_id);\n     let associated_consts = tcx.associated_consts(impl_trait_ref.def_id);\n     let mut missing_items = Vec::new();\n+    let mut invalidated_items = Vec::new();\n+    let associated_type_overridden = overridden_associated_type.is_some();\n     for trait_item in trait_items.iter() {\n         match *trait_item {\n             ty::ConstTraitItem(ref associated_const) => {\n@@ -944,9 +949,12 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 let is_provided =\n                     associated_consts.iter().any(|ac| ac.default.is_some() &&\n                                                  ac.name == associated_const.name);\n-                if !is_implemented && !is_provided {\n-                    missing_items.push(format!(\"`{}`\",\n-                                               token::get_name(associated_const.name)));\n+                if !is_implemented {\n+                    if !is_provided {\n+                        missing_items.push(associated_const.name);\n+                    } else if associated_type_overridden {\n+                        invalidated_items.push(associated_const.name);\n+                    }\n                 }\n             }\n             ty::MethodTraitItem(ref trait_method) => {\n@@ -961,8 +969,12 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     });\n                 let is_provided =\n                     provided_methods.iter().any(|m| m.name == trait_method.name);\n-                if !is_implemented && !is_provided {\n-                    missing_items.push(format!(\"`{}`\", token::get_name(trait_method.name)));\n+                if !is_implemented {\n+                    if !is_provided {\n+                        missing_items.push(trait_method.name);\n+                    } else if associated_type_overridden {\n+                        invalidated_items.push(trait_method.name);\n+                    }\n                 }\n             }\n             ty::TypeTraitItem(ref associated_type) => {\n@@ -975,17 +987,34 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     }\n                 });\n                 let is_provided = associated_type.ty.is_some();\n-                if !is_implemented && !is_provided {\n-                    missing_items.push(format!(\"`{}`\", token::get_name(associated_type.name)));\n+                if !is_implemented {\n+                    if !is_provided {\n+                        missing_items.push(associated_type.name);\n+                    } else if associated_type_overridden {\n+                        invalidated_items.push(associated_type.name);\n+                    }\n                 }\n             }\n         }\n     }\n \n     if !missing_items.is_empty() {\n         span_err!(tcx.sess, impl_span, E0046,\n-            \"not all trait items implemented, missing: {}\",\n-            missing_items.connect(\", \"));\n+            \"not all trait items implemented, missing: `{}`\",\n+            missing_items.iter()\n+                  .map(<ast::Name>::as_str)\n+                  .collect::<Vec<_>>().connect(\"`, `\"))\n+    }\n+\n+    if !invalidated_items.is_empty() {\n+        let invalidator = overridden_associated_type.unwrap();\n+        span_err!(tcx.sess, invalidator.span, E0399,\n+                  \"the following trait items need to be reimplemented \\\n+                   as `{}` was overridden: `{}`\",\n+                  invalidator.ident.as_str(),\n+                  invalidated_items.iter()\n+                                   .map(<ast::Name>::as_str)\n+                                   .collect::<Vec<_>>().connect(\"`, `\"))\n     }\n }\n "}, {"sha": "549c89599ecd82cc955e1b60d5aabac58693c7af", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b27005f2f8b20834838828588233b877a29d509/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b27005f2f8b20834838828588233b877a29d509/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=6b27005f2f8b20834838828588233b877a29d509", "patch": "@@ -2066,6 +2066,8 @@ register_diagnostics! {\n            // `#[lang = \\\"{}\\\"]` is allowed for the `{}` primitive\n     E0391, // unsupported cyclic reference between types/traits detected\n     E0392, // parameter `{}` is never used\n-    E0393  // the type parameter `{}` must be explicitly specified in an object\n+    E0393, // the type parameter `{}` must be explicitly specified in an object\n            // type because its default value `{}` references the type `Self`\"\n+    E0399  // trait items need to be implemented because the associated\n+           // type `{}` was overridden\n }"}, {"sha": "eb519e79006d2c8dd9e66a75a193c35ae341cf7a", "filename": "src/test/compile-fail/associated-types-overridden-default.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b27005f2f8b20834838828588233b877a29d509/src%2Ftest%2Fcompile-fail%2Fassociated-types-overridden-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b27005f2f8b20834838828588233b877a29d509/src%2Ftest%2Fcompile-fail%2Fassociated-types-overridden-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-overridden-default.rs?ref=6b27005f2f8b20834838828588233b877a29d509", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+pub trait Tr {\n+    type Assoc = u8;\n+    type Assoc2 = Self::Assoc;\n+    const C: u8 = 11;\n+    fn foo(&self) {}\n+}\n+\n+impl Tr for () {\n+    type Assoc = ();\n+    //~^ ERROR need to be reimplemented as `Assoc` was overridden: `Assoc2`, `C`, `foo`\n+}\n+\n+fn main() {}"}]}