{"sha": "d7cada17670c03c7029441e17381845bbe8fa3cc", "node_id": "C_kwDOAAsO6NoAKGQ3Y2FkYTE3NjcwYzAzYzcwMjk0NDFlMTczODE4NDViYmU4ZmEzY2M", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-31T10:50:53Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-31T10:51:46Z"}, "message": "obligation cause: `RepeatVec` -> `RepeatValueCopy`", "tree": {"sha": "eece8451b0767d834f5554907e8205187220d55a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eece8451b0767d834f5554907e8205187220d55a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7cada17670c03c7029441e17381845bbe8fa3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7cada17670c03c7029441e17381845bbe8fa3cc", "html_url": "https://github.com/rust-lang/rust/commit/d7cada17670c03c7029441e17381845bbe8fa3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7cada17670c03c7029441e17381845bbe8fa3cc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e730969b0d433d66d4f1c0bbd9ff70050c274ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e730969b0d433d66d4f1c0bbd9ff70050c274ad5", "html_url": "https://github.com/rust-lang/rust/commit/e730969b0d433d66d4f1c0bbd9ff70050c274ad5"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "e9fa33f656f31006b12a39d0536091830056e4f6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=d7cada17670c03c7029441e17381845bbe8fa3cc", "patch": "@@ -1899,7 +1899,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     ObligationCause::new(\n                                         span,\n                                         self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                        traits::ObligationCauseCode::RepeatVec(is_const_fn),\n+                                        traits::ObligationCauseCode::RepeatElementCopy {\n+                                            is_const_fn,\n+                                        },\n                                     ),\n                                     self.param_env,\n                                     ty::Binder::dummy(ty::TraitRef::new("}, {"sha": "1f18260d9154f52929ea480d70e87dcbfeca8af3", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=d7cada17670c03c7029441e17381845bbe8fa3cc", "patch": "@@ -236,11 +236,12 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedBoxType,\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n-    /// `[T, ..n]` implies that `T` must be `Copy`.\n-    /// If the function in the array repeat expression is a `const fn`,\n-    /// display a help message suggesting to move the function call to a\n-    /// new `const` item while saying that `T` doesn't implement `Copy`.\n-    RepeatVec(bool),\n+    /// `[expr; N]` requires `type_of(expr): Copy`.\n+    RepeatElementCopy {\n+        /// If element is a `const fn` we display a help message suggesting to move the\n+        /// function call to a new `const` item while saying that `T` doesn't implement `Copy`.\n+        is_const_fn: bool,\n+    },\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized {"}, {"sha": "72b597bb13d29caa22e322184925da867738a2d0", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=d7cada17670c03c7029441e17381845bbe8fa3cc", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         let kind = match pat.kind {\n             hir::PatKind::Wild => PatKind::Wild,\n \n-            hir::PatKind::Lit(ref value) => self.lower_lit(value),\n+            hir::PatKind::Lit(value) => self.lower_lit(value),\n \n             hir::PatKind::Range(ref lo_expr, ref hi_expr, end) => {\n                 let (lo_expr, hi_expr) = (lo_expr.as_deref(), hi_expr.as_deref());"}, {"sha": "58e002b3360818382bdc4363bf0d410fbbb8bc6b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7cada17670c03c7029441e17381845bbe8fa3cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d7cada17670c03c7029441e17381845bbe8fa3cc", "patch": "@@ -1988,7 +1988,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::Coercion { source: _, target } => {\n                 err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n             }\n-            ObligationCauseCode::RepeatVec(is_const_fn) => {\n+            ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n                     \"the `Copy` trait is required because the repeated element will be copied\",\n                 );"}]}