{"sha": "2ec007191348ef7cc13eb55e44e007b02cf75cf3", "node_id": "C_kwDOAAsO6NoAKDJlYzAwNzE5MTM0OGVmN2NjMTNlYjU1ZTQ0ZTAwN2IwMmNmNzVjZjM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-07T15:39:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-13T10:12:14Z"}, "message": "Implement references VarDebugInfo.", "tree": {"sha": "0ab24c5018013f8e7423d644aa3987b775bbf77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab24c5018013f8e7423d644aa3987b775bbf77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec007191348ef7cc13eb55e44e007b02cf75cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec007191348ef7cc13eb55e44e007b02cf75cf3", "html_url": "https://github.com/rust-lang/rust/commit/2ec007191348ef7cc13eb55e44e007b02cf75cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec007191348ef7cc13eb55e44e007b02cf75cf3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c36f50b3eca1581b23cd7c4b7d298be149665ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c36f50b3eca1581b23cd7c4b7d298be149665ec", "html_url": "https://github.com/rust-lang/rust/commit/1c36f50b3eca1581b23cd7c4b7d298be149665ec"}], "stats": {"total": 800, "additions": 439, "deletions": 361}, "files": [{"sha": "e2e33f433ce9b04f009a6a0077993c4a782dc6f3", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -41,6 +41,9 @@ pub struct PerLocalVarDebugInfo<'tcx, D> {\n \n     /// `.place.projection` from `mir::VarDebugInfo`.\n     pub projection: &'tcx ty::List<mir::PlaceElem<'tcx>>,\n+\n+    /// `references` from `mir::VarDebugInfo`.\n+    pub references: u8,\n }\n \n #[derive(Clone, Copy, Debug)]\n@@ -293,6 +296,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     dbg_var,\n                     fragment: None,\n                     projection: ty::List::empty(),\n+                    references: 0,\n                 })\n             }\n         } else {\n@@ -366,14 +370,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &self,\n         bx: &mut Bx,\n         local: mir::Local,\n-        base: PlaceRef<'tcx, Bx::Value>,\n+        mut base: PlaceRef<'tcx, Bx::Value>,\n         var: PerLocalVarDebugInfo<'tcx, Bx::DIVariable>,\n     ) {\n         let Some(dbg_var) = var.dbg_var else { return };\n         let Some(dbg_loc) = self.dbg_loc(var.source_info) else { return };\n \n-        let DebugInfoOffset { direct_offset, indirect_offsets, result: _ } =\n+        let DebugInfoOffset { mut direct_offset, indirect_offsets, result: _ } =\n             calculate_debuginfo_offset(bx, local, &var, base.layout);\n+        let mut indirect_offsets = &indirect_offsets[..];\n \n         // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n         // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n@@ -387,28 +392,44 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // LLVM can handle simple things but anything more complex than just a direct\n             // offset or one indirect offset of 0 is too complex for it to generate CV records\n             // correctly.\n-            && (direct_offset != Size::ZERO || !matches!(&indirect_offsets[..], [Size::ZERO] | []));\n-\n-        if should_create_individual_allocas {\n-            let DebugInfoOffset { direct_offset: _, indirect_offsets: _, result: place } =\n-                calculate_debuginfo_offset(bx, local, &var, base);\n+            && (direct_offset != Size::ZERO || !matches!(indirect_offsets, [Size::ZERO] | []));\n \n+        let create_alloca = |bx: &mut Bx, place: PlaceRef<'tcx, Bx::Value>, refcount| {\n             // Create a variable which will be a pointer to the actual value\n             let ptr_ty = bx\n                 .tcx()\n                 .mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: place.layout.ty });\n             let ptr_layout = bx.layout_of(ptr_ty);\n             let alloca = PlaceRef::alloca(bx, ptr_layout);\n-            bx.set_var_name(alloca.llval, &(var.name.to_string() + \".dbg.spill\"));\n+            bx.set_var_name(alloca.llval, &format!(\"{}.ref{}.dbg.spill\", var.name, refcount));\n \n             // Write the pointer to the variable\n             bx.store(place.llval, alloca.llval, alloca.align);\n \n             // Point the debug info to `*alloca` for the current variable\n-            bx.dbg_var_addr(dbg_var, dbg_loc, alloca.llval, Size::ZERO, &[Size::ZERO], None);\n-        } else {\n-            bx.dbg_var_addr(dbg_var, dbg_loc, base.llval, direct_offset, &indirect_offsets, None);\n+            alloca\n+        };\n+\n+        if var.references > 0 {\n+            base = calculate_debuginfo_offset(bx, local, &var, base).result;\n+\n+            // Point the debug info to `&...&base == alloca` for the current variable\n+            for refcount in 0..var.references {\n+                base = create_alloca(bx, base, refcount);\n+            }\n+\n+            direct_offset = Size::ZERO;\n+            indirect_offsets = &[];\n+        } else if should_create_individual_allocas {\n+            let place = calculate_debuginfo_offset(bx, local, &var, base).result;\n+\n+            // Point the debug info to `*alloca` for the current variable\n+            base = create_alloca(bx, place, 0);\n+            direct_offset = Size::ZERO;\n+            indirect_offsets = &[Size::ZERO];\n         }\n+\n+        bx.dbg_var_addr(dbg_var, dbg_loc, base.llval, direct_offset, indirect_offsets, None);\n     }\n \n     pub fn debug_introduce_locals(&self, bx: &mut Bx) {\n@@ -441,7 +462,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             };\n \n             let dbg_var = dbg_scope_and_span.map(|(dbg_scope, _, span)| {\n-                let (var_ty, var_kind) = match var.value {\n+                let (mut var_ty, var_kind) = match var.value {\n                     mir::VarDebugInfoContents::Place(place) => {\n                         let var_ty = self.monomorphized_place_ty(place.as_ref());\n                         let var_kind = if let Some(arg_index) = var.argument_index\n@@ -478,6 +499,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 };\n \n+                for _ in 0..var.references {\n+                    var_ty =\n+                        bx.tcx().mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: var_ty });\n+                }\n+\n                 self.cx.create_dbg_var(var.name, var_ty, dbg_scope, var_kind, span)\n             });\n \n@@ -489,6 +515,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         dbg_var,\n                         fragment: None,\n                         projection: place.projection,\n+                        references: var.references,\n                     });\n                 }\n                 mir::VarDebugInfoContents::Const(c) => {\n@@ -542,6 +569,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 Some(fragment_start..fragment_start + fragment_layout.size)\n                             },\n                             projection: place.projection,\n+                            references: var.references,\n                         });\n                     }\n                 }"}, {"sha": "c50e937d84fede636270aa919b1aa5c987551adf", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -448,7 +448,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         };\n         match debuginfo.value {\n             VarDebugInfoContents::Const(_) => {}\n-            VarDebugInfoContents::Place(place) => check_place(place),\n+            VarDebugInfoContents::Place(place) => {\n+                check_place(place);\n+                if debuginfo.references != 0 && place.projection.last() == Some(&PlaceElem::Deref) {\n+                    self.fail(\n+                        START_BLOCK.start_location(),\n+                        format!(\"debuginfo {:?}, has both ref and deref\", debuginfo),\n+                    );\n+                }\n+            }\n             VarDebugInfoContents::Composite { ty, ref fragments } => {\n                 for f in fragments {\n                     check_place(f.contents);"}, {"sha": "6e8e68b616b0130ba7515aad8615c723f56858ba", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -1111,6 +1111,10 @@ pub struct VarDebugInfo<'tcx> {\n     /// originated from (starting from 1). Note, if MIR inlining is enabled, then this is the\n     /// argument number in the original function before it was inlined.\n     pub argument_index: Option<u16>,\n+\n+    /// The data represents `name` dereferenced `references` times,\n+    /// and not the direct value.\n+    pub references: u8,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -1639,18 +1643,7 @@ impl<'tcx> Place<'tcx> {\n             return self;\n         }\n \n-        let mut v: Vec<PlaceElem<'tcx>>;\n-\n-        let new_projections = if self.projection.is_empty() {\n-            more_projections\n-        } else {\n-            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n-            v.extend(self.projection);\n-            v.extend(more_projections);\n-            &v\n-        };\n-\n-        Place { local: self.local, projection: tcx.mk_place_elems(new_projections) }\n+        self.as_ref().project_deeper(more_projections, tcx)\n     }\n }\n \n@@ -1721,6 +1714,27 @@ impl<'tcx> PlaceRef<'tcx> {\n             (base, *proj)\n         })\n     }\n+\n+    /// Generates a new place by appending `more_projections` to the existing ones\n+    /// and interning the result.\n+    pub fn project_deeper(\n+        self,\n+        more_projections: &[PlaceElem<'tcx>],\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Place<'tcx> {\n+        let mut v: Vec<PlaceElem<'tcx>>;\n+\n+        let new_projections = if self.projection.is_empty() {\n+            more_projections\n+        } else {\n+            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n+            v.extend(self.projection);\n+            v.extend(more_projections);\n+            &v\n+        };\n+\n+        Place { local: self.local, projection: tcx.mk_place_elems(new_projections) }\n+    }\n }\n \n impl Debug for Place<'_> {"}, {"sha": "62c3d8cf23913f049c33716f353e00182236ebd7", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -551,8 +551,13 @@ fn write_scope_tree(\n         }\n \n         let indented_debug_info = format!(\n-            \"{0:1$}debug {2} => {3:?};\",\n-            INDENT, indent, var_debug_info.name, var_debug_info.value,\n+            \"{0:1$}debug {2} => {3:&<4$}{5:?};\",\n+            INDENT,\n+            indent,\n+            var_debug_info.name,\n+            \"\",\n+            var_debug_info.references as usize,\n+            var_debug_info.value,\n         );\n \n         writeln!("}, {"sha": "596dd80bf48745ceedde2f4f857cfaec68502fb3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -842,6 +842,7 @@ macro_rules! make_mir_visitor {\n                     source_info,\n                     value,\n                     argument_index: _,\n+                    references: _,\n                 } = var_debug_info;\n \n                 self.visit_source_info(source_info);"}, {"sha": "e73208b877f1035ebb835ae80d620beb698df68a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -204,6 +204,7 @@ CloneLiftImpls! {\n     (),\n     bool,\n     usize,\n+    u8,\n     u16,\n     u32,\n     u64,"}, {"sha": "6df06df5c60f42c84e1f64158853cfc52d734ecf", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -2241,6 +2241,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.var_debug_info.push(VarDebugInfo {\n             name,\n             source_info: debug_source_info,\n+            references: 0,\n             value: VarDebugInfoContents::Place(for_arm_body.into()),\n             argument_index: None,\n         });\n@@ -2260,6 +2261,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.var_debug_info.push(VarDebugInfo {\n                 name,\n                 source_info: debug_source_info,\n+                references: 0,\n                 value: VarDebugInfoContents::Place(ref_for_guard.into()),\n                 argument_index: None,\n             });"}, {"sha": "4e3e98b56e79960030af31ba3bbbd5131ade946d", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -798,6 +798,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 self.var_debug_info.push(VarDebugInfo {\n                     name,\n+                    references: 0,\n                     source_info: SourceInfo::outermost(captured_place.var_ident.span),\n                     value: VarDebugInfoContents::Place(use_place),\n                     argument_index: None,\n@@ -828,6 +829,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.var_debug_info.push(VarDebugInfo {\n                     name,\n                     source_info,\n+                    references: 0,\n                     value: VarDebugInfoContents::Place(arg_local.into()),\n                     argument_index: Some(argument_index as u16 + 1),\n                 });"}, {"sha": "0c5e7348e047d0a9c5822bbfc2d466cfc20f4ba6", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -263,6 +263,7 @@ fn compute_replacement<'tcx>(\n         targets,\n         storage_to_remove,\n         allowed_replacements,\n+        fully_replacable_locals,\n         any_replacement: false,\n     };\n \n@@ -343,13 +344,31 @@ struct Replacer<'tcx> {\n     storage_to_remove: BitSet<Local>,\n     allowed_replacements: FxHashSet<(Local, Location)>,\n     any_replacement: bool,\n+    fully_replacable_locals: BitSet<Local>,\n }\n \n impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n+    fn visit_var_debug_info(&mut self, debuginfo: &mut VarDebugInfo<'tcx>) {\n+        if let VarDebugInfoContents::Place(ref mut place) = debuginfo.value\n+            && place.projection.is_empty()\n+            && let Value::Pointer(target, _) = self.targets[place.local]\n+            && target.projection.iter().all(|p| p.can_use_in_debuginfo())\n+        {\n+            if let Some((&PlaceElem::Deref, rest)) = target.projection.split_last() {\n+                *place = Place::from(target.local).project_deeper(rest, self.tcx);\n+                self.any_replacement = true;\n+            } else if self.fully_replacable_locals.contains(place.local) {\n+                debuginfo.references += 1;\n+                *place = target;\n+                self.any_replacement = true;\n+            }\n+        }\n+    }\n+\n     fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n         if place.projection.first() != Some(&PlaceElem::Deref) {\n             return;"}, {"sha": "45a2e9023c9ca44c1c9332a92afb1ab7e34d8c61", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -21,6 +21,7 @@ TrivialTypeTraversalImpls! {\n     (),\n     bool,\n     usize,\n+    u8,\n     u16,\n     u32,\n     u64,"}, {"sha": "09bc9dc7bcc93b7c99cff2bf39a6ee615ad1d061", "filename": "tests/mir-opt/reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -13,13 +13,16 @@\n           debug x => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:14\n           let _2: &mut i32;                // in scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n           scope 2 {\n-              debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n+-             debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n++             debug xref => &_1;           // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n               let _3: *mut i32;            // in scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n               scope 3 {\n-                  debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n+-                 debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n++                 debug xraw => _4;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n                   let _6: &i32;            // in scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n                   scope 4 {\n-                      debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n+-                     debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n++                     debug xshr => _2;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n                       let _7: i32;         // in scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n                       scope 5 {\n                           debug a => _7;   // in scope 5 at $DIR/reference_prop.rs:+6:9: +6:10\n@@ -36,18 +39,17 @@\n           _1 = const 2_i32;                // scope 0 at $DIR/reference_prop.rs:+1:17: +1:18\n -         StorageLive(_2);                 // scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n           _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n-          StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n+-         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n -         StorageLive(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _5 = &mut (*_2);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _4 = &raw mut (*_5);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-+         _4 = &raw mut _1;                // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-          _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n+-         _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n -         StorageDead(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n-          StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n+-         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n -         _6 = &(*_2);                     // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n-+         _6 = &_1;                        // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n++         _4 = &raw mut _1;                // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n           StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n -         _7 = (*_6);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n -         StorageLive(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:5: +7:26\n@@ -64,8 +66,8 @@\n           StorageDead(_10);                // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n           StorageDead(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+9:1: +9:2\n-          StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n-          StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n -         StorageDead(_2);                 // scope 1 at $DIR/reference_prop.rs:+9:1: +9:2\n           StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+9:1: +9:2\n           return;                          // scope 0 at $DIR/reference_prop.rs:+9:2: +9:2"}, {"sha": "e08954ba2fdb780570002e5f5ee22d0839b62f46", "filename": "tests/mir-opt/reference_prop.reference_propagation.ReferencePropagation.diff", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -17,12 +17,12 @@\n       let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n       let _19: usize;                      // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:14\n-      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _24: &&usize;                // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n       let _26: usize;                      // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:14\n-      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _31: *mut &usize;            // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _33: usize;                      // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:14\n       let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n@@ -44,7 +44,8 @@\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           let _5: &usize;                  // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-             debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n++             debug b => &_4;              // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n               scope 3 {\n                   debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -86,7 +87,7 @@\n           let mut _27: &usize;             // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           scope 13 {\n               debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n-              let _28: &mut &usize;        // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              let _28: *mut &usize;        // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n               scope 14 {\n                   debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n                   let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -131,7 +132,8 @@\n           }\n       }\n       scope 25 {\n-          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n++         debug a => _1;                   // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n           let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n           scope 26 {\n               debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n@@ -149,8 +151,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:14\n           _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:17: +3:24\n-          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &_4;                        // scope 1 at $DIR/reference_prop.rs:+4:17: +4:19\n+-         StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &_4;                        // scope 1 at $DIR/reference_prop.rs:+4:17: +4:19\n           StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -168,7 +170,7 @@\n           StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -215,18 +217,18 @@\n           _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n           _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _24 = _21;                       // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = opaque::<&&usize>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:36:9: 36:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(&&usize) {opaque::<&&usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -239,21 +241,21 @@\n           StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           _27 = &_26;                      // scope 12 at $DIR/reference_prop.rs:+32:21: +32:23\n           StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _28 = &raw mut _27;              // scope 13 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n           _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _31 = _28;                       // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = opaque::<*mut &usize>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:45:9: 45:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(*mut &usize) {opaque::<*mut &usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -321,8 +323,8 @@\n           StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _48 = &(*_1);                    // scope 0 at $DIR/reference_prop.rs:+61:17: +61:25\n+-         StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _48 = &(*_1);                    // scope 0 at $DIR/reference_prop.rs:+61:17: +61:25\n           StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -340,7 +342,7 @@\n           StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n           StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n           _52 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27"}, {"sha": "62cc180a6023d2360f6471df6814c142e2ff28e5", "filename": "tests/mir-opt/reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "status": "modified", "additions": 39, "deletions": 36, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -13,11 +13,11 @@\n       let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n       let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n-      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _23: &*const usize;          // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n-      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _30: *mut *const usize;      // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n       let mut _36: *const usize;           // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n@@ -39,7 +39,8 @@\n               debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n               let _5: *const usize;        // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               scope 3 {\n-                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+-                 debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n++                 debug b => &_4;          // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n                   let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n                   scope 4 {\n                       debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -90,7 +91,7 @@\n               let mut _26: *const usize;   // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n               scope 17 {\n                   debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n-                  let _27: &mut *const usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _27: *mut *const usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n                   scope 18 {\n                       debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n                       let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -144,7 +145,8 @@\n       scope 31 {\n           let _47: *const T;               // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n           scope 32 {\n-              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+-             debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n++             debug a => _1;               // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n               let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n               scope 33 {\n                   debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n@@ -167,10 +169,12 @@\n               debug a => _57;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n               let _58: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n               scope 39 {\n-                  debug b => _58;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+-                 debug b => _58;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n++                 debug b => &_57;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n                   let _59: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n                   scope 40 {\n-                      debug c => _59;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+-                     debug c => _59;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n++                     debug c => &_57;     // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n                       let _60: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n                       scope 41 {\n                           debug e => _60;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n@@ -184,8 +188,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:17: +3:24\n-          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &raw const _4;              // scope 2 at $DIR/reference_prop.rs:+4:17: +4:29\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &raw const _4;              // scope 2 at $DIR/reference_prop.rs:+4:17: +4:29\n           StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -203,7 +207,7 @@\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -246,18 +250,18 @@\n           _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n           _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _22 = opaque::<&*const usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:186:9: 186:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(&*const usize) {opaque::<&*const usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -270,21 +274,21 @@\n           StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n           _26 = &raw const _25;            // scope 16 at $DIR/reference_prop.rs:+32:21: +32:33\n           StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _27 = &raw mut _26;              // scope 17 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n           _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _29 = opaque::<*mut *const usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:195:9: 195:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(*mut *const usize) {opaque::<*mut *const usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -352,8 +356,8 @@\n           StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _47 = &raw const (*_1);          // scope 31 at $DIR/reference_prop.rs:+61:17: +61:35\n+-         StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _47 = &raw const (*_1);          // scope 31 at $DIR/reference_prop.rs:+61:17: +61:35\n           StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -371,7 +375,7 @@\n           StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageLive(_51);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n           StorageLive(_52);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n@@ -400,11 +404,10 @@\n -         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n           StorageLive(_57);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n           _57 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n-          StorageLive(_58);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n-          _58 = &raw const _57;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n-          StorageLive(_59);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         StorageLive(_58);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _58 = &raw const _57;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n+-         StorageLive(_59);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n -         _59 = &raw const (*_58);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n-+         _59 = &raw const _57;            // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n           StorageLive(_60);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n -         _60 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n +         _60 = _57;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n@@ -422,8 +425,8 @@\n           StorageDead(_61);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n           _0 = const ();                   // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n           StorageDead(_60);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_59);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_58);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_58);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n           StorageDead(_57);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n           return;                          // scope 0 at $DIR/reference_prop.rs:+82:2: +82:2\n       }"}, {"sha": "aedc08d7f926a735a4e4bd851eab9006b6dfe5e5", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut.ReferencePropagation.diff", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -17,12 +17,12 @@\n       let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n       let mut _19: usize;                  // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:18\n-      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _24: &&mut usize;            // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n       let mut _26: usize;                  // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:18\n-      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _31: *mut &mut usize;        // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let mut _33: usize;                  // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:18\n       let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n@@ -44,7 +44,8 @@\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           let _5: &mut usize;              // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-             debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n++             debug b => &_4;              // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n               scope 3 {\n                   debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -86,7 +87,7 @@\n           let mut _27: &mut usize;         // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           scope 13 {\n               debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n-              let _28: &mut &mut usize;    // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              let _28: *mut &mut usize;    // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n               scope 14 {\n                   debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n                   let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -131,7 +132,8 @@\n           }\n       }\n       scope 25 {\n-          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n++         debug a => _1;                   // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n           let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n           scope 26 {\n               debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n@@ -149,8 +151,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:18\n           _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:21: +3:28\n-          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &mut _4;                    // scope 1 at $DIR/reference_prop.rs:+4:17: +4:23\n+-         StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &mut _4;                    // scope 1 at $DIR/reference_prop.rs:+4:17: +4:23\n           StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -168,7 +170,7 @@\n           StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -215,18 +217,18 @@\n           _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n           _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _24 = _21;                       // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = opaque::<&&mut usize>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:111:9: 111:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(&&mut usize) {opaque::<&&mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -239,21 +241,21 @@\n           StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           _27 = &mut _26;                  // scope 12 at $DIR/reference_prop.rs:+32:21: +32:27\n           StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _28 = &raw mut _27;              // scope 13 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n           _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _31 = _28;                       // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = opaque::<*mut &mut usize>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:120:9: 120:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(*mut &mut usize) {opaque::<*mut &mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -318,8 +320,8 @@\n           StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _48 = &mut (*_1);                // scope 0 at $DIR/reference_prop.rs:+61:17: +61:29\n+-         StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _48 = &mut (*_1);                // scope 0 at $DIR/reference_prop.rs:+61:17: +61:29\n           StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -337,7 +339,7 @@\n           StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n           StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n           _52 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31"}, {"sha": "83478b83b2d1faaba5420d8dae9d24a85c2bd707", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -13,11 +13,11 @@\n       let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n       let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n-      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _23: &*mut usize;            // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n-      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _30: *mut *mut usize;        // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n       let mut _36: *mut usize;             // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n@@ -36,7 +36,8 @@\n               debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:18\n               let _5: *mut usize;          // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               scope 3 {\n-                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+-                 debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n++                 debug b => &_4;          // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n                   let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n                   scope 4 {\n                       debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -87,7 +88,7 @@\n               let mut _26: *mut usize;     // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n               scope 17 {\n                   debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n-                  let _27: &mut *mut usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _27: *mut *mut usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n                   scope 18 {\n                       debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n                       let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -141,7 +142,8 @@\n       scope 31 {\n           let _47: *mut T;                 // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n           scope 32 {\n-              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+-             debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n++             debug a => _1;               // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n               let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n               scope 33 {\n                   debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n@@ -163,8 +165,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:21: +3:28\n-          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &raw mut _4;                // scope 2 at $DIR/reference_prop.rs:+4:17: +4:27\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &raw mut _4;                // scope 2 at $DIR/reference_prop.rs:+4:17: +4:27\n           StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -182,7 +184,7 @@\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -225,18 +227,18 @@\n           _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n           _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _22 = opaque::<&*mut usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:270:9: 270:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(&*mut usize) {opaque::<&*mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -249,21 +251,21 @@\n           StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n           _26 = &raw mut _25;              // scope 16 at $DIR/reference_prop.rs:+32:21: +32:31\n           StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _27 = &raw mut _26;              // scope 17 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n           _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _29 = opaque::<*mut *mut usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:279:9: 279:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(*mut *mut usize) {opaque::<*mut *mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -328,8 +330,8 @@\n           StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _47 = &raw mut (*_1);            // scope 31 at $DIR/reference_prop.rs:+61:17: +61:33\n+-         StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _47 = &raw mut (*_1);            // scope 31 at $DIR/reference_prop.rs:+61:17: +61:33\n           StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -347,7 +349,7 @@\n           StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n           StorageLive(_51);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n           _51 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35"}, {"sha": "6301ee839e9e4b9c244d1cc02e9febeb797f8909", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -33,16 +33,16 @@ fn reference_propagation<'a, T: Copy>(single: &'a T, mut multiple: &'a T) {\n         let b = &a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but do not propagate it\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     {\n         let a = 5_usize;\n         let mut b = &a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -108,16 +108,16 @@ fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a m\n         let b = &mut a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     {\n         let mut a = 5_usize;\n         let mut b = &mut a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -183,16 +183,16 @@ fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *con\n         let b = &raw const a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     unsafe {\n         let a = 5_usize;\n         let mut b = &raw const a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -267,16 +267,16 @@ fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T)\n         let b = &raw mut a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     unsafe {\n         let mut a = 5_usize;\n         let mut b = &raw mut a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow."}, {"sha": "7ef6832570f4d239377a107a22fe9a3304dd4901", "filename": "tests/mir-opt/reference_prop.unique_with_copies.ReferencePropagation.diff", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -10,7 +10,8 @@\n       let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:14: +9:24\n       let mut _7: i32;                     // in scope 0 at $DIR/reference_prop.rs:+9:21: +9:23\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n+-         debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n++         debug y => _3;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n           scope 5 {\n           }\n       }\n@@ -25,7 +26,7 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n+-         StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+2:13: +2:18\n           _2 = const 0_i32;                // scope 0 at $DIR/reference_prop.rs:+2:21: +2:22\n -         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n@@ -42,7 +43,7 @@\n       bb1: {\n           StorageDead(_5);                 // scope 4 at $DIR/reference_prop.rs:+5:27: +5:28\n           StorageDead(_4);                 // scope 3 at $DIR/reference_prop.rs:+5:30: +5:31\n-          _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n+-         _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n -         StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageLive(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:5: +9:26\n@@ -59,7 +60,7 @@\n           StorageDead(_7);                 // scope 5 at $DIR/reference_prop.rs:+9:23: +9:24\n           StorageDead(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:26: +9:27\n           _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:25: +10:2\n-          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n           return;                          // scope 0 at $DIR/reference_prop.rs:+10:2: +10:2\n       }\n   }"}, {"sha": "6fd0f9367422cd49221c7f08c732d9c23e9f79bf", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 132, "deletions": 152, "changes": 284, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -9,129 +9,121 @@\n       let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n       let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n-      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n-      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n-      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let _9: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let mut _10: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _13: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let _14: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let _16: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let mut _17: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _18: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _19: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _20: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       scope 1 {\n -         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n -         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n -         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n -         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         debug a => _20;                  // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         debug b => _15;                  // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         debug c => _11;                  // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         debug d => _24;                  // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n++         debug a => _14;                  // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n++         debug b => _11;                  // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n++         debug c => _9;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n++         debug d => _16;                  // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => &_3;           // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_14;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &_9;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _21: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _22: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _31: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _32: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _21;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _22;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _23: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _24: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _33: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _34: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => &_5;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_9;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &_14;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _25: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _26: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _33;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _34;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _35: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _36: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _25;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _26;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _27: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _28: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _37: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _38: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => &_6;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_16;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &_11;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _29: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _30: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _37;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _38;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _39: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _40: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _29;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _30;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _31: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _32: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _41: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _42: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => &_4;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_11;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &_16;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _33: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _34: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _41;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _42;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _43: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _44: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _33;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _34;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _35: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _36: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n -         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n +         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _17 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         _3 = &((*_17).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n -         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         _20 = &((*_25).0: usize);        // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n++         _14 = &((*_17).0: usize);        // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n +         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _18 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         _4 = &((*_18).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n -         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         _15 = &((*_26).1: usize);        // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n++         _11 = &((*_18).1: usize);        // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n +         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _19 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         _5 = &((*_19).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n -         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         _11 = &((*_27).2: usize);        // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n++         _9 = &((*_19).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n +         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _20 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _6 = &((*_20).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-+         _24 = &((*_28).3: usize);        // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n++         _16 = &((*_20).3: usize);        // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _9 = _5;                         // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _21 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         _29 = deref_copy _20;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _31 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _32 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _31, move _32);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n++         _21 = deref_copy _14;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _22 = deref_copy _9;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_23);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _23 = (*_21);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_24);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _24 = (*_22);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _8 = Le(move _23, move _24);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_24);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_23);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n@@ -141,34 +133,30 @@\n       }\n   \n       bb2: {\n--         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _33 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+-         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _14 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _25 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         _33 = deref_copy _11;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _35 = (*_33);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _36 = (*_34);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _17 = Le(move _35, move _36);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n++         _25 = deref_copy _9;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _26 = deref_copy _14;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _27 = (*_25);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_28);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _28 = (*_26);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _13 = Le(move _27, move _28);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_28);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_27);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          switchInt(move _13) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n--         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n@@ -184,84 +172,76 @@\n       }\n   \n       bb4: {\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb5: {\n--         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+-         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _11 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _29 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _37 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         _37 = deref_copy _24;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _38 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _39 = (*_37);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _40 = (*_38);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _12 = Le(move _39, move _40);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n++         _29 = deref_copy _16;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _30 = deref_copy _11;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_31);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _31 = (*_29);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_32);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _32 = (*_30);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _10 = Le(move _31, move _32);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_32);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_31);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _7 = move _10;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         switchInt(move _10) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }\n   \n       bb6: {\n--         _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         _12 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb7: {\n--         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+-         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+-         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _16 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _33 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _41 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         _41 = deref_copy _15;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _42 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _43 = (*_41);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _44 = (*_42);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _21 = Le(move _43, move _44);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _0 = Le(move _43, move _44);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         _33 = deref_copy _11;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _34 = deref_copy _16;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_35);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _35 = (*_33);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_36);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _36 = (*_34);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _15 = Le(move _35, move _36);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _0 = Le(move _35, move _36);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_36);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_35);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _12 = move _15;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb8: {\n--         StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _0 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n           goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }"}, {"sha": "503af523872d3c88c057fa4e05f77fb67a06b25d", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.ReferencePropagation.diff", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -43,8 +43,10 @@\n           debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n           debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_3;           // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &_11;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -55,8 +57,10 @@\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_5;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &_20;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -67,8 +71,10 @@\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_6;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &_15;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -79,8 +85,10 @@\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &_4;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &_24;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -107,12 +115,12 @@\n           _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+-         _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -125,8 +133,8 @@\n           StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n@@ -138,12 +146,12 @@\n       bb2: {\n           StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+-         _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+-         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         _35 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -156,8 +164,8 @@\n           StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n@@ -180,12 +188,12 @@\n   \n       bb5: {\n           StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+-         _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+-         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         _41 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -198,8 +206,8 @@\n           StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n@@ -213,12 +221,12 @@\n   \n       bb7: {\n           StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+-         _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+-         StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n +         _47 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -231,8 +239,8 @@\n           StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }"}, {"sha": "4b2a16b50b4653be19af485addd86e6e6b04a9f2", "filename": "tests/mir-opt/uninhabited_enum.process_void.SimplifyLocals-final.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2ec007191348ef7cc13eb55e44e007b02cf75cf3/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir?ref=2ec007191348ef7cc13eb55e44e007b02cf75cf3", "patch": "@@ -3,16 +3,13 @@\n fn process_void(_1: *const Void) -> () {\n     debug input => _1;                   // in scope 0 at $DIR/uninhabited_enum.rs:+0:21: +0:26\n     let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited_enum.rs:+0:41: +0:41\n-    let _2: &Void;                       // in scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     scope 1 {\n-        debug _input => _2;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n+        debug _input => _1;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n-        StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/uninhabited_enum.rs:+4:2: +4:2\n     }\n }"}]}