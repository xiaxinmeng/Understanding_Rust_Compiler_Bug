{"sha": "e29faf0d095a51f5a06cfc6208a914b13481e1fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOWZhZjBkMDk1YTUxZjVhMDZjZmM2MjA4YTkxNGIxMzQ4MWUxZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-01T11:46:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-01T11:46:45Z"}, "message": "Auto merge of #64057 - Centril:rollup-nwtk2fb, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #63410 (Update BufWriter example to include call to flush())\n - #64029 (Account for rounding errors when deciding the diagnostic boundaries)\n - #64032 (rustdoc use -Ccodegen-units=1 by default for test compile)\n - #64039 (Update sync condvar doc style)\n - #64042 (Fix word repetition in str documentation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6d2df0a7579896719197355c7cbd381f0c8ddc44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d2df0a7579896719197355c7cbd381f0c8ddc44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29faf0d095a51f5a06cfc6208a914b13481e1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29faf0d095a51f5a06cfc6208a914b13481e1fe", "html_url": "https://github.com/rust-lang/rust/commit/e29faf0d095a51f5a06cfc6208a914b13481e1fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29faf0d095a51f5a06cfc6208a914b13481e1fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0677b9abc143d64d6b0cd6720e36eb73674632f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0677b9abc143d64d6b0cd6720e36eb73674632f", "html_url": "https://github.com/rust-lang/rust/commit/d0677b9abc143d64d6b0cd6720e36eb73674632f"}, {"sha": "0211246c7bb0c5be619e8b4c7f52bcd01305f8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0211246c7bb0c5be619e8b4c7f52bcd01305f8c5", "html_url": "https://github.com/rust-lang/rust/commit/0211246c7bb0c5be619e8b4c7f52bcd01305f8c5"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "5e5b5593fd8a7d19fa949d5ab2a9cbe8c19f7033", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e29faf0d095a51f5a06cfc6208a914b13481e1fe", "patch": "@@ -3558,7 +3558,7 @@ impl str {\n     /// A string is a sequence of bytes. `start` in this context means the first\n     /// position of that byte string; for a left-to-right language like English or\n     /// Russian, this will be left side, and for right-to-left languages like\n-    /// like Arabic or Hebrew, this will be the right side.\n+    /// Arabic or Hebrew, this will be the right side.\n     ///\n     /// # Examples\n     ///\n@@ -3595,7 +3595,7 @@ impl str {\n     /// A string is a sequence of bytes. `end` in this context means the last\n     /// position of that byte string; for a left-to-right language like English or\n     /// Russian, this will be right side, and for right-to-left languages like\n-    /// like Arabic or Hebrew, this will be the left side.\n+    /// Arabic or Hebrew, this will be the left side.\n     ///\n     /// # Examples\n     ///\n@@ -3762,7 +3762,7 @@ impl str {\n     /// A string is a sequence of bytes. `start` in this context means the first\n     /// position of that byte string; for a left-to-right language like English or\n     /// Russian, this will be left side, and for right-to-left languages like\n-    /// like Arabic or Hebrew, this will be the right side.\n+    /// Arabic or Hebrew, this will be the right side.\n     ///\n     /// # Examples\n     ///\n@@ -3801,7 +3801,7 @@ impl str {\n     /// A string is a sequence of bytes. `end` in this context means the last\n     /// position of that byte string; for a left-to-right language like English or\n     /// Russian, this will be right side, and for right-to-left languages like\n-    /// like Arabic or Hebrew, this will be the left side.\n+    /// Arabic or Hebrew, this will be the left side.\n     ///\n     /// # Examples\n     ///"}, {"sha": "a0ce761cfa2771010458b6b7b2e44d49a2d088fe", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=e29faf0d095a51f5a06cfc6208a914b13481e1fe", "patch": "@@ -146,12 +146,12 @@ impl Margin {\n             } else if self.label_right - self.span_left <= self.column_width {\n                 // Attempt to fit the code window considering only the spans and labels.\n                 let padding_left = (self.column_width - (self.label_right - self.span_left)) / 2;\n-                self.computed_left = self.span_left - padding_left;\n+                self.computed_left = self.span_left.saturating_sub(padding_left);\n                 self.computed_right = self.computed_left + self.column_width;\n             } else if self.span_right - self.span_left <= self.column_width {\n                 // Attempt to fit the code window considering the spans and labels plus padding.\n                 let padding_left = (self.column_width - (self.span_right - self.span_left)) / 5 * 2;\n-                self.computed_left = self.span_left - padding_left;\n+                self.computed_left = self.span_left.saturating_sub(padding_left);\n                 self.computed_right = self.computed_left + self.column_width;\n             } else { // Mostly give up but still don't show the full line.\n                 self.computed_left = self.span_left;\n@@ -1304,11 +1304,13 @@ impl EmitterWriter {\n                 };\n \n                 let column_width = if let Some(width) = self.terminal_width {\n-                    width\n+                    width.saturating_sub(code_offset)\n                 } else if self.ui_testing {\n                     140\n                 } else {\n-                    term_size::dimensions().map(|(w, _)| w - code_offset).unwrap_or(140)\n+                    term_size::dimensions()\n+                        .map(|(w, _)| w.saturating_sub(code_offset))\n+                        .unwrap_or(std::usize::MAX)\n                 };\n \n                 let margin = Margin::new("}, {"sha": "88397aacac149118eee7313f409be854e63afa9d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e29faf0d095a51f5a06cfc6208a914b13481e1fe", "patch": "@@ -263,6 +263,7 @@ fn run_test(\n     for extern_str in &options.extern_strs {\n         compiler.arg(\"--extern\").arg(&extern_str);\n     }\n+    compiler.arg(\"-Ccodegen-units=1\");\n     for codegen_options_str in &options.codegen_options_strs {\n         compiler.arg(\"-C\").arg(&codegen_options_str);\n     }"}, {"sha": "9593a1bae0a3c5abc2cfbfcbd2fcb5cc40c17e10", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=e29faf0d095a51f5a06cfc6208a914b13481e1fe", "patch": "@@ -9,21 +9,21 @@ use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom,\n         IoSliceMut};\n use crate::memchr;\n \n-/// The `BufReader` struct adds buffering to any reader.\n+/// The `BufReader<R>` struct adds buffering to any reader.\n ///\n /// It can be excessively inefficient to work directly with a [`Read`] instance.\n /// For example, every call to [`read`][`TcpStream::read`] on [`TcpStream`]\n-/// results in a system call. A `BufReader` performs large, infrequent reads on\n+/// results in a system call. A `BufReader<R>` performs large, infrequent reads on\n /// the underlying [`Read`] and maintains an in-memory buffer of the results.\n ///\n-/// `BufReader` can improve the speed of programs that make *small* and\n+/// `BufReader<R>` can improve the speed of programs that make *small* and\n /// *repeated* read calls to the same file or network socket. It does not\n /// help when reading very large amounts at once, or reading just one or a few\n /// times. It also provides no advantage when reading from a source that is\n /// already in memory, like a `Vec<u8>`.\n ///\n-/// When the `BufReader` is dropped, the contents of its buffer will be\n-/// discarded. Creating multiple instances of a `BufReader` on the same\n+/// When the `BufReader<R>` is dropped, the contents of its buffer will be\n+/// discarded. Creating multiple instances of a `BufReader<R>` on the same\n /// stream can cause data loss.\n ///\n /// [`Read`]: ../../std/io/trait.Read.html\n@@ -56,7 +56,7 @@ pub struct BufReader<R> {\n }\n \n impl<R: Read> BufReader<R> {\n-    /// Creates a new `BufReader` with a default buffer capacity. The default is currently 8 KB,\n+    /// Creates a new `BufReader<R>` with a default buffer capacity. The default is currently 8 KB,\n     /// but may change in the future.\n     ///\n     /// # Examples\n@@ -76,7 +76,7 @@ impl<R: Read> BufReader<R> {\n         BufReader::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n-    /// Creates a new `BufReader` with the specified buffer capacity.\n+    /// Creates a new `BufReader<R>` with the specified buffer capacity.\n     ///\n     /// # Examples\n     ///\n@@ -177,7 +177,7 @@ impl<R> BufReader<R> {\n         &self.buf[self.pos..self.cap]\n     }\n \n-    /// Unwraps this `BufReader`, returning the underlying reader.\n+    /// Unwraps this `BufReader<R>`, returning the underlying reader.\n     ///\n     /// Note that any leftover data in the internal buffer is lost.\n     ///\n@@ -304,7 +304,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// Seek to an offset, in bytes, in the underlying reader.\n     ///\n     /// The position used for seeking with `SeekFrom::Current(_)` is the\n-    /// position the underlying reader would be at if the `BufReader` had no\n+    /// position the underlying reader would be at if the `BufReader<R>` had no\n     /// internal buffer.\n     ///\n     /// Seeking always discards the internal buffer, even if the seek position\n@@ -355,19 +355,20 @@ impl<R: Seek> Seek for BufReader<R> {\n /// It can be excessively inefficient to work directly with something that\n /// implements [`Write`]. For example, every call to\n /// [`write`][`TcpStream::write`] on [`TcpStream`] results in a system call. A\n-/// `BufWriter` keeps an in-memory buffer of data and writes it to an underlying\n+/// `BufWriter<W>` keeps an in-memory buffer of data and writes it to an underlying\n /// writer in large, infrequent batches.\n ///\n-/// `BufWriter` can improve the speed of programs that make *small* and\n+/// `BufWriter<W>` can improve the speed of programs that make *small* and\n /// *repeated* write calls to the same file or network socket. It does not\n /// help when writing very large amounts at once, or writing just one or a few\n /// times. It also provides no advantage when writing to a destination that is\n /// in memory, like a `Vec<u8>`.\n ///\n-/// When the `BufWriter` is dropped, the contents of its buffer will be written\n-/// out. However, any errors that happen in the process of flushing the buffer\n-/// when the writer is dropped will be ignored. Code that wishes to handle such\n-/// errors must manually call [`flush`] before the writer is dropped.\n+/// It is critical to call [`flush`] before `BufWriter<W>` is dropped. Though\n+/// dropping will attempt to flush the the contents of the buffer, any errors\n+/// that happen in the process of dropping will be ignored. Calling ['flush']\n+/// ensures that the buffer is empty and thus dropping will not even attempt\n+/// file operations.\n ///\n /// # Examples\n ///\n@@ -386,7 +387,7 @@ impl<R: Seek> Seek for BufReader<R> {\n ///\n /// Because we're not buffering, we write each one in turn, incurring the\n /// overhead of a system call per byte written. We can fix this with a\n-/// `BufWriter`:\n+/// `BufWriter<W>`:\n ///\n /// ```no_run\n /// use std::io::prelude::*;\n@@ -398,11 +399,12 @@ impl<R: Seek> Seek for BufReader<R> {\n /// for i in 0..10 {\n ///     stream.write(&[i+1]).unwrap();\n /// }\n+/// stream.flush().unwrap();\n /// ```\n ///\n-/// By wrapping the stream with a `BufWriter`, these ten writes are all grouped\n-/// together by the buffer, and will all be written out in one system call when\n-/// the `stream` is dropped.\n+/// By wrapping the stream with a `BufWriter<W>`, these ten writes are all grouped\n+/// together by the buffer and will all be written out in one system call when\n+/// the `stream` is flushed.\n ///\n /// [`Write`]: ../../std/io/trait.Write.html\n /// [`TcpStream::write`]: ../../std/net/struct.TcpStream.html#method.write\n@@ -447,7 +449,7 @@ pub struct BufWriter<W: Write> {\n pub struct IntoInnerError<W>(W, Error);\n \n impl<W: Write> BufWriter<W> {\n-    /// Creates a new `BufWriter` with a default buffer capacity. The default is currently 8 KB,\n+    /// Creates a new `BufWriter<W>` with a default buffer capacity. The default is currently 8 KB,\n     /// but may change in the future.\n     ///\n     /// # Examples\n@@ -463,7 +465,7 @@ impl<W: Write> BufWriter<W> {\n         BufWriter::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n-    /// Creates a new `BufWriter` with the specified buffer capacity.\n+    /// Creates a new `BufWriter<W>` with the specified buffer capacity.\n     ///\n     /// # Examples\n     ///\n@@ -564,7 +566,7 @@ impl<W: Write> BufWriter<W> {\n         &self.buf\n     }\n \n-    /// Unwraps this `BufWriter`, returning the underlying writer.\n+    /// Unwraps this `BufWriter<W>`, returning the underlying writer.\n     ///\n     /// The buffer is written out before returning the writer.\n     ///"}, {"sha": "65ce19f2a1b3a5c5a50e1fb2044410f681db829b", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29faf0d095a51f5a06cfc6208a914b13481e1fe/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=e29faf0d095a51f5a06cfc6208a914b13481e1fe", "patch": "@@ -28,14 +28,14 @@ impl WaitTimeoutResult {\n     /// once the boolean has been updated and notified.\n     ///\n     /// ```\n-    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::sync::{Arc, Condvar, Mutex};\n     /// use std::thread;\n     /// use std::time::Duration;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n     /// let pair2 = pair.clone();\n     ///\n-    /// thread::spawn(move|| {\n+    /// thread::spawn(move || {\n     ///     let (lock, cvar) = &*pair2;\n     ///\n     ///     // Let's wait 20 milliseconds before notifying the condvar."}]}