{"sha": "e837df84792d2cbf5c606788c7cab7ea4d1829d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzdkZjg0NzkyZDJjYmY1YzYwNjc4OGM3Y2FiN2VhNGQxODI5ZDA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-10T13:41:54Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-10T13:41:54Z"}, "message": "infer: update resolver when descending into block", "tree": {"sha": "7b9b4e4523803432d157220199a4a11c4821c471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9b4e4523803432d157220199a4a11c4821c471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e837df84792d2cbf5c606788c7cab7ea4d1829d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e837df84792d2cbf5c606788c7cab7ea4d1829d0", "html_url": "https://github.com/rust-lang/rust/commit/e837df84792d2cbf5c606788c7cab7ea4d1829d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e837df84792d2cbf5c606788c7cab7ea4d1829d0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a1b91f205ac9c3d397b2bea033639f5df9e6b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a1b91f205ac9c3d397b2bea033639f5df9e6b6", "html_url": "https://github.com/rust-lang/rust/commit/82a1b91f205ac9c3d397b2bea033639f5df9e6b6"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "d05c715e721c62aae807b4d0b5232ca4e3e697db", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e837df84792d2cbf5c606788c7cab7ea4d1829d0/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e837df84792d2cbf5c606788c7cab7ea4d1829d0/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=e837df84792d2cbf5c606788c7cab7ea4d1829d0", "patch": "@@ -137,24 +137,28 @@ impl<'a> InferenceContext<'a> {\n \n                 self.coerce_merge_branch(&then_ty, &else_ty)\n             }\n-            Expr::Block { statements, tail, label, id: _ } => match label {\n-                Some(_) => {\n-                    let break_ty = self.table.new_type_var();\n-                    self.breakables.push(BreakableContext {\n-                        may_break: false,\n-                        break_ty: break_ty.clone(),\n-                        label: label.map(|label| self.body[label].name.clone()),\n-                    });\n-                    let ty = self.infer_block(statements, *tail, &Expectation::has_type(break_ty));\n-                    let ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n-                    if ctxt.may_break {\n-                        ctxt.break_ty\n-                    } else {\n-                        ty\n+            Expr::Block { statements, tail, label, id: _ } => {\n+                self.resolver = resolver_for_expr(self.db.upcast(), self.owner, tgt_expr);\n+                match label {\n+                    Some(_) => {\n+                        let break_ty = self.table.new_type_var();\n+                        self.breakables.push(BreakableContext {\n+                            may_break: false,\n+                            break_ty: break_ty.clone(),\n+                            label: label.map(|label| self.body[label].name.clone()),\n+                        });\n+                        let ty =\n+                            self.infer_block(statements, *tail, &Expectation::has_type(break_ty));\n+                        let ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n+                        if ctxt.may_break {\n+                            ctxt.break_ty\n+                        } else {\n+                            ty\n+                        }\n                     }\n+                    None => self.infer_block(statements, *tail, expected),\n                 }\n-                None => self.infer_block(statements, *tail, expected),\n-            },\n+            }\n             Expr::Unsafe { body } | Expr::Const { body } => self.infer_expr(*body, expected),\n             Expr::TryBlock { body } => {\n                 let _inner = self.infer_expr(*body, expected);"}, {"sha": "ab21332fbb1e3ba1d368bb4b78e62a023feaec3e", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e837df84792d2cbf5c606788c7cab7ea4d1829d0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e837df84792d2cbf5c606788c7cab7ea4d1829d0/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=e837df84792d2cbf5c606788c7cab7ea4d1829d0", "patch": "@@ -2415,3 +2415,22 @@ fn infer_const_params() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn infer_inner_type() {\n+    check_infer(r#\"\n+        fn foo() {\n+            struct S { field: u32 }\n+            let s = S { field: 0 };\n+            let f = s.field;\n+        }\n+    \"#, expect![[r#\"\n+        9..89 '{     ...eld; }': ()\n+        47..48 's': S\n+        51..65 'S { field: 0 }': S\n+        62..63 '0': u32\n+        75..76 'f': u32\n+        79..80 's': S\n+        79..86 's.field': u32\n+    \"#]]);\n+}"}]}