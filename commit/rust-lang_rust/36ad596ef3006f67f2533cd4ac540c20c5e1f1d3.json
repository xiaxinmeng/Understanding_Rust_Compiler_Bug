{"sha": "36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "node_id": "C_kwDOAAsO6NoAKDM2YWQ1OTZlZjMwMDZmNjdmMjUzM2NkNGFjNTQwYzIwYzVlMWYxZDM", "commit": {"author": {"name": "ydah", "email": "13041216+ydah@users.noreply.github.com", "date": "2022-05-20T01:39:10Z"}, "committer": {"name": "ydah", "email": "13041216+ydah@users.noreply.github.com", "date": "2022-05-20T01:39:10Z"}, "message": "Fix typo\n\nThis PR is fixes typo \"avaiable\" to \"available\".", "tree": {"sha": "fd59d67a4ad721e5ffb0fb09b2dc098f25c19323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd59d67a4ad721e5ffb0fb09b2dc098f25c19323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "html_url": "https://github.com/rust-lang/rust/commit/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3/comments", "author": {"login": "ydah", "id": 13041216, "node_id": "MDQ6VXNlcjEzMDQxMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/13041216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ydah", "html_url": "https://github.com/ydah", "followers_url": "https://api.github.com/users/ydah/followers", "following_url": "https://api.github.com/users/ydah/following{/other_user}", "gists_url": "https://api.github.com/users/ydah/gists{/gist_id}", "starred_url": "https://api.github.com/users/ydah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ydah/subscriptions", "organizations_url": "https://api.github.com/users/ydah/orgs", "repos_url": "https://api.github.com/users/ydah/repos", "events_url": "https://api.github.com/users/ydah/events{/privacy}", "received_events_url": "https://api.github.com/users/ydah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ydah", "id": 13041216, "node_id": "MDQ6VXNlcjEzMDQxMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/13041216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ydah", "html_url": "https://github.com/ydah", "followers_url": "https://api.github.com/users/ydah/followers", "following_url": "https://api.github.com/users/ydah/following{/other_user}", "gists_url": "https://api.github.com/users/ydah/gists{/gist_id}", "starred_url": "https://api.github.com/users/ydah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ydah/subscriptions", "organizations_url": "https://api.github.com/users/ydah/orgs", "repos_url": "https://api.github.com/users/ydah/repos", "events_url": "https://api.github.com/users/ydah/events{/privacy}", "received_events_url": "https://api.github.com/users/ydah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0672870491e84362f76ddecd50fa229f9b06dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0672870491e84362f76ddecd50fa229f9b06dff", "html_url": "https://github.com/rust-lang/rust/commit/c0672870491e84362f76ddecd50fa229f9b06dff"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "721c234c6e60ad01e38df9087f970d20bac3b021", "filename": "src/doc/rustc/src/platform-support/pc-windows-gnullvm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "raw_url": "https://github.com/rust-lang/rust/raw/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md?ref=36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "patch": "@@ -4,7 +4,7 @@\n \n Windows targets similar to `*-pc-windows-gnu` but using UCRT as the runtime and various LLVM tools/libraries instead of GCC/Binutils.\n \n-Target triples avaiable so far:\n+Target triples available so far:\n - `aarch64-pc-windows-gnullvm`\n - `x86_64-pc-windows-gnullvm`\n \n@@ -26,7 +26,7 @@ Like with any other Windows target created binaries are in PE format.\n ## Building the target\n \n For cross-compilation I recommend using [llvm-mingw](https://github.com/mstorsjo/llvm-mingw) toolchain, one change that seems necessary beside configuring corss compilers is disabling experimental `m86k` target. Otherwise LLVM build fails with `multiple definition ...` errors.\n-Native bootstrapping builds require rather fragile hacks until host artifacts are avaiable so I won't describe them here.\n+Native bootstrapping builds require rather fragile hacks until host artifacts are available so I won't describe them here.\n \n ## Building Rust programs\n "}, {"sha": "d26f4ee894fad47e06775b84580d806c16109734", "filename": "src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "patch": "@@ -3,7 +3,7 @@\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n //! CPU and encodes them in a `usize` where each bit position represents\n-//! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n+//! whether a feature is available (bit is set) or unavailable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the\n //! the `__crate::detect::check_for!` macro is used to map string literals (e.g.,"}, {"sha": "02d5eed1c2923ce759f98ebc7e9869f99f4dca0a", "filename": "src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "patch": "@@ -3,7 +3,7 @@\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n //! CPU and encodes them in a `usize` where each bit position represents\n-//! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n+//! whether a feature is available (bit is set) or unavailable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the\n //! the `__crate::detect::check_for!` macro is used to map string literals (e.g.,"}]}