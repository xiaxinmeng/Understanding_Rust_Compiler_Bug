{"sha": "4b19a2c119a7764ec81a122c4d6257715462e956", "node_id": "C_kwDOAAsO6NoAKDRiMTlhMmMxMTlhNzc2NGVjODFhMTIyYzRkNjI1NzcxNTQ2MmU5NTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-06T02:49:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:48:55Z"}, "message": "Combine OfOpaque and OfProjection", "tree": {"sha": "62c473025ed10706497b41c02905f7851d9d6eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c473025ed10706497b41c02905f7851d9d6eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b19a2c119a7764ec81a122c4d6257715462e956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b19a2c119a7764ec81a122c4d6257715462e956", "html_url": "https://github.com/rust-lang/rust/commit/4b19a2c119a7764ec81a122c4d6257715462e956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b19a2c119a7764ec81a122c4d6257715462e956/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96cb18e864eb31f164fdfee5cb011d3576415b5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/96cb18e864eb31f164fdfee5cb011d3576415b5d", "html_url": "https://github.com/rust-lang/rust/commit/96cb18e864eb31f164fdfee5cb011d3576415b5d"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "b050ad20afbdbcca92547e224feda97a9d8af8b8", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b19a2c119a7764ec81a122c4d6257715462e956/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b19a2c119a7764ec81a122c4d6257715462e956/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=4b19a2c119a7764ec81a122c4d6257715462e956", "patch": "@@ -38,7 +38,6 @@ use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable, VariantDef};\n use rustc_session::lint;\n use rustc_session::Session;\n@@ -75,10 +74,8 @@ enum PointerKind<'tcx> {\n     VTable(Option<DefId>),\n     /// Slice\n     Length,\n-    /// The unsize info of this projection\n-    OfProjection(ty::AliasTy<'tcx>),\n-    /// The unsize info of this opaque ty\n-    OfOpaque(DefId, SubstsRef<'tcx>),\n+    /// The unsize info of this projection or opaque type\n+    OfAlias(ty::AliasTy<'tcx>),\n     /// The unsize info of this parameter\n     OfParam(ty::ParamTy),\n }\n@@ -118,10 +115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Pointers to foreign types are thin, despite being unsized\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n-            ty::Alias(ty::Projection, pi) => Some(PointerKind::OfProjection(pi)),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n-                Some(PointerKind::OfOpaque(def_id, substs))\n-            }\n+            ty::Alias(_, pi) => Some(PointerKind::OfAlias(pi)),\n             ty::Param(p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information.\n             ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) => None,\n@@ -978,11 +972,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             Some(PointerKind::Thin) => Ok(CastKind::AddrPtrCast),\n             Some(PointerKind::VTable(_)) => Err(CastError::IntToFatCast(Some(\"a vtable\"))),\n             Some(PointerKind::Length) => Err(CastError::IntToFatCast(Some(\"a length\"))),\n-            Some(\n-                PointerKind::OfProjection(_)\n-                | PointerKind::OfOpaque(_, _)\n-                | PointerKind::OfParam(_),\n-            ) => Err(CastError::IntToFatCast(None)),\n+            Some(PointerKind::OfAlias(_) | PointerKind::OfParam(_)) => {\n+                Err(CastError::IntToFatCast(None))\n+            }\n         }\n     }\n "}]}