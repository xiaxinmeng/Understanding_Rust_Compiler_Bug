{"sha": "74c39469beaef51177369c12a08c7ef5273065ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YzM5NDY5YmVhZWY1MTE3NzM2OWMxMmEwOGM3ZWY1MjczMDY1Y2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-13T23:10:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-13T23:52:12Z"}, "message": "Reuse landing pads when possible\n\nCuts the optimized rustc bin from 5.2 to 4.7MB", "tree": {"sha": "9ac7ab9be8834b9bc0f77e2ed87a7e92ca9b81bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac7ab9be8834b9bc0f77e2ed87a7e92ca9b81bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c39469beaef51177369c12a08c7ef5273065ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c39469beaef51177369c12a08c7ef5273065ca", "html_url": "https://github.com/rust-lang/rust/commit/74c39469beaef51177369c12a08c7ef5273065ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c39469beaef51177369c12a08c7ef5273065ca/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45c91135ac4e8dbd49fa446ff033dc7e9070c8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45c91135ac4e8dbd49fa446ff033dc7e9070c8e", "html_url": "https://github.com/rust-lang/rust/commit/e45c91135ac4e8dbd49fa446ff033dc7e9070c8e"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "a103c7d311b02ad181c7b5feaea76327bca7a13c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/74c39469beaef51177369c12a08c7ef5273065ca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c39469beaef51177369c12a08c7ef5273065ca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=74c39469beaef51177369c12a08c7ef5273065ca", "patch": "@@ -3731,15 +3731,25 @@ fn invoke_(bcx: @block_ctxt, llfn: ValueRef,\n     // FIXME: May be worth turning this into a plain call when there are no\n     // cleanups to run\n     let normal_bcx = new_sub_block_ctxt(bcx, \"normal return\");\n-    let unwind_bcx = new_sub_block_ctxt(bcx, \"unwind\");\n     let retval = invoker(bcx, llfn, llargs,\n                          normal_bcx.llbb,\n-                         unwind_bcx.llbb);\n-    trans_landing_pad(unwind_bcx);\n+                         get_landing_pad(bcx));\n     ret rslt(normal_bcx, retval);\n }\n \n-fn trans_landing_pad(bcx: @block_ctxt) {\n+fn get_landing_pad(bcx: @block_ctxt) -> BasicBlockRef {\n+    let scope_bcx = find_scope_cx(bcx);\n+    if scope_bcx.cleanups_dirty {\n+        let unwind_bcx = new_sub_block_ctxt(bcx, \"unwind\");\n+        let lpadbb = trans_landing_pad(unwind_bcx);\n+        scope_bcx.lpad = some(lpadbb);\n+        scope_bcx.cleanups_dirty = false;\n+    }\n+    assert option::is_some(scope_bcx.lpad);\n+    ret option::get(scope_bcx.lpad);\n+}\n+\n+fn trans_landing_pad(bcx: @block_ctxt) -> BasicBlockRef {\n     // The landing pad return type (the type being propagated). Not sure what\n     // this represents but it's determined by the personality function and\n     // this is what the EH proposal example uses.\n@@ -3773,6 +3783,7 @@ fn trans_landing_pad(bcx: @block_ctxt) {\n \n     // Continue unwinding\n     Resume(bcx, llretval);\n+    ret bcx.llbb;\n }\n \n fn trans_tup(cx: @block_ctxt, elts: [@ast::expr], id: ast::node_id) ->\n@@ -4522,6 +4533,8 @@ fn new_block_ctxt(cx: @fn_ctxt, parent: block_parent, kind: block_kind,\n           parent: parent,\n           kind: kind,\n           mutable cleanups: [],\n+          mutable cleanups_dirty: true,\n+          mutable lpad: option::none,\n           sp: cx.sp,\n           fcx: cx};\n }\n@@ -4556,6 +4569,8 @@ fn new_raw_block_ctxt(fcx: @fn_ctxt, llbb: BasicBlockRef) -> @block_ctxt {\n           parent: parent_none,\n           kind: NON_SCOPE_BLOCK,\n           mutable cleanups: [],\n+          mutable cleanups_dirty: true,\n+          mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx};\n }\n@@ -4622,6 +4637,8 @@ fn llstaticallocas_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           parent: parent_none,\n           kind: SCOPE_BLOCK,\n           mutable cleanups: [],\n+          mutable cleanups_dirty: true,\n+          mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx};\n }\n@@ -4632,6 +4649,8 @@ fn llderivedtydescs_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           parent: parent_none,\n           kind: SCOPE_BLOCK,\n           mutable cleanups: [],\n+          mutable cleanups_dirty: true,\n+          mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx};\n }"}, {"sha": "a02f51d777045393ecea0a687ae6fd96a8a1ca11", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74c39469beaef51177369c12a08c7ef5273065ca/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c39469beaef51177369c12a08c7ef5273065ca/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=74c39469beaef51177369c12a08c7ef5273065ca", "patch": "@@ -270,7 +270,9 @@ tag cleanup {\n }\n \n fn add_clean(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n-    find_scope_cx(cx).cleanups += [clean(bind drop_ty(_, val, ty))];\n+    let scope_cx = find_scope_cx(cx);\n+    scope_cx.cleanups += [clean(bind drop_ty(_, val, ty))];\n+    scope_cx.cleanups_dirty = true;\n }\n fn add_clean_temp(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n     fn spill_and_drop(cx: @block_ctxt, val: ValueRef, ty: ty::t) ->\n@@ -281,8 +283,10 @@ fn add_clean_temp(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n         bcx = r.bcx;\n         ret drop_ty(bcx, spilled, ty);\n     }\n-    find_scope_cx(cx).cleanups +=\n+    let scope_cx = find_scope_cx(cx);\n+    scope_cx.cleanups +=\n         [clean_temp(val, bind spill_and_drop(_, val, ty))];\n+    scope_cx.cleanups_dirty = true;\n }\n \n // Note that this only works for temporaries. We should, at some point, move\n@@ -316,7 +320,7 @@ fn revoke_clean(cx: @block_ctxt, val: ValueRef, t: ty::t) -> @block_ctxt {\n         std::vec::slice(sc_cx.cleanups, 0u, found as uint) +\n             std::vec::slice(sc_cx.cleanups, (found as uint) + 1u,\n                             std::vec::len(sc_cx.cleanups));\n-\n+    sc_cx.cleanups_dirty = true;\n     ret cx;\n }\n \n@@ -389,6 +393,8 @@ type block_ctxt =\n      parent: block_parent,\n      kind: block_kind,\n      mutable cleanups: [cleanup],\n+     mutable cleanups_dirty: bool,\n+     mutable lpad: option::t<BasicBlockRef>,\n      sp: span,\n      fcx: @fn_ctxt};\n "}]}