{"sha": "723f515b6006706b88d22c8edb05330df6365a63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyM2Y1MTViNjAwNjcwNmI4OGQyMmM4ZWRiMDUzMzBkZjYzNjVhNjM=", "commit": {"author": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-05-30T21:58:32Z"}, "committer": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-06-17T11:02:36Z"}, "message": "Add macro_braces lint to check for irregular brace use in certain macros\n\nRename unconventional -> nonstandard, add config field\n\nAdd standard_macro_braces fields so users can specify macro names and\nbrace combinations to lint for in the clippy.toml file.\n\nFix errors caused by nonstandard_macro_braces in other lint tests\n\nFix users ability to override the default nonstandard macro braces\n\nAdd type position macros impl `check_ty`", "tree": {"sha": "e46a02529c9436d300d25fbbad756785965c87e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46a02529c9436d300d25fbbad756785965c87e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/723f515b6006706b88d22c8edb05330df6365a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/723f515b6006706b88d22c8edb05330df6365a63", "html_url": "https://github.com/rust-lang/rust/commit/723f515b6006706b88d22c8edb05330df6365a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/723f515b6006706b88d22c8edb05330df6365a63/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f5ccd63a93b04d4d8dcb15b5a5de58a0d8c109", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f5ccd63a93b04d4d8dcb15b5a5de58a0d8c109", "html_url": "https://github.com/rust-lang/rust/commit/f1f5ccd63a93b04d4d8dcb15b5a5de58a0d8c109"}], "stats": {"total": 453, "additions": 443, "deletions": 10}, "files": [{"sha": "c30a0849348db335c97c55e0ecd059d00cc30305", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -2575,6 +2575,7 @@ Released 2018-09-13\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n+[`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces\n [`not_unsafe_ptr_arg_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref"}, {"sha": "e3fbd1adee9bbcc8f0b6961ec946eb0465603784", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -293,6 +293,7 @@ mod no_effect;\n mod non_copy_const;\n mod non_expressive_names;\n mod non_octal_unix_permissions;\n+mod nonstandard_macro_braces;\n mod open_options;\n mod option_env_unwrap;\n mod option_if_let_else;\n@@ -844,6 +845,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         non_expressive_names::SIMILAR_NAMES,\n         non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n+        nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         option_env_unwrap::OPTION_ENV_UNWRAP,\n         option_if_let_else::OPTION_IF_LET_ELSE,\n@@ -1360,6 +1362,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n         LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n+        LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n         LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n@@ -1536,6 +1539,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n+        LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n         LintId::of(ptr::CMP_NULL),\n         LintId::of(ptr::PTR_ARG),\n         LintId::of(ptr_eq::PTR_EQ),\n@@ -2040,6 +2044,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n     });\n+    let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_early_pass(move || box nonstandard_macro_braces::MacroBraces::new(&macro_matcher));\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n     store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n     store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);"}, {"sha": "1adad5be6ddc591f2cf11944e4b98f8c1d5554fb", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "added", "additions": 276, "deletions": 0, "changes": 276, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -0,0 +1,276 @@\n+use std::{\n+    fmt,\n+    hash::{Hash, Hasher},\n+};\n+\n+use clippy_utils::{diagnostics::span_lint_and_help, in_macro, is_direct_expn_of, source::snippet_opt};\n+use if_chain::if_chain;\n+use rustc_ast::ast;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Span;\n+use serde::{de, Deserialize};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks that common macros are used with consistent bracing.\n+    ///\n+    /// **Why is this bad?** This is mostly a consistency lint although using () or []\n+    /// doesn't give you a semicolon in item position, which can be unexpected.\n+    ///\n+    /// **Known problems:**\n+    /// None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// vec!{1, 2, 3};\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// vec![1, 2, 3];\n+    /// ```\n+    pub NONSTANDARD_MACRO_BRACES,\n+    style,\n+    \"check consistent use of braces in macro\"\n+}\n+\n+const BRACES: &[(&str, &str)] = &[(\"(\", \")\"), (\"{\", \"}\"), (\"[\", \"]\")];\n+\n+/// The (name, (open brace, close brace), source snippet)\n+type MacroInfo<'a> = (&'a str, &'a (String, String), String);\n+\n+#[derive(Clone, Debug, Default)]\n+pub struct MacroBraces {\n+    macro_braces: FxHashMap<String, (String, String)>,\n+    done: FxHashSet<Span>,\n+}\n+\n+impl MacroBraces {\n+    pub fn new(conf: &FxHashSet<MacroMatcher>) -> Self {\n+        let macro_braces = macro_braces(conf.clone());\n+        Self {\n+            macro_braces,\n+            done: FxHashSet::default(),\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(MacroBraces => [NONSTANDARD_MACRO_BRACES]);\n+\n+impl EarlyLintPass for MacroBraces {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n+        if let Some((name, braces, snip)) = is_offending_macro(cx, item.span, self) {\n+            let span = item.span.ctxt().outer_expn_data().call_site;\n+            emit_help(cx, snip, braces, name, span);\n+            self.done.insert(span);\n+        }\n+    }\n+\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n+        if let Some((name, braces, snip)) = is_offending_macro(cx, stmt.span, self) {\n+            let span = stmt.span.ctxt().outer_expn_data().call_site;\n+            emit_help(cx, snip, braces, name, span);\n+            self.done.insert(span);\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+        if let Some((name, braces, snip)) = is_offending_macro(cx, expr.span, self) {\n+            let span = expr.span.ctxt().outer_expn_data().call_site;\n+            emit_help(cx, snip, braces, name, span);\n+            self.done.insert(span);\n+        }\n+    }\n+\n+    fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n+        if let Some((name, braces, snip)) = is_offending_macro(cx, ty.span, self) {\n+            let span = ty.span.ctxt().outer_expn_data().call_site;\n+            emit_help(cx, snip, braces, name, span);\n+            self.done.insert(span);\n+        }\n+    }\n+}\n+\n+fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, this: &'a MacroBraces) -> Option<MacroInfo<'a>> {\n+    if_chain! {\n+        if in_macro(span);\n+        if let Some((name, braces)) = find_matching_macro(span, &this.macro_braces);\n+        if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n+        let c = snip.replace(\" \", \"\"); // make formatting consistent\n+        if !c.starts_with(&format!(\"{}!{}\", name, braces.0));\n+        if !this.done.contains(&span.ctxt().outer_expn_data().call_site);\n+        then {\n+            Some((name, braces, snip))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+fn emit_help(cx: &EarlyContext<'_>, snip: String, braces: &(String, String), name: &str, span: Span) {\n+    let with_space = &format!(\"! {}\", braces.0);\n+    let without_space = &format!(\"!{}\", braces.0);\n+    let mut help = snip;\n+    for b in BRACES.iter().filter(|b| b.0 != braces.0) {\n+        help = help.replace(b.0, &braces.0).replace(b.1, &braces.1);\n+        // Only `{` traditionally has space before the brace\n+        if braces.0 != \"{\" && help.contains(with_space) {\n+            help = help.replace(with_space, without_space);\n+        } else if braces.0 == \"{\" && help.contains(without_space) {\n+            help = help.replace(without_space, with_space);\n+        }\n+    }\n+    span_lint_and_help(\n+        cx,\n+        NONSTANDARD_MACRO_BRACES,\n+        span,\n+        &format!(\"use of irregular braces for `{}!` macro\", name),\n+        Some(span),\n+        &format!(\"consider writing `{}`\", help),\n+    );\n+}\n+\n+fn find_matching_macro(\n+    span: Span,\n+    braces: &FxHashMap<String, (String, String)>,\n+) -> Option<(&String, &(String, String))> {\n+    braces\n+        .iter()\n+        .find(|(macro_name, _)| is_direct_expn_of(span, macro_name).is_some())\n+}\n+\n+fn macro_braces(conf: FxHashSet<MacroMatcher>) -> FxHashMap<String, (String, String)> {\n+    let mut braces = vec![\n+        macro_matcher!(\n+            name: \"print\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"println\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"eprint\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"eprintln\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"write\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"writeln\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"format\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"format_args\",\n+            braces: (\"(\", \")\"),\n+        ),\n+        macro_matcher!(\n+            name: \"vec\",\n+            braces: (\"[\", \"]\"),\n+        ),\n+    ]\n+    .into_iter()\n+    .collect::<FxHashMap<_, _>>();\n+    // We want users items to override any existing items\n+    for it in conf {\n+        braces.insert(it.name, it.braces);\n+    }\n+    braces\n+}\n+\n+macro_rules! macro_matcher {\n+    (name: $name:expr, braces: ($open:expr, $close:expr) $(,)?) => {\n+        ($name.to_owned(), ($open.to_owned(), $close.to_owned()))\n+    };\n+}\n+pub(crate) use macro_matcher;\n+\n+#[derive(Clone, Debug)]\n+pub struct MacroMatcher {\n+    name: String,\n+    braces: (String, String),\n+}\n+\n+impl Hash for MacroMatcher {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.name.hash(state);\n+    }\n+}\n+\n+impl PartialEq for MacroMatcher {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.name == other.name\n+    }\n+}\n+impl Eq for MacroMatcher {}\n+\n+impl<'de> Deserialize<'de> for MacroMatcher {\n+    fn deserialize<D>(deser: D) -> Result<Self, D::Error>\n+    where\n+        D: de::Deserializer<'de>,\n+    {\n+        #[derive(Deserialize)]\n+        #[serde(field_identifier, rename_all = \"lowercase\")]\n+        enum Field {\n+            Name,\n+            Brace,\n+        }\n+        struct MacVisitor;\n+        impl<'de> de::Visitor<'de> for MacVisitor {\n+            type Value = MacroMatcher;\n+\n+            fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                formatter.write_str(\"struct MacroMatcher\")\n+            }\n+\n+            fn visit_map<V>(self, mut map: V) -> Result<Self::Value, V::Error>\n+            where\n+                V: de::MapAccess<'de>,\n+            {\n+                let mut name = None;\n+                let mut brace: Option<&str> = None;\n+                while let Some(key) = map.next_key()? {\n+                    match key {\n+                        Field::Name => {\n+                            if name.is_some() {\n+                                return Err(de::Error::duplicate_field(\"name\"));\n+                            }\n+                            name = Some(map.next_value()?);\n+                        },\n+                        Field::Brace => {\n+                            if brace.is_some() {\n+                                return Err(de::Error::duplicate_field(\"brace\"));\n+                            }\n+                            brace = Some(map.next_value()?);\n+                        },\n+                    }\n+                }\n+                let name = name.ok_or_else(|| de::Error::missing_field(\"name\"))?;\n+                let brace = brace.ok_or_else(|| de::Error::missing_field(\"brace\"))?;\n+                Ok(MacroMatcher {\n+                    name,\n+                    braces: BRACES\n+                        .iter()\n+                        .find(|b| b.0 == brace)\n+                        .map(|(o, c)| ((*o).to_owned(), (*c).to_owned()))\n+                        .ok_or_else(|| {\n+                            de::Error::custom(&format!(\"expected one of `(`, `{{`, `[` found `{}`\", brace))\n+                        })?,\n+                })\n+            }\n+        }\n+\n+        const FIELDS: &[&str] = &[\"name\", \"brace\"];\n+        deser.deserialize_struct(\"MacroMatcher\", FIELDS, MacVisitor)\n+    }\n+}"}, {"sha": "cb335522f613b813e21188b1b31ac7c8e1da2aeb", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -26,13 +26,13 @@ impl TryConf {\n \n macro_rules! define_Conf {\n     ($(\n-        #[doc = $doc:literal]\n+        $(#[doc = $doc:literal])*\n         $(#[conf_deprecated($dep:literal)])?\n         ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n         pub struct Conf {\n-            $(#[doc = $doc] pub $name: $ty,)*\n+            $($(#[doc = $doc])* pub $name: $ty,)*\n         }\n \n         mod defaults {\n@@ -109,7 +109,7 @@ macro_rules! define_Conf {\n                                 stringify!($name),\n                                 stringify!($ty),\n                                 format!(\"{:?}\", super::defaults::$name()),\n-                                $doc,\n+                                concat!($($doc,)*),\n                                 deprecation_reason,\n                             )\n                         },\n@@ -182,9 +182,9 @@ define_Conf! {\n     (vec_box_size_threshold: u64 = 4096),\n     /// Lint: TYPE_REPETITION_IN_BOUNDS. The maximum number of bounds a trait can have to be linted\n     (max_trait_bounds: u64 = 3),\n-    /// Lint: STRUCT_EXCESSIVE_BOOLS. The maximum number of bools a struct can have\n+    /// Lint: STRUCT_EXCESSIVE_BOOLS. The maximum number of bool fields a struct can have\n     (max_struct_bools: u64 = 3),\n-    /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bools function parameters can have\n+    /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bool parameters a function can have\n     (max_fn_params_bools: u64 = 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports: bool = false),\n@@ -198,6 +198,12 @@ define_Conf! {\n     (upper_case_acronyms_aggressive: bool = false),\n     /// Lint: _CARGO_COMMON_METADATA. For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n     (cargo_ignore_publish: bool = false),\n+    /// Lint: NONSTANDARD_MACRO_BRACES. Enforce the named macros always use the braces specified.\n+    ///\n+    /// A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`.\n+    /// If the macro is could be used with a full path two `MacroMatcher`s have to be added one\n+    /// with the full path `crate_name::macro_name` and one with just the macro name.\n+    (standard_macro_braces: Vec<crate::nonstandard_macro_braces::MacroMatcher> = Vec::new()),\n }\n \n /// Search for the configuration file."}, {"sha": "bced8948a02412124fda554499a11a82e99ffc9f", "filename": "tests/ui-toml/nonstandard_macro_braces/clippy.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fclippy.toml?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -0,0 +1,6 @@\n+standard-macro-braces = [\n+    { name = \"quote\", brace = \"{\" },\n+    { name = \"quote::quote\", brace = \"{\" },\n+    { name = \"eprint\", brace = \"[\" },\n+    { name = \"type_pos\", brace = \"[\" },\n+]"}, {"sha": "4ae6864cbb0b8b23f5a9c6d6213fea82b53aea73", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -0,0 +1,44 @@\n+// #![warn(clippy::nonstandard_macro_braces)]\n+\n+extern crate quote;\n+\n+use quote::quote;\n+\n+#[rustfmt::skip]\n+macro_rules! test {\n+    () => {\n+        vec!{0, 0, 0}\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! test2 {\n+    ($($arg:tt)*) => {\n+        format_args!($($arg)*)\n+    };\n+}\n+\n+macro_rules! type_pos {\n+    ($what:ty) => {\n+        Vec<$what>\n+    };\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _ = vec! {1, 2, 3};\n+    let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n+    let _ = quote!(let x = 1;);\n+    let _ = quote::quote!(match match match);\n+    let _ = test!();\n+    let _ = vec![1,2,3];\n+\n+    let _ = quote::quote! {true || false};\n+    let _ = vec! [0 ,0 ,0];\n+    let _ = format!(\"fds{}fds\", 10);\n+    let _ = test2![\"{}{}{}\", 1, 2, 3];\n+\n+    let _: type_pos!(usize) = vec![];\n+\n+    eprint!(\"test if user config overrides defaults\");\n+}"}, {"sha": "7bcd1829524ddcb208ae6e791a26c6fb2757e1ad", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -0,0 +1,94 @@\n+error: use of irregular braces for `vec!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:29:13\n+   |\n+LL |     let _ = vec! {1, 2, 3};\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::nonstandard-macro-braces` implied by `-D warnings`\n+help: consider writing `vec![1, 2, 3]`\n+  --> $DIR/conf_nonstandard_macro_braces.rs:29:13\n+   |\n+LL |     let _ = vec! {1, 2, 3};\n+   |             ^^^^^^^^^^^^^^\n+\n+error: use of irregular braces for `format!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:30:13\n+   |\n+LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider writing `format!(\"ugh () stop being such a good compiler\", \"hello\")`\n+  --> $DIR/conf_nonstandard_macro_braces.rs:30:13\n+   |\n+LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of irregular braces for `quote!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:31:13\n+   |\n+LL |     let _ = quote!(let x = 1;);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider writing `quote! {let x = 1;}`\n+  --> $DIR/conf_nonstandard_macro_braces.rs:31:13\n+   |\n+LL |     let _ = quote!(let x = 1;);\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: use of irregular braces for `quote::quote!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:32:13\n+   |\n+LL |     let _ = quote::quote!(match match match);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider writing `quote::quote! {match match match}`\n+  --> $DIR/conf_nonstandard_macro_braces.rs:32:13\n+   |\n+LL |     let _ = quote::quote!(match match match);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of irregular braces for `vec!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:10:9\n+   |\n+LL |         vec!{0, 0, 0}\n+   |         ^^^^^^^^^^^^^\n+...\n+LL |     let _ = test!();\n+   |             ------- in this macro invocation\n+   |\n+help: consider writing `vec![0, 0, 0]`\n+  --> $DIR/conf_nonstandard_macro_braces.rs:10:9\n+   |\n+LL |         vec!{0, 0, 0}\n+   |         ^^^^^^^^^^^^^\n+...\n+LL |     let _ = test!();\n+   |             ------- in this macro invocation\n+   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: use of irregular braces for `type_pos!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:41:12\n+   |\n+LL |     let _: type_pos!(usize) = vec![];\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+help: consider writing `type_pos![usize]`\n+  --> $DIR/conf_nonstandard_macro_braces.rs:41:12\n+   |\n+LL |     let _: type_pos!(usize) = vec![];\n+   |            ^^^^^^^^^^^^^^^^\n+\n+error: use of irregular braces for `eprint!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:43:5\n+   |\n+LL |     eprint!(\"test if user config overrides defaults\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider writing `eprint![\"test if user config overrides defaults\"];`\n+  --> $DIR/conf_nonstandard_macro_braces.rs:43:5\n+   |\n+LL |     eprint!(\"test if user config overrides defaults\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "f179479cbec4399199725d97644c82ed26290d59", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "bda0f2c47cdd525a97a62f5e080334dc20e627c8", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unnecessary_cast)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::nonstandard_macro_braces)]\n \n fn main() {\n     // casting integer literal to float is unnecessary"}, {"sha": "f7a4f2a5988fd42c38fc5dca1c255a7a556e07ba", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unnecessary_cast)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::nonstandard_macro_braces)]\n \n fn main() {\n     // casting integer literal to float is unnecessary"}, {"sha": "318f9c2dceb641a206a821a81e96473648e9551d", "filename": "tests/ui/vec.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Fvec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Fvec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.fixed?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![allow(clippy::nonstandard_macro_braces)]\n #![warn(clippy::useless_vec)]\n \n #[derive(Debug)]"}, {"sha": "d7673ce3e6437dbf7422cc218c5e17084afb857d", "filename": "tests/ui/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723f515b6006706b88d22c8edb05330df6365a63/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=723f515b6006706b88d22c8edb05330df6365a63", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![allow(clippy::nonstandard_macro_braces)]\n #![warn(clippy::useless_vec)]\n \n #[derive(Debug)]"}]}