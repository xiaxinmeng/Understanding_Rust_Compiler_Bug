{"sha": "cf5eda1b4d24d508039e96d939043268e955af6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNWVkYTFiNGQyNGQ1MDgwMzllOTZkOTM5MDQzMjY4ZTk1NWFmNmY=", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-07-09T14:40:51Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-07-09T16:00:25Z"}, "message": "Add a query for `CapturedPlace::to_symbol`", "tree": {"sha": "649c86c4a4c8f87e22a91843e9de6cb6558f5827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649c86c4a4c8f87e22a91843e9de6cb6558f5827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf5eda1b4d24d508039e96d939043268e955af6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5eda1b4d24d508039e96d939043268e955af6f", "html_url": "https://github.com/rust-lang/rust/commit/cf5eda1b4d24d508039e96d939043268e955af6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf5eda1b4d24d508039e96d939043268e955af6f/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb6f07ef2690b9ad5941c33a0928bf72788829d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb6f07ef2690b9ad5941c33a0928bf72788829d", "html_url": "https://github.com/rust-lang/rust/commit/0cb6f07ef2690b9ad5941c33a0928bf72788829d"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "8476929eaeced2b1d230e5e6f6d964e2e7d2a088", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=cf5eda1b4d24d508039e96d939043268e955af6f", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 17);\n+static_assert_size!(DepNode, 18);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "419bedaf2bb60de0895fb415dc6d8a2dee98f901", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cf5eda1b4d24d508039e96d939043268e955af6f", "patch": "@@ -329,6 +329,16 @@ rustc_queries! {\n         }\n     }\n \n+    query symbols_for_closure_captures(\n+        key: (LocalDefId, DefId)\n+    ) -> Vec<rustc_span::Symbol> {\n+        desc {\n+            |tcx| \"symbols for captures of closure `{}` in `{}`\",\n+            tcx.def_path_str(key.1),\n+            tcx.def_path_str(key.0.to_def_id())\n+        }\n+    }\n+\n     /// MIR after our optimization passes have run. This is MIR that is ready\n     /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n     query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {"}, {"sha": "b8078c18fd9346aa91473bbe415bad501a6f5016", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=cf5eda1b4d24d508039e96d939043268e955af6f", "patch": "@@ -162,7 +162,7 @@ impl CapturedPlace<'tcx> {\n     }\n \n     /// Returns a symbol of the captured upvar, which looks like `name__field1__field2`.\n-    pub fn to_symbol(&self, tcx: TyCtxt<'tcx>) -> Symbol {\n+    fn to_symbol(&self, tcx: TyCtxt<'tcx>) -> Symbol {\n         let hir_id = match self.place.base {\n             HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n             base => bug!(\"Expected an upvar, found {:?}\", base),\n@@ -248,6 +248,15 @@ impl CapturedPlace<'tcx> {\n     }\n }\n \n+fn symbols_for_closure_captures<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: (LocalDefId, DefId),\n+) -> Vec<Symbol> {\n+    let typeck_results = tcx.typeck(def_id.0);\n+    let captures = typeck_results.closure_min_captures_flattened(def_id.1);\n+    captures.into_iter().map(|captured_place| captured_place.to_symbol(tcx)).collect()\n+}\n+\n /// Return true if the `proj_possible_ancestor` represents an ancestor path\n /// to `proj_capture` or `proj_possible_ancestor` is same as `proj_capture`,\n /// assuming they both start off of the same root variable.\n@@ -432,3 +441,7 @@ impl BorrowKind {\n         }\n     }\n }\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { symbols_for_closure_captures, ..*providers }\n+}"}, {"sha": "24cce81e78c68e1e40a3bc2ee4de0f364a7d077b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=cf5eda1b4d24d508039e96d939043268e955af6f", "patch": "@@ -16,7 +16,6 @@ pub use self::IntVarValue::*;\n pub use self::Variance::*;\n pub use adt::*;\n pub use assoc::*;\n-pub use closure::*;\n pub use generics::*;\n pub use vtable::*;\n \n@@ -55,6 +54,12 @@ pub use rustc_type_ir::*;\n \n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n+pub use self::closure::{\n+    is_ancestor_or_same_capture, place_to_string_for_capture, BorrowKind, CaptureInfo,\n+    CapturedPlace, ClosureKind, MinCaptureInformationMap, MinCaptureList,\n+    RootVariableMinCaptureList, UpvarBorrow, UpvarCapture, UpvarCaptureMap, UpvarId, UpvarListMap,\n+    UpvarPath, CAPTURE_STRUCT_LOCAL,\n+};\n pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, Unevaluated, ValTree};\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n@@ -1979,6 +1984,7 @@ pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n+    closure::provide(providers);\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);"}, {"sha": "86a9e47dc53c6f801ee7481ed96187b800fcc87b", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5eda1b4d24d508039e96d939043268e955af6f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=cf5eda1b4d24d508039e96d939043268e955af6f", "patch": "@@ -959,13 +959,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ty::Generator(_, substs, _) => ty::UpvarSubsts::Generator(substs),\n                 _ => span_bug!(self.fn_span, \"upvars with non-closure env ty {:?}\", closure_ty),\n             };\n+            let def_id = self.def_id.as_local().unwrap();\n+            let capture_syms = tcx.symbols_for_closure_captures((def_id, fn_def_id));\n             let capture_tys = upvar_substs.upvar_tys();\n-            let captures_with_tys =\n-                hir_typeck_results.closure_min_captures_flattened(fn_def_id).zip(capture_tys);\n+            let captures_with_tys = hir_typeck_results\n+                .closure_min_captures_flattened(fn_def_id)\n+                .zip(capture_tys.zip(capture_syms));\n \n             self.upvar_mutbls = captures_with_tys\n                 .enumerate()\n-                .map(|(i, (captured_place, ty))| {\n+                .map(|(i, (captured_place, (ty, sym)))| {\n                     let capture = captured_place.info.capture_kind;\n                     let var_id = match captured_place.place.base {\n                         HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n@@ -974,8 +977,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let mutability = captured_place.mutability;\n \n-                    let name = captured_place.to_symbol(tcx);\n-\n                     let mut projs = closure_env_projs.clone();\n                     projs.push(ProjectionElem::Field(Field::new(i), ty));\n                     match capture {\n@@ -986,7 +987,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     };\n \n                     self.var_debug_info.push(VarDebugInfo {\n-                        name,\n+                        name: sym,\n                         source_info: SourceInfo::outermost(tcx_hir.span(var_id)),\n                         value: VarDebugInfoContents::Place(Place {\n                             local: ty::CAPTURE_STRUCT_LOCAL,"}]}