{"sha": "7bf4c885fc74dd0218518ee933c99a61ead7696f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjRjODg1ZmM3NGRkMDIxODUxOGVlOTMzYzk5YTYxZWFkNzY5NmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T23:38:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T23:38:54Z"}, "message": "Auto merge of #28646 - vadimcn:imps, r=alexcrichton\n\nAs discussed in the referenced issues, this PR makes rustc emit `__imp_<symbol>` stubs for all public static data to ensure smooth linking in on `-windows-msvc` targets.  \r\nResolves #26591, cc #27438", "tree": {"sha": "6b4eb9aa066a4bca53af0a80c25199a170c33874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4eb9aa066a4bca53af0a80c25199a170c33874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf4c885fc74dd0218518ee933c99a61ead7696f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf4c885fc74dd0218518ee933c99a61ead7696f", "html_url": "https://github.com/rust-lang/rust/commit/7bf4c885fc74dd0218518ee933c99a61ead7696f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf4c885fc74dd0218518ee933c99a61ead7696f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f880eee792e974b18cbb129fd16928939589e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f880eee792e974b18cbb129fd16928939589e7c", "html_url": "https://github.com/rust-lang/rust/commit/6f880eee792e974b18cbb129fd16928939589e7c"}, {"sha": "38f1c47d18761414cbe69e76b4d76c71afc24789", "url": "https://api.github.com/repos/rust-lang/rust/commits/38f1c47d18761414cbe69e76b4d76c71afc24789", "html_url": "https://github.com/rust-lang/rust/commit/38f1c47d18761414cbe69e76b4d76c71afc24789"}], "stats": {"total": 130, "additions": 99, "deletions": 31}, "files": [{"sha": "16247b254d9f35f60bfee583147e4732c292b883", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 67, "deletions": 31, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7bf4c885fc74dd0218518ee933c99a61ead7696f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf4c885fc74dd0218518ee933c99a61ead7696f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=7bf4c885fc74dd0218518ee933c99a61ead7696f", "patch": "@@ -2570,20 +2570,6 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<&str>) {\n     unsafe {\n         let mut declared = HashSet::new();\n \n-        let iter_globals = |llmod| {\n-            ValueIter {\n-                cur: llvm::LLVMGetFirstGlobal(llmod),\n-                step: llvm::LLVMGetNextGlobal,\n-            }\n-        };\n-\n-        let iter_functions = |llmod| {\n-            ValueIter {\n-                cur: llvm::LLVMGetFirstFunction(llmod),\n-                step: llvm::LLVMGetNextFunction,\n-            }\n-        };\n-\n         // Collect all external declarations in all compilation units.\n         for ccx in cx.iter() {\n             for val in iter_globals(ccx.llmod()).chain(iter_functions(ccx.llmod())) {\n@@ -2623,28 +2609,73 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<&str>) {\n             }\n         }\n     }\n+}\n+\n+// Create a `__imp_<symbol> = &symbol` global for every public static `symbol`.\n+// This is required to satisfy `dllimport` references to static data in .rlibs\n+// when using MSVC linker.  We do this only for data, as linker can fix up\n+// code references on its own.\n+// See #26591, #27438\n+fn create_imps(cx: &SharedCrateContext) {\n+    unsafe {\n+        for ccx in cx.iter() {\n+            let exported: Vec<_> = iter_globals(ccx.llmod())\n+                .filter(|&val| llvm::LLVMGetLinkage(val) == llvm::ExternalLinkage as c_uint &&\n+                               llvm::LLVMIsDeclaration(val) == 0)\n+                .collect();\n+\n+            let i8p_ty = Type::i8p(&ccx);\n+            for val in exported {\n+                let name = CStr::from_ptr(llvm::LLVMGetValueName(val));\n+                let imp_name = String::from(\"__imp_\") +\n+                               str::from_utf8(name.to_bytes()).unwrap();\n+                let imp_name = CString::new(imp_name).unwrap();\n+                let imp = llvm::LLVMAddGlobal(ccx.llmod(), i8p_ty.to_ref(),\n+                                              imp_name.as_ptr() as *const _);\n+                llvm::LLVMSetInitializer(imp, llvm::LLVMConstBitCast(val, i8p_ty.to_ref()));\n+                llvm::SetLinkage(imp, llvm::ExternalLinkage);\n+            }\n+        }\n+    }\n+}\n+\n+struct ValueIter {\n+    cur: ValueRef,\n+    step: unsafe extern \"C\" fn(ValueRef) -> ValueRef,\n+}\n \n+impl Iterator for ValueIter {\n+    type Item = ValueRef;\n \n-    struct ValueIter {\n-        cur: ValueRef,\n-        step: unsafe extern \"C\" fn(ValueRef) -> ValueRef,\n+    fn next(&mut self) -> Option<ValueRef> {\n+        let old = self.cur;\n+        if !old.is_null() {\n+            self.cur = unsafe {\n+                let step: unsafe extern \"C\" fn(ValueRef) -> ValueRef =\n+                    mem::transmute_copy(&self.step);\n+                step(old)\n+            };\n+            Some(old)\n+        } else {\n+            None\n+        }\n     }\n+}\n \n-    impl Iterator for ValueIter {\n-        type Item = ValueRef;\n+fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter {\n+    unsafe {\n+        ValueIter {\n+            cur: llvm::LLVMGetFirstGlobal(llmod),\n+            step: llvm::LLVMGetNextGlobal,\n+        }\n+    }\n+}\n \n-        fn next(&mut self) -> Option<ValueRef> {\n-            let old = self.cur;\n-            if !old.is_null() {\n-                self.cur = unsafe {\n-                    let step: unsafe extern \"C\" fn(ValueRef) -> ValueRef =\n-                        mem::transmute_copy(&self.step);\n-                    step(old)\n-                };\n-                Some(old)\n-            } else {\n-                None\n-            }\n+fn iter_functions(llmod: llvm::ModuleRef) -> ValueIter {\n+    unsafe {\n+        ValueIter {\n+            cur: llvm::LLVMGetFirstFunction(llmod),\n+            step: llvm::LLVMGetNextFunction,\n         }\n     }\n }\n@@ -2824,6 +2855,11 @@ pub fn trans_crate(tcx: &ty::ctxt, analysis: ty::CrateAnalysis) -> CrateTranslat\n                             &reachable_symbols.iter().map(|x| &x[..]).collect());\n     }\n \n+    if sess.target.target.options.is_like_msvc &&\n+       sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib) {\n+        create_imps(&shared_ccx);\n+    }\n+\n     let metadata_module = ModuleTranslation {\n         llcx: shared_ccx.metadata_llcx(),\n         llmod: shared_ccx.metadata_llmod(),"}, {"sha": "71fb9a519489b0bee1f3c3d68a430dab2ce7a85f", "filename": "src/test/auxiliary/msvc-data-only-lib.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7bf4c885fc74dd0218518ee933c99a61ead7696f/src%2Ftest%2Fauxiliary%2Fmsvc-data-only-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf4c885fc74dd0218518ee933c99a61ead7696f/src%2Ftest%2Fauxiliary%2Fmsvc-data-only-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmsvc-data-only-lib.rs?ref=7bf4c885fc74dd0218518ee933c99a61ead7696f", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+\n+pub static FOO: i32 = 42;"}, {"sha": "ad6888c4d3096876de9c9d8593aaa079026d0c51", "filename": "src/test/run-pass/msvc-data-only.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7bf4c885fc74dd0218518ee933c99a61ead7696f/src%2Ftest%2Frun-pass%2Fmsvc-data-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf4c885fc74dd0218518ee933c99a61ead7696f/src%2Ftest%2Frun-pass%2Fmsvc-data-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmsvc-data-only.rs?ref=7bf4c885fc74dd0218518ee933c99a61ead7696f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:msvc-data-only-lib.rs\n+\n+extern crate msvc_data_only_lib;\n+\n+fn main() {\n+    println!(\"The answer is {} !\", msvc_data_only_lib::FOO);\n+}"}]}