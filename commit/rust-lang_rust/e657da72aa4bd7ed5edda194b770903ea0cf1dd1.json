{"sha": "e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "node_id": "C_kwDOAAsO6NoAKGU2NTdkYTcyYWE0YmQ3ZWQ1ZWRkYTE5NGI3NzA5MDNlYTBjZjFkZDE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-03T17:15:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-05T14:31:22Z"}, "message": "Merge build_helper into util", "tree": {"sha": "5e905cb8bd2e883878d8e6fc8842b6284cd5a4bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e905cb8bd2e883878d8e6fc8842b6284cd5a4bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "html_url": "https://github.com/rust-lang/rust/commit/e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cfc3e101689d050432f600a35e953413b87147f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfc3e101689d050432f600a35e953413b87147f", "html_url": "https://github.com/rust-lang/rust/commit/0cfc3e101689d050432f600a35e953413b87147f"}], "stats": {"total": 348, "additions": 166, "deletions": 182}, "files": [{"sha": "320099102fc3893d020a8bf5dde4968ecf46de4e", "filename": "src/bootstrap/build_helper.rs", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fbuild_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fbuild_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild_helper.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -1,145 +0,0 @@\n-use std::fs;\n-use std::path::{Path, PathBuf};\n-use std::process::{Command, Stdio};\n-use std::time::{SystemTime, UNIX_EPOCH};\n-\n-/// A helper macro to `unwrap` a result except also print out details like:\n-///\n-/// * The file/line of the panic\n-/// * The expression that failed\n-/// * The error itself\n-///\n-/// This is currently used judiciously throughout the build system rather than\n-/// using a `Result` with `try!`, but this may change one day...\n-macro_rules! t {\n-    ($e:expr) => {\n-        match $e {\n-            Ok(e) => e,\n-            Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n-        }\n-    };\n-    // it can show extra info in the second parameter\n-    ($e:expr, $extra:expr) => {\n-        match $e {\n-            Ok(e) => e,\n-            Err(e) => panic!(\"{} failed with {} ({:?})\", stringify!($e), e, $extra),\n-        }\n-    };\n-}\n-pub(crate) use t;\n-\n-pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n-    if !try_run(cmd, print_cmd_on_fail) {\n-        std::process::exit(1);\n-    }\n-}\n-\n-pub fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n-    let status = match cmd.status() {\n-        Ok(status) => status,\n-        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n-    };\n-    if !status.success() && print_cmd_on_fail {\n-        println!(\n-            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-             expected success, got: {}\\n\\n\",\n-            cmd, status\n-        );\n-    }\n-    status.success()\n-}\n-\n-pub fn run_suppressed(cmd: &mut Command) {\n-    if !try_run_suppressed(cmd) {\n-        std::process::exit(1);\n-    }\n-}\n-\n-pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n-    let output = match cmd.output() {\n-        Ok(status) => status,\n-        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n-    };\n-    if !output.status.success() {\n-        println!(\n-            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-             expected success, got: {}\\n\\n\\\n-             stdout ----\\n{}\\n\\\n-             stderr ----\\n{}\\n\\n\",\n-            cmd,\n-            output.status,\n-            String::from_utf8_lossy(&output.stdout),\n-            String::from_utf8_lossy(&output.stderr)\n-        );\n-    }\n-    output.status.success()\n-}\n-\n-pub fn make(host: &str) -> PathBuf {\n-    if host.contains(\"dragonfly\")\n-        || host.contains(\"freebsd\")\n-        || host.contains(\"netbsd\")\n-        || host.contains(\"openbsd\")\n-    {\n-        PathBuf::from(\"gmake\")\n-    } else {\n-        PathBuf::from(\"make\")\n-    }\n-}\n-\n-#[track_caller]\n-pub fn output(cmd: &mut Command) -> String {\n-    let output = match cmd.stderr(Stdio::inherit()).output() {\n-        Ok(status) => status,\n-        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n-    };\n-    if !output.status.success() {\n-        panic!(\n-            \"command did not execute successfully: {:?}\\n\\\n-             expected success, got: {}\",\n-            cmd, output.status\n-        );\n-    }\n-    String::from_utf8(output.stdout).unwrap()\n-}\n-\n-/// Returns the last-modified time for `path`, or zero if it doesn't exist.\n-pub fn mtime(path: &Path) -> SystemTime {\n-    fs::metadata(path).and_then(|f| f.modified()).unwrap_or(UNIX_EPOCH)\n-}\n-\n-/// Returns `true` if `dst` is up to date given that the file or files in `src`\n-/// are used to generate it.\n-///\n-/// Uses last-modified time checks to verify this.\n-pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n-    if !dst.exists() {\n-        return false;\n-    }\n-    let threshold = mtime(dst);\n-    let meta = match fs::metadata(src) {\n-        Ok(meta) => meta,\n-        Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n-    };\n-    if meta.is_dir() {\n-        dir_up_to_date(src, threshold)\n-    } else {\n-        meta.modified().unwrap_or(UNIX_EPOCH) <= threshold\n-    }\n-}\n-\n-fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n-    t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n-        let meta = t!(e.metadata());\n-        if meta.is_dir() {\n-            dir_up_to_date(&e.path(), threshold)\n-        } else {\n-            meta.modified().unwrap_or(UNIX_EPOCH) < threshold\n-        }\n-    })\n-}\n-\n-fn fail(s: &str) -> ! {\n-    println!(\"\\n\\n{}\\n\\n\", s);\n-    std::process::exit(1);\n-}"}, {"sha": "fc55c8626d99fe28ae72b851dc7cf9c83ca166df", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -11,7 +11,6 @@ use std::path::{Component, Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n-use crate::build_helper::{output, t};\n use crate::cache::{Cache, Interned, INTERNER};\n use crate::check;\n use crate::compile;\n@@ -24,7 +23,7 @@ use crate::native;\n use crate::run;\n use crate::test;\n use crate::tool::{self, SourceType};\n-use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n+use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir, output, t};\n use crate::EXTRA_CHECK_CFGS;\n use crate::{Build, CLang, DocTests, GitRepo, Mode};\n "}, {"sha": "7ce446876118af13244c4c914dc2dfcdf1ca525a", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -26,8 +26,8 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::{env, iter};\n \n-use crate::build_helper::output;\n use crate::config::{Target, TargetSelection};\n+use crate::util::output;\n use crate::{Build, CLang, GitRepo};\n \n // The `cc` crate doesn't provide a way to obtain a path to the detected archiver,"}, {"sha": "1932a0017ee255e5539b8901401c6ecd2efd9350", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -8,7 +8,7 @@\n use std::path::Path;\n use std::process::Command;\n \n-use crate::build_helper::output;\n+use crate::util::output;\n use crate::Build;\n \n pub enum GitInfo {"}, {"sha": "069f3d6acf158937d278a13a277bec4e90c762c6", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -9,7 +9,7 @@ use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::Path;\n \n-use crate::build_helper::t;\n+use crate::util::t;\n use crate::Build;\n \n pub fn clean(build: &Build, all: bool) {"}, {"sha": "9cfd9f92aa7cdb05021bd52027866660b480f171", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -18,15 +18,14 @@ use std::str;\n \n use serde::Deserialize;\n \n-use crate::build_helper::{output, t, up_to_date};\n use crate::builder::Cargo;\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::dist;\n use crate::native;\n use crate::tool::SourceType;\n-use crate::util::{exe, is_debug_info, is_dylib, symlink_dir};\n+use crate::util::{exe, is_debug_info, is_dylib, output, symlink_dir, t, up_to_date};\n use crate::LLVM_TOOLS;\n use crate::{CLang, Compiler, DependencyType, GitRepo, Mode};\n "}, {"sha": "b17b94f2893953a2cfa69ac79437ce7178e05fab", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -12,13 +12,12 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n-use crate::build_helper::t;\n use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n-use crate::util::exe;\n+use crate::util::{exe, t};\n use serde::Deserialize;\n \n macro_rules! check_ci_llvm {"}, {"sha": "5f92cc2ca6faddd2c004fffe8b3b1262c7529ce8", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -14,14 +14,13 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use crate::build_helper::{output, t};\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n-use crate::util::{exe, is_dylib, timeit};\n+use crate::util::{exe, is_dylib, output, t, timeit};\n use crate::{Compiler, DependencyType, Mode, LLVM_TOOLS};\n \n pub fn pkgname(builder: &Builder<'_>, component: &str) -> String {"}, {"sha": "be55871b56a2801468606afae5fe615c50c52d1e", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -12,13 +12,12 @@ use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n \n-use crate::build_helper::{t, up_to_date};\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::{Config, TargetSelection};\n use crate::tool::{self, prepare_tool_cargo, SourceType, Tool};\n-use crate::util::symlink_dir;\n+use crate::util::{symlink_dir, t, up_to_date};\n use crate::Mode;\n \n macro_rules! submodule_helper {"}, {"sha": "e34b40a93ff47c577e092cbdf1a95ecc2cbf2ee4", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -9,10 +9,10 @@ use std::process;\n \n use getopts::Options;\n \n-use crate::build_helper::t;\n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n use crate::setup::Profile;\n+use crate::util::t;\n use crate::{Build, DocTests};\n \n pub enum Color {"}, {"sha": "10b846e6db2087e67181242b2346663c09b4548e", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -1,6 +1,6 @@\n //! Runs rustfmt on the repository.\n \n-use crate::build_helper::{output, t};\n+use crate::util::{output, t};\n use crate::Build;\n use ignore::WalkBuilder;\n use std::collections::VecDeque;"}, {"sha": "27b9196d9868e10d23deb5cfb8682ef03f788397", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -8,7 +8,7 @@ use std::fs;\n use std::path::{Component, PathBuf};\n use std::process::Command;\n \n-use crate::build_helper::t;\n+use crate::util::t;\n \n use crate::dist::{self, sanitize_sh};\n use crate::tarball::GeneratedTarball;"}, {"sha": "ccc8516a89abf8014e888c3b6d43e1f3446a865b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -118,12 +118,12 @@ use std::os::windows::fs::symlink_file;\n \n use filetime::FileTime;\n \n-use crate::build_helper::{mtime, output, run, run_suppressed, t, try_run, try_run_suppressed};\n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n-use crate::util::{exe, libdir, CiEnv};\n+use crate::util::{\n+    exe, libdir, mtime, output, run, run_suppressed, t, try_run, try_run_suppressed, CiEnv,\n+};\n \n-mod build_helper;\n mod builder;\n mod cache;\n mod cc_detect;"}, {"sha": "59dc50be47f0685e6b89fcf7cc70e514f67ac1d1", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -3,8 +3,8 @@ use std::process::Command;\n \n use serde::Deserialize;\n \n-use crate::build_helper::output;\n use crate::cache::INTERNER;\n+use crate::util::output;\n use crate::{Build, Crate};\n \n #[derive(Deserialize)]"}, {"sha": "d27ad9644b56c6038d0bb58e8077a98138d2e65d", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -16,11 +16,9 @@ use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use crate::build_helper::up_to_date;\n-use crate::build_helper::{output, t};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n-use crate::util::{self, exe};\n+use crate::util::{self, exe, output, t, up_to_date};\n use crate::{CLang, GitRepo};\n \n pub struct Meta {"}, {"sha": "25abe7a72fdc8d5b6512106406771b66bce3dd20", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -1,7 +1,7 @@\n-use crate::build_helper::output;\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::dist::distdir;\n use crate::tool::Tool;\n+use crate::util::output;\n use std::process::Command;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "8c2899c1ac01e251d5178af6c401a8d3c985940b", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -15,9 +15,9 @@ use std::fs;\n use std::path::PathBuf;\n use std::process::Command;\n \n-use crate::build_helper::output;\n use crate::cache::INTERNER;\n use crate::config::Target;\n+use crate::util::output;\n use crate::Build;\n \n pub struct Finder {"}, {"sha": "c743c5188e7545f47d7f858b74005107e731c01e", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -3,8 +3,8 @@ use std::{\n     process::Command,\n };\n \n-use crate::build_helper::t;\n use crate::builder::Builder;\n+use crate::util::t;\n \n #[derive(Copy, Clone)]\n pub(crate) enum OverlayKind {"}, {"sha": "e4fcb287f1228545d44301e6d5f993a7b0571763", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -11,7 +11,6 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n-use crate::build_helper::{self, output, t};\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n use crate::compile;\n@@ -21,7 +20,7 @@ use crate::flags::Subcommand;\n use crate::native;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n-use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var};\n+use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t};\n use crate::Crate as CargoCrate;\n use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n@@ -2305,9 +2304,7 @@ impl Step for Distcheck {\n                 .current_dir(&dir),\n         );\n         builder.run(\n-            Command::new(build_helper::make(&builder.config.build.triple))\n-                .arg(\"check\")\n-                .current_dir(&dir),\n+            Command::new(util::make(&builder.config.build.triple)).arg(\"check\").current_dir(&dir),\n         );\n \n         // Now make sure that rust-src has all of libstd's dependencies"}, {"sha": "2ae4d830721e8ad2f22ab900cc998d62d7297fa4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -4,13 +4,12 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{exit, Command};\n \n-use crate::build_helper::t;\n use crate::builder::{Builder, Cargo as CargoCommand, RunConfig, ShouldRun, Step};\n use crate::channel::GitInfo;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::toolstate::ToolState;\n-use crate::util::{add_dylib_path, exe};\n+use crate::util::{add_dylib_path, exe, t};\n use crate::Compiler;\n use crate::Mode;\n "}, {"sha": "c7ea254c5b1d7ac6a242493b56ebcc5bb4c5fad1", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -1,5 +1,5 @@\n-use crate::build_helper::t;\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::util::t;\n use serde::{Deserialize, Serialize};\n use std::collections::HashMap;\n use std::env;"}, {"sha": "8e770d4d57fa6efeedeceaa9392b020c483a9f2e", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 143, "deletions": 3, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e657da72aa4bd7ed5edda194b770903ea0cf1dd1/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=e657da72aa4bd7ed5edda194b770903ea0cf1dd1", "patch": "@@ -7,14 +7,38 @@ use std::env;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n use std::str;\n-use std::time::Instant;\n+use std::time::{Instant, SystemTime, UNIX_EPOCH};\n \n-use crate::build_helper::t;\n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n \n+/// A helper macro to `unwrap` a result except also print out details like:\n+///\n+/// * The file/line of the panic\n+/// * The expression that failed\n+/// * The error itself\n+///\n+/// This is currently used judiciously throughout the build system rather than\n+/// using a `Result` with `try!`, but this may change one day...\n+macro_rules! t {\n+    ($e:expr) => {\n+        match $e {\n+            Ok(e) => e,\n+            Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+        }\n+    };\n+    // it can show extra info in the second parameter\n+    ($e:expr, $extra:expr) => {\n+        match $e {\n+            Ok(e) => e,\n+            Err(e) => panic!(\"{} failed with {} ({:?})\", stringify!($e), e, $extra),\n+        }\n+    };\n+}\n+pub(crate) use t;\n+\n /// Given an executable called `name`, return the filename for the\n /// executable for a particular target.\n pub fn exe(name: &str, target: TargetSelection) -> String {\n@@ -300,3 +324,119 @@ pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>(\n         _ => None,\n     }\n }\n+\n+pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n+    if !try_run(cmd, print_cmd_on_fail) {\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n+    let status = match cmd.status() {\n+        Ok(status) => status,\n+        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n+    };\n+    if !status.success() && print_cmd_on_fail {\n+        println!(\n+            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n\\n\",\n+            cmd, status\n+        );\n+    }\n+    status.success()\n+}\n+\n+pub fn run_suppressed(cmd: &mut Command) {\n+    if !try_run_suppressed(cmd) {\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n+    let output = match cmd.output() {\n+        Ok(status) => status,\n+        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n+    };\n+    if !output.status.success() {\n+        println!(\n+            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n\\n\\\n+             stdout ----\\n{}\\n\\\n+             stderr ----\\n{}\\n\\n\",\n+            cmd,\n+            output.status,\n+            String::from_utf8_lossy(&output.stdout),\n+            String::from_utf8_lossy(&output.stderr)\n+        );\n+    }\n+    output.status.success()\n+}\n+\n+pub fn make(host: &str) -> PathBuf {\n+    if host.contains(\"dragonfly\")\n+        || host.contains(\"freebsd\")\n+        || host.contains(\"netbsd\")\n+        || host.contains(\"openbsd\")\n+    {\n+        PathBuf::from(\"gmake\")\n+    } else {\n+        PathBuf::from(\"make\")\n+    }\n+}\n+\n+#[track_caller]\n+pub fn output(cmd: &mut Command) -> String {\n+    let output = match cmd.stderr(Stdio::inherit()).output() {\n+        Ok(status) => status,\n+        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n+    };\n+    if !output.status.success() {\n+        panic!(\n+            \"command did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\",\n+            cmd, output.status\n+        );\n+    }\n+    String::from_utf8(output.stdout).unwrap()\n+}\n+\n+/// Returns the last-modified time for `path`, or zero if it doesn't exist.\n+pub fn mtime(path: &Path) -> SystemTime {\n+    fs::metadata(path).and_then(|f| f.modified()).unwrap_or(UNIX_EPOCH)\n+}\n+\n+/// Returns `true` if `dst` is up to date given that the file or files in `src`\n+/// are used to generate it.\n+///\n+/// Uses last-modified time checks to verify this.\n+pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n+    if !dst.exists() {\n+        return false;\n+    }\n+    let threshold = mtime(dst);\n+    let meta = match fs::metadata(src) {\n+        Ok(meta) => meta,\n+        Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n+    };\n+    if meta.is_dir() {\n+        dir_up_to_date(src, threshold)\n+    } else {\n+        meta.modified().unwrap_or(UNIX_EPOCH) <= threshold\n+    }\n+}\n+\n+fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n+    t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n+        let meta = t!(e.metadata());\n+        if meta.is_dir() {\n+            dir_up_to_date(&e.path(), threshold)\n+        } else {\n+            meta.modified().unwrap_or(UNIX_EPOCH) < threshold\n+        }\n+    })\n+}\n+\n+fn fail(s: &str) -> ! {\n+    println!(\"\\n\\n{}\\n\\n\", s);\n+    std::process::exit(1);\n+}"}]}