{"sha": "7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZDliMWRkN2E5MWZiM2IxZTQwMGZkNGI0NzMzM2M5Njk5MzgxZjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T12:41:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T12:41:18Z"}, "message": "don't load sysroot in most heavy tests", "tree": {"sha": "2e9b1fc0839fba1a55d1c95a3ab601bdcec7d0d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e9b1fc0839fba1a55d1c95a3ab601bdcec7d0d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "html_url": "https://github.com/rust-lang/rust/commit/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef90ce45ee9954e864933450953f5eb83429f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef90ce45ee9954e864933450953f5eb83429f01", "html_url": "https://github.com/rust-lang/rust/commit/cef90ce45ee9954e864933450953f5eb83429f01"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "71838b89cde07aa3c69d3a1634c28805318f7032", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "patch": "@@ -21,6 +21,10 @@ pub struct ServerConfig {\n     pub exclude_globs: Vec<String>,\n \n     pub lru_capacity: Option<usize>,\n+\n+    /// For internal usage to make integrated tests faster.\n+    #[serde(deserialize_with = \"nullable_bool_true\")]\n+    pub with_sysroot: bool,\n }\n \n impl Default for ServerConfig {\n@@ -30,6 +34,7 @@ impl Default for ServerConfig {\n             show_workspace_loaded: true,\n             exclude_globs: Vec::new(),\n             lru_capacity: None,\n+            with_sysroot: true,\n         }\n     }\n }"}, {"sha": "3ee0ad6522bfdd93086242d46908aa9f0338c30c", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "patch": "@@ -59,7 +59,7 @@ pub fn main_loop(\n     log::debug!(\"server_config: {:?}\", config);\n     // FIXME: support dynamic workspace loading.\n     let workspaces = {\n-        let ws_worker = workspace_loader();\n+        let ws_worker = workspace_loader(config.with_sysroot);\n         let mut loaded_workspaces = Vec::new();\n         for ws_root in &ws_roots {\n             ws_worker.sender().send(ws_root.clone()).unwrap();"}, {"sha": "ad59cde64c3e22e28075ed38acde2c68a9d13140", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "patch": "@@ -8,14 +8,14 @@ pub use ra_project_model::{\n     CargoWorkspace, Package, ProjectWorkspace, Sysroot, Target, TargetKind,\n };\n \n-pub fn workspace_loader() -> Worker<PathBuf, Result<ProjectWorkspace>> {\n+pub fn workspace_loader(with_sysroot: bool) -> Worker<PathBuf, Result<ProjectWorkspace>> {\n     Worker::<PathBuf, Result<ProjectWorkspace>>::spawn(\n         \"workspace loader\",\n         1,\n-        |input_receiver, output_sender| {\n+        move |input_receiver, output_sender| {\n             input_receiver\n                 .into_iter()\n-                .map(|path| ProjectWorkspace::discover(path.as_path()))\n+                .map(|path| ProjectWorkspace::discover_with_sysroot(path.as_path(), with_sysroot))\n                 .try_for_each(|it| output_sender.send(it))\n                 .unwrap()\n         },"}, {"sha": "de3bd5bc55d3388cd83fdef9fc83a5077bb9e9d6", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "patch": "@@ -22,7 +22,7 @@ const PROFILE: &'static str = \"\";\n #[test]\n fn completes_items_from_standard_library() {\n     let project_start = Instant::now();\n-    let server = project(\n+    let server = Project::with_fixture(\n         r#\"\n //- Cargo.toml\n [package]\n@@ -32,7 +32,9 @@ version = \"0.0.0\"\n //- src/lib.rs\n use std::collections::Spam;\n \"#,\n-    );\n+    )\n+    .with_sysroot(true)\n+    .server();\n     server.wait_until_workspace_is_loaded();\n     eprintln!(\"loading took    {:?}\", project_start.elapsed());\n     let completion_start = Instant::now();\n@@ -349,7 +351,7 @@ fn main() {{}}\n fn diagnostics_dont_block_typing() {\n     let librs: String = (0..10).map(|i| format!(\"mod m{};\", i)).collect();\n     let libs: String = (0..10).map(|i| format!(\"//- src/m{}.rs\\nfn foo() {{}}\\n\\n\", i)).collect();\n-    let server = project(&format!(\n+    let server = Project::with_fixture(&format!(\n         r#\"\n //- Cargo.toml\n [package]\n@@ -364,7 +366,10 @@ version = \"0.0.0\"\n fn main() {{}}\n \"#,\n         librs, libs\n-    ));\n+    ))\n+    .with_sysroot(true)\n+    .server();\n+\n     server.wait_until_workspace_is_loaded();\n     for i in 0..10 {\n         server.notification::<DidOpenTextDocument>(DidOpenTextDocumentParams {"}, {"sha": "055c8fff22d13936d382e0025a5caebe06b1250e", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "patch": "@@ -26,13 +26,14 @@ use ra_lsp_server::{main_loop, req, ServerConfig};\n \n pub struct Project<'a> {\n     fixture: &'a str,\n+    with_sysroot: bool,\n     tmp_dir: Option<TempDir>,\n     roots: Vec<PathBuf>,\n }\n \n impl<'a> Project<'a> {\n     pub fn with_fixture(fixture: &str) -> Project {\n-        Project { fixture, tmp_dir: None, roots: vec![] }\n+        Project { fixture, tmp_dir: None, roots: vec![], with_sysroot: false }\n     }\n \n     pub fn tmp_dir(mut self, tmp_dir: TempDir) -> Project<'a> {\n@@ -45,6 +46,11 @@ impl<'a> Project<'a> {\n         self\n     }\n \n+    pub fn with_sysroot(mut self, sysroot: bool) -> Project<'a> {\n+        self.with_sysroot = sysroot;\n+        self\n+    }\n+\n     pub fn server(self) -> Server {\n         let tmp_dir = self.tmp_dir.unwrap_or_else(|| TempDir::new().unwrap());\n         static INIT: Once = Once::new();\n@@ -68,7 +74,7 @@ impl<'a> Project<'a> {\n \n         let roots = self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect();\n \n-        Server::new(tmp_dir, roots, paths)\n+        Server::new(tmp_dir, self.with_sysroot, roots, paths)\n     }\n }\n \n@@ -84,7 +90,12 @@ pub struct Server {\n }\n \n impl Server {\n-    fn new(dir: TempDir, roots: Vec<PathBuf>, files: Vec<(PathBuf, String)>) -> Server {\n+    fn new(\n+        dir: TempDir,\n+        with_sysroot: bool,\n+        roots: Vec<PathBuf>,\n+        files: Vec<(PathBuf, String)>,\n+    ) -> Server {\n         let path = dir.path().to_path_buf();\n \n         let roots = if roots.is_empty() { vec![path] } else { roots };\n@@ -107,7 +118,7 @@ impl Server {\n                         window: None,\n                         experimental: None,\n                     },\n-                    ServerConfig::default(),\n+                    ServerConfig { with_sysroot, ..ServerConfig::default() },\n                     &msg_receiver,\n                     &msg_sender,\n                 )"}, {"sha": "676dc494181fd1e786728aea2d4988e3e58d08ad", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "patch": "@@ -57,6 +57,10 @@ impl PackageRoot {\n \n impl ProjectWorkspace {\n     pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n+        ProjectWorkspace::discover_with_sysroot(path, true)\n+    }\n+\n+    pub fn discover_with_sysroot(path: &Path, with_sysroot: bool) -> Result<ProjectWorkspace> {\n         match find_rust_project_json(path) {\n             Some(json_path) => {\n                 let file = File::open(json_path)?;\n@@ -65,10 +69,10 @@ impl ProjectWorkspace {\n             }\n             None => {\n                 let cargo_toml = find_cargo_toml(path)?;\n-                Ok(ProjectWorkspace::Cargo {\n-                    cargo: CargoWorkspace::from_cargo_metadata(&cargo_toml)?,\n-                    sysroot: Sysroot::discover(&cargo_toml)?,\n-                })\n+                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml)?;\n+                let sysroot =\n+                    if with_sysroot { Sysroot::discover(&cargo_toml)? } else { Sysroot::default() };\n+                Ok(ProjectWorkspace::Cargo { cargo, sysroot })\n             }\n         }\n     }"}, {"sha": "2a7927f7efa6176c96b7eb421dabe08e0db0a98c", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=7cd9b1dd7a91fb3b1e400fd4b47333c9699381f7", "patch": "@@ -7,7 +7,7 @@ use ra_arena::{impl_arena_id, Arena, RawId};\n \n use crate::Result;\n \n-#[derive(Debug, Clone)]\n+#[derive(Default, Debug, Clone)]\n pub struct Sysroot {\n     crates: Arena<SysrootCrate, SysrootCrateData>,\n }"}]}