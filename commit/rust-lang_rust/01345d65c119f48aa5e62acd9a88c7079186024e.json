{"sha": "01345d65c119f48aa5e62acd9a88c7079186024e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMzQ1ZDY1YzExOWY0OGFhNWU2MmFjZDlhODhjNzA3OTE4NjAyNGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T10:07:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-03T10:07:04Z"}, "message": "Rollup merge of #66904 - DevinR528:keyword-doc, r=Dylan-DPC\n\nAdding docs for keyword match, move\n\nPartial fix of issue #34601.", "tree": {"sha": "688ba8e8d915232daab7f9391cfb00dc2556061a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688ba8e8d915232daab7f9391cfb00dc2556061a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01345d65c119f48aa5e62acd9a88c7079186024e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5jPICRBK7hj4Ov3rIwAAdHIIAH8Ur6qIq+D7tAXDb9Jsm/JK\nSQAZKCjQU06oo+XBOPfKBwhr6+fL2duMIWd72Kr99nc77436j8/nGS9lwVWAEq/9\nbUAe+1cm9nUls27DCjli+xQ0C8YF7KFA9O19QioLxDXtpX+RPLc1vs+WlppRlGjX\nYgm+RwnnmWt/MZlG2H2C2ce9pdvdNPnHAfwg9GEfqQtP4W+ch4EN3SnAnk4KzAbL\n+jxEiIlgJAJLa8aH00oZLfteSRZaaTaIO9gTcFW9xqjRUJGS5LUCWRKdmWbKB23j\n6MNRkaIcG8Y50Uca6/lIjTnwd2maDGrcbVNHMQXZBzMq52Wyy8JaCe0jIDJfoQ4=\n=B8jm\n-----END PGP SIGNATURE-----\n", "payload": "tree 688ba8e8d915232daab7f9391cfb00dc2556061a\nparent 8dacfc2adac25b8e749a19623ce4db543bb33306\nparent e638f7c1abdfff7d5d3370c9851b38dc756aef2e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575367624 +0100\ncommitter GitHub <noreply@github.com> 1575367624 +0100\n\nRollup merge of #66904 - DevinR528:keyword-doc, r=Dylan-DPC\n\nAdding docs for keyword match, move\n\nPartial fix of issue #34601.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01345d65c119f48aa5e62acd9a88c7079186024e", "html_url": "https://github.com/rust-lang/rust/commit/01345d65c119f48aa5e62acd9a88c7079186024e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01345d65c119f48aa5e62acd9a88c7079186024e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dacfc2adac25b8e749a19623ce4db543bb33306", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dacfc2adac25b8e749a19623ce4db543bb33306", "html_url": "https://github.com/rust-lang/rust/commit/8dacfc2adac25b8e749a19623ce4db543bb33306"}, {"sha": "e638f7c1abdfff7d5d3370c9851b38dc756aef2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e638f7c1abdfff7d5d3370c9851b38dc756aef2e", "html_url": "https://github.com/rust-lang/rust/commit/e638f7c1abdfff7d5d3370c9851b38dc756aef2e"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "5b7bef930d1d937ea303923e33a0236ec9956e34", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/01345d65c119f48aa5e62acd9a88c7079186024e/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01345d65c119f48aa5e62acd9a88c7079186024e/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=01345d65c119f48aa5e62acd9a88c7079186024e", "patch": "@@ -812,9 +812,50 @@ mod loop_keyword { }\n //\n /// Control flow based on pattern matching.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `match` can be used to run code conditionally. Every pattern must\n+/// be handled exhaustively either explicitly or by using wildcards like\n+/// `_` in the `match`. Since `match` is an expression, values can also be\n+/// returned.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// ```rust\n+/// let opt = Option::None::<usize>;\n+/// let x = match opt {\n+///     Some(int) => int,\n+///     None => 10,\n+/// };\n+/// assert_eq!(x, 10);\n+///\n+/// let a_number = Option::Some(10);\n+/// match a_number {\n+///     Some(x) if x <= 5 => println!(\"0 to 5 num = {}\", x),\n+///     Some(x @ 6..=10) => println!(\"6 to 10 num = {}\", x),\n+///     None => panic!(),\n+///     // all other numbers\n+///     _ => panic!(),\n+/// }\n+/// ```\n+///\n+/// `match` can be used to gain access to the inner members of an enum\n+/// and use them directly.\n+///\n+/// ```rust\n+/// enum Outer {\n+///     Double(Option<u8>, Option<String>),\n+///     Single(Option<u8>),\n+///     Empty\n+/// }\n+///\n+/// let get_inner = Outer::Double(None, Some(String::new()));\n+/// match get_inner {\n+///     Outer::Double(None, Some(st)) => println!(\"{}\", st),\n+///     Outer::Single(opt) => println!(\"{:?}\", opt),\n+///     _ => panic!(),\n+/// }\n+/// ```\n+///\n+/// For more information on `match` and matching in general, see the [Reference].\n+///\n+/// [Reference]: ../reference/expressions/match-expr.html\n mod match_keyword { }\n \n #[doc(keyword = \"mod\")]\n@@ -831,10 +872,35 @@ mod mod_keyword { }\n //\n /// Capture a [closure]'s environment by value.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `move` converts any variables captured by reference or mutable reference\n+/// to owned by value variables. The three [`Fn` trait]'s mirror the ways to capture\n+/// variables, when `move` is used, the closures is represented by the `FnOnce` trait.\n ///\n-/// [closure]: ../book/second-edition/ch13-01-closures.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// ```rust\n+/// let capture = \"hello\";\n+/// let closure = move || {\n+///     println!(\"rust says {}\", capture);\n+/// };\n+/// ```\n+///\n+/// `move` is often used when [threads] are involved.\n+///\n+/// ```rust\n+/// let x = 5;\n+///\n+/// std::thread::spawn(move || {\n+///     println!(\"captured {} by value\", x)\n+/// }).join().unwrap();\n+///\n+/// // x is no longer available\n+/// ```\n+///\n+/// For more information on the `move` keyword, see the [closure]'s section\n+/// of the Rust book or the [threads] section\n+///\n+/// [`Fn` trait]: ../std/ops/trait.Fn.html\n+/// [closure]: ../book/ch13-01-closures.html\n+/// [threads]: ../book/ch16-01-threads.html#using-move-closures-with-threads\n mod move_keyword { }\n \n #[doc(keyword = \"mut\")]"}]}