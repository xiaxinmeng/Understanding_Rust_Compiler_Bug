{"sha": "d623a8bf3c530b900a69c059568079d5cbb4d6b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjNhOGJmM2M1MzBiOTAwYTY5YzA1OTU2ODA3OWQ1Y2JiNGQ2Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-04T03:06:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-04T03:06:19Z"}, "message": "auto merge of #15321 : huonw/rust/nil-prim, r=alexcrichton\n\nThis adds a primitive page for () like http://doc.rust-lang.org/master/std/uint/primitive.uint.html .\r\n\r\nI would prefer the modules to be `std::tuple::unit`, but rustdoc only searches at the top level (filed as #15320).", "tree": {"sha": "9078faea458feb6ca1b2099a865002ce0e1d7b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9078faea458feb6ca1b2099a865002ce0e1d7b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d623a8bf3c530b900a69c059568079d5cbb4d6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d623a8bf3c530b900a69c059568079d5cbb4d6b8", "html_url": "https://github.com/rust-lang/rust/commit/d623a8bf3c530b900a69c059568079d5cbb4d6b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d623a8bf3c530b900a69c059568079d5cbb4d6b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b11610ced12e42f3de4d7f41fe47bbf07dd5af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b11610ced12e42f3de4d7f41fe47bbf07dd5af2", "html_url": "https://github.com/rust-lang/rust/commit/5b11610ced12e42f3de4d7f41fe47bbf07dd5af2"}, {"sha": "7c92735f08711cf15dd2dbdbd6119d49ae765807", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c92735f08711cf15dd2dbdbd6119d49ae765807", "html_url": "https://github.com/rust-lang/rust/commit/7c92735f08711cf15dd2dbdbd6119d49ae765807"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "5e238aeae32711004f1c5bfc6397985d06c63e1d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d623a8bf3c530b900a69c059568079d5cbb4d6b8", "patch": "@@ -122,6 +122,10 @@ pub mod simd;\n pub mod slice;\n pub mod str;\n pub mod tuple;\n+// FIXME #15320: primitive documentation needs top-level modules, this\n+// should be `core::tuple::unit`.\n+#[path = \"tuple/unit.rs\"]\n+pub mod unit;\n pub mod fmt;\n \n #[doc(hidden)]"}, {"sha": "4f34c64de1ba5d90dc79717100d5955dad3a3577", "filename": "src/libcore/tuple/mod.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibcore%2Ftuple%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibcore%2Ftuple%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple%2Fmod.rs?ref=d623a8bf3c530b900a69c059568079d5cbb4d6b8", "patch": "@@ -61,6 +61,8 @@\n \n #![doc(primitive = \"tuple\")]\n \n+pub use unit;\n+\n use clone::Clone;\n use cmp::*;\n use default::Default;", "previous_filename": "src/libcore/tuple.rs"}, {"sha": "a60b3d098d36115e13e7d10e741475006f8fbf3b", "filename": "src/libcore/tuple/unit.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibcore%2Ftuple%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibcore%2Ftuple%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple%2Funit.rs?ref=d623a8bf3c530b900a69c059568079d5cbb4d6b8", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![doc(primitive = \"unit\")]\n+\n+//! The `()` type, sometimes called \"unit\" or \"nil\".\n+//!\n+//! The `()` type has exactly one value `()`, and is used when there\n+//! is no other meaningful value that could be returned. `()` is most\n+//! commonly seen implicitly: functions without a `-> ...` implicitly\n+//! have return type `()`, that is, these are equivalent:\n+//!\n+//! ```rust\n+//! fn long() -> () {}\n+//!\n+//! fn short() {}\n+//! ```\n+//!\n+//! The semicolon `;` can be used to discard the result of an\n+//! expression at the end of a block, making the expression (and thus\n+//! the block) evaluate to `()`. For example,\n+//!\n+//! ```rust\n+//! fn returns_i64() -> i64 {\n+//!     1i64\n+//! }\n+//! fn returns_unit() {\n+//!     1i64;\n+//! }\n+//!\n+//! let is_i64 = {\n+//!     returns_i64()\n+//! };\n+//! let is_unit = {\n+//!     returns_i64();\n+//! };\n+//! ```"}, {"sha": "4808cbdb4b09b332986c01c64214088562e7a098", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d623a8bf3c530b900a69c059568079d5cbb4d6b8", "patch": "@@ -1079,7 +1079,7 @@ pub enum Primitive {\n     F32, F64,\n     Char,\n     Bool,\n-    Nil,\n+    Unit,\n     Str,\n     Slice,\n     PrimitiveTuple,\n@@ -1110,7 +1110,7 @@ impl Primitive {\n             \"u32\" => Some(U32),\n             \"u64\" => Some(U64),\n             \"bool\" => Some(Bool),\n-            \"nil\" => Some(Nil),\n+            \"unit\" => Some(Unit),\n             \"char\" => Some(Char),\n             \"str\" => Some(Str),\n             \"f32\" => Some(F32),\n@@ -1159,15 +1159,15 @@ impl Primitive {\n             Str => \"str\",\n             Bool => \"bool\",\n             Char => \"char\",\n-            Nil => \"()\",\n+            Unit => \"()\",\n             Slice => \"slice\",\n             PrimitiveTuple => \"tuple\",\n         }\n     }\n \n     pub fn to_url_str(&self) -> &'static str {\n         match *self {\n-            Nil => \"nil\",\n+            Unit => \"unit\",\n             other => other.to_str(),\n         }\n     }\n@@ -1184,7 +1184,7 @@ impl Clean<Type> for ast::Ty {\n     fn clean(&self) -> Type {\n         use syntax::ast::*;\n         match self.node {\n-            TyNil => Primitive(Nil),\n+            TyNil => Primitive(Unit),\n             TyPtr(ref m) => RawPointer(m.mutbl.clean(), box m.ty.clean()),\n             TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(), mutability: m.mutbl.clean(),\n@@ -1214,7 +1214,7 @@ impl Clean<Type> for ty::t {\n     fn clean(&self) -> Type {\n         match ty::get(*self).sty {\n             ty::ty_bot => Bottom,\n-            ty::ty_nil => Primitive(Nil),\n+            ty::ty_nil => Primitive(Unit),\n             ty::ty_bool => Primitive(Bool),\n             ty::ty_char => Primitive(Char),\n             ty::ty_int(ast::TyI) => Primitive(Int),"}, {"sha": "cec665768d1ee86ab4aad758480f60792d7f5283", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d623a8bf3c530b900a69c059568079d5cbb4d6b8", "patch": "@@ -362,7 +362,7 @@ impl fmt::Show for clean::Type {\n                        },\n                        args = decl.decl.inputs,\n                        arrow = match decl.decl.output {\n-                           clean::Primitive(clean::Nil) => \"\".to_string(),\n+                           clean::Primitive(clean::Unit) => \"\".to_string(),\n                            _ => format!(\" -&gt; {}\", decl.decl.output),\n                        },\n                        bounds = {\n@@ -411,7 +411,7 @@ impl fmt::Show for clean::Type {\n                                m.collect::<Vec<String>>().connect(\" + \"))\n                        },\n                        arrow = match decl.decl.output {\n-                           clean::Primitive(clean::Nil) => \"\".to_string(),\n+                           clean::Primitive(clean::Unit) => \"\".to_string(),\n                            _ => format!(\" -&gt; {}\", decl.decl.output)\n                        })\n             }\n@@ -472,7 +472,7 @@ impl fmt::Show for clean::FnDecl {\n         write!(f, \"({args}){arrow}\",\n                args = self.inputs,\n                arrow = match self.output {\n-                   clean::Primitive(clean::Nil) => \"\".to_string(),\n+                   clean::Primitive(clean::Unit) => \"\".to_string(),\n                    _ => format!(\" -&gt; {}\", self.output),\n                })\n     }\n@@ -505,7 +505,7 @@ impl<'a> fmt::Show for Method<'a> {\n         write!(f, \"({args}){arrow}\",\n                args = args,\n                arrow = match d.output {\n-                   clean::Primitive(clean::Nil) => \"\".to_string(),\n+                   clean::Primitive(clean::Unit) => \"\".to_string(),\n                    _ => format!(\" -&gt; {}\", d.output),\n                })\n     }"}, {"sha": "0e6f848fce85ab19fa9fc3d5b1d6aceba1db522c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623a8bf3c530b900a69c059568079d5cbb4d6b8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d623a8bf3c530b900a69c059568079d5cbb4d6b8", "patch": "@@ -160,6 +160,9 @@ pub use core::ptr;\n pub use core::raw;\n pub use core::simd;\n pub use core::tuple;\n+// FIXME #15320: primitive documentation needs top-level modules, this\n+// should be `std::tuple::unit`.\n+pub use core::unit;\n #[cfg(not(test))] pub use core::ty;\n pub use core::result;\n pub use core::option;"}]}