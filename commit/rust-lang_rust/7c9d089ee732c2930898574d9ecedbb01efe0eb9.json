{"sha": "7c9d089ee732c2930898574d9ecedbb01efe0eb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOWQwODllZTczMmMyOTMwODk4NTc0ZDllY2VkYmIwMWVmZTBlYjk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-01T14:49:10Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-01T14:50:13Z"}, "message": "pipes: use finally to fix pipes::try_recv", "tree": {"sha": "84b3529a067a5494e490ec4612cb3ccf987d7aa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b3529a067a5494e490ec4612cb3ccf987d7aa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c9d089ee732c2930898574d9ecedbb01efe0eb9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9d089ee732c2930898574d9ecedbb01efe0eb9", "html_url": "https://github.com/rust-lang/rust/commit/7c9d089ee732c2930898574d9ecedbb01efe0eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c9d089ee732c2930898574d9ecedbb01efe0eb9/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a3bbd76c77fa7a878ecd86dcb5c772164cbb51", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a3bbd76c77fa7a878ecd86dcb5c772164cbb51", "html_url": "https://github.com/rust-lang/rust/commit/e7a3bbd76c77fa7a878ecd86dcb5c772164cbb51"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "145997fcb4bd533844b0a4465b68148704218991", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7c9d089ee732c2930898574d9ecedbb01efe0eb9/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9d089ee732c2930898574d9ecedbb01efe0eb9/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=7c9d089ee732c2930898574d9ecedbb01efe0eb9", "patch": "@@ -88,6 +88,7 @@ use kinds::Owned;\n use libc;\n use ops::Drop;\n use option::{None, Option, Some};\n+use unstable::finally::Finally;\n use unstable::intrinsics;\n use ptr;\n use task;\n@@ -396,28 +397,22 @@ pub fn try_recv<T:Owned,Tbuffer:Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n     let p_ = p.unwrap();\n     let p = unsafe { &*p_ };\n \n-    struct DropState<'self> {\n-        p: &'self PacketHeader,\n-    }\n-\n-    #[unsafe_destructor]\n-    impl<'self> Drop for DropState<'self> {\n-        fn finalize(&self) {\n-            unsafe {\n-                if task::failing() {\n-                    self.p.state = Terminated;\n-                    let old_task = swap_task(&mut self.p.blocked_task,\n-                                             ptr::null());\n-                    if !old_task.is_null() {\n-                        rustrt::rust_task_deref(old_task);\n-                    }\n+    do (|| {\n+        try_recv_(p)\n+    }).finally {\n+        unsafe {\n+            if task::failing() {\n+                p.header.state = Terminated;\n+                let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n+                if !old_task.is_null() {\n+                    rustrt::rust_task_deref(old_task);\n                 }\n             }\n         }\n     }\n+}\n \n-    let _drop_state = DropState { p: &p.header };\n-\n+fn try_recv_<T:Owned>(p: &Packet<T>) -> Option<T> {\n     // optimistic path\n     match p.header.state {\n       Full => {\n@@ -454,7 +449,7 @@ pub fn try_recv<T:Owned,Tbuffer:Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n                                        Blocked);\n         match old_state {\n           Empty => {\n-            debug!(\"no data available on %?, going to sleep.\", p_);\n+            debug!(\"no data available on %?, going to sleep.\", p);\n             if count == 0 {\n                 wait_event(this);\n             }"}]}