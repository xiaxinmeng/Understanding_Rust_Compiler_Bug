{"sha": "637addde1f9d6f830115fa6b71c74bb43675fa2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzN2FkZGRlMWY5ZDZmODMwMTE1ZmE2YjcxYzc0YmI0MzY3NWZhMmM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T00:45:16Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T16:20:13Z"}, "message": "rustc: de-@ trans::tydesc_info.", "tree": {"sha": "58a6891a83dbe6e837fe507450a4844d2b055c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58a6891a83dbe6e837fe507450a4844d2b055c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/637addde1f9d6f830115fa6b71c74bb43675fa2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/637addde1f9d6f830115fa6b71c74bb43675fa2c", "html_url": "https://github.com/rust-lang/rust/commit/637addde1f9d6f830115fa6b71c74bb43675fa2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/637addde1f9d6f830115fa6b71c74bb43675fa2c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3508891b0c7d7c8bf1c1dc11ad57ea44453dd18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3508891b0c7d7c8bf1c1dc11ad57ea44453dd18f", "html_url": "https://github.com/rust-lang/rust/commit/3508891b0c7d7c8bf1c1dc11ad57ea44453dd18f"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "fda51e744ce0943f6f9bc7528c3468ee94a103ec", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=637addde1f9d6f830115fa6b71c74bb43675fa2c", "patch": "@@ -399,17 +399,17 @@ pub fn malloc_raw_dyn_managed<'a>(\n \n // Type descriptor and type glue stuff\n \n-pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n+pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> Rc<tydesc_info> {\n     match ccx.tydescs.borrow().find(&t) {\n-        Some(&inf) => return inf,\n+        Some(inf) => return inf.clone(),\n         _ => { }\n     }\n \n     ccx.stats.n_static_tydescs.set(ccx.stats.n_static_tydescs.get() + 1u);\n-    let inf = glue::declare_tydesc(ccx, t);\n+    let inf = Rc::new(glue::declare_tydesc(ccx, t));\n \n-    ccx.tydescs.borrow_mut().insert(t, inf);\n-    return inf;\n+    ccx.tydescs.borrow_mut().insert(t, inf.clone());\n+    inf\n }\n \n #[allow(dead_code)] // useful"}, {"sha": "119750cd9ce03a7f2ba4cc00a50305a91bb8bcf7", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=637addde1f9d6f830115fa6b71c74bb43675fa2c", "patch": "@@ -64,7 +64,7 @@ pub struct CrateContext {\n     pub item_symbols: RefCell<NodeMap<~str>>,\n     pub link_meta: LinkMeta,\n     pub drop_glues: RefCell<HashMap<ty::t, ValueRef>>,\n-    pub tydescs: RefCell<HashMap<ty::t, @tydesc_info>>,\n+    pub tydescs: RefCell<HashMap<ty::t, Rc<tydesc_info>>>,\n     /// Set when running emit_tydescs to enforce that no more tydescs are\n     /// created.\n     pub finished_tydescs: Cell<bool>,"}, {"sha": "8488261db9c5cf376883ce97ed871e639469034f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=637addde1f9d6f830115fa6b71c74bb43675fa2c", "patch": "@@ -145,39 +145,34 @@ pub fn get_drop_glue(ccx: &CrateContext, t: ty::t) -> ValueRef {\n     glue\n }\n \n-pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: @tydesc_info) {\n+pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: &tydesc_info) -> ValueRef {\n     let _icx = push_ctxt(\"lazily_emit_visit_glue\");\n \n     let llfnty = Type::glue_fn(ccx, type_of(ccx, ti.ty).ptr_to());\n \n     match ti.visit_glue.get() {\n-        Some(_) => (),\n+        Some(visit_glue) => visit_glue,\n         None => {\n             debug!(\"+++ lazily_emit_tydesc_glue VISIT {}\", ppaux::ty_to_str(ccx.tcx(), ti.ty));\n             let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"visit\");\n             ti.visit_glue.set(Some(glue_fn));\n             make_generic_glue(ccx, ti.ty, glue_fn, make_visit_glue, \"visit\");\n             debug!(\"--- lazily_emit_tydesc_glue VISIT {}\", ppaux::ty_to_str(ccx.tcx(), ti.ty));\n+            glue_fn\n         }\n     }\n }\n \n // See [Note-arg-mode]\n pub fn call_visit_glue(bcx: &Block, v: ValueRef, tydesc: ValueRef,\n-                       static_ti: Option<@tydesc_info>) {\n+                       static_ti: Option<&tydesc_info>) {\n     let _icx = push_ctxt(\"call_tydesc_glue_full\");\n     let ccx = bcx.ccx();\n     // NB: Don't short-circuit even if this block is unreachable because\n     // GC-based cleanup needs to the see that the roots are live.\n     if bcx.unreachable.get() && !ccx.sess().no_landing_pads() { return; }\n \n-    let static_glue_fn = match static_ti {\n-        None => None,\n-        Some(sti) => {\n-            lazily_emit_visit_glue(ccx, sti);\n-            sti.visit_glue.get()\n-        }\n-    };\n+    let static_glue_fn = static_ti.map(|sti| lazily_emit_visit_glue(ccx, sti));\n \n     // When static type info is available, avoid casting to a generic pointer.\n     let llrawptr = if static_glue_fn.is_none() {\n@@ -404,7 +399,7 @@ fn incr_refcnt_of_boxed<'a>(bcx: &'a Block<'a>,\n \n \n // Generates the declaration for (but doesn't emit) a type descriptor.\n-pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n+pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> tydesc_info {\n     // If emit_tydescs already ran, then we shouldn't be creating any new\n     // tydescs.\n     assert!(!ccx.finished_tydescs.get());\n@@ -430,16 +425,15 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n     let ty_name = token::intern_and_get_ident(ppaux::ty_to_str(ccx.tcx(), t));\n     let ty_name = C_str_slice(ccx, ty_name);\n \n-    let inf = @tydesc_info {\n+    debug!(\"--- declare_tydesc {}\", ppaux::ty_to_str(ccx.tcx(), t));\n+    tydesc_info {\n         ty: t,\n         tydesc: gvar,\n         size: llsize,\n         align: llalign,\n         name: ty_name,\n         visit_glue: Cell::new(None),\n-    };\n-    debug!(\"--- declare_tydesc {}\", ppaux::ty_to_str(ccx.tcx(), t));\n-    return inf;\n+    }\n }\n \n fn declare_generic_glue(ccx: &CrateContext, t: ty::t, llfnty: Type,\n@@ -491,9 +485,7 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n     // As of this point, allow no more tydescs to be created.\n     ccx.finished_tydescs.set(true);\n     let glue_fn_ty = Type::generic_glue_fn(ccx).ptr_to();\n-    for (_, &val) in ccx.tydescs.borrow().iter() {\n-        let ti = val;\n-\n+    for (_, ti) in ccx.tydescs.borrow().iter() {\n         // Each of the glue functions needs to be cast to a generic type\n         // before being put into the tydesc because we only have a singleton\n         // tydesc type. Then we'll recast each function to its real type when"}, {"sha": "3a0083ba5c636f2b95858eb3615b244a43f2deed", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=637addde1f9d6f830115fa6b71c74bb43675fa2c", "patch": "@@ -328,7 +328,7 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n         \"get_tydesc\" => {\n             let tp_ty = *substs.tys.get(0);\n             let static_ti = get_tydesc(ccx, tp_ty);\n-            glue::lazily_emit_visit_glue(ccx, static_ti);\n+            glue::lazily_emit_visit_glue(ccx, &*static_ti);\n \n             // FIXME (#3730): ideally this shouldn't need a cast,\n             // but there's a circularity between translating rust types to llvm"}, {"sha": "a1752862715d0189c72bb00a421a1c028029446f", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637addde1f9d6f830115fa6b71c74bb43675fa2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=637addde1f9d6f830115fa6b71c74bb43675fa2c", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n     pub fn c_tydesc(&mut self, t: ty::t) -> ValueRef {\n         let bcx = self.bcx;\n         let static_ti = get_tydesc(bcx.ccx(), t);\n-        glue::lazily_emit_visit_glue(bcx.ccx(), static_ti);\n+        glue::lazily_emit_visit_glue(bcx.ccx(), &*static_ti);\n         PointerCast(bcx, static_ti.tydesc, self.tydesc_ty.ptr_to())\n     }\n "}]}