{"sha": "8f92309dbc00a0f88563030921706f205c01f452", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOTIzMDlkYmMwMGEwZjg4NTYzMDMwOTIxNzA2ZjIwNWMwMWY0NTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-25T11:35:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T11:35:50Z"}, "message": "Merge #1909\n\n1909: move ast builder to a separate file r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3e3f08ada8011f300faae3966cbe61a4a7dd7377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3f08ada8011f300faae3966cbe61a4a7dd7377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f92309dbc00a0f88563030921706f205c01f452", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi1EWCRBK7hj4Ov3rIwAAdHIIAHcAVb8d1fWfdgKKV4YdIkNn\nBtvh5sEImThJLta87XNvIe2ru9M//eNZ0o1Tx/BlZ5/63FuLsbxGs3KRApyX+shl\nKM9D5hht9SvZsYeyhbdaItKKI5MH9FG5HGPaRTC9btLuixvWhrgBIF3RPaN5DJf/\npsPwuJYNryaBLWIZdyDs2dpyoyvSdOQyB357RCCeRirUQNV8PL3oK0MaQp/Kqlxu\nLk40J9HjtPsO15sVqLsSuymAJrzhVcFit8mgxj8OpK5Cg7wxfh3Sol/+73hFd5qK\naSMa67/q3H9qSBvwbxreD4DaixPAufcIp12HJboqEvhKVSvovZWwN1WO1pz+IP0=\n=z3ds\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e3f08ada8011f300faae3966cbe61a4a7dd7377\nparent d9b4835625ac96c7628e2ef66ef6e26cc48d231f\nparent 69689625ce4465f2d008d6543553d0d91d53dca4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1569411350 +0000\ncommitter GitHub <noreply@github.com> 1569411350 +0000\n\nMerge #1909\n\n1909: move ast builder to a separate file r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f92309dbc00a0f88563030921706f205c01f452", "html_url": "https://github.com/rust-lang/rust/commit/8f92309dbc00a0f88563030921706f205c01f452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f92309dbc00a0f88563030921706f205c01f452/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b4835625ac96c7628e2ef66ef6e26cc48d231f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b4835625ac96c7628e2ef66ef6e26cc48d231f", "html_url": "https://github.com/rust-lang/rust/commit/d9b4835625ac96c7628e2ef66ef6e26cc48d231f"}, {"sha": "69689625ce4465f2d008d6543553d0d91d53dca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/69689625ce4465f2d008d6543553d0d91d53dca4", "html_url": "https://github.com/rust-lang/rust/commit/69689625ce4465f2d008d6543553d0d91d53dca4"}], "stats": {"total": 576, "additions": 292, "deletions": 284}, "files": [{"sha": "9c88644df483cd062b0c6fc7032167b14020bbf1", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/add_derive.rs"}, {"sha": "78f0f7f28a54c5efde3913c47bfe06075e718c69", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/add_explicit_type.rs"}, {"sha": "4b61f4031494ec137e2f36b03479b480035653a8", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/add_impl.rs"}, {"sha": "2894bdd8a1e759b1c04cd7e2f87a767c7cce2693", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -4,10 +4,7 @@ use ra_syntax::{\n     SmolStr,\n };\n \n-use crate::{\n-    ast_editor::{AstBuilder, AstEditor},\n-    Assist, AssistCtx, AssistId,\n-};\n+use crate::{ast_builder::AstBuilder, ast_editor::AstEditor, Assist, AssistCtx, AssistId};\n \n #[derive(PartialEq)]\n enum AddMissingImplMembersMode {", "previous_filename": "crates/ra_assists/src/add_missing_impl_members.rs"}, {"sha": "5aae9854614ad7587d7bb1eb258b0b7f331285b4", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/auto_import.rs"}, {"sha": "60c74debcaa19fc2610ac38a932c369ac1bceb3f", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/change_visibility.rs"}, {"sha": "771aa625fc91a3e5c8c14fe39a728079a31ee85c", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -3,7 +3,7 @@ use std::iter;\n use hir::{db::HirDatabase, Adt, HasSource};\n use ra_syntax::ast::{self, AstNode, NameOwner};\n \n-use crate::{ast_editor::AstBuilder, Assist, AssistCtx, AssistId};\n+use crate::{ast_builder::AstBuilder, Assist, AssistCtx, AssistId};\n \n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;", "previous_filename": "crates/ra_assists/src/fill_match_arms.rs"}, {"sha": "b55b36a8edb1071e92673c4ae6f76fa3ba326ba3", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/flip_binexpr.rs"}, {"sha": "5ee7561bc47bf3d7be5fdad0d0d9b15fc441325d", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/flip_comma.rs"}, {"sha": "eedb2919943b9b66a6483804abe7ad0b6f375588", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/inline_local_variable.rs"}, {"sha": "470ffe120c623756555d163850c50f19ad8628a1", "filename": "crates/ra_assists/src/assists/introduce_variable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/introduce_variable.rs"}, {"sha": "3b6a99895d485953e8b73aba640cee7af9b39288", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/merge_match_arms.rs"}, {"sha": "aa9036feda0e2da8d924e25f90bdcce703c662b1", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::{ast_editor::AstBuilder, Assist, AssistCtx, AssistId};\n+use crate::{ast_builder::AstBuilder, Assist, AssistCtx, AssistId};\n \n pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let type_param_list = ctx.node_at_offset::<ast::TypeParamList>()?;", "previous_filename": "crates/ra_assists/src/move_bounds.rs"}, {"sha": "699221e33567138df6c4734be95df2b57c3d53b4", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/move_guard.rs"}, {"sha": "965a64c9870c1836327baa741f1cba7768b66e9e", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/raw_string.rs"}, {"sha": "870133fda07619a60cc0f21afa3b748e12891fa5", "filename": "crates/ra_assists/src/assists/remove_dbg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/remove_dbg.rs"}, {"sha": "401835c579f4a748ea795c76892b3346bbb8b033", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/replace_if_let_with_match.rs"}, {"sha": "2c1edddb90dd654854715678358e0be6f33f63c2", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "previous_filename": "crates/ra_assists/src/split_import.rs"}, {"sha": "e4ea1fca9dbfa18dc2ed11dd73f0ae662eeb6eb8", "filename": "crates/ra_assists/src/ast_builder.rs", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_builder.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -0,0 +1,229 @@\n+use itertools::Itertools;\n+\n+use hir::Name;\n+use ra_syntax::{ast, AstNode, SourceFile};\n+\n+pub struct AstBuilder<N: AstNode> {\n+    _phantom: std::marker::PhantomData<N>,\n+}\n+\n+impl AstBuilder<ast::RecordField> {\n+    pub fn from_name(name: &Name) -> ast::RecordField {\n+        ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}: (), }} }}\", name))\n+    }\n+\n+    fn from_text(text: &str) -> ast::RecordField {\n+        ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}, }} }}\", text))\n+    }\n+\n+    pub fn from_pieces(name: &ast::NameRef, expr: Option<&ast::Expr>) -> ast::RecordField {\n+        match expr {\n+            Some(expr) => Self::from_text(&format!(\"{}: {}\", name.syntax(), expr.syntax())),\n+            None => Self::from_text(&name.syntax().to_string()),\n+        }\n+    }\n+}\n+\n+impl AstBuilder<ast::Block> {\n+    fn from_text(text: &str) -> ast::Block {\n+        ast_node_from_file_text(&format!(\"fn f() {}\", text))\n+    }\n+\n+    pub fn single_expr(e: &ast::Expr) -> ast::Block {\n+        Self::from_text(&format!(\"{{ {} }}\", e.syntax()))\n+    }\n+}\n+\n+impl AstBuilder<ast::Expr> {\n+    fn from_text(text: &str) -> ast::Expr {\n+        ast_node_from_file_text(&format!(\"const C: () = {};\", text))\n+    }\n+\n+    pub fn unit() -> ast::Expr {\n+        Self::from_text(\"()\")\n+    }\n+\n+    pub fn unimplemented() -> ast::Expr {\n+        Self::from_text(\"unimplemented!()\")\n+    }\n+}\n+\n+impl AstBuilder<ast::NameRef> {\n+    pub fn new(text: &str) -> ast::NameRef {\n+        ast_node_from_file_text(&format!(\"fn f() {{ {}; }}\", text))\n+    }\n+}\n+\n+impl AstBuilder<ast::Path> {\n+    fn from_text(text: &str) -> ast::Path {\n+        ast_node_from_file_text(text)\n+    }\n+\n+    pub fn from_name(name: ast::Name) -> ast::Path {\n+        let name = name.syntax().to_string();\n+        Self::from_text(name.as_str())\n+    }\n+\n+    pub fn from_pieces(enum_name: ast::Name, var_name: ast::Name) -> ast::Path {\n+        Self::from_text(&format!(\"{}::{}\", enum_name.syntax(), var_name.syntax()))\n+    }\n+}\n+\n+impl AstBuilder<ast::BindPat> {\n+    fn from_text(text: &str) -> ast::BindPat {\n+        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n+    }\n+\n+    pub fn from_name(name: &ast::Name) -> ast::BindPat {\n+        Self::from_text(name.text())\n+    }\n+}\n+\n+impl AstBuilder<ast::PlaceholderPat> {\n+    fn from_text(text: &str) -> ast::PlaceholderPat {\n+        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n+    }\n+\n+    pub fn placeholder() -> ast::PlaceholderPat {\n+        Self::from_text(\"_\")\n+    }\n+}\n+\n+impl AstBuilder<ast::TupleStructPat> {\n+    fn from_text(text: &str) -> ast::TupleStructPat {\n+        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n+    }\n+\n+    pub fn from_pieces(\n+        path: &ast::Path,\n+        pats: impl Iterator<Item = ast::Pat>,\n+    ) -> ast::TupleStructPat {\n+        let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n+        Self::from_text(&format!(\"{}({})\", path.syntax(), pats_str))\n+    }\n+}\n+\n+impl AstBuilder<ast::RecordPat> {\n+    fn from_text(text: &str) -> ast::RecordPat {\n+        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n+    }\n+\n+    pub fn from_pieces(path: &ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n+        let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n+        Self::from_text(&format!(\"{}{{ {} }}\", path.syntax(), pats_str))\n+    }\n+}\n+\n+impl AstBuilder<ast::PathPat> {\n+    fn from_text(text: &str) -> ast::PathPat {\n+        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n+    }\n+\n+    pub fn from_path(path: &ast::Path) -> ast::PathPat {\n+        let path_str = path.syntax().text().to_string();\n+        Self::from_text(path_str.as_str())\n+    }\n+}\n+\n+impl AstBuilder<ast::MatchArm> {\n+    fn from_text(text: &str) -> ast::MatchArm {\n+        ast_node_from_file_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n+    }\n+\n+    pub fn from_pieces(pats: impl Iterator<Item = ast::Pat>, expr: &ast::Expr) -> ast::MatchArm {\n+        let pats_str = pats.map(|p| p.syntax().to_string()).join(\" | \");\n+        Self::from_text(&format!(\"{} => {}\", pats_str, expr.syntax()))\n+    }\n+}\n+\n+impl AstBuilder<ast::MatchArmList> {\n+    fn from_text(text: &str) -> ast::MatchArmList {\n+        ast_node_from_file_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n+    }\n+\n+    pub fn from_arms(arms: impl Iterator<Item = ast::MatchArm>) -> ast::MatchArmList {\n+        let arms_str = arms.map(|arm| format!(\"\\n    {}\", arm.syntax())).join(\",\");\n+        Self::from_text(&format!(\"{},\\n\", arms_str))\n+    }\n+}\n+\n+impl AstBuilder<ast::WherePred> {\n+    fn from_text(text: &str) -> ast::WherePred {\n+        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n+    }\n+\n+    pub fn from_pieces(\n+        path: ast::Path,\n+        bounds: impl Iterator<Item = ast::TypeBound>,\n+    ) -> ast::WherePred {\n+        let bounds = bounds.map(|b| b.syntax().to_string()).collect::<Vec<_>>().join(\" + \");\n+        Self::from_text(&format!(\"{}: {}\", path.syntax(), bounds))\n+    }\n+}\n+\n+impl AstBuilder<ast::WhereClause> {\n+    fn from_text(text: &str) -> ast::WhereClause {\n+        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n+    }\n+\n+    pub fn from_predicates(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereClause {\n+        let preds = preds.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n+        Self::from_text(preds.as_str())\n+    }\n+}\n+\n+fn ast_node_from_file_text<N: AstNode>(text: &str) -> N {\n+    let parse = SourceFile::parse(text);\n+    let res = parse.tree().syntax().descendants().find_map(N::cast).unwrap();\n+    res\n+}\n+\n+pub(crate) mod tokens {\n+    use once_cell::sync::Lazy;\n+    use ra_syntax::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken, T};\n+\n+    static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n+\n+    pub(crate) fn comma() -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == T![,])\n+            .unwrap()\n+    }\n+\n+    pub(crate) fn single_space() -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \" \")\n+            .unwrap()\n+    }\n+\n+    #[allow(unused)]\n+    pub(crate) fn single_newline() -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\")\n+            .unwrap()\n+    }\n+\n+    pub(crate) struct WsBuilder(SourceFile);\n+\n+    impl WsBuilder {\n+        pub(crate) fn new(text: &str) -> WsBuilder {\n+            WsBuilder(SourceFile::parse(text).ok().unwrap())\n+        }\n+        pub(crate) fn ws(&self) -> SyntaxToken {\n+            self.0.syntax().first_child_or_token().unwrap().into_token().unwrap()\n+        }\n+    }\n+\n+}"}, {"sha": "81621afef8f63495b19ac48b3085ae6677e0641b", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 3, "deletions": 228, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -1,18 +1,18 @@\n use std::{iter, ops::RangeInclusive};\n \n use arrayvec::ArrayVec;\n-use itertools::Itertools;\n \n-use hir::Name;\n use ra_fmt::leading_indent;\n use ra_syntax::{\n     algo::{insert_children, replace_children},\n-    ast, AstNode, Direction, InsertPosition, SourceFile, SyntaxElement,\n+    ast, AstNode, Direction, InsertPosition, SyntaxElement,\n     SyntaxKind::*,\n     T,\n };\n use ra_text_edit::TextEditBuilder;\n \n+use crate::ast_builder::tokens;\n+\n pub struct AstEditor<N: AstNode> {\n     original_ast: N,\n     ast: N,\n@@ -240,228 +240,3 @@ impl AstEditor<ast::FnDef> {\n         self.ast = self.replace_children(replace_range, to_insert.into_iter())\n     }\n }\n-\n-pub struct AstBuilder<N: AstNode> {\n-    _phantom: std::marker::PhantomData<N>,\n-}\n-\n-impl AstBuilder<ast::RecordField> {\n-    pub fn from_name(name: &Name) -> ast::RecordField {\n-        ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}: (), }} }}\", name))\n-    }\n-\n-    fn from_text(text: &str) -> ast::RecordField {\n-        ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}, }} }}\", text))\n-    }\n-\n-    pub fn from_pieces(name: &ast::NameRef, expr: Option<&ast::Expr>) -> ast::RecordField {\n-        match expr {\n-            Some(expr) => Self::from_text(&format!(\"{}: {}\", name.syntax(), expr.syntax())),\n-            None => Self::from_text(&name.syntax().to_string()),\n-        }\n-    }\n-}\n-\n-impl AstBuilder<ast::Block> {\n-    fn from_text(text: &str) -> ast::Block {\n-        ast_node_from_file_text(&format!(\"fn f() {}\", text))\n-    }\n-\n-    pub fn single_expr(e: &ast::Expr) -> ast::Block {\n-        Self::from_text(&format!(\"{{ {} }}\", e.syntax()))\n-    }\n-}\n-\n-impl AstBuilder<ast::Expr> {\n-    fn from_text(text: &str) -> ast::Expr {\n-        ast_node_from_file_text(&format!(\"const C: () = {};\", text))\n-    }\n-\n-    pub fn unit() -> ast::Expr {\n-        Self::from_text(\"()\")\n-    }\n-\n-    pub fn unimplemented() -> ast::Expr {\n-        Self::from_text(\"unimplemented!()\")\n-    }\n-}\n-\n-impl AstBuilder<ast::NameRef> {\n-    pub fn new(text: &str) -> ast::NameRef {\n-        ast_node_from_file_text(&format!(\"fn f() {{ {}; }}\", text))\n-    }\n-}\n-\n-impl AstBuilder<ast::Path> {\n-    fn from_text(text: &str) -> ast::Path {\n-        ast_node_from_file_text(text)\n-    }\n-\n-    pub fn from_name(name: ast::Name) -> ast::Path {\n-        let name = name.syntax().to_string();\n-        Self::from_text(name.as_str())\n-    }\n-\n-    pub fn from_pieces(enum_name: ast::Name, var_name: ast::Name) -> ast::Path {\n-        Self::from_text(&format!(\"{}::{}\", enum_name.syntax(), var_name.syntax()))\n-    }\n-}\n-\n-impl AstBuilder<ast::BindPat> {\n-    fn from_text(text: &str) -> ast::BindPat {\n-        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n-    }\n-\n-    pub fn from_name(name: &ast::Name) -> ast::BindPat {\n-        Self::from_text(name.text())\n-    }\n-}\n-\n-impl AstBuilder<ast::PlaceholderPat> {\n-    fn from_text(text: &str) -> ast::PlaceholderPat {\n-        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n-    }\n-\n-    pub fn placeholder() -> ast::PlaceholderPat {\n-        Self::from_text(\"_\")\n-    }\n-}\n-\n-impl AstBuilder<ast::TupleStructPat> {\n-    fn from_text(text: &str) -> ast::TupleStructPat {\n-        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n-    }\n-\n-    pub fn from_pieces(\n-        path: &ast::Path,\n-        pats: impl Iterator<Item = ast::Pat>,\n-    ) -> ast::TupleStructPat {\n-        let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n-        Self::from_text(&format!(\"{}({})\", path.syntax(), pats_str))\n-    }\n-}\n-\n-impl AstBuilder<ast::RecordPat> {\n-    fn from_text(text: &str) -> ast::RecordPat {\n-        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n-    }\n-\n-    pub fn from_pieces(path: &ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n-        let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n-        Self::from_text(&format!(\"{}{{ {} }}\", path.syntax(), pats_str))\n-    }\n-}\n-\n-impl AstBuilder<ast::PathPat> {\n-    fn from_text(text: &str) -> ast::PathPat {\n-        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n-    }\n-\n-    pub fn from_path(path: &ast::Path) -> ast::PathPat {\n-        let path_str = path.syntax().text().to_string();\n-        Self::from_text(path_str.as_str())\n-    }\n-}\n-\n-impl AstBuilder<ast::MatchArm> {\n-    fn from_text(text: &str) -> ast::MatchArm {\n-        ast_node_from_file_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n-    }\n-\n-    pub fn from_pieces(pats: impl Iterator<Item = ast::Pat>, expr: &ast::Expr) -> ast::MatchArm {\n-        let pats_str = pats.map(|p| p.syntax().to_string()).join(\" | \");\n-        Self::from_text(&format!(\"{} => {}\", pats_str, expr.syntax()))\n-    }\n-}\n-\n-impl AstBuilder<ast::MatchArmList> {\n-    fn from_text(text: &str) -> ast::MatchArmList {\n-        ast_node_from_file_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n-    }\n-\n-    pub fn from_arms(arms: impl Iterator<Item = ast::MatchArm>) -> ast::MatchArmList {\n-        let arms_str = arms.map(|arm| format!(\"\\n    {}\", arm.syntax())).join(\",\");\n-        Self::from_text(&format!(\"{},\\n\", arms_str))\n-    }\n-}\n-\n-impl AstBuilder<ast::WherePred> {\n-    fn from_text(text: &str) -> ast::WherePred {\n-        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n-    }\n-\n-    pub fn from_pieces(\n-        path: ast::Path,\n-        bounds: impl Iterator<Item = ast::TypeBound>,\n-    ) -> ast::WherePred {\n-        let bounds = bounds.map(|b| b.syntax().to_string()).collect::<Vec<_>>().join(\" + \");\n-        Self::from_text(&format!(\"{}: {}\", path.syntax(), bounds))\n-    }\n-}\n-\n-impl AstBuilder<ast::WhereClause> {\n-    fn from_text(text: &str) -> ast::WhereClause {\n-        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n-    }\n-\n-    pub fn from_predicates(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereClause {\n-        let preds = preds.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n-        Self::from_text(preds.as_str())\n-    }\n-}\n-\n-fn ast_node_from_file_text<N: AstNode>(text: &str) -> N {\n-    let parse = SourceFile::parse(text);\n-    let res = parse.tree().syntax().descendants().find_map(N::cast).unwrap();\n-    res\n-}\n-\n-mod tokens {\n-    use once_cell::sync::Lazy;\n-    use ra_syntax::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken, T};\n-\n-    static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n-\n-    pub(crate) fn comma() -> SyntaxToken {\n-        SOURCE_FILE\n-            .tree()\n-            .syntax()\n-            .descendants_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == T![,])\n-            .unwrap()\n-    }\n-\n-    pub(crate) fn single_space() -> SyntaxToken {\n-        SOURCE_FILE\n-            .tree()\n-            .syntax()\n-            .descendants_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \" \")\n-            .unwrap()\n-    }\n-\n-    #[allow(unused)]\n-    pub(crate) fn single_newline() -> SyntaxToken {\n-        SOURCE_FILE\n-            .tree()\n-            .syntax()\n-            .descendants_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\")\n-            .unwrap()\n-    }\n-\n-    pub(crate) struct WsBuilder(SourceFile);\n-\n-    impl WsBuilder {\n-        pub(crate) fn new(text: &str) -> WsBuilder {\n-            WsBuilder(SourceFile::parse(text).ok().unwrap())\n-        }\n-        pub(crate) fn ws(&self) -> SyntaxToken {\n-            self.0.syntax().first_child_or_token().unwrap().into_token().unwrap()\n-        }\n-    }\n-\n-}"}, {"sha": "71b01707693b568412d024812156ad7519b1672b", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 54, "deletions": 47, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -8,6 +8,7 @@\n mod assist_ctx;\n mod marks;\n pub mod ast_editor;\n+pub mod ast_builder;\n \n use itertools::Itertools;\n \n@@ -17,6 +18,7 @@ use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n+pub use crate::assists::auto_import::auto_import_text_edit;\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -46,7 +48,7 @@ where\n     H: HirDatabase + 'static,\n {\n     AssistCtx::with_ctx(db, range, false, |ctx| {\n-        all_assists()\n+        assists::all()\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n@@ -68,7 +70,7 @@ where\n     use std::cmp::Ordering;\n \n     AssistCtx::with_ctx(db, range, true, |ctx| {\n-        let mut a = all_assists()\n+        let mut a = assists::all()\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n@@ -86,51 +88,56 @@ where\n     })\n }\n \n-mod add_derive;\n-mod add_explicit_type;\n-mod add_impl;\n-mod flip_comma;\n-mod flip_binexpr;\n-mod change_visibility;\n-mod fill_match_arms;\n-mod merge_match_arms;\n-mod introduce_variable;\n-mod inline_local_variable;\n-mod raw_string;\n-mod replace_if_let_with_match;\n-mod split_import;\n-mod remove_dbg;\n-pub mod auto_import;\n-mod add_missing_impl_members;\n-mod move_guard;\n-mod move_bounds;\n-\n-fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n-    &[\n-        add_derive::add_derive,\n-        add_explicit_type::add_explicit_type,\n-        add_impl::add_impl,\n-        change_visibility::change_visibility,\n-        fill_match_arms::fill_match_arms,\n-        merge_match_arms::merge_match_arms,\n-        flip_comma::flip_comma,\n-        flip_binexpr::flip_binexpr,\n-        introduce_variable::introduce_variable,\n-        replace_if_let_with_match::replace_if_let_with_match,\n-        split_import::split_import,\n-        remove_dbg::remove_dbg,\n-        auto_import::auto_import,\n-        add_missing_impl_members::add_missing_impl_members,\n-        add_missing_impl_members::add_missing_default_members,\n-        inline_local_variable::inline_local_varialbe,\n-        move_guard::move_guard_to_arm_body,\n-        move_guard::move_arm_cond_to_match_guard,\n-        move_bounds::move_bounds_to_where_clause,\n-        raw_string::add_hash,\n-        raw_string::make_raw_string,\n-        raw_string::make_usual_string,\n-        raw_string::remove_hash,\n-    ]\n+mod assists {\n+    use crate::{Assist, AssistCtx};\n+    use hir::db::HirDatabase;\n+\n+    mod add_derive;\n+    mod add_explicit_type;\n+    mod add_impl;\n+    mod flip_comma;\n+    mod flip_binexpr;\n+    mod change_visibility;\n+    mod fill_match_arms;\n+    mod merge_match_arms;\n+    mod introduce_variable;\n+    mod inline_local_variable;\n+    mod raw_string;\n+    mod replace_if_let_with_match;\n+    mod split_import;\n+    mod remove_dbg;\n+    pub(crate) mod auto_import;\n+    mod add_missing_impl_members;\n+    mod move_guard;\n+    mod move_bounds;\n+\n+    pub(crate) fn all<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n+        &[\n+            add_derive::add_derive,\n+            add_explicit_type::add_explicit_type,\n+            add_impl::add_impl,\n+            change_visibility::change_visibility,\n+            fill_match_arms::fill_match_arms,\n+            merge_match_arms::merge_match_arms,\n+            flip_comma::flip_comma,\n+            flip_binexpr::flip_binexpr,\n+            introduce_variable::introduce_variable,\n+            replace_if_let_with_match::replace_if_let_with_match,\n+            split_import::split_import,\n+            remove_dbg::remove_dbg,\n+            auto_import::auto_import,\n+            add_missing_impl_members::add_missing_impl_members,\n+            add_missing_impl_members::add_missing_default_members,\n+            inline_local_variable::inline_local_varialbe,\n+            move_guard::move_guard_to_arm_body,\n+            move_guard::move_arm_cond_to_match_guard,\n+            move_bounds::move_bounds_to_where_clause,\n+            raw_string::add_hash,\n+            raw_string::make_raw_string,\n+            raw_string::make_usual_string,\n+            raw_string::remove_hash,\n+        ]\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "cb70a1f212324efd087a00c7b50fe0914ae2e5f9", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -1,4 +1,4 @@\n-use ra_assists::auto_import;\n+use ra_assists::auto_import_text_edit;\n use ra_syntax::{ast, AstNode, SmolStr};\n use ra_text_edit::TextEditBuilder;\n use rustc_hash::FxHashMap;\n@@ -23,7 +23,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n             let edit = {\n                 let mut builder = TextEditBuilder::default();\n                 builder.replace(ctx.source_range(), name.to_string());\n-                auto_import::auto_import_text_edit(\n+                auto_import_text_edit(\n                     &ctx.token.parent(),\n                     &ctx.token.parent(),\n                     &path,"}, {"sha": "30b95a21506d11b0df41202ca462c86ded3882d7", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f92309dbc00a0f88563030921706f205c01f452/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=8f92309dbc00a0f88563030921706f205c01f452", "patch": "@@ -2,7 +2,7 @@ use std::cell::RefCell;\n \n use hir::diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink};\n use itertools::Itertools;\n-use ra_assists::ast_editor::{AstBuilder, AstEditor};\n+use ra_assists::{ast_builder::AstBuilder, ast_editor::AstEditor};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n use ra_syntax::{"}]}