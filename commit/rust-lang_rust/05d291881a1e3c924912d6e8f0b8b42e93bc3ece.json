{"sha": "05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDI5MTg4MWExZTNjOTI0OTEyZDZlOGYwYjhiNDJlOTNiYzNlY2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-19T21:39:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-19T21:39:36Z"}, "message": "Merge #10292\n\n10292: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "5bef3ffc1b1a03d12d143f2c8553e8c864baf403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bef3ffc1b1a03d12d143f2c8553e8c864baf403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhR64YCRBK7hj4Ov3rIwAAk8wIACOwvHcZQ7TfoCcp31Qyz6pI\nCkF4vttMmrM21ioMnC9LnfasBmcU82gLP3h8IroXON89/f031fSh6EQ1Q7604RgQ\nE8SgYsRrOxkyaD/WmrPMCHodKYUp+UKriZO/lqDy+twpjFJ5DoRPk1S/vWemXRDC\ndtWJ9u4mMrzhFFstIcz39D7WT7BqQQMnS4XZpBZFDX5IEC2O0jfKXN8d8uqqnAt3\nHlgTL6P04rBE700AUnr7Eb9CUOQUPkOzILM964zPQo0UxmPsbiRB3ng+GTPQ49KW\nW5uFMaq/aygyDHnRf7LxAMeqN/1iweZsfsnshypNBwHaMyNzQe641tCbuUIw9v0=\n=lCim\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bef3ffc1b1a03d12d143f2c8553e8c864baf403\nparent 06ea89d3de66538a1d2352eb23ca57c03aa51713\nparent 9c39363adabe0029815a709d9d6533c5c4f15023\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632087576 +0000\ncommitter GitHub <noreply@github.com> 1632087576 +0000\n\nMerge #10292\n\n10292: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "html_url": "https://github.com/rust-lang/rust/commit/05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ea89d3de66538a1d2352eb23ca57c03aa51713", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ea89d3de66538a1d2352eb23ca57c03aa51713", "html_url": "https://github.com/rust-lang/rust/commit/06ea89d3de66538a1d2352eb23ca57c03aa51713"}, {"sha": "9c39363adabe0029815a709d9d6533c5c4f15023", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c39363adabe0029815a709d9d6533c5c4f15023", "html_url": "https://github.com/rust-lang/rust/commit/9c39363adabe0029815a709d9d6533c5c4f15023"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "900032b4cba05cc00d899f8ae7d540b778010de7", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -218,7 +218,7 @@ impl ChangeFixture {\n             );\n             roots.push(SourceRoot::new_library(fs));\n \n-            change.change_file(proc_lib_file, Some(Arc::new(String::from(source))));\n+            change.change_file(proc_lib_file, Some(Arc::new(source)));\n \n             let all_crates = crate_graph.crates_in_topological_order();\n \n@@ -275,7 +275,7 @@ pub fn input_replace(attr: TokenStream, _item: TokenStream) -> TokenStream {\n             expander: Arc::new(AttributeInputReplaceProcMacroExpander),\n         },\n     ])\n-    .filter(|pm| proc_macros.iter().any(|name| name == &pm.name))\n+    .filter(|pm| proc_macros.iter().any(|name| name == pm.name))\n     .collect();\n     (proc_macros, source.into())\n }"}, {"sha": "3734eb1013106e5db1d5f65a3210c17f8d1de7f8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -307,17 +307,12 @@ impl<'a> TyLoweringContext<'a> {\n                     let mut expander = self.expander.borrow_mut();\n                     if expander.is_some() {\n                         (Some(expander), false)\n+                    } else if let Some(module_id) = self.resolver.module() {\n+                        *expander =\n+                            Some(Expander::new(self.db.upcast(), macro_call.file_id, module_id));\n+                        (Some(expander), true)\n                     } else {\n-                        if let Some(module_id) = self.resolver.module() {\n-                            *expander = Some(Expander::new(\n-                                self.db.upcast(),\n-                                macro_call.file_id,\n-                                module_id,\n-                            ));\n-                            (Some(expander), true)\n-                        } else {\n-                            (None, false)\n-                        }\n+                        (None, false)\n                     }\n                 };\n                 let ty = if let Some(mut expander) = expander {"}, {"sha": "2fe1f5b616ed91ecc4fe8ed0328f4d733a60f4b1", "filename": "crates/ide_ssr/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Flib.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -172,7 +172,7 @@ impl<'db> MatchFinder<'db> {\n         for m in self.matches().matches {\n             matches_by_file\n                 .entry(m.range.file_id)\n-                .or_insert_with(|| SsrMatches::default())\n+                .or_insert_with(SsrMatches::default)\n                 .matches\n                 .push(m);\n         }\n@@ -331,7 +331,7 @@ impl SsrMatches {\n     fn flatten_into(self, out: &mut SsrMatches) {\n         for mut m in self.matches {\n             for p in m.placeholder_values.values_mut() {\n-                std::mem::replace(&mut p.inner_matches, SsrMatches::default()).flatten_into(out);\n+                std::mem::take(&mut p.inner_matches).flatten_into(out);\n             }\n             out.matches.push(m);\n         }"}, {"sha": "68129472185cf207d009ce4ff1a77d4acab18379", "filename": "crates/ide_ssr/src/matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fmatching.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -462,7 +462,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n                 let mut last_matched_token = child;\n                 // Read code tokens util we reach one equal to the next token from our pattern\n                 // or we reach the end of the token tree.\n-                while let Some(next) = children.next() {\n+                for next in &mut children {\n                     match &next {\n                         SyntaxElement::Token(t) => {\n                             if Some(t.to_string()) == next_pattern_token {\n@@ -763,7 +763,7 @@ impl Iterator for PatternIterator {\n     type Item = SyntaxElement;\n \n     fn next(&mut self) -> Option<SyntaxElement> {\n-        while let Some(element) = self.iter.next() {\n+        for element in &mut self.iter {\n             if !element.kind().is_trivia() {\n                 return Some(element);\n             }"}, {"sha": "e734125ec8dbc58cb913277e81fae883c99469d6", "filename": "crates/ide_ssr/src/nester.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fnester.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fnester.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fnester.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -65,7 +65,7 @@ fn try_add_sub_match(m: Match, existing: &mut Match, sema: &hir::Semantics<ide_d\n             // will have 0 and a few will have 1. More than that should hopefully be\n             // exceptional.\n             let mut collector = MatchCollector::default();\n-            for m in std::mem::replace(&mut p.inner_matches.matches, Vec::new()) {\n+            for m in std::mem::take(&mut p.inner_matches.matches) {\n                 collector.matches_by_node.insert(m.matched_node.clone(), m);\n             }\n             collector.add_match(m, sema);"}, {"sha": "df20ab375d2299b42fd38cfa2390b94b8ea0aee4", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -243,10 +243,10 @@ impl<'db> ResolutionScope<'db> {\n         use syntax::ast::AstNode;\n         if let Some(path) = ast::Path::cast(path.clone()) {\n             if let Some(qualifier) = path.qualifier() {\n-                if let Some(resolved_qualifier) = self.resolve_path(&qualifier) {\n-                    if let hir::PathResolution::Def(hir::ModuleDef::Adt(adt)) = resolved_qualifier {\n-                        return Some(adt.ty(self.scope.db));\n-                    }\n+                if let Some(hir::PathResolution::Def(hir::ModuleDef::Adt(adt))) =\n+                    self.resolve_path(&qualifier)\n+                {\n+                    return Some(adt.ty(self.scope.db));\n                 }\n             }\n         }"}, {"sha": "42ce85eebe62e6f20fe98a776dfbe32691de568e", "filename": "crates/ide_ssr/src/search.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fide_ssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fsearch.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -80,7 +80,7 @@ impl<'db> MatchFinder<'db> {\n         if let Some(path) =\n             self.sema.find_node_at_offset_with_descend::<ast::Path>(file.syntax(), offset)\n         {\n-            self.sema.ancestors_with_macros(path.syntax().clone()).skip(depth).next()\n+            self.sema.ancestors_with_macros(path.syntax().clone()).nth(depth)\n         } else if let Some(path) =\n             self.sema.find_node_at_offset_with_descend::<ast::MethodCallExpr>(file.syntax(), offset)\n         {\n@@ -96,8 +96,7 @@ impl<'db> MatchFinder<'db> {\n             }\n             self.sema\n                 .ancestors_with_macros(path.syntax().clone())\n-                .skip(depth - PATH_DEPTH_IN_CALL_EXPR)\n-                .next()\n+                .nth(depth - PATH_DEPTH_IN_CALL_EXPR)\n         } else {\n             None\n         }"}, {"sha": "3201394f7f647e76761cc88e028ba17cb194103b", "filename": "crates/proc_macro_api/src/msg/flat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -246,7 +246,7 @@ impl<'a> Writer<'a> {\n \n     fn enqueue(&mut self, subtree: &'a tt::Subtree) -> u32 {\n         let idx = self.subtree.len();\n-        let delimiter_id = subtree.delimiter.map(|it| it.id).unwrap_or(TokenId::unspecified());\n+        let delimiter_id = subtree.delimiter.map(|it| it.id).unwrap_or_else(TokenId::unspecified);\n         let delimiter_kind = subtree.delimiter.map(|it| it.kind);\n         self.subtree.push(SubtreeRepr { id: delimiter_id, kind: delimiter_kind, tt: [!0, !0] });\n         self.work.push_back((idx, subtree));\n@@ -320,7 +320,7 @@ impl Reader {\n                     })\n                     .collect(),\n             };\n-            res[i] = Some(s.into())\n+            res[i] = Some(s)\n         }\n \n         res[0].take().unwrap()"}, {"sha": "8d1c6f5d26ee7f8d63cbcaef40fd44f003ff1927", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d291881a1e3c924912d6e8f0b8b42e93bc3ece/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "patch": "@@ -211,13 +211,10 @@ fn validate_numeric_name(name_ref: Option<ast::NameRef>, errors: &mut Vec<Syntax\n }\n \n fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n-    if vis.in_token().is_none() {\n-        if vis.path().and_then(|p| p.as_single_name_ref()).and_then(|n| n.ident_token()).is_some() {\n-            errors.push(SyntaxError::new(\n-                \"incorrect visibility restriction\",\n-                vis.syntax.text_range(),\n-            ));\n-        }\n+    let path_without_in_token = vis.in_token().is_none()\n+        && vis.path().and_then(|p| p.as_single_name_ref()).and_then(|n| n.ident_token()).is_some();\n+    if path_without_in_token {\n+        errors.push(SyntaxError::new(\"incorrect visibility restriction\", vis.syntax.text_range()));\n     }\n     let parent = match vis.syntax().parent() {\n         Some(it) => it,"}]}