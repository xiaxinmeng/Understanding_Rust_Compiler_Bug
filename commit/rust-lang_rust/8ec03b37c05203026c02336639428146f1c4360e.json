{"sha": "8ec03b37c05203026c02336639428146f1c4360e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzAzYjM3YzA1MjAzMDI2YzAyMzM2NjM5NDI4MTQ2ZjFjNDM2MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-31T20:37:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-31T20:37:17Z"}, "message": "auto merge of #11155 : SiegeLord/rust/early_deps, r=pcwalton\n\nThe `--dep-info` command line option allows a nice way to generate make-style dependencies, but it currently does so alongside building of the output binary. This isn't a problem for make, as it mixes dependency graph generation and actual building, but it is problematic for other tools (e.g. CMake) which keep them separate.\r\n\r\nTo play more nicely with those tools, I've moved the --dep-info output from phase 6 (linking) up to after phase 2 (expansion of macros). Also, since there was no prior option to do so, I added a command line switch (`--no-analysis`) to stop compilation just before phase 3 (type-checking) which speeds this up even further.\r\n\r\nHere's the beginning of a CMake function which is enabled by this change:\r\n\r\n~~~cmake\r\nfunction(get_rust_deps root_file out_var)\r\n\texecute_process(COMMAND rustc ${RUSTC_FLAGS} --no-analysis --dep-info \"${CMAKE_BINARY_DIR}/.deps\" \"${root_file}\")\r\n\t\r\n\t# Read and parse the dependency information\r\n\tfile(READ \"${CMAKE_BINARY_DIR}/.deps\" crate_deps)\r\n\tfile(REMOVE \"${CMAKE_BINARY_DIR}/.deps\")\r\n\t# parsing follows...\r\n~~~", "tree": {"sha": "62569d7154f52965abbee4426cf816712e88e785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62569d7154f52965abbee4426cf816712e88e785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec03b37c05203026c02336639428146f1c4360e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec03b37c05203026c02336639428146f1c4360e", "html_url": "https://github.com/rust-lang/rust/commit/8ec03b37c05203026c02336639428146f1c4360e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec03b37c05203026c02336639428146f1c4360e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff7b283731b795930d1e6782ae1639c83595e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff7b283731b795930d1e6782ae1639c83595e91", "html_url": "https://github.com/rust-lang/rust/commit/5ff7b283731b795930d1e6782ae1639c83595e91"}, {"sha": "cbe8c61fed3ccff0a34a9ff79105ad5b7a7de5b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe8c61fed3ccff0a34a9ff79105ad5b7a7de5b3", "html_url": "https://github.com/rust-lang/rust/commit/cbe8c61fed3ccff0a34a9ff79105ad5b7a7de5b3"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "b0fa22f817288f7612b057ab1d08f09ce2db043e", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 59, "deletions": 30, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8ec03b37c05203026c02336639428146f1c4360e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec03b37c05203026c02336639428146f1c4360e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=8ec03b37c05203026c02336639428146f1c4360e", "patch": "@@ -392,14 +392,56 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n /// This should produce either a finished executable or library.\n pub fn phase_6_link_output(sess: Session,\n                            trans: &CrateTranslation,\n-                           input: &input,\n                            outputs: &OutputFilenames) {\n-    let outputs = time(sess.time_passes(), \"linking\", (), |_|\n+    time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n                            trans,\n                            &outputs.obj_filename,\n                            &outputs.out_filename,\n                            &trans.link));\n+}\n+\n+pub fn stop_after_phase_3(sess: Session) -> bool {\n+   if sess.opts.no_trans {\n+        debug!(\"invoked with --no-trans, returning early from compile_input\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+pub fn stop_after_phase_1(sess: Session) -> bool {\n+    if sess.opts.parse_only {\n+        debug!(\"invoked with --parse-only, returning early from compile_input\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+pub fn stop_after_phase_2(sess: Session) -> bool {\n+    if sess.opts.no_analysis {\n+        debug!(\"invoked with --no-analysis, returning early from compile_input\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+pub fn stop_after_phase_5(sess: Session) -> bool {\n+    if sess.opts.output_type != link::output_type_exe {\n+        debug!(\"not building executable, returning early from compile_input\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+fn write_out_deps(sess: Session, input: &input, outputs: &OutputFilenames, crate: &ast::Crate)\n+{\n+    let lm = link::build_link_meta(sess, crate.attrs, &outputs.obj_filename,\n+                                       &mut ::util::sha2::Sha256::new());\n+\n+    let sess_outputs = sess.outputs.borrow();\n+    let out_filenames = sess_outputs.get().iter()\n+        .map(|&output| link::filename_for_input(&sess, output, &lm, &outputs.out_filename))\n+        .to_owned_vec();\n \n     // Write out dependency rules to the dep-info file if requested with --dep-info\n     let deps_filename = match sess.opts.write_dependency_info {\n@@ -409,7 +451,7 @@ pub fn phase_6_link_output(sess: Session,\n         (true, None) => match *input {\n             file_input(ref input_path) => {\n                 let filestem = input_path.filestem().expect(\"input file must have stem\");\n-                let filename = outputs[0].dir_path().join(filestem).with_extension(\"d\");\n+                let filename = out_filenames[0].dir_path().join(filestem).with_extension(\"d\");\n                 filename\n             },\n             str_input(..) => {\n@@ -419,40 +461,17 @@ pub fn phase_6_link_output(sess: Session,\n         },\n         _ => return,\n     };\n+\n     // Build a list of files used to compile the output and\n     // write Makefile-compatible dependency rules\n     let files: ~[@str] = sess.codemap.files.iter()\n         .filter_map(|fmap| if fmap.is_real_file() { Some(fmap.name) } else { None })\n         .collect();\n     let mut file = io::File::create(&deps_filename);\n-    for output in outputs.iter() {\n+    for path in out_filenames.iter() {\n         write!(&mut file as &mut Writer,\n-               \"{}: {}\\n\\n\", output.display(), files.connect(\" \"));\n-    }\n-}\n-\n-pub fn stop_after_phase_3(sess: Session) -> bool {\n-   if sess.opts.no_trans {\n-        debug!(\"invoked with --no-trans, returning early from compile_input\");\n-        return true;\n-    }\n-    return false;\n-}\n-\n-pub fn stop_after_phase_1(sess: Session) -> bool {\n-    if sess.opts.parse_only {\n-        debug!(\"invoked with --parse-only, returning early from compile_input\");\n-        return true;\n+               \"{}: {}\\n\\n\", path.display(), files.connect(\" \"));\n     }\n-    return false;\n-}\n-\n-pub fn stop_after_phase_5(sess: Session) -> bool {\n-    if sess.opts.output_type != link::output_type_exe {\n-        debug!(\"not building executable, returning early from compile_input\");\n-        return true;\n-    }\n-    return false;\n }\n \n pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n@@ -468,6 +487,11 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n         };\n         let outputs = build_output_filenames(input, outdir, output,\n                                              expanded_crate.attrs, sess);\n+\n+        write_out_deps(sess, input, outputs, &expanded_crate);\n+\n+        if stop_after_phase_2(sess) { return; }\n+\n         let analysis = phase_3_run_analysis_passes(sess, &expanded_crate);\n         if stop_after_phase_3(sess) { return; }\n         let trans = phase_4_translate_to_llvm(sess, expanded_crate,\n@@ -476,7 +500,7 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n     };\n     phase_5_run_llvm_passes(sess, &trans, outputs);\n     if stop_after_phase_5(sess) { return; }\n-    phase_6_link_output(sess, &trans, input, outputs);\n+    phase_6_link_output(sess, &trans, outputs);\n }\n \n struct IdentifiedAnnotation {\n@@ -683,6 +707,7 @@ pub fn build_session_options(binary: @str,\n \n     let parse_only = matches.opt_present(\"parse-only\");\n     let no_trans = matches.opt_present(\"no-trans\");\n+    let no_analysis = matches.opt_present(\"no-analysis\");\n \n     let lint_levels = [lint::allow, lint::warn,\n                        lint::deny, lint::forbid];\n@@ -836,6 +861,7 @@ pub fn build_session_options(binary: @str,\n         test: test,\n         parse_only: parse_only,\n         no_trans: no_trans,\n+        no_analysis: no_analysis,\n         debugging_opts: debugging_opts,\n         android_cross_path: android_cross_path,\n         write_dependency_info: write_dependency_info,\n@@ -929,6 +955,9 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n   optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n   optflag(\"\", \"no-trans\",\n                         \"Run all passes except translation; no output\"),\n+  optflag(\"\", \"no-analysis\",\n+                        \"Parse and expand the output, but run no analysis or produce \\\n+                        output\"),\n   optflag(\"O\", \"\",    \"Equivalent to --opt-level=2\"),\n   optopt(\"o\", \"\",     \"Write output to <filename>\", \"FILENAME\"),\n   optopt(\"\", \"opt-level\","}, {"sha": "63ccc91cd556d7d1222aa17134e5c2964444c4a0", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec03b37c05203026c02336639428146f1c4360e/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec03b37c05203026c02336639428146f1c4360e/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=8ec03b37c05203026c02336639428146f1c4360e", "patch": "@@ -167,6 +167,7 @@ pub struct options {\n     test: bool,\n     parse_only: bool,\n     no_trans: bool,\n+    no_analysis: bool,\n     debugging_opts: uint,\n     android_cross_path: Option<~str>,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n@@ -398,6 +399,7 @@ pub fn basic_options() -> @options {\n         test: false,\n         parse_only: false,\n         no_trans: false,\n+        no_analysis: false,\n         debugging_opts: 0u,\n         android_cross_path: None,\n         write_dependency_info: (false, None),"}, {"sha": "af940e34789c7c7b118205a884de17de781405ba", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec03b37c05203026c02336639428146f1c4360e/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec03b37c05203026c02336639428146f1c4360e/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=8ec03b37c05203026c02336639428146f1c4360e", "patch": "@@ -405,7 +405,7 @@ pub fn compile_crate_from_input(input: &Path,\n     // -c\n     if driver::stop_after_phase_5(sess)\n         || stop_before == Link || stop_before == Assemble { return Some(outputs.out_filename); }\n-    driver::phase_6_link_output(sess, &translation, &file_input, outputs);\n+    driver::phase_6_link_output(sess, &translation, outputs);\n \n     // Register dependency on the source file\n     // FIXME (#9639): This needs to handle non-utf8 paths"}]}