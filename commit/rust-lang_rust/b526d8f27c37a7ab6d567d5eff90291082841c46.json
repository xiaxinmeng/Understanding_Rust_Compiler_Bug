{"sha": "b526d8f27c37a7ab6d567d5eff90291082841c46", "node_id": "C_kwDOAAsO6NoAKGI1MjZkOGYyN2MzN2E3YWI2ZDU2N2Q1ZWZmOTAyOTEwODI4NDFjNDY", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-03-13T23:13:57Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-03-13T23:13:57Z"}, "message": "rustdoc-json-types: ty -> type_\n\nFixes #94889", "tree": {"sha": "a39256a19c30b1752152c81a78ffe3f02f0b6901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39256a19c30b1752152c81a78ffe3f02f0b6901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b526d8f27c37a7ab6d567d5eff90291082841c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b526d8f27c37a7ab6d567d5eff90291082841c46", "html_url": "https://github.com/rust-lang/rust/commit/b526d8f27c37a7ab6d567d5eff90291082841c46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b526d8f27c37a7ab6d567d5eff90291082841c46/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b0325c68421b00c6c91055ac330bd5ffe1ea6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b0325c68421b00c6c91055ac330bd5ffe1ea6b", "html_url": "https://github.com/rust-lang/rust/commit/21b0325c68421b00c6c91055ac330bd5ffe1ea6b"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "3a958a06ec2519f589229e160c8ca54879f9bfe6", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=b526d8f27c37a7ab6d567d5eff90291082841c46", "patch": "@@ -31,7 +31,7 @@ def check_generics(generics):\n     for where_predicate in generics[\"where_predicates\"]:\n         if \"bound_predicate\" in where_predicate:\n             pred = where_predicate[\"bound_predicate\"]\n-            check_type(pred[\"ty\"])\n+            check_type(pred[\"type\"])\n             for bound in pred[\"bounds\"]:\n                 check_generic_bound(bound)\n         elif \"region_predicate\" in where_predicate:"}, {"sha": "dbd71c437b90327bb1928fa5e3df48e1d6ba0fb2", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=b526d8f27c37a7ab6d567d5eff90291082841c46", "patch": "@@ -345,9 +345,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n                 synthetic,\n             },\n-            Const { did: _, ty, default } => {\n-                GenericParamDefKind::Const { ty: (*ty).into_tcx(tcx), default: default.map(|x| *x) }\n-            }\n+            Const { did: _, ty, default } => GenericParamDefKind::Const {\n+                type_: (*ty).into_tcx(tcx),\n+                default: default.map(|x| *x),\n+            },\n         }\n     }\n }\n@@ -357,7 +358,7 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n         use clean::WherePredicate::*;\n         match predicate {\n             BoundPredicate { ty, bounds, .. } => WherePredicate::BoundPredicate {\n-                ty: ty.into_tcx(tcx),\n+                type_: ty.into_tcx(tcx),\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 // FIXME: add `bound_params` to rustdoc-json-params?\n             },"}, {"sha": "11bcd52205871a6fb1289ef986492e71ea239cb4", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=b526d8f27c37a7ab6d567d5eff90291082841c46", "patch": "@@ -378,17 +378,28 @@ pub enum GenericParamDefKind {\n         synthetic: bool,\n     },\n     Const {\n-        ty: Type,\n+        #[serde(rename = \"type\")]\n+        type_: Type,\n         default: Option<String>,\n     },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n #[serde(rename_all = \"snake_case\")]\n pub enum WherePredicate {\n-    BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n-    RegionPredicate { lifetime: String, bounds: Vec<GenericBound> },\n-    EqPredicate { lhs: Type, rhs: Term },\n+    BoundPredicate {\n+        #[serde(rename = \"type\")]\n+        type_: Type,\n+        bounds: Vec<GenericBound>,\n+    },\n+    RegionPredicate {\n+        lifetime: String,\n+        bounds: Vec<GenericBound>,\n+    },\n+    EqPredicate {\n+        lhs: Type,\n+        rhs: Term,\n+    },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "368ff8d8da08adbe9e14853a42f855df29340612", "filename": "src/test/rustdoc-json/generic-associated-types/gats.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b526d8f27c37a7ab6d567d5eff90291082841c46/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs?ref=b526d8f27c37a7ab6d567d5eff90291082841c46", "patch": "@@ -13,10 +13,12 @@ pub trait LendingIterator {\n     // @count - \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*]\" 1\n     // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*].name\" \\\"\\'a\\\"\n     // @count - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*]\" 1\n-    // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.ty.inner\" \\\"Self\\\"\n+    // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.type.inner\" \\\"Self\\\"\n     // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.bounds[*].outlives\" \\\"\\'a\\\"\n     // @count - \"$.index[*][?(@.name=='LendingItem')].inner.bounds[*]\" 1\n-    type LendingItem<'a>: Display where Self: 'a;\n+    type LendingItem<'a>: Display\n+    where\n+        Self: 'a;\n \n     // @is - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n     // @count - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 1"}]}