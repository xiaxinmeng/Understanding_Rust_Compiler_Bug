{"sha": "13e889986d3f37014b4f8c3e892457831cb5d03b", "node_id": "C_kwDOAAsO6NoAKDEzZTg4OTk4NmQzZjM3MDE0YjRmOGMzZTg5MjQ1NzgzMWNiNWQwM2I", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2022-03-15T01:00:08Z"}, "committer": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2022-03-15T01:00:08Z"}, "message": "fix typos", "tree": {"sha": "748660a2ff4ace5f16294935fed7aee3b05fe5fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/748660a2ff4ace5f16294935fed7aee3b05fe5fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e889986d3f37014b4f8c3e892457831cb5d03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e889986d3f37014b4f8c3e892457831cb5d03b", "html_url": "https://github.com/rust-lang/rust/commit/13e889986d3f37014b4f8c3e892457831cb5d03b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e889986d3f37014b4f8c3e892457831cb5d03b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285fa7ecd05dcbfdaf2faaf20400f5f92b39b3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/285fa7ecd05dcbfdaf2faaf20400f5f92b39b3c6", "html_url": "https://github.com/rust-lang/rust/commit/285fa7ecd05dcbfdaf2faaf20400f5f92b39b3c6"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "47de4c9be26feb1b726969f6ec6948a7587f90db", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -328,7 +328,7 @@ impl UnsafeCode {\n         cx.struct_span_lint(UNSAFE_CODE, span, decorate);\n     }\n \n-    fn report_overriden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n+    fn report_overridden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n         self.report_unsafe(cx, span, |lint| {\n             lint.build(msg)\n                 .note(\n@@ -380,14 +380,14 @@ impl EarlyLintPass for UnsafeCode {\n \n             ast::ItemKind::Fn(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a `no_mangle` function\",\n                     );\n                 }\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a function with `export_name`\",\n@@ -397,14 +397,14 @@ impl EarlyLintPass for UnsafeCode {\n \n             ast::ItemKind::Static(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a `no_mangle` static\",\n                     );\n                 }\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                    self.report_overriden_symbol_name(\n+                    self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n                         \"declaration of a static with `export_name`\",\n@@ -419,14 +419,14 @@ impl EarlyLintPass for UnsafeCode {\n     fn check_impl_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         if let ast::AssocItemKind::Fn(..) = it.kind {\n             if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n-                self.report_overriden_symbol_name(\n+                self.report_overridden_symbol_name(\n                     cx,\n                     attr.span,\n                     \"declaration of a `no_mangle` method\",\n                 );\n             }\n             if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n-                self.report_overriden_symbol_name(\n+                self.report_overridden_symbol_name(\n                     cx,\n                     attr.span,\n                     \"declaration of a method with `export_name`\","}, {"sha": "1a7cbb61ae30693bfa5c8387138d6391dfa841cb", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -116,7 +116,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 continue\n             };\n             for id in ids {\n-                // ForceWarn and Forbid cannot be overriden\n+                // ForceWarn and Forbid cannot be overridden\n                 if let Some((Level::ForceWarn | Level::Forbid, _)) = self.current_specs().get(&id) {\n                     continue;\n                 }\n@@ -137,7 +137,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             self.sets.get_lint_level(id.lint, self.cur, Some(self.current_specs()), &self.sess);\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a\n-        // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.\n+        // `#[forbid(..)]` attribute present, as that is overridden by `--cap-lints`.\n         //\n         // This means that this only errors if we're truly lowering the lint\n         // level from forbid."}, {"sha": "dbebed67c2bd1c6d4759e328c0814ddb7a9363ca", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -50,7 +50,7 @@ fn bb_to_graph_node(block: BasicBlock, body: &Body<'_>, dark_mode: bool) -> Node\n     let style = NodeStyle { title_bg: Some(bgcolor.to_owned()), ..Default::default() };\n     let mut stmts: Vec<String> = data.statements.iter().map(|x| format!(\"{:?}\", x)).collect();\n \n-    // add the terminator to the stmts, gsgdt can print it out seperately\n+    // add the terminator to the stmts, gsgdt can print it out separately\n     let mut terminator_head = String::new();\n     data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n     stmts.push(terminator_head);"}, {"sha": "00d1370625f9c04786024081c700b1584169e016", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -250,7 +250,7 @@ pub struct BorrowCheckResult<'tcx> {\n \n /// The result of the `mir_const_qualif` query.\n ///\n-/// Each field (except `error_occured`) corresponds to an implementer of the `Qualif` trait in\n+/// Each field (except `error_occurred`) corresponds to an implementer of the `Qualif` trait in\n /// `rustc_const_eval/src/transform/check_consts/qualifs.rs`. See that file for more information on each\n /// `Qualif`.\n #[derive(Clone, Copy, Debug, Default, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "a96bb4e03d97ae81b5193f00f8cb5d24696f2f43", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -608,7 +608,7 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n \n     let (thir, expr) = tcx.thir_body(def);\n     let thir = &thir.borrow();\n-    // If `thir` is empty, a type error occured, skip this body.\n+    // If `thir` is empty, a type error occurred, skip this body.\n     if thir.exprs.is_empty() {\n         return;\n     }"}, {"sha": "a6506dbad1600fc1ed60f734614f4fbbac114913", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -394,7 +394,7 @@ mod desc {\n     pub const parse_linker_plugin_lto: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), or the path to the linker plugin\";\n     pub const parse_location_detail: &str =\n-        \"comma seperated list of location details to track: `file`, `line`, or `column`\";\n+        \"comma separated list of location details to track: `file`, `line`, or `column`\";\n     pub const parse_switch_with_opt_path: &str =\n         \"an optional path to the profiling data output directory\";\n     pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n@@ -1283,7 +1283,7 @@ options! {\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n         \"generate JSON tracing data file from LLVM data (default: no)\"),\n     location_detail: LocationDetail = (LocationDetail::all(), parse_location_detail, [TRACKED],\n-        \"comma seperated list of location details to be tracked when using caller_location \\\n+        \"comma separated list of location details to be tracked when using caller_location \\\n         valid options are `file`, `line`, and `column` (default: all)\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),"}, {"sha": "707c609d8bfb85afee7cc5f2040b870826a38a3a", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -69,7 +69,7 @@ pub struct SymbolGallery {\n \n impl SymbolGallery {\n     /// Insert a symbol and its span into symbol gallery.\n-    /// If the symbol has occurred before, ignore the new occurance.\n+    /// If the symbol has occurred before, ignore the new occurrance.\n     pub fn insert(&self, symbol: Symbol, span: Span) {\n         self.symbols.lock().entry(symbol).or_insert(span);\n     }"}, {"sha": "55201d17f714d72c2349fa6adfe5ac74d7b415c8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         (true, Some(None)) => {\n                                             Some(format!(\"{cannot_do_this} in const contexts\"))\n                                         }\n-                                        // overriden post message\n+                                        // overridden post message\n                                         (true, Some(Some(post_message))) => {\n                                             Some(format!(\"{cannot_do_this}{post_message}\"))\n                                         }"}, {"sha": "00a2a0aaa14ce4f8023047fb9f01b38d1760e23f", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -609,7 +609,7 @@ fn assert_send() {\n \n #[allow(dead_code)]\n // Check that the member-like functions conditionally provided by #[derive()]\n-// are not overriden by genuine member functions with a different signature.\n+// are not overridden by genuine member functions with a different signature.\n fn assert_derives() {\n     fn hash<T: Hash, H: Hasher>(v: BTreeSet<T>, state: &mut H) {\n         v.hash(state);"}, {"sha": "7846c6db898a81087671a3697f36c0bacadfa6c2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -1795,7 +1795,7 @@ impl Rustflags {\n     }\n \n     /// By default, cargo will pick up on various variables in the environment. However, bootstrap\n-    /// reuses those variables to pass additional flags to rustdoc, so by default they get overriden.\n+    /// reuses those variables to pass additional flags to rustdoc, so by default they get overridden.\n     /// Explicitly add back any previous value in the environment.\n     ///\n     /// `prefix` is usually `RUSTFLAGS` or `RUSTDOCFLAGS`."}, {"sha": "3d8a62d50e06da0288373f4aecddb1fac433de8f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -948,7 +948,7 @@ fn resolve_associated_trait_item<'a>(\n ///\n /// This function returns `None` if no associated item was found in the impl.\n /// This can occur when the trait associated item has a default value that is\n-/// not overriden in the impl.\n+/// not overridden in the impl.\n ///\n /// This is just a wrapper around [`TyCtxt::impl_item_implementor_ids()`] and\n /// [`TyCtxt::associated_item()`] (with some helpful logging added)."}, {"sha": "e793ee75fd2e0a5642a5bb068ee76b6b0bab0e95", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.items.push((item, renamed))\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n-                // `#[macro_export] macro_rules!` items are handled seperately in `visit()`,\n+                // `#[macro_export] macro_rules!` items are handled separately in `visit()`,\n                 // above, since they need to be documented at the module top level. Accordingly,\n                 // we only want to handle macros if one of three conditions holds:\n                 //"}, {"sha": "ec27a9f6ba31c499670d2e643825793513f4cd94", "filename": "src/test/rustdoc-ui/display-output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -1,4 +1,4 @@\n-// Test that `--show-output` has an effect and `allow(unused)` can be overriden.\n+// Test that `--show-output` has an effect and `allow(unused)` can be overridden.\n \n // check-pass\n // edition:2018"}, {"sha": "a0e853fc3848905d48c3c6cc5111949dbb685d47", "filename": "src/test/ui/lint/cli-lint-override.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -1,5 +1,5 @@\n // Tests that subsequent lints specified via the command line override\n-// each other, except for ForceWarn and Forbid, which cannot be overriden.\n+// each other, except for ForceWarn and Forbid, which cannot be overridden.\n //\n // revisions: warn_deny forbid_warn force_warn_deny\n //"}, {"sha": "81bd9c5e032780eb306c9e5c245939f2aa1a4850", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/ice.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.yml", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.yml?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -10,7 +10,7 @@ body:\n     attributes:\n       label: Summary\n       description: |\n-        If possible, try to provide a minimal verifiable example. You can read [\"Rust Bug Minimization Patterns\"][mve] for how to create smaller examples. Otherwise, provide the crate where the ICE occured.\n+        If possible, try to provide a minimal verifiable example. You can read [\"Rust Bug Minimization Patterns\"][mve] for how to create smaller examples. Otherwise, provide the crate where the ICE occurred.\n \n         [mve]: http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n     validations:"}, {"sha": "02bf09ed5068c152710bc2c32153f2241ab1649b", "filename": "src/tools/clippy/clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e889986d3f37014b4f8c3e892457831cb5d03b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=13e889986d3f37014b4f8c3e892457831cb5d03b", "patch": "@@ -114,7 +114,7 @@ impl LateLintPass<'_> for UpperCaseAcronyms {\n                 check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n             },\n             ItemKind::Enum(ref enumdef, _) => {\n-                // check enum variants seperately because again we only want to lint on private enums and\n+                // check enum variants separately because again we only want to lint on private enums and\n                 // the fn check_variant does not know about the vis of the enum of its variants\n                 enumdef\n                     .variants"}]}