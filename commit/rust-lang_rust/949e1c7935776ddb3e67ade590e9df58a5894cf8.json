{"sha": "949e1c7935776ddb3e67ade590e9df58a5894cf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OWUxYzc5MzU3NzZkZGIzZTY3YWRlNTkwZTlkZjU4YTU4OTRjZjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-07T19:44:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:23Z"}, "message": "metadata -- remove tiny convenience closure that was causing conflicting mutable borrows", "tree": {"sha": "a879e0ff80b9c8c6400154a5cef22a72cd0f7578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a879e0ff80b9c8c6400154a5cef22a72cd0f7578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949e1c7935776ddb3e67ade590e9df58a5894cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949e1c7935776ddb3e67ade590e9df58a5894cf8", "html_url": "https://github.com/rust-lang/rust/commit/949e1c7935776ddb3e67ade590e9df58a5894cf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949e1c7935776ddb3e67ade590e9df58a5894cf8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7286e35c6b840763012db2ca4b0655b8344f02ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7286e35c6b840763012db2ca4b0655b8344f02ba", "html_url": "https://github.com/rust-lang/rust/commit/7286e35c6b840763012db2ca4b0655b8344f02ba"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "ea4d6d3b252f3eb6f11764737b08a8201d2b0901", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/949e1c7935776ddb3e67ade590e9df58a5894cf8/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949e1c7935776ddb3e67ade590e9df58a5894cf8/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=949e1c7935776ddb3e67ade590e9df58a5894cf8", "patch": "@@ -924,15 +924,14 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             pos: ebml_w.writer.tell().unwrap(),\n         });\n     }\n-    let add_to_index: || = || add_to_index(item, ebml_w, index);\n \n     debug!(\"encoding info for item at {}\",\n            ecx.tcx.sess.codemap.span_to_str(item.span));\n \n     let def_id = local_def(item.id);\n     match item.node {\n       ItemStatic(_, m, _) => {\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n         if m == ast::MutMutable {\n@@ -959,7 +958,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         ebml_w.end_tag();\n       }\n       ItemFn(_, purity, _, ref generics, _) => {\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, purity_fn_family(purity));\n@@ -977,7 +976,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         ebml_w.end_tag();\n       }\n       ItemMod(ref m) => {\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n         encode_info_for_mod(ecx,\n                             ebml_w,\n                             m,\n@@ -987,7 +986,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                             item.vis);\n       }\n       ItemForeignMod(ref fm) => {\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, 'n');\n@@ -1004,7 +1003,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         ebml_w.end_tag();\n       }\n       ItemTy(..) => {\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, 'y');\n@@ -1015,7 +1014,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         ebml_w.end_tag();\n       }\n       ItemEnum(ref enum_definition, ref generics) => {\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n \n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n@@ -1053,7 +1052,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                                          struct_def.fields, index);\n \n         /* Index the class*/\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n \n         /* Now, make an item for the class itself */\n         ebml_w.start_tag(tag_items_data_item);\n@@ -1106,7 +1105,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         let impls = tcx.impls.borrow();\n         let imp = impls.get().get(&def_id);\n \n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, 'i');\n@@ -1170,7 +1169,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         }\n       }\n       ItemTrait(_, ref super_traits, ref ms) => {\n-        add_to_index();\n+        add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, 'I');"}, {"sha": "00e189cdc792d20c482f51935371308efcbd88cd", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949e1c7935776ddb3e67ade590e9df58a5894cf8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949e1c7935776ddb3e67ade590e9df58a5894cf8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=949e1c7935776ddb3e67ade590e9df58a5894cf8", "patch": "@@ -96,8 +96,9 @@ pub fn parse_ident(st: &mut PState, last: char) -> ast::Ident {\n }\n \n fn parse_ident_(st: &mut PState, is_last: |char| -> bool) -> ast::Ident {\n+    let tcx = st.tcx;\n     scan(st, is_last, |bytes| {\n-            st.tcx.sess.ident_of(str::from_utf8(bytes).unwrap())\n+            tcx.sess.ident_of(str::from_utf8(bytes).unwrap())\n         })\n }\n "}]}