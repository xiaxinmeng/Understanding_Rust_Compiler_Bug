{"sha": "7a1bd805fa50d1fd3f7a4459038819b748424ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMWJkODA1ZmE1MGQxZmQzZjdhNDQ1OTAzODgxOWI3NDg0MjRhYjk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-16T16:26:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-16T16:26:25Z"}, "message": "Rollup merge of #78678 - Nemo157:doc-cfg-w-traits, r=jyn514,GuillaumeGomez\n\nAdd tests and improve rendering of cfgs on traits\n\nShows the additional features required to get the trait implementation, suppressing any already shown on the current page. One interesting effect from this is if you have a cfg-ed type, implementing a cfg-ed trait (so the implementation depends on both cfgs), you will get the inverted pair of cfgs shown on each page:\n\n![image](https://user-images.githubusercontent.com/81079/97904671-207bdc00-1d41-11eb-8144-707e8017d2b6.png)\n\n![image](https://user-images.githubusercontent.com/81079/97904700-27a2ea00-1d41-11eb-8b9f-e925ba339044.png)\n\nThe hidden items on the trait implementation also now get the correct cfgs displayed on them.\n\nTests are blocked on #78673.\n\nfixes #68100\ncc #43781", "tree": {"sha": "269ab42e5f0b4ae66def66232889bc0d85cb5b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/269ab42e5f0b4ae66def66232889bc0d85cb5b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a1bd805fa50d1fd3f7a4459038819b748424ab9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsqgxCRBK7hj4Ov3rIwAAdHIIAJ2QamuOpjviA3R0hxfE8ZKp\nIbwbpwusnTRzJ+pjaVR3m4GyR9flqDlsTFhWkjrtyP4X6zQyVyOrB9Bkt9K8FUlc\nMaSVItpgc5FXXGG1jLuiV2ZwwuVhaxozeHbT1npFWAUbS7K2ON/sqqqqqX8LjLqQ\nDkg5pm9nDAPt6PCqBcTwUWW36na/dgyiRz/e+R0NdKlsBbVMqbaMrtICTSiVxosv\npOE8OOxORP4p816OmQCysa7dWIsPS42BWLBZcZdrFBRjVZv43xAsbNQk2ePIKQ/J\n/KzTmqgf+b5PvRAjz19buU3xskkVIe4PFn3wfvrjxPwufHngKZJj/iZKSgwxQt0=\n=MNnQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 269ab42e5f0b4ae66def66232889bc0d85cb5b03\nparent c75f21008de0679d15ee412043dacd14cee0cdb4\nparent c34350ab4f8a9480dc5fa89d637e61ab7acd5280\nauthor Mara Bos <m-ou.se@m-ou.se> 1605543985 +0100\ncommitter GitHub <noreply@github.com> 1605543985 +0100\n\nRollup merge of #78678 - Nemo157:doc-cfg-w-traits, r=jyn514,GuillaumeGomez\n\nAdd tests and improve rendering of cfgs on traits\n\nShows the additional features required to get the trait implementation, suppressing any already shown on the current page. One interesting effect from this is if you have a cfg-ed type, implementing a cfg-ed trait (so the implementation depends on both cfgs), you will get the inverted pair of cfgs shown on each page:\n\n![image](https://user-images.githubusercontent.com/81079/97904671-207bdc00-1d41-11eb-8144-707e8017d2b6.png)\n\n![image](https://user-images.githubusercontent.com/81079/97904700-27a2ea00-1d41-11eb-8b9f-e925ba339044.png)\n\nThe hidden items on the trait implementation also now get the correct cfgs displayed on them.\n\nTests are blocked on #78673.\n\nfixes #68100\ncc #43781\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1bd805fa50d1fd3f7a4459038819b748424ab9", "html_url": "https://github.com/rust-lang/rust/commit/7a1bd805fa50d1fd3f7a4459038819b748424ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a1bd805fa50d1fd3f7a4459038819b748424ab9/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75f21008de0679d15ee412043dacd14cee0cdb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75f21008de0679d15ee412043dacd14cee0cdb4", "html_url": "https://github.com/rust-lang/rust/commit/c75f21008de0679d15ee412043dacd14cee0cdb4"}, {"sha": "c34350ab4f8a9480dc5fa89d637e61ab7acd5280", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34350ab4f8a9480dc5fa89d637e61ab7acd5280", "html_url": "https://github.com/rust-lang/rust/commit/c34350ab4f8a9480dc5fa89d637e61ab7acd5280"}], "stats": {"total": 206, "additions": 174, "deletions": 32}, "files": [{"sha": "fc0ce4b1f0979db1e305e595c7ae43830b3d975d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bd805fa50d1fd3f7a4459038819b748424ab9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bd805fa50d1fd3f7a4459038819b748424ab9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7a1bd805fa50d1fd3f7a4459038819b748424ab9", "patch": "@@ -2251,6 +2251,22 @@ fn stability_tags(item: &clean::Item, parent: &clean::Item) -> String {\n     tags\n }\n \n+fn portability(item: &clean::Item, parent: Option<&clean::Item>) -> Option<String> {\n+    let cfg = match (&item.attrs.cfg, parent.and_then(|p| p.attrs.cfg.as_ref())) {\n+        (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n+        (cfg, _) => cfg.as_deref().cloned(),\n+    };\n+\n+    debug!(\n+        \"Portability {:?} - {:?} = {:?}\",\n+        item.attrs.cfg,\n+        parent.and_then(|p| p.attrs.cfg.as_ref()),\n+        cfg\n+    );\n+\n+    Some(format!(\"<div class=\\\"stab portability\\\">{}</div>\", cfg?.render_long_html()))\n+}\n+\n /// Render the stability and/or deprecation warning that is displayed at the top of the item's\n /// documentation.\n fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item>) -> Vec<String> {\n@@ -2328,19 +2344,8 @@ fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n         stability.push(format!(\"<div class=\\\"stab unstable\\\">{}</div>\", message));\n     }\n \n-    let cfg = match (&item.attrs.cfg, parent.and_then(|p| p.attrs.cfg.as_ref())) {\n-        (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n-        (cfg, _) => cfg.as_deref().cloned(),\n-    };\n-\n-    debug!(\n-        \"Portability {:?} - {:?} = {:?}\",\n-        item.attrs.cfg,\n-        parent.and_then(|p| p.attrs.cfg.as_ref()),\n-        cfg\n-    );\n-    if let Some(cfg) = cfg {\n-        stability.push(format!(\"<div class=\\\"stab portability\\\">{}</div>\", cfg.render_long_html()));\n+    if let Some(portability) = portability(item, parent) {\n+        stability.push(portability);\n     }\n \n     stability\n@@ -2431,6 +2436,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n fn render_implementor(\n     cx: &Context,\n     implementor: &Impl,\n+    parent: &clean::Item,\n     w: &mut Buffer,\n     implementor_dups: &FxHashMap<&str, (DefId, bool)>,\n     aliases: &[String],\n@@ -2450,7 +2456,7 @@ fn render_implementor(\n         w,\n         cx,\n         implementor,\n-        None,\n+        parent,\n         AssocItemLink::Anchor(None),\n         RenderMode::Normal,\n         implementor.impl_item.stable_since().as_deref(),\n@@ -2480,7 +2486,7 @@ fn render_impls(\n                 &mut buffer,\n                 cx,\n                 i,\n-                Some(containing_item),\n+                containing_item,\n                 assoc_link,\n                 RenderMode::Normal,\n                 containing_item.stable_since().as_deref(),\n@@ -2727,7 +2733,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     w,\n                     cx,\n                     &implementor,\n-                    None,\n+                    it,\n                     assoc_link,\n                     RenderMode::Normal,\n                     implementor.impl_item.stable_since().as_deref(),\n@@ -2749,7 +2755,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\">\",\n         );\n         for implementor in concrete {\n-            render_implementor(cx, implementor, w, &implementor_dups, &[], cache);\n+            render_implementor(cx, implementor, it, w, &implementor_dups, &[], cache);\n         }\n         write_loading_content(w, \"</div>\");\n \n@@ -2764,6 +2770,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                 render_implementor(\n                     cx,\n                     implementor,\n+                    it,\n                     w,\n                     &implementor_dups,\n                     &collect_paths_for_type(implementor.inner_impl().for_.clone()),\n@@ -3430,7 +3437,7 @@ fn render_assoc_items(\n                 w,\n                 cx,\n                 i,\n-                Some(containing_item),\n+                containing_item,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n                 containing_item.stable_since().as_deref(),\n@@ -3622,7 +3629,7 @@ fn render_impl(\n     w: &mut Buffer,\n     cx: &Context,\n     i: &Impl,\n-    parent: Option<&clean::Item>,\n+    parent: &clean::Item,\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n     outer_version: Option<&str>,\n@@ -3635,6 +3642,9 @@ fn render_impl(\n     aliases: &[String],\n     cache: &Cache,\n ) {\n+    let traits = &cache.traits;\n+    let trait_ = i.trait_did().map(|did| &traits[&did]);\n+\n     if render_mode == RenderMode::Normal {\n         let id = cx.derive_id(match i.inner_impl().trait_ {\n             Some(ref t) => {\n@@ -3687,6 +3697,13 @@ fn render_impl(\n             );\n         }\n         write!(w, \"</h3>\");\n+\n+        if trait_.is_some() {\n+            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n+                write!(w, \"<div class=\\\"stability\\\">{}</div>\", portability);\n+            }\n+        }\n+\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n             write!(\n@@ -3709,7 +3726,7 @@ fn render_impl(\n         w: &mut Buffer,\n         cx: &Context,\n         item: &clean::Item,\n-        parent: Option<&clean::Item>,\n+        parent: &clean::Item,\n         link: AssocItemLink<'_>,\n         render_mode: RenderMode,\n         is_default_item: bool,\n@@ -3794,7 +3811,7 @@ fn render_impl(\n                     if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n-                        document_stability(w, cx, it, is_hidden, parent);\n+                        document_stability(w, cx, it, is_hidden, Some(parent));\n                         if item.doc_value().is_some() {\n                             document_full(w, item, cx, \"\", is_hidden);\n                         } else if show_def_docs {\n@@ -3804,30 +3821,27 @@ fn render_impl(\n                         }\n                     }\n                 } else {\n-                    document_stability(w, cx, item, is_hidden, parent);\n+                    document_stability(w, cx, item, is_hidden, Some(parent));\n                     if show_def_docs {\n                         document_full(w, item, cx, \"\", is_hidden);\n                     }\n                 }\n             } else {\n-                document_stability(w, cx, item, is_hidden, parent);\n+                document_stability(w, cx, item, is_hidden, Some(parent));\n                 if show_def_docs {\n                     document_short(w, item, link, \"\", is_hidden);\n                 }\n             }\n         }\n     }\n \n-    let traits = &cache.traits;\n-    let trait_ = i.trait_did().map(|did| &traits[&did]);\n-\n     write!(w, \"<div class=\\\"impl-items\\\">\");\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(\n             w,\n             cx,\n             trait_item,\n-            parent,\n+            if trait_.is_some() { &i.impl_item } else { parent },\n             link,\n             render_mode,\n             false,\n@@ -3843,7 +3857,7 @@ fn render_impl(\n         cx: &Context,\n         t: &clean::Trait,\n         i: &clean::Impl,\n-        parent: Option<&clean::Item>,\n+        parent: &clean::Item,\n         render_mode: RenderMode,\n         outer_version: Option<&str>,\n         show_def_docs: bool,\n@@ -3884,7 +3898,7 @@ fn render_impl(\n                 cx,\n                 t,\n                 &i.inner_impl(),\n-                parent,\n+                &i.impl_item,\n                 render_mode,\n                 outer_version,\n                 show_def_docs,"}, {"sha": "b8377dc15696dd77cb15df97dd5ca9ef6ed04ed3", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bd805fa50d1fd3f7a4459038819b748424ab9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bd805fa50d1fd3f7a4459038819b748424ab9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=7a1bd805fa50d1fd3f7a4459038819b748424ab9", "patch": "@@ -2439,12 +2439,13 @@ function defocusSearchBar() {\n \n         var func = function(e) {\n             var next = e.nextElementSibling;\n+            if (next && hasClass(next, \"stability\")) {\n+              next = next.nextElementSibling;\n+            }\n             if (!next) {\n                 return;\n             }\n-            if (hasClass(next, \"docblock\") === true ||\n-                (hasClass(next, \"stability\") === true &&\n-                 hasClass(next.nextElementSibling, \"docblock\") === true)) {\n+            if (hasClass(next, \"docblock\")) {\n                 var newToggle = toggle.cloneNode(true);\n                 insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n                 if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n@@ -2455,6 +2456,9 @@ function defocusSearchBar() {\n \n         var funcImpl = function(e) {\n             var next = e.nextElementSibling;\n+            if (next && hasClass(next, \"stability\")) {\n+                next = next.nextElementSibling;\n+            }\n             if (next && hasClass(next, \"docblock\")) {\n                 next = next.nextElementSibling;\n             }"}, {"sha": "13407b2c791fe2a16ea6cd8188373e9470e7a03e", "filename": "src/test/rustdoc/doc-cfg-traits.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/7a1bd805fa50d1fd3f7a4459038819b748424ab9/src%2Ftest%2Frustdoc%2Fdoc-cfg-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1bd805fa50d1fd3f7a4459038819b748424ab9/src%2Ftest%2Frustdoc%2Fdoc-cfg-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-traits.rs?ref=7a1bd805fa50d1fd3f7a4459038819b748424ab9", "patch": "@@ -0,0 +1,124 @@\n+#![crate_name = \"myrmecophagous\"]\n+#![feature(doc_cfg, associated_type_defaults)]\n+\n+// @has 'myrmecophagous/index.html'\n+// @count   - '//*[@class=\"stab portability\"]' 2\n+// @matches - '//*[@class=\"stab portability\"]' '^jurisconsult$'\n+// @matches - '//*[@class=\"stab portability\"]' '^quarter$'\n+\n+pub trait Lea {}\n+\n+// @has 'myrmecophagous/trait.Vortoscope.html'\n+// @count   - '//*[@class=\"stab portability\"]' 6\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature zibib'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature poriform'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature ethopoeia'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature lea'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature unit'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature quarter'\n+pub trait Vortoscope {\n+    type Batology = ();\n+\n+    #[doc(cfg(feature = \"zibib\"))]\n+    type Zibib = ();\n+\n+    const YAHRZEIT: () = ();\n+\n+    #[doc(cfg(feature = \"poriform\"))]\n+    const PORIFORM: () = ();\n+\n+    fn javanais() {}\n+\n+    #[doc(cfg(feature = \"ethopoeia\"))]\n+    fn ethopoeia() {}\n+}\n+\n+#[doc(cfg(feature = \"lea\"))]\n+impl<T: Lea> Vortoscope for T {}\n+\n+#[doc(cfg(feature = \"unit\"))]\n+impl Vortoscope for () {}\n+\n+// @has 'myrmecophagous/trait.Jurisconsult.html'\n+// @count   - '//*[@class=\"stab portability\"]' 7\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature jurisconsult'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature lithomancy'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature boodle'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature mistetch'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature lea'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature unit'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature quarter'\n+#[doc(cfg(feature = \"jurisconsult\"))]\n+pub trait Jurisconsult {\n+    type Urbanist = ();\n+\n+    #[doc(cfg(feature = \"lithomancy\"))]\n+    type Lithomancy = ();\n+\n+    const UNIFILAR: () = ();\n+\n+    #[doc(cfg(feature = \"boodle\"))]\n+    const BOODLE: () = ();\n+\n+    fn mersion() {}\n+\n+    #[doc(cfg(feature = \"mistetch\"))]\n+    fn mistetch() {}\n+}\n+\n+#[doc(cfg(feature = \"lea\"))]\n+impl<T: Lea> Jurisconsult for T {}\n+\n+#[doc(cfg(feature = \"unit\"))]\n+impl Jurisconsult for () {}\n+\n+// @has 'myrmecophagous/struct.Ultimogeniture.html'\n+// @count   - '//*[@class=\"stab portability\"]' 8\n+//\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature zibib'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature poriform'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature ethopoeia'\n+//\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature jurisconsult'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature lithomancy'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature boodle'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature mistetch'\n+//\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature copy'\n+#[derive(Clone)]\n+pub struct Ultimogeniture;\n+\n+impl Vortoscope for Ultimogeniture {}\n+\n+#[doc(cfg(feature = \"jurisconsult\"))]\n+impl Jurisconsult for Ultimogeniture {}\n+\n+#[doc(cfg(feature = \"copy\"))]\n+impl Copy for Ultimogeniture {}\n+\n+// @has 'myrmecophagous/struct.Quarter.html'\n+// @count   - '//*[@class=\"stab portability\"]' 9\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature quarter'\n+//\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature zibib'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature poriform'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature ethopoeia'\n+//\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature jurisconsult'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature lithomancy'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature boodle'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature mistetch'\n+//\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature copy'\n+#[doc(cfg(feature = \"quarter\"))]\n+#[derive(Clone)]\n+pub struct Quarter;\n+\n+#[doc(cfg(feature = \"quarter\"))]\n+impl Vortoscope for Quarter {}\n+\n+#[doc(cfg(all(feature = \"jurisconsult\", feature = \"quarter\")))]\n+impl Jurisconsult for Quarter {}\n+\n+#[doc(cfg(all(feature = \"copy\", feature = \"quarter\")))]\n+impl Copy for Quarter {}"}]}