{"sha": "86b9f710d0c90068866e736bbbb7b89ac93ff2e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YjlmNzEwZDBjOTAwNjg4NjZlNzM2YmJiYjdiODlhYzkzZmYyZTY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-09-05T03:08:12Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-09-05T03:08:12Z"}, "message": "Move ArrayChunksMut::get_unchecked per #73565", "tree": {"sha": "507fd489a7d0aafde1c2bd8d771b93caeab8c02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507fd489a7d0aafde1c2bd8d771b93caeab8c02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b9f710d0c90068866e736bbbb7b89ac93ff2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b9f710d0c90068866e736bbbb7b89ac93ff2e6", "html_url": "https://github.com/rust-lang/rust/commit/86b9f710d0c90068866e736bbbb7b89ac93ff2e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b9f710d0c90068866e736bbbb7b89ac93ff2e6/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21903532eee96a5311d08b8a9e9cc9f9231bc478", "url": "https://api.github.com/repos/rust-lang/rust/commits/21903532eee96a5311d08b8a9e9cc9f9231bc478", "html_url": "https://github.com/rust-lang/rust/commit/21903532eee96a5311d08b8a9e9cc9f9231bc478"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "609fdbd5992742284b4b7ae97670a6d47a459290", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86b9f710d0c90068866e736bbbb7b89ac93ff2e6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b9f710d0c90068866e736bbbb7b89ac93ff2e6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=86b9f710d0c90068866e736bbbb7b89ac93ff2e6", "patch": "@@ -1070,9 +1070,10 @@ impl<T> [T] {\n         let (fst, snd) = self.split_at_mut(len * N);\n         // SAFETY: We cast a slice of `len * N` elements into\n         // a slice of `len` many `N` elements chunks.\n-        let array_slice: &mut [[T; N]] =\n-            unsafe { from_raw_parts_mut(fst.as_mut_ptr().cast(), len) };\n-        ArrayChunksMut { iter: array_slice.iter_mut(), rem: snd }\n+        unsafe {\n+            let array_slice: &mut [[T; N]] = from_raw_parts_mut(fst.as_mut_ptr().cast(), len);\n+            ArrayChunksMut { iter: array_slice.iter_mut(), rem: snd }\n+        }\n     }\n \n     /// Returns an iterator over `chunk_size` elements of the slice at a time, starting at the end\n@@ -6028,6 +6029,12 @@ impl<'a, T, const N: usize> Iterator for ArrayChunksMut<'a, T, N> {\n     fn last(self) -> Option<Self::Item> {\n         self.iter.last()\n     }\n+\n+    unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T; N] {\n+        // SAFETY: The safety guarantees of `get_unchecked` are transferred to\n+        // the caller.\n+        unsafe { self.iter.get_unchecked(i) }\n+    }\n }\n \n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n@@ -6059,9 +6066,6 @@ impl<T, const N: usize> FusedIterator for ArrayChunksMut<'_, T, N> {}\n #[doc(hidden)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T, N> {\n-    unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T; N] {\n-        unsafe { self.iter.get_unchecked(i) }\n-    }\n     fn may_have_side_effect() -> bool {\n         false\n     }"}]}