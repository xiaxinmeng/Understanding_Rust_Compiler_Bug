{"sha": "a5718ba377fbc915618062d7562229a4eb754c9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NzE4YmEzNzdmYmM5MTU2MTgwNjJkNzU2MjIyOWE0ZWI3NTRjOWY=", "commit": {"author": {"name": "Brian J. Burg", "email": "burg@cs.washington.edu", "date": "2012-11-09T00:25:22Z"}, "committer": {"name": "Brian J. Burg", "email": "burg@cs.washington.edu", "date": "2012-11-09T00:25:22Z"}, "message": "Change option::expect to not require a Copy bound, and move instead.", "tree": {"sha": "24d677437c4617132003a38633c2034c1f90c7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24d677437c4617132003a38633c2034c1f90c7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5718ba377fbc915618062d7562229a4eb754c9f", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5718ba377fbc915618062d7562229a4eb754c9f", "html_url": "https://github.com/rust-lang/rust/commit/a5718ba377fbc915618062d7562229a4eb754c9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5718ba377fbc915618062d7562229a4eb754c9f/comments", "author": null, "committer": null, "parents": [{"sha": "17020244e476b5a40b0d2eb576574a0cf5543d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/17020244e476b5a40b0d2eb576574a0cf5543d80", "html_url": "https://github.com/rust-lang/rust/commit/17020244e476b5a40b0d2eb576574a0cf5543d80"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "0bb3262e56927e336b71e5cb6a8a9874d3b95ed4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5718ba377fbc915618062d7562229a4eb754c9f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5718ba377fbc915618062d7562229a4eb754c9f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a5718ba377fbc915618062d7562229a4eb754c9f", "patch": "@@ -85,16 +85,17 @@ pub pure fn get_ref<T>(opt: &r/Option<T>) -> &r/T {\n     }\n }\n \n-pub pure fn expect<T: Copy>(opt: Option<T>, reason: ~str) -> T {\n+pub pure fn expect<T>(opt: Option<T>, reason: ~str) -> T {\n     /*!\n-     * Gets the value out of an option, printing a specified message on\n-     * failure\n+     * Gets the value out of an option without copying, printing a \n+     * specified message on failure.\n      *\n      * # Failure\n      *\n      * Fails if the value equals `none`\n      */\n-    match opt { Some(copy x) => x, None => fail reason }\n+    if opt.is_some() { move option::unwrap(move opt) }\n+    else { fail reason }\n }\n \n pub pure fn map<T, U>(opt: &Option<T>, f: fn(x: &T) -> U) -> Option<U> {"}]}