{"sha": "9a12d0d6f2955e52b7098142182ff4248c5219cc", "node_id": "C_kwDOAAsO6NoAKDlhMTJkMGQ2ZjI5NTVlNTJiNzA5ODE0MjE4MmZmNDI0OGM1MjE5Y2M", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-07-01T16:45:09Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-07-01T17:00:07Z"}, "message": "Fix case of ignored/broken proc macro", "tree": {"sha": "342524650afa3482671af4420b71b30c838a2bba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342524650afa3482671af4420b71b30c838a2bba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a12d0d6f2955e52b7098142182ff4248c5219cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d0d6f2955e52b7098142182ff4248c5219cc", "html_url": "https://github.com/rust-lang/rust/commit/9a12d0d6f2955e52b7098142182ff4248c5219cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d0d6f2955e52b7098142182ff4248c5219cc/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e71519572ceae49b174ccec0d7266b114911ce53", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71519572ceae49b174ccec0d7266b114911ce53", "html_url": "https://github.com/rust-lang/rust/commit/e71519572ceae49b174ccec0d7266b114911ce53"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "8e8b5c322f9edf1a8c2b50a86ddc32319777274f", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d0d6f2955e52b7098142182ff4248c5219cc/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d0d6f2955e52b7098142182ff4248c5219cc/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=9a12d0d6f2955e52b7098142182ff4248c5219cc", "patch": "@@ -2,7 +2,7 @@\n \n use std::{mem, sync::Arc};\n \n-use hir_expand::{name::Name, AstId, ExpandResult, HirFileId, InFile, MacroCallId};\n+use hir_expand::{name::Name, AstId, ExpandResult, HirFileId, InFile, MacroCallId, MacroDefKind};\n use syntax::ast;\n \n use crate::{\n@@ -498,6 +498,17 @@ impl<'a> AssocItemCollector<'a> {\n                     if !self.db.enable_proc_attr_macros() {\n                         continue 'attrs;\n                     }\n+                    let loc = self.db.lookup_intern_macro_call(call_id);\n+                    if let MacroDefKind::ProcMacro(exp, ..) = loc.def.kind {\n+                        // If there's no expander for the proc macro (e.g. the\n+                        // proc macro is ignored, or building the proc macro\n+                        // crate failed), skip expansion like we would if it was\n+                        // disabled. This is analogous to the handling in\n+                        // `DefCollector::collect_macros`.\n+                        if exp.is_dummy() {\n+                            continue 'attrs;\n+                        }\n+                    }\n                     match self.expander.enter_expand_id(self.db, call_id) {\n                         ExpandResult { value: Some((mark, mac)), .. } => {\n                             self.collect_macro_items(mark, mac);"}]}