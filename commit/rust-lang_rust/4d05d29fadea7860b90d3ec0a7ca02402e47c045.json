{"sha": "4d05d29fadea7860b90d3ec0a7ca02402e47c045", "node_id": "C_kwDOAAsO6NoAKDRkMDVkMjlmYWRlYTc4NjBiOTBkM2VjMGE3Y2EwMjQwMmU0N2MwNDU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-26T18:49:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-26T18:49:41Z"}, "message": "Merge #11825\n\n11825: fix: Don't complete `Drop::drop` for qualified paths r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e8648873f12eac0a43b3b8d8ce8e35de00340be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8648873f12eac0a43b3b8d8ce8e35de00340be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d05d29fadea7860b90d3ec0a7ca02402e47c045", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiP2BFCRBK7hj4Ov3rIwAAFEYIAIi+gDfVv+EUP58zlAFlV4Iy\ndedWSN14LucA6AptbTextWL8beGBr5r/ASoYkZR7OSNmEdm7XdkYMwlTq8AXacVC\nwqR1JGamOpNRqP/xmK5rRelkYccfD+ovYlCBcHK6CbOQonUdgKnI+gab0xz/2XeH\nPjwgkL+ARUbyJg4alFlhbVKwf3abv4wDJi3CXOH04r6KkChMP8PBoGC+77q0Z6zM\ncA+hH1zrx3HAvGumc6wjH0kbzc1h78IkEO/lTb/6rJla9vjIy+YJJRVZox+RDpXV\njWp1D/kfdOSdos6im+GU3uguddM8dKKrE0s+dTwhCBOWztznkqqxrSXxaOk2m1c=\n=HqeO\n-----END PGP SIGNATURE-----\n", "payload": "tree e8648873f12eac0a43b3b8d8ce8e35de00340be3\nparent 630d85f8d15f6182988889020dc22f7756a9149c\nparent 0ae795136db4e4b436fc000e0468016fdf6d03ec\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648320581 +0000\ncommitter GitHub <noreply@github.com> 1648320581 +0000\n\nMerge #11825\n\n11825: fix: Don't complete `Drop::drop` for qualified paths r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d05d29fadea7860b90d3ec0a7ca02402e47c045", "html_url": "https://github.com/rust-lang/rust/commit/4d05d29fadea7860b90d3ec0a7ca02402e47c045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d05d29fadea7860b90d3ec0a7ca02402e47c045/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "630d85f8d15f6182988889020dc22f7756a9149c", "url": "https://api.github.com/repos/rust-lang/rust/commits/630d85f8d15f6182988889020dc22f7756a9149c", "html_url": "https://github.com/rust-lang/rust/commit/630d85f8d15f6182988889020dc22f7756a9149c"}, {"sha": "0ae795136db4e4b436fc000e0468016fdf6d03ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae795136db4e4b436fc000e0468016fdf6d03ec", "html_url": "https://github.com/rust-lang/rust/commit/0ae795136db4e4b436fc000e0468016fdf6d03ec"}], "stats": {"total": 374, "additions": 196, "deletions": 178}, "files": [{"sha": "4bde87b8d486f7b2469b135529cfb89239fb9d15", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=4d05d29fadea7860b90d3ec0a7ca02402e47c045", "patch": "@@ -144,6 +144,37 @@ impl ItemTree {\n         Arc::new(item_tree)\n     }\n \n+    /// Returns an iterator over all items located at the top level of the `HirFileId` this\n+    /// `ItemTree` was created from.\n+    pub fn top_level_items(&self) -> &[ModItem] {\n+        &self.top_level\n+    }\n+\n+    /// Returns the inner attributes of the source file.\n+    pub fn top_level_attrs(&self, db: &dyn DefDatabase, krate: CrateId) -> Attrs {\n+        self.attrs.get(&AttrOwner::TopLevel).unwrap_or(&RawAttrs::EMPTY).clone().filter(db, krate)\n+    }\n+\n+    pub(crate) fn raw_attrs(&self, of: AttrOwner) -> &RawAttrs {\n+        self.attrs.get(&of).unwrap_or(&RawAttrs::EMPTY)\n+    }\n+\n+    pub(crate) fn attrs(&self, db: &dyn DefDatabase, krate: CrateId, of: AttrOwner) -> Attrs {\n+        self.raw_attrs(of).clone().filter(db, krate)\n+    }\n+\n+    pub fn pretty_print(&self) -> String {\n+        pretty::print_item_tree(self)\n+    }\n+\n+    fn data(&self) -> &ItemTreeData {\n+        self.data.as_ref().expect(\"attempted to access data of empty ItemTree\")\n+    }\n+\n+    fn data_mut(&mut self) -> &mut ItemTreeData {\n+        self.data.get_or_insert_with(Box::default)\n+    }\n+\n     fn block_item_tree(db: &dyn DefDatabase, block: BlockId) -> Arc<ItemTree> {\n         let loc = db.lookup_intern_block(block);\n         let block = loc.ast_id.to_node(db.upcast());\n@@ -199,37 +230,6 @@ impl ItemTree {\n             vis.arena.shrink_to_fit();\n         }\n     }\n-\n-    /// Returns an iterator over all items located at the top level of the `HirFileId` this\n-    /// `ItemTree` was created from.\n-    pub fn top_level_items(&self) -> &[ModItem] {\n-        &self.top_level\n-    }\n-\n-    /// Returns the inner attributes of the source file.\n-    pub fn top_level_attrs(&self, db: &dyn DefDatabase, krate: CrateId) -> Attrs {\n-        self.attrs.get(&AttrOwner::TopLevel).unwrap_or(&RawAttrs::EMPTY).clone().filter(db, krate)\n-    }\n-\n-    pub(crate) fn raw_attrs(&self, of: AttrOwner) -> &RawAttrs {\n-        self.attrs.get(&of).unwrap_or(&RawAttrs::EMPTY)\n-    }\n-\n-    pub(crate) fn attrs(&self, db: &dyn DefDatabase, krate: CrateId, of: AttrOwner) -> Attrs {\n-        self.raw_attrs(of).clone().filter(db, krate)\n-    }\n-\n-    pub fn pretty_print(&self) -> String {\n-        pretty::print_item_tree(self)\n-    }\n-\n-    fn data(&self) -> &ItemTreeData {\n-        self.data.as_ref().expect(\"attempted to access data of empty ItemTree\")\n-    }\n-\n-    fn data_mut(&mut self) -> &mut ItemTreeData {\n-        self.data.get_or_insert_with(Box::default)\n-    }\n }\n \n #[derive(Default, Debug, Eq, PartialEq)]"}, {"sha": "14b26bcf45293e6fdf60b42f3d3c650570ece95b", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4d05d29fadea7860b90d3ec0a7ca02402e47c045", "patch": "@@ -3,7 +3,7 @@\n //! `DefCollector::collect` contains the fixed-point iteration loop which\n //! resolves imports and expands macros.\n \n-use std::iter;\n+use std::{iter, mem};\n \n use base_db::{CrateId, Edition, FileId};\n use cfg::{CfgExpr, CfgOptions};\n@@ -15,9 +15,9 @@ use hir_expand::{\n     builtin_fn_macro::find_builtin_macro,\n     name::{name, AsName, Name},\n     proc_macro::ProcMacroExpander,\n-    ExpandTo, HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n+    ExpandTo, HirFileId, InFile, MacroCallId, MacroCallKind, MacroCallLoc, MacroDefId,\n+    MacroDefKind,\n };\n-use hir_expand::{InFile, MacroCallLoc};\n use itertools::Itertools;\n use la_arena::Idx;\n use limit::Limit;\n@@ -101,7 +101,6 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n         proc_macros,\n-        exports_proc_macros: false,\n         from_glob_import: Default::default(),\n         skip_attrs: Default::default(),\n         derive_helpers_in_scope: Default::default(),\n@@ -247,7 +246,6 @@ struct DefCollector<'a> {\n     /// them).\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n     is_proc_macro: bool,\n-    exports_proc_macros: bool,\n     from_glob_import: PerNsGlobImports,\n     /// If we fail to resolve an attribute on a `ModItem`, we fall back to ignoring the attribute.\n     /// This map is used to skip all attributes up to and including the one that failed to resolve,\n@@ -403,10 +401,10 @@ impl DefCollector<'_> {\n         self.unresolved_imports.extend(partial_resolved);\n         self.resolve_imports();\n \n-        let unresolved_imports = std::mem::take(&mut self.unresolved_imports);\n+        let unresolved_imports = mem::take(&mut self.unresolved_imports);\n         // show unresolved imports in completion, etc\n         for directive in &unresolved_imports {\n-            self.record_resolved_import(directive)\n+            self.record_resolved_import(directive);\n         }\n         self.unresolved_imports = unresolved_imports;\n \n@@ -435,7 +433,7 @@ impl DefCollector<'_> {\n     fn reseed_with_unresolved_attribute(&mut self) -> ReachedFixedPoint {\n         cov_mark::hit!(unresolved_attribute_fallback);\n \n-        let mut unresolved_macros = std::mem::take(&mut self.unresolved_macros);\n+        let mut unresolved_macros = mem::take(&mut self.unresolved_macros);\n         let pos = unresolved_macros.iter().position(|directive| {\n             if let MacroDirectiveKind::Attr { ast_id, mod_item, attr, tree } = &directive.kind {\n                 self.skip_attrs.insert(ast_id.ast_id.with_value(*mod_item), attr.id);\n@@ -458,10 +456,9 @@ impl DefCollector<'_> {\n         });\n \n         if let Some(pos) = pos {\n-            unresolved_macros.remove(pos);\n+            unresolved_macros.swap_remove(pos);\n         }\n \n-        // The collection above might add new unresolved macros (eg. derives), so merge the lists.\n         self.unresolved_macros.extend(unresolved_macros);\n \n         if pos.is_some() {\n@@ -558,8 +555,6 @@ impl DefCollector<'_> {\n         fn_id: FunctionId,\n         module_id: ModuleId,\n     ) {\n-        self.exports_proc_macros = true;\n-\n         let kind = def.kind.to_basedb_kind();\n         let (expander, kind) = match self.proc_macros.iter().find(|(n, _)| n == &def.name) {\n             Some(&(_, expander)) => (expander, kind),\n@@ -714,7 +709,7 @@ impl DefCollector<'_> {\n     /// Tries to resolve every currently unresolved import.\n     fn resolve_imports(&mut self) -> ReachedFixedPoint {\n         let mut res = ReachedFixedPoint::Yes;\n-        let imports = std::mem::take(&mut self.unresolved_imports);\n+        let imports = mem::take(&mut self.unresolved_imports);\n         let imports = imports\n             .into_iter()\n             .filter_map(|mut directive| {\n@@ -1051,7 +1046,7 @@ impl DefCollector<'_> {\n     }\n \n     fn resolve_macros(&mut self) -> ReachedFixedPoint {\n-        let mut macros = std::mem::take(&mut self.unresolved_macros);\n+        let mut macros = mem::take(&mut self.unresolved_macros);\n         let mut resolved = Vec::new();\n         let mut push_resolved = |directive: &MacroDirective, call_id| {\n             resolved.push((directive.module_id, directive.depth, directive.container, call_id));\n@@ -2095,7 +2090,6 @@ mod tests {\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),\n             proc_macros: Default::default(),\n-            exports_proc_macros: false,\n             from_glob_import: Default::default(),\n             skip_attrs: Default::default(),\n             derive_helpers_in_scope: Default::default(),"}, {"sha": "bcb2c8797d0457849c89fe36fe029220cf9db18b", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 128, "deletions": 127, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=4d05d29fadea7860b90d3ec0a7ca02402e47c045", "patch": "@@ -544,7 +544,8 @@ mod tests {\n         expect: Expect,\n     ) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let runnables = analysis.runnables(position.file_id).unwrap();\n+        let mut runnables = analysis.runnables(position.file_id).unwrap();\n+        runnables.sort_by_key(|it| (it.nav.full_range.start(), it.nav.name.clone()));\n         expect.assert_debug_eq(&runnables);\n         assert_eq!(\n             actions,\n@@ -580,9 +581,24 @@ mod not_a_root {\n     fn main() {}\n }\n \"#,\n-            &[Bin, Test, Test, Bench, TestMod],\n+            &[TestMod, Bin, Test, Test, Bench],\n             expect![[r#\"\n                 [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 0..137,\n+                            name: \"\",\n+                            kind: Module,\n+                        },\n+                        kind: TestMod {\n+                            path: \"\",\n+                        },\n+                        cfg: None,\n+                    },\n                     Runnable {\n                         use_name_in_title: false,\n                         nav: NavigationTarget {\n@@ -657,21 +673,6 @@ mod not_a_root {\n                         },\n                         cfg: None,\n                     },\n-                    Runnable {\n-                        use_name_in_title: false,\n-                        nav: NavigationTarget {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n-                            full_range: 0..137,\n-                            name: \"\",\n-                            kind: Module,\n-                        },\n-                        kind: TestMod {\n-                            path: \"\",\n-                        },\n-                        cfg: None,\n-                    },\n                 ]\n             \"#]],\n         );\n@@ -1065,7 +1066,7 @@ mod root_tests {\n     mod nested_tests_4 {}\n }\n \"#,\n-            &[TestMod, TestMod, TestMod, Test, Test, Test],\n+            &[TestMod, TestMod, Test, Test, TestMod, Test],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -1102,23 +1103,6 @@ mod root_tests {\n                         },\n                         cfg: None,\n                     },\n-                    Runnable {\n-                        use_name_in_title: false,\n-                        nav: NavigationTarget {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n-                            full_range: 202..286,\n-                            focus_range: 206..220,\n-                            name: \"nested_tests_2\",\n-                            kind: Module,\n-                            description: \"mod nested_tests_2\",\n-                        },\n-                        kind: TestMod {\n-                            path: \"root_tests::nested_tests_0::nested_tests_2\",\n-                        },\n-                        cfg: None,\n-                    },\n                     Runnable {\n                         use_name_in_title: false,\n                         nav: NavigationTarget {\n@@ -1161,6 +1145,23 @@ mod root_tests {\n                         },\n                         cfg: None,\n                     },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 202..286,\n+                            focus_range: 206..220,\n+                            name: \"nested_tests_2\",\n+                            kind: Module,\n+                            description: \"mod nested_tests_2\",\n+                        },\n+                        kind: TestMod {\n+                            path: \"root_tests::nested_tests_0::nested_tests_2\",\n+                        },\n+                        cfg: None,\n+                    },\n                     Runnable {\n                         use_name_in_title: false,\n                         nav: NavigationTarget {\n@@ -1197,9 +1198,24 @@ $0\n #[cfg(feature = \"foo\")]\n fn test_foo1() {}\n \"#,\n-            &[Test, TestMod],\n+            &[TestMod, Test],\n             expect![[r#\"\n                 [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 0..51,\n+                            name: \"\",\n+                            kind: Module,\n+                        },\n+                        kind: TestMod {\n+                            path: \"\",\n+                        },\n+                        cfg: None,\n+                    },\n                     Runnable {\n                         use_name_in_title: false,\n                         nav: NavigationTarget {\n@@ -1228,21 +1244,6 @@ fn test_foo1() {}\n                             ),\n                         ),\n                     },\n-                    Runnable {\n-                        use_name_in_title: false,\n-                        nav: NavigationTarget {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n-                            full_range: 0..51,\n-                            name: \"\",\n-                            kind: Module,\n-                        },\n-                        kind: TestMod {\n-                            path: \"\",\n-                        },\n-                        cfg: None,\n-                    },\n                 ]\n             \"#]],\n         );\n@@ -1258,9 +1259,24 @@ $0\n #[cfg(all(feature = \"foo\", feature = \"bar\"))]\n fn test_foo1() {}\n \"#,\n-            &[Test, TestMod],\n+            &[TestMod, Test],\n             expect![[r#\"\n                 [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 0..73,\n+                            name: \"\",\n+                            kind: Module,\n+                        },\n+                        kind: TestMod {\n+                            path: \"\",\n+                        },\n+                        cfg: None,\n+                    },\n                     Runnable {\n                         use_name_in_title: false,\n                         nav: NavigationTarget {\n@@ -1299,21 +1315,6 @@ fn test_foo1() {}\n                             ),\n                         ),\n                     },\n-                    Runnable {\n-                        use_name_in_title: false,\n-                        nav: NavigationTarget {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n-                            full_range: 0..73,\n-                            name: \"\",\n-                            kind: Module,\n-                        },\n-                        kind: TestMod {\n-                            path: \"\",\n-                        },\n-                        cfg: None,\n-                    },\n                 ]\n             \"#]],\n         );\n@@ -1400,7 +1401,7 @@ mod tests {\n }\n gen2!();\n \"#,\n-            &[TestMod, TestMod, TestMod, Test, Test],\n+            &[TestMod, TestMod, Test, Test, TestMod],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -1409,14 +1410,12 @@ gen2!();\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 202..227,\n-                            focus_range: 206..211,\n-                            name: \"tests\",\n+                            full_range: 0..237,\n+                            name: \"\",\n                             kind: Module,\n-                            description: \"mod tests\",\n                         },\n                         kind: TestMod {\n-                            path: \"tests\",\n+                            path: \"\",\n                         },\n                         cfg: None,\n                     },\n@@ -1426,28 +1425,34 @@ gen2!();\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 0..237,\n-                            name: \"\",\n+                            full_range: 202..227,\n+                            focus_range: 206..211,\n+                            name: \"tests\",\n                             kind: Module,\n+                            description: \"mod tests\",\n                         },\n                         kind: TestMod {\n-                            path: \"\",\n+                            path: \"tests\",\n                         },\n                         cfg: None,\n                     },\n                     Runnable {\n-                        use_name_in_title: true,\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 228..236,\n-                            name: \"tests2\",\n-                            kind: Module,\n-                            description: \"mod tests2\",\n+                            full_range: 218..225,\n+                            name: \"foo_test\",\n+                            kind: Function,\n                         },\n-                        kind: TestMod {\n-                            path: \"tests2\",\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n                         },\n                         cfg: None,\n                     },\n@@ -1472,22 +1477,18 @@ gen2!();\n                         cfg: None,\n                     },\n                     Runnable {\n-                        use_name_in_title: false,\n+                        use_name_in_title: true,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 218..225,\n-                            name: \"foo_test\",\n-                            kind: Function,\n+                            full_range: 228..236,\n+                            name: \"tests2\",\n+                            kind: Module,\n+                            description: \"mod tests2\",\n                         },\n-                        kind: Test {\n-                            test_id: Path(\n-                                \"tests::foo_test\",\n-                            ),\n-                            attr: TestAttr {\n-                                ignore: false,\n-                            },\n+                        kind: TestMod {\n+                            path: \"tests2\",\n                         },\n                         cfg: None,\n                     },\n@@ -1516,25 +1517,9 @@ macro_rules! foo {\n }\n foo!();\n \"#,\n-            &[TestMod, Test, Test, Test],\n+            &[Test, Test, Test, TestMod],\n             expect![[r#\"\n                 [\n-                    Runnable {\n-                        use_name_in_title: true,\n-                        nav: NavigationTarget {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n-                            full_range: 210..217,\n-                            name: \"foo_tests\",\n-                            kind: Module,\n-                            description: \"mod foo_tests\",\n-                        },\n-                        kind: TestMod {\n-                            path: \"foo_tests\",\n-                        },\n-                        cfg: None,\n-                    },\n                     Runnable {\n                         use_name_in_title: true,\n                         nav: NavigationTarget {\n@@ -1595,6 +1580,22 @@ foo!();\n                         },\n                         cfg: None,\n                     },\n+                    Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 210..217,\n+                            name: \"foo_tests\",\n+                            kind: Module,\n+                            description: \"mod foo_tests\",\n+                        },\n+                        kind: TestMod {\n+                            path: \"foo_tests\",\n+                        },\n+                        cfg: None,\n+                    },\n                 ]\n             \"#]],\n         );\n@@ -1671,9 +1672,24 @@ fn t0() {}\n #[test]\n fn t1() {}\n \"#,\n-            &[Test, Test, TestMod],\n+            &[TestMod, Test, Test],\n             expect![[r#\"\n                 [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 0..39,\n+                            name: \"m\",\n+                            kind: Module,\n+                        },\n+                        kind: TestMod {\n+                            path: \"m\",\n+                        },\n+                        cfg: None,\n+                    },\n                     Runnable {\n                         use_name_in_title: false,\n                         nav: NavigationTarget {\n@@ -1716,21 +1732,6 @@ fn t1() {}\n                         },\n                         cfg: None,\n                     },\n-                    Runnable {\n-                        use_name_in_title: false,\n-                        nav: NavigationTarget {\n-                            file_id: FileId(\n-                                1,\n-                            ),\n-                            full_range: 0..39,\n-                            name: \"m\",\n-                            kind: Module,\n-                        },\n-                        kind: TestMod {\n-                            path: \"m\",\n-                        },\n-                        cfg: None,\n-                    },\n                 ]\n             \"#]],\n         );"}, {"sha": "c1f23ceecaf346f8a980a4138d5dc598b7cdb53c", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=4d05d29fadea7860b90d3ec0a7ca02402e47c045", "patch": "@@ -1,6 +1,7 @@\n //! Completion of paths, i.e. `some::prefix::$0`.\n \n use hir::{ScopeDef, Trait};\n+use ide_db::famous_defs::FamousDefs;\n use rustc_hash::FxHashSet;\n use syntax::ast;\n \n@@ -23,6 +24,13 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         Some(PathCompletionCtx { qualifier: Some(ref qualifier), kind, .. }) => (qualifier, kind),\n         _ => return,\n     };\n+    let traits_in_scope = |ctx: &CompletionContext| {\n+        let mut traits_in_scope = ctx.scope.visible_traits();\n+        if let Some(drop) = FamousDefs(&ctx.sema, ctx.krate).core_ops_Drop() {\n+            traits_in_scope.remove(&drop.into());\n+        }\n+        traits_in_scope\n+    };\n \n     // special case `<_>::$0` as this doesn't resolve to anything.\n     if qualifier.path.qualifier().is_none() {\n@@ -34,8 +42,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             })\n         ) {\n             cov_mark::hit!(completion_type_anchor_empty);\n-            ctx.scope\n-                .visible_traits()\n+            traits_in_scope(ctx)\n                 .into_iter()\n                 .flat_map(|it| Trait::from(it).items(ctx.sema.db))\n                 .for_each(|item| add_assoc_item(acc, ctx, item));\n@@ -141,7 +148,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n \n             let krate = ctx.krate;\n             if let Some(krate) = krate {\n-                let traits_in_scope = ctx.scope.visible_traits();\n+                let traits_in_scope = traits_in_scope(ctx);\n                 ty.iterate_path_candidates(\n                     ctx.db,\n                     &ctx.scope,\n@@ -179,8 +186,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             if let Some(hir::Adt::Enum(e)) = ty.as_adt() {\n                 add_enum_variants(acc, ctx, e);\n             }\n-\n-            let traits_in_scope = ctx.scope.visible_traits();\n+            let traits_in_scope = traits_in_scope(ctx);\n             let mut seen = FxHashSet::default();\n             ty.iterate_path_candidates(\n                 ctx.db,"}, {"sha": "de283c705d089efc2a467a2e448f8fcdc3b0e599", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d05d29fadea7860b90d3ec0a7ca02402e47c045/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=4d05d29fadea7860b90d3ec0a7ca02402e47c045", "patch": "@@ -553,6 +553,23 @@ fn func() {\n     );\n }\n \n+#[test]\n+fn ty_qualified_no_drop() {\n+    check_empty(\n+        r#\"\n+//- minicore: drop\n+struct Foo;\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+fn func() {\n+    Foo::$0\n+}\n+\"#,\n+        expect![[r#\"\"#]],\n+    );\n+}\n+\n #[test]\n fn with_parens() {\n     check_empty("}]}