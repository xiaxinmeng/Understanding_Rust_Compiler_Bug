{"sha": "6a21f22767596fc80fa55eade9824290d14cd85a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMjFmMjI3Njc1OTZmYzgwZmE1NWVhZGU5ODI0MjkwZDE0Y2Q4NWE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-13T04:37:50Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-16T01:12:34Z"}, "message": "update the iterator tutorial", "tree": {"sha": "4a39e48686142bdbb97d4993bb3880a29467ec4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a39e48686142bdbb97d4993bb3880a29467ec4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a21f22767596fc80fa55eade9824290d14cd85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a21f22767596fc80fa55eade9824290d14cd85a", "html_url": "https://github.com/rust-lang/rust/commit/6a21f22767596fc80fa55eade9824290d14cd85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a21f22767596fc80fa55eade9824290d14cd85a/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af9ddd7563d2eb66147a9de126453034938af46a", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9ddd7563d2eb66147a9de126453034938af46a", "html_url": "https://github.com/rust-lang/rust/commit/af9ddd7563d2eb66147a9de126453034938af46a"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "1f47c3df14f89b346dd53542334f3d303f51e01f", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a21f22767596fc80fa55eade9824290d14cd85a/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a21f22767596fc80fa55eade9824290d14cd85a/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=6a21f22767596fc80fa55eade9824290d14cd85a", "patch": "@@ -112,10 +112,10 @@ iterator object. For example, vector slices several iterators available:\n \n * `iter()` and `rev_iter()`, for immutable references to the elements\n * `mut_iter()` and `mut_rev_iter()`, for mutable references to the elements\n-* `consume_iter()` and `consume_rev_iter`, to move the elements out by-value\n+* `move_iter()` and `move_rev_iter`, to move the elements out by-value\n \n A typical mutable container will implement at least `iter()`, `mut_iter()` and\n-`consume_iter()` along with the reverse variants if it maintains an order.\n+`move_iter()` along with the reverse variants if it maintains an order.\n \n ### Freezing\n \n@@ -139,9 +139,9 @@ and `&mut`.\n \n ## Iterator adaptors\n \n-The `IteratorUtil` trait implements common algorithms as methods extending\n-every `Iterator` implementation. For example, the `fold` method will accumulate\n-the items yielded by an `Iterator` into a single value:\n+The `Iterator` trait provides many common algorithms as default methods. For\n+example, the `fold` method will accumulate the items yielded by an `Iterator`\n+into a single value:\n \n ~~~\n let xs = [1, 9, 2, 3, 14, 12];\n@@ -154,14 +154,10 @@ Some adaptors return an adaptor object implementing the `Iterator` trait itself:\n ~~~\n let xs = [1, 9, 2, 3, 14, 12];\n let ys = [5, 2, 1, 8];\n-let sum = xs.iter().chain_(ys.iter()).fold(0, |a, b| a + *b);\n+let sum = xs.iter().chain(ys.iter()).fold(0, |a, b| a + *b);\n assert_eq!(sum, 57);\n ~~~\n \n-Note that some adaptors like the `chain_` method above use a trailing\n-underscore to work around an issue with method resolve. The underscores will be\n-dropped when they become unnecessary.\n-\n ## For loops\n \n The `for` keyword can be used as sugar for iterating through any iterator:\n@@ -212,7 +208,7 @@ Iterators offer generic conversion to containers with the `collect` adaptor:\n \n ~~~\n let xs = [0, 1, 1, 2, 3, 5, 8];\n-let ys = xs.rev_iter().skip(1).transform(|&x| x * 2).collect::<~[int]>();\n+let ys = xs.rev_iter().skip(1).map(|&x| x * 2).collect::<~[int]>();\n assert_eq!(ys, ~[10, 6, 4, 2, 2, 0]);\n ~~~\n \n@@ -307,13 +303,13 @@ for &x in it.invert() {\n The `rev_iter` and `mut_rev_iter` methods on vectors just return an inverted\n version of the standard immutable and mutable vector iterators.\n \n-The `chain_`, `transform`, `filter`, `filter_map` and `peek` adaptors are\n+The `chain`, `map`, `filter`, `filter_map` and `inspect` adaptors are\n `DoubleEndedIterator` implementations if the underlying iterators are.\n \n ~~~\n let xs = [1, 2, 3, 4];\n let ys = [5, 6, 7, 8];\n-let mut it = xs.iter().chain_(ys.iter()).transform(|&x| x * 2);\n+let mut it = xs.iter().chain(ys.iter()).map(|&x| x * 2);\n \n printfln!(\"%?\", it.next()); // prints `Some(2)`\n \n@@ -329,13 +325,13 @@ The `RandomAccessIterator` trait represents an iterator offering random access\n to the whole range. The `indexable` method retrieves the number of elements\n accessible with the `idx` method.\n \n-The `chain_` adaptor is an implementation of `RandomAccessIterator` if the\n+The `chain` adaptor is an implementation of `RandomAccessIterator` if the\n underlying iterators are.\n \n ~~~\n let xs = [1, 2, 3, 4, 5];\n let ys = ~[7, 9, 11];\n-let mut it = xs.iter().chain_(ys.iter());\n+let mut it = xs.iter().chain(ys.iter());\n printfln!(\"%?\", it.idx(0)); // prints `Some(&1)`\n printfln!(\"%?\", it.idx(5)); // prints `Some(&7)`\n printfln!(\"%?\", it.idx(7)); // prints `Some(&11)`"}]}