{"sha": "c8e9e52303da6dff4bc5cc4db3021d608fca6c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTllNTIzMDNkYTZkZmY0YmM1Y2M0ZGIzMDIxZDYwOGZjYTZjNzA=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-09-08T20:22:23Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-09-09T08:08:45Z"}, "message": "needless-lifetime / add test cases for nested elision sites", "tree": {"sha": "7cc9074e69ca04922b4153f2608a6e74982ea63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cc9074e69ca04922b4153f2608a6e74982ea63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e9e52303da6dff4bc5cc4db3021d608fca6c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e9e52303da6dff4bc5cc4db3021d608fca6c70", "html_url": "https://github.com/rust-lang/rust/commit/c8e9e52303da6dff4bc5cc4db3021d608fca6c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e9e52303da6dff4bc5cc4db3021d608fca6c70/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a60e5de90c7370d4fb3e6561d3cb55495cda2e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a60e5de90c7370d4fb3e6561d3cb55495cda2e2a", "html_url": "https://github.com/rust-lang/rust/commit/a60e5de90c7370d4fb3e6561d3cb55495cda2e2a"}], "stats": {"total": 100, "additions": 90, "deletions": 10}, "files": [{"sha": "548c5929c6120d464380da6034bb1b000454191b", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 59, "deletions": 9, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c8e9e52303da6dff4bc5cc4db3021d608fca6c70/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e9e52303da6dff4bc5cc4db3021d608fca6c70/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=c8e9e52303da6dff4bc5cc4db3021d608fca6c70", "patch": "@@ -259,36 +259,86 @@ mod issue4291 {\n     }\n }\n \n+mod issue2944 {\n+    trait Foo {}\n+    struct Bar {}\n+    struct Baz<'a> {\n+        bar: &'a Bar,\n+    }\n+\n+    impl<'a> Foo for Baz<'a> {}\n+    impl Bar {\n+        fn baz<'a>(&'a self) -> impl Foo + 'a {\n+            Baz { bar: self }\n+        }\n+    }\n+}\n+\n mod nested_elision_sites {\n-    // Don't lint these cases, they cause FPs.\n-    // The lint does not support nested elision sites.\n+    // issue #issue2944\n \n-    fn nested_fn_trait_bound<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n+    // closure trait bounds subject to nested elision\n+    // don't lint because they refer to outer lifetimes\n+    fn trait_fn<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n         move || i\n     }\n-\n-    fn nested_fn_mut_trait_bound<'a>(i: &'a i32) -> impl FnMut() -> &'a i32 {\n+    fn trait_fn_mut<'a>(i: &'a i32) -> impl FnMut() -> &'a i32 {\n+        move || i\n+    }\n+    fn trait_fn_once<'a>(i: &'a i32) -> impl FnOnce() -> &'a i32 {\n         move || i\n     }\n \n-    fn nested_fn_once_trait_bound<'a>(i: &'a i32) -> impl FnOnce() -> &'a i32 {\n+    // don't lint\n+    fn impl_trait_in_input_position<'a>(f: impl Fn() -> &'a i32) -> &'a i32 {\n+        f()\n+    }\n+    fn impl_trait_in_output_position<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n         move || i\n     }\n+    // lint\n+    fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n+        f(i)\n+    }\n+    fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n+        f(i)\n+    }\n \n-    fn nested_generic_fn_trait_bound<'a, T: Fn() -> &'a i32>(f: T) -> &'a i32 {\n+    // don't lint\n+    fn generics_not_elidable<'a, T: Fn() -> &'a i32>(f: T) -> &'a i32 {\n         f()\n     }\n+    // lint\n+    fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n+        f(i)\n+    }\n \n-    fn nested_where_clause_fn_trait_bound<'a, T>(f: T) -> &'a i32\n+    // don't lint\n+    fn where_clause_not_elidable<'a, T>(f: T) -> &'a i32\n     where\n         T: Fn() -> &'a i32,\n     {\n         f()\n     }\n+    // lint\n+    fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n+    where\n+        T: Fn(&i32) -> &i32,\n+    {\n+        f(i)\n+    }\n \n-    fn nested_pointer_fn<'a>(_: &'a i32) -> fn(&'a i32) -> &'a i32 {\n+    // don't lint\n+    fn pointer_fn_in_input_position<'a>(f: fn(&'a i32) -> &'a i32, i: &'a i32) -> &'a i32 {\n+        f(i)\n+    }\n+    fn pointer_fn_in_output_position<'a>(_: &'a i32) -> fn(&'a i32) -> &'a i32 {\n         |i| i\n     }\n+    // lint\n+    fn pointer_fn_elidable<'a>(f: fn(&i32) -> &i32, i: &'a i32) -> &'a i32 {\n+        f(i)\n+    }\n }\n \n fn main() {}"}, {"sha": "ac38ab8effd2e35a05d0a6a09312c926384edf6b", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c8e9e52303da6dff4bc5cc4db3021d608fca6c70/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e9e52303da6dff4bc5cc4db3021d608fca6c70/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=c8e9e52303da6dff4bc5cc4db3021d608fca6c70", "patch": "@@ -102,5 +102,35 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:271:9\n+   |\n+LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:300:5\n+   |\n+LL |     fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:303:5\n+   |\n+LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:312:5\n+   |\n+LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:324:5\n+   |\n+LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 22 previous errors\n "}]}