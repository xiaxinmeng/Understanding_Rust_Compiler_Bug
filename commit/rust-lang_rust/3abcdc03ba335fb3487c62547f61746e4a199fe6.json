{"sha": "3abcdc03ba335fb3487c62547f61746e4a199fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYmNkYzAzYmEzMzVmYjM0ODdjNjI1NDdmNjE3NDZlNGExOTlmZTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-03T23:46:45Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-03T23:46:45Z"}, "message": "Make `ast_to_token_tree` infallible\n\nIt could never return `None`, so reflect that in the return type", "tree": {"sha": "8386a83d383563308a83f4491d313be043dc94d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8386a83d383563308a83f4491d313be043dc94d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3abcdc03ba335fb3487c62547f61746e4a199fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3abcdc03ba335fb3487c62547f61746e4a199fe6", "html_url": "https://github.com/rust-lang/rust/commit/3abcdc03ba335fb3487c62547f61746e4a199fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3abcdc03ba335fb3487c62547f61746e4a199fe6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf600fc881026ab018d0a8ae09eff7e54af538b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf600fc881026ab018d0a8ae09eff7e54af538b", "html_url": "https://github.com/rust-lang/rust/commit/bcf600fc881026ab018d0a8ae09eff7e54af538b"}], "stats": {"total": 73, "additions": 32, "deletions": 41}, "files": [{"sha": "d8736c893d7b58074aceb9ddb06de0aee5d62427", "filename": "crates/cfg/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fcfg%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fcfg%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Ftests.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -8,7 +8,7 @@ fn assert_parse_result(input: &str, expected: CfgExpr) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt).unwrap()\n+        ast_to_token_tree(&tt)\n     };\n     let cfg = CfgExpr::parse(&tt);\n     assert_eq!(cfg, expected);\n@@ -18,7 +18,7 @@ fn check_dnf(input: &str, expect: Expect) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt).unwrap()\n+        ast_to_token_tree(&tt)\n     };\n     let cfg = CfgExpr::parse(&tt);\n     let actual = format!(\"#![cfg({})]\", DnfExpr::new(cfg));\n@@ -29,7 +29,7 @@ fn check_why_inactive(input: &str, opts: &CfgOptions, expect: Expect) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt).unwrap()\n+        ast_to_token_tree(&tt)\n     };\n     let cfg = CfgExpr::parse(&tt);\n     let dnf = DnfExpr::new(cfg);\n@@ -42,7 +42,7 @@ fn check_enable_hints(input: &str, opts: &CfgOptions, expected_hints: &[&str]) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt).unwrap()\n+        ast_to_token_tree(&tt)\n     };\n     let cfg = CfgExpr::parse(&tt);\n     let dnf = DnfExpr::new(cfg);"}, {"sha": "442c5fb5b384ef88f8f34fb5b3e15c7d17b40d9f", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -533,7 +533,7 @@ impl Attr {\n             };\n             Some(AttrInput::Literal(value))\n         } else if let Some(tt) = ast.token_tree() {\n-            Some(AttrInput::TokenTree(ast_to_token_tree(&tt)?.0))\n+            Some(AttrInput::TokenTree(ast_to_token_tree(&tt).0))\n         } else {\n             None\n         };"}, {"sha": "75ec4196b6e76672dde5265c969c2fcd8152884a", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -584,7 +584,7 @@ mod tests {\n                 };\n \n                 let args = macro_call.token_tree().unwrap();\n-                let parsed_args = mbe::ast_to_token_tree(&args).unwrap().0;\n+                let parsed_args = mbe::ast_to_token_tree(&args).0;\n                 let call_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macro_call));\n \n                 let arg_id = db.intern_eager_expansion({"}, {"sha": "10fe6082153134fe0e14e683f5ee5143f8e5df22", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -119,7 +119,7 @@ pub fn expand_hypothetical(\n     token_to_map: syntax::SyntaxToken,\n ) -> Option<(SyntaxNode, syntax::SyntaxToken)> {\n     let macro_file = MacroFile { macro_call_id: actual_macro_call };\n-    let (tt, tmap_1) = mbe::syntax_node_to_token_tree(hypothetical_args.syntax()).unwrap();\n+    let (tt, tmap_1) = mbe::syntax_node_to_token_tree(hypothetical_args.syntax());\n     let range =\n         token_to_map.text_range().checked_sub(hypothetical_args.syntax().text_range().start())?;\n     let token_id = tmap_1.token_by_range(range)?;\n@@ -143,10 +143,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander,\n         MacroDefKind::Declarative(ast_id) => match ast_id.to_node(db) {\n             syntax::ast::Macro::MacroRules(macro_rules) => {\n                 let arg = macro_rules.token_tree()?;\n-                let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n-                    log::warn!(\"fail on macro_rules to token tree: {:#?}\", arg);\n-                    None\n-                })?;\n+                let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n                 let rules = match MacroRules::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n@@ -159,10 +156,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander,\n             }\n             syntax::ast::Macro::MacroDef(macro_def) => {\n                 let arg = macro_def.body()?;\n-                let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n-                    log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n-                    None\n-                })?;\n+                let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n                 let rules = match MacroDef::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n@@ -202,7 +196,7 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n \n fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {\n     let arg = db.macro_arg_text(id)?;\n-    let (tt, tmap) = mbe::syntax_node_to_token_tree(&SyntaxNode::new_root(arg))?;\n+    let (tt, tmap) = mbe::syntax_node_to_token_tree(&SyntaxNode::new_root(arg));\n     Some(Arc::new((tt, tmap)))\n }\n "}, {"sha": "9705526fae1a18a4fc78edb167321f1fb89e3e1b", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -106,7 +106,7 @@ pub fn expand_eager_macro(\n     mut diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<EagerMacroId, ErrorEmitted> {\n     let parsed_args = diagnostic_sink.option_with(\n-        || Some(mbe::ast_to_token_tree(&macro_call.value.token_tree()?)?.0),\n+        || Some(mbe::ast_to_token_tree(&macro_call.value.token_tree()?).0),\n         || err(\"malformed macro invocation\"),\n     )?;\n \n@@ -161,7 +161,7 @@ pub fn expand_eager_macro(\n }\n \n fn to_subtree(node: &SyntaxNode) -> Option<tt::Subtree> {\n-    let mut subtree = mbe::syntax_node_to_token_tree(node)?.0;\n+    let mut subtree = mbe::syntax_node_to_token_tree(node).0;\n     subtree.delimiter = None;\n     Some(subtree)\n }"}, {"sha": "38707ffa5bfa8155dafdba396fb087d5d5054076", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -65,7 +65,7 @@ fn macro_rules_fixtures_tt() -> FxHashMap<String, tt::Subtree> {\n         .filter_map(ast::MacroRules::cast)\n         .map(|rule| {\n             let id = rule.name().unwrap().to_string();\n-            let (def_tt, _) = ast_to_token_tree(&rule.token_tree().unwrap()).unwrap();\n+            let (def_tt, _) = ast_to_token_tree(&rule.token_tree().unwrap());\n             (id, def_tt)\n         })\n         .collect()"}, {"sha": "bfef7f73d50462274fc2b101f733f58f73cd4569", "filename": "crates/mbe/src/expander.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Fexpander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Fexpander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -159,8 +159,7 @@ mod tests {\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n-        let (definition_tt, _) =\n-            ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n+        let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap());\n         crate::MacroRules::parse(&definition_tt).unwrap()\n     }\n \n@@ -169,8 +168,7 @@ mod tests {\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let (invocation_tt, _) =\n-            ast_to_token_tree(&macro_invocation.token_tree().unwrap()).unwrap();\n+        let (invocation_tt, _) = ast_to_token_tree(&macro_invocation.token_tree().unwrap());\n \n         expand_rules(&rules.rules, &invocation_tt)\n     }"}, {"sha": "9ba98f7fba0cb609cfe30d5cc201673c696dabeb", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -43,18 +43,18 @@ pub struct TokenMap {\n \n /// Convert the syntax tree (what user has written) to a `TokenTree` (what macro\n /// will consume).\n-pub fn ast_to_token_tree(ast: &impl ast::AstNode) -> Option<(tt::Subtree, TokenMap)> {\n+pub fn ast_to_token_tree(ast: &impl ast::AstNode) -> (tt::Subtree, TokenMap) {\n     syntax_node_to_token_tree(ast.syntax())\n }\n \n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n-pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, TokenMap)> {\n+pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> (tt::Subtree, TokenMap) {\n     let global_offset = node.text_range().start();\n     let mut c = Convertor::new(node, global_offset);\n-    let subtree = c.go()?;\n+    let subtree = c.go();\n     c.id_alloc.map.entries.shrink_to_fit();\n-    Some((subtree, c.id_alloc.map))\n+    (subtree, c.id_alloc.map)\n }\n \n // The following items are what `rustc` macro can be parsed into :\n@@ -108,7 +108,7 @@ pub fn parse_to_token_tree(text: &str) -> Option<(tt::Subtree, TokenMap)> {\n         },\n     };\n \n-    let subtree = conv.go()?;\n+    let subtree = conv.go();\n     Some((subtree, conv.id_alloc.map))\n }\n \n@@ -319,18 +319,18 @@ trait SrcToken: std::fmt::Debug {\n trait TokenConvertor {\n     type Token: SrcToken;\n \n-    fn go(&mut self) -> Option<tt::Subtree> {\n+    fn go(&mut self) -> tt::Subtree {\n         let mut subtree = tt::Subtree::default();\n         subtree.delimiter = None;\n         while self.peek().is_some() {\n             self.collect_leaf(&mut subtree.token_trees);\n         }\n         if subtree.token_trees.len() == 1 {\n             if let tt::TokenTree::Subtree(first) = &subtree.token_trees[0] {\n-                return Some(first.clone());\n+                return first.clone();\n             }\n         }\n-        Some(subtree)\n+        subtree\n     }\n \n     fn collect_leaf(&mut self, result: &mut Vec<tt::TokenTree>) {\n@@ -858,7 +858,7 @@ mod tests {\n         // - T!['}']\n         // - WHITE_SPACE\n         let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n-        let tt = ast_to_token_tree(&token_tree).unwrap().0;\n+        let tt = ast_to_token_tree(&token_tree).0;\n \n         assert_eq!(tt.delimiter_kind(), Some(tt::DelimiterKind::Brace));\n     }\n@@ -867,7 +867,7 @@ mod tests {\n     fn test_token_tree_multi_char_punct() {\n         let source_file = ast::SourceFile::parse(\"struct Foo { a: x::Y }\").ok().unwrap();\n         let struct_def = source_file.syntax().descendants().find_map(ast::Struct::cast).unwrap();\n-        let tt = ast_to_token_tree(&struct_def).unwrap().0;\n+        let tt = ast_to_token_tree(&struct_def).0;\n         token_tree_to_syntax_node(&tt, FragmentKind::Item).unwrap();\n     }\n }"}, {"sha": "3698ff3f0f43183fd3a09613382ce33f28fb7f28", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -29,8 +29,7 @@ macro_rules! impl_fixture {\n                 let macro_invocation =\n                     source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-                let (invocation_tt, _) = ast_to_token_tree(&macro_invocation.token_tree().unwrap())\n-                    .ok_or_else(|| ExpandError::ConversionError)?;\n+                let (invocation_tt, _) = ast_to_token_tree(&macro_invocation.token_tree().unwrap());\n \n                 self.rules.expand(&invocation_tt).result()\n             }\n@@ -101,7 +100,7 @@ macro_rules! impl_fixture {\n                         .descendants()\n                         .find_map(ast::TokenTree::cast)\n                         .unwrap();\n-                    let mut wrapped = ast_to_token_tree(&wrapped).unwrap().0;\n+                    let mut wrapped = ast_to_token_tree(&wrapped).0;\n                     wrapped.delimiter = None;\n                     wrapped\n                 };\n@@ -151,7 +150,7 @@ pub(crate) fn parse_macro_error(ra_fixture: &str) -> ParseError {\n \n pub(crate) fn parse_to_token_tree_by_syntax(ra_fixture: &str) -> tt::Subtree {\n     let source_file = ast::SourceFile::parse(ra_fixture).ok().unwrap();\n-    let tt = syntax_node_to_token_tree(source_file.syntax()).unwrap().0;\n+    let tt = syntax_node_to_token_tree(source_file.syntax()).0;\n \n     let parsed = parse_to_token_tree(ra_fixture).unwrap().0;\n     assert_eq!(tt, parsed);\n@@ -164,7 +163,7 @@ fn parse_macro_rules_to_tt(ra_fixture: &str) -> tt::Subtree {\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n+    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap());\n \n     let parsed = parse_to_token_tree(\n         &ra_fixture[macro_definition.token_tree().unwrap().syntax().text_range()],\n@@ -181,7 +180,7 @@ fn parse_macro_def_to_tt(ra_fixture: &str) -> tt::Subtree {\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroDef::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(&macro_definition.body().unwrap()).unwrap();\n+    let (definition_tt, _) = ast_to_token_tree(&macro_definition.body().unwrap());\n \n     let parsed =\n         parse_to_token_tree(&ra_fixture[macro_definition.body().unwrap().syntax().text_range()])"}, {"sha": "5c61a98fdf96bf9b94c57ddf4c6ffb3e3dc385c6", "filename": "crates/mbe/src/tests/rule.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -44,6 +44,6 @@ fn parse_macro_arm(arm_definition: &str) -> Result<crate::MacroRules, ParseError\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n+    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap());\n     crate::MacroRules::parse(&definition_tt)\n }"}, {"sha": "909c21532254fb65398f329b2215587e063bf1d8", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abcdc03ba335fb3487c62547f61746e4a199fe6/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=3abcdc03ba335fb3487c62547f61746e4a199fe6", "patch": "@@ -201,7 +201,7 @@ mod tests {\n         let cfg_expr = {\n             let source_file = ast::SourceFile::parse(cfg).ok().unwrap();\n             let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-            let (tt, _) = ast_to_token_tree(&tt).unwrap();\n+            let (tt, _) = ast_to_token_tree(&tt);\n             CfgExpr::parse(&tt)\n         };\n "}]}