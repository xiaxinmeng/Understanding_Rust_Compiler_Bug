{"sha": "a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5N2Y2MGVlODYxOGZkZTdiYWZlNDlkNzlhM2VhNjcwNzU4ZTZhMGM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-20T23:03:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-24T17:59:44Z"}, "message": "syntax: Make `is_path_start` precise and improve some error messages about unexpected tokens", "tree": {"sha": "ff11f35da542fcbf667cd3f70e4b32402618870b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff11f35da542fcbf667cd3f70e4b32402618870b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "html_url": "https://github.com/rust-lang/rust/commit/a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c44bea64435fd3859439a6ecab7758855a13f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c44bea64435fd3859439a6ecab7758855a13f07", "html_url": "https://github.com/rust-lang/rust/commit/6c44bea64435fd3859439a6ecab7758855a13f07"}], "stats": {"total": 161, "additions": 88, "deletions": 73}, "files": [{"sha": "7842d9dca53639697929eb43c81fb4bf810a0020", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 57, "deletions": 35, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -394,6 +394,17 @@ impl<'a> Parser<'a> {\n         Parser::token_to_string(&self.token)\n     }\n \n+    pub fn this_token_descr(&self) -> String {\n+        let s = self.this_token_to_string();\n+        if self.token.is_strict_keyword() {\n+            format!(\"keyword `{}`\", s)\n+        } else if self.token.is_reserved_keyword() {\n+            format!(\"reserved keyword `{}`\", s)\n+        } else {\n+            format!(\"`{}`\", s)\n+        }\n+    }\n+\n     pub fn unexpected_last<T>(&self, t: &token::Token) -> PResult<'a, T> {\n         let token_str = Parser::token_to_string(t);\n         let last_span = self.last_span;\n@@ -1466,7 +1477,7 @@ impl<'a> Parser<'a> {\n                  self.parse_qualified_path(PathStyle::Type)?;\n \n             TyKind::Path(Some(qself), path)\n-        } else if self.is_path_start() {\n+        } else if self.token.is_path_start() {\n             let path = self.parse_path(PathStyle::Type)?;\n             if self.check(&token::Not) {\n                 // MACRO INVOCATION\n@@ -1485,9 +1496,8 @@ impl<'a> Parser<'a> {\n             // TYPE TO BE INFERRED\n             TyKind::Infer\n         } else {\n-            let this_token_str = self.this_token_to_string();\n-            let msg = format!(\"expected type, found `{}`\", this_token_str);\n-            return Err(self.fatal(&msg[..]));\n+            let msg = format!(\"expected type, found {}\", self.this_token_descr());\n+            return Err(self.fatal(&msg));\n         };\n \n         let sp = mk_sp(lo, self.last_span.hi);\n@@ -1604,12 +1614,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Matches token_lit = LIT_INTEGER | ...\n-    pub fn lit_from_token(&self, tok: &token::Token) -> PResult<'a, LitKind> {\n-        match *tok {\n+    pub fn parse_lit_token(&mut self) -> PResult<'a, LitKind> {\n+        let out = match self.token {\n             token::Interpolated(token::NtExpr(ref v)) => {\n                 match v.node {\n-                    ExprKind::Lit(ref lit) => { Ok(lit.node.clone()) }\n-                    _ => { return self.unexpected_last(tok); }\n+                    ExprKind::Lit(ref lit) => { lit.node.clone() }\n+                    _ => { return self.unexpected_last(&self.token); }\n                 }\n             }\n             token::Literal(lit, suf) => {\n@@ -1624,13 +1634,13 @@ impl<'a> Parser<'a> {\n                         (false, parse::integer_lit(&s.as_str(),\n                                                    suf.as_ref().map(|s| s.as_str()),\n                                                    &self.sess.span_diagnostic,\n-                                                   self.last_span))\n+                                                   self.span))\n                     }\n                     token::Float(s) => {\n                         (false, parse::float_lit(&s.as_str(),\n                                                  suf.as_ref().map(|s| s.as_str()),\n                                                   &self.sess.span_diagnostic,\n-                                                 self.last_span))\n+                                                 self.span))\n                     }\n \n                     token::Str_(s) => {\n@@ -1652,14 +1662,17 @@ impl<'a> Parser<'a> {\n                 };\n \n                 if suffix_illegal {\n-                    let sp = self.last_span;\n+                    let sp = self.span;\n                     self.expect_no_suffix(sp, &format!(\"{} literal\", lit.short_name()), suf)\n                 }\n \n-                Ok(out)\n+                out\n             }\n-            _ => { return self.unexpected_last(tok); }\n-        }\n+            _ => { return self.unexpected_last(&self.token); }\n+        };\n+\n+        self.bump();\n+        Ok(out)\n     }\n \n     /// Matches lit = true | false | token_lit\n@@ -1670,8 +1683,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(keywords::False) {\n             LitKind::Bool(false)\n         } else {\n-            let token = self.bump_and_get();\n-            let lit = self.lit_from_token(&token)?;\n+            let lit = self.parse_lit_token()?;\n             lit\n         };\n         Ok(codemap::Spanned { node: lit, span: mk_sp(lo, self.last_span.hi) })\n@@ -2338,7 +2350,7 @@ impl<'a> Parser<'a> {\n                     let mut db = self.fatal(\"expected expression, found statement (`let`)\");\n                     db.note(\"variable declaration using `let` is a statement\");\n                     return Err(db);\n-                } else if self.is_path_start() {\n+                } else if self.token.is_path_start() {\n                     let pth = self.parse_path(PathStyle::Expr)?;\n \n                     // `!`, as an operator, is prefix, so we know this isn't that\n@@ -2419,10 +2431,18 @@ impl<'a> Parser<'a> {\n                     hi = pth.span.hi;\n                     ex = ExprKind::Path(None, pth);\n                 } else {\n-                    // other literal expression\n-                    let lit = self.parse_lit()?;\n-                    hi = lit.span.hi;\n-                    ex = ExprKind::Lit(P(lit));\n+                    match self.parse_lit() {\n+                        Ok(lit) => {\n+                            hi = lit.span.hi;\n+                            ex = ExprKind::Lit(P(lit));\n+                        }\n+                        Err(mut err) => {\n+                            err.cancel();\n+                            let msg = format!(\"expected expression, found {}\",\n+                                              self.this_token_descr());\n+                            return Err(self.fatal(&msg));\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -3567,7 +3587,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> {\n-        if self.is_path_start() {\n+        if self.token.is_path_start() {\n             let lo = self.span.lo;\n             let (qself, path) = if self.eat_lt() {\n                 // Parse a qualified path\n@@ -3585,12 +3605,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn is_path_start(&self) -> bool {\n-        (self.token == token::Lt || self.token == token::ModSep\n-            || self.token.is_ident() || self.token.is_path())\n-            && !self.token.is_keyword(keywords::True) && !self.token.is_keyword(keywords::False)\n-    }\n-\n     /// Parse a pattern.\n     pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> {\n         maybe_whole!(self, NtPat);\n@@ -3641,7 +3655,7 @@ impl<'a> Parser<'a> {\n                 // Parse box pat\n                 let subpat = self.parse_pat()?;\n                 pat = PatKind::Box(subpat);\n-            } else if self.is_path_start() {\n+            } else if self.token.is_path_start() {\n                 // Parse pattern starting with a path\n                 if self.token.is_ident() && self.look_ahead(1, |t| *t != token::DotDotDot &&\n                         *t != token::OpenDelim(token::Brace) &&\n@@ -3731,12 +3745,20 @@ impl<'a> Parser<'a> {\n                 }\n             } else {\n                 // Try to parse everything else as literal with optional minus\n-                let begin = self.parse_pat_literal_maybe_minus()?;\n-                if self.eat(&token::DotDotDot) {\n-                    let end = self.parse_pat_range_end()?;\n-                    pat = PatKind::Range(begin, end);\n-                } else {\n-                    pat = PatKind::Lit(begin);\n+                match self.parse_pat_literal_maybe_minus() {\n+                    Ok(begin) => {\n+                        if self.eat(&token::DotDotDot) {\n+                            let end = self.parse_pat_range_end()?;\n+                            pat = PatKind::Range(begin, end);\n+                        } else {\n+                            pat = PatKind::Lit(begin);\n+                        }\n+                    }\n+                    Err(mut err) => {\n+                        err.cancel();\n+                        let msg = format!(\"expected pattern, found {}\", self.this_token_descr());\n+                        return Err(self.fatal(&msg));\n+                    }\n                 }\n             }\n           }"}, {"sha": "fcb6c3539db5931be0219ceee5f7f700c2f8111d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -243,6 +243,11 @@ impl Token {\n         self.is_keyword(keywords::Const)\n     }\n \n+    pub fn is_path_start(&self) -> bool {\n+        self == &ModSep || self == &Lt || self.is_path() ||\n+        self.is_path_segment_keyword() || self.is_ident() && !self.is_any_keyword()\n+    }\n+\n     /// Maps a token to its corresponding binary operator.\n     pub fn to_binop(&self) -> Option<BinOpKind> {\n         match *self {"}, {"sha": "e889d35477059c9ac69f501f81a58c271ae03972", "filename": "src/test/compile-fail/fail-simple.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// error-pattern:unexpected token\n fn main() {\n-  panic!(@);\n+    panic!(@); //~ ERROR expected expression, found `@`\n }"}, {"sha": "beaf9e5059fa232bead2bb0823e178e9f319e3b3", "filename": "src/test/compile-fail/issue-10636-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fissue-10636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fissue-10636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10636-2.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -15,4 +15,4 @@ pub fn trace_option(option: Option<isize>) {\n     option.map(|some| 42; //~ NOTE: unclosed delimiter\n                           //~^ ERROR: expected one of\n } //~ ERROR: incorrect close delimiter\n-//~^ ERROR: unexpected token\n+//~^ ERROR: expected expression, found `)`"}, {"sha": "cea52b11c5ded3606b350fd4001cc289858c1dbb", "filename": "src/test/compile-fail/issue-31804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fissue-31804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fissue-31804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31804.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -13,4 +13,4 @@\n \n fn main() {\n     let\n-} //~ ERROR unexpected token: `}`\n+} //~ ERROR expected pattern, found `}`"}, {"sha": "5d07f0747ff435316db7367cd4ea210baa74e02d", "filename": "src/test/compile-fail/macro-context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fmacro-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fmacro-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-context.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -12,7 +12,7 @@\n \n // (typeof used because it's surprisingly hard to find an unparsed token after a stmt)\n macro_rules! m {\n-    () => ( i ; typeof );   //~ ERROR `typeof` is a reserved keyword\n+    () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n                             //~| ERROR macro expansion ignores token `typeof`\n                             //~| ERROR macro expansion ignores token `;`\n                             //~| ERROR macro expansion ignores token `;`"}, {"sha": "8d515622e53ff5aa0f0967d99575c3f3a7c9822e", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -19,7 +19,7 @@ macro_rules! ignored_item {\n }\n \n macro_rules! ignored_expr {\n-    () => ( 1,  //~ ERROR unexpected token: `,`\n+    () => ( 1,  //~ ERROR expected expression, found `,`\n             2 )\n }\n "}, {"sha": "bcda61e363def603cda29af5e64f29c479caae54", "filename": "src/test/compile-fail/reserved-become.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Freserved-become.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Freserved-become.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freserved-become.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let become = 0;\n-    //~^ ERROR `become` is a reserved keyword\n+    //~^ ERROR expected pattern, found reserved keyword `become`\n }"}, {"sha": "f5fecf3e1740a8197d0d3f3d2386dac38f1f9227", "filename": "src/test/compile-fail/token-error-correct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -13,8 +13,10 @@\n fn main() {\n     foo(bar(; //~ NOTE: unclosed delimiter\n     //~^ NOTE: unclosed delimiter\n-    //~^^ ERROR: unexpected token: `;`\n+    //~^^ ERROR: expected expression, found `;`\n     //~^^^ ERROR: unresolved name `bar`\n     //~^^^^ ERROR: unresolved name `foo`\n+    //~^^^^^ ERROR: expected one of `)`, `,`, `.`, `<`, `?`\n } //~ ERROR: incorrect close delimiter: `}`\n //~^ ERROR: incorrect close delimiter: `}`\n+//~^^ ERROR: expected expression, found `)`"}, {"sha": "346cf1ec555d3853776c0e8ff425e058eb69f200", "filename": "src/test/compile-fail/vec-macro-with-comma-only.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fvec-macro-with-comma-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fcompile-fail%2Fvec-macro-with-comma-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-macro-with-comma-only.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    vec!(,); //~ ERROR unexpected token\n+    vec!(,); //~ ERROR expected expression, found `,`\n }"}, {"sha": "431a917c2d9f4cd9f76633c4a4e48f73e4d9d55f", "filename": "src/test/parse-fail/issue-14303-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fissue-14303-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fissue-14303-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-14303-path.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -12,4 +12,4 @@\n \n fn bar<'a, T>(x: mymodule::X<'a, T, 'b, 'c>) {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n-//~^^ ERROR unexpected token\n+//~^^ ERROR expected pattern, found `'c`"}, {"sha": "246941ff2597dace033288dc3ea1fb70d8579ea4", "filename": "src/test/parse-fail/issue-32505.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fissue-32505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fissue-32505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-32505.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -Z parse-only -Z continue-parse-after-error\n \n pub fn test() {\n-    foo(|_|) //~ ERROR unexpected token: `)`\n+    foo(|_|) //~ ERROR expected expression, found `)`\n }\n \n fn main() { }"}, {"sha": "2db5a5c583ac33b55366b22c92d4a78628b2f1b3", "filename": "src/test/parse-fail/keyword-abstract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-abstract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-abstract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fkeyword-abstract.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    let abstract = (); //~ ERROR `abstract` is a reserved keyword\n+    let abstract = (); //~ ERROR expected pattern, found reserved keyword `abstract`\n }"}, {"sha": "be29a739443e60581e793703d66828a44af1326e", "filename": "src/test/parse-fail/keyword-final.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-final.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-final.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fkeyword-final.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    let final = (); //~ ERROR `final` is a reserved keyword\n+    let final = (); //~ ERROR expected pattern, found reserved keyword `final`\n }"}, {"sha": "60333762b33e087e848de71688c2d6b544c638b5", "filename": "src/test/parse-fail/keyword-override.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fkeyword-override.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    let override = (); //~ ERROR `override` is a reserved keyword\n+    let override = (); //~ ERROR expected pattern, found reserved keyword `override`\n }"}, {"sha": "40e26bd375ae50b8efe12a52af0fe0832bb3a972", "filename": "src/test/parse-fail/keyword-typeof.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-typeof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeyword-typeof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fkeyword-typeof.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    let typeof = (); //~ ERROR `typeof` is a reserved keyword\n+    let typeof = (); //~ ERROR expected pattern, found reserved keyword `typeof`\n }"}, {"sha": "bb8a1dfdb19063485201351b6b11250080446486", "filename": "src/test/parse-fail/keywords-followed-by-double-colon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeywords-followed-by-double-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fkeywords-followed-by-double-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fkeywords-followed-by-double-colon.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     struct::foo();  //~ ERROR expected identifier\n-    mut::baz(); //~ ERROR expected identifier\n+    mut::baz(); //~ ERROR expected expression, found keyword `mut`\n }"}, {"sha": "e8cfb77f059634aa77b584cf2c08b6883e7dd4fd", "filename": "src/test/parse-fail/match-arrows-block-then-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fmatch-arrows-block-then-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fmatch-arrows-block-then-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmatch-arrows-block-then-binop.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -14,6 +14,6 @@ fn main() {\n \n     match 0 {\n       0 => {\n-      } + 5 //~ ERROR unexpected token: `+`\n+      } + 5 //~ ERROR expected pattern, found `+`\n     }\n }"}, {"sha": "648c46d246cbcb026f7734392a5544cfcad8b6c3", "filename": "src/test/parse-fail/obsolete-proc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -12,9 +12,8 @@\n \n // Test that we generate obsolete syntax errors around usages of `proc`.\n \n-fn foo(p: proc()) { } //~ ERROR `proc` is a reserved keyword\n+fn foo(p: proc()) { } //~ ERROR expected type, found reserved keyword `proc`\n \n-fn bar() { proc() 1; } //~ ERROR `proc` is a reserved keyword\n-                       //~^ ERROR expected\n+fn bar() { proc() 1; } //~ ERROR expected expression, found reserved keyword `proc`\n \n fn main() { }"}, {"sha": "6e99f8b3eeadc74f693c108b270c61fa06fdb36c", "filename": "src/test/parse-fail/removed-syntax-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mode.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -10,4 +10,4 @@\n \n // compile-flags: -Z parse-only\n \n-fn f(+x: isize) {} //~ ERROR unexpected token: `+`\n+fn f(+x: isize) {} //~ ERROR expected pattern, found `+`"}, {"sha": "7e5bd27b497cbe1eabba462dc65ac1269246c806", "filename": "src/test/parse-fail/removed-syntax-mut-vec-expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-expr.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -11,7 +11,5 @@\n // compile-flags: -Z parse-only\n \n fn f() {\n-    let v = [mut 1, 2, 3, 4];\n-    //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `!`, `,`, `.`, `::`, `;`, `?`, `]`, `{`, or an operator, found `1`\n+    let v = [mut 1, 2, 3, 4]; //~ ERROR expected expression, found keyword `mut`\n }"}, {"sha": "0cdf1981a231bd82759aa7785db4b78bf3dd31ba", "filename": "src/test/parse-fail/removed-syntax-mut-vec-ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-ty.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -10,6 +10,4 @@\n \n // compile-flags: -Z parse-only\n \n-type v = [mut isize];\n-    //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `]`, found `isize`\n+type v = [mut isize]; //~ ERROR expected type, found keyword `mut`"}, {"sha": "b16c77ab6b5befbe10505abf556f2773758d0389", "filename": "src/test/parse-fail/removed-syntax-uniq-mut-expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-expr.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -11,7 +11,5 @@\n // compile-flags: -Z parse-only\n \n fn f() {\n-    let a_box = box mut 42;\n-    //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `42`\n+    let a_box = box mut 42; //~ ERROR expected expression, found keyword `mut`\n }"}, {"sha": "9bd8dc9b11b216cf9074e55b656095c23988cfd7", "filename": "src/test/parse-fail/removed-syntax-uniq-mut-ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-ty.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -10,6 +10,4 @@\n \n // compile-flags: -Z parse-only\n \n-type mut_box = Box<mut isize>;\n-    //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `isize`\n+type mut_box = Box<mut isize>; //~ ERROR expected type, found keyword `mut`"}, {"sha": "f3af8740be9483f23a73254f3e56838107e67725", "filename": "src/test/parse-fail/unsized2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60ee8618fde7bafe49d79a3ea670758e6a0c/src%2Ftest%2Fparse-fail%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Funsized2.rs?ref=a97f60ee8618fde7bafe49d79a3ea670758e6a0c", "patch": "@@ -15,8 +15,5 @@\n fn f<X>() {}\n \n pub fn main() {\n-    f<type>();\n-    //~^ ERROR expected identifier, found keyword `type`\n-    //~^^ ERROR: chained comparison\n-    //~^^^ HELP: use `::<\n+    f<type>(); //~ ERROR expected expression, found keyword `type`\n }"}]}