{"sha": "af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNGQ2YWU3NmIwNWQ0ZWRiOWQ3MDc0Yjk3MTYwMGE0NDdjOWM5YTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-23T00:37:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-23T00:37:27Z"}, "message": "Add ABI tagging to crates, adjust rustc output and runtime stack-frame setup so access to argv works.", "tree": {"sha": "20b65962db38b2c2cddd0eea9ba7563584fec0d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b65962db38b2c2cddd0eea9ba7563584fec0d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "html_url": "https://github.com/rust-lang/rust/commit/af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01c2761769ab93682afec9101b4896a7253b5251", "url": "https://api.github.com/repos/rust-lang/rust/commits/01c2761769ab93682afec9101b4896a7253b5251", "html_url": "https://github.com/rust-lang/rust/commit/01c2761769ab93682afec9101b4896a7253b5251"}], "stats": {"total": 139, "additions": 97, "deletions": 42}, "files": [{"sha": "89e308bfab971c2d4360814a25ebe2ff06cf9727", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -110,23 +110,33 @@ let indirect_args_elt_closure = 0;;\n (* Current worst case is by vec grow glue *)\n let worst_case_glue_call_args = 8;;\n \n+(* \n+ * ABI tags used to inform the runtime which sort of frame to set up for new\n+ * spawned functions. FIXME: There is almost certainly a better abstraction to\n+ * use.\n+ *)\n+let abi_x86_rustboot_cdecl = 1;;\n+let abi_x86_rustc_fastcall = 2;;\n+\n type abi =\n-  {\n-    abi_word_sz: int64;\n-    abi_word_bits: Il.bits;\n-    abi_word_ty: Common.ty_mach;\n+    {\n+      abi_word_sz: int64;\n+      abi_word_bits: Il.bits;\n+      abi_word_ty: Common.ty_mach;\n+\n+      abi_tag: int;\n \n-    abi_has_pcrel_data: bool;\n-    abi_has_pcrel_code: bool;\n+      abi_has_pcrel_data: bool;\n+      abi_has_pcrel_code: bool;\n \n-    abi_n_hardregs: int;\n-    abi_str_of_hardreg: (int -> string);\n+      abi_n_hardregs: int;\n+      abi_str_of_hardreg: (int -> string);\n \n-    abi_emit_target_specific: (Il.emitter -> Il.quad -> unit);\n-    abi_constrain_vregs: (Il.quad -> (Il.vreg,Bits.t) Hashtbl.t -> unit);\n+      abi_emit_target_specific: (Il.emitter -> Il.quad -> unit);\n+      abi_constrain_vregs: (Il.quad -> (Il.vreg,Bits.t) Hashtbl.t -> unit);\n \n-    abi_emit_fn_prologue: (Il.emitter\n-                           -> Common.size        (* framesz *)\n+      abi_emit_fn_prologue: (Il.emitter\n+                             -> Common.size        (* framesz *)\n                              -> Common.size      (* callsz  *)\n                                -> Common.nabi\n                                  -> Common.fixup (* grow_task *)"}, {"sha": "49b660be5aef718d0a9ba0ef9e79211fa430cae5", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -1851,6 +1851,8 @@ let (abi:Abi.abi) =\n     Abi.abi_word_bits = word_bits;\n     Abi.abi_word_ty = word_ty;\n \n+    Abi.abi_tag = Abi.abi_x86_rustboot_cdecl;\n+\n     Abi.abi_has_pcrel_data = false;\n     Abi.abi_has_pcrel_code = true;\n "}, {"sha": "bbf49e83b3d9bd116fe6f3d672fc65035f503c71", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -2727,6 +2727,7 @@ let trans_visitor\n                   [|\n                     Il.Cell new_task;\n                     exit_task_glue_fptr;\n+                     (imm (Int64.of_int abi.Abi.abi_tag));\n                     fptr_operand;\n                     callsz\n                   |];\n@@ -2739,6 +2740,7 @@ let trans_visitor\n                    [|\n                      Il.Cell new_task;\n                      exit_task_glue_fptr;\n+                     (imm (Int64.of_int abi.Abi.abi_tag));\n                      fptr_operand;\n                      callsz\n                    |];\n@@ -6183,6 +6185,8 @@ let trans_visitor\n             tab_sz cx.ctxt_required_rust_sym_num;\n             tab_sz cx.ctxt_required_c_sym_num;\n             tab_sz cx.ctxt_required_lib_num;\n+\n+            Asm.WORD (word_ty_mach, Asm.IMM (Int64.of_int abi.Abi.abi_tag));\n           |]))\n     in\n "}, {"sha": "f41f6e205c969d4c6cc352972f031a461d6cd19a", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -60,6 +60,9 @@ const int worst_case_glue_call_args = 7;\n \n const int n_upcall_glues = 7;\n \n+const int abi_x86_rustboot_cdecl = 1;\n+const int abi_x86_rustc_fastcall = 2;\n+\n fn memcpy_glue_name() -> str {\n     ret \"rust_memcpy_glue\";\n }"}, {"sha": "10227df7ca562adc6c63fd35a8f478b2101b1bd6", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -98,12 +98,12 @@ fn rust_activate_glue() -> vec[str] {\n          *      | esi    |\n          *      | ebx    | <-- current task->rust_sp == current esp\n          *\n-         * \n+         *\n          *      This is a problem. If we return to \"esp <- task->rust_sp\" it\n          *      will push esp back down by 5 words. This manifests as a rust\n          *      stack that grows by 5 words on each yield/reactivate. Not\n          *      good.\n-         * \n+         *\n          *      So what we do here is just adjust task->rust_sp up 5 words as\n          *      well, to mirror the movement in esp we're about to\n          *      perform. That way the \"esp <- task->rust_sp\" we 'ret' to below"}, {"sha": "4a672f49139634d5c570acd18d16e6852c33b941", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -345,7 +345,8 @@ fn T_crate(type_names tn) -> TypeRef {\n                           T_int(),      // size_t main_exit_task_glue_off\n                           T_int(),      // int n_rust_syms\n                           T_int(),      // int n_c_syms\n-                          T_int()       // int n_libs\n+                          T_int(),      // int n_libs\n+                          T_int()       // uintptr_t abi_tag\n                           ));\n     tn.associate(s, t);\n     ret t;\n@@ -4545,7 +4546,7 @@ fn trans_exit_task_glue(@crate_ctxt cx) {\n     let vec[ValueRef] V_args = vec();\n \n     auto llfn = cx.glues.exit_task_glue;\n-    let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 0u);\n+    let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 3u);\n     auto fcx = @rec(llfn=llfn,\n                     lltaskptr=lltaskptr,\n                     llenv=C_null(T_opaque_closure_ptr(cx.tn)),\n@@ -4596,7 +4597,8 @@ fn create_crate_constant(@crate_ctxt cx) {\n                      exit_task_glue_off,  // size_t main_exit_task_glue_off\n                      C_null(T_int()),     // int n_rust_syms\n                      C_null(T_int()),     // int n_c_syms\n-                     C_null(T_int())      // int n_libs\n+                     C_null(T_int()),     // int n_libs\n+                     C_int(abi.abi_x86_rustc_fastcall) // uintptr_t abi_tag\n                      ));\n \n     llvm.LLVMSetInitializer(cx.crate_ptr, crate_val);\n@@ -4810,7 +4812,10 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n               * this is the signature required to retrieve it.\n               */\n              exit_task_glue = decl_cdecl_fn(llmod, abi.exit_task_glue_name(),\n-                                            T_fn(vec(T_taskptr(tn)),\n+                                            T_fn(vec(T_int(),\n+                                                     T_int(),\n+                                                     T_int(),\n+                                                     T_taskptr(tn)),\n                                                  T_void())),\n \n              upcall_glues ="}, {"sha": "46fcb22ea0b10c61a7fb7dca24e7879650cfa8ec", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -78,7 +78,7 @@ command_line_args : public dom_owned<command_line_args>\n \n extern \"C\" CDECL int\n rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n-    char **argv) {\n+           char **argv) {\n \n     rust_srv *srv = new rust_srv();\n     rust_kernel *kernel = new rust_kernel(srv);\n@@ -87,7 +87,8 @@ rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n     rust_dom *dom = handle->referent();\n     command_line_args *args = new (dom) command_line_args(dom, argc, argv);\n \n-    dom->log(rust_log::DOM, \"startup: %d args\", args->argc);\n+    dom->log(rust_log::DOM, \"startup: %d args in 0x%\" PRIxPTR,\n+             args->argc, (uintptr_t)args->args);\n     for (int i = 0; i < args->argc; i++) {\n         dom->log(rust_log::DOM,\n             \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n@@ -99,7 +100,8 @@ rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n \n     uintptr_t main_args[4] = {0, 0, 0, (uintptr_t)args->args};\n     dom->root_task->start(crate->get_exit_task_glue(),\n-        main_fn, (uintptr_t)&main_args, sizeof(main_args));\n+                          crate->abi_tag, main_fn,\n+                          (uintptr_t)&main_args, sizeof(main_args));\n     int ret = dom->start_main_loop();\n     delete args;\n     kernel->destroy_domain(dom);"}, {"sha": "42b61801f53f7b6ade8e4a96c24b9235333e3f65", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -88,6 +88,10 @@ static size_t const TIME_SLICE_IN_MS = 10;\n \n static intptr_t const CONST_REFCOUNT = 0x7badface;\n \n+// ABI tags for rust_start, rust_task::start and friends.\n+static uintptr_t const ABI_X86_RUSTBOOT_CDECL = 1;\n+static uintptr_t const ABI_X86_RUSTC_FASTCALL = 2;\n+\n // This accounts for logging buffers.\n \n static size_t const BUF_BYTES = 2048;\n@@ -241,6 +245,8 @@ class rust_crate {\n     size_t n_c_syms;\n     size_t n_libs;\n \n+    uintptr_t abi_tag;\n+\n     // Crates are immutable, constructed by the compiler.\n \n     uintptr_t get_image_base() const;"}, {"sha": "1afbfdd6b3b8140c5e69573d1f178187eaa26c42", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -123,6 +123,7 @@ rust_task::~rust_task()\n \n void\n rust_task::start(uintptr_t exit_task_glue,\n+                 uintptr_t spawnee_abi,\n                  uintptr_t spawnee_fn,\n                  uintptr_t args,\n                  size_t callsz)\n@@ -147,39 +148,46 @@ rust_task::start(uintptr_t exit_task_glue,\n     // The exit_task_glue frame we synthesize above the frame we activate:\n     *spp-- = (uintptr_t) 0;          // closure-or-obj\n     *spp-- = (uintptr_t) this;       // task\n-    *spp-- = (uintptr_t) 0;          // output\n-    *spp-- = (uintptr_t) 0;          // retpc\n+    *spp-- = (uintptr_t) 0x0;        // output\n+    *spp-- = (uintptr_t) 0x0;        // retpc\n \n     uintptr_t exit_task_frame_base;\n \n-    for (size_t j = 0; j < n_callee_saves; ++j) {\n+    if (spawnee_abi == ABI_X86_RUSTBOOT_CDECL) {\n+        for (size_t j = 0; j < n_callee_saves; ++j) {\n \n-        // We want 'frame_base' to point to the old fp in this (exit-task)\n-        // frame, because we're going to inject this frame-pointer into the\n-        // callee-save frame pointer value in the *next* (spawnee) frame. A\n-        // cheap trick, but this means the spawnee frame will restore the\n-        // proper frame pointer of the glue frame as it runs its epilogue.\n-        if (j == callee_save_fp)\n-            exit_task_frame_base = (uintptr_t)spp;\n+            // We want 'frame_base' to point to the old fp in this (exit-task)\n+            // frame, because we're going to inject this frame-pointer into\n+            // the callee-save frame pointer value in the *next* (spawnee)\n+            // frame. A cheap trick, but this means the spawnee frame will\n+            // restore the proper frame pointer of the glue frame as it runs\n+            // its epilogue.\n+            if (j == callee_save_fp)\n+                exit_task_frame_base = (uintptr_t)spp;\n \n-        *spp-- = 0;\n-    }\n+            *spp-- = 0;\n+        }\n \n-    *spp-- = (uintptr_t) dom->root_crate;  // crate ptr\n-    *spp-- = (uintptr_t) 0;                // frame_glue_fns\n+        *spp-- = (uintptr_t) dom->root_crate;  // crate ptr\n+        *spp-- = (uintptr_t) 0;                // frame_glue_fns\n+    }\n \n     // Copy args from spawner to spawnee.\n     if (args)  {\n         uintptr_t *src = (uintptr_t *)args;\n         src += 1;                  // spawn-call output slot\n         src += 1;                  // spawn-call task slot\n         src += 1;                  // spawn-call closure-or-obj slot\n+\n+        // Undo previous sp-- so we're pointing at the last word pushed.\n+        ++spp;\n+\n         // Memcpy all but the task, output and env pointers\n         callsz -= (3 * sizeof(uintptr_t));\n         spp = (uintptr_t*) (((uintptr_t)spp) - callsz);\n         memcpy(spp, src, callsz);\n \n-        // Move sp down to point to task cell.\n+        // Move sp down to point to last implicit-arg cell (env).\n         spp--;\n     } else {\n         // We're at root, starting up.\n@@ -188,10 +196,18 @@ rust_task::start(uintptr_t exit_task_glue,\n \n     // The *implicit* incoming args to the spawnee frame we're\n     // activating:\n+    *spp-- = (uintptr_t) 0x0;               // closure-or-obj\n+\n+    if (spawnee_abi == ABI_X86_RUSTBOOT_CDECL) {\n+        // in CDECL mode we write the task + outptr to the spawnee stack.\n+        *spp-- = (uintptr_t) this;            // task\n+        *spp-- = (uintptr_t) 0;               // output addr\n+    } else {\n+        // in FASTCALL mode we don't, the outptr will be in ecx and the task\n+        // in edx, and the activate_glue will make sure to set that up.\n+        I(dom, spawnee_abi == ABI_X86_RUSTC_FASTCALL);\n+    }\n \n-    *spp-- = (uintptr_t) 0;               // closure-or-obj\n-    *spp-- = (uintptr_t) this;            // task\n-    *spp-- = (uintptr_t) 0;               // output addr\n     *spp-- = (uintptr_t) exit_task_glue;  // retpc\n \n     // The context the activate_glue needs to switch stack."}, {"sha": "5318ab71edfe31cdb6a1fac702958393d4ba0a60", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -56,6 +56,7 @@ rust_task : public maybe_proxy<rust_task>,\n     ~rust_task();\n \n     void start(uintptr_t exit_task_glue,\n+               uintptr_t spawnee_abi,\n                uintptr_t spawnee_fn,\n                uintptr_t args,\n                size_t callsz);"}, {"sha": "1dba11024f417fa924596c29a070fced39fb7be4", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -559,6 +559,7 @@ extern \"C\" CDECL rust_task *\n upcall_start_task(rust_task *spawner,\n                   rust_task *task,\n                   uintptr_t exit_task_glue,\n+                  uintptr_t spawnee_abi,\n                   uintptr_t spawnee_fn,\n                   size_t callsz) {\n     LOG_UPCALL_ENTRY(spawner);\n@@ -570,7 +571,8 @@ upcall_start_task(rust_task *spawner,\n              \", spawnee 0x%\" PRIxPTR\n              \", callsz %\" PRIdPTR \")\", task->name, task, exit_task_glue,\n              spawnee_fn, callsz);\n-    task->start(exit_task_glue, spawnee_fn, spawner->rust_sp, callsz);\n+    task->start(exit_task_glue, spawnee_abi, spawnee_fn,\n+                spawner->rust_sp, callsz);\n     return task;\n }\n \n@@ -623,16 +625,19 @@ extern \"C\" CDECL maybe_proxy<rust_task> *\n upcall_start_thread(rust_task *task,\n                     rust_proxy<rust_task> *child_task_proxy,\n                     uintptr_t exit_task_glue,\n+                    uintptr_t spawnee_abi,\n                     uintptr_t spawnee_fn,\n                     size_t callsz) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *parenet_dom = task->dom;\n     rust_handle<rust_task> *child_task_handle = child_task_proxy->handle();\n     task->log(rust_log::UPCALL | rust_log::MEM | rust_log::TASK,\n               \"exit_task_glue: \" PTR \", spawnee_fn \" PTR\n-              \", callsz %\" PRIdPTR \")\", exit_task_glue, spawnee_fn, callsz);\n+              \", callsz %\" PRIdPTR \")\",\n+              exit_task_glue, spawnee_fn, callsz);\n     rust_task *child_task = child_task_handle->referent();\n-    child_task->start(exit_task_glue, spawnee_fn, task->rust_sp, callsz);\n+    child_task->start(exit_task_glue, spawnee_abi, spawnee_fn,\n+                      task->rust_sp, callsz);\n #if defined(__WIN32__)\n     HANDLE thread;\n     thread = CreateThread(NULL, 0, rust_thread_start, child_task->dom, 0,"}, {"sha": "e0e24156e6f1708638adf44d4daede575622cf37", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/af4d6ae76b05d4edb9d7074b971600a447c9c9a4/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=af4d6ae76b05d4edb9d7074b971600a447c9c9a4", "patch": "@@ -54,6 +54,7 @@ rust_task_test::worker::run() {\n         kernel->create_domain(crate, \"test\");\n     rust_dom *domain = handle->referent();\n     domain->root_task->start(crate->get_exit_task_glue(),\n+                             ABI_X86_RUSTBOOT_CDECL,\n                              (uintptr_t)&task_entry, (uintptr_t)NULL, 0);\n     domain->start_main_loop();\n     kernel->destroy_domain(domain);"}]}