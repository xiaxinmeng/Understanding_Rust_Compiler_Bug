{"sha": "69719df6116b584b71ee5a8d22974835c33b13be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NzE5ZGY2MTE2YjU4NGI3MWVlNWE4ZDIyOTc0ODM1YzMzYjEzYmU=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-01-13T06:28:29Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-27T07:01:41Z"}, "message": "test inclusive ranges\n\nMostly copy the tests from half-open ranges, adding some more for\nDoubleEndedIterator and ExactSizeIterator.\n\nAlso thoroughly (I think) test that the feature gates are working.", "tree": {"sha": "3654bc56fc386c423010622e79c2a0d60c354610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3654bc56fc386c423010622e79c2a0d60c354610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69719df6116b584b71ee5a8d22974835c33b13be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69719df6116b584b71ee5a8d22974835c33b13be", "html_url": "https://github.com/rust-lang/rust/commit/69719df6116b584b71ee5a8d22974835c33b13be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69719df6116b584b71ee5a8d22974835c33b13be/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a4cb32121bed9165f9bac696953f055f691aef", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a4cb32121bed9165f9bac696953f055f691aef", "html_url": "https://github.com/rust-lang/rust/commit/37a4cb32121bed9165f9bac696953f055f691aef"}], "stats": {"total": 236, "additions": 236, "deletions": 0}, "files": [{"sha": "630679f27e3854df26ed1b857280f79a96e11ea8", "filename": "src/test/compile-fail/range_inclusive_gate.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs?ref=69719df6116b584b71ee5a8d22974835c33b13be", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure that #![feature(inclusive_range)] is required.\n+\n+#![feature(inclusive_range_syntax)]\n+// #![feature(inclusive_range)]\n+\n+pub fn main() {\n+    let _: std::ops::RangeInclusive<_> = 1...10;\n+    //~^ ERROR use of unstable library feature 'inclusive_range'\n+}\n+\n+"}, {"sha": "5fd6f1834e02dd3be0dc252f890e8fd01570d724", "filename": "src/test/parse-fail/range_inclusive.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs?ref=69719df6116b584b71ee5a8d22974835c33b13be", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure that inclusive ranges with no end point don't parse.\n+\n+#![feature(inclusive_range_syntax, inclusive_range)]\n+\n+pub fn main() {\n+    for _ in 1... {}\n+} //~ ERROR expected one of\n+"}, {"sha": "021b6dd3e260f79e7ea7e728588acc8a63adbaf7", "filename": "src/test/parse-fail/range_inclusive_gate.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs?ref=69719df6116b584b71ee5a8d22974835c33b13be", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure that #![feature(inclusive_range_syntax)] is required.\n+\n+// #![feature(inclusive_range_syntax, inclusive_range)]\n+\n+macro_rules! m {\n+    () => { for _ in 1...10 {} } //~ ERROR inclusive range syntax is experimental\n+}\n+\n+#[cfg(nope)]\n+fn f() {}\n+#[cfg(not(nope))]\n+fn f() {\n+    for _ in 1...10 {} //~ ERROR inclusive range syntax is experimental\n+}\n+\n+#[cfg(nope)]\n+macro_rules! n { () => {} }\n+#[cfg(not(nope))]\n+macro_rules! n {\n+    () => { for _ in 1...10 {} } //~ ERROR inclusive range syntax is experimental\n+}\n+\n+macro_rules! o {\n+    () => {{\n+        #[cfg(nope)]\n+        fn g() {}\n+        #[cfg(not(nope))]\n+        fn g() {\n+            for _ in 1...10 {} //~ ERROR inclusive range syntax is experimental\n+        }\n+\n+        g();\n+    }}\n+}\n+\n+#[cfg(nope)]\n+macro_rules! p { () => {} }\n+#[cfg(not(nope))]\n+macro_rules! p {\n+    () => {{\n+        #[cfg(nope)]\n+        fn h() {}\n+        #[cfg(not(nope))]\n+        fn h() {\n+            for _ in 1...10 {} //~ ERROR inclusive range syntax is experimental\n+        }\n+\n+        h();\n+    }}\n+}\n+\n+pub fn main() {\n+    for _ in 1...10 {} //~ ERROR inclusive range syntax is experimental\n+    for _ in ...10 {} //~ ERROR inclusive range syntax is experimental\n+\n+    f(); // not allowed in cfg'ed functions\n+\n+    m!(); // not allowed in macros\n+    n!(); // not allowed in cfg'ed macros\n+    o!(); // not allowed in macros that output cfgs\n+    p!(); // not allowed in cfg'ed macros that output cfgs\n+}\n+\n+"}, {"sha": "e64c453a3c4964ee7b83859dfec0611a2a0b171c", "filename": "src/test/run-pass/range_inclusive.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=69719df6116b584b71ee5a8d22974835c33b13be", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test inclusive range syntax.\n+\n+#![feature(inclusive_range_syntax, inclusive_range)]\n+\n+use std::ops::{RangeInclusive, RangeToInclusive};\n+\n+fn foo() -> isize { 42 }\n+\n+// Test that range syntax works in return statements\n+fn return_range_to() -> RangeToInclusive<i32> { return ...1; }\n+\n+pub fn main() {\n+    let mut count = 0;\n+    for i in 0_usize...10 {\n+        assert!(i >= 0 && i <= 10);\n+        count += i;\n+    }\n+    assert_eq!(count, 55);\n+\n+    let mut count = 0;\n+    let mut range = 0_usize...10;\n+    for i in range {\n+        assert!(i >= 0 && i <= 10);\n+        count += i;\n+    }\n+    assert_eq!(count, 55);\n+\n+    /* FIXME\n+    let mut count = 0;\n+    for i in (0_usize...10).step_by(2) {\n+        assert!(i >= 0 && i <= 10 && i % 2 == 0);\n+        count += i;\n+    }\n+    assert_eq!(count, 30);\n+    */\n+\n+    let _ = 0_usize...4+4-3;\n+    let _ = 0...foo();\n+\n+    let _ = { &42...&100 }; // references to literals are OK\n+    let _ = ...42_usize;\n+\n+    // Test we can use two different types with a common supertype.\n+    let x = &42;\n+    {\n+        let y = 42;\n+        let _ = x...&y;\n+    }\n+\n+    // test the size hints and emptying\n+    let mut long = 0...255u8;\n+    let mut short = 42...42;\n+    assert_eq!(long.size_hint(), (256, Some(256)));\n+    assert_eq!(short.size_hint(), (1, Some(1)));\n+    long.next();\n+    short.next();\n+    assert_eq!(long.size_hint(), (255, Some(255)));\n+    assert_eq!(short.size_hint(), (0, Some(0)));\n+    assert_eq!(short, RangeInclusive::Empty { at: 42 });\n+\n+    assert_eq!(long.len(), 255);\n+    assert_eq!(short.len(), 0);\n+\n+    // test iterating backwards\n+    assert_eq!(long.next_back(), Some(255));\n+    assert_eq!(long.next_back(), Some(254));\n+    assert_eq!(long.next_back(), Some(253));\n+    assert_eq!(long.next(), Some(1));\n+    assert_eq!(long.next(), Some(2));\n+    assert_eq!(long.next_back(), Some(252));\n+    for i in 3...251 {\n+        assert_eq!(long.next(), Some(i));\n+    }\n+    assert_eq!(long, RangeInclusive::Empty { at: 251 });\n+\n+    // what happens if you have a nonsense range?\n+    let mut nonsense = 10...5;\n+    assert_eq!(nonsense.next(), None);\n+    assert_eq!(nonsense, RangeInclusive::Empty { at: 10 });\n+\n+    // conversion\n+    assert_eq!(0...9, (0..10).into());\n+    assert_eq!(0...0, (0..1).into());\n+    assert_eq!(RangeInclusive::Empty { at: 1 }, (1..0).into());\n+\n+    // output\n+    assert_eq!(format!(\"{:?}\", 0...10), \"0...10\");\n+    assert_eq!(format!(\"{:?}\", ...10), \"...10\");\n+    assert_eq!(format!(\"{:?}\", long), \"[empty range @ 251]\");\n+}"}, {"sha": "5e0ec19d6b3253d69dcb54ec43887fa70f397844", "filename": "src/test/run-pass/range_inclusive_gate.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69719df6116b584b71ee5a8d22974835c33b13be/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs?ref=69719df6116b584b71ee5a8d22974835c33b13be", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that you only need the syntax gate if you don't mention the structs.\n+\n+#![feature(inclusive_range_syntax)]\n+\n+fn main() {\n+    let mut count = 0;\n+    for i in 0_usize...10 {\n+        assert!(i >= 0 && i <= 10);\n+        count += i;\n+    }\n+    assert_eq!(count, 55);\n+}\n+"}]}