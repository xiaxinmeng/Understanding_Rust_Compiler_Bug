{"sha": "bba2a64d0c5ba20c4153676a09381b8703c197ba", "node_id": "C_kwDOAAsO6NoAKGJiYTJhNjRkMGM1YmEyMGM0MTUzNjc2YTA5MzgxYjg3MDNjMTk3YmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-29T20:46:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-29T20:46:31Z"}, "message": "Rollup merge of #93840 - yaahc:termination-stabilization-celebration-station, r=joshtriplett\n\nStabilize Termination and ExitCode\n\nFrom https://github.com/rust-lang/rust/issues/43301\n\nThis PR stabilizes the Termination trait and associated ExitCode type. It also adjusts the ExitCode feature flag to replace the placeholder flag with a more permanent name, as well as splitting off the `to_i32` method behind its own permanently unstable feature flag.\n\nThis PR stabilizes the termination trait with the following signature:\n\n```rust\npub trait Termination {\n    fn report(self) -> ExitCode;\n}\n```\n\nThe existing impls of `Termination` are effectively already stable due to the prior stabilization of `?` in main.\n\nThis PR also stabilizes the following APIs on exit code\n\n```rust\n#[derive(Clone, Copy, Debug)]\npub struct ExitCode(_);\n\nimpl ExitCode {\n    pub const SUCCESS: ExitCode;\n    pub const FAILURE: ExitCode;\n}\n\nimpl From<u8> for ExitCode { /* ... */ }\n```\n\n---\n\nAll of the previous blockers have been resolved. The main ones that were resolved recently are:\n\n* The trait's name: We decided against changing this since none of the alternatives seemed particularly compelling. Instead we decided to end the bikeshedding and stick with the current name. ([link to the discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269793887))\n* Issues around platform specific representations: We resolved this issue by changing the return type of `report` from `i32` to the opaque type `ExitCode`. That way we can change the underlying representation without affecting the API, letting us offer full support for platform specific exit code APIs in the future.\n* Custom exit codes: We resolved this by adding `From<u8> for ExitCode`. We choose to only support u8 initially because it is the least common denominator between the sets of exit codes supported by our current platforms. In the future we anticipate adding platform specific extension traits to ExitCode for constructors from larger or negative numbers, as needed.", "tree": {"sha": "e145ce740ec6ed12a15660b3506fb84de6ff3718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e145ce740ec6ed12a15660b3506fb84de6ff3718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba2a64d0c5ba20c4153676a09381b8703c197ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQ3AoCRBK7hj4Ov3rIwAAy5MIAB9sI69lTPk+Th5f7N8FPkZU\n0gJu1xFgZVRjFdG+XEaJhC5w5NYp/Wq8UKaJmMCP5lBAdfqKS1hzmjSwr0koqCxn\nqMRJyGPWCAbAo1FEPIYQKWboufKF2HxEtF1KopxlMcQ1HsBwqR2oJS5kVmKloSYW\nFmwRbU3gv+mWLOb0OwFsRoVeCdhHk8N9bA303G4xq+0kFwwOCPA5m2xMkpmubmnA\n2j60cczcp1xXqNLxuhqLjaItW4cx39A693zgcde9dBiFPc//08ypximSJSHxNpkK\nlFm1ulK0o5WNfT/Qpb+leQY+qk1f6UYJvaeZ/vFFRXW4F/w2747v/ohYZsOL/jE=\n=AM8o\n-----END PGP SIGNATURE-----\n", "payload": "tree e145ce740ec6ed12a15660b3506fb84de6ff3718\nparent 5e1d19d30723c287f049662474021f2b9a9894ce\nparent 97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648586791 +0200\ncommitter GitHub <noreply@github.com> 1648586791 +0200\n\nRollup merge of #93840 - yaahc:termination-stabilization-celebration-station, r=joshtriplett\n\nStabilize Termination and ExitCode\n\nFrom https://github.com/rust-lang/rust/issues/43301\n\nThis PR stabilizes the Termination trait and associated ExitCode type. It also adjusts the ExitCode feature flag to replace the placeholder flag with a more permanent name, as well as splitting off the `to_i32` method behind its own permanently unstable feature flag.\n\nThis PR stabilizes the termination trait with the following signature:\n\n```rust\npub trait Termination {\n    fn report(self) -> ExitCode;\n}\n```\n\nThe existing impls of `Termination` are effectively already stable due to the prior stabilization of `?` in main.\n\nThis PR also stabilizes the following APIs on exit code\n\n```rust\n#[derive(Clone, Copy, Debug)]\npub struct ExitCode(_);\n\nimpl ExitCode {\n    pub const SUCCESS: ExitCode;\n    pub const FAILURE: ExitCode;\n}\n\nimpl From<u8> for ExitCode { /* ... */ }\n```\n\n---\n\nAll of the previous blockers have been resolved. The main ones that were resolved recently are:\n\n* The trait's name: We decided against changing this since none of the alternatives seemed particularly compelling. Instead we decided to end the bikeshedding and stick with the current name. ([link to the discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269793887))\n* Issues around platform specific representations: We resolved this issue by changing the return type of `report` from `i32` to the opaque type `ExitCode`. That way we can change the underlying representation without affecting the API, letting us offer full support for platform specific exit code APIs in the future.\n* Custom exit codes: We resolved this by adding `From<u8> for ExitCode`. We choose to only support u8 initially because it is the least common denominator between the sets of exit codes supported by our current platforms. In the future we anticipate adding platform specific extension traits to ExitCode for constructors from larger or negative numbers, as needed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba2a64d0c5ba20c4153676a09381b8703c197ba", "html_url": "https://github.com/rust-lang/rust/commit/bba2a64d0c5ba20c4153676a09381b8703c197ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba2a64d0c5ba20c4153676a09381b8703c197ba/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e1d19d30723c287f049662474021f2b9a9894ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1d19d30723c287f049662474021f2b9a9894ce", "html_url": "https://github.com/rust-lang/rust/commit/5e1d19d30723c287f049662474021f2b9a9894ce"}, {"sha": "97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c", "html_url": "https://github.com/rust-lang/rust/commit/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "d3c8d864b0c10841def9c5f9370b4cad6e0899ed", "filename": "library/std/src/process.rs", "status": "modified", "additions": 68, "deletions": 24, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/bba2a64d0c5ba20c4153676a09381b8703c197ba/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba2a64d0c5ba20c4153676a09381b8703c197ba/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=bba2a64d0c5ba20c4153676a09381b8703c197ba", "patch": "@@ -1417,6 +1417,15 @@ impl From<fs::File> for Stdio {\n /// For proper error reporting of failed processes, print the value of `ExitStatus` or\n /// `ExitStatusError` using their implementations of [`Display`](crate::fmt::Display).\n ///\n+/// # Differences from `ExitStatus`\n+///\n+/// `ExitCode` is intended for terminating the currently running process, via\n+/// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n+/// termination of a child process. These APIs are separate due to platform\n+/// compatibility differences and their expected usage; it is not generally\n+/// possible to exactly reproduce an ExitStatus from a child for the current\n+/// process after the fact.\n+///\n /// [`status`]: Command::status\n /// [`wait`]: Child::wait\n //\n@@ -1649,8 +1658,16 @@ impl fmt::Display for ExitStatusError {\n #[unstable(feature = \"exit_status_error\", issue = \"84908\")]\n impl crate::error::Error for ExitStatusError {}\n \n-/// This type represents the status code a process can return to its\n-/// parent under normal termination.\n+/// This type represents the status code the current process can return\n+/// to its parent under normal termination.\n+///\n+/// `ExitCode` is intended to be consumed only by the standard library (via\n+/// [`Termination::report()`]), and intentionally does not provide accessors like\n+/// `PartialEq`, `Eq`, or `Hash`. Instead the standard library provides the\n+/// canonical `SUCCESS` and `FAILURE` exit codes as well as `From<u8> for\n+/// ExitCode` for constructing other arbitrary exit codes.\n+///\n+/// # Portability\n ///\n /// Numeric values used in this type don't have portable meanings, and\n /// different platforms may mask different amounts of them.\n@@ -1661,52 +1678,78 @@ impl crate::error::Error for ExitStatusError {}\n /// [`SUCCESS`]: ExitCode::SUCCESS\n /// [`FAILURE`]: ExitCode::FAILURE\n ///\n-/// **Warning**: While various forms of this were discussed in [RFC #1937],\n-/// it was ultimately cut from that RFC, and thus this type is more subject\n-/// to change even than the usual unstable item churn.\n+/// # Differences from `ExitStatus`\n+///\n+/// `ExitCode` is intended for terminating the currently running process, via\n+/// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n+/// termination of a child process. These APIs are separate due to platform\n+/// compatibility differences and their expected usage; it is not generally\n+/// possible to exactly reproduce an ExitStatus from a child for the current\n+/// process after the fact.\n+///\n+/// # Examples\n+///\n+/// `ExitCode` can be returned from the `main` function of a crate, as it implements\n+/// [`Termination`]:\n+///\n+/// ```\n+/// use std::process::ExitCode;\n+/// # fn check_foo() -> bool { true }\n ///\n-/// [RFC #1937]: https://github.com/rust-lang/rfcs/pull/1937\n+/// fn main() -> ExitCode {\n+///     if !check_foo() {\n+///         return ExitCode::from(42);\n+///     }\n+///\n+///     ExitCode::SUCCESS\n+/// }\n+/// ```\n #[derive(Clone, Copy, Debug)]\n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n pub struct ExitCode(imp::ExitCode);\n \n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n impl ExitCode {\n-    /// The canonical ExitCode for successful termination on this platform.\n+    /// The canonical `ExitCode` for successful termination on this platform.\n     ///\n     /// Note that a `()`-returning `main` implicitly results in a successful\n     /// termination, so there's no need to return this from `main` unless\n     /// you're also returning other possible codes.\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n     pub const SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);\n \n-    /// The canonical ExitCode for unsuccessful termination on this platform.\n+    /// The canonical `ExitCode` for unsuccessful termination on this platform.\n     ///\n     /// If you're only returning this and `SUCCESS` from `main`, consider\n     /// instead returning `Err(_)` and `Ok(())` respectively, which will\n     /// return the same codes (but will also `eprintln!` the error).\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n     pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n }\n \n impl ExitCode {\n-    // This should not be stabilized when stabilizing ExitCode, we don't know that i32 will serve\n+    // This is private/perma-unstable because ExitCode is opaque; we don't know that i32 will serve\n     // all usecases, for example windows seems to use u32, unix uses the 8-15th bits of an i32, we\n     // likely want to isolate users anything that could restrict the platform specific\n     // representation of an ExitCode\n     //\n     // More info: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n-    /// Convert an ExitCode into an i32\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    /// Convert an `ExitCode` into an i32\n+    #[unstable(\n+        feature = \"process_exitcode_internals\",\n+        reason = \"exposed only for libstd\",\n+        issue = \"none\"\n+    )]\n     #[inline]\n+    #[doc(hidden)]\n     pub fn to_i32(self) -> i32 {\n         self.0.as_i32()\n     }\n }\n \n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n impl From<u8> for ExitCode {\n-    /// Construct an exit code from an arbitrary u8 value.\n+    /// Construct an `ExitCode` from an arbitrary u8 value.\n     fn from(code: u8) -> Self {\n         ExitCode(imp::ExitCode::from(code))\n     }\n@@ -2049,26 +2092,27 @@ pub fn id() -> u32 {\n /// standard library's runtime for convenience. Other runtimes are not required\n /// to provide similar functionality.\n #[cfg_attr(not(test), lang = \"termination\")]\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n #[rustc_on_unimplemented(\n     message = \"`main` has invalid return type `{Self}`\",\n     label = \"`main` can only return types that implement `{Termination}`\"\n )]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system.\n+    #[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n     fn report(self) -> ExitCode;\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl Termination for () {\n     #[inline]\n     fn report(self) -> ExitCode {\n         ExitCode::SUCCESS.report()\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl<E: fmt::Debug> Termination for Result<(), E> {\n     fn report(self) -> ExitCode {\n         match self {\n@@ -2078,14 +2122,14 @@ impl<E: fmt::Debug> Termination for Result<(), E> {\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl Termination for ! {\n     fn report(self) -> ExitCode {\n         self\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n@@ -2094,15 +2138,15 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl<E: fmt::Debug> Termination for Result<Infallible, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n         Err::<!, _>(err).report()\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl Termination for ExitCode {\n     #[inline]\n     fn report(self) -> ExitCode {"}, {"sha": "889f7cb9db9419494b1d6999e73d64868289940f", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bba2a64d0c5ba20c4153676a09381b8703c197ba/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba2a64d0c5ba20c4153676a09381b8703c197ba/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=bba2a64d0c5ba20c4153676a09381b8703c197ba", "patch": "@@ -19,8 +19,7 @@\n #![feature(bench_black_box)]\n #![feature(internal_output_capture)]\n #![feature(staged_api)]\n-#![feature(termination_trait_lib)]\n-#![feature(process_exitcode_placeholder)]\n+#![feature(process_exitcode_internals)]\n #![feature(test)]\n #![feature(total_cmp)]\n "}, {"sha": "6d4c1562053b659f5ecbd9fdc22abea81f458cff", "filename": "src/test/ui/rfcs/rfc-1937-termination-trait/termination-trait-for-exitcode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bba2a64d0c5ba20c4153676a09381b8703c197ba/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba2a64d0c5ba20c4153676a09381b8703c197ba/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs?ref=bba2a64d0c5ba20c4153676a09381b8703c197ba", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(process_exitcode_placeholder)]\n \n use std::process::ExitCode;\n "}, {"sha": "c06a135dcbc203b0b32c58b3425cbf3765f56d6d", "filename": "src/test/ui/rfcs/rfc-1937-termination-trait/termination-trait-for-impl-termination.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bba2a64d0c5ba20c4153676a09381b8703c197ba/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba2a64d0c5ba20c4153676a09381b8703c197ba/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs?ref=bba2a64d0c5ba20c4153676a09381b8703c197ba", "patch": "@@ -1,4 +1,3 @@\n // run-pass\n-#![feature(termination_trait_lib)]\n \n fn main() -> impl std::process::Termination { }"}]}