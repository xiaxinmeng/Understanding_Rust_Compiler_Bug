{"sha": "915703ca7a98439061f8e1514c3c4d026a15ad98", "node_id": "C_kwDOAAsO6NoAKDkxNTcwM2NhN2E5ODQzOTA2MWY4ZTE1MTRjM2M0ZDAyNmExNWFkOTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-06T22:02:10Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-16T03:39:59Z"}, "message": "A bit more work on late-bound consts", "tree": {"sha": "b6fa50e06f317a89dade07938a88ebb881030b87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6fa50e06f317a89dade07938a88ebb881030b87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915703ca7a98439061f8e1514c3c4d026a15ad98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915703ca7a98439061f8e1514c3c4d026a15ad98", "html_url": "https://github.com/rust-lang/rust/commit/915703ca7a98439061f8e1514c3c4d026a15ad98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915703ca7a98439061f8e1514c3c4d026a15ad98/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f521b3542458d177aa1723cafdb70fc8179682b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f521b3542458d177aa1723cafdb70fc8179682b", "html_url": "https://github.com/rust-lang/rust/commit/3f521b3542458d177aa1723cafdb70fc8179682b"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "8c388040fbf8676d5d6e8e72ab0ba6a818fd0312", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/915703ca7a98439061f8e1514c3c4d026a15ad98/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915703ca7a98439061f8e1514c3c4d026a15ad98/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=915703ca7a98439061f8e1514c3c4d026a15ad98", "patch": "@@ -1364,11 +1364,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             return;\n         }\n \n-        span_bug!(\n-            self.tcx.hir().span(hir_id),\n-            \"could not resolve {param_def_id:?}, scopes: {:#?}\",\n-            self.scope\n-        );\n+        span_bug!(self.tcx.hir().span(hir_id), \"could not resolve {param_def_id:?}\",);\n     }\n \n     #[instrument(level = \"debug\", skip(self))]"}, {"sha": "79807df706e9ee45ef5e9aa2dc8ce5e939fe3f6e", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/915703ca7a98439061f8e1514c3c4d026a15ad98/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915703ca7a98439061f8e1514c3c4d026a15ad98/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=915703ca7a98439061f8e1514c3c4d026a15ad98", "patch": "@@ -1,7 +1,9 @@\n+use crate::middle::resolve_bound_vars as rbv;\n use crate::mir::interpret::LitToConstInput;\n use crate::ty::{self, DefIdTree, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_macros::HashStable;\n use std::fmt;\n@@ -125,16 +127,27 @@ impl<'tcx> Const<'tcx> {\n             }\n         }\n \n-        use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n         match expr.kind {\n-            ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n-                // Find the name and index of the const parameter by indexing the generics of\n-                // the parent item and construct a `ParamConst`.\n-                let item_def_id = tcx.parent(def_id);\n-                let generics = tcx.generics_of(item_def_id);\n-                let index = generics.param_def_id_to_index[&def_id];\n-                let name = tcx.item_name(def_id);\n-                Some(tcx.mk_const(ty::ParamConst::new(index, name), ty))\n+            hir::ExprKind::Path(hir::QPath::Resolved(\n+                _,\n+                &hir::Path { res: Res::Def(DefKind::ConstParam, def_id), .. },\n+            )) => {\n+                match tcx.named_bound_var(expr.hir_id) {\n+                    Some(rbv::ResolvedArg::EarlyBound(_)) => {\n+                        // Find the name and index of the const parameter by indexing the generics of\n+                        // the parent item and construct a `ParamConst`.\n+                        let item_def_id = tcx.parent(def_id);\n+                        let generics = tcx.generics_of(item_def_id);\n+                        let index = generics.param_def_id_to_index[&def_id];\n+                        let name = tcx.item_name(def_id);\n+                        Some(tcx.mk_const(ty::ParamConst::new(index, name), ty))\n+                    }\n+                    Some(rbv::ResolvedArg::LateBound(debruijn, index, _)) => Some(tcx.mk_const(\n+                        ty::ConstKind::Bound(debruijn, ty::BoundVar::from_u32(index)),\n+                        ty,\n+                    )),\n+                    arg => bug!(\"unexpected bound var resolution for {:?}: {arg:?}\", expr.hir_id),\n+                }\n             }\n             _ => None,\n         }"}]}