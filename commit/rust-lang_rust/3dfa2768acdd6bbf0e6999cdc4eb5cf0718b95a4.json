{"sha": "3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZmEyNzY4YWNkZDZiYmYwZTY5OTljZGM0ZWI1Y2YwNzE4Yjk1YTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T11:48:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T11:48:15Z"}, "message": "Shorten names", "tree": {"sha": "a0be5b3bb51063df06eb8502c9412836db4260ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0be5b3bb51063df06eb8502c9412836db4260ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "html_url": "https://github.com/rust-lang/rust/commit/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6150a370616ebb918620623bae24855a6d8cb65", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6150a370616ebb918620623bae24855a6d8cb65", "html_url": "https://github.com/rust-lang/rust/commit/c6150a370616ebb918620623bae24855a6d8cb65"}], "stats": {"total": 117, "additions": 50, "deletions": 67}, "files": [{"sha": "409507bd0b7125d665eb86196a451ab633e77fac", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "patch": "@@ -77,7 +77,7 @@ pub use crate::{\n     runnables::{Runnable, RunnableKind, TestId},\n     syntax_highlighting::{\n         tags::{Highlight, HlMod, HlMods, HlTag},\n-        HighlightedRange,\n+        HlRange,\n     },\n };\n pub use assists::{Assist, AssistConfig, AssistId, AssistKind, InsertUseConfig};\n@@ -449,12 +449,12 @@ impl Analysis {\n     }\n \n     /// Computes syntax highlighting for the given file\n-    pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n+    pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HlRange>> {\n         self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n     }\n \n     /// Computes syntax highlighting for the given file range.\n-    pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HighlightedRange>> {\n+    pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HlRange>> {\n         self.with_db(|db| {\n             syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false)\n         })"}, {"sha": "8bb7acb827bf9a440c197a612dd3473589e7ea85", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "patch": "@@ -34,7 +34,7 @@ use crate::{\n pub(crate) use html::highlight_as_html;\n \n #[derive(Debug, Clone)]\n-pub struct HighlightedRange {\n+pub struct HlRange {\n     pub range: TextRange,\n     pub highlight: Highlight,\n     pub binding_hash: Option<u64>,\n@@ -54,7 +54,7 @@ pub(crate) fn highlight(\n     file_id: FileId,\n     range_to_highlight: Option<TextRange>,\n     syntactic_name_ref_highlighting: bool,\n-) -> Vec<HighlightedRange> {\n+) -> Vec<HlRange> {\n     let _p = profile::span(\"highlight\");\n     let sema = Semantics::new(db);\n \n@@ -98,7 +98,7 @@ pub(crate) fn highlight(\n         match event.clone().map(|it| it.into_node().and_then(ast::MacroCall::cast)) {\n             WalkEvent::Enter(Some(mc)) => {\n                 if let Some(range) = macro_call_range(&mc) {\n-                    stack.add(HighlightedRange {\n+                    stack.add(HlRange {\n                         range,\n                         highlight: HlTag::Symbol(SymbolKind::Macro).into(),\n                         binding_hash: None,\n@@ -198,7 +198,7 @@ pub(crate) fn highlight(\n             }\n \n             if macro_rules_highlighter.highlight(element_to_highlight.clone()).is_none() {\n-                stack.add(HighlightedRange { range, highlight, binding_hash });\n+                stack.add(HlRange { range, highlight, binding_hash });\n             }\n \n             if let Some(string) =\n@@ -209,7 +209,7 @@ pub(crate) fn highlight(\n                 if let Some(char_ranges) = string.char_ranges() {\n                     for (piece_range, _) in char_ranges.iter().filter(|(_, char)| char.is_ok()) {\n                         if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n-                            stack.add(HighlightedRange {\n+                            stack.add(HlRange {\n                                 range: piece_range + range.start(),\n                                 highlight: HlTag::EscapeSequence.into(),\n                                 binding_hash: None,"}, {"sha": "d807ad0ad5c33f7b3ec5491799117323dd1baa13", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "patch": "@@ -4,7 +4,7 @@ use syntax::{\n     AstNode, AstToken, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n };\n \n-use crate::{HighlightedRange, HlTag, SymbolKind};\n+use crate::{HlRange, HlTag, SymbolKind};\n \n use super::highlights::Highlights;\n \n@@ -46,7 +46,7 @@ impl FormatStringHighlighter {\n         if self.format_string.as_ref() == Some(&SyntaxElement::from(string.syntax().clone())) {\n             string.lex_format_specifier(|piece_range, kind| {\n                 if let Some(highlight) = highlight_format_specifier(kind) {\n-                    stack.add(HighlightedRange {\n+                    stack.add(HlRange {\n                         range: piece_range + range.start(),\n                         highlight: highlight.into(),\n                         binding_hash: None,"}, {"sha": "11c11ed288700561d490500c14526f0e7055b321", "filename": "crates/ide/src/syntax_highlighting/highlights.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs?ref=3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "patch": "@@ -4,93 +4,84 @@ use std::{cmp::Ordering, iter};\n use stdx::equal_range_by;\n use syntax::TextRange;\n \n-use crate::{HighlightedRange, HlTag};\n+use crate::{HlRange, HlTag};\n \n pub(super) struct Highlights {\n     root: Node,\n }\n \n struct Node {\n-    highlighted_range: HighlightedRange,\n+    hl_range: HlRange,\n     nested: Vec<Node>,\n }\n \n impl Highlights {\n     pub(super) fn new(range: TextRange) -> Highlights {\n         Highlights {\n-            root: Node::new(HighlightedRange {\n-                range,\n-                highlight: HlTag::None.into(),\n-                binding_hash: None,\n-            }),\n+            root: Node::new(HlRange { range, highlight: HlTag::None.into(), binding_hash: None }),\n         }\n     }\n \n-    pub(super) fn add(&mut self, highlighted_range: HighlightedRange) {\n-        self.root.add(highlighted_range);\n+    pub(super) fn add(&mut self, hl_range: HlRange) {\n+        self.root.add(hl_range);\n     }\n \n-    pub(super) fn to_vec(self) -> Vec<HighlightedRange> {\n+    pub(super) fn to_vec(self) -> Vec<HlRange> {\n         let mut res = Vec::new();\n         self.root.flatten(&mut res);\n         res\n     }\n }\n \n impl Node {\n-    fn new(highlighted_range: HighlightedRange) -> Node {\n-        Node { highlighted_range, nested: Vec::new() }\n+    fn new(hl_range: HlRange) -> Node {\n+        Node { hl_range, nested: Vec::new() }\n     }\n \n-    fn add(&mut self, highlighted_range: HighlightedRange) {\n-        assert!(self.highlighted_range.range.contains_range(highlighted_range.range));\n+    fn add(&mut self, hl_range: HlRange) {\n+        assert!(self.hl_range.range.contains_range(hl_range.range));\n \n         // Fast path\n         if let Some(last) = self.nested.last_mut() {\n-            if last.highlighted_range.range.contains_range(highlighted_range.range) {\n-                return last.add(highlighted_range);\n+            if last.hl_range.range.contains_range(hl_range.range) {\n+                return last.add(hl_range);\n             }\n-            if last.highlighted_range.range.end() <= highlighted_range.range.start() {\n-                return self.nested.push(Node::new(highlighted_range));\n+            if last.hl_range.range.end() <= hl_range.range.start() {\n+                return self.nested.push(Node::new(hl_range));\n             }\n         }\n \n-        let (start, len) = equal_range_by(&self.nested, |n| {\n-            ordering(n.highlighted_range.range, highlighted_range.range)\n-        });\n+        let (start, len) =\n+            equal_range_by(&self.nested, |n| ordering(n.hl_range.range, hl_range.range));\n \n-        if len == 1\n-            && self.nested[start].highlighted_range.range.contains_range(highlighted_range.range)\n-        {\n-            return self.nested[start].add(highlighted_range);\n+        if len == 1 && self.nested[start].hl_range.range.contains_range(hl_range.range) {\n+            return self.nested[start].add(hl_range);\n         }\n \n         let nested = self\n             .nested\n-            .splice(start..start + len, iter::once(Node::new(highlighted_range)))\n+            .splice(start..start + len, iter::once(Node::new(hl_range)))\n             .collect::<Vec<_>>();\n         self.nested[start].nested = nested;\n     }\n \n-    fn flatten(&self, acc: &mut Vec<HighlightedRange>) {\n-        let mut start = self.highlighted_range.range.start();\n+    fn flatten(&self, acc: &mut Vec<HlRange>) {\n+        let mut start = self.hl_range.range.start();\n         let mut nested = self.nested.iter();\n         loop {\n             let next = nested.next();\n-            let end = next.map_or(self.highlighted_range.range.end(), |it| {\n-                it.highlighted_range.range.start()\n-            });\n+            let end = next.map_or(self.hl_range.range.end(), |it| it.hl_range.range.start());\n             if start < end {\n-                acc.push(HighlightedRange {\n+                acc.push(HlRange {\n                     range: TextRange::new(start, end),\n-                    highlight: self.highlighted_range.highlight,\n-                    binding_hash: self.highlighted_range.binding_hash,\n+                    highlight: self.hl_range.highlight,\n+                    binding_hash: self.hl_range.binding_hash,\n                 });\n             }\n             start = match next {\n                 Some(child) => {\n                     child.flatten(acc);\n-                    child.highlighted_range.range.end()\n+                    child.hl_range.range.end()\n                 }\n                 None => break,\n             }"}, {"sha": "13dde1dc44659db5db0dd9e936558c36a12bbed6", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "patch": "@@ -7,7 +7,7 @@ use ide_db::call_info::ActiveParameter;\n use itertools::Itertools;\n use syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n \n-use crate::{Analysis, HighlightedRange, HlMod, HlTag, RootDatabase};\n+use crate::{Analysis, HlMod, HlRange, HlTag, RootDatabase};\n \n use super::{highlights::Highlights, injector::Injector};\n \n@@ -26,11 +26,7 @@ pub(super) fn highlight_injection(\n     let (analysis, tmp_file_id) = Analysis::from_single_file(marker_info.cleaned_text.clone());\n \n     if let Some(range) = literal.open_quote_text_range() {\n-        acc.add(HighlightedRange {\n-            range,\n-            highlight: HlTag::StringLiteral.into(),\n-            binding_hash: None,\n-        })\n+        acc.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n     }\n \n     for mut h in analysis.highlight(tmp_file_id).unwrap() {\n@@ -42,11 +38,7 @@ pub(super) fn highlight_injection(\n     }\n \n     if let Some(range) = literal.close_quote_text_range() {\n-        acc.add(HighlightedRange {\n-            range,\n-            highlight: HlTag::StringLiteral.into(),\n-            binding_hash: None,\n-        })\n+        acc.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n     }\n \n     Some(())\n@@ -116,7 +108,7 @@ const RUSTDOC_FENCE_TOKENS: &[&'static str] = &[\n /// Lastly, a vector of new comment highlight ranges (spanning only the\n /// comment prefix) is returned which is used in the syntax highlighting\n /// injection to replace the previous (line-spanning) comment ranges.\n-pub(super) fn extract_doc_comments(node: &SyntaxNode) -> Option<(Vec<HighlightedRange>, Injector)> {\n+pub(super) fn extract_doc_comments(node: &SyntaxNode) -> Option<(Vec<HlRange>, Injector)> {\n     let mut inj = Injector::default();\n     // wrap the doctest into function body to get correct syntax highlighting\n     let prefix = \"fn doctest() {\\n\";\n@@ -166,7 +158,7 @@ pub(super) fn extract_doc_comments(node: &SyntaxNode) -> Option<(Vec<Highlighted\n                 pos\n             };\n \n-            new_comments.push(HighlightedRange {\n+            new_comments.push(HlRange {\n                 range: TextRange::new(\n                     range.start(),\n                     range.start() + TextSize::try_from(pos).unwrap(),\n@@ -196,7 +188,7 @@ pub(super) fn extract_doc_comments(node: &SyntaxNode) -> Option<(Vec<Highlighted\n \n /// Injection of syntax highlighting of doctests.\n pub(super) fn highlight_doc_comment(\n-    new_comments: Vec<HighlightedRange>,\n+    new_comments: Vec<HlRange>,\n     inj: Injector,\n     stack: &mut Highlights,\n ) {\n@@ -207,7 +199,7 @@ pub(super) fn highlight_doc_comment(\n \n     for h in analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)).unwrap() {\n         for r in inj.map_range_up(h.range) {\n-            stack.add(HighlightedRange {\n+            stack.add(HlRange {\n                 range: r,\n                 highlight: h.highlight | HlMod::Injected,\n                 binding_hash: h.binding_hash,"}, {"sha": "21d8a98350e33d78966561a01e88e6fafa7a8474", "filename": "crates/ide/src/syntax_highlighting/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_rules.rs?ref=3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "patch": "@@ -1,7 +1,7 @@\n //! Syntax highlighting for macro_rules!.\n use syntax::{SyntaxElement, SyntaxKind, SyntaxToken, TextRange, T};\n \n-use crate::{HighlightedRange, HlTag};\n+use crate::{HlRange, HlTag};\n \n #[derive(Default)]\n pub(super) struct MacroRulesHighlighter {\n@@ -19,11 +19,11 @@ impl MacroRulesHighlighter {\n         }\n     }\n \n-    pub(super) fn highlight(&self, element: SyntaxElement) -> Option<HighlightedRange> {\n+    pub(super) fn highlight(&self, element: SyntaxElement) -> Option<HlRange> {\n         if let Some(state) = self.state.as_ref() {\n             if matches!(state.rule_state, RuleState::Matcher | RuleState::Expander) {\n                 if let Some(range) = is_metavariable(element) {\n-                    return Some(HighlightedRange {\n+                    return Some(HlRange {\n                         range,\n                         highlight: HlTag::UnresolvedReference.into(),\n                         binding_hash: None,"}, {"sha": "d6bf60cde2ae4db5a7d59272b21a4fdcf2056e21", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3dfa2768acdd6bbf0e6999cdc4eb5cf0718b95a4", "patch": "@@ -6,9 +6,9 @@ use std::{\n \n use ide::{\n     Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation, FileId,\n-    FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HighlightedRange, HlMod, HlTag, Indel,\n-    InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget, ReferenceAccess,\n-    Runnable, Severity, SourceChange, SourceFileEdit, SymbolKind, TextEdit, TextRange, TextSize,\n+    FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HlMod, HlRange, HlTag, Indel, InlayHint,\n+    InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget, ReferenceAccess, Runnable,\n+    Severity, SourceChange, SourceFileEdit, SymbolKind, TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n \n@@ -336,7 +336,7 @@ static TOKEN_RESULT_COUNTER: AtomicU32 = AtomicU32::new(1);\n pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n-    highlights: Vec<HighlightedRange>,\n+    highlights: Vec<HlRange>,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);"}]}