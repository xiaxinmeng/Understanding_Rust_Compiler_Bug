{"sha": "3d5b8c6266fd58cefa0d7af8c6115fe22532d069", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNWI4YzYyNjZmZDU4Y2VmYTBkN2FmOGM2MTE1ZmUyMjUzMmQwNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-09T18:17:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-09T18:17:15Z"}, "message": "Auto merge of #42278 - gentoo90:gdb-pretty-printers, r=michaelwoerister\n\nFix GDB pretty-printer for tuples and pointers\n\nNames of children should not be the same, because GDB uses them to distinguish the children.\n\n|Before|After|\n|---|---|\n|![tuples_before](https://cloud.githubusercontent.com/assets/1297574/26527639/5d6cf10e-43a0-11e7-9498-abfcddb08055.png)|![tuples_after](https://cloud.githubusercontent.com/assets/1297574/26527655/9699233a-43a0-11e7-83c6-f58f713b51a0.png)|\n\n`main.rs`\n```rust\nenum Test {\n    Zero,\n    One(i32),\n    Two(i32, String),\n    Three(i32, String, Vec<String>),\n}\n\nfn main() {\n    let tuple = (1, 2, \"Asdfgh\");\n    let zero = Test::Zero;\n    let one = Test::One(10);\n    let two = Test::Two(42, \"Qwerty\".to_owned());\n    let three = Test::Three(9000,\n                            \"Zxcvbn\".to_owned(),\n                            vec![\"lorem\".to_owned(), \"ipsum\".to_owned(), \"dolor\".to_owned()]);\n    println!(\"\"); // breakpoint here\n}\n```\n\n`launch.json`\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"gdb\",\n            \"request\": \"launch\",\n            \"gdbpath\": \"rust-gdb\",\n            \"name\": \"Launch Program\",\n            \"valuesFormatting\": \"prettyPrinters\", //this requires plugin Native Debug >= 0.20.0\n            \"target\": \"./target/debug/test_pretty_printers\",\n            \"cwd\": \"${workspaceRoot}\"\n        }\n    ]\n}\n```", "tree": {"sha": "60b8527b541e5c96365292e2b972ed27e7890553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60b8527b541e5c96365292e2b972ed27e7890553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d5b8c6266fd58cefa0d7af8c6115fe22532d069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5b8c6266fd58cefa0d7af8c6115fe22532d069", "html_url": "https://github.com/rust-lang/rust/commit/3d5b8c6266fd58cefa0d7af8c6115fe22532d069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d5b8c6266fd58cefa0d7af8c6115fe22532d069/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe923d43455f362408aad30ffc86a6ab71ff7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe923d43455f362408aad30ffc86a6ab71ff7c6", "html_url": "https://github.com/rust-lang/rust/commit/5fe923d43455f362408aad30ffc86a6ab71ff7c6"}, {"sha": "63076ddbb8e9856e9996adb49fc0a67a29ca697b", "url": "https://api.github.com/repos/rust-lang/rust/commits/63076ddbb8e9856e9996adb49fc0a67a29ca697b", "html_url": "https://github.com/rust-lang/rust/commit/63076ddbb8e9856e9996adb49fc0a67a29ca697b"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "4a38d4be083fdcac5202d1dcd3c6431c2d968caf", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d5b8c6266fd58cefa0d7af8c6115fe22532d069/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d5b8c6266fd58cefa0d7af8c6115fe22532d069/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=3d5b8c6266fd58cefa0d7af8c6115fe22532d069", "patch": "@@ -46,6 +46,7 @@\n TYPE_KIND_PTR               = 15\n TYPE_KIND_FIXED_SIZE_VEC    = 16\n TYPE_KIND_REGULAR_UNION     = 17\n+TYPE_KIND_OS_STRING         = 18\n \n ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\"\n@@ -64,6 +65,9 @@\n # std::String related constants\n STD_STRING_FIELD_NAMES = [\"vec\"]\n \n+# std::ffi::OsString related constants\n+OS_STRING_FIELD_NAMES = [\"inner\"]\n+\n \n class Type(object):\n     \"\"\"\n@@ -162,6 +166,11 @@ def __classify_struct(self):\n             self.__conforms_to_field_layout(STD_STRING_FIELD_NAMES)):\n             return TYPE_KIND_STD_STRING\n \n+        # OS STRING\n+        if (unqualified_type_name == \"OsString\" and\n+            self.__conforms_to_field_layout(OS_STRING_FIELD_NAMES)):\n+            return TYPE_KIND_OS_STRING\n+\n         # ENUM VARIANTS\n         if fields[0].name == ENUM_DISR_FIELD_NAME:\n             if field_count == 1:\n@@ -345,3 +354,8 @@ def extract_type_name(qualified_type_name):\n         return qualified_type_name\n     else:\n         return qualified_type_name[index + 2:]\n+\n+try:\n+    compat_str = unicode  # Python 2\n+except NameError:\n+    compat_str = str"}, {"sha": "822dc58140470146510262e9950a2c7e43ebc8e6", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d5b8c6266fd58cefa0d7af8c6115fe22532d069/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d5b8c6266fd58cefa0d7af8c6115fe22532d069/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=3d5b8c6266fd58cefa0d7af8c6115fe22532d069", "patch": "@@ -78,7 +78,8 @@ def get_child_at_index(self, index):\n \n     def as_integer(self):\n         if self.gdb_val.type.code == gdb.TYPE_CODE_PTR:\n-            return int(str(self.gdb_val), 0)\n+            as_str = rustpp.compat_str(self.gdb_val).split()[0]\n+            return int(as_str, 0)\n         return int(self.gdb_val)\n \n     def get_wrapped_value(self):\n@@ -99,8 +100,10 @@ def rust_pretty_printer_lookup_function(gdb_val):\n     val = GdbValue(gdb_val)\n     type_kind = val.type.get_type_kind()\n \n-    if (type_kind == rustpp.TYPE_KIND_REGULAR_STRUCT or\n-        type_kind == rustpp.TYPE_KIND_EMPTY):\n+    if type_kind == rustpp.TYPE_KIND_EMPTY:\n+        return RustEmptyPrinter(val)\n+\n+    if type_kind == rustpp.TYPE_KIND_REGULAR_STRUCT:\n         return RustStructPrinter(val,\n                                  omit_first_field = False,\n                                  omit_type_name = False,\n@@ -124,6 +127,9 @@ def rust_pretty_printer_lookup_function(gdb_val):\n     if type_kind == rustpp.TYPE_KIND_STD_STRING:\n         return RustStdStringPrinter(val)\n \n+    if type_kind == rustpp.TYPE_KIND_OS_STRING:\n+        return RustOsStringPrinter(val)\n+\n     if type_kind == rustpp.TYPE_KIND_TUPLE:\n         return RustStructPrinter(val,\n                                  omit_first_field = False,\n@@ -170,6 +176,14 @@ def rust_pretty_printer_lookup_function(gdb_val):\n #=------------------------------------------------------------------------------\n # Pretty Printer Classes\n #=------------------------------------------------------------------------------\n+class RustEmptyPrinter(object):\n+    def __init__(self, val):\n+        self.__val = val\n+\n+    def to_string(self):\n+        return self.__val.type.get_unqualified_type_name()\n+\n+\n class RustStructPrinter(object):\n     def __init__(self, val, omit_first_field, omit_type_name, is_tuple_like):\n         self.__val = val\n@@ -186,10 +200,10 @@ def children(self):\n         cs = []\n         wrapped_value = self.__val.get_wrapped_value()\n \n-        for field in self.__val.type.get_fields():\n+        for number, field in enumerate(self.__val.type.get_fields()):\n             field_value = wrapped_value[field.name]\n             if self.__is_tuple_like:\n-                cs.append((\"\", field_value))\n+                cs.append((str(number), field_value))\n             else:\n                 cs.append((field.name, field_value))\n \n@@ -268,6 +282,21 @@ def to_string(self):\n                                                             length=length)\n \n \n+class RustOsStringPrinter(object):\n+    def __init__(self, val):\n+        self.__val = val\n+\n+    def to_string(self):\n+        buf = self.__val.get_child_at_index(0)\n+        vec = buf.get_child_at_index(0)\n+        if vec.type.get_unqualified_type_name() == \"Wtf8Buf\":\n+            vec = vec.get_child_at_index(0)\n+\n+        (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(\n+            vec)\n+        return '\"%s\"' % data_ptr.get_wrapped_value().string(length=length)\n+\n+\n class RustCStyleVariantPrinter(object):\n     def __init__(self, val):\n         assert val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_ENUM"}, {"sha": "9596f0287bc5927835b36072e036cfb8f0470341", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d5b8c6266fd58cefa0d7af8c6115fe22532d069/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5b8c6266fd58cefa0d7af8c6115fe22532d069/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=3d5b8c6266fd58cefa0d7af8c6115fe22532d069", "patch": "@@ -38,6 +38,12 @@\n // gdbg-check:$6 = None\n // gdbr-check:$6 = core::option::Option::None\n \n+// gdb-command: print os_string\n+// gdb-check:$7 = \"IAMA OS string \ud83d\ude03\"\n+\n+// gdb-command: print some_string\n+// gdb-check:$8 = Some = {\"IAMA optional string!\"}\n+\n \n // === LLDB TESTS ==================================================================================\n \n@@ -63,6 +69,8 @@\n \n \n #![allow(unused_variables)]\n+use std::ffi::OsString;\n+\n \n fn main() {\n \n@@ -78,10 +86,15 @@ fn main() {\n     // String\n     let string = \"IAMA string!\".to_string();\n \n+    // OsString\n+    let os_string = OsString::from(\"IAMA OS string \\u{1F603}\");\n+\n     // Option\n     let some = Some(8i16);\n     let none: Option<i64> = None;\n \n+    let some_string = Some(\"IAMA optional string!\".to_owned());\n+\n     zzz(); // #break\n }\n "}]}