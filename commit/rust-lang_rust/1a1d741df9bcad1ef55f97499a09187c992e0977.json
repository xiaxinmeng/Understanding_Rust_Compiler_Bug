{"sha": "1a1d741df9bcad1ef55f97499a09187c992e0977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMWQ3NDFkZjliY2FkMWVmNTVmOTc0OTlhMDkxODdjOTkyZTA5Nzc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-22T21:45:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-22T21:45:25Z"}, "message": "Merge pull request #203 from RalfJung/offset\n\nAllow any offset on integer and ZST pointers", "tree": {"sha": "b5a0f737edac0b564dbc098a3cb675d46358f9d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a0f737edac0b564dbc098a3cb675d46358f9d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1d741df9bcad1ef55f97499a09187c992e0977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1d741df9bcad1ef55f97499a09187c992e0977", "html_url": "https://github.com/rust-lang/rust/commit/1a1d741df9bcad1ef55f97499a09187c992e0977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1d741df9bcad1ef55f97499a09187c992e0977/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de111018d036c977ccb03aca55a43c18413fd69", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de111018d036c977ccb03aca55a43c18413fd69", "html_url": "https://github.com/rust-lang/rust/commit/8de111018d036c977ccb03aca55a43c18413fd69"}, {"sha": "c1a6df941e040cf2e6f524a78fc407f9cc56c02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a6df941e040cf2e6f524a78fc407f9cc56c02c", "html_url": "https://github.com/rust-lang/rust/commit/c1a6df941e040cf2e6f524a78fc407f9cc56c02c"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "ee805695c510fdca5df2b00168da88a7526b3744", "filename": "src/error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a1d741df9bcad1ef55f97499a09187c992e0977/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1d741df9bcad1ef55f97499a09187c992e0977/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=1a1d741df9bcad1ef55f97499a09187c992e0977", "patch": "@@ -21,6 +21,7 @@ pub enum EvalError<'tcx> {\n         access: bool,\n         allocation_size: u64,\n     },\n+    NullPointerOutOfBounds,\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,\n     InvalidPointerMath,\n@@ -80,12 +81,14 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"invalid enum discriminant value read\",\n             EvalError::PointerOutOfBounds { .. } =>\n                 \"pointer offset outside bounds of allocation\",\n+            EvalError::NullPointerOutOfBounds =>\n+                \"invalid NULL pointer offset\",\n             EvalError::ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             EvalError::ReadBytesAsPointer =>\n                 \"a memory access tried to interpret some bytes as a pointer\",\n             EvalError::InvalidPointerMath =>\n-                \"attempted to do math or a comparison on pointers into different allocations\",\n+                \"attempted to do invalid arithmetic on pointers that would leak base addresses, e.g. compating pointers into different allocations\",\n             EvalError::ReadUndefBytes =>\n                 \"attempted to read undefined bytes\",\n             EvalError::DeadLocal =>"}, {"sha": "9300ae3dbc2356bf518038e4e5f8121e8ef3516d", "filename": "src/eval_context.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a1d741df9bcad1ef55f97499a09187c992e0977/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1d741df9bcad1ef55f97499a09187c992e0977/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=1a1d741df9bcad1ef55f97499a09187c992e0977", "patch": "@@ -892,19 +892,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub(super) fn pointer_offset(&self, ptr: PrimVal, pointee_ty: Ty<'tcx>, offset: i64) -> EvalResult<'tcx, PrimVal> {\n-        if offset == 0 {\n-            // rustc relies on Offset-by-0 to be well-defined even for \"bad\" pointers like Unique::empty().\n-            return Ok(ptr);\n+        // This function raises an error if the offset moves the pointer outside of its allocation.  We consider\n+        // ZSTs their own huge allocation that doesn't overlap with anything (and nothing moves in there because the size is 0).\n+        // We also consider the NULL pointer its own separate allocation, and all the remaining integers pointers their own\n+        // allocation.\n+\n+        if ptr.is_null()? { // NULL pointers must only be offset by 0\n+            return if offset == 0 { Ok(ptr) } else { Err(EvalError::NullPointerOutOfBounds) };\n         }\n         // FIXME: assuming here that type size is < i64::max_value()\n         let pointee_size = self.type_size(pointee_ty)?.expect(\"cannot offset a pointer to an unsized type\") as i64;\n-        if pointee_size == 0 {\n-            // rustc relies on offsetting pointers to zsts to be a nop\n-            return Ok(ptr);\n-        }\n         return if let Some(offset) = offset.checked_mul(pointee_size) {\n             let ptr = ptr.signed_offset(offset, self.memory.layout)?;\n-            self.memory.check_bounds(ptr.to_ptr()?, false)?;\n+            // Do not do bounds-checking for integers or ZST; they can never alias a normal pointer anyway.\n+            if let PrimVal::Ptr(ptr) = ptr {\n+                if !(ptr.points_to_zst() && (offset == 0 || pointee_size == 0)) {\n+                    self.memory.check_bounds(ptr, false)?;\n+                }\n+            } else if ptr.is_null()? {\n+                // We moved *to* a NULL pointer.  That seems wrong, LLVM considers the NULL pointer its own small allocation.  Reject this, for now.\n+                return Err(EvalError::NullPointerOutOfBounds);\n+            }\n             Ok(ptr)\n         } else {\n             Err(EvalError::OverflowingMath)"}, {"sha": "90f0aed7f10a8bb15646c2371dac715b5718b2f8", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a1d741df9bcad1ef55f97499a09187c992e0977/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1d741df9bcad1ef55f97499a09187c992e0977/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=1a1d741df9bcad1ef55f97499a09187c992e0977", "patch": "@@ -585,14 +585,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"dlsym\" => {\n-                let handle = args[0].read_ptr(&self.memory)?;\n-                {\n-                    let symbol = args[1].read_ptr(&self.memory)?.to_ptr()?;\n-                    let symbol_name = self.memory.read_c_str(symbol)?;\n-                    let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n-                    let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n-                    return Err(EvalError::Unimplemented(format!(\"miri does not support dynamically loading libraries (requested symbol: {})\", symbol_name)));\n-                }\n+                let _handle = args[0].read_ptr(&self.memory)?;\n+                let symbol = args[1].read_ptr(&self.memory)?.to_ptr()?;\n+                let symbol_name = self.memory.read_c_str(symbol)?;\n+                let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n+                let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n+                return Err(EvalError::Unimplemented(format!(\"miri does not support dynamically loading libraries (requested symbol: {})\", symbol_name)));\n             }\n \n             \"__rust_allocate\" => {"}, {"sha": "245b7527c55b27a6234ebccd1d4aeaeed127019b", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a1d741df9bcad1ef55f97499a09187c992e0977/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1d741df9bcad1ef55f97499a09187c992e0977/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=1a1d741df9bcad1ef55f97499a09187c992e0977", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    if x < y { //~ ERROR: attempted to do math or a comparison on pointers into different allocations\n+    if x < y { //~ ERROR: attempted to do invalid arithmetic on pointers\n         unreachable!()\n     }\n }"}]}