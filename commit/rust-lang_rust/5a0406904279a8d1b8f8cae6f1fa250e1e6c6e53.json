{"sha": "5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDQwNjkwNDI3OWE4ZDFiOGY4Y2FlNmYxZmEyNTBlMWU2YzZlNTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-09T03:37:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-09T03:37:57Z"}, "message": "Merge pull request #2559 from mozilla/incoming\n\nIncoming", "tree": {"sha": "6949e32e313216600f22fec04e2a3258e713727e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6949e32e313216600f22fec04e2a3258e713727e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53", "html_url": "https://github.com/rust-lang/rust/commit/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c6c65186ef37ef1592515f5f7b0062acb49153", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c6c65186ef37ef1592515f5f7b0062acb49153", "html_url": "https://github.com/rust-lang/rust/commit/56c6c65186ef37ef1592515f5f7b0062acb49153"}, {"sha": "436b77c9f82eef997a95a3e7c73606c3bb469dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/436b77c9f82eef997a95a3e7c73606c3bb469dc3", "html_url": "https://github.com/rust-lang/rust/commit/436b77c9f82eef997a95a3e7c73606c3bb469dc3"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "d62beaa184d287719155707cd26c8c34d49ffeaf", "filename": "src/libcore/str.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53", "patch": "@@ -592,7 +592,22 @@ Section: Comparing strings\n */\n \n #[doc = \"Bytewise string equality\"]\n-pure fn eq(&&a: str, &&b: str) -> bool { a == b }\n+pure fn eq(&&a: str, &&b: str) -> bool {\n+    // FIXME: This should just be \"a == b\" but that calls into the shape code\n+    // :(\n+    let a_len = a.len();\n+    let b_len = b.len();\n+    if a_len != b_len { ret false; }\n+    let mut end = uint::min(a_len, b_len);\n+\n+    let mut i = 0u;\n+    while i < end {\n+        if a[i] != b[i] { ret false; }\n+        i += 1u;\n+    }\n+\n+    ret true;\n+}\n \n #[doc = \"Bytewise less than or equal\"]\n pure fn le(&&a: str, &&b: str) -> bool { a <= b }\n@@ -1861,11 +1876,11 @@ impl extensions for str {\n \n     Alphanumeric characters are determined by `char::is_alphanumeric`\n     \"]\n-    #[inlune]\n+    #[inline]\n     fn is_alphanumeric() -> bool { is_alphanumeric(self) }\n     #[inline]\n     #[doc =\"Returns the size in bytes not counting the null terminator\"]\n-    fn len() -> uint { len(self) }\n+    pure fn len() -> uint { len(self) }\n     #[doc = \"\n     Returns a slice of the given string from the byte range [`begin`..`end`)\n "}, {"sha": "a6c32f99a72430c94dc1b81e02e5945b6c2f8019", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5a0406904279a8d1b8f8cae6f1fa250e1e6c6e53", "patch": "@@ -70,7 +70,9 @@ class parser {\n     let mut token: token::token;\n     let mut span: span;\n     let mut last_span: span;\n-    let buffer: dvec<{tok: token::token, span: span}>;\n+    let mut buffer: [mut {tok: token::token, span: span}]/4;\n+    let mut buffer_start: int;\n+    let mut buffer_end: int;\n     let mut restriction: restriction;\n     let reader: reader;\n     let keywords: hashmap<str, ()>;\n@@ -86,7 +88,14 @@ class parser {\n         self.token = tok0.tok;\n         self.span = span0;\n         self.last_span = span0;\n-        self.buffer = dvec::dvec();\n+        self.buffer = [mut\n+            {tok: tok0.tok, span: span0},\n+            {tok: tok0.tok, span: span0},\n+            {tok: tok0.tok, span: span0},\n+            {tok: tok0.tok, span: span0}\n+        ]/4;\n+        self.buffer_start = 0;\n+        self.buffer_end = 0;\n         self.restriction = UNRESTRICTED;\n         self.reader = rdr;\n         self.keywords = token::keyword_table();\n@@ -98,12 +107,13 @@ class parser {\n \n     fn bump() {\n         self.last_span = self.span;\n-        if self.buffer.len() == 0u {\n+        if self.buffer_start == self.buffer_end {\n             let next = lexer::next_token(self.reader);\n             self.token = next.tok;\n             self.span = mk_sp(next.chpos, self.reader.chpos);\n         } else {\n-            let next = self.buffer.shift();\n+            let next = self.buffer[self.buffer_start];\n+            self.buffer_start = (self.buffer_start + 1) & 3;\n             self.token = next.tok;\n             self.span = next.span;\n         }\n@@ -112,13 +122,21 @@ class parser {\n         self.token = next;\n         self.span = mk_sp(lo, hi);\n     }\n+    fn buffer_length() -> int {\n+        if self.buffer_start <= self.buffer_end {\n+            ret self.buffer_end - self.buffer_start;\n+        }\n+        ret (4 - self.buffer_start) + self.buffer_end;\n+    }\n     fn look_ahead(distance: uint) -> token::token {\n-        while self.buffer.len() < distance {\n+        let dist = distance as int;\n+        while self.buffer_length() < dist {\n             let next = lexer::next_token(self.reader);\n             let sp = mk_sp(next.chpos, self.reader.chpos);\n-            self.buffer.push({tok: next.tok, span: sp});\n+            self.buffer[self.buffer_end] = {tok: next.tok, span: sp};\n+            self.buffer_end = (self.buffer_end + 1) & 3;\n         }\n-        ret self.buffer[distance - 1u].tok;\n+        ret copy self.buffer[(self.buffer_start + dist - 1) & 3].tok;\n     }\n     fn fatal(m: str) -> ! {\n         self.sess.span_diagnostic.span_fatal(copy self.span, m)"}]}