{"sha": "42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjdkMmMxNzBiZmUxNjIzZTYzZmY5MTNiZjJkMmFjNGQwNTliYzE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-24T07:32:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-24T10:59:42Z"}, "message": "Rollup merge of #59251 - matthewjasper:fix-graphviz, r=petrochenkov\n\nUse a valid name for graphviz graphs\n\nHiridification has broken graphviz output because `HirId` has a more complex display implemetation than `NodeId`. Since the id was just used to generate a distinct identifier, we just pull out the various constituent indexed.", "tree": {"sha": "433fe23d5bb6bc07b13ee5dd43ead725d4aa7748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/433fe23d5bb6bc07b13ee5dd43ead725d4aa7748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyXYyAACgkQ/vbIBR0O\nATxPJBAArKGbqct7R0l/XYFwdNz+sjMxeHaSE3uc2g30z1vfH0HXzKXhuLBUN1an\nq7MZSKwOyb44G4GIBOP6Aqqcw17A181KuT8IxQpNWZfWzXCT6/LtwJdHUu1k7jAi\nV7gA40wh8YeSx8YCk4mkwIp9ujSHudBJGzBaLgvmPdASs8d/KEqCpJAc5vGQi+/u\nBXAnoTj3TBcKl+plAiN0qour03OxyNxaidLeul2ls0648az7u0khOktE2UBYnHln\nrgaBS5TghMOCuPU16FhXJNyv0si0uFVGimNKp84GnII+HIHDiPTaiiN13l2blXks\nGrff0vwRY1FCRQ8xvHyDeUIOwZ/KEXpGFUY6k7tsO8bEIyKfQdbdRHVFGq5DOQu/\ncTam0MbO1ewKsipWanKBYuqxme2qxwNC6G0Jh36c+yJDcUkg273aE8kvRPIYhpCq\nfomZfXt5p68f8w1yK2scH3FZBz9TyCAV6DflzKeCuuGL2BJeC4aGlt+46RMz5Sqf\nyhYRRJ/KrXXlzH/SbAQlMUUQ5fsaQ7bsHowvdUHyOLF1g0Xecb2zSoix1oGfWA4y\nbIiBiy3r2gtIflQ812yIs/wBdRW6prNQFtxgaWIhbNAWHp1asayiTCWuTDVs7mDD\n/25c2DXpae6CV31VHnU7xB6fCegJq3PayUIUriB0xi5g5/Lbrg0=\n=DyO4\n-----END PGP SIGNATURE-----", "payload": "tree 433fe23d5bb6bc07b13ee5dd43ead725d4aa7748\nparent 48dc8efc8595d397b3820a0784f0dbe553c3fb27\nparent 64303189f0b3a111c3b1e59d77cdaad91ca90efe\nauthor kennytm <kennytm@gmail.com> 1553412768 +0800\ncommitter kennytm <kennytm@gmail.com> 1553425182 +0800\n\nRollup merge of #59251 - matthewjasper:fix-graphviz, r=petrochenkov\n\nUse a valid name for graphviz graphs\n\nHiridification has broken graphviz output because `HirId` has a more complex display implemetation than `NodeId`. Since the id was just used to generate a distinct identifier, we just pull out the various constituent indexed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "html_url": "https://github.com/rust-lang/rust/commit/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48dc8efc8595d397b3820a0784f0dbe553c3fb27", "url": "https://api.github.com/repos/rust-lang/rust/commits/48dc8efc8595d397b3820a0784f0dbe553c3fb27", "html_url": "https://github.com/rust-lang/rust/commit/48dc8efc8595d397b3820a0784f0dbe553c3fb27"}, {"sha": "64303189f0b3a111c3b1e59d77cdaad91ca90efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/64303189f0b3a111c3b1e59d77cdaad91ca90efe", "html_url": "https://github.com/rust-lang/rust/commit/64303189f0b3a111c3b1e59d77cdaad91ca90efe"}], "stats": {"total": 125, "additions": 85, "deletions": 40}, "files": [{"sha": "ace5198deaf2edb7794520853125c882f227dd50", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -633,10 +633,20 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     let body = tcx.hir().body(body_id);\n     let cfg = cfg::CFG::new(tcx, &body);\n     let labelled_edges = mode != PpFlowGraphMode::UnlabelledEdges;\n+    let hir_id = code.id();\n+    // We have to disassemble the hir_id because name must be ASCII\n+    // alphanumeric. This does not appear in the rendered graph, so it does not\n+    // have to be user friendly.\n+    let name = format!(\n+        \"hir_id_{}_{}_{}\",\n+        hir_id.owner.address_space().index(),\n+        hir_id.owner.as_array_index(),\n+        hir_id.local_id.index(),\n+    );\n     let lcfg = LabelledCFG {\n         tcx,\n         cfg: &cfg,\n-        name: format!(\"node_{}\", code.id()),\n+        name,\n         labelled_edges,\n     };\n "}, {"sha": "551f18b95fe5280d263ccdfc3257f603e467f86b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -156,7 +156,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let mut flow_inits = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         MaybeInitializedPlaces::new(tcx, mir, &mdpe),\n@@ -191,7 +191,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let flow_borrows = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         Borrows::new(tcx, mir, regioncx.clone(), &borrow_set),\n@@ -200,7 +200,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let flow_uninits = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n@@ -209,7 +209,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let flow_ever_inits = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         EverInitializedPlaces::new(tcx, mir, &mdpe),"}, {"sha": "d68377681f1ca935ad6a2cc4468a320059c4b483", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -1,20 +1,22 @@\n //! Hook into libgraphviz for rendering dataflow graphs for MIR.\n \n-use rustc::hir::HirId;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::{BasicBlock, Mir};\n \n use std::fs;\n use std::io;\n use std::marker::PhantomData;\n use std::path::Path;\n \n+use crate::util::graphviz_safe_def_name;\n+\n use super::{BitDenotation, DataflowState};\n use super::DataflowBuilder;\n use super::DebugFormatted;\n \n pub trait MirWithFlowState<'tcx> {\n     type BD: BitDenotation<'tcx>;\n-    fn hir_id(&self) -> HirId;\n+    fn def_id(&self) -> DefId;\n     fn mir(&self) -> &Mir<'tcx>;\n     fn flow_state(&self) -> &DataflowState<'tcx, Self::BD>;\n }\n@@ -23,7 +25,7 @@ impl<'a, 'tcx, BD> MirWithFlowState<'tcx> for DataflowBuilder<'a, 'tcx, BD>\n     where BD: BitDenotation<'tcx>\n {\n     type BD = BD;\n-    fn hir_id(&self) -> HirId { self.hir_id }\n+    fn def_id(&self) -> DefId { self.def_id }\n     fn mir(&self) -> &Mir<'tcx> { self.flow_state.mir() }\n     fn flow_state(&self) -> &DataflowState<'tcx, Self::BD> { &self.flow_state.flow_state }\n }\n@@ -47,8 +49,8 @@ pub(crate) fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     let g = Graph { mbcx, phantom: PhantomData, render_idx };\n     let mut v = Vec::new();\n     dot::render(&g, &mut v)?;\n-    debug!(\"print_borrowck_graph_to path: {} hir_id: {}\",\n-           path.display(), mbcx.hir_id);\n+    debug!(\"print_borrowck_graph_to path: {} def_id: {:?}\",\n+           path.display(), mbcx.def_id);\n     fs::write(path, v)\n }\n \n@@ -69,9 +71,8 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n     type Node = Node;\n     type Edge = Edge;\n     fn graph_id(&self) -> dot::Id<'_> {\n-        dot::Id::new(format!(\"graph_for_node_{}\",\n-                             self.mbcx.hir_id()))\n-            .unwrap()\n+        let name = graphviz_safe_def_name(self.mbcx.def_id());\n+        dot::Id::new(format!(\"graph_for_def_id_{}\", name)).unwrap()\n     }\n \n     fn node_id(&self, n: &Node) -> dot::Id<'_> {"}, {"sha": "af0e3f5a2709130764cb7e211568a8f7f1bca623", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::bit_set::{BitSet, BitSetOperator, HybridBitSet};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::work_queue::WorkQueue;\n \n-use rustc::hir::HirId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, BasicBlock, BasicBlockData, Location, Statement, Terminator};\n use rustc::mir::traversal;\n@@ -39,7 +39,7 @@ pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD>\n where\n     BD: BitDenotation<'tcx>\n {\n-    hir_id: HirId,\n+    def_id: DefId,\n     flow_state: DataflowAnalysis<'a, 'tcx, BD>,\n     print_preflow_to: Option<String>,\n     print_postflow_to: Option<String>,\n@@ -117,7 +117,7 @@ pub struct MoveDataParamEnv<'gcx, 'tcx> {\n \n pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                  mir: &'a Mir<'tcx>,\n-                                                 hir_id: HirId,\n+                                                 def_id: DefId,\n                                                  attributes: &[ast::Attribute],\n                                                  dead_unwinds: &BitSet<BasicBlock>,\n                                                  bd: BD,\n@@ -127,14 +127,14 @@ pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n           P: Fn(&BD, BD::Idx) -> DebugFormatted\n {\n     let flow_state = DataflowAnalysis::new(mir, dead_unwinds, bd);\n-    flow_state.run(tcx, hir_id, attributes, p)\n+    flow_state.run(tcx, def_id, attributes, p)\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     pub(crate) fn run<P>(self,\n                          tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                         hir_id: HirId,\n+                         def_id: DefId,\n                          attributes: &[ast::Attribute],\n                          p: P) -> DataflowResults<'tcx, BD>\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n@@ -159,7 +159,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitD\n             name_found(tcx.sess, attributes, \"borrowck_graphviz_postflow\");\n \n         let mut mbcx = DataflowBuilder {\n-            hir_id,\n+            def_id,\n             print_preflow_to, print_postflow_to, flow_state: self,\n         };\n "}, {"sha": "023a61588c42e9c964b754319659c4a2f136b725", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -28,7 +28,7 @@ impl MirPass for ElaborateDrops {\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);\n \n-        let id = tcx.hir().as_local_hir_id(src.def_id()).unwrap();\n+        let def_id = src.def_id();\n         let param_env = tcx.param_env(src.def_id()).with_reveal_all();\n         let move_data = match MoveData::gather_moves(mir, tcx) {\n             Ok(move_data) => move_data,\n@@ -50,13 +50,13 @@ impl MirPass for ElaborateDrops {\n                 move_data,\n                 param_env,\n             };\n-            let dead_unwinds = find_dead_unwinds(tcx, mir, id, &env);\n+            let dead_unwinds = find_dead_unwinds(tcx, mir, def_id, &env);\n             let flow_inits =\n-                do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                do_dataflow(tcx, mir, def_id, &[], &dead_unwinds,\n                             MaybeInitializedPlaces::new(tcx, mir, &env),\n                             |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n             let flow_uninits =\n-                do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                do_dataflow(tcx, mir, def_id, &[], &dead_unwinds,\n                             MaybeUninitializedPlaces::new(tcx, mir, &env),\n                             |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n \n@@ -80,7 +80,7 @@ impl MirPass for ElaborateDrops {\n fn find_dead_unwinds<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    id: hir::HirId,\n+    def_id: hir::def_id::DefId,\n     env: &MoveDataParamEnv<'tcx, 'tcx>)\n     -> BitSet<BasicBlock>\n {\n@@ -89,7 +89,7 @@ fn find_dead_unwinds<'a, 'tcx>(\n     // reach cleanup blocks, which can't have unwind edges themselves.\n     let mut dead_unwinds = BitSet::new_empty(mir.basic_blocks().len());\n     let flow_inits =\n-        do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+        do_dataflow(tcx, mir, def_id, &[], &dead_unwinds,\n                     MaybeInitializedPlaces::new(tcx, mir, &env),\n                     |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n     for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {"}, {"sha": "c4e303eb9aa1f044b4980d9144eab05e61482fa4", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -390,13 +390,13 @@ fn locals_live_across_suspend_points(\n     FxHashMap<BasicBlock, liveness::LiveVarSet>,\n ) {\n     let dead_unwinds = BitSet::new_empty(mir.basic_blocks().len());\n-    let hir_id = tcx.hir().as_local_hir_id(source.def_id()).unwrap();\n+    let def_id = source.def_id();\n \n     // Calculate when MIR locals have live storage. This gives us an upper bound of their\n     // lifetimes.\n     let storage_live_analysis = MaybeStorageLive::new(mir);\n     let storage_live =\n-        do_dataflow(tcx, mir, hir_id, &[], &dead_unwinds, storage_live_analysis,\n+        do_dataflow(tcx, mir, def_id, &[], &dead_unwinds, storage_live_analysis,\n                     |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n \n     // Find the MIR locals which do not use StorageLive/StorageDead statements.\n@@ -410,7 +410,7 @@ fn locals_live_across_suspend_points(\n     let borrowed_locals = if !movable {\n         let analysis = HaveBeenBorrowedLocals::new(mir);\n         let result =\n-            do_dataflow(tcx, mir, hir_id, &[], &dead_unwinds, analysis,\n+            do_dataflow(tcx, mir, def_id, &[], &dead_unwinds, analysis,\n                         |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n         Some((analysis, result))\n     } else {"}, {"sha": "246f876235d71c384a782fbf24ec7523d0d14581", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -3,7 +3,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n-use rustc::hir;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::bit_set::BitSet;\n use crate::transform::{MirPass, MirSource};\n@@ -27,7 +27,6 @@ impl MirPass for SanityCheck {\n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>, mir: &mut Mir<'tcx>) {\n         let def_id = src.def_id();\n-        let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         if !tcx.has_attr(def_id, \"rustc_mir\") {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));\n             return;\n@@ -41,26 +40,26 @@ impl MirPass for SanityCheck {\n         let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n         let dead_unwinds = BitSet::new_empty(mir.basic_blocks().len());\n         let flow_inits =\n-            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+            do_dataflow(tcx, mir, def_id, &attributes, &dead_unwinds,\n                         MaybeInitializedPlaces::new(tcx, mir, &mdpe),\n                         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n         let flow_uninits =\n-            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+            do_dataflow(tcx, mir, def_id, &attributes, &dead_unwinds,\n                         MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n                         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n         let flow_def_inits =\n-            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+            do_dataflow(tcx, mir, def_id, &attributes, &dead_unwinds,\n                         DefinitelyInitializedPlaces::new(tcx, mir, &mdpe),\n                         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n \n         if has_rustc_mir_with(&attributes, \"rustc_peek_maybe_init\").is_some() {\n-            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_inits);\n+            sanity_check_via_rustc_peek(tcx, mir, def_id, &attributes, &flow_inits);\n         }\n         if has_rustc_mir_with(&attributes, \"rustc_peek_maybe_uninit\").is_some() {\n-            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_uninits);\n+            sanity_check_via_rustc_peek(tcx, mir, def_id, &attributes, &flow_uninits);\n         }\n         if has_rustc_mir_with(&attributes, \"rustc_peek_definite_init\").is_some() {\n-            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_def_inits);\n+            sanity_check_via_rustc_peek(tcx, mir, def_id, &attributes, &flow_def_inits);\n         }\n         if has_rustc_mir_with(&attributes, \"stop_after_dataflow\").is_some() {\n             tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n@@ -86,12 +85,12 @@ impl MirPass for SanityCheck {\n /// errors are not intended to be used for unit tests.)\n pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 mir: &Mir<'tcx>,\n-                                                id: hir::HirId,\n+                                                def_id: DefId,\n                                                 _attributes: &[ast::Attribute],\n                                                 results: &DataflowResults<'tcx, O>)\n     where O: BitDenotation<'tcx, Idx=MovePathIndex> + HasMoveData<'tcx>\n {\n-    debug!(\"sanity_check_via_rustc_peek id: {:?}\", id);\n+    debug!(\"sanity_check_via_rustc_peek def_id: {:?}\", def_id);\n     // FIXME: this is not DRY. Figure out way to abstract this and\n     // `dataflow::build_sets`. (But note it is doing non-standard\n     // stuff, so such generalization may not be realistic.)"}, {"sha": "f87714b58c4423940affa94017ee041d2a5c25ae", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n+use rustc_data_structures::indexed_vec::Idx;\n use std::fmt::Debug;\n use std::io::{self, Write};\n \n@@ -20,14 +21,25 @@ pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n     Ok(())\n }\n \n+// Must match `[0-9A-Za-z_]*`. This does not appear in the rendered graph, so\n+// it does not have to be user friendly.\n+pub fn graphviz_safe_def_name(def_id: DefId) -> String {\n+    format!(\n+        \"{}_{}_{}\",\n+        def_id.krate.index(),\n+        def_id.index.address_space().index(),\n+        def_id.index.as_array_index(),\n+    )\n+}\n+\n /// Write a graphviz DOT graph of the MIR.\n pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n                                       def_id: DefId,\n                                       mir: &Mir<'_>,\n                                       w: &mut W) -> io::Result<()>\n     where W: Write\n {\n-    writeln!(w, \"digraph Mir_{} {{\", tcx.hir().as_local_hir_id(def_id).unwrap())?;\n+    writeln!(w, \"digraph Mir_{} {{\", graphviz_safe_def_name(def_id))?;\n \n     // Global graph properties\n     writeln!(w, r#\"    graph [fontname=\"monospace\"];\"#)?;"}, {"sha": "1a5a2a92247dd3f120bd354f0ca370ca5369af71", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -15,7 +15,7 @@ pub mod collect_writes;\n \n pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n-pub use self::graphviz::{write_mir_graphviz};\n+pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`."}, {"sha": "660576996e5d42103cf1cca6b75d131eda1fb75e", "filename": "src/test/mir-opt/graphviz.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=42b7d2c170bfe1623e63ff913bf2d2ac4d059bc1", "patch": "@@ -0,0 +1,23 @@\n+// Test graphviz output\n+// compile-flags: -Z dump-mir-graphviz\n+\n+// ignore-tidy-linelength\n+\n+fn main() {}\n+\n+// END RUST SOURCE\n+// START rustc.main.mir_map.0.dot\n+// digraph Mir_0_0_3 { // The name here MUST be an ASCII identifier.\n+//     graph [fontname=\"monospace\"];\n+//     node [fontname=\"monospace\"];\n+//     edge [fontname=\"monospace\"];\n+//     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n+//     bb0 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>\n+// >];\n+//     bb1 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>\n+// >];\n+//     bb2 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>\n+// >];\n+//     bb0 -> bb2 [label=\"\"];\n+// }\n+// END rustc.main.mir_map.0.dot"}]}