{"sha": "2df4f2a126ec817666c66dd94f25411da1789243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZjRmMmExMjZlYzgxNzY2NmM2NmRkOTRmMjU0MTFkYTE3ODkyNDM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-01T04:24:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T06:07:08Z"}, "message": "Add field `backtrace: SyntaxContext` to `ExpansionData`.", "tree": {"sha": "0db916bdef64cc3691cc121868e2da66f6fbaa6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db916bdef64cc3691cc121868e2da66f6fbaa6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df4f2a126ec817666c66dd94f25411da1789243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df4f2a126ec817666c66dd94f25411da1789243", "html_url": "https://github.com/rust-lang/rust/commit/2df4f2a126ec817666c66dd94f25411da1789243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df4f2a126ec817666c66dd94f25411da1789243/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9f81190f2228a8b2c4fba4f3494773e10f70e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f81190f2228a8b2c4fba4f3494773e10f70e96", "html_url": "https://github.com/rust-lang/rust/commit/c9f81190f2228a8b2c4fba4f3494773e10f70e96"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "84bed07fe711f176d0db0580677950db92561a0b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2df4f2a126ec817666c66dd94f25411da1789243/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df4f2a126ec817666c66dd94f25411da1789243/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2df4f2a126ec817666c66dd94f25411da1789243", "patch": "@@ -18,7 +18,7 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, MultiModifier, MultiDecorator, MultiItemModifier};\n use syntax::ext::base::{NormalTT, SyntaxExtension};\n use syntax::ext::expand::{Expansion, Invocation, InvocationKind};\n-use syntax::ext::hygiene::Mark;\n+use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ext::tt::macro_rules;\n use syntax::parse::token::intern;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -30,6 +30,7 @@ pub struct NameBinding {\n \n #[derive(Clone)]\n pub struct ExpansionData<'a> {\n+    backtrace: SyntaxContext,\n     pub module: Module<'a>,\n     def_index: DefIndex,\n     // True if this expansion is in a `const_integer` position, for example `[u32; m!()]`.\n@@ -40,6 +41,7 @@ pub struct ExpansionData<'a> {\n impl<'a> ExpansionData<'a> {\n     pub fn root(graph_root: Module<'a>) -> Self {\n         ExpansionData {\n+            backtrace: SyntaxContext::empty(),\n             module: graph_root,\n             def_index: CRATE_DEF_INDEX,\n             const_integer: false,\n@@ -56,6 +58,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let mark = Mark::fresh();\n         let module = self.module_map[&id];\n         self.expansion_data.insert(mark, ExpansionData {\n+            backtrace: SyntaxContext::empty(),\n             module: module,\n             def_index: module.def_id().unwrap().index,\n             const_integer: false,\n@@ -171,9 +174,10 @@ impl<'a> Resolver<'a> {\n \n     fn collect_def_ids(&mut self, mark: Mark, expansion: &Expansion) {\n         let expansion_data = &mut self.expansion_data;\n-        let ExpansionData { def_index, const_integer, module } = expansion_data[&mark];\n+        let ExpansionData { backtrace, def_index, const_integer, module } = expansion_data[&mark];\n         let visit_macro_invoc = &mut |invoc: map::MacroInvocationData| {\n             expansion_data.entry(invoc.mark).or_insert(ExpansionData {\n+                backtrace: backtrace.apply_mark(invoc.mark),\n                 def_index: invoc.def_index,\n                 const_integer: invoc.const_integer,\n                 module: module,"}]}