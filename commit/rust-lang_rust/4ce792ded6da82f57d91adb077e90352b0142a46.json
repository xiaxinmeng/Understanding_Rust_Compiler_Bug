{"sha": "4ce792ded6da82f57d91adb077e90352b0142a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZTc5MmRlZDZkYTgyZjU3ZDkxYWRiMDc3ZTkwMzUyYjAxNDJhNDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-22T00:50:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-22T00:50:10Z"}, "message": "Rollup merge of #68422 - Centril:diverges-simplify, r=eddyb\n\ntypeck: simplify the handling of `diverges`\n\nSome drive-by cleanup while working on `hir::ExprKind::Let`.\nOstensibly, this has some perf benefits due to reduced allocation and whatnot as well.\n\nr? @eddyb", "tree": {"sha": "f801548c34939cf2fc99ee797c6303b3e3851269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f801548c34939cf2fc99ee797c6303b3e3851269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce792ded6da82f57d91adb077e90352b0142a46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeJ5xCCRBK7hj4Ov3rIwAAdHIIADG3ZL9uGZmcETx0gTbX3sLe\nySdW69NVdRzPOcMOazSDvNHWAPAYOkLihCnW+wbo03idwxt3NYPGaD82lxsVfsRU\nqBxm+JX+PVrQ4HHOYquiBrtRYj+bT8oahTSgYd69euShYl37Oyu3WiovMmzFY30y\npcR0OG36/CZgJvmpU8dCi0lE31+AgvaxaxgYADYG/NWewqU4CQsIDImbaWhf3lt+\nk/eq9ArTP+rlkd9Nn0MtxaAnWfSSHzTgmnrS1Uxboi5aoI//3iJJTIAC/eVjkT7X\nthXf/xlUL/33UHPB5L+WAe6yhI/YIUe+Eq2Wc5X/g/trW/CTsI+DObm2ovH8EWU=\n=wCru\n-----END PGP SIGNATURE-----\n", "payload": "tree f801548c34939cf2fc99ee797c6303b3e3851269\nparent 06029c449845354df7952ae3de112fa774b7f379\nparent 7dceff9b5b2e41855ff3ba2fab3a2ae41e965df5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1579654210 +0100\ncommitter GitHub <noreply@github.com> 1579654210 +0100\n\nRollup merge of #68422 - Centril:diverges-simplify, r=eddyb\n\ntypeck: simplify the handling of `diverges`\n\nSome drive-by cleanup while working on `hir::ExprKind::Let`.\nOstensibly, this has some perf benefits due to reduced allocation and whatnot as well.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce792ded6da82f57d91adb077e90352b0142a46", "html_url": "https://github.com/rust-lang/rust/commit/4ce792ded6da82f57d91adb077e90352b0142a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce792ded6da82f57d91adb077e90352b0142a46/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06029c449845354df7952ae3de112fa774b7f379", "url": "https://api.github.com/repos/rust-lang/rust/commits/06029c449845354df7952ae3de112fa774b7f379", "html_url": "https://github.com/rust-lang/rust/commit/06029c449845354df7952ae3de112fa774b7f379"}, {"sha": "7dceff9b5b2e41855ff3ba2fab3a2ae41e965df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dceff9b5b2e41855ff3ba2fab3a2ae41e965df5", "html_url": "https://github.com/rust-lang/rust/commit/7dceff9b5b2e41855ff3ba2fab3a2ae41e965df5"}], "stats": {"total": 68, "additions": 22, "deletions": 46}, "files": [{"sha": "686cdfbc089b44cab77e65e382a754ca2666f048", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4ce792ded6da82f57d91adb077e90352b0142a46/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce792ded6da82f57d91adb077e90352b0142a46/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=4ce792ded6da82f57d91adb077e90352b0142a46", "patch": "@@ -50,30 +50,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.warn_arms_when_scrutinee_diverges(arms, match_src);\n \n-        // Otherwise, we have to union together the types that the\n-        // arms produce and so forth.\n-        let scrut_diverges = self.diverges.get();\n-        self.diverges.set(Diverges::Maybe);\n+        // Otherwise, we have to union together the types that the arms produce and so forth.\n+        let scrut_diverges = self.diverges.replace(Diverges::Maybe);\n \n-        // rust-lang/rust#55810: Typecheck patterns first (via eager\n-        // collection into `Vec`), so we get types for all bindings.\n-        let all_arm_pats_diverge: Vec<_> = arms\n-            .iter()\n-            .map(|arm| {\n-                let mut all_pats_diverge = Diverges::WarnedAlways;\n-                self.diverges.set(Diverges::Maybe);\n-                self.check_pat_top(&arm.pat, scrut_ty, Some(scrut.span), true);\n-                all_pats_diverge &= self.diverges.get();\n-\n-                // As discussed with @eddyb, this is for disabling unreachable_code\n-                // warnings on patterns (they're now subsumed by unreachable_patterns\n-                // warnings).\n-                match all_pats_diverge {\n-                    Diverges::Maybe => Diverges::Maybe,\n-                    Diverges::Always { .. } | Diverges::WarnedAlways => Diverges::WarnedAlways,\n-                }\n-            })\n-            .collect();\n+        // #55810: Type check patterns first so we get types for all bindings.\n+        for arm in arms {\n+            self.check_pat_top(&arm.pat, scrut_ty, Some(scrut.span), true);\n+        }\n \n         // Now typecheck the blocks.\n         //\n@@ -104,19 +87,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             CoerceMany::with_coercion_sites(coerce_first, arms)\n         };\n \n-        let mut other_arms = vec![]; // used only for diagnostics\n+        let mut other_arms = vec![]; // Used only for diagnostics.\n         let mut prior_arm_ty = None;\n-        for (i, (arm, pats_diverge)) in arms.iter().zip(all_arm_pats_diverge).enumerate() {\n+        for (i, arm) in arms.iter().enumerate() {\n             if let Some(g) = &arm.guard {\n-                self.diverges.set(pats_diverge);\n+                self.diverges.set(Diverges::Maybe);\n                 match g {\n                     hir::Guard::If(e) => {\n                         self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {})\n                     }\n                 };\n             }\n \n-            self.diverges.set(pats_diverge);\n+            self.diverges.set(Diverges::Maybe);\n             let arm_ty = if source_if\n                 && if_no_else\n                 && i != 0\n@@ -200,16 +183,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         arms: &'tcx [hir::Arm<'tcx>],\n         source: hir::MatchSource,\n     ) {\n-        if self.diverges.get().is_always() {\n-            use hir::MatchSource::*;\n-            let msg = match source {\n-                IfDesugar { .. } | IfLetDesugar { .. } => \"block in `if` expression\",\n-                WhileDesugar { .. } | WhileLetDesugar { .. } => \"block in `while` expression\",\n-                _ => \"arm\",\n-            };\n-            for arm in arms {\n-                self.warn_if_unreachable(arm.body.hir_id, arm.body.span, msg);\n-            }\n+        use hir::MatchSource::*;\n+        let msg = match source {\n+            IfDesugar { .. } | IfLetDesugar { .. } => \"block in `if` expression\",\n+            WhileDesugar { .. } | WhileLetDesugar { .. } => \"block in `while` expression\",\n+            _ => \"arm\",\n+        };\n+        for arm in arms {\n+            self.warn_if_unreachable(arm.body.hir_id, arm.body.span, msg);\n         }\n     }\n "}, {"sha": "b4c2b85241f9612250f31779a2e5eb4cb15011e7", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ce792ded6da82f57d91adb077e90352b0142a46/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce792ded6da82f57d91adb077e90352b0142a46/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=4ce792ded6da82f57d91adb077e90352b0142a46", "patch": "@@ -165,10 +165,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         // Hide the outer diverging and has_errors flags.\n-        let old_diverges = self.diverges.get();\n-        let old_has_errors = self.has_errors.get();\n-        self.diverges.set(Diverges::Maybe);\n-        self.has_errors.set(false);\n+        let old_diverges = self.diverges.replace(Diverges::Maybe);\n+        let old_has_errors = self.has_errors.replace(false);\n \n         let ty = self.check_expr_kind(expr, expected, needs);\n "}, {"sha": "2dc198b6d9695a96c126c00c0399d7ddcb59d25d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ce792ded6da82f57d91adb077e90352b0142a46/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce792ded6da82f57d91adb077e90352b0142a46/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4ce792ded6da82f57d91adb077e90352b0142a46", "patch": "@@ -4429,10 +4429,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.warn_if_unreachable(stmt.hir_id, stmt.span, \"statement\");\n \n         // Hide the outer diverging and `has_errors` flags.\n-        let old_diverges = self.diverges.get();\n-        let old_has_errors = self.has_errors.get();\n-        self.diverges.set(Diverges::Maybe);\n-        self.has_errors.set(false);\n+        let old_diverges = self.diverges.replace(Diverges::Maybe);\n+        let old_has_errors = self.has_errors.replace(false);\n \n         match stmt.kind {\n             hir::StmtKind::Local(ref l) => {\n@@ -4442,7 +4440,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir::StmtKind::Item(_) => {}\n             hir::StmtKind::Expr(ref expr) => {\n                 // Check with expected type of `()`.\n-\n                 self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit(), |err| {\n                     self.suggest_semicolon_at_end(expr.span, err);\n                 });"}]}