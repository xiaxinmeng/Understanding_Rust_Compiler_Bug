{"sha": "4305c1a89d24987a78912beb3d921ce10538b9f5", "node_id": "C_kwDOAAsO6NoAKDQzMDVjMWE4OWQyNDk4N2E3ODkxMmJlYjNkOTIxY2UxMDUzOGI5ZjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T19:44:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T19:44:52Z"}, "message": "Rollup merge of #109032 - compiler-errors:shorter, r=BoxyUwU\n\nUse `TyCtxt::trait_solver_next` in some places\n\nAlso flip order of if statements to avoid `!`", "tree": {"sha": "f2f01dde8744d1d73beb45513c6e4dbd7e15754e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f01dde8744d1d73beb45513c6e4dbd7e15754e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4305c1a89d24987a78912beb3d921ce10538b9f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDiu0CRBK7hj4Ov3rIwAAbDQIAF2zCEdEYm2f3Ixw/3CcBQvM\neGcEKnCVcPAOIXWYwRhRGl96PoFRfhrNxPTv/baJ7Gk/Fr9QdW9qGYmnWaKj7tHZ\n8hGk9ovbGXlzbeygg8HXBBZfXmearc1oxJlAzx0i2iGYFeOaGAF6p12+O5gs4Ot1\nZ9B/GtXfzuOh7fsFwXcPr2B1HemPgYOzaNS0+Hc7RIuDPsvslliVACUBcFoYe/bC\nb0TJ6rA0KCVKksKT3tGDAe/1kOI7Ji1jNp4eVjeQ8+3/s6d2LM/X5MkHmZFmObtH\n+S4K4KnyKWxAtrUU9uw3d3fD59mXAIPxij/n4gGy8v8g0rs9nsFFbij5sfg7exQ=\n=jrSs\n-----END PGP SIGNATURE-----\n", "payload": "tree f2f01dde8744d1d73beb45513c6e4dbd7e15754e\nparent 66f07c74d5eb745cccffa2a7563580cee1f9e1cf\nparent d2834525ba9378bb69214f3c3f7e868b9f6d4880\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678650292 +0100\ncommitter GitHub <noreply@github.com> 1678650292 +0100\n\nRollup merge of #109032 - compiler-errors:shorter, r=BoxyUwU\n\nUse `TyCtxt::trait_solver_next` in some places\n\nAlso flip order of if statements to avoid `!`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4305c1a89d24987a78912beb3d921ce10538b9f5", "html_url": "https://github.com/rust-lang/rust/commit/4305c1a89d24987a78912beb3d921ce10538b9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4305c1a89d24987a78912beb3d921ce10538b9f5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66f07c74d5eb745cccffa2a7563580cee1f9e1cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f07c74d5eb745cccffa2a7563580cee1f9e1cf", "html_url": "https://github.com/rust-lang/rust/commit/66f07c74d5eb745cccffa2a7563580cee1f9e1cf"}, {"sha": "d2834525ba9378bb69214f3c3f7e868b9f6d4880", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2834525ba9378bb69214f3c3f7e868b9f6d4880", "html_url": "https://github.com/rust-lang/rust/commit/d2834525ba9378bb69214f3c3f7e868b9f6d4880"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "f84b2f4428d1a26c8ae71a503151fac849ef392c", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4305c1a89d24987a78912beb3d921ce10538b9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4305c1a89d24987a78912beb3d921ce10538b9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=4305c1a89d24987a78912beb3d921ce10538b9f5", "patch": "@@ -1,6 +1,5 @@\n use rustc_middle::traits::solve::{Certainty, Goal, MaybeCause};\n use rustc_middle::ty;\n-use rustc_session::config::TraitSolver;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n@@ -80,13 +79,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             _ => obligation.param_env.without_const(),\n         };\n \n-        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n-            let c_pred = self.canonicalize_query_keep_static(\n-                param_env.and(obligation.predicate),\n-                &mut _orig_values,\n-            );\n-            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n-        } else {\n+        if self.tcx.trait_solver_next() {\n             self.probe(|snapshot| {\n                 if let Ok((_, certainty)) =\n                     self.evaluate_root_goal(Goal::new(self.tcx, param_env, obligation.predicate))\n@@ -111,6 +104,12 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     Ok(EvaluationResult::EvaluatedToErr)\n                 }\n             })\n+        } else {\n+            let c_pred = self.canonicalize_query_keep_static(\n+                param_env.and(obligation.predicate),\n+                &mut _orig_values,\n+            );\n+            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n         }\n     }\n "}, {"sha": "d7ce0078124500c75c0a4b7301ed46aa7dbd13ec", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4305c1a89d24987a78912beb3d921ce10538b9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4305c1a89d24987a78912beb3d921ce10538b9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=4305c1a89d24987a78912beb3d921ce10538b9f5", "patch": "@@ -50,7 +50,6 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n-use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};\n@@ -545,13 +544,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.evaluation_probe(|this| {\n-            if this.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+            if this.tcx().trait_solver_next() {\n+                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n+            } else {\n                 this.evaluate_predicate_recursively(\n                     TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n                     obligation.clone(),\n                 )\n-            } else {\n-                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n             }\n         })\n     }\n@@ -591,7 +590,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     where\n         I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,\n     {\n-        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+        if self.tcx().trait_solver_next() {\n+            self.evaluate_predicates_recursively_in_new_solver(predicates)\n+        } else {\n             let mut result = EvaluatedToOk;\n             for obligation in predicates {\n                 let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n@@ -604,8 +605,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n             Ok(result)\n-        } else {\n-            self.evaluate_predicates_recursively_in_new_solver(predicates)\n         }\n     }\n "}]}