{"sha": "5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTAyZWNjMjkxZjBhNmIzNTZmYmIzYjFlMTQ2NDkwODJiOTNhMmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-12-22T20:14:08Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-12-23T11:17:55Z"}, "message": "Add note about destructuring assignments", "tree": {"sha": "609103e33c18049ba75063c6ce8c07ab701b5cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/609103e33c18049ba75063c6ce8c07ab701b5cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "html_url": "https://github.com/rust-lang/rust/commit/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bfdbe68147f2ea8ca4870270643180bef76e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bfdbe68147f2ea8ca4870270643180bef76e02", "html_url": "https://github.com/rust-lang/rust/commit/b7bfdbe68147f2ea8ca4870270643180bef76e02"}], "stats": {"total": 199, "additions": 178, "deletions": 21}, "files": [{"sha": "9085528c84e9f23f62ae196e9cb7bb225e7541a9", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "patch": "@@ -17,7 +17,7 @@ use crate::check::TupleArgumentsFlag::DontTupleArguments;\n use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n \n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n+use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::DefId;\n@@ -723,6 +723,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n     }\n \n+    pub(crate) fn check_lhs_assignable(\n+        &self,\n+        lhs: &'tcx hir::Expr,\n+        err_code: &'static str,\n+        expr_span: &Span,\n+    ) {\n+        if !lhs.is_syntactic_place_expr() {\n+            let mut err = self.tcx.sess.struct_span_err_with_code(\n+                *expr_span,\n+                \"invalid left-hand side of assignment\",\n+                DiagnosticId::Error(err_code.into()),\n+            );\n+            err.span_label(lhs.span, \"cannot assign to this expression\");\n+            let destructuring_assignment = match &lhs.kind {\n+                ExprKind::Array(comps) | ExprKind::Tup(comps) => {\n+                    comps.iter().all(|e| e.is_syntactic_place_expr())\n+                }\n+                ExprKind::Struct(_path, fields, rest) => {\n+                    rest.as_ref().map(|e| e.is_syntactic_place_expr()).unwrap_or(true) &&\n+                        fields.iter().all(|f| f.expr.is_syntactic_place_expr())\n+                }\n+                _ => false,\n+            };\n+            if destructuring_assignment {\n+                err.note(\"destructuring assignments are not yet supported\");\n+                err.note(\n+                    \"for more information, see https://github.com/rust-lang/rfcs/issues/372\",\n+                );\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     /// Type check assignment expression `expr` of form `lhs = rhs`.\n     /// The expected type is `()` and is passsed to the function for the purposes of diagnostics.\n     fn check_expr_assign(\n@@ -752,13 +785,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.help(msg);\n             }\n             err.emit();\n-        } else if !lhs.is_syntactic_place_expr() {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                expr.span,\n-                E0070,\n-                \"invalid left-hand side of assignment\",\n-            ).span_label(lhs.span, \"cannot assign to this expression\").emit();\n+        } else {\n+            self.check_lhs_assignable(lhs, \"E0070\", &expr.span);\n         }\n \n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);"}, {"sha": "dfa55e324a6253f2fa7db4110a6610d133645671", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "patch": "@@ -19,28 +19,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr,\n         op: hir::BinOp,\n-        lhs_expr: &'tcx hir::Expr,\n-        rhs_expr: &'tcx hir::Expr,\n+        lhs: &'tcx hir::Expr,\n+        rhs: &'tcx hir::Expr,\n     ) -> Ty<'tcx> {\n         let (lhs_ty, rhs_ty, return_ty) =\n-            self.check_overloaded_binop(expr, lhs_expr, rhs_expr, op, IsAssign::Yes);\n+            self.check_overloaded_binop(expr, lhs, rhs, op, IsAssign::Yes);\n \n         let ty =\n-            if !lhs_ty.is_ty_var() && !rhs_ty.is_ty_var() && is_builtin_binop(lhs_ty, rhs_ty, op) {\n-                self.enforce_builtin_binop_types(lhs_expr, lhs_ty, rhs_expr, rhs_ty, op);\n+            if !lhs.is_ty_var() && !rhs.is_ty_var() && is_builtin_binop(lhs, rhs, op) {\n+                self.enforce_builtin_binop_types(lhs_expr, lhs, rhs_expr, rhs, op);\n                 self.tcx.mk_unit()\n             } else {\n                 return_ty\n             };\n \n-        if !lhs_expr.is_syntactic_place_expr() {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                op.span,\n-                E0067,\n-                \"invalid left-hand side of assignment\",\n-            ).span_label(lhs_expr.span, \"cannot assign to this expression\").emit();\n-        }\n+        self.check_lhs_assignable(lhs, \"E0067\", &op.span);\n+\n         ty\n     }\n "}, {"sha": "61c25bb471c37d847eca1dd5aa321d0eb10a9240", "filename": "src/test/ui/bad/bad-expr-lhs.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr?ref=5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "patch": "@@ -29,6 +29,9 @@ LL |     (a, b) = (3, 4);\n    |     ------^^^^^^^^^\n    |     |\n    |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/bad-expr-lhs.rs:9:5"}, {"sha": "7112cedfd00093b57839df004bcd080650b33d36", "filename": "src/test/ui/bad/destructuring-assignment.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.rs?ref=5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "patch": "@@ -0,0 +1,21 @@\n+struct S { x: u8, y: u8 }\n+\n+fn main() {\n+    let (a, b) = (1, 2);\n+\n+    (a, b) = (3, 4); //~ ERROR invalid left-hand side of assignment\n+    (a, b) += (3, 4); //~ ERROR invalid left-hand side of assignment\n+    //~^ ERROR binary assignment operation `+=` cannot be applied\n+\n+    [a, b] = [3, 4]; //~ ERROR invalid left-hand side of assignment\n+    [a, b] += [3, 4]; //~ ERROR invalid left-hand side of assignment\n+    //~^ ERROR binary assignment operation `+=` cannot be applied\n+\n+    let s = S { x: 3, y: 4 };\n+\n+    S { x: a, y: b } = s; //~ ERROR invalid left-hand side of assignment\n+    S { x: a, y: b } += s; //~ ERROR invalid left-hand side of assignment\n+    //~^ ERROR binary assignment operation `+=` cannot be applied\n+\n+    S { x: a, ..s } = S { x: 3, y: 4 }; //~ ERROR invalid left-hand side of assignment\n+}"}, {"sha": "676576b7bc526a2a2bd714acd7767c64cfab5802", "filename": "src/test/ui/bad/destructuring-assignment.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fa02ecc291f0a6b356fbb3b1e14649082b93a2f/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.stderr?ref=5fa02ecc291f0a6b356fbb3b1e14649082b93a2f", "patch": "@@ -0,0 +1,111 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/destructuring-assignment.rs:6:5\n+   |\n+LL |     (a, b) = (3, 4);\n+   |     ------^^^^^^^^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `({integer}, {integer})`\n+  --> $DIR/destructuring-assignment.rs:7:5\n+   |\n+LL |     (a, b) += (3, 4);\n+   |     ------^^^^^^^^^^\n+   |     |\n+   |     cannot use `+=` on type `({integer}, {integer})`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `({integer}, {integer})`\n+\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/destructuring-assignment.rs:7:12\n+   |\n+LL |     (a, b) += (3, 4);\n+   |     ------ ^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/destructuring-assignment.rs:10:5\n+   |\n+LL |     [a, b] = [3, 4];\n+   |     ------^^^^^^^^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `[{integer}; 2]`\n+  --> $DIR/destructuring-assignment.rs:11:5\n+   |\n+LL |     [a, b] += [3, 4];\n+   |     ------^^^^^^^^^^\n+   |     |\n+   |     cannot use `+=` on type `[{integer}; 2]`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `[{integer}; 2]`\n+\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/destructuring-assignment.rs:11:12\n+   |\n+LL |     [a, b] += [3, 4];\n+   |     ------ ^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/destructuring-assignment.rs:16:5\n+   |\n+LL |     S { x: a, y: b } = s;\n+   |     ----------------^^^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `S`\n+  --> $DIR/destructuring-assignment.rs:17:5\n+   |\n+LL |     S { x: a, y: b } += s;\n+   |     ----------------^^^^^\n+   |     |\n+   |     cannot use `+=` on type `S`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `S`\n+\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/destructuring-assignment.rs:17:22\n+   |\n+LL |     S { x: a, y: b } += s;\n+   |     ---------------- ^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/destructuring-assignment.rs:20:5\n+   |\n+LL |     S { x: a, ..s } = S { x: 3, y: 4 };\n+   |     ---------------^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not yet supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors have detailed explanations: E0067, E0070, E0368.\n+For more information about an error, try `rustc --explain E0067`."}]}