{"sha": "be803efb7c7ba257716fcc97c57ecfd07e278b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlODAzZWZiN2M3YmEyNTc3MTZmY2M5N2M1N2VjZmQwN2UyNzhiMDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T11:30:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T11:30:00Z"}, "message": "Merge #5585\n\n5585: Finish extern crate grammar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7618dd660346f62715e908355e51917c0b70f914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7618dd660346f62715e908355e51917c0b70f914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be803efb7c7ba257716fcc97c57ecfd07e278b07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIq84CRBK7hj4Ov3rIwAAdHIIAGQ5YhV5TIqaP7GLGfqhnDno\nlj/BaWEwHs6X2WZBwkU+Sm1xd12qW4McMbaUEDfwGrtcw0cCfD3giLY2qgbBIuG2\nmO+Zk2IwTySl4oVpe47T4a2pH87cD+91GlLl/YJ7kOw34bkuiRgdLl/9QNuzNx4p\n5oV647OktaU+szgFrcR7kq6sXUdyJu7p4TKoWpGp19ikOxNaRt6Mc/kx3U1E/SOR\nrj4MfVuJkrFiU0pnythTOUNaaCA3+P5IroxWgilC1z3O2uI0h1t4Xifd6WjbCXU9\nlG1c9ZnBH5xjwuX2RgFklIP0MFmbQgfb8ElDoNEkksEaAohBaO3c0IeptlN8esQ=\n=a87x\n-----END PGP SIGNATURE-----\n", "payload": "tree 7618dd660346f62715e908355e51917c0b70f914\nparent 570fdf26c90758c04b90fadfe1b0e6ee684c6dbe\nparent 96313283cd6cb7732ad4f6498f938dcd428d1864\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596108600 +0000\ncommitter GitHub <noreply@github.com> 1596108600 +0000\n\nMerge #5585\n\n5585: Finish extern crate grammar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be803efb7c7ba257716fcc97c57ecfd07e278b07", "html_url": "https://github.com/rust-lang/rust/commit/be803efb7c7ba257716fcc97c57ecfd07e278b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be803efb7c7ba257716fcc97c57ecfd07e278b07/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "570fdf26c90758c04b90fadfe1b0e6ee684c6dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/570fdf26c90758c04b90fadfe1b0e6ee684c6dbe", "html_url": "https://github.com/rust-lang/rust/commit/570fdf26c90758c04b90fadfe1b0e6ee684c6dbe"}, {"sha": "96313283cd6cb7732ad4f6498f938dcd428d1864", "url": "https://api.github.com/repos/rust-lang/rust/commits/96313283cd6cb7732ad4f6498f938dcd428d1864", "html_url": "https://github.com/rust-lang/rust/commit/96313283cd6cb7732ad4f6498f938dcd428d1864"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "bfd574c5dcc713a3c47d284154154eedcacbc5b6", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -671,7 +671,7 @@ impl ExprCollector<'_> {\n                     ast::Item::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n                     ast::Item::ImplDef(_)\n                     | ast::Item::UseItem(_)\n-                    | ast::Item::ExternCrateItem(_)\n+                    | ast::Item::ExternCrate(_)\n                     | ast::Item::Module(_)\n                     | ast::Item::MacroCall(_) => return None,\n                 };"}, {"sha": "4db7b2793f8db5d263b95f713470b7133f253960", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -412,7 +412,7 @@ macro_rules! mod_items {\n \n mod_items! {\n     Import in imports -> ast::UseItem,\n-    ExternCrate in extern_crates -> ast::ExternCrateItem,\n+    ExternCrate in extern_crates -> ast::ExternCrate,\n     Function in functions -> ast::FnDef,\n     Struct in structs -> ast::StructDef,\n     Union in unions -> ast::UnionDef,\n@@ -492,7 +492,7 @@ pub struct ExternCrate {\n     pub visibility: RawVisibilityId,\n     /// Whether this is a `#[macro_use] extern crate ...`.\n     pub is_macro_use: bool,\n-    pub ast_id: FileAstId<ast::ExternCrateItem>,\n+    pub ast_id: FileAstId<ast::ExternCrate>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "8a36de3118248f00f7ddfbb9d323deaa252835ec", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -95,7 +95,7 @@ impl Ctx {\n             ast::Item::TraitDef(_) | ast::Item::ImplDef(_) | ast::Item::ExternBlock(_) => {}\n \n             // These don't have inner items.\n-            ast::Item::Module(_) | ast::Item::ExternCrateItem(_) | ast::Item::UseItem(_) => {}\n+            ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::UseItem(_) => {}\n         };\n \n         let attrs = Attrs::new(item, &self.hygiene);\n@@ -113,7 +113,7 @@ impl Ctx {\n             ast::Item::UseItem(ast) => Some(ModItems(\n                 self.lower_use(ast).into_iter().map(Into::into).collect::<SmallVec<_>>(),\n             )),\n-            ast::Item::ExternCrateItem(ast) => self.lower_extern_crate(ast).map(Into::into),\n+            ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast).map(Into::into),\n             ast::Item::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n             ast::Item::ExternBlock(ast) => {\n                 Some(ModItems(self.lower_extern_block(ast).into_iter().collect::<SmallVec<_>>()))\n@@ -498,7 +498,7 @@ impl Ctx {\n \n     fn lower_extern_crate(\n         &mut self,\n-        extern_crate: &ast::ExternCrateItem,\n+        extern_crate: &ast::ExternCrate,\n     ) -> Option<FileItemTreeId<ExternCrate>> {\n         let path = ModPath::from_name_ref(&extern_crate.name_ref()?);\n         let alias = extern_crate.rename().map(|a| {"}, {"sha": "68be1cb40c5275ddf4b3a4b234829261c4426264", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -232,7 +232,7 @@ fn smoke() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n             Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n-            ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrateItem>(1) }\n+            ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrate>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n             Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]"}, {"sha": "3b73e534642765c57b0763510d578b3089c7616e", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -313,7 +313,7 @@ fn extern_crate_item(p: &mut Parser, m: Marker) {\n \n     opt_alias(p);\n     p.expect(T![;]);\n-    m.complete(p, EXTERN_CRATE_ITEM);\n+    m.complete(p, EXTERN_CRATE);\n }\n \n pub(crate) fn extern_item_list(p: &mut Parser) {"}, {"sha": "116b58858f74ec342fd6f7d12bac089f0154f652", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -128,7 +128,7 @@ pub enum SyntaxKind {\n     ENUM_DEF,\n     FN_DEF,\n     RET_TYPE,\n-    EXTERN_CRATE_ITEM,\n+    EXTERN_CRATE,\n     MODULE,\n     USE_ITEM,\n     STATIC_DEF,"}, {"sha": "3fd76136785e85e9291305c40e0dae64d0025601", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -65,12 +65,12 @@ impl ExternBlock {\n     pub fn extern_item_list(&self) -> Option<ExternItemList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ExternCrateItem {\n+pub struct ExternCrate {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ExternCrateItem {}\n-impl ast::VisibilityOwner for ExternCrateItem {}\n-impl ExternCrateItem {\n+impl ast::AttrsOwner for ExternCrate {}\n+impl ast::VisibilityOwner for ExternCrate {}\n+impl ExternCrate {\n     pub fn extern_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![extern]) }\n     pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n@@ -255,6 +255,21 @@ impl ItemList {\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct NameRef {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl NameRef {\n+    pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Rename {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::NameOwner for Rename {}\n+impl Rename {\n+    pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Abi {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -699,13 +714,6 @@ impl MethodCallExpr {\n     pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct NameRef {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl NameRef {\n-    pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1190,14 +1198,6 @@ impl UseTreeList {\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Rename {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::NameOwner for Rename {}\n-impl Rename {\n-    pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1272,7 +1272,7 @@ pub enum Item {\n     ConstDef(ConstDef),\n     EnumDef(EnumDef),\n     ExternBlock(ExternBlock),\n-    ExternCrateItem(ExternCrateItem),\n+    ExternCrate(ExternCrate),\n     FnDef(FnDef),\n     ImplDef(ImplDef),\n     MacroCall(MacroCall),\n@@ -1451,8 +1451,8 @@ impl AstNode for ExternBlock {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ExternCrateItem {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_CRATE_ITEM }\n+impl AstNode for ExternCrate {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_CRATE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1605,6 +1605,28 @@ impl AstNode for ItemList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for NameRef {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME_REF }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for Rename {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RENAME }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Abi {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ABI }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2111,17 +2133,6 @@ impl AstNode for MethodCallExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for NameRef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME_REF }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for TypeArgList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2683,17 +2694,6 @@ impl AstNode for UseTreeList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Rename {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RENAME }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for PathSegment {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_SEGMENT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2780,8 +2780,8 @@ impl From<EnumDef> for Item {\n impl From<ExternBlock> for Item {\n     fn from(node: ExternBlock) -> Item { Item::ExternBlock(node) }\n }\n-impl From<ExternCrateItem> for Item {\n-    fn from(node: ExternCrateItem) -> Item { Item::ExternCrateItem(node) }\n+impl From<ExternCrate> for Item {\n+    fn from(node: ExternCrate) -> Item { Item::ExternCrate(node) }\n }\n impl From<FnDef> for Item {\n     fn from(node: FnDef) -> Item { Item::FnDef(node) }\n@@ -2816,9 +2816,9 @@ impl From<UseItem> for Item {\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE_ITEM | FN_DEF | IMPL_DEF\n-            | MACRO_CALL | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS_DEF\n-            | UNION_DEF | USE_ITEM => true,\n+            CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE | FN_DEF | IMPL_DEF | MACRO_CALL\n+            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | UNION_DEF\n+            | USE_ITEM => true,\n             _ => false,\n         }\n     }\n@@ -2827,7 +2827,7 @@ impl AstNode for Item {\n             CONST_DEF => Item::ConstDef(ConstDef { syntax }),\n             ENUM_DEF => Item::EnumDef(EnumDef { syntax }),\n             EXTERN_BLOCK => Item::ExternBlock(ExternBlock { syntax }),\n-            EXTERN_CRATE_ITEM => Item::ExternCrateItem(ExternCrateItem { syntax }),\n+            EXTERN_CRATE => Item::ExternCrate(ExternCrate { syntax }),\n             FN_DEF => Item::FnDef(FnDef { syntax }),\n             IMPL_DEF => Item::ImplDef(ImplDef { syntax }),\n             MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n@@ -2847,7 +2847,7 @@ impl AstNode for Item {\n             Item::ConstDef(it) => &it.syntax,\n             Item::EnumDef(it) => &it.syntax,\n             Item::ExternBlock(it) => &it.syntax,\n-            Item::ExternCrateItem(it) => &it.syntax,\n+            Item::ExternCrate(it) => &it.syntax,\n             Item::FnDef(it) => &it.syntax,\n             Item::ImplDef(it) => &it.syntax,\n             Item::MacroCall(it) => &it.syntax,\n@@ -3480,7 +3480,7 @@ impl std::fmt::Display for ExternBlock {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ExternCrateItem {\n+impl std::fmt::Display for ExternCrate {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3550,6 +3550,16 @@ impl std::fmt::Display for ItemList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for NameRef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Rename {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Abi {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3780,11 +3790,6 @@ impl std::fmt::Display for MethodCallExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for NameRef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for TypeArgList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4040,11 +4045,6 @@ impl std::fmt::Display for UseTreeList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Rename {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for PathSegment {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "25e1777d1ab3778a0c79e3fee338a73290e00e60", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0060_extern_crate.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..18\n-  EXTERN_CRATE_ITEM@0..17\n+  EXTERN_CRATE@0..17\n     EXTERN_KW@0..6 \"extern\"\n     WHITESPACE@6..7 \" \"\n     CRATE_KW@7..12 \"crate\""}, {"sha": "594c2f8f20acd3fd88be2bf696a7faa9f1e6f5c2", "filename": "crates/ra_syntax/test_data/parser/ok/0007_extern_crate.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..69\n-  EXTERN_CRATE_ITEM@0..17\n+  EXTERN_CRATE@0..17\n     EXTERN_KW@0..6 \"extern\"\n     WHITESPACE@6..7 \" \"\n     CRATE_KW@7..12 \"crate\"\n@@ -8,7 +8,7 @@ SOURCE_FILE@0..69\n       IDENT@13..16 \"foo\"\n     SEMICOLON@16..17 \";\"\n   WHITESPACE@17..18 \"\\n\"\n-  EXTERN_CRATE_ITEM@18..42\n+  EXTERN_CRATE@18..42\n     EXTERN_KW@18..24 \"extern\"\n     WHITESPACE@24..25 \" \"\n     CRATE_KW@25..30 \"crate\"\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..69\n         IDENT@38..41 \"bar\"\n     SEMICOLON@41..42 \";\"\n   WHITESPACE@42..43 \"\\n\"\n-  EXTERN_CRATE_ITEM@43..68\n+  EXTERN_CRATE@43..68\n     EXTERN_KW@43..49 \"extern\"\n     WHITESPACE@49..50 \" \"\n     CRATE_KW@50..55 \"crate\""}, {"sha": "083727c5cd3c95e05e2bf037c1070f573f1e6b88", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -98,7 +98,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"ENUM_DEF\",\n         \"FN_DEF\",\n         \"RET_TYPE\",\n-        \"EXTERN_CRATE_ITEM\",\n+        \"EXTERN_CRATE\",\n         \"MODULE\",\n         \"USE_ITEM\",\n         \"STATIC_DEF\","}, {"sha": "e6e7c7518f6b9b4290195bd22e77b48e169d5902", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be803efb7c7ba257716fcc97c57ecfd07e278b07/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/be803efb7c7ba257716fcc97c57ecfd07e278b07/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=be803efb7c7ba257716fcc97c57ecfd07e278b07", "patch": "@@ -7,7 +7,7 @@ Item =\n   ConstDef\n | EnumDef\n | ExternBlock\n-| ExternCrateItem\n+| ExternCrate\n | FnDef\n | ImplDef\n | MacroCall\n@@ -26,6 +26,9 @@ Module =\n ItemList =\n   '{' Attr* Item* '}'\n \n+ExternCrate =\n+  Attr* Visibility? 'extern' 'crate' (NameRef | 'self') Rename? ';'\n+\n FnDef =\n  Attr* Visibility? Abi? 'const' 'default' 'async' 'unsafe' 'fn' Name TypeParamList?\n  ParamList RetType?\n@@ -404,9 +407,6 @@ UseTreeList =\n Rename =\n   'as' Name\n \n-ExternCrateItem =\n-  Attr* Visibility? 'extern' 'crate' (NameRef | 'self') Rename? ';'\n-\n Path =\n   (qualifier:Path '::')? segment:PathSegment\n "}]}