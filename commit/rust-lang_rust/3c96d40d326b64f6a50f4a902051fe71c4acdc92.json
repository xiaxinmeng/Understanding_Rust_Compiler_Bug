{"sha": "3c96d40d326b64f6a50f4a902051fe71c4acdc92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOTZkNDBkMzI2YjY0ZjZhNTBmNGE5MDIwNTFmZTcxYzRhY2RjOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-28T18:52:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-28T18:52:49Z"}, "message": "Auto merge of #44278 - Binero:master, r=BurntSushi\n\nAllow replacing HashMap entries\n\nThis is an obvious API hole. At the moment the only way to retrieve an entry from a `HashMap` is to get an entry to it, remove it, and then insert a new entry. This PR allows entries to be replaced.", "tree": {"sha": "5ff7baf61d9aa339663351e92aec01b3c9d21015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff7baf61d9aa339663351e92aec01b3c9d21015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c96d40d326b64f6a50f4a902051fe71c4acdc92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c96d40d326b64f6a50f4a902051fe71c4acdc92", "html_url": "https://github.com/rust-lang/rust/commit/3c96d40d326b64f6a50f4a902051fe71c4acdc92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c96d40d326b64f6a50f4a902051fe71c4acdc92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "688a8583912a305f14ebc8bc21a2dd3cd3c912b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/688a8583912a305f14ebc8bc21a2dd3cd3c912b0", "html_url": "https://github.com/rust-lang/rust/commit/688a8583912a305f14ebc8bc21a2dd3cd3c912b0"}, {"sha": "d3de465dc85638a6a77298638ebbbfab04b1844d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3de465dc85638a6a77298638ebbbfab04b1844d", "html_url": "https://github.com/rust-lang/rust/commit/d3de465dc85638a6a77298638ebbbfab04b1844d"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "026b863b96371748e8b0aed79a706b3e019cdc28", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3c96d40d326b64f6a50f4a902051fe71c4acdc92/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c96d40d326b64f6a50f4a902051fe71c4acdc92/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3c96d40d326b64f6a50f4a902051fe71c4acdc92", "patch": "@@ -2191,6 +2191,36 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     fn take_key(&mut self) -> Option<K> {\n         self.key.take()\n     }\n+\n+    /// Replaces the entry, returning the old key and value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_entry_replace)]\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::Entry;\n+    ///\n+    /// let mut map: HashMap<String, u32> = HashMap::new();\n+    /// map.insert(\"poneyland\".to_string(), 15);\n+    ///\n+    /// if let Entry::Occupied(entry) = map.entry(\"poneyland\".to_string()) {\n+    ///     let (old_key, old_value): (String, u32) = entry.replace(16);\n+    ///     assert_eq!(old_key, \"poneyland\");\n+    ///     assert_eq!(old_value, 15);\n+    /// }\n+    ///\n+    /// assert_eq!(map.get(\"poneyland\"), Some(&16));\n+    /// ```\n+    #[unstable(feature = \"map_entry_replace\", issue = \"44286\")]\n+    pub fn replace(mut self, value: V) -> (K, V) {\n+        let (old_key, old_value) = self.elem.read_mut();\n+\n+        let old_key = mem::replace(old_key, self.key.unwrap());\n+        let old_value = mem::replace(old_value, value);\n+\n+        (old_key, old_value)\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {"}]}