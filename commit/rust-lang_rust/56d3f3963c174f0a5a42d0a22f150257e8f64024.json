{"sha": "56d3f3963c174f0a5a42d0a22f150257e8f64024", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDNmMzk2M2MxNzRmMGE1YTQyZDBhMjJmMTUwMjU3ZThmNjQwMjQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-25T20:21:02Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-25T20:37:22Z"}, "message": "Unify error reporting for intra-doc links\n\n- Give a suggestion even if there is no span available\n- Give a more accurate description of the change than 'use the\ndisambiguator'\n- Write much less code", "tree": {"sha": "40118bd39e9387ccfabdcb33bca14bf2fafa35c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40118bd39e9387ccfabdcb33bca14bf2fafa35c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d3f3963c174f0a5a42d0a22f150257e8f64024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d3f3963c174f0a5a42d0a22f150257e8f64024", "html_url": "https://github.com/rust-lang/rust/commit/56d3f3963c174f0a5a42d0a22f150257e8f64024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d3f3963c174f0a5a42d0a22f150257e8f64024/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e7a1b799517790b8702aae11fecb1743918352", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e7a1b799517790b8702aae11fecb1743918352", "html_url": "https://github.com/rust-lang/rust/commit/18e7a1b799517790b8702aae11fecb1743918352"}], "stats": {"total": 239, "additions": 137, "deletions": 102}, "files": [{"sha": "700d3d95cf89840c83df3f6c828cbb16ce50f054", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 51, "deletions": 60, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=56d3f3963c174f0a5a42d0a22f150257e8f64024", "patch": "@@ -898,20 +898,8 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         specified.article(),\n                         specified.descr()\n                     );\n-                    let suggestion = resolved.display_for(path_str);\n-                    let help_msg =\n-                        format!(\"to link to the {}, use its disambiguator\", resolved.descr());\n                     diag.note(&note);\n-                    if let Some(sp) = sp {\n-                        diag.span_suggestion(\n-                            sp,\n-                            &help_msg,\n-                            suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    } else {\n-                        diag.help(&format!(\"{}: {}\", help_msg, suggestion));\n-                    }\n+                    suggest_disambiguator(resolved, diag, path_str, &dox, sp, &link_range);\n                 });\n             };\n             if let Res::PrimTy(_) = res {\n@@ -1047,17 +1035,31 @@ impl Disambiguator {\n         }\n     }\n \n-    fn display_for(self, path_str: &str) -> String {\n+    fn from_res(res: Res) -> Self {\n+        match res {\n+            Res::Def(kind, _) => Disambiguator::Kind(kind),\n+            Res::PrimTy(_) => Disambiguator::Primitive,\n+            _ => Disambiguator::Namespace(res.ns().expect(\"can't call `from_res` on Res::err\")),\n+        }\n+    }\n+\n+    /// Return (description of the change, suggestion)\n+    fn display_for(self, path_str: &str) -> (&'static str, String) {\n+        const PREFIX: &str = \"prefix with the item kind\";\n+        const FUNCTION: &str = \"add parentheses\";\n+        const MACRO: &str = \"add an exclamation mark\";\n+\n         let kind = match self {\n-            Disambiguator::Primitive => return format!(\"prim@{}\", path_str),\n+            Disambiguator::Primitive => return (PREFIX, format!(\"prim@{}\", path_str)),\n             Disambiguator::Kind(kind) => kind,\n             Disambiguator::Namespace(_) => panic!(\"display_for cannot be used on namespaces\"),\n         };\n         if kind == DefKind::Macro(MacroKind::Bang) {\n-            return format!(\"{}!\", path_str);\n+            return (MACRO, format!(\"{}!\", path_str));\n         } else if kind == DefKind::Fn || kind == DefKind::AssocFn {\n-            return format!(\"{}()\", path_str);\n+            return (FUNCTION, format!(\"{}()\", path_str));\n         }\n+\n         let prefix = match kind {\n             DefKind::Struct => \"struct\",\n             DefKind::Enum => \"enum\",\n@@ -1079,7 +1081,9 @@ impl Disambiguator {\n                 Namespace::MacroNS => \"macro\",\n             },\n         };\n-        format!(\"{}@{}\", prefix, path_str)\n+\n+        // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n+        (PREFIX, format!(\"{}@{}\", prefix, path_str))\n     }\n \n     fn ns(self) -> Namespace {\n@@ -1276,52 +1280,39 @@ fn ambiguity_error(\n     report_diagnostic(cx, &msg, item, dox, link_range.clone(), |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n+        } else {\n+            diag.note(\"ambiguous link\");\n+        }\n \n-            let link_range = link_range.expect(\"must have a link range if we have a span\");\n-\n-            for (res, ns) in candidates {\n-                let (action, mut suggestion) = match res {\n-                    Res::Def(DefKind::AssocFn | DefKind::Fn, _) => {\n-                        (\"add parentheses\", format!(\"{}()\", path_str))\n-                    }\n-                    Res::Def(DefKind::Macro(MacroKind::Bang), _) => {\n-                        (\"add an exclamation mark\", format!(\"{}!\", path_str))\n-                    }\n-                    _ => {\n-                        let type_ = match (res, ns) {\n-                            (Res::PrimTy(_), _) => \"prim\",\n-                            (Res::Def(DefKind::Const, _), _) => \"const\",\n-                            (Res::Def(DefKind::Static, _), _) => \"static\",\n-                            (Res::Def(DefKind::Struct, _), _) => \"struct\",\n-                            (Res::Def(DefKind::Enum, _), _) => \"enum\",\n-                            (Res::Def(DefKind::Union, _), _) => \"union\",\n-                            (Res::Def(DefKind::Trait, _), _) => \"trait\",\n-                            (Res::Def(DefKind::Mod, _), _) => \"module\",\n-                            (_, TypeNS) => \"type\",\n-                            (_, ValueNS) => \"value\",\n-                            (Res::Def(DefKind::Macro(MacroKind::Derive), _), MacroNS) => \"derive\",\n-                            (_, MacroNS) => \"macro\",\n-                        };\n-\n-                        // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n-                        (\"prefix with the item type\", format!(\"{}@{}\", type_, path_str))\n-                    }\n-                };\n+        for (res, _ns) in candidates {\n+            let disambiguator = Disambiguator::from_res(res);\n+            suggest_disambiguator(disambiguator, diag, path_str, dox, sp, &link_range);\n+        }\n+    });\n+}\n \n-                if dox.bytes().nth(link_range.start) == Some(b'`') {\n-                    suggestion = format!(\"`{}`\", suggestion);\n-                }\n+fn suggest_disambiguator(\n+    disambiguator: Disambiguator,\n+    diag: &mut DiagnosticBuilder<'_>,\n+    path_str: &str,\n+    dox: &str,\n+    sp: Option<rustc_span::Span>,\n+    link_range: &Option<Range<usize>>,\n+) {\n+    let (action, mut suggestion) = disambiguator.display_for(path_str);\n+    let help = format!(\"to link to the {}, {}\", disambiguator.descr(), action);\n \n-                // FIXME: Create a version of this suggestion for when we don't have the span.\n-                diag.span_suggestion(\n-                    sp,\n-                    &format!(\"to link to the {}, {}\", res.descr(), action),\n-                    suggestion,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n+    if let Some(sp) = sp {\n+        let link_range = link_range.as_ref().expect(\"must have a link range if we have a span\");\n+        if dox.bytes().nth(link_range.start) == Some(b'`') {\n+            suggestion = format!(\"`{}`\", suggestion);\n         }\n-    });\n+\n+        // FIXME: Create a version of this suggestion for when we don't have the span.\n+        diag.span_suggestion(sp, &help, suggestion, Applicability::MaybeIncorrect);\n+    } else {\n+        diag.help(&format!(\"{}: {}\", help, suggestion));\n+    }\n }\n \n fn privacy_error("}, {"sha": "548d3e2544a00aa12699ecccf231a56f94e4ef6e", "filename": "src/test/rustdoc-ui/intra-link-prim-conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-link-prim-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-link-prim-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-prim-conflict.rs?ref=56d3f3963c174f0a5a42d0a22f150257e8f64024", "patch": "@@ -18,13 +18,13 @@\n \n /// [struct@char]\n //~^ ERROR incompatible link\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n //~| NOTE resolved to a module\n pub mod char {}\n \n pub mod inner {\n     //! [struct@char]\n     //~^ ERROR incompatible link\n-    //~| HELP use its disambiguator\n+    //~| HELP prefix with the item kind\n     //~| NOTE resolved to a builtin type\n }"}, {"sha": "53dccfbf1a2c48a7d2c533ee69bb0f842145e38d", "filename": "src/test/rustdoc-ui/intra-link-prim-conflict.stderr", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-link-prim-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-link-prim-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-prim-conflict.stderr?ref=56d3f3963c174f0a5a42d0a22f150257e8f64024", "patch": "@@ -9,11 +9,11 @@ note: the lint level is defined here\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-help: to link to the module, prefix with the item type\n+help: to link to the module, prefix with the item kind\n    |\n-LL | /// [module@char]\n-   |      ^^^^^^^^^^^\n-help: to link to the builtin type, prefix with the item type\n+LL | /// [mod@char]\n+   |      ^^^^^^^^\n+help: to link to the builtin type, prefix with the item kind\n    |\n LL | /// [prim@char]\n    |      ^^^^^^^^^\n@@ -24,11 +24,11 @@ error: `char` is both a module and a builtin type\n LL | /// [type@char]\n    |      ^^^^^^^^^ ambiguous link\n    |\n-help: to link to the module, prefix with the item type\n+help: to link to the module, prefix with the item kind\n    |\n-LL | /// [module@char]\n-   |      ^^^^^^^^^^^\n-help: to link to the builtin type, prefix with the item type\n+LL | /// [mod@char]\n+   |      ^^^^^^^^\n+help: to link to the builtin type, prefix with the item kind\n    |\n LL | /// [prim@char]\n    |      ^^^^^^^^^\n@@ -37,17 +37,25 @@ error: incompatible link kind for `char`\n   --> $DIR/intra-link-prim-conflict.rs:19:6\n    |\n LL | /// [struct@char]\n-   |      ^^^^^^^^^^^ help: to link to the module, use its disambiguator: `mod@char`\n+   |      ^^^^^^^^^^^\n    |\n    = note: this link resolved to a module, which is not a struct\n+help: to link to the module, prefix with the item kind\n+   |\n+LL | /// [mod@char]\n+   |      ^^^^^^^^\n \n error: incompatible link kind for `char`\n   --> $DIR/intra-link-prim-conflict.rs:26:10\n    |\n LL |     //! [struct@char]\n-   |          ^^^^^^^^^^^ help: to link to the builtin type, use its disambiguator: `prim@char`\n+   |          ^^^^^^^^^^^\n    |\n    = note: this link resolved to a builtin type, which is not a struct\n+help: to link to the builtin type, prefix with the item kind\n+   |\n+LL |     //! [prim@char]\n+   |          ^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7912c046f1c78f8e481f9c2a1bdecc6fa8b990d5", "filename": "src/test/rustdoc-ui/intra-links-ambiguity.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr?ref=56d3f3963c174f0a5a42d0a22f150257e8f64024", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-help: to link to the struct, prefix with the item type\n+help: to link to the struct, prefix with the item kind\n    |\n LL | /// [`struct@ambiguous`] is ambiguous.\n    |      ^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ error: `ambiguous` is both a struct and a function\n LL | /// [ambiguous] is ambiguous.\n    |      ^^^^^^^^^ ambiguous link\n    |\n-help: to link to the struct, prefix with the item type\n+help: to link to the struct, prefix with the item kind\n    |\n LL | /// [struct@ambiguous] is ambiguous.\n    |      ^^^^^^^^^^^^^^^^\n@@ -39,7 +39,7 @@ error: `multi_conflict` is a struct, a function, and a macro\n LL | /// [`multi_conflict`] is a three-way conflict.\n    |      ^^^^^^^^^^^^^^^^ ambiguous link\n    |\n-help: to link to the struct, prefix with the item type\n+help: to link to the struct, prefix with the item kind\n    |\n LL | /// [`struct@multi_conflict`] is a three-way conflict.\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -58,11 +58,11 @@ error: `type_and_value` is both a module and a constant\n LL | /// Ambiguous [type_and_value].\n    |                ^^^^^^^^^^^^^^ ambiguous link\n    |\n-help: to link to the module, prefix with the item type\n+help: to link to the module, prefix with the item kind\n    |\n-LL | /// Ambiguous [module@type_and_value].\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n-help: to link to the constant, prefix with the item type\n+LL | /// Ambiguous [mod@type_and_value].\n+   |                ^^^^^^^^^^^^^^^^^^\n+help: to link to the constant, prefix with the item kind\n    |\n LL | /// Ambiguous [const@type_and_value].\n    |                ^^^^^^^^^^^^^^^^^^^^\n@@ -73,7 +73,7 @@ error: `foo::bar` is both an enum and a function\n LL | /// Ambiguous non-implied shortcut link [`foo::bar`].\n    |                                          ^^^^^^^^^^ ambiguous link\n    |\n-help: to link to the enum, prefix with the item type\n+help: to link to the enum, prefix with the item kind\n    |\n LL | /// Ambiguous non-implied shortcut link [`enum@foo::bar`].\n    |                                          ^^^^^^^^^^^^^^^"}, {"sha": "54e507adfe550e3036fea159d9fbb75efb4fbb71", "filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs?ref=56d3f3963c174f0a5a42d0a22f150257e8f64024", "patch": "@@ -14,55 +14,55 @@ trait T {}\n /// Link to [struct@S]\n //~^ ERROR incompatible link kind for `S`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [mod@S]\n //~^ ERROR incompatible link kind for `S`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [union@S]\n //~^ ERROR incompatible link kind for `S`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [trait@S]\n //~^ ERROR incompatible link kind for `S`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [struct@T]\n //~^ ERROR incompatible link kind for `T`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [derive@m]\n //~^ ERROR incompatible link kind for `m`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP add an exclamation mark\n \n /// Link to [const@s]\n //~^ ERROR incompatible link kind for `s`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [static@c]\n //~^ ERROR incompatible link kind for `c`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [fn@c]\n //~^ ERROR incompatible link kind for `c`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [c()]\n //~^ ERROR incompatible link kind for `c`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP prefix with the item kind\n \n /// Link to [const@f]\n //~^ ERROR incompatible link kind for `f`\n //~| NOTE this link resolved\n-//~| HELP use its disambiguator\n+//~| HELP add parentheses\n pub fn f() {}"}, {"sha": "27b94af0378c240cf4e296ce62cd708e210a2cf1", "filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.stderr", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d3f3963c174f0a5a42d0a22f150257e8f64024/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr?ref=56d3f3963c174f0a5a42d0a22f150257e8f64024", "patch": "@@ -2,92 +2,128 @@ error: incompatible link kind for `S`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:14:14\n    |\n LL | /// Link to [struct@S]\n-   |              ^^^^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n+   |              ^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/intra-links-disambiguator-mismatch.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = note: this link resolved to an enum, which is not a struct\n+help: to link to the enum, prefix with the item kind\n+   |\n+LL | /// Link to [enum@S]\n+   |              ^^^^^^\n \n error: incompatible link kind for `S`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:19:14\n    |\n LL | /// Link to [mod@S]\n-   |              ^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n+   |              ^^^^^\n    |\n    = note: this link resolved to an enum, which is not a module\n+help: to link to the enum, prefix with the item kind\n+   |\n+LL | /// Link to [enum@S]\n+   |              ^^^^^^\n \n error: incompatible link kind for `S`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:24:14\n    |\n LL | /// Link to [union@S]\n-   |              ^^^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n+   |              ^^^^^^^\n    |\n    = note: this link resolved to an enum, which is not a union\n+help: to link to the enum, prefix with the item kind\n+   |\n+LL | /// Link to [enum@S]\n+   |              ^^^^^^\n \n error: incompatible link kind for `S`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:29:14\n    |\n LL | /// Link to [trait@S]\n-   |              ^^^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n+   |              ^^^^^^^\n    |\n    = note: this link resolved to an enum, which is not a trait\n+help: to link to the enum, prefix with the item kind\n+   |\n+LL | /// Link to [enum@S]\n+   |              ^^^^^^\n \n error: incompatible link kind for `T`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:34:14\n    |\n LL | /// Link to [struct@T]\n-   |              ^^^^^^^^ help: to link to the trait, use its disambiguator: `trait@T`\n+   |              ^^^^^^^^\n    |\n    = note: this link resolved to a trait, which is not a struct\n+help: to link to the trait, prefix with the item kind\n+   |\n+LL | /// Link to [trait@T]\n+   |              ^^^^^^^\n \n error: incompatible link kind for `m`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:39:14\n    |\n LL | /// Link to [derive@m]\n-   |              ^^^^^^^^ help: to link to the macro, use its disambiguator: `m!`\n+   |              ^^^^^^^^ help: to link to the macro, add an exclamation mark: `m!`\n    |\n    = note: this link resolved to a macro, which is not a derive macro\n \n error: incompatible link kind for `s`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:44:14\n    |\n LL | /// Link to [const@s]\n-   |              ^^^^^^^ help: to link to the static, use its disambiguator: `static@s`\n+   |              ^^^^^^^\n    |\n    = note: this link resolved to a static, which is not a constant\n+help: to link to the static, prefix with the item kind\n+   |\n+LL | /// Link to [static@s]\n+   |              ^^^^^^^^\n \n error: incompatible link kind for `c`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:49:14\n    |\n LL | /// Link to [static@c]\n-   |              ^^^^^^^^ help: to link to the constant, use its disambiguator: `const@c`\n+   |              ^^^^^^^^\n    |\n    = note: this link resolved to a constant, which is not a static\n+help: to link to the constant, prefix with the item kind\n+   |\n+LL | /// Link to [const@c]\n+   |              ^^^^^^^\n \n error: incompatible link kind for `c`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:54:14\n    |\n LL | /// Link to [fn@c]\n-   |              ^^^^ help: to link to the constant, use its disambiguator: `const@c`\n+   |              ^^^^\n    |\n    = note: this link resolved to a constant, which is not a function\n+help: to link to the constant, prefix with the item kind\n+   |\n+LL | /// Link to [const@c]\n+   |              ^^^^^^^\n \n error: incompatible link kind for `c`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:59:14\n    |\n LL | /// Link to [c()]\n-   |              ^^^ help: to link to the constant, use its disambiguator: `const@c`\n+   |              ^^^\n    |\n    = note: this link resolved to a constant, which is not a function\n+help: to link to the constant, prefix with the item kind\n+   |\n+LL | /// Link to [const@c]\n+   |              ^^^^^^^\n \n error: incompatible link kind for `f`\n   --> $DIR/intra-links-disambiguator-mismatch.rs:64:14\n    |\n LL | /// Link to [const@f]\n-   |              ^^^^^^^ help: to link to the function, use its disambiguator: `f()`\n+   |              ^^^^^^^ help: to link to the function, add parentheses: `f()`\n    |\n    = note: this link resolved to a function, which is not a constant\n "}]}