{"sha": "62c3ca28e1e7d69541a3884e57ec33df7836c936", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYzNjYTI4ZTFlN2Q2OTU0MWEzODg0ZTU3ZWMzM2RmNzgzNmM5MzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-12T19:43:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "Extract local definition from FunctionDebugContext::define", "tree": {"sha": "2fb703c94e21d81bee26a5dfbe0f1ab2acff2338", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb703c94e21d81bee26a5dfbe0f1ab2acff2338"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62c3ca28e1e7d69541a3884e57ec33df7836c936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62c3ca28e1e7d69541a3884e57ec33df7836c936", "html_url": "https://github.com/rust-lang/rust/commit/62c3ca28e1e7d69541a3884e57ec33df7836c936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62c3ca28e1e7d69541a3884e57ec33df7836c936/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f7110cb69458fa996ed88f17e1210ff0fc24f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f7110cb69458fa996ed88f17e1210ff0fc24f3", "html_url": "https://github.com/rust-lang/rust/commit/50f7110cb69458fa996ed88f17e1210ff0fc24f3"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "63a95e7e0e72b233cda46b42bba9c5b211bb3371", "filename": "src/debuginfo.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/62c3ca28e1e7d69541a3884e57ec33df7836c936/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c3ca28e1e7d69541a3884e57ec33df7836c936/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=62c3ca28e1e7d69541a3884e57ec33df7836c936", "patch": "@@ -2,8 +2,6 @@ use crate::prelude::*;\n \n use crate::backend::WriteDebugInfo;\n \n-use std::marker::PhantomData;\n-\n use syntax::source_map::FileName;\n \n use cranelift::codegen::ir::{StackSlots, ValueLoc};\n@@ -310,6 +308,41 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         }\n     }\n \n+    fn define_local(&mut self, local: mir::Local) -> UnitEntryId {\n+        let local_decl = &self.mir.local_decls[local];\n+\n+        let ty = self.debug_context.tcx.subst_and_normalize_erasing_regions(\n+            self.instance.substs,\n+            ty::ParamEnv::reveal_all(),\n+            &local_decl.ty,\n+        );\n+        let dw_ty = self.debug_context.dwarf_ty(ty);\n+\n+        let name = if let Some(name) = local_decl.name {\n+            format!(\"{}{:?}\", name.as_str(), local)\n+        } else {\n+            format!(\"{:?}\", local)\n+        };\n+\n+        let var_id = self\n+            .debug_context\n+            .dwarf\n+            .unit\n+            .add(self.entry_id, gimli::DW_TAG_variable);\n+        let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n+\n+        var_entry.set(\n+            gimli::DW_AT_name,\n+            AttributeValue::String(name.into_bytes()),\n+        );\n+        var_entry.set(\n+            gimli::DW_AT_type,\n+            AttributeValue::ThisUnitEntryRef(dw_ty),\n+        );\n+\n+        var_id\n+    }\n+\n     pub fn define(\n         &mut self,\n         context: &Context,\n@@ -373,28 +406,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n \n             for (value_label, value_loc_ranges) in value_labels_ranges.iter() {\n-                let local_ty = tcx.subst_and_normalize_erasing_regions(\n-                    self.instance.substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    &self.mir.local_decls[mir::Local::from_u32(value_label.as_u32())].ty,\n-                );\n-                let local_type = self.debug_context.dwarf_ty(local_ty);\n-\n-                let var_id = self\n-                    .debug_context\n-                    .dwarf\n-                    .unit\n-                    .add(self.entry_id, gimli::DW_TAG_variable);\n-                let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n-\n-                var_entry.set(\n-                    gimli::DW_AT_name,\n-                    AttributeValue::String(format!(\"{:?}\", value_label).into_bytes()),\n-                );\n-                var_entry.set(\n-                    gimli::DW_AT_type,\n-                    AttributeValue::ThisUnitEntryRef(local_type),\n-                );\n+                let var_id = self.define_local(mir::Local::from_u32(value_label.as_u32()));\n \n                 let loc_list = LocationList(\n                     value_loc_ranges"}]}