{"sha": "e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OWQzMDljNTY5NWEyYjVhZDFhYjQ0YzA2ZmQzMmVjNTA2Y2ViYWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-07-20T04:54:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-07-21T04:27:22Z"}, "message": "Use the macro structure spans instead of the invocation", "tree": {"sha": "3f19403fe2ff9c67b2abb6f33c5730cf62abbed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f19403fe2ff9c67b2abb6f33c5730cf62abbed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "html_url": "https://github.com/rust-lang/rust/commit/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc800531cc79b76b37a1e0f1f58f807ea7aee68b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc800531cc79b76b37a1e0f1f58f807ea7aee68b", "html_url": "https://github.com/rust-lang/rust/commit/cc800531cc79b76b37a1e0f1f58f807ea7aee68b"}], "stats": {"total": 116, "additions": 105, "deletions": 11}, "files": [{"sha": "dc0848176d6c8d3ccd42f52e662005c83a7618e7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -1046,6 +1046,7 @@ impl<'feat> ExpansionConfig<'feat> {\n }\n \n // A Marker adds the given mark to the syntax context.\n+#[derive(Debug)]\n pub struct Marker(pub Mark);\n \n impl Folder for Marker {"}, {"sha": "c7aab95e1d498f5e6dba4dea033d013dc23283da", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -119,8 +119,21 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                     quoted::TokenTree::Delimited(_, ref delimed) => delimed.tts.clone(),\n                     _ => cx.span_bug(sp, \"malformed macro rhs\"),\n                 };\n+\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n-                let tts = transcribe(cx, Some(named_matches), rhs);\n+                let mut tts = transcribe(cx, Some(named_matches), rhs.clone());\n+\n+                // Replace all the tokens for the corresponding positions in the macro, to maintain\n+                // proper positions in error reporting, while maintaining the macro_backtrace.\n+                if rhs.len() == tts.len() {\n+                    tts = tts.map_pos(|i, tt| {\n+                        let mut tt = tt.clone();\n+                        let mut sp = rhs[i].span();\n+                        sp.ctxt = tt.span().ctxt;\n+                        tt.set_span(sp);\n+                        tt\n+                    });\n+                }\n \n                 if cx.trace_macros() {\n                     trace_macros_note(cx, sp, format!(\"to `{}`\", tts));"}, {"sha": "6fdcadd1dde1e7a5a3078dfdedca558ff79654b4", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -128,7 +128,7 @@ impl TokenTree {\n         }\n     }\n \n-    /// Retrieve the TokenTree's span.\n+    /// Retrieve the `TokenTree`'s span.\n     pub fn span(&self) -> Span {\n         match *self {\n             TokenTree::Token(sp, _) |"}, {"sha": "553cac80d8222969a507fdb70fa86230bea1807c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -150,7 +150,7 @@ fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n     lhs\n }\n \n-#[derive(Clone, Copy, PartialEq)]\n+#[derive(Debug, Clone, Copy, PartialEq)]\n enum PrevTokenKind {\n     DocComment,\n     Comma,\n@@ -6090,8 +6090,7 @@ impl<'a> Parser<'a> {\n             let (delim, tts) = self.expect_delimited_token_tree()?;\n             if delim != token::Brace {\n                 if !self.eat(&token::Semi) {\n-                    let prev_span = self.prev_span;\n-                    self.span_err(prev_span,\n+                    self.span_err(self.prev_span,\n                                   \"macros that expand to items must either \\\n                                    be surrounded with braces or followed by \\\n                                    a semicolon\");\n@@ -6108,8 +6107,7 @@ impl<'a> Parser<'a> {\n         match visibility {\n             Visibility::Inherited => {}\n             _ => {\n-                let prev_span = self.prev_span;\n-                return Err(self.span_fatal(prev_span, \"unmatched visibility `pub`\"));\n+                return Err(self.span_fatal(self.prev_span, \"unmatched visibility `pub`\"));\n             }\n         }\n "}, {"sha": "0014fd5e937e0d6b829d5a9b2e49fb58fa7a30db", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -131,6 +131,15 @@ impl TokenTree {\n         }\n     }\n \n+    /// Modify the `TokenTree`'s span inplace.\n+    pub fn set_span(&mut self, span: Span) {\n+        match *self {\n+            TokenTree::Token(ref mut sp, _) | TokenTree::Delimited(ref mut sp, _) => {\n+                *sp = span;\n+            }\n+        }\n+    }\n+\n     /// Indicates if the stream is a token that is equal to the provided token.\n     pub fn eq_token(&self, t: Token) -> bool {\n         match *self {\n@@ -190,6 +199,14 @@ impl PartialEq<TokenStream> for TokenStream {\n }\n \n impl TokenStream {\n+    pub fn len(&self) -> usize {\n+        if let TokenStreamKind::Stream(ref slice) = self.kind {\n+            slice.len()\n+        } else {\n+            0\n+        }\n+    }\n+\n     pub fn empty() -> TokenStream {\n         TokenStream { kind: TokenStreamKind::Empty }\n     }\n@@ -241,6 +258,21 @@ impl TokenStream {\n         }\n     }\n \n+    pub fn map_pos<F: FnMut(usize, TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n+        let mut trees = self.into_trees();\n+        let mut result = Vec::new();\n+        let mut i = 0;\n+        while let Some(stream) = trees.next_as_stream() {\n+            result.push(match stream.kind {\n+                TokenStreamKind::Tree(tree) => f(i, tree).into(),\n+                TokenStreamKind::JointTree(tree) => f(i, tree).joint(),\n+                _ => unreachable!()\n+            });\n+            i += 1;\n+        }\n+        TokenStream::concat(result)\n+    }\n+\n     pub fn map<F: FnMut(TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n         let mut trees = self.into_trees();\n         let mut result = Vec::new();"}, {"sha": "49684acb4a2d9657e4a31b16659db1a6cee12580", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -100,6 +100,7 @@ impl Span {\n         if self.source_equal(&DUMMY_SP) { other } else { self }\n     }\n \n+    /// Return true if `self` fully encloses `other`.\n     pub fn contains(self, other: Span) -> bool {\n         self.lo <= other.lo && other.hi <= self.hi\n     }\n@@ -184,15 +185,32 @@ impl Span {\n         result\n     }\n \n+    pub fn empty_ctxt(&self) -> bool {\n+        self.ctxt == SyntaxContext::empty()\n+    }\n+\n+    /// Return a `Span` that would enclose both `self` and `end`.\n     pub fn to(self, end: Span) -> Span {\n+        let lo = if self.lo < end.lo {\n+            self.lo\n+        } else {\n+            end.lo\n+        };\n+        let hi = if self.hi > end.hi {\n+            self.hi\n+        } else {\n+            end.hi\n+        };\n         // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n-        if self.ctxt == SyntaxContext::empty() {\n-            Span { lo: self.lo, ..end }\n+        let ctxt = if self.ctxt == SyntaxContext::empty() {\n+            end.ctxt\n         } else {\n-            Span { hi: end.hi, ..self }\n-        }\n+            self.ctxt\n+        };\n+        Span {lo, hi, ctxt}\n     }\n \n+    /// Return a `Span` between the end of `self` to the beginning of `end`.\n     pub fn between(self, end: Span) -> Span {\n         Span {\n             lo: self.hi,\n@@ -205,6 +223,7 @@ impl Span {\n         }\n     }\n \n+    /// Return a `Span` between the beginning of `self` to the beginning of `end`.\n     pub fn until(self, end: Span) -> Span {\n         Span {\n             lo: self.lo,\n@@ -852,6 +871,7 @@ pub struct FileLines {\n thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter) -> fmt::Result> =\n                 Cell::new(default_span_debug));\n \n+#[derive(Debug)]\n pub struct MacroBacktrace {\n     /// span where macro was applied to generate this code\n     pub call_site: Span,"}, {"sha": "d779bec4ace539fe791a63b28fc564299d0727b2", "filename": "src/test/ui/span/macro-span-replacement.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m {\n+    ($a:tt $b:tt) => {\n+        $b $a;\n+    }\n+}\n+\n+fn main() {\n+    m!(S struct);\n+}"}, {"sha": "e7336697f48e711d191afb86ef5c47e151ccb538", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e99d309c5695a2b5ad1ab44c06fd32ec506cebaa/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=e99d309c5695a2b5ad1ab44c06fd32ec506cebaa", "patch": "@@ -0,0 +1,11 @@\n+warning: struct is never used: `S`\n+  --> $DIR/macro-span-replacement.rs:13:9\n+   |\n+13 |         $b $a;\n+   |         ^^^^^^\n+...\n+18 |     m!(S struct);\n+   |     ------------- in this macro invocation\n+   |\n+   = note: #[warn(dead_code)] on by default\n+"}]}