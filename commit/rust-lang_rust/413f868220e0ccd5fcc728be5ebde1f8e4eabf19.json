{"sha": "413f868220e0ccd5fcc728be5ebde1f8e4eabf19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxM2Y4NjgyMjBlMGNjZDVmY2M3MjhiZTVlYmRlMWY4ZTRlYWJmMTk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-26T09:48:48Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-26T09:48:48Z"}, "message": "std::str: bench tests for .split_iter()", "tree": {"sha": "f312372b822363daacc73090a799d02e8faa15eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f312372b822363daacc73090a799d02e8faa15eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413f868220e0ccd5fcc728be5ebde1f8e4eabf19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413f868220e0ccd5fcc728be5ebde1f8e4eabf19", "html_url": "https://github.com/rust-lang/rust/commit/413f868220e0ccd5fcc728be5ebde1f8e4eabf19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413f868220e0ccd5fcc728be5ebde1f8e4eabf19/comments", "author": null, "committer": null, "parents": [{"sha": "b59d50368e5223d9c66c7a64c5aeff2b8e9b343f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59d50368e5223d9c66c7a64c5aeff2b8e9b343f", "html_url": "https://github.com/rust-lang/rust/commit/b59d50368e5223d9c66c7a64c5aeff2b8e9b343f"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "057d09bd6658ab8a8890bf6836d91f35480c7c45", "filename": "src/libstd/str.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/413f868220e0ccd5fcc728be5ebde1f8e4eabf19/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413f868220e0ccd5fcc728be5ebde1f8e4eabf19/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=413f868220e0ccd5fcc728be5ebde1f8e4eabf19", "patch": "@@ -3762,6 +3762,89 @@ mod bench {\n         }\n     }\n \n+    #[bench]\n+    fn split_iter_unicode_ascii(bh: &mut BenchHarness) {\n+        let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+\n+        do bh.iter {\n+            assert_eq!(s.split_iter('V').len(), 3);\n+        }\n+    }\n+\n+    #[bench]\n+    fn split_iter_unicode_not_ascii(bh: &mut BenchHarness) {\n+        struct NotAscii(char);\n+        impl CharEq for NotAscii {\n+            fn matches(&self, c: char) -> bool {\n+                **self == c\n+            }\n+            fn only_ascii(&self) -> bool { false }\n+        }\n+        let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+\n+        do bh.iter {\n+            assert_eq!(s.split_iter(NotAscii('V')).len(), 3);\n+        }\n+    }\n+\n+\n+    #[bench]\n+    fn split_iter_ascii(bh: &mut BenchHarness) {\n+        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+        let len = s.split_iter(' ').len();\n+\n+        do bh.iter {\n+            assert_eq!(s.split_iter(' ').len(), len);\n+        }\n+    }\n+\n+    #[bench]\n+    fn split_iter_not_ascii(bh: &mut BenchHarness) {\n+        struct NotAscii(char);\n+        impl CharEq for NotAscii {\n+            #[inline]\n+            fn matches(&self, c: char) -> bool { **self == c }\n+            fn only_ascii(&self) -> bool { false }\n+        }\n+        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+        let len = s.split_iter(' ').len();\n+\n+        do bh.iter {\n+            assert_eq!(s.split_iter(NotAscii(' ')).len(), len);\n+        }\n+    }\n+\n+    #[bench]\n+    fn split_iter_extern_fn(bh: &mut BenchHarness) {\n+        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+        let len = s.split_iter(' ').len();\n+        fn pred(c: char) -> bool { c == ' ' }\n+\n+        do bh.iter {\n+            assert_eq!(s.split_iter(pred).len(), len);\n+        }\n+    }\n+\n+    #[bench]\n+    fn split_iter_closure(bh: &mut BenchHarness) {\n+        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+        let len = s.split_iter(' ').len();\n+\n+        do bh.iter {\n+            assert_eq!(s.split_iter(|c: char| c == ' ').len(), len);\n+        }\n+    }\n+\n+    #[bench]\n+    fn split_iter_slice(bh: &mut BenchHarness) {\n+        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+        let len = s.split_iter(' ').len();\n+\n+        do bh.iter {\n+            assert_eq!(s.split_iter(&[' ']).len(), len);\n+        }\n+    }\n+\n     #[bench]\n     fn is_utf8_100_ascii(bh: &mut BenchHarness) {\n "}]}