{"sha": "bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMzZlM2M3ZTcwOWNiOGY0YmU1NmE4NzRjZTdiMjI0ZjA1YjhlZDQ=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2021-01-03T13:51:24Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-03-13T23:00:28Z"}, "message": "Move ZST check inside UsedLocals", "tree": {"sha": "69e03a9c5e0e0dc316fdf1e3a743d300c74b09e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e03a9c5e0e0dc316fdf1e3a743d300c74b09e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4", "html_url": "https://github.com/rust-lang/rust/commit/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e901be57d23d1da21ad2e516a831ad3c16bfd85", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e901be57d23d1da21ad2e516a831ad3c16bfd85", "html_url": "https://github.com/rust-lang/rust/commit/4e901be57d23d1da21ad2e516a831ad3c16bfd85"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "7ca3191121e5d5ce3079127bdd09f5687868353c", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 53, "deletions": 50, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4", "patch": "@@ -31,10 +31,10 @@ use crate::transform::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n+use rustc_middle::ty::ParamEnv;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;\n-use std::borrow::Cow;\n-use std::convert::TryInto;\n+use std::{borrow::Cow, convert::TryInto};\n \n pub struct SimplifyCfg {\n     label: String,\n@@ -326,17 +326,18 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n \n pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n     // First, we're going to get a count of *actual* uses for every `Local`.\n-    let mut used_locals = UsedLocals::new(body);\n+    let mut used_locals = UsedLocals::new(body, tcx);\n \n     // Next, we're going to remove any `Local` with zero actual uses. When we remove those\n     // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`\n     // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from\n     // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a\n     // fixedpoint where there are no more unused locals.\n-    remove_unused_definitions(&mut used_locals, body, tcx);\n+    remove_unused_definitions(&mut used_locals, body);\n \n     // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.\n-    let map = make_local_map(&mut body.local_decls, &used_locals);\n+    let arg_count = body.arg_count.try_into().unwrap();\n+    let map = make_local_map(&mut body.local_decls, &used_locals, arg_count);\n \n     // Only bother running the `LocalUpdater` if we actually found locals to remove.\n     if map.iter().any(Option::is_none) {\n@@ -349,54 +350,61 @@ pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n }\n \n /// Construct the mapping while swapping out unused stuff out from the `vec`.\n-fn make_local_map<V>(\n+fn make_local_map<'tcx, V>(\n     local_decls: &mut IndexVec<Local, V>,\n-    used_locals: &UsedLocals,\n+    used_locals: &UsedLocals<'tcx>,\n+    arg_count: u32,\n ) -> IndexVec<Local, Option<Local>> {\n-    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);\n+    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, local_decls);\n     let mut used = Local::new(0);\n \n     for alive_index in local_decls.indices() {\n-        // `is_used` treats the `RETURN_PLACE` and arguments as used.\n-        if !used_locals.is_used(alive_index) {\n-            continue;\n-        }\n-\n-        map[alive_index] = Some(used);\n-        if alive_index != used {\n-            local_decls.swap(alive_index, used);\n+        // When creating the local map treat the `RETURN_PLACE` and arguments as used.\n+        if alive_index.as_u32() <= arg_count || used_locals.is_used(alive_index) {\n+            map[alive_index] = Some(used);\n+            if alive_index != used {\n+                local_decls.swap(alive_index, used);\n+            }\n+            used.increment_by(1);\n         }\n-        used.increment_by(1);\n     }\n     local_decls.truncate(used.index());\n     map\n }\n \n /// Keeps track of used & unused locals.\n-struct UsedLocals {\n+struct UsedLocals<'tcx> {\n     increment: bool,\n-    arg_count: u32,\n     use_count: IndexVec<Local, u32>,\n+    is_static: bool,\n+    local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+    param_env: ParamEnv<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n }\n \n-impl UsedLocals {\n+impl UsedLocals<'tcx> {\n     /// Determines which locals are used & unused in the given body.\n-    fn new(body: &Body<'_>) -> Self {\n+    fn new(body: &Body<'tcx>, tcx: TyCtxt<'tcx>) -> Self {\n+        let def_id = body.source.def_id();\n+        let is_static = tcx.is_static(def_id);\n+        let param_env = tcx.param_env(def_id);\n+        let local_decls = body.local_decls.clone();\n         let mut this = Self {\n             increment: true,\n-            arg_count: body.arg_count.try_into().unwrap(),\n             use_count: IndexVec::from_elem(0, &body.local_decls),\n+            is_static,\n+            local_decls,\n+            param_env,\n+            tcx,\n         };\n         this.visit_body(body);\n         this\n     }\n \n     /// Checks if local is used.\n-    ///\n-    /// Return place and arguments are always considered used.\n     fn is_used(&self, local: Local) -> bool {\n         trace!(\"is_used({:?}): use_count: {:?}\", local, self.use_count[local]);\n-        local.as_u32() <= self.arg_count || self.use_count[local] != 0\n+        self.use_count[local] != 0\n     }\n \n     /// Updates the use counts to reflect the removal of given statement.\n@@ -424,7 +432,7 @@ impl UsedLocals {\n     }\n }\n \n-impl Visitor<'_> for UsedLocals {\n+impl Visitor<'tcx> for UsedLocals<'tcx> {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::LlvmInlineAsm(..)\n@@ -451,7 +459,23 @@ impl Visitor<'_> for UsedLocals {\n         }\n     }\n \n-    fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {\n+    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _location: Location) {\n+        debug!(\"local: {:?} is_static: {:?}, ctx: {:?}\", local, self.is_static, ctx);\n+        // Do not count a local as used in `_local = <rhs>` if RHS is a ZST.\n+        let store = matches!(ctx, PlaceContext::MutatingUse(MutatingUseContext::Store));\n+        // Do not count _0 as a used in `return;` if it is a ZST.\n+        let return_place = *local == RETURN_PLACE\n+            && matches!(ctx, PlaceContext::NonMutatingUse(visit::NonMutatingUseContext::Move));\n+        if !self.is_static && (store || return_place) {\n+            let ty = self.local_decls[*local].ty;\n+            let param_env_and = self.param_env.and(ty);\n+            if let Ok(layout) = self.tcx.layout_of(param_env_and) {\n+                debug!(\"layout.is_zst: {:?}\", layout.is_zst());\n+                if layout.is_zst() {\n+                    return;\n+                }\n+            }\n+        }\n         if self.increment {\n             self.use_count[*local] += 1;\n         } else {\n@@ -463,21 +487,14 @@ impl Visitor<'_> for UsedLocals {\n \n /// Removes unused definitions. Updates the used locals to reflect the changes made.\n fn remove_unused_definitions<'a, 'tcx>(\n-    used_locals: &'a mut UsedLocals,\n+    used_locals: &'a mut UsedLocals<'tcx>,\n     body: &mut Body<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n ) {\n     // The use counts are updated as we remove the statements. A local might become unused\n     // during the retain operation, leading to a temporary inconsistency (storage statements or\n     // definitions referencing the local might remain). For correctness it is crucial that this\n     // computation reaches a fixed point.\n \n-    let def_id = body.source.def_id();\n-    let is_static = tcx.is_static(def_id);\n-    let param_env = tcx.param_env(def_id);\n-\n-    let local_decls = body.local_decls.clone();\n-\n     let mut modified = true;\n     while modified {\n         modified = false;\n@@ -489,21 +506,7 @@ fn remove_unused_definitions<'a, 'tcx>(\n                     StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n                         used_locals.is_used(*local)\n                     }\n-                    StatementKind::Assign(box (place, _)) => {\n-                        let used = used_locals.is_used(place.local);\n-                        let mut is_zst = false;\n-\n-                        // ZST locals can be removed\n-                        if used && !is_static {\n-                            let ty = local_decls[place.local].ty;\n-                            let param_env_and = param_env.and(ty);\n-                            if let Ok(layout) = tcx.layout_of(param_env_and) {\n-                                is_zst = layout.is_zst();\n-                            }\n-                        }\n-\n-                        used && !is_zst\n-                    }\n+                    StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),\n \n                     StatementKind::SetDiscriminant { ref place, .. } => {\n                         used_locals.is_used(place.local)"}, {"sha": "e5ce03a453ba12addc3da64e14ec82c7420fb539", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=bb36e3c7e709cb8f4be56a874ce7b224f05b8ed4", "patch": "@@ -28,6 +28,7 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        _6 = const ();                   // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageDead(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageDead(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10"}]}