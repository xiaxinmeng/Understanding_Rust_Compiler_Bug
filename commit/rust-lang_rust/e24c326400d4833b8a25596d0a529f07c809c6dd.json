{"sha": "e24c326400d4833b8a25596d0a529f07c809c6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGMzMjY0MDBkNDgzM2I4YTI1NTk2ZDBhNTI5ZjA3YzgwOWM2ZGQ=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-11T13:33:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-11T13:33:57Z"}, "message": "Rollup merge of #35375 - trixnz:update-error-326, r=jonathandturner\n\nUpdate error format for E0326\n\nFixes #35335 as part of #35233\n\nr? @jonathandturner", "tree": {"sha": "0b21d305edcfe61bbffbdee29b69f5d03f0e3b55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b21d305edcfe61bbffbdee29b69f5d03f0e3b55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24c326400d4833b8a25596d0a529f07c809c6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24c326400d4833b8a25596d0a529f07c809c6dd", "html_url": "https://github.com/rust-lang/rust/commit/e24c326400d4833b8a25596d0a529f07c809c6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24c326400d4833b8a25596d0a529f07c809c6dd/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fecdc59312aff11190bb1218420d09d59df1056", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fecdc59312aff11190bb1218420d09d59df1056", "html_url": "https://github.com/rust-lang/rust/commit/0fecdc59312aff11190bb1218420d09d59df1056"}, {"sha": "034df9478013dc05d06598c6e39494a8b518b004", "url": "https://api.github.com/repos/rust-lang/rust/commits/034df9478013dc05d06598c6e39494a8b518b004", "html_url": "https://github.com/rust-lang/rust/commit/034df9478013dc05d06598c6e39494a8b518b004"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "140fabce76b4d5401414e96da5a6755f385147e2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e24c326400d4833b8a25596d0a529f07c809c6dd/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24c326400d4833b8a25596d0a529f07c809c6dd/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=e24c326400d4833b8a25596d0a529f07c809c6dd", "patch": "@@ -14,6 +14,8 @@ use rustc::ty;\n use rustc::traits::{self, ProjectionMode};\n use rustc::ty::error::ExpectedFound;\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace};\n+use rustc::hir::map::Node;\n+use rustc::hir::{ImplItemKind, TraitItem_};\n \n use syntax::ast;\n use syntax_pos::Span;\n@@ -461,7 +463,7 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         // Compute skolemized form of impl and trait const tys.\n         let impl_ty = impl_c.ty.subst(tcx, impl_to_skol_substs);\n         let trait_ty = trait_c.ty.subst(tcx, &trait_to_skol_substs);\n-        let origin = TypeOrigin::Misc(impl_c_span);\n+        let mut origin = TypeOrigin::Misc(impl_c_span);\n \n         let err = infcx.commit_if_ok(|_| {\n             // There is no \"body\" here, so just pass dummy id.\n@@ -496,11 +498,31 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             debug!(\"checking associated const for compatibility: impl ty {:?}, trait ty {:?}\",\n                    impl_ty,\n                    trait_ty);\n+\n+            // Locate the Span containing just the type of the offending impl\n+            if let Some(impl_trait_node) = tcx.map.get_if_local(impl_c.def_id) {\n+                if let Node::NodeImplItem(impl_trait_item) = impl_trait_node {\n+                    if let ImplItemKind::Const(ref ty, _) = impl_trait_item.node {\n+                        origin = TypeOrigin::Misc(ty.span);\n+                    }\n+                }\n+            }\n+\n             let mut diag = struct_span_err!(\n                 tcx.sess, origin.span(), E0326,\n                 \"implemented const `{}` has an incompatible type for trait\",\n                 trait_c.name\n             );\n+\n+            // Add a label to the Span containing just the type of the item\n+            if let Some(orig_trait_node) = tcx.map.get_if_local(trait_c.def_id) {\n+                if let Node::NodeTraitItem(orig_trait_item) = orig_trait_node {\n+                    if let TraitItem_::ConstTraitItem(ref ty, _) = orig_trait_item.node {\n+                        diag.span_label(ty.span, &format!(\"original trait requirement\"));\n+                    }\n+                }\n+            }\n+\n             infcx.note_type_err(\n                 &mut diag, origin,\n                 Some(infer::ValuePairs::Types(ExpectedFound {"}, {"sha": "b3776091682da18b3f149c01f8786e830657df6d", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24c326400d4833b8a25596d0a529f07c809c6dd/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24c326400d4833b8a25596d0a529f07c809c6dd/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=e24c326400d4833b8a25596d0a529f07c809c6dd", "patch": "@@ -11,15 +11,15 @@\n #![feature(associated_consts)]\n \n trait Foo {\n-    const BAR: u32;\n+    const BAR: u32; //~ NOTE original trait requirement\n }\n \n struct SignedBar;\n \n impl Foo for SignedBar {\n     const BAR: i32 = -1;\n     //~^ ERROR implemented const `BAR` has an incompatible type for trait [E0326]\n-    //~| expected u32, found i32\n+    //~| NOTE expected u32, found i32\n }\n \n fn main() {}"}]}