{"sha": "fc3d7eb91dcea2f77a51368681dd2674b232a426", "node_id": "C_kwDOAAsO6NoAKGZjM2Q3ZWI5MWRjZWEyZjc3YTUxMzY4NjgxZGQyNjc0YjIzMmE0MjY", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-07-27T17:54:59Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-10-08T01:56:25Z"}, "message": "don't ICE when normalizing closure input tys\n\n`normalize_and_add_constraints` doesn't add entries in `universe_causes`\nwhen creating new universes, causing an ICE. Remove it!\n\nAdd spans to track normalization constraints.\n\nFix couple places where `universe_causes` is not updated correctly to\ntrack newly added universes.", "tree": {"sha": "f2221fc531258c2d929141d381d7218c01cf5ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2221fc531258c2d929141d381d7218c01cf5ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc3d7eb91dcea2f77a51368681dd2674b232a426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3d7eb91dcea2f77a51368681dd2674b232a426", "html_url": "https://github.com/rust-lang/rust/commit/fc3d7eb91dcea2f77a51368681dd2674b232a426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc3d7eb91dcea2f77a51368681dd2674b232a426/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff40f2ec95923c4d45366e85bcff17d75df68d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff40f2ec95923c4d45366e85bcff17d75df68d68", "html_url": "https://github.com/rust-lang/rust/commit/ff40f2ec95923c4d45366e85bcff17d75df68d68"}], "stats": {"total": 208, "additions": 150, "deletions": 58}, "files": [{"sha": "a581726a15c9c4ff6bfc77e9d241074a365b3a62", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=fc3d7eb91dcea2f77a51368681dd2674b232a426", "patch": "@@ -52,11 +52,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 Some(error_info) => error_info.to_universe_info(old_universe),\n                 None => UniverseInfo::other(),\n             };\n-            for u in old_universe..universe {\n-                self.borrowck_context\n-                    .constraints\n-                    .universe_causes\n-                    .insert(u + 1, universe_info.clone());\n+            for u in (old_universe + 1)..=universe {\n+                self.borrowck_context.constraints.universe_causes.insert(u, universe_info.clone());\n             }\n         }\n \n@@ -71,15 +68,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n+        let old_universe = self.infcx.universe();\n+\n         let (instantiated, _) =\n             self.infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);\n \n-        for u in 0..canonical.max_universe.as_u32() {\n-            let info = UniverseInfo::other();\n-            self.borrowck_context\n-                .constraints\n-                .universe_causes\n-                .insert(ty::UniverseIndex::from_u32(u), info);\n+        for u in (old_universe + 1)..=self.infcx.universe() {\n+            self.borrowck_context.constraints.universe_causes.insert(u, UniverseInfo::other());\n         }\n \n         instantiated"}, {"sha": "7d71f0b23d1802b8294209dc0dad7ecd76f8b85c", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=fc3d7eb91dcea2f77a51368681dd2674b232a426", "patch": "@@ -8,7 +8,6 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::query::OutlivesBound;\n use rustc_middle::ty::{self, RegionVid, Ty};\n-use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n use type_op::TypeOpOutput;\n@@ -219,6 +218,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n     }\n \n     pub(crate) fn create(mut self) -> CreateResult<'tcx> {\n+        let span = self.infcx.tcx.def_span(self.universal_regions.defining_ty.def_id());\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -250,7 +250,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                         self.infcx\n                             .tcx\n                             .sess\n-                            .delay_span_bug(DUMMY_SP, &format!(\"failed to normalize {:?}\", ty));\n+                            .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n                         TypeOpOutput {\n                             output: self.infcx.tcx.ty_error(),\n                             constraints: None,\n@@ -301,8 +301,8 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                 &self.region_bound_pairs,\n                 self.implicit_region_bound,\n                 self.param_env,\n-                Locations::All(DUMMY_SP),\n-                DUMMY_SP,\n+                Locations::All(span),\n+                span,\n                 ConstraintCategory::Internal,\n                 &mut self.constraints,\n             )"}, {"sha": "a66ddd27dbb2ee178b2fccfc6924e63fb7ee797a", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=fc3d7eb91dcea2f77a51368681dd2674b232a426", "patch": "@@ -7,16 +7,11 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n-use crate::type_check::constraint_conversion::ConstraintConversion;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n-use rustc_span::DUMMY_SP;\n-use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n-use rustc_trait_selection::traits::query::Fallible;\n-use type_op::TypeOpOutput;\n \n use crate::universal_regions::UniversalRegions;\n \n@@ -185,7 +180,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self, span), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\")]\n     fn equate_normalized_input_or_output(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, span: Span) {\n         if let Err(_) =\n             self.eq_types(a, b, Locations::All(span), ConstraintCategory::BoringNoLocation)\n@@ -194,13 +189,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n             // like to normalize *before* inserting into `local_decls`, but\n             // doing so ends up causing some other trouble.\n-            let b = match self.normalize_and_add_constraints(b) {\n-                Ok(n) => n,\n-                Err(_) => {\n-                    debug!(\"equate_inputs_and_outputs: NoSolution\");\n-                    b\n-                }\n-            };\n+            let b = self.normalize(b, Locations::All(span));\n \n             // Note: if we have to introduce new placeholders during normalization above, then we won't have\n             // added those universes to the universe info, which we would want in `relate_tys`.\n@@ -218,28 +207,4 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    pub(crate) fn normalize_and_add_constraints(&mut self, t: Ty<'tcx>) -> Fallible<Ty<'tcx>> {\n-        let TypeOpOutput { output: norm_ty, constraints, .. } =\n-            self.param_env.and(type_op::normalize::Normalize::new(t)).fully_perform(self.infcx)?;\n-\n-        debug!(\"{:?} normalized to {:?}\", t, norm_ty);\n-\n-        for data in constraints {\n-            ConstraintConversion::new(\n-                self.infcx,\n-                &self.borrowck_context.universal_regions,\n-                &self.region_bound_pairs,\n-                self.implicit_region_bound,\n-                self.param_env,\n-                Locations::All(DUMMY_SP),\n-                DUMMY_SP,\n-                ConstraintCategory::Internal,\n-                &mut self.borrowck_context.constraints,\n-            )\n-            .convert_all(&*data);\n-        }\n-\n-        Ok(norm_ty)\n-    }\n }"}, {"sha": "101b33c4580f93f71ae3e720337fd2fc85f20b27", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3d7eb91dcea2f77a51368681dd2674b232a426/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=fc3d7eb91dcea2f77a51368681dd2674b232a426", "patch": "@@ -138,8 +138,6 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     use_polonius: bool,\n ) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n-    let mut universe_causes = FxHashMap::default();\n-    universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());\n     let mut constraints = MirTypeckRegionConstraints {\n         placeholder_indices: PlaceholderIndices::default(),\n         placeholder_index_to_region: IndexVec::default(),\n@@ -148,7 +146,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         member_constraints: MemberConstraintSet::default(),\n         closure_bounds_mapping: Default::default(),\n         type_tests: Vec::default(),\n-        universe_causes,\n+        universe_causes: FxHashMap::default(),\n     };\n \n     let CreateResult {\n@@ -165,9 +163,8 @@ pub(crate) fn type_check<'mir, 'tcx>(\n \n     debug!(?normalized_inputs_and_output);\n \n-    for u in ty::UniverseIndex::ROOT..infcx.universe() {\n-        let info = UniverseInfo::other();\n-        constraints.universe_causes.insert(u, info);\n+    for u in ty::UniverseIndex::ROOT..=infcx.universe() {\n+        constraints.universe_causes.insert(u, UniverseInfo::other());\n     }\n \n     let mut borrowck_context = BorrowCheckContext {"}, {"sha": "25f47f5b6f6c93a0ec55953f6147a0e1ce4753aa", "filename": "src/test/ui/nll/closure-malformed-projection-input-issue-102800.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fc3d7eb91dcea2f77a51368681dd2674b232a426/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3d7eb91dcea2f77a51368681dd2674b232a426/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.rs?ref=fc3d7eb91dcea2f77a51368681dd2674b232a426", "patch": "@@ -0,0 +1,31 @@\n+// Regression test for #102800\n+//\n+// Here we are generating higher-ranked region constraints when normalizing and relating closure\n+// input types. Previously this was an ICE in the error path because we didn't register enough\n+// diagnostic information to render the higher-ranked subtyping error.\n+\n+// check-fail\n+\n+trait Trait {\n+    type Ty;\n+}\n+\n+impl Trait for &'static () {\n+    type Ty = ();\n+}\n+\n+fn main() {\n+    let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR higher-ranked subtype error\n+    //~| ERROR higher-ranked subtype error\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+}"}, {"sha": "dbd5dabd1daccbd15849ffc2d04fb698642b426f", "filename": "src/test/ui/nll/closure-malformed-projection-input-issue-102800.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/fc3d7eb91dcea2f77a51368681dd2674b232a426/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc3d7eb91dcea2f77a51368681dd2674b232a426/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.stderr?ref=fc3d7eb91dcea2f77a51368681dd2674b232a426", "patch": "@@ -0,0 +1,104 @@\n+error: lifetime may not live long enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^-^\n+   |                                                ||\n+   |                                                |has type `<&'1 () as Trait>::Ty`\n+   |                                                requires that `'1` must outlive `'static`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: aborting due to 12 previous errors\n+"}]}