{"sha": "9208c08a771199e49aa1bff0e80354124eddbe5f", "node_id": "C_kwDOAAsO6NoAKDkyMDhjMDhhNzcxMTk5ZTQ5YWExYmZmMGU4MDM1NDEyNGVkZGJlNWY", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-08T11:08:00Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-08T11:14:49Z"}, "message": "Use liballoc's specialised in-place vec collection\n\nliballoc already specialises in-place vector collection, so manually\nreimplementing it in `IdFunctor::try_map_id` was superfluous.", "tree": {"sha": "cddc5b1d7416e228eac0af80d7c1330c05ce33c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cddc5b1d7416e228eac0af80d7c1330c05ce33c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9208c08a771199e49aa1bff0e80354124eddbe5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmKghKkACgkQB8rDzKfg\nZD+Isw/+O1+dT2vnxBosswvrtjfAyAJnPE5nWVipHAbLMEUX4WzNaMjpyOGbU+hu\nAT1vDlAyDFG1gm1SWcGtiNPbAdRgGRcNGvKB7Nzm/o4XY3WljFkaT15Sehx7q73w\nJ7/qAI+5tIOjgFeiABlEJHJFCySlXoh8+WV9WtixnLJ5OObAeESxRVqOoncRprKX\ng6rv+h/ZuHZKgpwQxsl0ifyHgJyF3CYbpqE4YKsWwukVrxxxHU4n2KRE392wvlCT\nlV+VlTF5EixZVfCt1h5vEvUNh2CfS/TMBHrAeaIc7gvy34dqlxPF23LC83OgtAsb\n0BK6wGDD5n/acoKO3R8sbEhQfsFgjLnju13dWs2PNw6emlo5E5OVFApw388lHqBq\nKHROfN2UXeo/+ijUaFVgi+Bjt4KDqZNKd7T6rds0gEn/yp5xG3CA8y6YxAchxpTE\nK0cf5j0zR2/evy5UZmDlTx0mVlQZ6eu6Vj5HlHq/dgAlT+pMMwCrPqtemauJD4nt\nTm4dJonueMd5C3wBzaYd8JH/0/W9MMgfVMaqTmWJp1x5yhGc2u2Yy8YfX44lVmqP\nz6PX+Xm8hUQRRQ9mlQNS5S3l5e/wjmGfOZgVEIoi1AW5OxGgfejDy6Wi0tSoaUdz\nX20ydPB1YyGVkg4A+TyqBZ1dOrHhf30eFJA9T53E2yyj7s2nDDg=\n=ed6q\n-----END PGP SIGNATURE-----", "payload": "tree cddc5b1d7416e228eac0af80d7c1330c05ce33c5\nparent e45d9973b2665897a768312e971b82cc62633103\nauthor Alan Egerton <eggyal@gmail.com> 1654686480 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1654686889 +0100\n\nUse liballoc's specialised in-place vec collection\n\nliballoc already specialises in-place vector collection, so manually\nreimplementing it in `IdFunctor::try_map_id` was superfluous.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9208c08a771199e49aa1bff0e80354124eddbe5f", "html_url": "https://github.com/rust-lang/rust/commit/9208c08a771199e49aa1bff0e80354124eddbe5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9208c08a771199e49aa1bff0e80354124eddbe5f/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45d9973b2665897a768312e971b82cc62633103", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45d9973b2665897a768312e971b82cc62633103", "html_url": "https://github.com/rust-lang/rust/commit/e45d9973b2665897a768312e971b82cc62633103"}], "stats": {"total": 36, "additions": 2, "deletions": 34}, "files": [{"sha": "84cb417dd89363c64946c1cef65cca0d15d6fd38", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9208c08a771199e49aa1bff0e80354124eddbe5f/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9208c08a771199e49aa1bff0e80354124eddbe5f/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=9208c08a771199e49aa1bff0e80354124eddbe5f", "patch": "@@ -34,43 +34,11 @@ impl<T> IdFunctor for Vec<T> {\n     type Inner = T;\n \n     #[inline]\n-    fn try_map_id<F, E>(self, mut f: F) -> Result<Self, E>\n+    fn try_map_id<F, E>(self, f: F) -> Result<Self, E>\n     where\n         F: FnMut(Self::Inner) -> Result<Self::Inner, E>,\n     {\n-        struct HoleVec<T> {\n-            vec: Vec<mem::ManuallyDrop<T>>,\n-            hole: Option<usize>,\n-        }\n-\n-        impl<T> Drop for HoleVec<T> {\n-            fn drop(&mut self) {\n-                unsafe {\n-                    for (index, slot) in self.vec.iter_mut().enumerate() {\n-                        if self.hole != Some(index) {\n-                            mem::ManuallyDrop::drop(slot);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        unsafe {\n-            let (ptr, length, capacity) = self.into_raw_parts();\n-            let vec = Vec::from_raw_parts(ptr.cast(), length, capacity);\n-            let mut hole_vec = HoleVec { vec, hole: None };\n-\n-            for (index, slot) in hole_vec.vec.iter_mut().enumerate() {\n-                hole_vec.hole = Some(index);\n-                let original = mem::ManuallyDrop::take(slot);\n-                let mapped = f(original)?;\n-                *slot = mem::ManuallyDrop::new(mapped);\n-                hole_vec.hole = None;\n-            }\n-\n-            mem::forget(hole_vec);\n-            Ok(Vec::from_raw_parts(ptr, length, capacity))\n-        }\n+        self.into_iter().map(f).collect()\n     }\n }\n "}]}