{"sha": "664ecf1085b1bab9d7444eb54dccfeeabd99446e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NGVjZjEwODViMWJhYjlkNzQ0NGViNTRkY2NmZWVhYmQ5OTQ0NmU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-04T13:18:11Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-16T14:42:27Z"}, "message": "hir: simplify `is_range_literal`\n\nThis commit simplifies `is_range_literal` by checking for\n`QPath::LangItem` containing range-related lang items, rather than using\na heuristic.\n\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "4a33b6b24a72023cb8b733f99c92ccd39d10148a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a33b6b24a72023cb8b733f99c92ccd39d10148a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664ecf1085b1bab9d7444eb54dccfeeabd99446e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl85RdMACgkQJZLnbIc4\nH9lr+g/+On458K4nJP/aticIgrtj1lT2m0SZ4Cb8v5ztD/oO/CIZ5gCwRJxQtMUT\nNSrfQNpOzES1J5Q0vH7W55YlMYHcdtxjlY7zWbeok1IPHR2QgTMSs3BP5jF9yehW\nN69AuXesMBqZCvr8Eeb4wXGhise/UAdRE2N+MqLd+PvqkIm67mEMuNbe5rNtmoeY\nFDIAZz9x74LnkbJzzcgZ56iCvyphi6/sJxP7zoCws/bOJt+ym3NQkZpwnG5+YA2x\nYoTiBmIKaO7ZM7fT5oz6M2CkgvwM2aZXSi+fgQ8KcuMOKxqFRgfSxNZLLbTYa+Xv\nZMLKouAK/DC/AWN7vk/yQ3rB9c6B9ML/yRv85tYKkBA+t0vKD5g8fHPf6osxvh97\nNkh6Unh6RgTvU6HXST1EjZcS74PLPAye11SQhLxQ+C+53zFEdpMZ5rfBWXdsC1oJ\nXtEb3VH9YZEe6RR6S9hZQAWr5ygFDz0VzXXntcREN1XMZLBI4/mDOw9Iz5fopeyb\nAFQq8iXfBFS4qpVNRbqjbT7Wr3/P53mn48XWiz9k8DTb9QsjMB+rE/nxFbuVlS/+\n82fxx/cf6vZkLgl9odoX0PCsniyOizfvGpjIxV5FB2a1EUAXktCjqtSzRCTzUVHz\n9F7DZc2qZim9uU1iawR8Hww1glhVbsI8ze8gU0TzZ8PzehAGfSI=\n=erES\n-----END PGP SIGNATURE-----", "payload": "tree 4a33b6b24a72023cb8b733f99c92ccd39d10148a\nparent 1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df\nauthor David Wood <david@davidtw.co> 1596547091 +0100\ncommitter David Wood <david@davidtw.co> 1597588947 +0100\n\nhir: simplify `is_range_literal`\n\nThis commit simplifies `is_range_literal` by checking for\n`QPath::LangItem` containing range-related lang items, rather than using\na heuristic.\n\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664ecf1085b1bab9d7444eb54dccfeeabd99446e", "html_url": "https://github.com/rust-lang/rust/commit/664ecf1085b1bab9d7444eb54dccfeeabd99446e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664ecf1085b1bab9d7444eb54dccfeeabd99446e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df", "html_url": "https://github.com/rust-lang/rust/commit/1e2f350d921e73d7165fe9d7a5f0f6cfe613e3df"}], "stats": {"total": 72, "additions": 23, "deletions": 49}, "files": [{"sha": "bfcb506f1326f46c3fc710baf35fafc1ba058d57", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=664ecf1085b1bab9d7444eb54dccfeeabd99446e", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::util::parser::ExprPrecedence;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::source_map::{SourceMap, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n@@ -1495,58 +1495,28 @@ impl Expr<'_> {\n \n /// Checks if the specified expression is a built-in range literal.\n /// (See: `LoweringContext::lower_expr()`).\n-///\n-/// FIXME(#60607): This function is a hack. If and when we have `QPath::Lang(...)`,\n-/// we can use that instead as simpler, more reliable mechanism, as opposed to using `SourceMap`.\n-pub fn is_range_literal(sm: &SourceMap, expr: &Expr<'_>) -> bool {\n-    // Returns whether the given path represents a (desugared) range,\n-    // either in std or core, i.e. has either a `::std::ops::Range` or\n-    // `::core::ops::Range` prefix.\n-    fn is_range_path(path: &Path<'_>) -> bool {\n-        let segs: Vec<_> = path.segments.iter().map(|seg| seg.ident.to_string()).collect();\n-        let segs: Vec<_> = segs.iter().map(|seg| &**seg).collect();\n-\n-        // \"{{root}}\" is the equivalent of `::` prefix in `Path`.\n-        if let [\"{{root}}\", std_core, \"ops\", range] = segs.as_slice() {\n-            (*std_core == \"std\" || *std_core == \"core\") && range.starts_with(\"Range\")\n-        } else {\n-            false\n-        }\n-    };\n-\n-    // Check whether a span corresponding to a range expression is a\n-    // range literal, rather than an explicit struct or `new()` call.\n-    fn is_lit(sm: &SourceMap, span: &Span) -> bool {\n-        sm.span_to_snippet(*span).map(|range_src| range_src.contains(\"..\")).unwrap_or(false)\n-    };\n-\n+pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n     match expr.kind {\n         // All built-in range literals but `..=` and `..` desugar to `Struct`s.\n-        ExprKind::Struct(ref qpath, _, _) => {\n-            if let QPath::Resolved(None, ref path) = **qpath {\n-                return is_range_path(&path) && is_lit(sm, &expr.span);\n-            }\n-        }\n-\n-        // `..` desugars to its struct path.\n-        ExprKind::Path(QPath::Resolved(None, ref path)) => {\n-            return is_range_path(&path) && is_lit(sm, &expr.span);\n-        }\n+        ExprKind::Struct(ref qpath, _, _) => matches!(\n+            **qpath,\n+            QPath::LangItem(\n+                LangItem::Range\n+                | LangItem::RangeTo\n+                | LangItem::RangeFrom\n+                | LangItem::RangeFull\n+                | LangItem::RangeToInclusive,\n+                _,\n+            )\n+        ),\n \n         // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n         ExprKind::Call(ref func, _) => {\n-            if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.kind {\n-                if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.kind {\n-                    let new_call = segment.ident.name == sym::new;\n-                    return is_range_path(&path) && is_lit(sm, &expr.span) && new_call;\n-                }\n-            }\n+            matches!(func.kind, ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, _)))\n         }\n \n-        _ => {}\n+        _ => false,\n     }\n-\n-    false\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "a1c9b05a684dd4bc85eead2512a95750d0da0e78", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=664ecf1085b1bab9d7444eb54dccfeeabd99446e", "patch": "@@ -258,7 +258,7 @@ fn lint_int_literal<'tcx>(\n         let par_id = cx.tcx.hir().get_parent_node(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(par_id) {\n             if let hir::ExprKind::Struct(..) = par_e.kind {\n-                if is_range_literal(cx.sess().source_map(), par_e)\n+                if is_range_literal(par_e)\n                     && lint_overflowing_range_endpoint(cx, lit, v, max, e, par_e, t.name_str())\n                 {\n                     // The overflowing literal lint was overridden.\n@@ -317,7 +317,7 @@ fn lint_uint_literal<'tcx>(\n                         return;\n                     }\n                 }\n-                hir::ExprKind::Struct(..) if is_range_literal(cx.sess().source_map(), par_e) => {\n+                hir::ExprKind::Struct(..) if is_range_literal(par_e) => {\n                     let t = t.name_str();\n                     if lint_overflowing_range_endpoint(cx, lit, lit_val, max, e, par_e, t) {\n                         // The overflowing literal lint was overridden."}, {"sha": "ad97dbe63d8b37f17c9ece84038d9e7f9c6601d9", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=664ecf1085b1bab9d7444eb54dccfeeabd99446e", "patch": "@@ -485,7 +485,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // parenthesize if needed (Issue #46756)\n                             hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => true,\n                             // parenthesize borrows of range literals (Issue #54505)\n-                            _ if is_range_literal(self.tcx.sess.source_map(), expr) => true,\n+                            _ if is_range_literal(expr) => true,\n                             _ => false,\n                         };\n                         let sugg_expr = if needs_parens { format!(\"({})\", src) } else { src };"}, {"sha": "11cb72fa2b6f88260fd6ae3042d6917f1cf817ae", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664ecf1085b1bab9d7444eb54dccfeeabd99446e/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=664ecf1085b1bab9d7444eb54dccfeeabd99446e", "patch": "@@ -17,9 +17,13 @@ error[E0277]: the size for values of type `[{integer}]` cannot be known at compi\n    |\n LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/ops/range.rs:LL:COL\n+   |\n+LL | pub struct RangeFrom<Idx> {\n+   |                      --- required by this bound in `std::ops::RangeFrom`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: required by `std::ops::RangeFrom`\n \n error: aborting due to 3 previous errors\n "}]}