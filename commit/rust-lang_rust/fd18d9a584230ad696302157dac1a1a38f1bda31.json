{"sha": "fd18d9a584230ad696302157dac1a1a38f1bda31", "node_id": "C_kwDOAAsO6NoAKGZkMThkOWE1ODQyMzBhZDY5NjMwMjE1N2RhYzFhMWEzOGYxYmRhMzE", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-03-09T18:27:42Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:50:07Z"}, "message": "Renamed TypeErrorAdditionalDiags (was Error0308Subdiags) and ObligationCauseFailureCode (was FailureCodeDiagnostics)", "tree": {"sha": "95261a0c07223ea64900964261007d885b27792b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95261a0c07223ea64900964261007d885b27792b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd18d9a584230ad696302157dac1a1a38f1bda31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd18d9a584230ad696302157dac1a1a38f1bda31", "html_url": "https://github.com/rust-lang/rust/commit/fd18d9a584230ad696302157dac1a1a38f1bda31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd18d9a584230ad696302157dac1a1a38f1bda31/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa33a6fca27f0b9183146e191ba565e37e7644eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa33a6fca27f0b9183146e191ba565e37e7644eb", "html_url": "https://github.com/rust-lang/rust/commit/aa33a6fca27f0b9183146e191ba565e37e7644eb"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "2a5d3516c28fc3d28b9afb7a522af5c24aa99922", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d9a584230ad696302157dac1a1a38f1bda31/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d9a584230ad696302157dac1a1a38f1bda31/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=fd18d9a584230ad696302157dac1a1a38f1bda31", "patch": "@@ -1361,7 +1361,7 @@ impl AddToDiagnostic for SuggestTuplePatternMany {\n }\n \n #[derive(Subdiagnostic)]\n-pub enum Error0308Subdiags {\n+pub enum TypeErrorAdditionalDiags {\n     #[suggestion(\n         infer_meant_byte_literal,\n         code = \"b'{code}'\",\n@@ -1429,48 +1429,48 @@ pub enum Error0308Subdiags {\n }\n \n #[derive(Diagnostic)]\n-pub enum FailureCodeDiagnostics {\n+pub enum ObligationCauseFailureCode {\n     #[diag(infer_oc_method_compat, code = \"E0308\")]\n     MethodCompat {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_type_compat, code = \"E0308\")]\n     TypeCompat {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_const_compat, code = \"E0308\")]\n     ConstCompat {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_try_compat, code = \"E0308\")]\n     TryCompat {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_match_compat, code = \"E0308\")]\n     MatchCompat {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_if_else_different, code = \"E0308\")]\n     IfElseDifferent {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_no_else, code = \"E0317\")]\n     NoElse {\n@@ -1482,7 +1482,7 @@ pub enum FailureCodeDiagnostics {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_fn_main_correct_type, code = \"E0580\")]\n     FnMainCorrectType {\n@@ -1494,21 +1494,21 @@ pub enum FailureCodeDiagnostics {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_intristic_correct_type, code = \"E0308\")]\n     IntristicCorrectType {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_method_correct_type, code = \"E0308\")]\n     MethodCorrectType {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_closure_selfref, code = \"E0644\")]\n     ClosureSelfref {\n@@ -1520,13 +1520,13 @@ pub enum FailureCodeDiagnostics {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n     #[diag(infer_oc_generic, code = \"E0308\")]\n     Generic {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]\n-        subdiags: Vec<Error0308Subdiags>,\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n }"}, {"sha": "1cb901be4e98e7635682eb924de5d68727895b00", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d9a584230ad696302157dac1a1a38f1bda31/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d9a584230ad696302157dac1a1a38f1bda31/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fd18d9a584230ad696302157dac1a1a38f1bda31", "patch": "@@ -49,7 +49,7 @@ use super::lexical_region_resolve::RegionResolutionError;\n use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n-use crate::errors::{self, Error0308Subdiags, FailureCodeDiagnostics};\n+use crate::errors::{self, ObligationCauseFailureCode, TypeErrorAdditionalDiags};\n use crate::infer;\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::ExpectedFound;\n@@ -1924,7 +1924,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         &self,\n         trace: &TypeTrace<'tcx>,\n         terr: TypeError<'tcx>,\n-    ) -> Vec<Error0308Subdiags> {\n+    ) -> Vec<TypeErrorAdditionalDiags> {\n         use crate::traits::ObligationCauseCode::MatchExpressionArm;\n         let mut suggestions = Vec::new();\n         let span = trace.cause.span();\n@@ -1946,7 +1946,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         && !code.starts_with(\"\\\\u\") // forbid all Unicode escapes\n                         && code.chars().next().map_or(false, |c| c.is_ascii()) // forbids literal Unicode characters beyond ASCII\n                     {\n-                        suggestions.push(Error0308Subdiags::MeantByteLiteral { span, code: escape_literal(code) })\n+                        suggestions.push(TypeErrorAdditionalDiags::MeantByteLiteral { span, code: escape_literal(code) })\n                     }\n                 }\n                 // If a character was expected and the found expression is a string literal\n@@ -1957,7 +1957,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         && let Some(code) = code.strip_prefix('\"').and_then(|s| s.strip_suffix('\"'))\n                         && code.chars().count() == 1\n                     {\n-                        suggestions.push(Error0308Subdiags::MeantCharLiteral { span, code: escape_literal(code) })\n+                        suggestions.push(TypeErrorAdditionalDiags::MeantCharLiteral { span, code: escape_literal(code) })\n                     }\n                 }\n                 // If a string was expected and the found expression is a character literal,\n@@ -1967,7 +1967,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         if let Some(code) =\n                             code.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\''))\n                         {\n-                            suggestions.push(Error0308Subdiags::MeantStrLiteral { span, code: escape_literal(code) })\n+                            suggestions.push(TypeErrorAdditionalDiags::MeantStrLiteral { span, code: escape_literal(code) })\n                         }\n                     }\n                 }\n@@ -2032,7 +2032,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n                         && let Some(span) = self.tcx.hir().opt_span(*hir_id)\n                     {\n-                        suggestions.push(Error0308Subdiags::ConsiderSpecifyingLength { span, length: sz.found });\n+                        suggestions.push(TypeErrorAdditionalDiags::ConsiderSpecifyingLength { span, length: sz.found });\n                     }\n                 }\n                 _ => {}\n@@ -2043,7 +2043,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     && let hir::MatchSource::TryDesugar = source\n                     && let Some((expected_ty, found_ty, _, _)) = self.values_str(trace.values)\n                 {\n-                    suggestions.push(Error0308Subdiags::TryCannotConvert { found: found_ty.content(), expected: expected_ty.content() });\n+                    suggestions.push(TypeErrorAdditionalDiags::TryCannotConvert { found: found_ty.content(), expected: expected_ty.content() });\n                 }\n         suggestions\n     }\n@@ -2071,7 +2071,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         span: Span,\n         found: Ty<'tcx>,\n         expected_fields: &List<Ty<'tcx>>,\n-    ) -> Option<Error0308Subdiags> {\n+    ) -> Option<TypeErrorAdditionalDiags> {\n         let [expected_tup_elem] = expected_fields[..] else { return None};\n \n         if !self.same_type_modulo_infer(expected_tup_elem, found) {\n@@ -2083,9 +2083,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         let sugg = if code.starts_with('(') && code.ends_with(')') {\n             let before_close = span.hi() - BytePos::from_u32(1);\n-            Error0308Subdiags::TupleOnlyComma { span: span.with_hi(before_close).shrink_to_hi() }\n+            TypeErrorAdditionalDiags::TupleOnlyComma {\n+                span: span.with_hi(before_close).shrink_to_hi(),\n+            }\n         } else {\n-            Error0308Subdiags::TupleAlsoParentheses {\n+            TypeErrorAdditionalDiags::TupleAlsoParentheses {\n                 span_low: span.shrink_to_lo(),\n                 span_high: span.shrink_to_hi(),\n             }\n@@ -2806,8 +2808,8 @@ pub trait ObligationCauseExt<'tcx> {\n         &self,\n         terr: TypeError<'tcx>,\n         span: Span,\n-        subdiags: Vec<Error0308Subdiags>,\n-    ) -> FailureCodeDiagnostics;\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n+    ) -> ObligationCauseFailureCode;\n     fn as_requirement_str(&self) -> &'static str;\n }\n \n@@ -2840,42 +2842,44 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n         &self,\n         terr: TypeError<'tcx>,\n         span: Span,\n-        subdiags: Vec<Error0308Subdiags>,\n-    ) -> FailureCodeDiagnostics {\n+        subdiags: Vec<TypeErrorAdditionalDiags>,\n+    ) -> ObligationCauseFailureCode {\n         use crate::traits::ObligationCauseCode::*;\n         match self.code() {\n             CompareImplItemObligation { kind: ty::AssocKind::Fn, .. } => {\n-                FailureCodeDiagnostics::MethodCompat { span, subdiags }\n+                ObligationCauseFailureCode::MethodCompat { span, subdiags }\n             }\n             CompareImplItemObligation { kind: ty::AssocKind::Type, .. } => {\n-                FailureCodeDiagnostics::TypeCompat { span, subdiags }\n+                ObligationCauseFailureCode::TypeCompat { span, subdiags }\n             }\n             CompareImplItemObligation { kind: ty::AssocKind::Const, .. } => {\n-                FailureCodeDiagnostics::ConstCompat { span, subdiags }\n+                ObligationCauseFailureCode::ConstCompat { span, subdiags }\n             }\n             MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => match source {\n                 hir::MatchSource::TryDesugar => {\n-                    FailureCodeDiagnostics::TryCompat { span, subdiags }\n+                    ObligationCauseFailureCode::TryCompat { span, subdiags }\n                 }\n-                _ => FailureCodeDiagnostics::MatchCompat { span, subdiags },\n+                _ => ObligationCauseFailureCode::MatchCompat { span, subdiags },\n             },\n-            IfExpression { .. } => FailureCodeDiagnostics::IfElseDifferent { span, subdiags },\n-            IfExpressionWithNoElse => FailureCodeDiagnostics::NoElse { span },\n-            LetElse => FailureCodeDiagnostics::NoDiverge { span, subdiags },\n-            MainFunctionType => FailureCodeDiagnostics::FnMainCorrectType { span },\n-            StartFunctionType => FailureCodeDiagnostics::FnStartCorrectType { span, subdiags },\n-            IntrinsicType => FailureCodeDiagnostics::IntristicCorrectType { span, subdiags },\n-            MethodReceiver => FailureCodeDiagnostics::MethodCorrectType { span, subdiags },\n+            IfExpression { .. } => ObligationCauseFailureCode::IfElseDifferent { span, subdiags },\n+            IfExpressionWithNoElse => ObligationCauseFailureCode::NoElse { span },\n+            LetElse => ObligationCauseFailureCode::NoDiverge { span, subdiags },\n+            MainFunctionType => ObligationCauseFailureCode::FnMainCorrectType { span },\n+            StartFunctionType => ObligationCauseFailureCode::FnStartCorrectType { span, subdiags },\n+            IntrinsicType => ObligationCauseFailureCode::IntristicCorrectType { span, subdiags },\n+            MethodReceiver => ObligationCauseFailureCode::MethodCorrectType { span, subdiags },\n \n             // In the case where we have no more specific thing to\n             // say, also take a look at the error code, maybe we can\n             // tailor to that.\n             _ => match terr {\n                 TypeError::CyclicTy(ty) if ty.is_closure() || ty.is_generator() => {\n-                    FailureCodeDiagnostics::ClosureSelfref { span }\n+                    ObligationCauseFailureCode::ClosureSelfref { span }\n+                }\n+                TypeError::IntrinsicCast => {\n+                    ObligationCauseFailureCode::CantCoerce { span, subdiags }\n                 }\n-                TypeError::IntrinsicCast => FailureCodeDiagnostics::CantCoerce { span, subdiags },\n-                _ => FailureCodeDiagnostics::Generic { span, subdiags },\n+                _ => ObligationCauseFailureCode::Generic { span, subdiags },\n             },\n         }\n     }"}, {"sha": "82cd05e3d07e91efeade07b235ef22b153bd2270", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d9a584230ad696302157dac1a1a38f1bda31/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d9a584230ad696302157dac1a1a38f1bda31/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=fd18d9a584230ad696302157dac1a1a38f1bda31", "patch": "@@ -13,10 +13,10 @@ use rustc_span::{sym, BytePos, Span};\n use rustc_target::abi::FieldIdx;\n \n use crate::errors::{\n-    ConsiderAddingAwait, DiagArg, Error0308Subdiags, FnConsiderCasting, FnItemsAreDistinct,\n-    FnUniqTypes, FunctionPointerSuggestion, SuggestAccessingField, SuggestAsRefWhereAppropriate,\n+    ConsiderAddingAwait, DiagArg, FnConsiderCasting, FnItemsAreDistinct, FnUniqTypes,\n+    FunctionPointerSuggestion, SuggestAccessingField, SuggestAsRefWhereAppropriate,\n     SuggestBoxingForReturnImplTrait, SuggestRemoveSemiOrReturnBinding, SuggestTuplePatternMany,\n-    SuggestTuplePatternOne,\n+    SuggestTuplePatternOne, TypeErrorAdditionalDiags,\n };\n \n use super::TypeErrCtxt;\n@@ -484,7 +484,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         &self,\n         cause: &ObligationCause<'_>,\n         span: Span,\n-    ) -> Option<Error0308Subdiags> {\n+    ) -> Option<TypeErrorAdditionalDiags> {\n         let hir = self.tcx.hir();\n         if let Some(node) = self.tcx.hir().find_by_def_id(cause.body_id) &&\n             let hir::Node::Item(hir::Item {\n@@ -531,7 +531,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         let mut visitor = IfVisitor { err_span: span, found_if: false, result: false };\n         visitor.visit_body(&body);\n         if visitor.result {\n-                return Some(Error0308Subdiags::AddLetForLetChains{span: span.shrink_to_lo()});\n+                return Some(TypeErrorAdditionalDiags::AddLetForLetChains{span: span.shrink_to_lo()});\n             }\n         }\n         None"}]}