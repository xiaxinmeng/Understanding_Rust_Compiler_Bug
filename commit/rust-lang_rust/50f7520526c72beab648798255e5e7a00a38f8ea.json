{"sha": "50f7520526c72beab648798255e5e7a00a38f8ea", "node_id": "C_kwDOAAsO6NoAKDUwZjc1MjA1MjZjNzJiZWFiNjQ4Nzk4MjU1ZTVlN2EwMGEzOGY4ZWE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-14T19:28:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-14T19:28:00Z"}, "message": "rustdoc: DocFS: Replace rayon with threadpool and enable it for all targets", "tree": {"sha": "979d249fb6b5f8c0037a002df45612bc942d52f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/979d249fb6b5f8c0037a002df45612bc942d52f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f7520526c72beab648798255e5e7a00a38f8ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f7520526c72beab648798255e5e7a00a38f8ea", "html_url": "https://github.com/rust-lang/rust/commit/50f7520526c72beab648798255e5e7a00a38f8ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f7520526c72beab648798255e5e7a00a38f8ea/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c0b81c1fd5de8e00276524896d3352ed91a8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c0b81c1fd5de8e00276524896d3352ed91a8cb", "html_url": "https://github.com/rust-lang/rust/commit/24c0b81c1fd5de8e00276524896d3352ed91a8cb"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "522d91aed34e1dc8d1e47f93c9fb351f14dc1ebc", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50f7520526c72beab648798255e5e7a00a38f8ea/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/50f7520526c72beab648798255e5e7a00a38f8ea/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=50f7520526c72beab648798255e5e7a00a38f8ea", "patch": "@@ -5457,13 +5457,13 @@ dependencies = [\n  \"itertools\",\n  \"minifier\",\n  \"once_cell\",\n- \"rayon\",\n  \"regex\",\n  \"rustdoc-json-types\",\n  \"serde\",\n  \"serde_json\",\n  \"smallvec\",\n  \"tempfile\",\n+ \"threadpool\",\n  \"tracing\",\n  \"tracing-subscriber\",\n  \"tracing-tree\",\n@@ -6208,6 +6208,15 @@ dependencies = [\n  \"once_cell\",\n ]\n \n+[[package]]\n+name = \"threadpool\"\n+version = \"1.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa\"\n+dependencies = [\n+ \"num_cpus\",\n+]\n+\n [[package]]\n name = \"tidy\"\n version = \"0.1.0\""}, {"sha": "29912b95703b2f8c48dada046dbfeb2642376127", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50f7520526c72beab648798255e5e7a00a38f8ea/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50f7520526c72beab648798255e5e7a00a38f8ea/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=50f7520526c72beab648798255e5e7a00a38f8ea", "patch": "@@ -20,15 +20,13 @@ smallvec = \"1.8.1\"\n tempfile = \"3\"\n tracing = \"0.1\"\n tracing-tree = \"0.2.0\"\n+threadpool = \"1.8.1\"\n \n [dependencies.tracing-subscriber]\n version = \"0.3.3\"\n default-features = false\n features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n \n-[target.'cfg(windows)'.dependencies]\n-rayon = \"1.5.1\"\n-\n [dev-dependencies]\n expect-test = \"1.4.0\"\n "}, {"sha": "59393697dfec3599218ccd5d272d9246e6a4b4e6", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50f7520526c72beab648798255e5e7a00a38f8ea/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f7520526c72beab648798255e5e7a00a38f8ea/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=50f7520526c72beab648798255e5e7a00a38f8ea", "patch": "@@ -9,11 +9,14 @@\n //! needs to read-after-write from a file, then it would be added to this\n //! abstraction.\n \n+use std::cmp::max;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::string::ToString;\n use std::sync::mpsc::Sender;\n+use std::thread::available_parallelism;\n+use threadpool::ThreadPool;\n \n pub(crate) trait PathError {\n     fn new<S, P: AsRef<Path>>(e: S, path: P) -> Self\n@@ -24,11 +27,21 @@ pub(crate) trait PathError {\n pub(crate) struct DocFS {\n     sync_only: bool,\n     errors: Option<Sender<String>>,\n+    pool: ThreadPool,\n }\n \n impl DocFS {\n     pub(crate) fn new(errors: Sender<String>) -> DocFS {\n-        DocFS { sync_only: false, errors: Some(errors) }\n+        const MINIMUM_NB_THREADS: usize = 2;\n+        DocFS {\n+            sync_only: false,\n+            errors: Some(errors),\n+            pool: ThreadPool::new(\n+                available_parallelism()\n+                    .map(|nb| max(nb.get(), MINIMUM_NB_THREADS))\n+                    .unwrap_or(MINIMUM_NB_THREADS),\n+            ),\n+        }\n     }\n \n     pub(crate) fn set_sync_only(&mut self, sync_only: bool) {\n@@ -54,12 +67,11 @@ impl DocFS {\n     where\n         E: PathError,\n     {\n-        #[cfg(windows)]\n         if !self.sync_only {\n             // A possible future enhancement after more detailed profiling would\n             // be to create the file sync so errors are reported eagerly.\n             let sender = self.errors.clone().expect(\"can't write after closing\");\n-            rayon::spawn(move || {\n+            self.pool.execute(move || {\n                 fs::write(&path, contents).unwrap_or_else(|e| {\n                     sender.send(format!(\"\\\"{}\\\": {}\", path.display(), e)).unwrap_or_else(|_| {\n                         panic!(\"failed to send error on \\\"{}\\\"\", path.display())\n@@ -70,9 +82,12 @@ impl DocFS {\n             fs::write(&path, contents).map_err(|e| E::new(e, path))?;\n         }\n \n-        #[cfg(not(windows))]\n-        fs::write(&path, contents).map_err(|e| E::new(e, path))?;\n-\n         Ok(())\n     }\n }\n+\n+impl Drop for DocFS {\n+    fn drop(&mut self) {\n+        self.pool.join();\n+    }\n+}"}]}