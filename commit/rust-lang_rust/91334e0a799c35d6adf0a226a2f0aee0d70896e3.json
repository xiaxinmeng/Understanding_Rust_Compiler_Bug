{"sha": "91334e0a799c35d6adf0a226a2f0aee0d70896e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzM0ZTBhNzk5YzM1ZDZhZGYwYTIyNmEyZjBhZWUwZDcwODk2ZTM=", "commit": {"author": {"name": "cjkenn", "email": "cam.j.kennedy@gmail.com", "date": "2020-01-03T23:53:03Z"}, "committer": {"name": "cjkenn", "email": "cam.j.kennedy@gmail.com", "date": "2020-01-03T23:53:03Z"}, "message": "add a check for variable names that might match by word", "tree": {"sha": "a13789d8c1e7cbe885a83b4851ab1b65aaafa2fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a13789d8c1e7cbe885a83b4851ab1b65aaafa2fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91334e0a799c35d6adf0a226a2f0aee0d70896e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91334e0a799c35d6adf0a226a2f0aee0d70896e3", "html_url": "https://github.com/rust-lang/rust/commit/91334e0a799c35d6adf0a226a2f0aee0d70896e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91334e0a799c35d6adf0a226a2f0aee0d70896e3/comments", "author": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec370670220b712b042ee09aab067ec7e5878d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec370670220b712b042ee09aab067ec7e5878d5", "html_url": "https://github.com/rust-lang/rust/commit/0ec370670220b712b042ee09aab067ec7e5878d5"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "8ddda1720b8d77a25de2c4005787bf4b3d508e12", "filename": "src/libsyntax/util/lev_distance.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/91334e0a799c35d6adf0a226a2f0aee0d70896e3/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91334e0a799c35d6adf0a226a2f0aee0d70896e3/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=91334e0a799c35d6adf0a226a2f0aee0d70896e3", "patch": "@@ -52,14 +52,15 @@ where\n     T: Iterator<Item = &'a Symbol>,\n {\n     let max_dist = dist.map_or_else(|| cmp::max(lookup.len(), 3) / 3, |d| d);\n+    let name_vec: Vec<&Symbol> = iter_names.collect();\n \n-    let (case_insensitive_match, levenstein_match) = iter_names\n+    let (case_insensitive_match, levenshtein_match) = name_vec.iter()\n         .filter_map(|&name| {\n             let dist = lev_distance(lookup, &name.as_str());\n             if dist <= max_dist { Some((name, dist)) } else { None }\n         })\n         // Here we are collecting the next structure:\n-        // (case_insensitive_match, (levenstein_match, levenstein_distance))\n+        // (case_insensitive_match, (levenshtein_match, levenshtein_distance))\n         .fold((None, None), |result, (candidate, dist)| {\n             (\n                 if candidate.as_str().to_uppercase() == lookup.to_uppercase() {\n@@ -73,10 +74,32 @@ where\n                 },\n             )\n         });\n-\n+    \n+    // Priority of matches:\n+    // 1. Exact case insensitive match\n+    // 2. Levenshtein distance match\n+    // 3. Sorted word match\n     if let Some(candidate) = case_insensitive_match {\n-        Some(candidate) // exact case insensitive match has a higher priority\n+        Some(*candidate)\n+    } else if levenshtein_match.is_some() {\n+        levenshtein_match.map(|(candidate, _)| *candidate)\n     } else {\n-        levenstein_match.map(|(candidate, _)| candidate)\n+        find_match_by_sorted_words(name_vec, lookup)\n     }\n }\n+\n+fn find_match_by_sorted_words<'a>(iter_names: Vec<&'a Symbol>, lookup: &str) -> Option<Symbol> {\n+    iter_names.iter().fold(None, |result, candidate| {\n+        if sort_by_words(&candidate.as_str()) == sort_by_words(lookup) {\n+            Some(**candidate)\n+        } else {\n+            result\n+        }\n+    })\n+}\n+\n+fn sort_by_words(name: &str) -> String {\n+    let mut split_words: Vec<&str> = name.split('_').collect();\n+    split_words.sort();\n+    split_words.join(\"_\")\n+}"}, {"sha": "222661687c1c29d459d3eb7baee0a60b6e019548", "filename": "src/libsyntax/util/lev_distance/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91334e0a799c35d6adf0a226a2f0aee0d70896e3/src%2Flibsyntax%2Futil%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91334e0a799c35d6adf0a226a2f0aee0d70896e3/src%2Flibsyntax%2Futil%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance%2Ftests.rs?ref=91334e0a799c35d6adf0a226a2f0aee0d70896e3", "patch": "@@ -46,5 +46,11 @@ fn test_find_best_match_for_name() {\n             find_best_match_for_name(input.iter(), \"aaaa\", Some(4)),\n             Some(Symbol::intern(\"AAAA\"))\n         );\n+\n+        let input = vec![Symbol::intern(\"a_longer_variable_name\")];\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), \"a_variable_longer_name\", None),\n+            Some(Symbol::intern(\"a_longer_variable_name\"))\n+        );\n     })\n }"}]}