{"sha": "6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNWU2M2ZmMmQwYWYwN2FhZTVhNWM5OWNlOWIxNTk1ZTc0ZmJjMWY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-15T00:32:53Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-15T00:32:53Z"}, "message": "std::trie: add benchmarks for insert.", "tree": {"sha": "5f1f480aa354d463b033c1ce1493fca9cd737fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1f480aa354d463b033c1ce1493fca9cd737fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f", "html_url": "https://github.com/rust-lang/rust/commit/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8b011319f5cfbfb3329d9dad185be884f3a4d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8b011319f5cfbfb3329d9dad185be884f3a4d6", "html_url": "https://github.com/rust-lang/rust/commit/dd8b011319f5cfbfb3329d9dad185be884f3a4d6"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "7987e25a2f36d97bba64cf0118ccb67402d062ef", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f", "patch": "@@ -886,6 +886,54 @@ mod bench_map {\n                 }\n             });\n     }\n+\n+    #[bench]\n+    fn bench_insert_large(bh: &mut BenchHarness) {\n+        let mut m = TrieMap::<[uint, .. 10]>::new();\n+        let mut rng = weak_rng();\n+\n+        bh.iter(|| {\n+                for _ in range(0, 1000) {\n+                    m.insert(rng.gen(), [1, .. 10]);\n+                }\n+            })\n+    }\n+    #[bench]\n+    fn bench_insert_large_low_bits(bh: &mut BenchHarness) {\n+        let mut m = TrieMap::<[uint, .. 10]>::new();\n+        let mut rng = weak_rng();\n+\n+        bh.iter(|| {\n+                for _ in range(0, 1000) {\n+                    // only have the last few bits set.\n+                    m.insert(rng.gen::<uint>() & 0xff_ff, [1, .. 10]);\n+                }\n+            })\n+    }\n+\n+    #[bench]\n+    fn bench_insert_small(bh: &mut BenchHarness) {\n+        let mut m = TrieMap::<()>::new();\n+        let mut rng = weak_rng();\n+\n+        bh.iter(|| {\n+                for _ in range(0, 1000) {\n+                    m.insert(rng.gen(), ());\n+                }\n+            })\n+    }\n+    #[bench]\n+    fn bench_insert_small_low_bits(bh: &mut BenchHarness) {\n+        let mut m = TrieMap::<()>::new();\n+        let mut rng = weak_rng();\n+\n+        bh.iter(|| {\n+                for _ in range(0, 1000) {\n+                    // only have the last few bits set.\n+                    m.insert(rng.gen::<uint>() & 0xff_ff, ());\n+                }\n+            })\n+    }\n }\n \n #[cfg(test)]"}]}