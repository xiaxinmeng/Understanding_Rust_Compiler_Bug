{"sha": "5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "node_id": "C_kwDOAAsO6NoAKDVlYjk2OThiNGU5MmFlOGE3ZmY1NmJmZWM1YWJmZjNiOTAzMzdiNzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-04T22:39:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T22:39:49Z"}, "message": "Rollup merge of #106398 - jyn514:fix-clippy, r=thomcc\n\nFix a few clippy lints in libtest\n\n- Remove unnecessary references and dereferences\n- Use `.contains` instead of `a <= x && x <= b`\n- Use `mem::take` instead of `mem::replace` where possible\n\ncc https://github.com/rust-lang/rust/pull/106394 :)", "tree": {"sha": "4260debcacbc18f062d0bcb1c2717a44da555c5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4260debcacbc18f062d0bcb1c2717a44da555c5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtgA1CRBK7hj4Ov3rIwAAkrIIABO36RbrL8L5nREGotOWeW/z\nzHAXanipSGlIPB7khljMJrcsW9nAHIymXDwpaIsboRIoWoLwlxt+Pk5631Sye8A+\nfsKM378dZdVMQ7yw/yjC9Bs0vNOK0ofr6bgLxkYtQQto+scc0uAxU4UnlFJd7wVy\n1P7jM0+fUfpRScvhm2GesvGJxFXYdbgxKW8q1eIF5E0OwlzvKoZUH5vnJyCATS7k\nvtpmsd29uL2clIq5st9yf6EeqKFGOiY+/HqONc20Zd8JyvGsy9Un4ThlOhnutAvz\nkHrAZU0N2WVtwZt8jlJBVaRmCUPK1atvsVB7TTiGdk9W8V28lY511wx5XwupUVg=\n=JMd4\n-----END PGP SIGNATURE-----\n", "payload": "tree 4260debcacbc18f062d0bcb1c2717a44da555c5e\nparent b41d81ca96ca293987ad5ada06107017d9eb4cd2\nparent 3534e0a393b447791fffaa84a97114dd3c761890\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672871989 +0100\ncommitter GitHub <noreply@github.com> 1672871989 +0100\n\nRollup merge of #106398 - jyn514:fix-clippy, r=thomcc\n\nFix a few clippy lints in libtest\n\n- Remove unnecessary references and dereferences\n- Use `.contains` instead of `a <= x && x <= b`\n- Use `mem::take` instead of `mem::replace` where possible\n\ncc https://github.com/rust-lang/rust/pull/106394 :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "html_url": "https://github.com/rust-lang/rust/commit/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b41d81ca96ca293987ad5ada06107017d9eb4cd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b41d81ca96ca293987ad5ada06107017d9eb4cd2", "html_url": "https://github.com/rust-lang/rust/commit/b41d81ca96ca293987ad5ada06107017d9eb4cd2"}, {"sha": "3534e0a393b447791fffaa84a97114dd3c761890", "url": "https://api.github.com/repos/rust-lang/rust/commits/3534e0a393b447791fffaa84a97114dd3c761890", "html_url": "https://github.com/rust-lang/rust/commit/3534e0a393b447791fffaa84a97114dd3c761890"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "24cbe035f2fa7e3e9082d38a6c44355dd47711da", "filename": "library/test/src/console.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -147,7 +147,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n     let mut ntest = 0;\n     let mut nbench = 0;\n \n-    for test in filter_tests(&opts, tests).into_iter() {\n+    for test in filter_tests(opts, tests).into_iter() {\n         use crate::TestFn::*;\n \n         let TestDescAndFn { desc: TestDesc { name, .. }, testfn } = test;\n@@ -244,7 +244,7 @@ fn on_test_event(\n             let stdout = &completed_test.stdout;\n \n             st.write_log_result(test, result, exec_time.as_ref())?;\n-            out.write_result(test, result, exec_time.as_ref(), &*stdout, st)?;\n+            out.write_result(test, result, exec_time.as_ref(), stdout, st)?;\n             handle_test_result(st, completed_test);\n         }\n     }\n@@ -262,7 +262,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n \n     let max_name_len = tests\n         .iter()\n-        .max_by_key(|t| len_if_padded(*t))\n+        .max_by_key(|t| len_if_padded(t))\n         .map(|t| t.desc.name.as_slice().len())\n         .unwrap_or(0);\n "}, {"sha": "95d2faf25060fcb0f49ef11d5b66daa895d66406", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -40,20 +40,20 @@ impl<T: Write> JsonFormatter<T> {\n         extra: Option<&str>,\n     ) -> io::Result<()> {\n         // A doc test's name includes a filename which must be escaped for correct json.\n-        self.write_message(&*format!(\n+        self.write_message(&format!(\n             r#\"{{ \"type\": \"{}\", \"name\": \"{}\", \"event\": \"{}\"\"#,\n             ty,\n             EscapedString(name),\n             evt\n         ))?;\n         if let Some(exec_time) = exec_time {\n-            self.write_message(&*format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64()))?;\n+            self.write_message(&format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64()))?;\n         }\n         if let Some(stdout) = stdout {\n-            self.write_message(&*format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n+            self.write_message(&format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n         }\n         if let Some(extra) = extra {\n-            self.write_message(&*format!(r#\", {extra}\"#))?;\n+            self.write_message(&format!(r#\", {extra}\"#))?;\n         }\n         self.writeln_message(\" }\")\n     }\n@@ -66,13 +66,13 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n         } else {\n             String::new()\n         };\n-        self.writeln_message(&*format!(\n+        self.writeln_message(&format!(\n             r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {test_count}{shuffle_seed_json} }}\"#\n         ))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.writeln_message(&*format!(\n+        self.writeln_message(&format!(\n             r#\"{{ \"type\": \"test\", \"event\": \"started\", \"name\": \"{}\" }}\"#,\n             EscapedString(desc.name.as_slice())\n         ))\n@@ -151,20 +151,20 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                     mbps\n                 );\n \n-                self.writeln_message(&*line)\n+                self.writeln_message(&line)\n             }\n         }\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.writeln_message(&*format!(\n+        self.writeln_message(&format!(\n             r#\"{{ \"type\": \"test\", \"event\": \"timeout\", \"name\": \"{}\" }}\"#,\n             EscapedString(desc.name.as_slice())\n         ))\n     }\n \n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n-        self.write_message(&*format!(\n+        self.write_message(&format!(\n             \"{{ \\\"type\\\": \\\"suite\\\", \\\n              \\\"event\\\": \\\"{}\\\", \\\n              \\\"passed\\\": {}, \\"}, {"sha": "7a40ce33cb741bd3866738a074fa2ee1a594874a", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -64,7 +64,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n         self.write_message(\"<testsuites>\")?;\n \n-        self.write_message(&*format!(\n+        self.write_message(&format!(\n             \"<testsuite name=\\\"test\\\" package=\\\"test\\\" id=\\\"0\\\" \\\n              errors=\\\"0\\\" \\\n              failures=\\\"{}\\\" \\\n@@ -73,12 +73,12 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n              >\",\n             state.failed, state.total, state.ignored\n         ))?;\n-        for (desc, result, duration) in std::mem::replace(&mut self.results, Vec::new()) {\n+        for (desc, result, duration) in std::mem::take(&mut self.results) {\n             let (class_name, test_name) = parse_class_name(&desc);\n             match result {\n                 TestResult::TrIgnored => { /* no-op */ }\n                 TestResult::TrFailed => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n@@ -90,19 +90,19 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 }\n \n                 TestResult::TrFailedMsg(ref m) => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n                         test_name,\n                         duration.as_secs_f64()\n                     ))?;\n-                    self.write_message(&*format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n+                    self.write_message(&format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n                 TestResult::TrTimedFail => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n@@ -114,15 +114,15 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 }\n \n                 TestResult::TrBench(ref b) => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"benchmark::{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\" />\",\n                         class_name, test_name, b.ns_iter_summ.sum\n                     ))?;\n                 }\n \n                 TestResult::TrOk => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n                         class_name,"}, {"sha": "247778e515f0dedd3f34840df9cdcae0c55bb2a3", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -134,7 +134,7 @@ impl<T: Write> PrettyFormatter<T> {\n \n         let mut results = Vec::new();\n         let mut stdouts = String::new();\n-        for &(ref f, ref stdout) in inputs {\n+        for (f, stdout) in inputs {\n             results.push(f.name.to_string());\n             if !stdout.is_empty() {\n                 stdouts.push_str(&format!(\"---- {} stdout ----\\n\", f.name));\n@@ -171,9 +171,9 @@ impl<T: Write> PrettyFormatter<T> {\n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n         if let Some(test_mode) = desc.test_mode() {\n-            self.write_plain(&format!(\"test {name} - {test_mode} ... \"))?;\n+            self.write_plain(format!(\"test {name} - {test_mode} ... \"))?;\n         } else {\n-            self.write_plain(&format!(\"test {name} ... \"))?;\n+            self.write_plain(format!(\"test {name} ... \"))?;\n         }\n \n         Ok(())\n@@ -188,7 +188,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n         } else {\n             String::new()\n         };\n-        self.write_plain(&format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n+        self.write_plain(format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n@@ -221,7 +221,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             TestResult::TrIgnored => self.write_ignored(desc.ignore_message)?,\n             TestResult::TrBench(ref bs) => {\n                 self.write_bench()?;\n-                self.write_plain(&format!(\": {}\", fmt_bench_samples(bs)))?;\n+                self.write_plain(format!(\": {}\", fmt_bench_samples(bs)))?;\n             }\n             TestResult::TrTimedFail => self.write_time_failed()?,\n         }\n@@ -231,7 +231,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.write_plain(&format!(\n+        self.write_plain(format!(\n             \"test {} has been running for over {} seconds\\n\",\n             desc.name,\n             time::TEST_WARN_TIMEOUT_S\n@@ -267,11 +267,11 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n         );\n \n-        self.write_plain(&s)?;\n+        self.write_plain(s)?;\n \n         if let Some(ref exec_time) = state.exec_time {\n             let time_str = format!(\"; finished in {exec_time}\");\n-            self.write_plain(&time_str)?;\n+            self.write_plain(time_str)?;\n         }\n \n         self.write_plain(\"\\n\\n\")?;"}, {"sha": "0837ab16905130c18cd6c5086af909075c3d8feb", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -70,7 +70,7 @@ impl<T: Write> TerseFormatter<T> {\n             // screen when dealing with line-buffered output (e.g., piping to\n             // `stamp` in the rust CI).\n             let out = format!(\" {}/{}\\n\", self.test_count + 1, self.total_test_count);\n-            self.write_plain(&out)?;\n+            self.write_plain(out)?;\n         }\n \n         self.test_count += 1;\n@@ -106,7 +106,7 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_plain(\"\\nsuccesses:\\n\")?;\n         let mut successes = Vec::new();\n         let mut stdouts = String::new();\n-        for &(ref f, ref stdout) in &state.not_failures {\n+        for (f, stdout) in &state.not_failures {\n             successes.push(f.name.to_string());\n             if !stdout.is_empty() {\n                 stdouts.push_str(&format!(\"---- {} stdout ----\\n\", f.name));\n@@ -132,7 +132,7 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_plain(\"\\nfailures:\\n\")?;\n         let mut failures = Vec::new();\n         let mut fail_out = String::new();\n-        for &(ref f, ref stdout) in &state.failures {\n+        for (f, stdout) in &state.failures {\n             failures.push(f.name.to_string());\n             if !stdout.is_empty() {\n                 fail_out.push_str(&format!(\"---- {} stdout ----\\n\", f.name));\n@@ -157,9 +157,9 @@ impl<T: Write> TerseFormatter<T> {\n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n         if let Some(test_mode) = desc.test_mode() {\n-            self.write_plain(&format!(\"test {name} - {test_mode} ... \"))?;\n+            self.write_plain(format!(\"test {name} - {test_mode} ... \"))?;\n         } else {\n-            self.write_plain(&format!(\"test {name} ... \"))?;\n+            self.write_plain(format!(\"test {name} ... \"))?;\n         }\n \n         Ok(())\n@@ -175,7 +175,7 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n         } else {\n             String::new()\n         };\n-        self.write_plain(&format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n+        self.write_plain(format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n@@ -209,13 +209,13 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n                     self.write_test_name(desc)?;\n                 }\n                 self.write_bench()?;\n-                self.write_plain(&format!(\": {}\\n\", fmt_bench_samples(bs)))\n+                self.write_plain(format!(\": {}\\n\", fmt_bench_samples(bs)))\n             }\n         }\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.write_plain(&format!(\n+        self.write_plain(format!(\n             \"test {} has been running for over {} seconds\\n\",\n             desc.name,\n             time::TEST_WARN_TIMEOUT_S\n@@ -245,11 +245,11 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n             state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n         );\n \n-        self.write_plain(&s)?;\n+        self.write_plain(s)?;\n \n         if let Some(ref exec_time) = state.exec_time {\n             let time_str = format!(\"; finished in {exec_time}\");\n-            self.write_plain(&time_str)?;\n+            self.write_plain(time_str)?;\n         }\n \n         self.write_plain(\"\\n\\n\")?;"}, {"sha": "30dc4ff855315d2c0f0bca55669d580e50d7f92e", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -789,7 +789,7 @@ fn run_test_in_spawned_subprocess(\n         }\n     });\n     let record_result2 = record_result.clone();\n-    panic::set_hook(Box::new(move |info| record_result2(Some(&info))));\n+    panic::set_hook(Box::new(move |info| record_result2(Some(info))));\n     if let Err(message) = testfn() {\n         panic!(\"{}\", message);\n     }"}, {"sha": "67ba89410cd9974ed2cee345279100e6e2e68254", "filename": "library/test/src/term/terminfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -149,7 +149,7 @@ impl<T: Write + Send> Terminal for TerminfoTerminal<T> {\n         // are there any terminals that have color/attrs and not sgr0?\n         // Try falling back to sgr, then op\n         let cmd = match [\"sgr0\", \"sgr\", \"op\"].iter().find_map(|cap| self.ti.strings.get(*cap)) {\n-            Some(op) => match expand(&op, &[], &mut Variables::new()) {\n+            Some(op) => match expand(op, &[], &mut Variables::new()) {\n                 Ok(cmd) => cmd,\n                 Err(e) => return Err(io::Error::new(io::ErrorKind::InvalidData, e)),\n             },\n@@ -180,12 +180,12 @@ impl<T: Write + Send> TerminfoTerminal<T> {\n     }\n \n     fn dim_if_necessary(&self, color: color::Color) -> color::Color {\n-        if color >= self.num_colors && color >= 8 && color < 16 { color - 8 } else { color }\n+        if color >= self.num_colors && (8..16).contains(&color) { color - 8 } else { color }\n     }\n \n     fn apply_cap(&mut self, cmd: &str, params: &[Param]) -> io::Result<bool> {\n         match self.ti.strings.get(cmd) {\n-            Some(cmd) => match expand(&cmd, params, &mut Variables::new()) {\n+            Some(cmd) => match expand(cmd, params, &mut Variables::new()) {\n                 Ok(s) => self.out.write_all(&s).and(Ok(true)),\n                 Err(e) => Err(io::Error::new(io::ErrorKind::InvalidData, e)),\n             },"}, {"sha": "2815f6cfc77fe5058d0c77d7bf7f5be27002faef", "filename": "library/test/src/term/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -282,14 +282,14 @@ pub(crate) fn expand(\n                 );\n             }\n             SetVar => {\n-                if cur >= 'A' && cur <= 'Z' {\n+                if cur.is_ascii_uppercase() {\n                     if let Some(arg) = stack.pop() {\n                         let idx = (cur as u8) - b'A';\n                         vars.sta_va[idx as usize] = arg;\n                     } else {\n                         return Err(\"stack is empty\".to_string());\n                     }\n-                } else if cur >= 'a' && cur <= 'z' {\n+                } else if cur.is_ascii_lowercase() {\n                     if let Some(arg) = stack.pop() {\n                         let idx = (cur as u8) - b'a';\n                         vars.dyn_va[idx as usize] = arg;\n@@ -301,10 +301,10 @@ pub(crate) fn expand(\n                 }\n             }\n             GetVar => {\n-                if cur >= 'A' && cur <= 'Z' {\n+                if cur.is_ascii_uppercase() {\n                     let idx = (cur as u8) - b'A';\n                     stack.push(vars.sta_va[idx as usize].clone());\n-                } else if cur >= 'a' && cur <= 'z' {\n+                } else if cur.is_ascii_lowercase() {\n                     let idx = (cur as u8) - b'a';\n                     stack.push(vars.dyn_va[idx as usize].clone());\n                 } else {"}, {"sha": "87b91f34498a37085fd81b98fbbe8e60f798e54f", "filename": "library/test/src/term/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fsearcher.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n \n     if let Ok(dirs) = env::var(\"TERMINFO_DIRS\") {\n         for i in dirs.split(':') {\n-            if i == \"\" {\n+            if i.is_empty() {\n                 dirs_to_search.push(PathBuf::from(\"/usr/share/terminfo\"));\n             } else {\n                 dirs_to_search.push(PathBuf::from(i));\n@@ -49,7 +49,7 @@ pub(crate) fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n     for mut p in dirs_to_search {\n         if fs::metadata(&p).is_ok() {\n             p.push(&first_char.to_string());\n-            p.push(&term);\n+            p.push(term);\n             if fs::metadata(&p).is_ok() {\n                 return Some(p);\n             }"}, {"sha": "1da238e3e8c0fbd3fd1b5e7cf89a04a95263fed6", "filename": "library/test/src/test_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftest_result.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -33,7 +33,7 @@ pub fn calc_result<'a>(\n ) -> TestResult {\n     let result = match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TestResult::TrOk,\n-        (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {\n+        (&ShouldPanic::YesWithMessage(msg), Err(err)) => {\n             let maybe_panic_str = err\n                 .downcast_ref::<String>()\n                 .map(|e| &**e)\n@@ -52,7 +52,7 @@ pub fn calc_result<'a>(\n                     r#\"expected panic with string value,\n  found non-string value: `{:?}`\n      expected substring: `{:?}`\"#,\n-                    (**err).type_id(),\n+                    (*err).type_id(),\n                     msg\n                 ))\n             }"}, {"sha": "6f2e033095a37b9a7baacd89d3d4d6aae6401448", "filename": "library/test/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "patch": "@@ -47,7 +47,7 @@ impl TestName {\n         match *self {\n             StaticTestName(s) => s,\n             DynTestName(ref s) => s,\n-            AlignedTestName(ref s, _) => &*s,\n+            AlignedTestName(ref s, _) => s,\n         }\n     }\n "}]}