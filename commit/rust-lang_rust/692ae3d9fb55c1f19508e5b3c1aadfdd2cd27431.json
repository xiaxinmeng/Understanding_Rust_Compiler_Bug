{"sha": "692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MmFlM2Q5ZmI1NWMxZjE5NTA4ZTViM2MxYWFkZmRkMmNkMjc0MzE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-28T21:07:15Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-02T02:24:43Z"}, "message": "Move has_panic_handler to query", "tree": {"sha": "8be420ad99291d66d3a1929eb9c9e5edf4604b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be420ad99291d66d3a1929eb9c9e5edf4604b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "html_url": "https://github.com/rust-lang/rust/commit/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "html_url": "https://github.com/rust-lang/rust/commit/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "18f0f129d37e7e8d449f05260258edd980bf8646", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "patch": "@@ -156,9 +156,6 @@ pub struct Session {\n     /// Metadata about the allocators for the current crate being compiled.\n     pub has_global_allocator: Once<bool>,\n \n-    /// Metadata about the panic handlers for the current crate being compiled.\n-    pub has_panic_handler: Once<bool>,\n-\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n@@ -1249,7 +1246,6 @@ fn build_session_(\n         print_fuel,\n         jobserver: jobserver::client(),\n         has_global_allocator: Once::new(),\n-        has_panic_handler: Once::new(),\n         driver_lint_caps,\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),"}, {"sha": "0906d9ebd8e7f06f6e465abb8004767970a8ef4a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "patch": "@@ -3045,4 +3045,9 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         attr::contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)\n     };\n+    providers.has_panic_handler = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        // We want to check if the panic handler was defined in this crate\n+        tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n+    };\n }"}, {"sha": "de00e9920e6835977190f27771fee2069874d98b", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "patch": "@@ -542,7 +542,6 @@ impl<'tcx> EncodeContext<'tcx> {\n         let attrs = tcx.hir().krate_attrs();\n         let has_default_lib_allocator = attr::contains_name(&attrs, sym::default_lib_allocator);\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n-        let has_panic_handler = *tcx.sess.has_panic_handler.try_get().unwrap_or(&false);\n \n         let root = self.lazy(CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n@@ -553,7 +552,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),\n             has_global_allocator: has_global_allocator,\n-            has_panic_handler: has_panic_handler,\n+            has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n             has_default_lib_allocator: has_default_lib_allocator,\n             plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_decls_static: if is_proc_macro {"}, {"sha": "0f53abaaf263e45acf94a4cbf50698fed9c20149", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "patch": "@@ -1267,11 +1267,6 @@ fn check_fn<'a, 'tcx>(\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n         if panic_impl_did == fcx.tcx.hir().local_def_id(fn_id) {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n-                // at this point we don't care if there are duplicate handlers or if the handler has\n-                // the wrong signature as this value we'll be used when writing metadata and that\n-                // only happens if compilation succeeded\n-                fcx.tcx.sess.has_panic_handler.try_set_same(true);\n-\n                 if declared_ret_ty.kind != ty::Never {\n                     fcx.tcx.sess.span_err(\n                         decl.output.span(),"}]}