{"sha": "3f499a97e43b9f1cd23233de542419921ea4b6d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNDk5YTk3ZTQzYjlmMWNkMjMyMzNkZTU0MjQxOTkyMWVhNGI2ZDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T08:10:17Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "parser/ty.rs: minor formatting tweaks", "tree": {"sha": "ee8652bae46d9cb0cf4d8338fb22fdb22ccafb70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8652bae46d9cb0cf4d8338fb22fdb22ccafb70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f499a97e43b9f1cd23233de542419921ea4b6d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f499a97e43b9f1cd23233de542419921ea4b6d0", "html_url": "https://github.com/rust-lang/rust/commit/3f499a97e43b9f1cd23233de542419921ea4b6d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f499a97e43b9f1cd23233de542419921ea4b6d0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1fab8c1f0ef78d90fd27d8ec0e6950c050d259", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1fab8c1f0ef78d90fd27d8ec0e6950c050d259", "html_url": "https://github.com/rust-lang/rust/commit/3b1fab8c1f0ef78d90fd27d8ec0e6950c050d259"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "a4c1f530ef8f299f4361c05f61cd8668e99d0076", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3f499a97e43b9f1cd23233de542419921ea4b6d0/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f499a97e43b9f1cd23233de542419921ea4b6d0/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=3f499a97e43b9f1cd23233de542419921ea4b6d0", "patch": "@@ -183,8 +183,13 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_remaining_bounds(&mut self, generic_params: Vec<GenericParam>, path: ast::Path,\n-                              lo: Span, parse_plus: bool) -> PResult<'a, TyKind> {\n+    fn parse_remaining_bounds(\n+        &mut self,\n+        generic_params: Vec<GenericParam>,\n+        path: ast::Path,\n+        lo: Span,\n+        parse_plus: bool,\n+    ) -> PResult<'a, TyKind> {\n         let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n         let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n@@ -338,8 +343,10 @@ impl<'a> Parser<'a> {\n         .emit();\n     }\n \n-    pub(super) fn parse_generic_bounds(&mut self,\n-                                  colon_span: Option<Span>) -> PResult<'a, GenericBounds> {\n+    pub(super) fn parse_generic_bounds(\n+        &mut self,\n+        colon_span: Option<Span>,\n+    ) -> PResult<'a, GenericBounds> {\n         self.parse_generic_bounds_common(true, colon_span)\n     }\n \n@@ -351,20 +358,24 @@ impl<'a> Parser<'a> {\n     /// TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n     /// TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g., `?for<'a: 'b> m::Trait<'a>`)\n     /// ```\n-    fn parse_generic_bounds_common(&mut self,\n-                                   allow_plus: bool,\n-                                   colon_span: Option<Span>) -> PResult<'a, GenericBounds> {\n+    fn parse_generic_bounds_common(\n+        &mut self,\n+        allow_plus: bool,\n+        colon_span: Option<Span>,\n+    ) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n         let mut last_plus_span = None;\n         let mut was_negative = false;\n         loop {\n             // This needs to be synchronized with `TokenKind::can_begin_bound`.\n-            let is_bound_start = self.check_path() || self.check_lifetime() ||\n-                                 self.check(&token::Not) || // used for error reporting only\n-                                 self.check(&token::Question) ||\n-                                 self.check_keyword(kw::For) ||\n-                                 self.check(&token::OpenDelim(token::Paren));\n+            let is_bound_start = self.check_path()\n+                || self.check_lifetime()\n+                || self.check(&token::Not) // Used for error reporting only.\n+                || self.check(&token::Question)\n+                || self.check_keyword(kw::For)\n+                || self.check(&token::OpenDelim(token::Paren));\n+\n             if is_bound_start {\n                 let lo = self.token.span;\n                 let has_parens = self.eat(&token::OpenDelim(token::Paren));"}]}