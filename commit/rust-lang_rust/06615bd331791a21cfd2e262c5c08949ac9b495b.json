{"sha": "06615bd331791a21cfd2e262c5c08949ac9b495b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NjE1YmQzMzE3OTFhMjFjZmQyZTI2MmM1YzA4OTQ5YWM5YjQ5NWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T20:20:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T22:10:07Z"}, "message": "more intuitive name", "tree": {"sha": "7537a542fe19d5d0f6cb83e876899cf6b75b86df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7537a542fe19d5d0f6cb83e876899cf6b75b86df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06615bd331791a21cfd2e262c5c08949ac9b495b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06615bd331791a21cfd2e262c5c08949ac9b495b", "html_url": "https://github.com/rust-lang/rust/commit/06615bd331791a21cfd2e262c5c08949ac9b495b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06615bd331791a21cfd2e262c5c08949ac9b495b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "html_url": "https://github.com/rust-lang/rust/commit/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "1fac0b14a25941fc303f88e5238051d21aeba0de", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/06615bd331791a21cfd2e262c5c08949ac9b495b/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06615bd331791a21cfd2e262c5c08949ac9b495b/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=06615bd331791a21cfd2e262c5c08949ac9b495b", "patch": "@@ -27,8 +27,12 @@ pub fn set_filter(f: Filter) {\n     PROFILING_ENABLED.store(f.depth > 0, Ordering::SeqCst);\n     let set = HashSet::from_iter(f.allowed.iter().cloned());\n     let mut old = FILTER.write().unwrap();\n-    let filter_data =\n-        FilterData { depth: f.depth, allowed: set, cutoff: f.cutoff, version: old.version + 1 };\n+    let filter_data = FilterData {\n+        depth: f.depth,\n+        allowed: set,\n+        longer_than: f.longer_than,\n+        version: old.version + 1,\n+    };\n     *old = filter_data;\n }\n \n@@ -102,7 +106,7 @@ pub struct Profiler {\n pub struct Filter {\n     depth: usize,\n     allowed: Vec<String>,\n-    cutoff: Duration,\n+    longer_than: Duration,\n }\n \n impl Filter {\n@@ -111,10 +115,10 @@ impl Filter {\n     // env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n     // env RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n     pub fn from_spec(mut spec: &str) -> Filter {\n-        let cutoff = if let Some(idx) = spec.rfind(\">\") {\n-            let cutoff = spec[idx + 1..].parse().expect(\"invalid profile cutoff\");\n+        let longer_than = if let Some(idx) = spec.rfind(\">\") {\n+            let longer_than = spec[idx + 1..].parse().expect(\"invalid profile longer_than\");\n             spec = &spec[..idx];\n-            Duration::from_millis(cutoff)\n+            Duration::from_millis(longer_than)\n         } else {\n             Duration::new(0, 0)\n         };\n@@ -128,15 +132,15 @@ impl Filter {\n         };\n         let allowed =\n             if spec == \"*\" { Vec::new() } else { spec.split(\"|\").map(String::from).collect() };\n-        Filter::new(depth, allowed, cutoff)\n+        Filter::new(depth, allowed, longer_than)\n     }\n \n     pub fn disabled() -> Filter {\n         Filter::new(0, Vec::new(), Duration::new(0, 0))\n     }\n \n-    pub fn new(depth: usize, allowed: Vec<String>, cutoff: Duration) -> Filter {\n-        Filter { depth, allowed, cutoff }\n+    pub fn new(depth: usize, allowed: Vec<String>, longer_than: Duration) -> Filter {\n+        Filter { depth, allowed, longer_than }\n     }\n }\n \n@@ -163,7 +167,7 @@ struct FilterData {\n     depth: usize,\n     version: usize,\n     allowed: HashSet<String>,\n-    cutoff: Duration,\n+    longer_than: Duration,\n }\n \n static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n@@ -187,7 +191,7 @@ impl Drop for Profiler {\n                     stack.messages.push(Message { level, duration, message });\n                     if level == 0 {\n                         let stdout = stderr();\n-                        if duration >= stack.filter_data.cutoff {\n+                        if duration >= stack.filter_data.longer_than {\n                             print(0, &stack.messages, &mut stdout.lock());\n                         }\n                         stack.messages.clear();"}]}