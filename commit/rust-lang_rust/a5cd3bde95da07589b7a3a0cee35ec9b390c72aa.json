{"sha": "a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "node_id": "C_kwDOAAsO6NoAKGE1Y2QzYmRlOTVkYTA3NTg5YjdhM2EwY2VlMzVlYzliMzkwYzcyYWE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T11:07:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T15:36:39Z"}, "message": "Ensure no one constructs `AliasTy`s themselves", "tree": {"sha": "62a361e93cb91129b890e39964a2231902fcd102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62a361e93cb91129b890e39964a2231902fcd102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "html_url": "https://github.com/rust-lang/rust/commit/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ffe3bdf992d2d9eebca9efc3fb3a240724a9fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ffe3bdf992d2d9eebca9efc3fb3a240724a9fb3", "html_url": "https://github.com/rust-lang/rust/commit/4ffe3bdf992d2d9eebca9efc3fb3a240724a9fb3"}], "stats": {"total": 210, "additions": 104, "deletions": 106}, "files": [{"sha": "72c0257756ef2f15d1adfdc8f47a2e143ced6ccc", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -697,7 +697,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     .map_bound(|p| p.predicates),\n                 None,\n             ),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 find_fn_kind_from_did(tcx.bound_explicit_item_bounds(*def_id), Some(*substs))\n             }\n             ty::Closure(_, substs) => match substs.as_closure().kind() {"}, {"sha": "f8ec5e5e799149c888e001dd4ddc1b488847c8d2", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -504,7 +504,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n \n         let mut output_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n-        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = *output_ty.kind() {\n+        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *output_ty.kind() {\n             output_ty = self.infcx.tcx.type_of(def_id)\n         };\n "}, {"sha": "bb897b95b2c53cd1122663b41945764ccd354960", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 };\n \n                 let kind = match parent_ty.ty.kind() {\n-                    &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+                    &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                         self.tcx.bound_type_of(def_id).subst(self.tcx, substs).kind()\n                     }\n                     kind => kind,"}, {"sha": "c4122f66498143a70950219d6afb696c91d58f40", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             // Types with identity (print the module path).\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs })\n+            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "26e6ed205d57e7d0f9ccd1426bc87739074a7402", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -1440,7 +1440,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n                 impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n-                            ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, substs: _ }) => {\n+                            ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n                                 self.0.push(def);\n                                 ControlFlow::CONTINUE\n                             }"}, {"sha": "263d8deb9b48a03c61dab116c8c4d30a15db4dd3", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -111,7 +111,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {\n-                ty::Alias(_, ty::AliasTy { def_id, substs })\n+                ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n                     if matches!(\n                         self.tcx.def_kind(*def_id),\n                         DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n@@ -169,7 +169,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n                 }\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(ty::ProjectionPredicate {\n-                projection_ty: ty::AliasTy { substs, def_id: _ },\n+                projection_ty: ty::AliasTy { substs, .. },\n                 term,\n             })) => {\n                 for subst in &substs[1..] {"}, {"sha": "ab12cae4e2b08a0b48fc57e8b687f841b7b59509", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -518,7 +518,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 let substs = sig.output().walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                        && let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) = *ty.kind()\n+                        && let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) = *ty.kind()\n                         && def_id == rpit_def_id\n                     {\n                         Some(substs)"}, {"sha": "72d8a936ab39db2adcc5b8f4970fcdc705b638ba", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty: Ty<'tcx>,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         match *expected_ty.kind() {\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => self\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .deduce_signature_from_predicates(\n                     self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n                 ),\n@@ -678,7 +678,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     get_future_output(obligation.predicate, obligation.cause.span)\n                 })?\n             }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => self\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .tcx\n                 .bound_explicit_item_bounds(def_id)\n                 .subst_iter_copied(self.tcx, substs)"}, {"sha": "36cf4791492dd1c8c8b36d1125289dc008cb3fed", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -1805,7 +1805,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);\n             // Get the `impl Trait`'s `DefId`.\n-            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = ty.kind()\n+            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind()\n                 // Get the `impl Trait`'s `Item` so that we can get its trait bounds and\n                 // get the `Trait`'s `DefId`.\n                 && let hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }) ="}, {"sha": "866090260b2723dad6ef078f500805ab69b7d46c", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -2391,7 +2391,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Param(param_ty) => {\n                 self.point_at_param_definition(&mut err, param_ty);\n             }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id: _, substs: _ }) => {\n+            ty::Alias(ty::Opaque, _) => {\n                 self.suggest_await_on_field_access(&mut err, ident, base, base_ty.peel_refs());\n             }\n             _ => {}"}, {"sha": "1a4e6bf763821b05ee33737dc392ef35d145eb8a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -716,7 +716,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if formal_ret.has_infer_types() {\n             for ty in ret_ty.walk() {\n                 if let ty::subst::GenericArgKind::Type(ty) = ty.unpack()\n-                    && let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = *ty.kind()\n+                    && let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *ty.kind()\n                     && let Some(def_id) = def_id.as_local()\n                     && self.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n                     return None;"}, {"sha": "6f0e8eb9039a56e24f302f17ddc3e3edab2366f5", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -2124,7 +2124,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id: new_def_id, substs: _ })\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id: new_def_id, .. })\n                 | ty::Closure(new_def_id, _)\n                 | ty::FnDef(new_def_id, _) => {\n                     def_id = new_def_id;"}, {"sha": "55798f281fb983956ecee987c5f220ad4c31919a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let fn_sig = substs.as_closure().sig();\n                     Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().map_bound(|inputs| &inputs[1..])))\n                 }\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                     self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                         if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                         && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()"}, {"sha": "93f2ceed777b5be20bda25798be7d198ef998950", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -563,7 +563,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         }\n         ty::Adt(def, _) => check_must_not_suspend_def(fcx.tcx, def.did(), hir_id, data),\n         // FIXME: support adding the attribute to TAITs\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, substs: _ }) => {\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n             for &(predicate, _) in fcx.tcx.explicit_item_bounds(def) {\n                 // We only look at the `DefId`, so it is safe to skip the binder here."}, {"sha": "bb956ddc780423876eca53ec2fc209aaed365aa8", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -546,7 +546,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = *t.kind() {\n+                    if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *t.kind() {\n                         if def_id == self.def_id.to_def_id() {\n                             return ControlFlow::Break(());\n                         }"}, {"sha": "9a1c49c1aa6af24feb4625f718fc2a29acbdc2aa", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -675,7 +675,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 // relatable.\n                 Ok(t)\n             }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 let s = self.relate(substs, substs)?;\n                 Ok(if s == substs { t } else { self.infcx.tcx.mk_opaque(def_id, s) })\n             }"}, {"sha": "46e7813d99e562cd1cff9b39b0224eaa75048fb1", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -101,13 +101,13 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n             }\n \n             (\n-                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, substs: _ }),\n-                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: _ }),\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, .. }),\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, .. }),\n             ) if a_def_id == b_def_id => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;\n             }\n-            (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }), _)\n-            | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }))\n+            (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }), _)\n+            | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }))\n                 if self.fields.define_opaque_types && def_id.is_local() =>\n             {\n                 self.fields.obligations.extend("}, {"sha": "397fa43175f732b3d87e566678388b0fbcd342d8", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -339,7 +339,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         let (def_id, substs) = match *ty.kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs })\n+            ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n                 if matches!(\n                     self.tcx.def_kind(def_id),\n                     DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n@@ -2767,9 +2767,7 @@ impl TyCategory {\n     pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => {\n-                Some((Self::Opaque, def_id))\n-            }\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => Some((Self::Opaque, def_id)),\n             ty::Generator(def_id, ..) => {\n                 Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n             }"}, {"sha": "30ca9f41d6e6f8d73830b5c2b98150ee61e5dd05", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -487,12 +487,12 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 StatementAsExpression::CorrectType\n             }\n             (\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id: last_def_id, substs: _ }),\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id: exp_def_id, substs: _ }),\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id: last_def_id, .. }),\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id: exp_def_id, .. }),\n             ) if last_def_id == exp_def_id => StatementAsExpression::CorrectType,\n             (\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id: last_def_id, substs: last_bounds }),\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id: exp_def_id, substs: exp_bounds }),\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id: last_def_id, substs: last_bounds, .. }),\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id: exp_def_id, substs: exp_bounds, .. }),\n             ) => {\n                 debug!(\n                     \"both opaque, likely future {:?} {:?} {:?} {:?}\","}, {"sha": "0ebc6d55bcba952678c86e6ff3c1dba91d8a11bd", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -106,11 +106,11 @@ where\n         }\n \n         (\n-            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, substs: _ }),\n-            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: _ }),\n+            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, .. }),\n+            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, .. }),\n         ) if a_def_id == b_def_id => infcx.super_combine_tys(this, a, b),\n-        (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }), _)\n-        | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }))\n+        (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }), _)\n+        | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }))\n             if this.define_opaque_types() && def_id.is_local() =>\n         {\n             this.add_obligations("}, {"sha": "1f9d86a78d6e50912f7cc3dba6e0b006391a33aa", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -611,17 +611,17 @@ where\n             (&ty::Infer(ty::TyVar(vid)), _) => self.relate_ty_var((vid, b)),\n \n             (\n-                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, substs: _ }),\n-                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: _ }),\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, .. }),\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, .. }),\n             ) if a_def_id == b_def_id => infcx.super_combine_tys(self, a, b).or_else(|err| {\n                 self.tcx().sess.delay_span_bug(\n                     self.delegate.span(),\n                     \"failure to relate an opaque to itself should result in an error later on\",\n                 );\n                 if a_def_id.is_local() { self.relate_opaques(a, b) } else { Err(err) }\n             }),\n-            (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }), _)\n-            | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }))\n+            (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }), _)\n+            | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }))\n                 if def_id.is_local() =>\n             {\n                 self.relate_opaques(a, b)"}, {"sha": "a130fde47ed5c4d7c0ccdae1536387b649f7cc1b", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,\n             ty_op: |ty| match *ty.kind() {\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ })\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. })\n                     if replace_opaque_type(def_id) =>\n                 {\n                     let def_span = self.tcx.def_span(def_id);\n@@ -106,7 +106,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n         let process = |a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected| match *a.kind() {\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) if def_id.is_local() => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) if def_id.is_local() => {\n                 let def_id = def_id.expect_local();\n                 let origin = match self.defining_use_anchor {\n                     DefiningAnchor::Bind(_) => {\n@@ -149,9 +149,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     DefiningAnchor::Bubble => self.opaque_ty_origin_unchecked(def_id, cause.span),\n                     DefiningAnchor::Error => return None,\n                 };\n-                if let ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: _ }) =\n-                    *b.kind()\n-                {\n+                if let ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, .. }) = *b.kind() {\n                     // We could accept this, but there are various ways to handle this situation, and we don't\n                     // want to make a decision on it right now. Likely this case is so super rare anyway, that\n                     // no one encounters it in practice.\n@@ -480,7 +478,7 @@ where\n                 substs.as_generator().resume_ty().visit_with(self);\n             }\n \n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, ref substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, ref substs, .. }) => {\n                 // Skip lifetime paramters that are not captures.\n                 let variances = self.tcx.variances_of(*def_id);\n \n@@ -583,17 +581,16 @@ impl<'tcx> InferCtxt<'tcx> {\n                     }\n                     // Replace all other mentions of the same opaque type with the hidden type,\n                     // as the bounds must hold on the hidden type after all.\n-                    ty::Alias(ty::Opaque, ty::AliasTy { def_id: def_id2, substs: substs2 })\n+                    ty::Alias(ty::Opaque, ty::AliasTy { def_id: def_id2, substs: substs2, .. })\n                         if def_id.to_def_id() == def_id2 && substs == substs2 =>\n                     {\n                         hidden_ty\n                     }\n                     // FIXME(RPITIT): This can go away when we move to associated types\n-                    ty::Alias(ty::Projection, ty::AliasTy { def_id: def_id2, substs: substs2 })\n-                        if def_id.to_def_id() == def_id2 && substs == substs2 =>\n-                    {\n-                        hidden_ty\n-                    }\n+                    ty::Alias(\n+                        ty::Projection,\n+                        ty::AliasTy { def_id: def_id2, substs: substs2, .. },\n+                    ) if def_id.to_def_id() == def_id2 && substs == substs2 => hidden_ty,\n                     _ => ty,\n                 },\n                 lt_op: |lt| lt,"}, {"sha": "aa2b5d067d266d8742c322ea147ffe5bc4905442", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -130,7 +130,7 @@ fn compute_components<'tcx>(\n             // outlives any other lifetime, which is unsound.\n             // See https://github.com/rust-lang/rust/issues/84305 for\n             // more details.\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 out.push(Component::Opaque(def_id, substs));\n             },\n "}, {"sha": "ccae7165d80d2fac9d859c26b64031742bcbd244", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -338,7 +338,7 @@ where\n             substs,\n             true,\n             |ty| match *ty.kind() {\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => (def_id, substs),\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n             },\n         );"}, {"sha": "bd38b52ba34a7eab0fbcbae019d94d58dd0d2c40", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -131,14 +131,14 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n             }\n \n             (\n-                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, substs: _ }),\n-                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: _ }),\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, .. }),\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, .. }),\n             ) if a_def_id == b_def_id => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;\n                 Ok(a)\n             }\n-            (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }), _)\n-            | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }))\n+            (&ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }), _)\n+            | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }))\n                 if self.fields.define_opaque_types && def_id.is_local() =>\n             {\n                 self.fields.obligations.extend("}, {"sha": "42442cfb1904d4ddfdd621d53b156e62ec1186f2", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                     // then we can emit a suggestion to add the bound.\n                     let add_bound = match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n                         (\n-                            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }),\n+                            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }),\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)),\n                         ) => Some(AddBound {\n                             suggest_span: cx.tcx.def_span(*def_id).shrink_to_hi(),"}, {"sha": "d628a18dd01c5875c36e5ad8bebb8940b8f89cc6", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n \n         if let hir::ExprKind::Match(await_expr, _arms, hir::MatchSource::AwaitDesugar) = expr.kind\n             && let ty = cx.typeck_results().expr_ty(&await_expr)\n-            && let ty::Alias(ty::Opaque, ty::AliasTy { def_id: future_def_id, substs: _ }) = ty.kind()\n+            && let ty::Alias(ty::Opaque, ty::AliasTy { def_id: future_def_id, .. }) = ty.kind()\n             && cx.tcx.ty_is_opaque_future(ty)\n             // FIXME: This also includes non-async fns that return `impl Future`.\n             && let async_fn_def_id = cx.tcx.parent(*future_def_id)\n@@ -251,7 +251,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         .map(|inner| MustUsePath::Boxed(Box::new(inner)))\n                 }\n                 ty::Adt(def, _) => is_def_must_use(cx, def.did(), span),\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, substs: _ }) => {\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n                     elaborate_predicates_with_span(\n                         cx.tcx,\n                         cx.tcx.explicit_item_bounds(def).iter().cloned(),"}, {"sha": "c220814d4fdf60c404212658b423401f67612333", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -2321,7 +2321,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Given a `ty`, return whether it's an `impl Future<...>`.\n     pub fn ty_is_opaque_future(self, ty: Ty<'_>) -> bool {\n-        let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = ty.kind() else { return false };\n+        let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n         self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n@@ -2673,7 +2673,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Alias(ty::Opaque, ty::AliasTy { def_id, substs }))\n+        self.mk_ty(Alias(ty::Opaque, self.mk_alias_ty(def_id, substs)))\n     }\n \n     pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n@@ -2888,7 +2888,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             substs.collect::<Vec<_>>(),\n         );\n         let substs = self.mk_substs(substs);\n-        ty::AliasTy { def_id, substs }\n+        ty::AliasTy { def_id, substs, _use_mk_alias_ty_instead: () }\n     }\n \n     pub fn mk_bound_variable_kinds<"}, {"sha": "d8d476d3fefe24e190095c86eaa88c0da0ad6e62", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -457,10 +457,10 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 return ControlFlow::Break(());\n             }\n \n-            Alias(Opaque, AliasTy { def_id, substs: _ }) => {\n+            Alias(Opaque, AliasTy { def_id, .. }) => {\n                 let parent = self.tcx.parent(*def_id);\n                 if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = self.tcx.def_kind(parent)\n-                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, substs: _ }) = self.tcx.type_of(parent).kind()\n+                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = self.tcx.type_of(parent).kind()\n                     && parent_opaque_def_id == def_id\n                 {\n                     // Okay"}, {"sha": "14d07608a780e6c5b33b6dbae204401251b39088", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -779,8 +779,7 @@ fn foo(&self) -> Self::T { String::new() }\n         ty: Ty<'tcx>,\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.def_id);\n-        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = *proj_ty.self_ty().kind()\n-        {\n+        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n                 match &self.hir().expect_item(opaque_local_def_id).kind {"}, {"sha": "d283ccc3ad8a29435035c2c6bc4fc1fe9b0b3454", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -160,7 +160,7 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n-            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: _, substs }) => {\n+            &ty::Alias(ty::Opaque, ty::AliasTy { substs, .. }) => {\n                 self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n                 self.add_substs(substs);\n             }"}, {"sha": "b1bc6eb8b81c5351029382a88dec5fe2b4292728", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -728,7 +728,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 // FIXME(eddyb) print this with `print_def_path`.\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n                 // avoid needing to call `predicates_of`. This should\n@@ -743,7 +743,7 @@ pub trait PrettyPrinter<'tcx>:\n                 let parent = self.tcx().parent(def_id);\n                 match self.tcx().def_kind(parent) {\n                     DefKind::TyAlias | DefKind::AssocTy => {\n-                        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id: d, substs: _ }) =\n+                        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id: d, .. }) =\n                             *self.tcx().type_of(parent).kind()\n                         {\n                             if d == def_id {"}, {"sha": "b39a7a323455a86e17cf2bf5730cbd8f52d48ee9", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -557,8 +557,8 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         }\n \n         (\n-            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, substs: a_substs }),\n-            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: b_substs }),\n+            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, substs: a_substs, .. }),\n+            &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: b_substs, .. }),\n         ) if a_def_id == b_def_id => {\n             if relation.intercrate() {\n                 // During coherence, opaque types should be treated as equal to each other, even if their generic params"}, {"sha": "0e4e792a982f33ac5a0e031f539e1ae9f974df4c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -1166,6 +1166,10 @@ pub struct AliasTy<'tcx> {\n     /// `TraitRef` containing this associated type, which is in `tcx.associated_item(def_id).container`,\n     /// aka. `tcx.parent(def_id)`.\n     pub def_id: DefId,\n+\n+    /// This field exists to prevent the creation of `ProjectionTy` without using\n+    /// [TyCtxt::mk_projection_ty].\n+    pub(super) _use_mk_alias_ty_instead: (),\n }\n \n impl<'tcx> AliasTy<'tcx> {"}, {"sha": "857f52c8a245612ddc9d164207681e8c15a7f4aa", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -825,7 +825,7 @@ impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) = *t.kind() {\n+        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) = *t.kind() {\n             self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n         } else if t.has_opaque_types() {\n             t.super_fold_with(self)"}, {"sha": "9d560f5c837e2d75e75f6899d65199bdef8fe710", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -849,7 +849,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n             };\n \n             let kind = match parent_ty.ty.kind() {\n-                &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                     self.tcx.bound_type_of(def_id).subst(self.tcx, substs).kind()\n                 }\n                 kind => kind,"}, {"sha": "cbe11ee6ac2ddf787cdc58187de0ed95df35db91", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -235,7 +235,7 @@ where\n                     self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref)?;\n                 }\n             }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n                 // Skip repeated `Opaque`s to avoid infinite recursion.\n                 if self.visited_opaque_tys.insert(def_id) {\n                     // The intent is to treat `impl Trait1 + Trait2` identically to"}, {"sha": "a59c9011ab21a4116e4452b206392781e0ab0e25", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -216,7 +216,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs })\n+            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n "}, {"sha": "4285aa62cb96307991169be15b067839e36c2686", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -439,7 +439,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // Mangle all nominal types as paths.\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs })\n+            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;"}, {"sha": "dd5085bf4f300d029f779b55f909eb5ae4e500bf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -878,7 +878,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     fn_sig.inputs().map_bound(|inputs| &inputs[1..]),\n                 ))\n             }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                     if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                     && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n@@ -2662,7 +2662,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 Some(ident) => err.span_note(ident.span, &msg),\n                                 None => err.note(&msg),\n                             },\n-                            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => {\n+                            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n                                 // Avoid printing the future from `core::future::identity_future`, it's not helpful\n                                 if tcx.parent(*def_id) == identity_future {\n                                     break 'print;"}, {"sha": "160bf5e76e3766788bd92029382e6a42dd8b375d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -496,7 +496,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs })\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. })\n                 if !substs.has_escaping_bound_vars() =>\n             {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen."}, {"sha": "c6ef13e185b2d7526e6870397a3932e451e6a49c", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -205,7 +205,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs })\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. })\n                 if !substs.has_escaping_bound_vars() =>\n             {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen."}, {"sha": "f6fe71fbd4f889ce18c08f0c08b890b4939363c1", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -155,7 +155,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs }) => (def_id, substs),\n+            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n "}, {"sha": "792933096b15c61a731b3a2e1cee0d87c1347926", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -1595,7 +1595,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs }) => (def_id, substs),\n+            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -2259,7 +2259,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())\n             }\n \n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 // We can resolve the `impl Trait` to its concrete type,\n                 // which enforces a DAG between the functions requiring\n                 // the auto trait bounds in question."}, {"sha": "a995eeb9a7afb8841b5539440c9df059dfd49484", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -648,7 +648,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                     // types appearing in the fn signature\n                 }\n \n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                     // All of the requirements on type parameters\n                     // have already been checked for `impl Trait` in\n                     // return position. We do need to check type-alias-impl-trait though."}, {"sha": "bc4a52c5040d1fa5f2647d6acd6c7105a814009c", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -433,7 +433,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     }\n                 }\n                 (\n-                    &ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }),\n+                    &ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }),\n                     OpaqueType(opaque_ty_id, ..),\n                 ) => def_id == opaque_ty_id.0,\n                 (&ty::FnDef(def_id, ..), FnDef(fn_def_id, ..)) => def_id == fn_def_id.0,\n@@ -789,7 +789,7 @@ impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) = *ty.kind() {\n+        if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) = *ty.kind() {\n             if def_id == self.opaque_ty_id.0 && substs == self.identity_substs {\n                 return self.tcx.mk_ty(ty::Bound(\n                     self.binder_index,"}, {"sha": "9712abb708f2762c61c6c2b0b922e642c681fb83", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -347,13 +347,13 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Tuple(types) => {\n                 chalk_ir::TyKind::Tuple(types.len(), types.as_substs().lower_into(interner))\n             }\n-            ty::Alias(ty::Projection, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Projection, ty::AliasTy { def_id, substs, .. }) => {\n                 chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n                     associated_ty_id: chalk_ir::AssocTypeId(def_id),\n                     substitution: substs.lower_into(interner),\n                 }))\n             }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n                     opaque_ty_id: chalk_ir::OpaqueTyId(def_id),\n                     substitution: substs.lower_into(interner),\n@@ -443,11 +443,11 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             TyKind::Str => ty::Str,\n             TyKind::OpaqueType(opaque_ty, substitution) => ty::Alias(\n                 ty::Opaque,\n-                ty::AliasTy { def_id: opaque_ty.0, substs: substitution.lower_into(interner) },\n+                interner.tcx.mk_alias_ty(opaque_ty.0, substitution.lower_into(interner)),\n             ),\n             TyKind::AssociatedType(assoc_ty, substitution) => ty::Alias(\n                 ty::Projection,\n-                ty::AliasTy { substs: substitution.lower_into(interner), def_id: assoc_ty.0 },\n+                interner.tcx.mk_alias_ty(assoc_ty.0, substitution.lower_into(interner)),\n             ),\n             TyKind::Foreign(def_id) => ty::Foreign(def_id.0),\n             TyKind::Error => return interner.tcx.ty_error(),\n@@ -458,17 +458,17 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             TyKind::Alias(alias_ty) => match alias_ty {\n                 chalk_ir::AliasTy::Projection(projection) => ty::Alias(\n                     ty::Projection,\n-                    ty::AliasTy {\n-                        def_id: projection.associated_ty_id.0,\n-                        substs: projection.substitution.lower_into(interner),\n-                    },\n+                    interner.tcx.mk_alias_ty(\n+                        projection.associated_ty_id.0,\n+                        projection.substitution.lower_into(interner),\n+                    ),\n                 ),\n                 chalk_ir::AliasTy::Opaque(opaque) => ty::Alias(\n                     ty::Opaque,\n-                    ty::AliasTy {\n-                        def_id: opaque.opaque_ty_id.0,\n-                        substs: opaque.substitution.lower_into(interner),\n-                    },\n+                    interner.tcx.mk_alias_ty(\n+                        opaque.opaque_ty_id.0,\n+                        opaque.substitution.lower_into(interner),\n+                    ),\n                 ),\n             },\n             TyKind::Function(_quantified_ty) => unimplemented!(),"}, {"sha": "92886bbfe26b4e5d03953f9eb3362bfe03bd3ae9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -1835,7 +1835,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             }\n         }\n \n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n             // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n             // by looking up the bounds associated with the def_id.\n             let bounds = cx"}, {"sha": "989f83cf80d5972301fc06eef9604796f674a7b8", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             return;\n         }\n         let ret_ty = return_ty(cx, hir_id);\n-        if let ty::Alias(ty::Opaque, AliasTy { def_id, substs }) = *ret_ty.kind() {\n+        if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for &(p, _span) in preds {"}, {"sha": "a6bcb134d408096099ddd5d13263a68e28688fa1", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "patch": "@@ -79,7 +79,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                 return true;\n             }\n \n-            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = *inner_ty.kind() {\n+            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *inner_ty.kind() {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     match predicate.kind().skip_binder() {\n                         // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -250,7 +250,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => {\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n@@ -631,7 +631,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -1039,10 +1039,10 @@ pub fn make_projection<'tcx>(\n             }\n         }\n \n-        Some(AliasTy {\n+        Some(tcx.mk_alias_ty(\n+            assoc_item.def_id,\n             substs,\n-            def_id: assoc_item.def_id,\n-        })\n+        ))\n     }\n     helper(\n         tcx,"}]}