{"sha": "f16d27aca48454fc3a05a477b20ba5264a740b14", "node_id": "C_kwDOAAsO6NoAKGYxNmQyN2FjYTQ4NDU0ZmMzYTA1YTQ3N2IyMGJhNTI2NGE3NDBiMTQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T01:48:22Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T01:48:22Z"}, "message": "Remove expect_reg", "tree": {"sha": "4f7a0b0bd62813189468be755cca9a6209d20fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f7a0b0bd62813189468be755cca9a6209d20fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16d27aca48454fc3a05a477b20ba5264a740b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16d27aca48454fc3a05a477b20ba5264a740b14", "html_url": "https://github.com/rust-lang/rust/commit/f16d27aca48454fc3a05a477b20ba5264a740b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16d27aca48454fc3a05a477b20ba5264a740b14/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "042eb37837bd36eb44bd928de19bd7bc97888ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/042eb37837bd36eb44bd928de19bd7bc97888ace", "html_url": "https://github.com/rust-lang/rust/commit/042eb37837bd36eb44bd928de19bd7bc97888ace"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "771f3056ec2f65f408f0a482d44bb401da654190", "filename": "src/inline_asm.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f16d27aca48454fc3a05a477b20ba5264a740b14/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16d27aca48454fc3a05a477b20ba5264a740b14/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=f16d27aca48454fc3a05a477b20ba5264a740b14", "patch": "@@ -42,8 +42,10 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         assert_eq!(operands.len(), 4);\n         let (leaf, eax_place) = match operands[1] {\n             InlineAsmOperand::InOut { reg, late: true, ref in_value, out_place } => {\n-                let reg = expect_reg(reg);\n-                assert_eq!(reg, InlineAsmReg::X86(X86InlineAsmReg::ax));\n+                assert_eq!(\n+                    reg,\n+                    InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::ax))\n+                );\n                 (\n                     crate::base::codegen_operand(fx, in_value).load_scalar(fx),\n                     crate::base::codegen_place(fx, out_place.unwrap()),\n@@ -65,8 +67,10 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         };\n         let (sub_leaf, ecx_place) = match operands[2] {\n             InlineAsmOperand::InOut { reg, late: true, ref in_value, out_place } => {\n-                let reg = expect_reg(reg);\n-                assert_eq!(reg, InlineAsmReg::X86(X86InlineAsmReg::cx));\n+                assert_eq!(\n+                    reg,\n+                    InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::cx))\n+                );\n                 (\n                     crate::base::codegen_operand(fx, in_value).load_scalar(fx),\n                     crate::base::codegen_place(fx, out_place.unwrap()),\n@@ -76,8 +80,10 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         };\n         let edx_place = match operands[3] {\n             InlineAsmOperand::Out { reg, late: true, place } => {\n-                let reg = expect_reg(reg);\n-                assert_eq!(reg, InlineAsmReg::X86(X86InlineAsmReg::dx));\n+                assert_eq!(\n+                    reg,\n+                    InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::dx))\n+                );\n                 crate::base::codegen_place(fx, place.unwrap())\n             }\n             _ => unreachable!(),\n@@ -437,13 +443,6 @@ fn call_inline_asm<'tcx>(\n     }\n }\n \n-fn expect_reg(reg_or_class: InlineAsmRegOrRegClass) -> InlineAsmReg {\n-    match reg_or_class {\n-        InlineAsmRegOrRegClass::Reg(reg) => reg,\n-        InlineAsmRegOrRegClass::RegClass(class) => unimplemented!(\"{:?}\", class),\n-    }\n-}\n-\n fn save_register(generated_asm: &mut String, arch: InlineAsmArch, reg: InlineAsmReg, offset: Size) {\n     match arch {\n         InlineAsmArch::X86_64 => {"}]}