{"sha": "5d88c1db38200896d2e4af7836fec95097adf509", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODhjMWRiMzgyMDA4OTZkMmU0YWY3ODM2ZmVjOTUwOTdhZGY1MDk=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-08T02:22:44Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-08T02:34:11Z"}, "message": "vscode: amended config to use binary from globalStoragePath, added ui for downloading", "tree": {"sha": "e865f9b5446b1630acf554f353856334a8ef6007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e865f9b5446b1630acf554f353856334a8ef6007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d88c1db38200896d2e4af7836fec95097adf509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d88c1db38200896d2e4af7836fec95097adf509", "html_url": "https://github.com/rust-lang/rust/commit/5d88c1db38200896d2e4af7836fec95097adf509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d88c1db38200896d2e4af7836fec95097adf509/comments", "author": null, "committer": null, "parents": [{"sha": "3e0e4e90aeeff25db674f8db562c611bd8016482", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0e4e90aeeff25db674f8db562c611bd8016482", "html_url": "https://github.com/rust-lang/rust/commit/3e0e4e90aeeff25db674f8db562c611bd8016482"}], "stats": {"total": 270, "additions": 229, "deletions": 41}, "files": [{"sha": "1b7c8910e1d7f75390700ab8629acd8fa8f534ae", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -753,6 +753,19 @@\n                 \"os-tmpdir\": \"~1.0.1\"\n             }\n         },\n+        \"ts-not-nil\": {\n+            \"version\": \"1.0.1\",\n+            \"resolved\": \"https://registry.npmjs.org/ts-not-nil/-/ts-not-nil-1.0.1.tgz\",\n+            \"integrity\": \"sha512-19+u+3okJddVZlrIdTOdFBaMsHYDInIGDPiujxfRa0RS2Ch5055zVG4GAqa+CZ/Rd1a+7ORSm8O4+2kesPymtw==\",\n+            \"requires\": {\n+                \"ts-typedefs\": \">=3.2.0\"\n+            }\n+        },\n+        \"ts-typedefs\": {\n+            \"version\": \"3.2.0\",\n+            \"resolved\": \"https://registry.npmjs.org/ts-typedefs/-/ts-typedefs-3.2.0.tgz\",\n+            \"integrity\": \"sha512-NglEH2YiY40YxNAvwBISqqXRTKlQq6x+qoCF+tkjPxwrPbrkmq7V3LXavmxrD63fENtMhFkcqgMJtOirtow9iA==\"\n+        },\n         \"tslib\": {\n             \"version\": \"1.10.0\",\n             \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-1.10.0.tgz\","}, {"sha": "c0a62619de4c8abd28b498b36a21110bcc694392", "filename": "editors/code/package.json", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -27,6 +27,7 @@\n         \"jsonc-parser\": \"^2.1.0\",\n         \"node-fetch\": \"^2.6.0\",\n         \"throttle-debounce\": \"^2.1.0\",\n+        \"ts-not-nil\": \"^1.0.1\",\n         \"vscode-languageclient\": \"^6.1.0\"\n     },\n     \"devDependencies\": {\n@@ -173,10 +174,11 @@\n                 },\n                 \"rust-analyzer.raLspServerPath\": {\n                     \"type\": [\n+                        \"null\",\n                         \"string\"\n                     ],\n-                    \"default\": \"ra_lsp_server\",\n-                    \"description\": \"Path to ra_lsp_server executable\"\n+                    \"default\": null,\n+                    \"description\": \"Path to ra_lsp_server executable (points to bundled binary by default)\"\n                 },\n                 \"rust-analyzer.excludeGlobs\": {\n                     \"type\": \"array\","}, {"sha": "7639ed44b3810a2f96858f197cc7fee5ed10432f", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -1,24 +1,18 @@\n-import { homedir } from 'os';\n import * as lc from 'vscode-languageclient';\n-import { spawnSync } from 'child_process';\n \n import { window, workspace } from 'vscode';\n import { Config } from './config';\n+import { ensureLanguageServerBinary } from './installation/language_server';\n \n-export function createClient(config: Config): lc.LanguageClient {\n+export async function createClient(config: Config): Promise<null | lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n     const workspaceFolderPath = workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const raLspServerPath = expandPathResolving(config.raLspServerPath);\n-    if (spawnSync(raLspServerPath, [\"--version\"]).status !== 0) {\n-        window.showErrorMessage(\n-            `Unable to execute '${raLspServerPath} --version'\\n\\n` +\n-            `Perhaps it is not in $PATH?\\n\\n` +\n-            `PATH=${process.env.PATH}\\n`\n-        );\n-    }\n+    const raLspServerPath = await ensureLanguageServerBinary(config.raLspServerSource);\n+    if (!raLspServerPath) return null;\n+\n     const run: lc.Executable = {\n         command: raLspServerPath,\n         options: { cwd: workspaceFolderPath },\n@@ -87,9 +81,3 @@ export function createClient(config: Config): lc.LanguageClient {\n     res.registerProposedFeatures();\n     return res;\n }\n-function expandPathResolving(path: string) {\n-    if (path.startsWith('~/')) {\n-        return path.replace('~', homedir());\n-    }\n-    return path;\n-}"}, {"sha": "aca5dab5a9296ac41558797739235c24c05324aa", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -1,4 +1,6 @@\n+import * as os from \"os\";\n import * as vscode from 'vscode';\n+import { BinarySource, BinarySourceType } from \"./installation/interfaces\";\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n@@ -16,10 +18,24 @@ export interface CargoFeatures {\n }\n \n export class Config {\n+    readonly raLspServerGithubArtifactName = {\n+        linux: \"ra_lsp_server-linux\",\n+        darwin: \"ra_lsp_server-mac\",\n+        win32: \"ra_lsp_server-windows.exe\",\n+        aix: null,\n+        android: null,\n+        freebsd: null,\n+        openbsd: null,\n+        sunos: null,\n+        cygwin: null,\n+        netbsd: null,\n+    }[process.platform];\n+\n+    raLspServerSource!: null | BinarySource;\n+\n     highlightingOn = true;\n     rainbowHighlightingOn = false;\n     enableEnhancedTyping = true;\n-    raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     lruCapacity: null | number = null;\n     displayInlayHints = true;\n     maxInlayHintLength: null | number = null;\n@@ -45,11 +61,20 @@ export class Config {\n     private prevCargoWatchOptions: null | CargoWatchOptions = null;\n \n     constructor(ctx: vscode.ExtensionContext) {\n-        vscode.workspace.onDidChangeConfiguration(_ => this.refresh(), null, ctx.subscriptions);\n-        this.refresh();\n+        vscode.workspace.onDidChangeConfiguration(_ => this.refresh(ctx), null, ctx.subscriptions);\n+        this.refresh(ctx);\n+    }\n+\n+    private static expandPathResolving(path: string) {\n+        if (path.startsWith('~/')) {\n+            return path.replace('~', os.homedir());\n+        }\n+        return path;\n     }\n \n-    private refresh() {\n+    // FIXME: revisit the logic for `if (.has(...)) config.get(...)` set default\n+    // values only in one place (i.e. remove default values from non-readonly members declarations)\n+    private refresh(ctx: vscode.ExtensionContext) {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n \n         let requireReloadMessage = null;\n@@ -82,9 +107,26 @@ export class Config {\n             this.prevEnhancedTyping = this.enableEnhancedTyping;\n         }\n \n-        if (config.has('raLspServerPath')) {\n-            this.raLspServerPath =\n-                RA_LSP_DEBUG || (config.get('raLspServerPath') as string);\n+        {\n+            const raLspServerPath = RA_LSP_DEBUG ?? config.get<null | string>(\"raLspServerPath\");\n+            if (raLspServerPath) {\n+                this.raLspServerSource = {\n+                    type: BinarySourceType.ExplicitPath,\n+                    path: Config.expandPathResolving(raLspServerPath)\n+                };\n+            } else if (this.raLspServerGithubArtifactName) {\n+                this.raLspServerSource = {\n+                    type: BinarySourceType.GithubBinary,\n+                    dir: ctx.globalStoragePath,\n+                    file: this.raLspServerGithubArtifactName,\n+                    repo: {\n+                        name: \"rust-analyzer\",\n+                        owner: \"rust-analyzer\",\n+                    }\n+                };\n+            } else {\n+                this.raLspServerSource = null;\n+            }\n         }\n \n         if (config.has('cargo-watch.enable')) {"}, {"sha": "f0e2d72f75e627113b0e0d8bdfcce56ce0a91887", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -29,7 +29,11 @@ export class Ctx {\n             await old.stop();\n         }\n         this.client = null;\n-        const client = createClient(this.config);\n+        const client = await createClient(this.config);\n+        if (!client) {\n+            throw new Error(\"Rust Analyzer Language Server is not available\");\n+        }\n+\n         this.pushCleanup(client.start());\n         await client.onReady();\n "}, {"sha": "7b537e114cc22479cef25171beb60c9d6fa43301", "filename": "editors/code/src/installation/download_file.ts", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -7,7 +7,7 @@ export async function downloadFile(\n     destFilePath: fs.PathLike,\n     onProgress: (readBytes: number, totalBytes: number) => void\n ): Promise<void> {\n-    onProgress = throttle(100, /* noTrailing: */ true, onProgress);\n+    onProgress = throttle(1000, /* noTrailing: */ true, onProgress);\n \n     const response = await fetch(url);\n ", "previous_filename": "editors/code/src/github/download_file.ts"}, {"sha": "f07431aac457f88dc191c015afa04ecd670bfc38", "filename": "editors/code/src/installation/fetch_latest_artifact_metadata.ts", "status": "renamed", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_latest_artifact_metadata.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_latest_artifact_metadata.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_latest_artifact_metadata.ts?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -1,25 +1,19 @@\n import fetch from \"node-fetch\";\n+import { GithubRepo, ArtifactMetadata } from \"./interfaces\";\n \n const GITHUB_API_ENDPOINT_URL = \"https://api.github.com\";\n \n export interface FetchLatestArtifactMetadataOpts {\n-    repoName: string;\n-    repoOwner: string;\n+    repo: GithubRepo;\n     artifactFileName: string;\n }\n \n-export interface ArtifactMetadata {\n-    releaseName: string;\n-    releaseDate: Date;\n-    downloadUrl: string;\n-}\n-\n export async function fetchLatestArtifactMetadata(\n     opts: FetchLatestArtifactMetadataOpts\n-): Promise<ArtifactMetadata | null> {\n+): Promise<null | ArtifactMetadata> {\n \n-    const repoOwner = encodeURIComponent(opts.repoOwner);\n-    const repoName  = encodeURIComponent(opts.repoName);\n+    const repoOwner = encodeURIComponent(opts.repo.owner);\n+    const repoName  = encodeURIComponent(opts.repo.name);\n \n     const apiEndpointPath = `/repos/${repoOwner}/${repoName}/releases/latest`;\n     const requestUrl = GITHUB_API_ENDPOINT_URL + apiEndpointPath;\n@@ -35,14 +29,12 @@ export async function fetchLatestArtifactMetadata(\n \n     return !artifact ? null : {\n         releaseName: response.name,\n-        releaseDate: new Date(response.published_at),\n         downloadUrl: artifact.browser_download_url\n     };\n \n     // Noise denotes tremendous amount of data that we are not using here\n     interface GithubRelease {\n         name: string;\n-        published_at: Date;\n         assets: Array<{\n             browser_download_url: string;\n ", "previous_filename": "editors/code/src/github/fetch_latest_artifact_metadata.ts"}, {"sha": "f54e24e2622545ed19debcad559413b478d043e6", "filename": "editors/code/src/installation/interfaces.ts", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -0,0 +1,26 @@\n+export interface GithubRepo {\n+    name: string;\n+    owner: string;\n+}\n+\n+export interface ArtifactMetadata {\n+    releaseName: string;\n+    downloadUrl: string;\n+}\n+\n+\n+export enum BinarySourceType { ExplicitPath, GithubBinary }\n+\n+export type BinarySource = EplicitPathSource | GithubBinarySource;\n+\n+export interface EplicitPathSource {\n+    type: BinarySourceType.ExplicitPath;\n+    path: string;\n+}\n+\n+export interface GithubBinarySource {\n+    type: BinarySourceType.GithubBinary;\n+    repo: GithubRepo;\n+    dir: string;\n+    file: string;\n+}"}, {"sha": "2b3ce6621bb0655f1785a2abde78de2bfa19fd26", "filename": "editors/code/src/installation/language_server.ts", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -0,0 +1,119 @@\n+import { unwrapNotNil } from \"ts-not-nil\";\n+import { spawnSync } from \"child_process\";\n+import * as vscode from \"vscode\";\n+import * as path from \"path\";\n+import { strict as assert } from \"assert\";\n+import { promises as fs } from \"fs\";\n+\n+import { BinarySource, BinarySourceType, GithubBinarySource } from \"./interfaces\";\n+import { fetchLatestArtifactMetadata } from \"./fetch_latest_artifact_metadata\";\n+import { downloadFile } from \"./download_file\";\n+\n+export async function downloadLatestLanguageServer(\n+    {file: artifactFileName, dir: installationDir, repo}: GithubBinarySource\n+) {\n+    const binaryMetadata = await fetchLatestArtifactMetadata({ artifactFileName, repo });\n+\n+    const {\n+        releaseName,\n+        downloadUrl\n+    } = unwrapNotNil(binaryMetadata, `Latest GitHub release lacks \"${artifactFileName}\" file`);\n+\n+    await fs.mkdir(installationDir).catch(err => assert.strictEqual(\n+        err && err.code,\n+        \"EEXIST\",\n+        `Couldn't create directory \"${installationDir}\" to download `+\n+        `language server binary: ${err.message}`\n+    ));\n+\n+    const installationPath = path.join(installationDir, artifactFileName);\n+\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            cancellable: false, // FIXME: add support for canceling download?\n+            title: `Downloading language server ${releaseName}`\n+        },\n+        async (progress, _) => {\n+            let lastPrecentage = 0;\n+            await downloadFile(downloadUrl, installationPath, (readBytes, totalBytes) => {\n+                const newPercentage = (readBytes / totalBytes) * 100;\n+                progress.report({\n+                    message: newPercentage.toFixed(0) + \"%\",\n+                    increment: newPercentage - lastPrecentage\n+                });\n+\n+                lastPrecentage = newPercentage;\n+            });\n+        }\n+    );\n+\n+    await fs.chmod(installationPath, 111); // Set xxx permissions\n+}\n+export async function ensureLanguageServerBinary(\n+    langServerSource: null | BinarySource\n+): Promise<null | string> {\n+\n+    if (!langServerSource) {\n+        vscode.window.showErrorMessage(\n+            \"Unfortunately we don't ship binaries for your platform yet. \" +\n+            \"You need to manually clone rust-analyzer repository and \" +\n+            \"run `cargo xtask install --server` to build the language server from sources. \" +\n+            \"If you feel that your platform should be supported, please create an issue \" +\n+            \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n+            \"will consider it.\"\n+        );\n+        return null;\n+    }\n+\n+    switch (langServerSource.type) {\n+        case BinarySourceType.ExplicitPath: {\n+            if (isBinaryAvailable(langServerSource.path)) {\n+                return langServerSource.path;\n+            }\n+            vscode.window.showErrorMessage(\n+                `Unable to execute ${'`'}${langServerSource.path} --version${'`'}. ` +\n+                \"To use the bundled language server, set `rust-analyzer.raLspServerPath` \" +\n+                \"value to `null` or remove it from the settings to use it by default.\"\n+            );\n+            return null;\n+        }\n+        case BinarySourceType.GithubBinary: {\n+            const bundledBinaryPath = path.join(langServerSource.dir, langServerSource.file);\n+\n+            if (!isBinaryAvailable(bundledBinaryPath)) {\n+                const userResponse = await vscode.window.showInformationMessage(\n+                    `Language server binary for rust-analyzer was not found. ` +\n+                    `Do you want to download it now?`,\n+                    \"Download now\", \"Cancel\"\n+                );\n+                if (userResponse !== \"Download now\") return null;\n+\n+                try {\n+                    await downloadLatestLanguageServer(langServerSource);\n+                } catch (err) {\n+                    await vscode.window.showErrorMessage(\n+                        `Failed to download language server from ${langServerSource.repo.name} ` +\n+                        `GitHub repository: ${err.message}`\n+                    );\n+                    return null;\n+                }\n+\n+\n+                assert(\n+                    isBinaryAvailable(bundledBinaryPath),\n+                    \"Downloaded language server binary is not functional\"\n+                );\n+\n+                vscode.window.showInformationMessage(\n+                    \"Rust analyzer language server was successfully installed\"\n+                );\n+            }\n+            return bundledBinaryPath;\n+        }\n+    }\n+\n+    function isBinaryAvailable(binaryPath: string) {\n+        return spawnSync(binaryPath, [\"--version\"]).status === 0;\n+    }\n+}"}, {"sha": "0c7702974a9cbf6441a0e5a668982015cc62e369", "filename": "editors/code/tsconfig.json", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/5d88c1db38200896d2e4af7836fec95097adf509/editors%2Fcode%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftsconfig.json?ref=5d88c1db38200896d2e4af7836fec95097adf509", "patch": "@@ -6,6 +6,8 @@\n         \"lib\": [\n             \"es2019\"\n         ],\n+        \"esModuleInterop\": true,\n+        \"allowSyntheticDefaultImports\": true,\n         \"sourceMap\": true,\n         \"rootDir\": \"src\",\n         \"strict\": true,"}]}