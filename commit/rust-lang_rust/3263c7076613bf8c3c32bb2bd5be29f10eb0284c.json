{"sha": "3263c7076613bf8c3c32bb2bd5be29f10eb0284c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNjNjNzA3NjYxM2JmOGMzYzMyYmIyYmQ1YmUyOWYxMGViMDI4NGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-09T12:26:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-09T12:26:59Z"}, "message": "Merge #2772\n\n2772: Actually test references r=kjeremy a=kjeremy\n\nThis will be a little more work when `ReferenceSearchResults` change but I think it's easier to maintain in the end. It also follows a similar pattern to navigation targets and call hierarchy.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "3fa270a113de26dedcdc1be826a3dd262eceaefc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fa270a113de26dedcdc1be826a3dd262eceaefc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3263c7076613bf8c3c32bb2bd5be29f10eb0284c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFxwTCRBK7hj4Ov3rIwAAdHIIAKsTH0DnQ18H3XciQ3EdJal6\n92eLx5huj2ezd1tafHAew72irlG5fqMNTkWikmY4F9z31z9cBIhzsuJg9Wv1rdbn\nzbqFyEdfnRW8G8vlCY+1XJm5sbi58z+HNgle7c3rk76cfBx3zD433eyMOPGQD152\nS/s0jfTrez/uySLGuaaG1yykHQUZepaqU/7qkVoIeamIp67SNkXRUgUdrUuJG1XE\nscSJvUOjrspOQIgbM6t8FGdwccvmEy9KlGPIIsa+onPclK3J/9z0LJpdh8v9e3/B\n1O0q+RTnGamwiVf8NDF02v+MxxxxrCIRqziSifnwWeGsNatLlyG4wZ5td+SBgT4=\n=D01u\n-----END PGP SIGNATURE-----\n", "payload": "tree 3fa270a113de26dedcdc1be826a3dd262eceaefc\nparent 0d6e5a986cc7c3a434c2107edf748d1c26ac3f69\nparent 6fc80efe7738af3b0d51e66591ea5451f45f6706\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578572819 +0000\ncommitter GitHub <noreply@github.com> 1578572819 +0000\n\nMerge #2772\n\n2772: Actually test references r=kjeremy a=kjeremy\n\nThis will be a little more work when `ReferenceSearchResults` change but I think it's easier to maintain in the end. It also follows a similar pattern to navigation targets and call hierarchy.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3263c7076613bf8c3c32bb2bd5be29f10eb0284c", "html_url": "https://github.com/rust-lang/rust/commit/3263c7076613bf8c3c32bb2bd5be29f10eb0284c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3263c7076613bf8c3c32bb2bd5be29f10eb0284c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d6e5a986cc7c3a434c2107edf748d1c26ac3f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d6e5a986cc7c3a434c2107edf748d1c26ac3f69", "html_url": "https://github.com/rust-lang/rust/commit/0d6e5a986cc7c3a434c2107edf748d1c26ac3f69"}, {"sha": "6fc80efe7738af3b0d51e66591ea5451f45f6706", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc80efe7738af3b0d51e66591ea5451f45f6706", "html_url": "https://github.com/rust-lang/rust/commit/6fc80efe7738af3b0d51e66591ea5451f45f6706"}], "stats": {"total": 114, "additions": 99, "deletions": 15}, "files": [{"sha": "7b187eba354a5374698b024c7573393c9d92e432", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3263c7076613bf8c3c32bb2bd5be29f10eb0284c/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3263c7076613bf8c3c32bb2bd5be29f10eb0284c/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=3263c7076613bf8c3c32bb2bd5be29f10eb0284c", "patch": "@@ -75,7 +75,7 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayKind},\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n-    references::{ReferenceSearchResult, SearchScope},\n+    references::{Reference, ReferenceKind, ReferenceSearchResult, SearchScope},\n     runnables::{Runnable, RunnableKind},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     syntax_highlighting::HighlightedRange,"}, {"sha": "5a3ec4eb91ef5ebca00fce4e45d69d501fa216c5", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 98, "deletions": 14, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/3263c7076613bf8c3c32bb2bd5be29f10eb0284c/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3263c7076613bf8c3c32bb2bd5be29f10eb0284c/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=3263c7076613bf8c3c32bb2bd5be29f10eb0284c", "patch": "@@ -214,7 +214,7 @@ fn process_definition(\n mod tests {\n     use crate::{\n         mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n-        ReferenceSearchResult, SearchScope,\n+        Reference, ReferenceKind, ReferenceSearchResult, SearchScope,\n     };\n \n     #[test]\n@@ -232,7 +232,12 @@ mod tests {\n     }\"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n+        check_result(\n+            refs,\n+            \"Foo STRUCT_DEF FileId(1) [5; 39) [12; 15)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(1) [142; 145) StructLiteral\"],\n+        );\n     }\n \n     #[test]\n@@ -251,7 +256,17 @@ mod tests {\n     }\"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 5);\n+        check_result(\n+            refs,\n+            \"i BIND_PAT FileId(1) [33; 34)\",\n+            ReferenceKind::Other,\n+            &[\n+                \"FileId(1) [67; 68) Other\",\n+                \"FileId(1) [71; 72) Other\",\n+                \"FileId(1) [101; 102) Other\",\n+                \"FileId(1) [127; 128) Other\",\n+            ],\n+        );\n     }\n \n     #[test]\n@@ -262,7 +277,12 @@ mod tests {\n     }\"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n+        check_result(\n+            refs,\n+            \"i BIND_PAT FileId(1) [12; 13)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(1) [38; 39) Other\"],\n+        );\n     }\n \n     #[test]\n@@ -273,7 +293,12 @@ mod tests {\n     }\"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n+        check_result(\n+            refs,\n+            \"i BIND_PAT FileId(1) [12; 13)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(1) [38; 39) Other\"],\n+        );\n     }\n \n     #[test]\n@@ -290,7 +315,12 @@ mod tests {\n         \"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n+        check_result(\n+            refs,\n+            \"spam RECORD_FIELD_DEF FileId(1) [66; 79) [70; 74)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(1) [152; 156) Other\"],\n+        );\n     }\n \n     #[test]\n@@ -304,7 +334,7 @@ mod tests {\n         \"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 1);\n+        check_result(refs, \"f FN_DEF FileId(1) [88; 104) [91; 92)\", ReferenceKind::Other, &[]);\n     }\n \n     #[test]\n@@ -319,7 +349,7 @@ mod tests {\n         \"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 1);\n+        check_result(refs, \"B ENUM_VARIANT FileId(1) [83; 84) [83; 84)\", ReferenceKind::Other, &[]);\n     }\n \n     #[test]\n@@ -358,7 +388,12 @@ mod tests {\n \n         let (analysis, pos) = analysis_and_position(code);\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n-        assert_eq!(refs.len(), 3);\n+        check_result(\n+            refs,\n+            \"Foo STRUCT_DEF FileId(2) [16; 50) [27; 30)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(1) [52; 55) StructLiteral\", \"FileId(3) [77; 80) StructLiteral\"],\n+        );\n     }\n \n     // `mod foo;` is not in the results because `foo` is an `ast::Name`.\n@@ -384,7 +419,12 @@ mod tests {\n \n         let (analysis, pos) = analysis_and_position(code);\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n-        assert_eq!(refs.len(), 2);\n+        check_result(\n+            refs,\n+            \"foo SOURCE_FILE FileId(2) [0; 35)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(1) [13; 16) Other\"],\n+        );\n     }\n \n     #[test]\n@@ -409,7 +449,12 @@ mod tests {\n \n         let (analysis, pos) = analysis_and_position(code);\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n-        assert_eq!(refs.len(), 3);\n+        check_result(\n+            refs,\n+            \"Foo STRUCT_DEF FileId(3) [0; 41) [18; 21)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(2) [20; 23) Other\", \"FileId(2) [46; 49) StructLiteral\"],\n+        );\n     }\n \n     #[test]\n@@ -433,11 +478,21 @@ mod tests {\n         let analysis = mock.analysis();\n \n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n-        assert_eq!(refs.len(), 3);\n+        check_result(\n+            refs,\n+            \"quux FN_DEF FileId(1) [18; 34) [25; 29)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(2) [16; 20) Other\", \"FileId(3) [16; 20) Other\"],\n+        );\n \n         let refs =\n             analysis.find_all_refs(pos, Some(SearchScope::single_file(bar))).unwrap().unwrap();\n-        assert_eq!(refs.len(), 2);\n+        check_result(\n+            refs,\n+            \"quux FN_DEF FileId(1) [18; 34) [25; 29)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(3) [16; 20) Other\"],\n+        );\n     }\n \n     #[test]\n@@ -452,11 +507,40 @@ mod tests {\n         }\"#;\n \n         let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 3);\n+        check_result(\n+            refs,\n+            \"m1 MACRO_CALL FileId(1) [9; 63) [46; 48)\",\n+            ReferenceKind::Other,\n+            &[\"FileId(1) [96; 98) Other\", \"FileId(1) [114; 116) Other\"],\n+        );\n     }\n \n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position, None).unwrap().unwrap()\n     }\n+\n+    fn check_result(\n+        res: ReferenceSearchResult,\n+        expected_decl: &str,\n+        decl_kind: ReferenceKind,\n+        expected_refs: &[&str],\n+    ) {\n+        res.declaration().assert_match(expected_decl);\n+        assert_eq!(res.declaration_kind, decl_kind);\n+\n+        assert_eq!(res.references.len(), expected_refs.len());\n+        res.references().iter().enumerate().for_each(|(i, r)| r.assert_match(expected_refs[i]));\n+    }\n+\n+    impl Reference {\n+        fn debug_render(&self) -> String {\n+            format!(\"{:?} {:?} {:?}\", self.file_range.file_id, self.file_range.range, self.kind)\n+        }\n+\n+        fn assert_match(&self, expected: &str) {\n+            let actual = self.debug_render();\n+            test_utils::assert_eq_text!(expected.trim(), actual.trim(),);\n+        }\n+    }\n }"}]}