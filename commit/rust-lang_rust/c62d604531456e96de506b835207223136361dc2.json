{"sha": "c62d604531456e96de506b835207223136361dc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MmQ2MDQ1MzE0NTZlOTZkZTUwNmI4MzUyMDcyMjMxMzYzNjFkYzI=", "commit": {"author": {"name": "Jason Toffaletti", "email": "jason@topsy.com", "date": "2013-10-04T02:23:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-10-26T01:27:45Z"}, "message": "lock-free queue for scheduler message queue", "tree": {"sha": "cc01486b04a5e0b8bcc99fb462e6c767501612af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc01486b04a5e0b8bcc99fb462e6c767501612af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c62d604531456e96de506b835207223136361dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c62d604531456e96de506b835207223136361dc2", "html_url": "https://github.com/rust-lang/rust/commit/c62d604531456e96de506b835207223136361dc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c62d604531456e96de506b835207223136361dc2/comments", "author": {"login": "toffaletti", "id": 145012, "node_id": "MDQ6VXNlcjE0NTAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/145012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toffaletti", "html_url": "https://github.com/toffaletti", "followers_url": "https://api.github.com/users/toffaletti/followers", "following_url": "https://api.github.com/users/toffaletti/following{/other_user}", "gists_url": "https://api.github.com/users/toffaletti/gists{/gist_id}", "starred_url": "https://api.github.com/users/toffaletti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toffaletti/subscriptions", "organizations_url": "https://api.github.com/users/toffaletti/orgs", "repos_url": "https://api.github.com/users/toffaletti/repos", "events_url": "https://api.github.com/users/toffaletti/events{/privacy}", "received_events_url": "https://api.github.com/users/toffaletti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdcd309fb9baf06f835831c83b94a5ad1cdd568", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdcd309fb9baf06f835831c83b94a5ad1cdd568", "html_url": "https://github.com/rust-lang/rust/commit/dcdcd309fb9baf06f835831c83b94a5ad1cdd568"}], "stats": {"total": 214, "additions": 210, "deletions": 4}, "files": [{"sha": "771b15588d04b934eb5ef4bbe9623916326a42bf", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c62d604531456e96de506b835207223136361dc2/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d604531456e96de506b835207223136361dc2/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=c62d604531456e96de506b835207223136361dc2", "patch": "@@ -136,6 +136,9 @@ mod work_queue;\n /// A parallel queue.\n mod message_queue;\n \n+/// A mostly lock-free multi-producer, single consumer queue.\n+mod mpsc_queue;\n+\n /// A parallel data structure for tracking sleeping schedulers.\n mod sleeper_list;\n "}, {"sha": "57b7d4f469b841115811b2807254b50302bc99a5", "filename": "src/libstd/rt/mpsc_queue.rs", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/c62d604531456e96de506b835207223136361dc2/src%2Flibstd%2Frt%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d604531456e96de506b835207223136361dc2/src%2Flibstd%2Frt%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmpsc_queue.rs?ref=c62d604531456e96de506b835207223136361dc2", "patch": "@@ -0,0 +1,203 @@\n+/* Multi-producer/single-consumer queue\n+ * Copyright (c) 2010-2011 Dmitry Vyukov. All rights reserved.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * \n+ *    1. Redistributions of source code must retain the above copyright notice,\n+ *       this list of conditions and the following disclaimer.\n+ * \n+ *    2. Redistributions in binary form must reproduce the above copyright\n+ *       notice, this list of conditions and the following disclaimer in the\n+ *       documentation and/or other materials provided with the distribution.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY DMITRY VYUKOV \"AS IS\" AND ANY EXPRESS OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n+ * SHALL DMITRY VYUKOV OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ * The views and conclusions contained in the software and documentation are\n+ * those of the authors and should not be interpreted as representing official\n+ * policies, either expressed or implied, of Dmitry Vyukov.\n+ */\n+\n+//! A mostly lock-free multi-producer, single consumer queue.\n+\n+use unstable::sync::UnsafeArc;\n+use unstable::atomics::{AtomicPtr,Relaxed,Release,Acquire};\n+use ptr::{mut_null, to_mut_unsafe_ptr};\n+use cast;\n+use option::*;\n+use clone::Clone;\n+use default::Default;\n+use kinds::Send;\n+use fmt;\n+\n+struct Node<T> {\n+    next: AtomicPtr<Node<T>>,\n+    value: Option<T>,\n+}\n+\n+impl<T> Node<T> {\n+    fn new(value: T) -> Node<T> {\n+        Node{next: AtomicPtr::new(mut_null()), value: Some(value)}\n+    }\n+}\n+\n+impl<T> Default for Node<T> {\n+    fn default() -> Node<T> {\n+        Node{next: AtomicPtr::new(mut_null()), value: None}\n+    }\n+}\n+\n+struct State<T> {\n+    stub: Node<T>,\n+    head: AtomicPtr<Node<T>>,\n+    tail: *mut Node<T>,\n+}\n+\n+struct Queue<T> {\n+    priv state: UnsafeArc<State<T>>,\n+}\n+\n+impl<T: Send> Clone for Queue<T> {\n+    fn clone(&self) -> Queue<T> {\n+        Queue {\n+            state: self.state.clone()\n+        }\n+    }\n+}\n+\n+impl<T: Send> fmt::Default for Queue<T> {\n+    fn fmt(value: &Queue<T>, f: &mut fmt::Formatter) {\n+        write!(f.buf, \"Queue({})\", value.state.get());\n+    }\n+}\n+\n+impl<T: Send> Queue<T> {\n+    pub fn new() -> Queue<T> {\n+        let mut q = Queue{state: UnsafeArc::new(State {\n+            stub: Default::default(),\n+            head: AtomicPtr::new(mut_null()),\n+            tail: mut_null(),\n+        })};\n+        let stub = q.get_stub_unsafe();\n+        q.get_head().store(stub, Relaxed);\n+        q.set_tail(stub);\n+        q\n+    }\n+\n+    pub fn push(&mut self, value: T) {\n+        unsafe {\n+            let node = cast::transmute(~Node::new(value));\n+            self.push_node(node);\n+        }\n+    }\n+\n+    fn push_node(&mut self, node: *mut Node<T>) {\n+        unsafe {\n+            (*node).next.store(mut_null(), Release);\n+            let prev = (*self.state.get()).head.swap(node, Relaxed);\n+            (*prev).next.store(node, Release);\n+        }\n+    }\n+\n+    fn get_stub_unsafe(&mut self) -> *mut Node<T> {\n+        unsafe { to_mut_unsafe_ptr(&mut (*self.state.get()).stub) }\n+    }\n+\n+    fn get_head(&mut self) -> &mut AtomicPtr<Node<T>> {\n+        unsafe { &mut (*self.state.get()).head }\n+    }\n+\n+    fn get_tail(&mut self) -> *mut Node<T> {\n+        unsafe { (*self.state.get()).tail }\n+    }\n+\n+    fn set_tail(&mut self, tail: *mut Node<T>) {\n+        unsafe { (*self.state.get()).tail = tail }\n+    }\n+\n+    pub fn casual_pop(&mut self) -> Option<T> {\n+        self.pop()\n+    }\n+\n+    pub fn pop(&mut self) -> Option<T> {\n+        unsafe {\n+            let mut tail = self.get_tail();\n+            let mut next = (*tail).next.load(Acquire);\n+            let stub = self.get_stub_unsafe();\n+            if tail == stub {\n+                if mut_null() == next {\n+                    return None\n+                }\n+                self.set_tail(next);\n+                tail = next;\n+                next = (*next).next.load(Acquire);\n+            }\n+            if next != mut_null() {\n+                let tail: ~Node<T> = cast::transmute(tail);\n+                self.set_tail(next);\n+                return tail.value\n+            }\n+            let head = self.get_head().load(Relaxed);\n+            if tail != head {\n+                return None\n+            }\n+            self.push_node(stub);\n+            next = (*tail).next.load(Acquire);\n+            if next != mut_null() {\n+                let tail: ~Node<T> = cast::transmute(tail);\n+                self.set_tail(next);\n+                return tail.value\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use prelude::*;\n+    use option::*;\n+    use task;\n+    use comm;\n+    use fmt;\n+    use super::Queue;\n+\n+    #[test]\n+    fn test() {\n+        let nthreads = 8u;\n+        let nmsgs = 1000u;\n+        let mut q = Queue::new();\n+        assert_eq!(None, q.pop());\n+\n+        for _ in range(0, nthreads) {\n+            let (port, chan)  = comm::stream();\n+            chan.send(q.clone());\n+            do task::spawn_sched(task::SingleThreaded) {\n+                let mut q = port.recv();\n+                for i in range(0, nmsgs) {\n+                    q.push(i);\n+                }\n+            }\n+        }\n+\n+        let mut i = 0u;\n+        loop {\n+            match q.pop() {\n+                None => {},\n+                Some(_) => {\n+                    i += 1;\n+                    if i == nthreads*nmsgs { break }\n+                }\n+            }\n+        }\n+    }\n+}\n+"}, {"sha": "e739eed32fed93eb2ec1e6a9f147254be23c55d7", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d604531456e96de506b835207223136361dc2/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d604531456e96de506b835207223136361dc2/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=c62d604531456e96de506b835207223136361dc2", "patch": "@@ -19,7 +19,7 @@ use super::stack::{StackPool};\n use super::rtio::EventLoop;\n use super::context::Context;\n use super::task::{Task, AnySched, Sched};\n-use super::message_queue::MessageQueue;\n+use super::mpsc_queue::Queue;\n use rt::kill::BlockedTask;\n use rt::local_ptr;\n use rt::local::Local;\n@@ -47,7 +47,7 @@ pub struct Scheduler {\n     /// The queue of incoming messages from other schedulers.\n     /// These are enqueued by SchedHandles after which a remote callback\n     /// is triggered to handle the message.\n-    priv message_queue: MessageQueue<SchedMessage>,\n+    priv message_queue: Queue<SchedMessage>,\n     /// A shared list of sleeping schedulers. We'll use this to wake\n     /// up schedulers when pushing work onto the work queue.\n     sleeper_list: SleeperList,\n@@ -137,7 +137,7 @@ impl Scheduler {\n \n         let mut sched = Scheduler {\n             sleeper_list: sleeper_list,\n-            message_queue: MessageQueue::new(),\n+            message_queue: Queue::new(),\n             sleepy: false,\n             no_sleep: false,\n             event_loop: event_loop,\n@@ -802,7 +802,7 @@ pub enum SchedMessage {\n \n pub struct SchedHandle {\n     priv remote: ~RemoteCallback,\n-    priv queue: MessageQueue<SchedMessage>,\n+    priv queue: Queue<SchedMessage>,\n     sched_id: uint\n }\n "}]}