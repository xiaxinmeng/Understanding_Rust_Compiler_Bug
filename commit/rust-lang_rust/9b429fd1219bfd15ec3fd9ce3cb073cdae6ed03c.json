{"sha": "9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDI5ZmQxMjE5YmZkMTVlYzNmZDljZTNjYjA3M2NkYWU2ZWQwM2M=", "commit": {"author": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-01-06T22:06:19Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-26T19:41:57Z"}, "message": "Add fold_self\n\n- Added `Iterator::fold_first`, which is like `fold`, but uses the first element in the iterator as the initial accumulator\n- Includes doc and doctest\n- Rebase commit; see #65222 for details\n\nCo-Authored-By: Tim Vermeulen <tvermeulen@me.com>", "tree": {"sha": "d64258354118e4d5bb17d16e84658a02c7432713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64258354118e4d5bb17d16e84658a02c7432713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c", "html_url": "https://github.com/rust-lang/rust/commit/9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c/comments", "author": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbb07525e2f07a815e780a4268b11916248b5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbb07525e2f07a815e780a4268b11916248b5a9", "html_url": "https://github.com/rust-lang/rust/commit/2fbb07525e2f07a815e780a4268b11916248b5a9"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "c066d535f24e5e93d5e6fb546dd0c81c4c03dfbd", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=9b429fd1219bfd15ec3fd9ce3cb073cdae6ed03c", "patch": "@@ -2005,6 +2005,44 @@ pub trait Iterator {\n         self.try_fold(init, ok(f)).unwrap()\n     }\n \n+    /// The same as [`fold()`](#method.fold), but uses the first element in the\n+    /// iterator as the initial value, folding every subsequent element into it.\n+    /// If the iterator is empty, return `None`; otherwise, return the result\n+    /// of the fold.\n+    ///\n+    /// # Example\n+    ///\n+    /// Find the maximum value:\n+    ///\n+    /// ```\n+    /// fn find_max<I>(iter: I) -> Option<I::Item>\n+    ///     where I: Iterator,\n+    ///           I::Item: Ord,\n+    /// {\n+    ///     iter.fold_first(|a, b| {\n+    ///         a.partial_cmp(b).map(move |cmp| match cmp {\n+    ///             Ordering::Greater | Ordering::Equal => a,\n+    ///             Ordering::Less => b,\n+    ///         })\n+    ///     })\n+    /// }\n+    /// let a = [10, 20, 5, -23, 0];\n+    /// let b = [];\n+    ///\n+    /// assert_eq!(find_max(a.iter()), Some(20));\n+    /// assert_eq!(find_max(b.iter()), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_fold_self\", issue = \"68125\")]\n+    fn fold_first<F>(mut self, f: F) -> Option<Self::Item>\n+    where\n+        Self: Sized,\n+        F: FnMut(Self::Item, Self::Item) -> Self::Item,\n+    {\n+        let first = self.next()?;\n+        Some(self.fold(first, f))\n+    }\n+\n     /// Tests if every element of the iterator matches a predicate.\n     ///\n     /// `all()` takes a closure that returns `true` or `false`. It applies\n@@ -2497,7 +2535,7 @@ pub trait Iterator {\n             move |x, y| cmp::max_by(x, y, &mut compare)\n         }\n \n-        fold1(self, fold(compare))\n+        self.fold_first(fold(compare))\n     }\n \n     /// Returns the element that gives the minimum value from the\n@@ -2561,7 +2599,7 @@ pub trait Iterator {\n             move |x, y| cmp::min_by(x, y, &mut compare)\n         }\n \n-        fold1(self, fold(compare))\n+        self.fold_first(fold(compare))\n     }\n \n     /// Reverses an iterator's direction.\n@@ -3214,20 +3252,6 @@ pub trait Iterator {\n     }\n }\n \n-/// Fold an iterator without having to provide an initial value.\n-#[inline]\n-fn fold1<I, F>(mut it: I, f: F) -> Option<I::Item>\n-where\n-    I: Iterator,\n-    F: FnMut(I::Item, I::Item) -> I::Item,\n-{\n-    // start with the first element as our selection. This avoids\n-    // having to use `Option`s inside the loop, translating to a\n-    // sizeable performance gain (6x in one case).\n-    let first = it.next()?;\n-    Some(it.fold(first, f))\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator + ?Sized> Iterator for &mut I {\n     type Item = I::Item;"}]}