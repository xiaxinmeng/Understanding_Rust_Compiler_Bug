{"sha": "71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMjc4Y2JkY2IwYWFmOTNlZGQzNzBjNmFlYzI0ZDY3MGEzYzFlYWI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-28T03:02:59Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-18T00:11:15Z"}, "message": "Remove some unnecessary `ATTR_*` constants.", "tree": {"sha": "5ed8c7b5f50cf0455fcf72927f766e146a41109b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ed8c7b5f50cf0455fcf72927f766e146a41109b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "html_url": "https://github.com/rust-lang/rust/commit/71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "html_url": "https://github.com/rust-lang/rust/commit/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "cd2e32de9d5c4e438810a48f2d190e5bbdfc0abe", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "patch": "@@ -12,21 +12,13 @@ mod impls_hir;\n mod impls_ty;\n mod impls_syntax;\n \n-pub const ATTR_DIRTY: Symbol = sym::rustc_dirty;\n-pub const ATTR_CLEAN: Symbol = sym::rustc_clean;\n-pub const ATTR_IF_THIS_CHANGED: Symbol = sym::rustc_if_this_changed;\n-pub const ATTR_THEN_THIS_WOULD_NEED: Symbol = sym::rustc_then_this_would_need;\n-pub const ATTR_PARTITION_REUSED: Symbol = sym::rustc_partition_reused;\n-pub const ATTR_PARTITION_CODEGENED: Symbol = sym::rustc_partition_codegened;\n-pub const ATTR_EXPECTED_CGU_REUSE: Symbol = sym::rustc_expected_cgu_reuse;\n-\n pub const IGNORED_ATTRIBUTES: &[Symbol] = &[\n     sym::cfg,\n-    ATTR_IF_THIS_CHANGED,\n-    ATTR_THEN_THIS_WOULD_NEED,\n-    ATTR_DIRTY,\n-    ATTR_CLEAN,\n-    ATTR_PARTITION_REUSED,\n-    ATTR_PARTITION_CODEGENED,\n-    ATTR_EXPECTED_CGU_REUSE,\n+    sym::rustc_if_this_changed,\n+    sym::rustc_then_this_would_need,\n+    sym::rustc_dirty,\n+    sym::rustc_clean,\n+    sym::rustc_partition_reused,\n+    sym::rustc_partition_codegened,\n+    sym::rustc_expected_cgu_reuse,\n ];"}, {"sha": "e3e3b0b17483ece87a87443462949e2dc2cb3679", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "patch": "@@ -44,11 +44,10 @@ use rustc_data_structures::graph::implementation::{\n };\n use rustc::hir;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::ich::{ATTR_IF_THIS_CHANGED, ATTR_THEN_THIS_WOULD_NEED};\n use std::env;\n use std::fs::{self, File};\n use std::io::Write;\n-use syntax::ast;\n+use syntax::{ast, symbol::sym};\n use syntax_pos::Span;\n \n pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n@@ -78,7 +77,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n             assert!(tcx.sess.opts.debugging_opts.query_dep_graph,\n                     \"cannot use the `#[{}]` or `#[{}]` annotations \\\n                     without supplying `-Z query-dep-graph`\",\n-                    ATTR_IF_THIS_CHANGED, ATTR_THEN_THIS_WOULD_NEED);\n+                    sym::rustc_if_this_changed, sym::rustc_then_this_would_need);\n         }\n \n         // Check paths.\n@@ -114,7 +113,7 @@ impl IfThisChanged<'tcx> {\n         let def_id = self.tcx.hir().local_def_id(hir_id);\n         let def_path_hash = self.tcx.def_path_hash(def_id);\n         for attr in attrs {\n-            if attr.check_name(ATTR_IF_THIS_CHANGED) {\n+            if attr.check_name(sym::rustc_if_this_changed) {\n                 let dep_node_interned = self.argument(attr);\n                 let dep_node = match dep_node_interned {\n                     None => def_path_hash.to_dep_node(DepKind::Hir),\n@@ -130,7 +129,7 @@ impl IfThisChanged<'tcx> {\n                     }\n                 };\n                 self.if_this_changed.push((attr.span, def_id, dep_node));\n-            } else if attr.check_name(ATTR_THEN_THIS_WOULD_NEED) {\n+            } else if attr.check_name(sym::rustc_then_this_would_need) {\n                 let dep_node_interned = self.argument(attr);\n                 let dep_node = match dep_node_interned {\n                     Some(n) => {"}, {"sha": "1a675ea002cda1cabc93a833bcf8046319ea5c61", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "patch": "@@ -28,8 +28,6 @@ use rustc::ty::TyCtxt;\n use std::collections::BTreeSet;\n use syntax::ast;\n use syntax::symbol::{Symbol, sym};\n-use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_CODEGENED,\n-                 ATTR_EXPECTED_CGU_REUSE};\n \n pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n@@ -62,11 +60,11 @@ struct AssertModuleSource<'tcx> {\n \n impl AssertModuleSource<'tcx> {\n     fn check_attr(&self, attr: &ast::Attribute) {\n-        let (expected_reuse, comp_kind) = if attr.check_name(ATTR_PARTITION_REUSED) {\n+        let (expected_reuse, comp_kind) = if attr.check_name(sym::rustc_partition_reused) {\n             (CguReuse::PreLto, ComparisonKind::AtLeast)\n-        } else if attr.check_name(ATTR_PARTITION_CODEGENED) {\n+        } else if attr.check_name(sym::rustc_partition_codegened) {\n             (CguReuse::No, ComparisonKind::Exact)\n-        } else if attr.check_name(ATTR_EXPECTED_CGU_REUSE) {\n+        } else if attr.check_name(sym::rustc_expected_cgu_reuse) {\n             match &*self.field(attr, sym::kind).as_str() {\n                 \"no\" => (CguReuse::No, ComparisonKind::Exact),\n                 \"pre-lto\" => (CguReuse::PreLto, ComparisonKind::Exact),"}, {"sha": "c919db070a6bb422087198aee8b4319ea07c2d7b", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71278cbdcb0aaf93edd370c6aec24d670a3c1eab/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=71278cbdcb0aaf93edd370c6aec24d670a3c1eab", "patch": "@@ -22,7 +22,6 @@ use rustc::hir::Node as HirNode;\n use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit;\n-use rustc::ich::{ATTR_DIRTY, ATTR_CLEAN};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n@@ -224,7 +223,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n \n         let mut all_attrs = FindAllAttrs {\n             tcx,\n-            attr_names: vec![ATTR_DIRTY, ATTR_CLEAN],\n+            attr_names: vec![sym::rustc_dirty, sym::rustc_clean],\n             found_attrs: vec![],\n         };\n         intravisit::walk_crate(&mut all_attrs, krate);\n@@ -246,9 +245,9 @@ impl DirtyCleanVisitor<'tcx> {\n     fn assertion_maybe(&mut self, item_id: hir::HirId, attr: &Attribute)\n         -> Option<Assertion>\n     {\n-        let is_clean = if attr.check_name(ATTR_DIRTY) {\n+        let is_clean = if attr.check_name(sym::rustc_dirty) {\n             false\n-        } else if attr.check_name(ATTR_CLEAN) {\n+        } else if attr.check_name(sym::rustc_clean) {\n             true\n         } else {\n             // skip: not rustc_clean/dirty"}]}