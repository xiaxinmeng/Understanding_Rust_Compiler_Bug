{"sha": "e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMTI5Yjc1ZjhiZjRhYWNjZmFmM2IyYjZkNjE4YzQ2Zjk5OGYwYjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-19T23:49:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-20T16:35:48Z"}, "message": "Rollup merge of #39142 - nikomatsakis:issue-38973, r=brson\n\nrun rustdoc tests in the same sort of thread rustc runs in\n\nNot sure yet if this is the problem in #38973 but seems like an improvement regardless.\n\nr? @brson", "tree": {"sha": "ce5df3984494b2765b5fcaef978c161aefdac554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce5df3984494b2765b5fcaef978c161aefdac554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0", "html_url": "https://github.com/rust-lang/rust/commit/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1df6489cadf0c49963ebb2789490a7168e6f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1df6489cadf0c49963ebb2789490a7168e6f85", "html_url": "https://github.com/rust-lang/rust/commit/1e1df6489cadf0c49963ebb2789490a7168e6f85"}, {"sha": "d25f066c07a88a5eeff1e3e8799a12ffe844e959", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25f066c07a88a5eeff1e3e8799a12ffe844e959", "html_url": "https://github.com/rust-lang/rust/commit/d25f066c07a88a5eeff1e3e8799a12ffe844e959"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "48eb6f68564f07bb35f761ec3efe4c87618ff3dd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0", "patch": "@@ -82,6 +82,7 @@ use rustc::util::common::time;\n \n use serialize::json::ToJson;\n \n+use std::any::Any;\n use std::cmp::max;\n use std::cmp::Ordering::Equal;\n use std::default::Default;\n@@ -1018,15 +1019,34 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n     }\n }\n \n+/// Runs `f` in a suitable thread for running `rustc`; returns a\n+/// `Result` with either the return value of `f` or -- if a panic\n+/// occurs -- the panic value.\n+pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n+    where F: FnOnce() -> R + Send + 'static,\n+          R: Send + 'static,\n+{\n+    // Temporarily have stack size set to 16MB to deal with nom-using crates failing\n+    const STACK_SIZE: usize = 16 * 1024 * 1024; // 16MB\n+\n+    let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n+\n+    // FIXME: Hacks on hacks. If the env is trying to override the stack size\n+    // then *don't* set it explicitly.\n+    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n+        cfg = cfg.stack_size(STACK_SIZE);\n+    }\n+\n+    let thread = cfg.spawn(f);\n+    thread.unwrap().join()\n+}\n+\n /// Run a procedure which will detect panics in the compiler and print nicer\n /// error messages rather than just failing the test.\n ///\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n-    // Temporarily have stack size set to 16MB to deal with nom-using crates failing\n-    const STACK_SIZE: usize = 16 * 1024 * 1024; // 16MB\n-\n     struct Sink(Arc<Mutex<Vec<u8>>>);\n     impl Write for Sink {\n         fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n@@ -1040,20 +1060,12 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n     let data = Arc::new(Mutex::new(Vec::new()));\n     let err = Sink(data.clone());\n \n-    let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n-\n-    // FIXME: Hacks on hacks. If the env is trying to override the stack size\n-    // then *don't* set it explicitly.\n-    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n-        cfg = cfg.stack_size(STACK_SIZE);\n-    }\n-\n-    let thread = cfg.spawn(move || {\n-         io::set_panic(Some(box err));\n-         f()\n-     });\n+    let result = in_rustc_thread(move || {\n+        io::set_panic(Some(box err));\n+        f()\n+    });\n \n-     if let Err(value) = thread.unwrap().join() {\n+    if let Err(value) = result {\n         // Thread panicked without emitting a fatal diagnostic\n         if !value.is::<errors::FatalError>() {\n             let emitter ="}, {"sha": "1f224cac9e91f98c43ded86d2055ff3fd179cac8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e1129b75f8bf4aaccfaf3b2b6d618c46f998f0b0", "patch": "@@ -29,7 +29,7 @@ use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n-use rustc_driver::{driver, Compilation};\n+use rustc_driver::{self, driver, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n@@ -429,19 +429,26 @@ impl Collector {\n                 should_panic: testing::ShouldPanic::No,\n             },\n             testfn: testing::DynTestFn(box move |()| {\n-                runtest(&test,\n-                        &cratename,\n-                        cfgs,\n-                        libs,\n-                        externs,\n-                        should_panic,\n-                        no_run,\n-                        as_test_harness,\n-                        compile_fail,\n-                        error_codes,\n-                        &opts,\n-                        maybe_sysroot);\n-            })\n+                match {\n+                    rustc_driver::in_rustc_thread(move || {\n+                        runtest(&test,\n+                                &cratename,\n+                                cfgs,\n+                                libs,\n+                                externs,\n+                                should_panic,\n+                                no_run,\n+                                as_test_harness,\n+                                compile_fail,\n+                                error_codes,\n+                                &opts,\n+                                maybe_sysroot)\n+                    })\n+                } {\n+                    Ok(()) => (),\n+                    Err(err) => panic::resume_unwind(err),\n+                }\n+            }),\n         });\n     }\n "}]}