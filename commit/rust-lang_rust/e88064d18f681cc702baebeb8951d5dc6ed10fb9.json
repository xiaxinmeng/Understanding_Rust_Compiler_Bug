{"sha": "e88064d18f681cc702baebeb8951d5dc6ed10fb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ODA2NGQxOGY2ODFjYzcwMmJhZWJlYjg5NTFkNWRjNmVkMTBmYjk=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-10-13T03:19:22Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-10-13T03:19:22Z"}, "message": "librustc: Combine C_struct and C_packed_struct.", "tree": {"sha": "75e529473af27165304d1493034ce0cb580017f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75e529473af27165304d1493034ce0cb580017f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88064d18f681cc702baebeb8951d5dc6ed10fb9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88064d18f681cc702baebeb8951d5dc6ed10fb9", "html_url": "https://github.com/rust-lang/rust/commit/e88064d18f681cc702baebeb8951d5dc6ed10fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88064d18f681cc702baebeb8951d5dc6ed10fb9/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95609699e3796f4911dc433e5a6edbe17847b0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/95609699e3796f4911dc433e5a6edbe17847b0e1", "html_url": "https://github.com/rust-lang/rust/commit/95609699e3796f4911dc433e5a6edbe17847b0e1"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "ce789ee7ab6550a7c8dc170d025a45b911abdadd", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=e88064d18f681cc702baebeb8951d5dc6ed10fb9", "patch": "@@ -506,30 +506,26 @@ pub fn trans_const(ccx: &mut CrateContext, r: &Repr, discr: Disr,\n         Univariant(ref st, _dro) => {\n             assert_eq!(discr, 0);\n             let contents = build_const_struct(ccx, st, vals);\n-            if st.packed {\n-                C_packed_struct(contents)\n-            } else {\n-                C_struct(contents)\n-            }\n+            C_struct(contents, st.packed)\n         }\n         General(ref cases) => {\n             let case = &cases[discr];\n             let max_sz = cases.iter().map(|x| x.size).max().unwrap();\n             let discr_ty = C_disr(ccx, discr);\n             let contents = build_const_struct(ccx, case,\n                                               ~[discr_ty] + vals);\n-            C_struct(contents + &[padding(max_sz - case.size)])\n+            C_struct(contents + &[padding(max_sz - case.size)], false)\n         }\n         NullablePointer{ nonnull: ref nonnull, nndiscr, ptrfield, _ } => {\n             if discr == nndiscr {\n-                C_struct(build_const_struct(ccx, nonnull, vals))\n+                C_struct(build_const_struct(ccx, nonnull, vals), false)\n             } else {\n                 assert_eq!(vals.len(), 0);\n                 let vals = do nonnull.fields.iter().enumerate().map |(i, &ty)| {\n                     let llty = type_of::sizing_type_of(ccx, ty);\n                     if i == ptrfield { C_null(llty) } else { C_undef(llty) }\n                 }.collect::<~[ValueRef]>();\n-                C_struct(build_const_struct(ccx, nonnull, vals))\n+                C_struct(build_const_struct(ccx, nonnull, vals), false)\n             }\n         }\n     }\n@@ -564,7 +560,7 @@ fn build_const_struct(ccx: &mut CrateContext, st: &Struct, vals: &[ValueRef])\n             offset = target_offset;\n         }\n         let val = if is_undef(vals[i]) {\n-            let wrapped = C_struct([vals[i]]);\n+            let wrapped = C_struct([vals[i]], false);\n             assert!(!is_undef(wrapped));\n             wrapped\n         } else {"}, {"sha": "1822237f45cac641b8a0c609069d5b342064e9dc", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e88064d18f681cc702baebeb8951d5dc6ed10fb9", "patch": "@@ -2936,7 +2936,7 @@ pub fn create_module_map(ccx: &mut CrateContext) -> (ValueRef, uint, uint) {\n             let elt = C_struct([\n                 C_estr_slice(ccx, *key),\n                 v_ptr\n-            ]);\n+            ], false);\n             elts.push(elt);\n     }\n     unsafe {\n@@ -3012,13 +3012,13 @@ pub fn fill_crate_map(ccx: &mut CrateContext, map: ValueRef) {\n                 p2i(ccx, mod_map),\n                 // byte size of the module map array, an entry consists of two integers\n                 C_int(ccx, ((mod_count * mod_struct_size) as int))\n-             ]),\n+             ], false),\n              C_struct([\n                 p2i(ccx, vec_elements),\n                 // byte size of the subcrates array, an entry consists of an integer\n                 C_int(ccx, (subcrates.len() * llsize_of_alloc(ccx, ccx.int_type)) as int)\n-             ])\n-        ]));\n+             ], false)\n+        ], false));\n     }\n }\n \n@@ -3052,7 +3052,7 @@ pub fn write_metadata(cx: &CrateContext, crate: &ast::Crate) {\n \n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let llmeta = C_bytes(encoder::encode_metadata(encode_parms, crate));\n-    let llconst = C_struct([llmeta]);\n+    let llconst = C_struct([llmeta], false);\n     let mut llglobal = do \"rust_metadata\".with_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(llconst).to_ref(), buf)"}, {"sha": "6b06d94fca9243565fe4654f9d222a9b92959f10", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=e88064d18f681cc702baebeb8951d5dc6ed10fb9", "patch": "@@ -848,7 +848,7 @@ pub fn C_floating(s: &str, t: Type) -> ValueRef {\n }\n \n pub fn C_nil() -> ValueRef {\n-    return C_struct([]);\n+    C_struct([], false)\n }\n \n pub fn C_bool(val: bool) -> ValueRef {\n@@ -913,7 +913,7 @@ pub fn C_estr_slice(cx: &mut CrateContext, s: @str) -> ValueRef {\n     unsafe {\n         let len = s.len();\n         let cs = llvm::LLVMConstPointerCast(C_cstr(cx, s), Type::i8p().to_ref());\n-        C_struct([cs, C_uint(cx, len)])\n+        C_struct([cs, C_uint(cx, len)], false)\n     }\n }\n \n@@ -927,18 +927,10 @@ pub fn C_zero_byte_arr(size: uint) -> ValueRef {\n     }\n }\n \n-pub fn C_struct(elts: &[ValueRef]) -> ValueRef {\n+pub fn C_struct(elts: &[ValueRef], packed: bool) -> ValueRef {\n     unsafe {\n         do elts.as_imm_buf |ptr, len| {\n-            llvm::LLVMConstStructInContext(base::task_llcx(), ptr, len as c_uint, False)\n-        }\n-    }\n-}\n-\n-pub fn C_packed_struct(elts: &[ValueRef]) -> ValueRef {\n-    unsafe {\n-        do elts.as_imm_buf |ptr, len| {\n-            llvm::LLVMConstStructInContext(base::task_llcx(), ptr, len as c_uint, True)\n+            llvm::LLVMConstStructInContext(base::task_llcx(), ptr, len as c_uint, packed as Bool)\n         }\n     }\n }"}, {"sha": "00431501e6423e9b56ea22d99c3df02681bde481", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=e88064d18f681cc702baebeb8951d5dc6ed10fb9", "patch": "@@ -94,7 +94,7 @@ pub fn const_vec(cx: @mut CrateContext, e: &ast::Expr, es: &[@ast::Expr])\n         let (vs, inlineable) = vec::unzip(es.iter().map(|e| const_expr(cx, *e)));\n         // If the vector contains enums, an LLVM array won't work.\n         let v = if vs.iter().any(|vi| val_ty(*vi) != llunitty) {\n-            C_struct(vs)\n+            C_struct(vs, false)\n         } else {\n             C_array(llunitty, vs)\n         };\n@@ -186,7 +186,7 @@ pub fn const_expr(cx: @mut CrateContext, e: &ast::Expr) -> (ValueRef, bool) {\n     match adjustment {\n         None => { }\n         Some(@ty::AutoAddEnv(ty::re_static, ast::BorrowedSigil)) => {\n-            llconst = C_struct([llconst, C_null(Type::opaque_box(cx).ptr_to())])\n+            llconst = C_struct([llconst, C_null(Type::opaque_box(cx).ptr_to())], false)\n         }\n         Some(@ty::AutoAddEnv(ref r, ref s)) => {\n             cx.sess.span_bug(e.span, format!(\"unexpected static function: \\\n@@ -227,7 +227,7 @@ pub fn const_expr(cx: @mut CrateContext, e: &ast::Expr) -> (ValueRef, bool) {\n                             match ty::get(ty).sty {\n                                 ty::ty_evec(_, ty::vstore_fixed(*)) => {\n                                     let size = machine::llsize_of(cx, val_ty(llconst));\n-                                    llconst = C_struct([llptr, size]);\n+                                    llconst = C_struct([llptr, size], false);\n                                 }\n                                 _ => {}\n                             }\n@@ -559,7 +559,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext,\n                 llvm::LLVMSetGlobalConstant(gv, True);\n                 SetLinkage(gv, PrivateLinkage);\n                 let p = const_ptrcast(cx, gv, llunitty);\n-                (C_struct([p, sz]), false)\n+                (C_struct([p, sz], false), false)\n               }\n               _ => cx.sess.span_bug(e.span, \"bad const-slice expr\")\n             }\n@@ -575,7 +575,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext,\n             };\n             let vs = vec::from_elem(n, const_expr(cx, elem).first());\n             let v = if vs.iter().any(|vi| val_ty(*vi) != llunitty) {\n-                C_struct(vs)\n+                C_struct(vs, false)\n             } else {\n                 C_array(llunitty, vs)\n             };"}, {"sha": "81466af6f747b842dc1b9dbbdb30b46f41bc0608", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88064d18f681cc702baebeb8951d5dc6ed10fb9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=e88064d18f681cc702baebeb8951d5dc6ed10fb9", "patch": "@@ -576,7 +576,7 @@ pub fn make_vtable(ccx: &mut CrateContext,\n             components.push(ptr)\n         }\n \n-        let tbl = C_struct(components);\n+        let tbl = C_struct(components, false);\n         let sym = token::gensym(\"vtable\");\n         let vt_gvar = do format!(\"vtable{}\", sym).with_c_str |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl).to_ref(), buf)"}]}