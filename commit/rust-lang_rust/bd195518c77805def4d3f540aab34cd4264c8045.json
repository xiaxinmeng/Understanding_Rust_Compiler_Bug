{"sha": "bd195518c77805def4d3f540aab34cd4264c8045", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTk1NTE4Yzc3ODA1ZGVmNGQzZjU0MGFhYjM0Y2Q0MjY0YzgwNDU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-03T01:55:31Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-03T02:27:07Z"}, "message": "Fix an apparent race in pipes.\n\nAlso removed some unsafety in pipes and added vec::consume_mut.", "tree": {"sha": "d9382d9862ef6ef5509cb13fa0a81d3e72c0a779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9382d9862ef6ef5509cb13fa0a81d3e72c0a779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd195518c77805def4d3f540aab34cd4264c8045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd195518c77805def4d3f540aab34cd4264c8045", "html_url": "https://github.com/rust-lang/rust/commit/bd195518c77805def4d3f540aab34cd4264c8045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd195518c77805def4d3f540aab34cd4264c8045/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110ff312dfa15fff3457d826302ef575ead0089a", "url": "https://api.github.com/repos/rust-lang/rust/commits/110ff312dfa15fff3457d826302ef575ead0089a", "html_url": "https://github.com/rust-lang/rust/commit/110ff312dfa15fff3457d826302ef575ead0089a"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "fd42ad73d3d1a7c03dadf140e04d46ed789cff38", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bd195518c77805def4d3f540aab34cd4264c8045/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd195518c77805def4d3f540aab34cd4264c8045/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=bd195518c77805def4d3f540aab34cd4264c8045", "patch": "@@ -117,6 +117,8 @@ struct packet_header {\n     }\n \n     unsafe fn unblock() {\n+        assert self.state != blocked || self.blocked_task != none;\n+        self.blocked_task = none;\n         alt swap_state_acq(self.state, empty) {\n           empty | blocked { }\n           terminated { self.state = terminated; }\n@@ -322,7 +324,7 @@ fn send<T: send, Tbuffer: send>(-p: send_packet_buffered<T, Tbuffer>,\n             rustrt::task_signal_event(\n                 task, ptr::addr_of(p.header) as *libc::c_void);\n           }\n-          none { fail ~\"blocked packet has no task\" }\n+          none { debug!{\"just kidding!\"} }\n         }\n \n         // The receiver will eventually clean this up.\n@@ -878,23 +880,28 @@ struct port_set<T: send> : recv<T> {\n \n     fn try_recv() -> option<T> {\n         let mut result = none;\n-        while result == none && self.ports.len() > 0 {\n-            let i = wait_many(self.ports.map(|p| p.header()));\n-            // dereferencing an unsafe pointer nonsense to appease the\n-            // borrowchecker.\n-            alt move unsafe {(*ptr::addr_of(self.ports[i])).try_recv()} {\n-              some(m) {\n-                  result = some(move_it!{m});\n-              }\n-              none {\n-                // Remove this port.\n-                let mut ports = ~[];\n-                self.ports <-> ports;\n-                vec::consume(ports,\n-                             |j, x| if i != j { vec::push(self.ports, x) });\n-              }\n+        // we have to swap the ports array so we aren't borrowing\n+        // aliasable mutable memory.\n+        let mut ports = ~[];\n+        ports <-> self.ports;\n+        while result == none && ports.len() > 0 {\n+            let i = wait_many(ports.map(|p| p.header()));\n+            alt move ports[i].try_recv() {\n+                some(m) {\n+                    result = some(move m);\n+                }\n+                none {\n+                    // Remove this port.\n+                    let mut ports_ = ~[];\n+                    ports <-> ports_;\n+                    vec::consume(ports_,\n+                                 |j, x| if i != j {\n+                                     vec::push(ports, x)\n+                                 });\n+                }\n             }\n         }\n+        ports <-> self.ports;\n         result\n     }\n "}, {"sha": "2606bdf72f8224c3a94758203e0aa2ce18bf626c", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bd195518c77805def4d3f540aab34cd4264c8045/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd195518c77805def4d3f540aab34cd4264c8045/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=bd195518c77805def4d3f540aab34cd4264c8045", "patch": "@@ -6,7 +6,7 @@ import libc::size_t;\n \n export append;\n export append_one;\n-export consume;\n+export consume, consume_mut;\n export init_op;\n export is_empty;\n export is_not_empty;\n@@ -490,6 +490,17 @@ fn consume<T>(+v: ~[T], f: fn(uint, +T)) unsafe {\n     unsafe::set_len(v, 0);\n }\n \n+fn consume_mut<T>(+v: ~[mut T], f: fn(uint, +T)) unsafe {\n+    do as_buf(v) |p, ln| {\n+        for uint::range(0, ln) |i| {\n+            let x <- *ptr::offset(p, i);\n+            f(i, x);\n+        }\n+    }\n+\n+    unsafe::set_len(v, 0);\n+}\n+\n /// Remove the last element from a vector and return it\n fn pop<T>(&v: ~[const T]) -> T {\n     let ln = len(v);"}]}