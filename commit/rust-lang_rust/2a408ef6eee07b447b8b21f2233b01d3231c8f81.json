{"sha": "2a408ef6eee07b447b8b21f2233b01d3231c8f81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDA4ZWY2ZWVlMDdiNDQ3YjhiMjFmMjIzM2IwMWQzMjMxYzhmODE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-11T01:30:33Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:39Z"}, "message": "Add most AVX2 intrinsics.", "tree": {"sha": "81a81204324c70b12d8352387b39c6003cca8e6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81a81204324c70b12d8352387b39c6003cca8e6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a408ef6eee07b447b8b21f2233b01d3231c8f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a408ef6eee07b447b8b21f2233b01d3231c8f81", "html_url": "https://github.com/rust-lang/rust/commit/2a408ef6eee07b447b8b21f2233b01d3231c8f81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a408ef6eee07b447b8b21f2233b01d3231c8f81/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b79aabd8fb5855543ba41d684ddf2f3e43139c", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b79aabd8fb5855543ba41d684ddf2f3e43139c", "html_url": "https://github.com/rust-lang/rust/commit/29b79aabd8fb5855543ba41d684ddf2f3e43139c"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "cab7ab2fecb82c755be50559709386f5546aebb8", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2a408ef6eee07b447b8b21f2233b01d3231c8f81/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a408ef6eee07b447b8b21f2233b01d3231c8f81/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=2a408ef6eee07b447b8b21f2233b01d3231c8f81", "patch": "@@ -129,6 +129,57 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             \"testnzc_ps\" => p!(\"avx.vtestnzc.ps.256\", (f32x8, f32x8) -> i32),\n             \"testz_pd\" => p!(\"avx.vtestz.pd.256\", (f64x4, f64x4) -> i32),\n             \"testz_ps\" => p!(\"avx.vtestz.ps.256\", (f32x8, f32x8) -> i32),\n+\n+            \"abs_epi16\" => p!(\"avx2.pabs.w\", (i16x16) -> i16x16),\n+            \"abs_epi32\" => p!(\"avx2.pabs.d\", (i32x8) -> i32x8),\n+            \"abs_epi8\" => p!(\"avx2.pabs.b\", (i8x32) -> i8x32),\n+            \"adds_epi16\" => p!(\"avx2.padds.w\", (i16x16, i16x16) -> i16x16),\n+            \"adds_epi8\" => p!(\"avx2.padds.b\", (i8x32, i8x32) -> i8x32),\n+            \"adds_epu16\" => p!(\"avx2.paddus.w\", (i16x16, i16x16) -> i16x16),\n+            \"adds_epu8\" => p!(\"avx2.paddus.b\", (i8x32, i8x32) -> i8x32),\n+            \"avg_epu16\" => p!(\"avx2.pavg.w\", (i16x16, i16x16) -> i16x16),\n+            \"avg_epu8\" => p!(\"avx2.pavg.b\", (i8x32, i8x32) -> i8x32),\n+            \"hadd_epi16\" => p!(\"avx2.phadd.w\", (i16x16, i16x16) -> i16x16),\n+            \"hadd_epi32\" => p!(\"avx2.phadd.d\", (i32x8, i32x8) -> i32x8),\n+            \"hadds_epi16\" => p!(\"avx2.phadd.sw\", (i16x16, i16x16) -> i16x16),\n+            \"hsub_epi16\" => p!(\"avx2.phsub.w\", (i16x16, i16x16) -> i16x16),\n+            \"hsub_epi32\" => p!(\"avx2.phsub.d\", (i32x8, i32x8) -> i32x8),\n+            \"hsubs_epi16\" => p!(\"avx2.phsub.sw\", (i16x16, i16x16) -> i16x16),\n+            \"madd_epi16\" => p!(\"avx2.pmadd.wd\", (i16x16, i16x16) -> i32x8),\n+            \"maddubs_epi16\" => p!(\"avx2.pmadd.ub.sw\", (i8x32, i8x32) -> i16x16),\n+            \"max_epi16\" => p!(\"avx2.pmaxs.w\", (i16x16, i16x16) -> i16x16),\n+            \"max_epi32\" => p!(\"avx2.pmaxs.d\", (i32x8, i32x8) -> i32x8),\n+            \"max_epi8\" => p!(\"avx2.pmaxs.b\", (i8x32, i8x32) -> i8x32),\n+            \"max_epu16\" => p!(\"avx2.pmaxu.w\", (i16x16, i16x16) -> i16x16),\n+            \"max_epu32\" => p!(\"avx2.pmaxu.d\", (i32x8, i32x8) -> i32x8),\n+            \"max_epu8\" => p!(\"avx2.pmaxu.b\", (i8x32, i8x32) -> i8x32),\n+            \"min_epi16\" => p!(\"avx2.pmins.w\", (i16x16, i16x16) -> i16x16),\n+            \"min_epi32\" => p!(\"avx2.pmins.d\", (i32x8, i32x8) -> i32x8),\n+            \"min_epi8\" => p!(\"avx2.pmins.b\", (i8x32, i8x32) -> i8x32),\n+            \"min_epu16\" => p!(\"avx2.pminu.w\", (i16x16, i16x16) -> i16x16),\n+            \"min_epu32\" => p!(\"avx2.pminu.d\", (i32x8, i32x8) -> i32x8),\n+            \"min_epu8\" => p!(\"avx2.pminu.b\", (i8x32, i8x32) -> i8x32),\n+            \"mul_epi32\" => p!(\"avx2.mul.dq\", (i32x8, i32x8) -> i64x4),\n+            \"mul_epu32\" => p!(\"avx2.mulu.dq\", (i32x8, i32x8) -> i64x4),\n+            \"mulhi_epi16\" => p!(\"avx2.pmulh.w\", (i8x32, i8x32) -> i8x32),\n+            \"mulhi_epu16\" => p!(\"avx2.pmulhu.w\", (i8x32, i8x32) -> i8x32),\n+            \"mulhrs_epi16\" => p!(\"avx2.pmul.hr.sw\", (i16x16, i16x16) -> i16x16),\n+            \"packs_epi16\" => p!(\"avx2.packsswb\", (i16x16, i16x16) -> i8x32),\n+            \"packs_epi32\" => p!(\"avx2.packssdw\", (i32x8, i32x8) -> i16x16),\n+            \"packus_epi16\" => p!(\"avx2.packuswb\", (i16x16, i16x16) -> i8x32),\n+            \"packus_epi32\" => p!(\"avx2.packusdw\", (i32x8, i32x8) -> i16x16),\n+            \"permutevar8x32_epi32\" => p!(\"avx2.permd\", (i32x8, i32x8) -> i32x8),\n+            \"permutevar8x32_ps\" => p!(\"avx2.permps\", (f32x8, i32x8) -> i32x8),\n+            \"sad_epu8\" => p!(\"avx2.psad.bw\", (i8x32, i8x32) -> i64x4),\n+            \"shuffle_epi8\" => p!(\"avx2.pshuf.b\", (i8x32, i8x32) -> i8x32),\n+            \"sign_epi16\" => p!(\"avx2.psign.w\", (i16x16, i16x16) -> i16x16),\n+            \"sign_epi32\" => p!(\"avx2.psign.d\", (i32x8, i32x8) -> i32x8),\n+            \"sign_epi8\" => p!(\"avx2.psign.b\", (i8x32, i8x32) -> i8x32),\n+            \"subs_epi16\" => p!(\"avx2.psubs.w\", (i16x16, i16x16) -> i16x16),\n+            \"subs_epi8\" => p!(\"avx2.psubs.b\", (i8x32, i8x32) -> i8x32),\n+            \"subs_epu16\" => p!(\"avx2.psubus.w\", (i16x16, i16x16) -> i16x16),\n+            \"subs_epu8\" => p!(\"avx2.psubus.b\", (i8x32, i8x32) -> i8x32),\n+\n             _ => return None,\n         })\n     } else {"}]}