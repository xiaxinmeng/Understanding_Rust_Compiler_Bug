{"sha": "7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMGFlZTc0YmYxNTQ0NmEyMzU4MzBjMGVhN2EzMmFjMWVhNzY1YTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T13:09:12Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T13:25:33Z"}, "message": "Move to short type parameter keywords\n\nIssue #1076", "tree": {"sha": "5437e48772652930646fb5f8603c40752df6e79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5437e48772652930646fb5f8603c40752df6e79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "html_url": "https://github.com/rust-lang/rust/commit/7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e65dffc30b854179a366272957be661a6fdb7bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e65dffc30b854179a366272957be661a6fdb7bd", "html_url": "https://github.com/rust-lang/rust/commit/8e65dffc30b854179a366272957be661a6fdb7bd"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "e76c95b6560cba6e49c0b071273be05eec9f5b1a", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "patch": "@@ -26,9 +26,9 @@\n *\n * Since this forms a lattice, we denote the capabilites in terms of a\n * worst-case requirement. That is, if your function needs to move-and-send (or\n-* copy) your T, you write fn<unique T>(...). If you need to move but not send,\n+* copy) your T, you write fn<uniq T>(...). If you need to move but not send,\n * you write fn<T>(...). And if you need neither -- can work with any sort of\n-* pinned data at all -- then you write fn<pinned T>(...).\n+* pinned data at all -- then you write fn<pin T>(...).\n *\n * Most types are unique or shared. Other possible name combinations for these\n * two: (tree, graph; pruned, pooled; message, local; owned, common) are"}, {"sha": "9c33901741a6bd9ee20df2be72d74e48ce7a52ce", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "patch": "@@ -1735,11 +1735,11 @@ fn parse_block_tail(p: parser, lo: uint, s: ast::blk_check_mode) -> ast::blk {\n }\n \n fn parse_ty_param(p: parser) -> ast::ty_param {\n-    let k = if eat_word(p, \"pinned\") || eat_word(p, \"pin\") {\n-        ast::kind_pinned\n-    } else if eat_word(p, \"unique\") || eat_word(p, \"uniq\") {\n-        ast::kind_unique\n-    } else { eat_word(p, \"shar\"); ast::kind_shared };\n+    let k = if eat_word(p, \"pin\") { ast::kind_pinned }\n+            else if eat_word(p, \"uniq\") { ast::kind_unique }\n+            else if eat_word(p, \"shar\") { ast::kind_shared }\n+            // FIXME distinguish implied shared from explicit\n+            else { ast::kind_shared };\n     ret {ident: parse_ident(p), kind: k};\n }\n "}, {"sha": "f30688f7ee5a75d1502406ee8fa87bc6e2a09afc", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "patch": "@@ -1193,8 +1193,8 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n \n fn print_kind(s: ps, kind: ast::kind) {\n     alt kind {\n-      ast::kind_unique. { word_nbsp(s, \"unique\"); }\n-      ast::kind_pinned. { word_nbsp(s, \"pinned\"); }\n+      ast::kind_unique. { word_nbsp(s, \"uniq\"); }\n+      ast::kind_pinned. { word_nbsp(s, \"pin\"); }\n       _ {/* fallthrough */ }\n     }\n }"}, {"sha": "7599bb24185774c2249ae7b1a81be94319647b0a", "filename": "src/lib/comm.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "patch": "@@ -41,9 +41,9 @@ native \"c-stack-cdecl\" mod rustrt {\n     type void;\n     type rust_port;\n \n-    fn chan_id_send<unique T>(t: *sys::type_desc,\n-                              target_task: task::task, target_port: port_id,\n-                              -data: T);\n+    fn chan_id_send<uniq T>(t: *sys::type_desc,\n+                            target_task: task::task, target_port: port_id,\n+                            -data: T);\n \n     fn new_port(unit_sz: uint) -> *rust_port;\n     fn del_port(po: *rust_port);\n@@ -52,7 +52,7 @@ native \"c-stack-cdecl\" mod rustrt {\n }\n \n native \"rust-intrinsic\" mod rusti {\n-    fn recv<unique T>(port: *rustrt::rust_port) -> T;\n+    fn recv<uniq T>(port: *rustrt::rust_port) -> T;\n }\n \n type port_id = int;\n@@ -75,7 +75,7 @@ dropped.\n \n Channels may be duplicated and themselves transmitted over other channels.\n */\n-tag chan<unique T> {\n+tag chan<uniq T> {\n     chan_t(task::task, port_id);\n }\n \n@@ -95,7 +95,7 @@ transmitted. If a port value is copied, both copies refer to the same port.\n \n Ports may be associated with multiple <chan>s.\n */\n-tag port<unique T> { port_t(@port_ptr); }\n+tag port<uniq T> { port_t(@port_ptr); }\n \n /*\n Function: send\n@@ -105,7 +105,7 @@ Sends data over a channel.\n The sent data is moved into the channel, whereupon the caller loses access\n to it.\n */\n-fn send<unique T>(ch: chan<T>, -data: T) {\n+fn send<uniq T>(ch: chan<T>, -data: T) {\n     let chan_t(t, p) = ch;\n     rustrt::chan_id_send(sys::get_type_desc::<T>(), t, p, data);\n     task::yield();\n@@ -116,7 +116,7 @@ Function: port\n \n Constructs a port.\n */\n-fn port<unique T>() -> port<T> {\n+fn port<uniq T>() -> port<T> {\n     port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>())))\n }\n \n@@ -128,7 +128,7 @@ Receive from a port.\n If no data is available on the port then the task will block until data\n becomes available.\n */\n-fn recv<unique T>(p: port<T>) -> T { ret rusti::recv(***p) }\n+fn recv<uniq T>(p: port<T>) -> T { ret rusti::recv(***p) }\n \n /*\n Function: chan\n@@ -137,6 +137,6 @@ Constructs a channel.\n \n The channel is bound to the port used to construct it.\n */\n-fn chan<unique T>(p: port<T>) -> chan<T> {\n+fn chan<uniq T>(p: port<T>) -> chan<T> {\n     chan_t(task::get_task(), rustrt::get_port_id(***p))\n }"}, {"sha": "1b5ebb999cfa0e5f2d7a386cd31508be510eaaf1", "filename": "src/lib/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0aee74bf15446a235830c0ea7a32ac1ea765a4/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "patch": "@@ -228,7 +228,7 @@ Returns:\n \n A handle to the new task\n */\n-fn spawn<unique T>(-data: T, f: fn(T)) -> task {\n+fn spawn<uniq T>(-data: T, f: fn(T)) -> task {\n     spawn_inner(data, f, none)\n }\n \n@@ -241,7 +241,7 @@ termination\n Immediately before termination, either on success or failure, the spawned\n task will send a <task_notification> message on the provided channel.\n */\n-fn spawn_notify<unique T>(-data: T, f: fn(T),\n+fn spawn_notify<uniq T>(-data: T, f: fn(T),\n                          notify: comm::chan<task_notification>) -> task {\n     spawn_inner(data, f, some(notify))\n }\n@@ -255,7 +255,7 @@ This is a convenience wrapper around spawn_notify which, when paired\n with <join> can be easily used to spawn a task then wait for it to\n complete.\n */\n-fn spawn_joinable<unique T>(-data: T, f: fn(T)) -> joinable_task {\n+fn spawn_joinable<uniq T>(-data: T, f: fn(T)) -> joinable_task {\n     let p = comm::port::<task_notification>();\n     let id = spawn_notify(data, f, comm::chan::<task_notification>(p));\n     ret (id, p);\n@@ -271,11 +271,11 @@ fn spawn_joinable<unique T>(-data: T, f: fn(T)) -> joinable_task {\n //\n // After the transition this should all be rewritten.\n \n-fn spawn_inner<unique T>(-data: T, f: fn(T),\n+fn spawn_inner<uniq T>(-data: T, f: fn(T),\n                           notify: option<comm::chan<task_notification>>)\n     -> task {\n \n-    fn wrapper<unique T>(-data: *u8, f: fn(T)) {\n+    fn wrapper<uniq T>(-data: *u8, f: fn(T)) {\n         let data: ~T = unsafe::reinterpret_cast(data);\n         f(*data);\n     }"}]}