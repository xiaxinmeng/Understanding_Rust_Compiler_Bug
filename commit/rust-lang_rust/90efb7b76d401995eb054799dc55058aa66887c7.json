{"sha": "90efb7b76d401995eb054799dc55058aa66887c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZWZiN2I3NmQ0MDE5OTVlYjA1NDc5OWRjNTUwNThhYTY2ODg3Yzc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T10:25:32Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T10:25:32Z"}, "message": "Fix typo", "tree": {"sha": "965a0244c73033e7a2715b433ee9a8617549765a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/965a0244c73033e7a2715b433ee9a8617549765a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90efb7b76d401995eb054799dc55058aa66887c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90efb7b76d401995eb054799dc55058aa66887c7", "html_url": "https://github.com/rust-lang/rust/commit/90efb7b76d401995eb054799dc55058aa66887c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90efb7b76d401995eb054799dc55058aa66887c7/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa3956b8a84de9e2e81e9f10ad1f72a0a935918", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa3956b8a84de9e2e81e9f10ad1f72a0a935918", "html_url": "https://github.com/rust-lang/rust/commit/1aa3956b8a84de9e2e81e9f10ad1f72a0a935918"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "3ece02c03744bcff5367e4a7b6b89fca2e640d33", "filename": "src/matches.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90efb7b76d401995eb054799dc55058aa66887c7/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90efb7b76d401995eb054799dc55058aa66887c7/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=90efb7b76d401995eb054799dc55058aa66887c7", "patch": "@@ -191,8 +191,8 @@ fn check_overlapping_arms(cx: &LateContext, arms: &[Arm]) {\n     if arms.len() >= 2 {\n         let ranges = all_ranges(cx, arms);\n         let overlap = match type_ranges(&ranges) {\n-            TypedRanges::IntRanges(ranges) => overlaping(&ranges).map(|(start, end)| (start.span, end.span)),\n-            TypedRanges::UintRanges(ranges) => overlaping(&ranges).map(|(start, end)| (start.span, end.span)),\n+            TypedRanges::IntRanges(ranges) => overlapping(&ranges).map(|(start, end)| (start.span, end.span)),\n+            TypedRanges::UintRanges(ranges) => overlapping(&ranges).map(|(start, end)| (start.span, end.span)),\n             TypedRanges::None => None,\n         };\n \n@@ -338,7 +338,7 @@ fn match_template(cx: &LateContext,\n     }\n }\n \n-fn overlaping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &SpannedRange<T>)>\n+fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &SpannedRange<T>)>\n     where T: Copy + Ord {\n     #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n     enum Kind<'a, T: 'a> {\n@@ -398,10 +398,10 @@ fn test_overlapping() {\n \n     let sp = |s, e| SpannedRange { span: DUMMY_SP, node: (s, e) };\n \n-    assert_eq!(None, overlaping::<u8>(&[]));\n-    assert_eq!(None, overlaping(&[sp(1, 4)]));\n-    assert_eq!(None, overlaping(&[sp(1, 4), sp(5, 6)]));\n-    assert_eq!(None, overlaping(&[sp(1, 4), sp(5, 6), sp(10, 11)]));\n-    assert_eq!(Some((&sp(1, 4), &sp(3, 6))), overlaping(&[sp(1, 4), sp(3, 6)]));\n-    assert_eq!(Some((&sp(5, 6), &sp(6, 11))), overlaping(&[sp(1, 4), sp(5, 6), sp(6, 11)]));\n+    assert_eq!(None, overlapping::<u8>(&[]));\n+    assert_eq!(None, overlapping(&[sp(1, 4)]));\n+    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6)]));\n+    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6), sp(10, 11)]));\n+    assert_eq!(Some((&sp(1, 4), &sp(3, 6))), overlapping(&[sp(1, 4), sp(3, 6)]));\n+    assert_eq!(Some((&sp(5, 6), &sp(6, 11))), overlapping(&[sp(1, 4), sp(5, 6), sp(6, 11)]));\n }"}]}