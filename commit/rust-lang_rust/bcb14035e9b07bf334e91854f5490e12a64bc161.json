{"sha": "bcb14035e9b07bf334e91854f5490e12a64bc161", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYjE0MDM1ZTliMDdiZjMzNGU5MTg1NGY1NDkwZTEyYTY0YmMxNjE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-14T15:54:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-14T15:54:53Z"}, "message": "Rollup merge of #82056 - b-naber:mut_for_loop_bug, r=oli-obk\n\nfix ice (#82032)\n\nFixes https://github.com/rust-lang/rust/issues/82032", "tree": {"sha": "611455f9f853740448cfcbd15fe2b73710a43c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611455f9f853740448cfcbd15fe2b73710a43c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb14035e9b07bf334e91854f5490e12a64bc161", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKUfOCRBK7hj4Ov3rIwAAdHIIAH34XscfHcrUrCGolhR/TAx6\nk1JPPb3WfN7vEXo5UG4/i+AZq3ZqZsaAlaH/hX801P9LQmFsRzhqWuR4XNICNOfn\noczTDKE+Z5leMfW6lhae9k32TtCLhjnUgBWmO0D3pntenQM1PtvuyW9G6qKn4vzd\nlugVRlqVeXR3mMhDFMGxSkkDY4W6fTEyRZgT1C2pWG5iQ7NB4N6O51M97a+1dRBI\nxUQ9upRHpPd4bNbWj2UFIv/12xqYPQ3Oq6B8qCSf1zhDeBbco5FMVxYCRAm/FD44\niAnAVAnzS8ZKFY1QIbkpAEKEKWjunJ1ZhBVtRYkCvai187J4SN6zCefjH9OBWwU=\n=Cv4K\n-----END PGP SIGNATURE-----\n", "payload": "tree 611455f9f853740448cfcbd15fe2b73710a43c5a\nparent c8dacf95aed03733fb67b939c5d08367fe1ace40\nparent 26ca5fb06f9153ea84397134e24d8db208df5fd0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613318093 +0100\ncommitter GitHub <noreply@github.com> 1613318093 +0100\n\nRollup merge of #82056 - b-naber:mut_for_loop_bug, r=oli-obk\n\nfix ice (#82032)\n\nFixes https://github.com/rust-lang/rust/issues/82032\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb14035e9b07bf334e91854f5490e12a64bc161", "html_url": "https://github.com/rust-lang/rust/commit/bcb14035e9b07bf334e91854f5490e12a64bc161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb14035e9b07bf334e91854f5490e12a64bc161/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8dacf95aed03733fb67b939c5d08367fe1ace40", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8dacf95aed03733fb67b939c5d08367fe1ace40", "html_url": "https://github.com/rust-lang/rust/commit/c8dacf95aed03733fb67b939c5d08367fe1ace40"}, {"sha": "26ca5fb06f9153ea84397134e24d8db208df5fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ca5fb06f9153ea84397134e24d8db208df5fd0", "html_url": "https://github.com/rust-lang/rust/commit/26ca5fb06f9153ea84397134e24d8db208df5fd0"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "0400431a542ee74825501726b2a7a170d23d6a81", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bcb14035e9b07bf334e91854f5490e12a64bc161/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb14035e9b07bf334e91854f5490e12a64bc161/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=bcb14035e9b07bf334e91854f5490e12a64bc161", "patch": "@@ -1,6 +1,7 @@\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_index::vec::Idx;\n+use rustc_middle::hir::map::Map;\n use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::{\n@@ -543,13 +544,24 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     // Attempt to search similar mutable associated items for suggestion.\n     // In the future, attempt in all path but initially for RHS of for_loop\n     fn suggest_similar_mut_method_for_for_loop(&self, err: &mut DiagnosticBuilder<'_>) {\n-        let hir = self.infcx.tcx.hir();\n-        let node = hir.item(self.mir_hir_id());\n         use hir::{\n-            Expr,\n+            BodyId, Expr,\n             ExprKind::{Block, Call, DropTemps, Match, MethodCall},\n+            HirId, ImplItem, ImplItemKind, Item, ItemKind,\n         };\n-        if let hir::ItemKind::Fn(_, _, body_id) = node.kind {\n+\n+        fn maybe_body_id_of_fn(hir_map: &Map<'tcx>, id: HirId) -> Option<BodyId> {\n+            match hir_map.find(id) {\n+                Some(Node::Item(Item { kind: ItemKind::Fn(_, _, body_id), .. }))\n+                | Some(Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(_, body_id), .. })) => {\n+                    Some(*body_id)\n+                }\n+                _ => None,\n+            }\n+        }\n+        let hir_map = self.infcx.tcx.hir();\n+        let mir_body_hir_id = self.mir_hir_id();\n+        if let Some(fn_body_id) = maybe_body_id_of_fn(&hir_map, mir_body_hir_id) {\n             if let Block(\n                 hir::Block {\n                     expr:\n@@ -579,7 +591,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ..\n                 },\n                 _,\n-            ) = hir.body(body_id).value.kind\n+            ) = hir_map.body(fn_body_id).value.kind\n             {\n                 let opt_suggestions = path_segment\n                     .hir_id"}, {"sha": "4a01b60c1f62b55d25a8f5dbb63d95528ec97b24", "filename": "src/test/ui/borrowck/issue-82032.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcb14035e9b07bf334e91854f5490e12a64bc161/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb14035e9b07bf334e91854f5490e12a64bc161/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.rs?ref=bcb14035e9b07bf334e91854f5490e12a64bc161", "patch": "@@ -0,0 +1,16 @@\n+use std::{fs, io::*};\n+use std::collections::HashMap;\n+\n+type Handle = BufWriter<fs::File>;\n+struct Thing(HashMap<String, Handle>);\n+\n+impl Thing {\n+    pub fn die_horribly(&mut self) {\n+        for v in self.0.values() {\n+            v.flush();\n+              //~^ ERROR cannot borrow\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f272477a9f5b393dfb7040adc56c993b3ede5ed2", "filename": "src/test/ui/borrowck/issue-82032.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcb14035e9b07bf334e91854f5490e12a64bc161/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcb14035e9b07bf334e91854f5490e12a64bc161/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.stderr?ref=bcb14035e9b07bf334e91854f5490e12a64bc161", "patch": "@@ -0,0 +1,14 @@\n+error[E0596]: cannot borrow `*v` as mutable, as it is behind a `&` reference\n+  --> $DIR/issue-82032.rs:10:13\n+   |\n+LL |         for v in self.0.values() {\n+   |                  ---------------\n+   |                  |      |\n+   |                  |      help: use mutable method: `values_mut()`\n+   |                  this iterator yields `&` references\n+LL |             v.flush();\n+   |             ^ `v` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}