{"sha": "8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZDRlZDlmOTVhOWM3MjI4ZWMxMDk4ODU1MGVjMDgwOGIxYTRlNzU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-01T00:13:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-01T00:13:29Z"}, "message": "Rollup merge of #76909 - timvermeulen:advance_by, r=Amanieu\n\nAdd Iterator::advance_by and DoubleEndedIterator::advance_back_by\n\nThis PR adds the iterator method\n\n```rust\nfn advance_by(&mut self, n: usize) -> Result<(), usize>\n```\n\nthat advances the iterator by `n` elements, returning `Ok(())` if this succeeds or `Err(len)` if the length of the iterator was less than `n`.\n\nCurrently `Iterator::nth` is the method to override for efficiently advancing an iterator by multiple elements at once. `advance_by` is superior for this purpose because\n- it's simpler to implement: instead of advancing the iterator and producing the next element you only need to advance the iterator\n- it composes better: iterators like `Chain` and `FlatMap` can implement `advance_by` in terms of `advance_by` on their inner iterators, but they cannot implement `nth` in terms of `nth` on their inner iterators (see #60395)\n- the default implementation of `nth` can trivially be implemented in terms of `advance_by` and `next`, which this PR also does\n\nThis PR also adds `DoubleEndedIterator::advance_back_by` for all the same reasons.\n\nI'll make a tracking issue if it's decided this is worth merging. Also let me know if anything can be improved, this went through several iterations so there might very well still be room for improvement (especially in the doc comments). I've written overrides of these methods for most iterators that already override `nth`/`nth_back`, but those still need tests so I'll add them in a later PR.\n\ncc @cuviper @scottmcm @Amanieu", "tree": {"sha": "43cde8ac04e349fd801646b6ffc88364f0cd6f63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43cde8ac04e349fd801646b6ffc88364f0cd6f63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfdR8qCRBK7hj4Ov3rIwAAdHIIAFujIcX9gVQQ7LN8emxXgSHa\nzw8Jipq7mSYiYEkOw/+eIJlWhiadLLvyQNOX0SConKmELCXjAJvyfnInqW1s9XIT\nTZawUgEHi7PZBWNTOoi1W+9A2xyWW3xPlWH8tBQK2MzDnDRk0nHYdehy/oDdotBM\n3YuUzesOF4SKPLH3FLu7AOy5P0FrlePcjBFDiRaZcem26QSWK6PkN9dDCV4khOgj\nGtopSE8QqLmY1eONIp9DEnjnJEoLWO/CnjOTUXHW5QT6vbXSZdIN1QQoAnC3vMD+\n/nCH+4irFdHmntKkOOIQycFwZ+D5A/xjKUMwv4C+mw3bA+RgRgCW0mWGORUqvlI=\n=hBoz\n-----END PGP SIGNATURE-----\n", "payload": "tree 43cde8ac04e349fd801646b6ffc88364f0cd6f63\nparent ef663a8a48ea6b98b43cbfaefd99316b36b16825\nparent ecacc7534b6bf50205c37c89402565b82d95a257\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601511209 +0200\ncommitter GitHub <noreply@github.com> 1601511209 +0200\n\nRollup merge of #76909 - timvermeulen:advance_by, r=Amanieu\n\nAdd Iterator::advance_by and DoubleEndedIterator::advance_back_by\n\nThis PR adds the iterator method\n\n```rust\nfn advance_by(&mut self, n: usize) -> Result<(), usize>\n```\n\nthat advances the iterator by `n` elements, returning `Ok(())` if this succeeds or `Err(len)` if the length of the iterator was less than `n`.\n\nCurrently `Iterator::nth` is the method to override for efficiently advancing an iterator by multiple elements at once. `advance_by` is superior for this purpose because\n- it's simpler to implement: instead of advancing the iterator and producing the next element you only need to advance the iterator\n- it composes better: iterators like `Chain` and `FlatMap` can implement `advance_by` in terms of `advance_by` on their inner iterators, but they cannot implement `nth` in terms of `nth` on their inner iterators (see #60395)\n- the default implementation of `nth` can trivially be implemented in terms of `advance_by` and `next`, which this PR also does\n\nThis PR also adds `DoubleEndedIterator::advance_back_by` for all the same reasons.\n\nI'll make a tracking issue if it's decided this is worth merging. Also let me know if anything can be improved, this went through several iterations so there might very well still be room for improvement (especially in the doc comments). I've written overrides of these methods for most iterators that already override `nth`/`nth_back`, but those still need tests so I'll add them in a later PR.\n\ncc @cuviper @scottmcm @Amanieu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "html_url": "https://github.com/rust-lang/rust/commit/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef663a8a48ea6b98b43cbfaefd99316b36b16825", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef663a8a48ea6b98b43cbfaefd99316b36b16825", "html_url": "https://github.com/rust-lang/rust/commit/ef663a8a48ea6b98b43cbfaefd99316b36b16825"}, {"sha": "ecacc7534b6bf50205c37c89402565b82d95a257", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecacc7534b6bf50205c37c89402565b82d95a257", "html_url": "https://github.com/rust-lang/rust/commit/ecacc7534b6bf50205c37c89402565b82d95a257"}], "stats": {"total": 177, "additions": 161, "deletions": 16}, "files": [{"sha": "1e520b62f77c40b8e3fc0365410b0504e1c593dd", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "patch": "@@ -124,6 +124,11 @@ where\n         self.iter.size_hint()\n     }\n \n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.iter.advance_back_by(n)\n+    }\n+\n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n         self.iter.nth_back(n)\n@@ -164,6 +169,11 @@ where\n         self.iter.next()\n     }\n \n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.iter.advance_by(n)\n+    }\n+\n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n         self.iter.nth(n)"}, {"sha": "d370c16ea5a806d30cbb9a4aa0320c7f8ac0b544", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "patch": "@@ -91,6 +91,46 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n+    /// Advances the iterator from the back by `n` elements.\n+    ///\n+    /// `advance_back_by` is the reverse version of [`advance_by`]. This method will\n+    /// eagerly skip `n` elements starting from the back by calling [`next_back`] up\n+    /// to `n` times until [`None`] is encountered.\n+    ///\n+    /// `advance_back_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n+    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number of\n+    /// elements the iterator is advanced by before running out of elements (i.e. the length\n+    /// of the iterator). Note that `k` is always less than `n`.\n+    ///\n+    /// Calling `advance_back_by(0)` does not consume any elements and always returns [`Ok(())`].\n+    ///\n+    /// [`advance_by`]: Iterator::advance_by\n+    /// [`next_back`]: DoubleEndedIterator::next_back\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_advance_by)]\n+    ///\n+    /// let a = [3, 4, 5, 6];\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.advance_back_by(2), Ok(()));\n+    /// assert_eq!(iter.next_back(), Some(&4));\n+    /// assert_eq!(iter.advance_back_by(0), Ok(()));\n+    /// assert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"none\")]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        for i in 0..n {\n+            self.next_back().ok_or(i)?;\n+        }\n+        Ok(())\n+    }\n+\n     /// Returns the `n`th element from the end of the iterator.\n     ///\n     /// This is essentially the reversed version of [`Iterator::nth()`].\n@@ -134,14 +174,9 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n-    fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n-        for x in self.rev() {\n-            if n == 0 {\n-                return Some(x);\n-            }\n-            n -= 1;\n-        }\n-        None\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        self.advance_back_by(n).ok()?;\n+        self.next_back()\n     }\n \n     /// This is the reverse version of [`Iterator::try_fold()`]: it takes\n@@ -318,6 +353,9 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n     fn next_back(&mut self) -> Option<I::Item> {\n         (**self).next_back()\n     }\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        (**self).advance_back_by(n)\n+    }\n     fn nth_back(&mut self, n: usize) -> Option<I::Item> {\n         (**self).nth_back(n)\n     }"}, {"sha": "36d4a50856f53ae4b23a74419d1556066792774e", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "patch": "@@ -284,6 +284,44 @@ pub trait Iterator {\n         self.fold(None, some)\n     }\n \n+    /// Advances the iterator by `n` elements.\n+    ///\n+    /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n+    /// times until [`None`] is encountered.\n+    ///\n+    /// `advance_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n+    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number\n+    /// of elements the iterator is advanced by before running out of elements (i.e. the\n+    /// length of the iterator). Note that `k` is always less than `n`.\n+    ///\n+    /// Calling `advance_by(0)` does not consume any elements and always returns [`Ok(())`].\n+    ///\n+    /// [`next`]: Iterator::next\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_advance_by)]\n+    ///\n+    /// let a = [1, 2, 3, 4];\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.advance_by(2), Ok(()));\n+    /// assert_eq!(iter.next(), Some(&3));\n+    /// assert_eq!(iter.advance_by(0), Ok(()));\n+    /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"none\")]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        for i in 0..n {\n+            self.next().ok_or(i)?;\n+        }\n+        Ok(())\n+    }\n+\n     /// Returns the `n`th element of the iterator.\n     ///\n     /// Like most indexing operations, the count starts from zero, so `nth(0)`\n@@ -325,14 +363,9 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n-        while let Some(x) = self.next() {\n-            if n == 0 {\n-                return Some(x);\n-            }\n-            n -= 1;\n-        }\n-        None\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        self.advance_by(n).ok()?;\n+        self.next()\n     }\n \n     /// Creates an iterator starting at the same point, but stepping by\n@@ -3265,6 +3298,9 @@ impl<I: Iterator + ?Sized> Iterator for &mut I {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (**self).size_hint()\n     }\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        (**self).advance_by(n)\n+    }\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         (**self).nth(n)\n     }"}, {"sha": "b15d6d1b1f613cc2fd096de55e41784113d1174b", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "patch": "@@ -1570,6 +1570,66 @@ fn test_iterator_rev_nth() {\n     assert_eq!(v.iter().rev().nth(v.len()), None);\n }\n \n+#[test]\n+fn test_iterator_advance_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter();\n+        assert_eq!(iter.advance_by(i), Ok(()));\n+        assert_eq!(iter.next().unwrap(), &v[i]);\n+        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().advance_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().advance_by(100), Err(v.len()));\n+}\n+\n+#[test]\n+fn test_iterator_advance_back_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter();\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n+        assert_eq!(iter.next_back().unwrap(), &v[v.len() - 1 - i]);\n+        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().advance_back_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().advance_back_by(100), Err(v.len()));\n+}\n+\n+#[test]\n+fn test_iterator_rev_advance_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter().rev();\n+        assert_eq!(iter.advance_by(i), Ok(()));\n+        assert_eq!(iter.next().unwrap(), &v[v.len() - 1 - i]);\n+        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().rev().advance_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().rev().advance_by(100), Err(v.len()));\n+}\n+\n+#[test]\n+fn test_iterator_rev_advance_back_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter().rev();\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n+        assert_eq!(iter.next_back().unwrap(), &v[i]);\n+        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().rev().advance_back_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().rev().advance_back_by(100), Err(v.len()));\n+}\n+\n #[test]\n fn test_iterator_last() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "0c4ce867f542d64b08e5f393fa929beeabbdd900", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "patch": "@@ -41,6 +41,7 @@\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]\n #![feature(array_value_iter)]\n+#![feature(iter_advance_by)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]"}]}