{"sha": "62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZGEzOGQwMGQ4ZDA5ZGJhYWEwOTJjN2I1ZTdlYTM0M2ZkYzIxMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-24T22:11:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-24T22:11:12Z"}, "message": "Auto merge of #72287 - Aaron1011:feature/min-token-collect, r=petrochenkov\n\nStore tokens inside `ast::Expr`\n\nThis is a smaller version of #70091.\n\nWe now store captured tokens inside `ast::Expr`, which allows us to avoid some reparsing in `nt_to_tokenstream`. To try to mitigate the performance impact, we only collect tokens when we've seen an outer attribute.\n\nThis makes progress towards solving #43081. There are still many things left to do:\n\n* Collect tokens for other AST items.\n* Come up with a way to handle inner attributes (we need to be collecting tokens by the time we encounter them)\n* Avoid re-parsing when a `#[cfg]` attr is used.\n\nHowever, this is enough to fix spans for a simple example, which I've included as a test case.", "tree": {"sha": "2503b98a65a2aa4c53ead21374dd858178ae0096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2503b98a65a2aa4c53ead21374dd858178ae0096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "html_url": "https://github.com/rust-lang/rust/commit/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e85b4328fe18492894093c1092dfe509df4370", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e85b4328fe18492894093c1092dfe509df4370", "html_url": "https://github.com/rust-lang/rust/commit/46e85b4328fe18492894093c1092dfe509df4370"}, {"sha": "14382c6437140bdc2ffaa66edd66f5726a88f156", "url": "https://api.github.com/repos/rust-lang/rust/commits/14382c6437140bdc2ffaa66edd66f5726a88f156", "html_url": "https://github.com/rust-lang/rust/commit/14382c6437140bdc2ffaa66edd66f5726a88f156"}], "stats": {"total": 115, "additions": 97, "deletions": 18}, "files": [{"sha": "30bb5c0bffa6a27aa42af54b7fd156a8756744d4", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -1006,11 +1006,12 @@ pub struct Expr {\n     pub kind: ExprKind,\n     pub span: Span,\n     pub attrs: AttrVec,\n+    pub tokens: Option<TokenStream>,\n }\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Expr, 96);\n+rustc_data_structures::static_assert_size!(Expr, 104);\n \n impl Expr {\n     /// Returns `true` if this expression would be valid somewhere that expects a value;"}, {"sha": "7ececb814a6a3e567bce8ff994f473077ccafdb2", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -1095,7 +1095,10 @@ pub fn noop_visit_anon_const<T: MutVisitor>(AnonConst { id, value }: &mut AnonCo\n     vis.visit_expr(value);\n }\n \n-pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr, vis: &mut T) {\n+pub fn noop_visit_expr<T: MutVisitor>(\n+    Expr { kind, id, span, attrs, tokens: _ }: &mut Expr,\n+    vis: &mut T,\n+) {\n     match kind {\n         ExprKind::Box(expr) => vis.visit_expr(expr),\n         ExprKind::Array(exprs) => visit_exprs(exprs, vis),"}, {"sha": "3aab54ea909498f35e0511cc101954be1b353ef8", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -1126,6 +1126,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 kind: ExprKind::Path(qself.clone(), path.clone()),\n                                 span: ty.span,\n                                 attrs: AttrVec::new(),\n+                                tokens: None,\n                             };\n \n                             let ct = self.with_new_scopes(|this| hir::AnonConst {"}, {"sha": "224b52b239f4369d15a2010d42a2fe1c2526f40d", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -519,6 +519,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         kind: ast::ExprKind::InlineAsm(inline_asm),\n         span: sp,\n         attrs: ast::AttrVec::new(),\n+        tokens: None,\n     })\n }\n "}, {"sha": "fdf05ac3880b5c60c16b72e4d971c2508f70ecdf", "filename": "src/librustc_builtin_macros/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -52,6 +52,7 @@ pub fn expand_concat_idents<'cx>(\n                 kind: ast::ExprKind::Path(None, ast::Path::from_ident(self.ident)),\n                 span: self.ident.span,\n                 attrs: ast::AttrVec::new(),\n+                tokens: None,\n             }))\n         }\n "}, {"sha": "0f4efc153b941712f2db69dd217e1f2f6248ca02", "filename": "src/librustc_builtin_macros/llvm_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -61,6 +61,7 @@ pub fn expand_llvm_asm<'cx>(\n         kind: ast::ExprKind::LlvmInlineAsm(P(inline_asm)),\n         span: cx.with_def_site_ctxt(sp),\n         attrs: ast::AttrVec::new(),\n+        tokens: None,\n     }))\n }\n "}, {"sha": "649aac488fcb3295b5fe167aedd89ecb0236da95", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -594,6 +594,7 @@ impl DummyResult {\n             kind: if is_error { ast::ExprKind::Err } else { ast::ExprKind::Tup(Vec::new()) },\n             span: sp,\n             attrs: ast::AttrVec::new(),\n+            tokens: None,\n         })\n     }\n "}, {"sha": "6185e014d3c531fcd6400c3c506a247816b5c993", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -70,7 +70,13 @@ impl<'a> ExtCtxt<'a> {\n     pub fn anon_const(&self, span: Span, kind: ast::ExprKind) -> ast::AnonConst {\n         ast::AnonConst {\n             id: ast::DUMMY_NODE_ID,\n-            value: P(ast::Expr { id: ast::DUMMY_NODE_ID, kind, span, attrs: AttrVec::new() }),\n+            value: P(ast::Expr {\n+                id: ast::DUMMY_NODE_ID,\n+                kind,\n+                span,\n+                attrs: AttrVec::new(),\n+                tokens: None,\n+            }),\n         }\n     }\n \n@@ -205,7 +211,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn expr(&self, span: Span, kind: ast::ExprKind) -> P<ast::Expr> {\n-        P(ast::Expr { id: ast::DUMMY_NODE_ID, kind, span, attrs: AttrVec::new() })\n+        P(ast::Expr { id: ast::DUMMY_NODE_ID, kind, span, attrs: AttrVec::new(), tokens: None })\n     }\n \n     pub fn expr_path(&self, path: ast::Path) -> P<ast::Expr> {"}, {"sha": "b4ffd714feffafa837007d217ec7d7951f871141", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -34,6 +34,7 @@ pub fn placeholder(\n             span,\n             attrs: ast::AttrVec::new(),\n             kind: ast::ExprKind::MacCall(mac_placeholder()),\n+            tokens: None,\n         })\n     };\n     let ty = || P(ast::Ty { id, kind: ast::TyKind::MacCall(mac_placeholder()), span });"}, {"sha": "7eaaff05fb5f06eb538e071394140e4672ac606c", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -713,6 +713,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 kind: ast::ExprKind::Block(P(b), None),\n                 span: rustc_span::DUMMY_SP,\n                 attrs: AttrVec::new(),\n+                tokens: None,\n             });\n \n             ast::Stmt {\n@@ -728,6 +729,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             id: self.resolver.next_node_id(),\n             span: rustc_span::DUMMY_SP,\n             attrs: AttrVec::new(),\n+            tokens: None,\n         });\n \n         let loop_stmt = ast::Stmt {"}, {"sha": "8ca3f6c5768af2f18a2555962e2e6cbced7e7dc3", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -272,6 +272,12 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n             Some(tokenstream::TokenTree::token(token::Lifetime(ident.name), ident.span).into())\n         }\n         Nonterminal::NtTT(ref tt) => Some(tt.clone().into()),\n+        Nonterminal::NtExpr(ref expr) => {\n+            if expr.tokens.is_none() {\n+                debug!(\"missing tokens for expr {:?}\", expr);\n+            }\n+            prepend_attrs(sess, &expr.attrs, expr.tokens.as_ref(), span)\n+        }\n         _ => None,\n     };\n \n@@ -311,6 +317,8 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n             \"cached tokens found, but they're not \\\"probably equal\\\", \\\n                 going with stringified version\"\n         );\n+        info!(\"cached tokens: {:?}\", tokens);\n+        info!(\"reparsed tokens: {:?}\", tokens_for_real);\n     }\n     tokens_for_real\n }"}, {"sha": "f05d018613852d269194a591eac1094a753a8665", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -95,6 +95,7 @@ impl RecoverQPath for Expr {\n             kind: ExprKind::Path(qself, path),\n             attrs: AttrVec::new(),\n             id: ast::DUMMY_NODE_ID,\n+            tokens: None,\n         }\n     }\n }"}, {"sha": "e0c372848392ccce0a6601a4e735919aebf97fa0", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -4,6 +4,7 @@ use super::{BlockMode, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n+use log::debug;\n use rustc_ast::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n@@ -431,19 +432,23 @@ impl<'a> Parser<'a> {\n     /// Parses a prefix-unary-operator expr.\n     fn parse_prefix_expr(&mut self, attrs: Option<AttrVec>) -> PResult<'a, P<Expr>> {\n         let attrs = self.parse_or_use_outer_attributes(attrs)?;\n-        let lo = self.token.span;\n-        // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()\n-        let (hi, ex) = match self.token.uninterpolate().kind {\n-            token::Not => self.parse_unary_expr(lo, UnOp::Not), // `!expr`\n-            token::Tilde => self.recover_tilde_expr(lo),        // `~expr`\n-            token::BinOp(token::Minus) => self.parse_unary_expr(lo, UnOp::Neg), // `-expr`\n-            token::BinOp(token::Star) => self.parse_unary_expr(lo, UnOp::Deref), // `*expr`\n-            token::BinOp(token::And) | token::AndAnd => self.parse_borrow_expr(lo),\n-            token::Ident(..) if self.token.is_keyword(kw::Box) => self.parse_box_expr(lo),\n-            token::Ident(..) if self.is_mistaken_not_ident_negation() => self.recover_not_expr(lo),\n-            _ => return self.parse_dot_or_call_expr(Some(attrs)),\n-        }?;\n-        Ok(self.mk_expr(lo.to(hi), ex, attrs))\n+        self.maybe_collect_tokens(!attrs.is_empty(), |this| {\n+            let lo = this.token.span;\n+            // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()\n+            let (hi, ex) = match this.token.uninterpolate().kind {\n+                token::Not => this.parse_unary_expr(lo, UnOp::Not), // `!expr`\n+                token::Tilde => this.recover_tilde_expr(lo),        // `~expr`\n+                token::BinOp(token::Minus) => this.parse_unary_expr(lo, UnOp::Neg), // `-expr`\n+                token::BinOp(token::Star) => this.parse_unary_expr(lo, UnOp::Deref), // `*expr`\n+                token::BinOp(token::And) | token::AndAnd => this.parse_borrow_expr(lo),\n+                token::Ident(..) if this.token.is_keyword(kw::Box) => this.parse_box_expr(lo),\n+                token::Ident(..) if this.is_mistaken_not_ident_negation() => {\n+                    this.recover_not_expr(lo)\n+                }\n+                _ => return this.parse_dot_or_call_expr(Some(attrs)),\n+            }?;\n+            Ok(this.mk_expr(lo.to(hi), ex, attrs))\n+        })\n     }\n \n     fn parse_prefix_expr_common(&mut self, lo: Span) -> PResult<'a, (Span, P<Expr>)> {\n@@ -998,6 +1003,21 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn maybe_collect_tokens(\n+        &mut self,\n+        has_outer_attrs: bool,\n+        f: impl FnOnce(&mut Self) -> PResult<'a, P<Expr>>,\n+    ) -> PResult<'a, P<Expr>> {\n+        if has_outer_attrs {\n+            let (mut expr, tokens) = self.collect_tokens(f)?;\n+            debug!(\"maybe_collect_tokens: Collected tokens for {:?} (tokens {:?}\", expr, tokens);\n+            expr.tokens = Some(tokens);\n+            Ok(expr)\n+        } else {\n+            f(self)\n+        }\n+    }\n+\n     fn parse_lit_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n         match self.parse_opt_lit() {\n@@ -2169,7 +2189,7 @@ impl<'a> Parser<'a> {\n     }\n \n     crate fn mk_expr(&self, span: Span, kind: ExprKind, attrs: AttrVec) -> P<Expr> {\n-        P(Expr { kind, span, attrs, id: DUMMY_NODE_ID })\n+        P(Expr { kind, span, attrs, id: DUMMY_NODE_ID, tokens: None })\n     }\n \n     pub(super) fn mk_expr_err(&self, span: Span) -> P<Expr> {"}, {"sha": "cef600bed5fd729eaaa726555fd810ba853b3d6e", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -56,6 +56,7 @@ fn expr(kind: ExprKind) -> P<Expr> {\n         kind,\n         span: DUMMY_SP,\n         attrs: ThinVec::new(),\n+        tokens: None\n     })\n }\n \n@@ -200,6 +201,7 @@ impl MutVisitor for AddParens {\n                 kind: ExprKind::Paren(e),\n                 span: DUMMY_SP,\n                 attrs: ThinVec::new(),\n+                tokens: None\n             })\n         });\n     }"}, {"sha": "888785363cfe62d016706761d82d90d77eb21401", "filename": "src/test/ui/proc-macro/keep-expr-tokens.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:test-macros.rs\n+\n+#![feature(stmt_expr_attributes)]\n+#![feature(proc_macro_hygiene)]\n+\n+extern crate test_macros;\n+\n+use test_macros::recollect_attr;\n+\n+fn main() {\n+    #[test_macros::recollect_attr]\n+    for item in missing_fn() {} //~ ERROR cannot find\n+\n+    (#[recollect_attr] #[recollect_attr] ((#[recollect_attr] bad))); //~ ERROR cannot\n+}"}, {"sha": "2be8c0184da1c6c744ee7499858360fda4b6ddd3", "filename": "src/test/ui/proc-macro/keep-expr-tokens.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62da38d00d8d09dbaaa092c7b5e7ea343fdc2126/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr?ref=62da38d00d8d09dbaaa092c7b5e7ea343fdc2126", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find function `missing_fn` in this scope\n+  --> $DIR/keep-expr-tokens.rs:12:17\n+   |\n+LL |     for item in missing_fn() {}\n+   |                 ^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `bad` in this scope\n+  --> $DIR/keep-expr-tokens.rs:14:62\n+   |\n+LL |     (#[recollect_attr] #[recollect_attr] ((#[recollect_attr] bad)));\n+   |                                                              ^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}