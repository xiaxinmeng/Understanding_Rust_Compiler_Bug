{"sha": "1dc337645adcc6361c3a1705d15b25f634f4da90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzMzNzY0NWFkY2M2MzYxYzNhMTcwNWQxNWIyNWY2MzRmNGRhOTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-19T16:18:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-19T16:18:39Z"}, "message": "minor: typo", "tree": {"sha": "3d0919d618c2322740e04e1f1e678ec583b09158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d0919d618c2322740e04e1f1e678ec583b09158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc337645adcc6361c3a1705d15b25f634f4da90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc337645adcc6361c3a1705d15b25f634f4da90", "html_url": "https://github.com/rust-lang/rust/commit/1dc337645adcc6361c3a1705d15b25f634f4da90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc337645adcc6361c3a1705d15b25f634f4da90/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c595676f7e0933163f3cf10e10a1a9df0715876d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c595676f7e0933163f3cf10e10a1a9df0715876d", "html_url": "https://github.com/rust-lang/rust/commit/c595676f7e0933163f3cf10e10a1a9df0715876d"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "ee8f9253e5af5be9c95834d9d9128b1023671596", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc337645adcc6361c3a1705d15b25f634f4da90/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dc337645adcc6361c3a1705d15b25f634f4da90/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=1dc337645adcc6361c3a1705d15b25f634f4da90", "patch": "@@ -463,7 +463,7 @@ Mind the code--architecture gap: at the moment, we are using fewer feature flags\n In Rust, it is easy (often too easy) to add serialization to any type by adding `#[derive(Serialize)]`.\n This easiness is misleading -- serializable types impose significant backwards compatability constraints.\n If a type is serializable, then it is a part of some IPC boundary.\n-You often don't have control over the over side of this boundary, so changing serializable types are hard.\n+You often don't control the other side of this boundary, so changing serializable types are hard.\n \n For this reason, the types in `ide`, `base_db` and bellow are not serializable by design.\n If such types need to cross an IPC boundary, then the client of rust-analyzer needs to provide custom, client-specific serialization format."}]}