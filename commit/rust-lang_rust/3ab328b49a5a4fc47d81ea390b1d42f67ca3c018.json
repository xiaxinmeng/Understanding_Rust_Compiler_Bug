{"sha": "3ab328b49a5a4fc47d81ea390b1d42f67ca3c018", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjMyOGI0OWE1YTRmYzQ3ZDgxZWEzOTBiMWQ0MmY2N2NhM2MwMTg=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-03T13:14:36Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-03T13:20:15Z"}, "message": "use lsp WorkspaceEdit instead of custom source_file_edits and file_system_edits", "tree": {"sha": "41cc8ced298359bdfc834c991772237943ef2ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41cc8ced298359bdfc834c991772237943ef2ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018", "html_url": "https://github.com/rust-lang/rust/commit/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea2183799e7975d3d9000cec9bb9a3c001a3d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea2183799e7975d3d9000cec9bb9a3c001a3d4e", "html_url": "https://github.com/rust-lang/rust/commit/aea2183799e7975d3d9000cec9bb9a3c001a3d4e"}], "stats": {"total": 116, "additions": 47, "deletions": 69}, "files": [{"sha": "7230fb101b9bd4fcb09ce14af87db590c960e767", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=3ab328b49a5a4fc47d81ea390b1d42f67ca3c018", "patch": "@@ -1,11 +1,16 @@\n use languageserver_types::{\n-    self, Location, Position, Range, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n-    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, InsertTextFormat,\n+    self, CreateFile, DocumentChangeOperation, DocumentChanges, InsertTextFormat, Location,\n+    Position, Range, RenameFile, ResourceOp, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n+    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier,\n+    WorkspaceEdit,\n };\n-use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition,FileRange,  CompletionItem, CompletionItemKind, InsertText, NavigationTarget};\n-use ra_editor::{LineCol, LineIndex, translate_offset_with_edit};\n-use ra_text_edit::{AtomTextEdit, TextEdit};\n+use ra_analysis::{\n+    CompletionItem, CompletionItemKind, FileId, FilePosition, FileRange, FileSystemEdit,\n+    InsertText, NavigationTarget, SourceChange, SourceFileEdit,\n+};\n+use ra_editor::{translate_offset_with_edit, LineCol, LineIndex};\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n+use ra_text_edit::{AtomTextEdit, TextEdit};\n \n use crate::{req, server_world::ServerWorld, Result};\n \n@@ -49,7 +54,7 @@ impl Conv for CompletionItemKind {\n     type Output = ::languageserver_types::CompletionItemKind;\n \n     fn conv(self) -> <Self as Conv>::Output {\n-        use ::languageserver_types::CompletionItemKind::*;\n+        use languageserver_types::CompletionItemKind::*;\n         match self {\n             CompletionItemKind::Keyword => Keyword,\n             CompletionItemKind::Snippet => Snippet,\n@@ -266,12 +271,20 @@ impl TryConvWith for SourceChange {\n                 })\n             }\n         };\n-        let source_file_edits = self.source_file_edits.try_conv_with(world)?;\n-        let file_system_edits = self.file_system_edits.try_conv_with(world)?;\n+        let mut document_changes: Vec<DocumentChangeOperation> = Vec::new();\n+        for resource_op in self.file_system_edits.try_conv_with(world)? {\n+            document_changes.push(DocumentChangeOperation::Op(resource_op));\n+        }\n+        for text_document_edit in self.source_file_edits.try_conv_with(world)? {\n+            document_changes.push(DocumentChangeOperation::Edit(text_document_edit));\n+        }\n+        let workspace_edit = WorkspaceEdit {\n+            changes: None,\n+            document_changes: Some(DocumentChanges::Operations(document_changes)),\n+        };\n         Ok(req::SourceChange {\n             label: self.label,\n-            source_file_edits,\n-            file_system_edits,\n+            workspace_edit,\n             cursor_position,\n         })\n     }\n@@ -301,21 +314,25 @@ impl TryConvWith for SourceFileEdit {\n \n impl TryConvWith for FileSystemEdit {\n     type Ctx = ServerWorld;\n-    type Output = req::FileSystemEdit;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<req::FileSystemEdit> {\n+    type Output = ResourceOp;\n+    fn try_conv_with(self, world: &ServerWorld) -> Result<ResourceOp> {\n         let res = match self {\n             FileSystemEdit::CreateFile { source_root, path } => {\n-                let uri = world.path_to_uri(source_root, &path)?;\n-                req::FileSystemEdit::CreateFile { uri }\n+                let uri = world.path_to_uri(source_root, &path)?.to_string();\n+                ResourceOp::Create(CreateFile { uri, options: None })\n             }\n             FileSystemEdit::MoveFile {\n                 src,\n                 dst_source_root,\n                 dst_path,\n             } => {\n-                let src = world.file_id_to_uri(src)?;\n-                let dst = world.path_to_uri(dst_source_root, &dst_path)?;\n-                req::FileSystemEdit::MoveFile { src, dst }\n+                let old_uri = world.file_id_to_uri(src)?.to_string();\n+                let new_uri = world.path_to_uri(dst_source_root, &dst_path)?.to_string();\n+                ResourceOp::Rename(RenameFile {\n+                    old_uri,\n+                    new_uri,\n+                    options: None,\n+                })\n             }\n         };\n         Ok(res)"}, {"sha": "b41e90328024d6b31169ae32a5c651c60059c417", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=3ab328b49a5a4fc47d81ea390b1d42f67ca3c018", "patch": "@@ -1,14 +1,14 @@\n-use serde::{Serialize, Deserialize};\n use languageserver_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n use rustc_hash::FxHashMap;\n+use serde::{Deserialize, Serialize};\n use url_serde;\n \n pub use languageserver_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CompletionParams,\n     CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n     PublishDiagnosticsParams, ReferenceParams, SignatureHelp, TextDocumentEdit,\n-    TextDocumentPositionParams, TextEdit, WorkspaceSymbolParams,\n+    TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,\n };\n \n pub enum SyntaxTree {}\n@@ -151,26 +151,10 @@ pub struct Runnable {\n #[serde(rename_all = \"camelCase\")]\n pub struct SourceChange {\n     pub label: String,\n-    pub source_file_edits: Vec<TextDocumentEdit>,\n-    pub file_system_edits: Vec<FileSystemEdit>,\n+    pub workspace_edit: WorkspaceEdit,\n     pub cursor_position: Option<TextDocumentPositionParams>,\n }\n \n-#[derive(Serialize, Debug)]\n-#[serde(tag = \"type\", rename_all = \"camelCase\")]\n-pub enum FileSystemEdit {\n-    CreateFile {\n-        #[serde(with = \"url_serde\")]\n-        uri: Url,\n-    },\n-    MoveFile {\n-        #[serde(with = \"url_serde\")]\n-        src: Url,\n-        #[serde(with = \"url_serde\")]\n-        dst: Url,\n-    },\n-}\n-\n pub enum InternalFeedback {}\n \n impl Notification for InternalFeedback {"}, {"sha": "10dbf72c076488e3e77ddc36d3a64f12577465c2", "filename": "editors/code/src/commands/apply_source_change.ts", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3ab328b49a5a4fc47d81ea390b1d42f67ca3c018/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts?ref=3ab328b49a5a4fc47d81ea390b1d42f67ca3c018", "patch": "@@ -3,46 +3,23 @@ import * as lc from 'vscode-languageclient';\n \n import { Server } from '../server';\n \n-interface FileSystemEdit {\n-    type: string;\n-    uri?: string;\n-    src?: string;\n-    dst?: string;\n-}\n-\n export interface SourceChange {\n     label: string;\n-    sourceFileEdits: lc.TextDocumentEdit[];\n-    fileSystemEdits: FileSystemEdit[];\n+    workspaceEdit: lc.WorkspaceEdit;\n     cursorPosition?: lc.TextDocumentPositionParams;\n }\n \n export async function handle(change: SourceChange) {\n-    const wsEdit = new vscode.WorkspaceEdit();\n-    for (const sourceEdit of change.sourceFileEdits) {\n-        const uri = Server.client.protocol2CodeConverter.asUri(\n-            sourceEdit.textDocument.uri\n-        );\n-        const edits = Server.client.protocol2CodeConverter.asTextEdits(\n-            sourceEdit.edits\n-        );\n-        wsEdit.set(uri, edits);\n-    }\n+    const wsEdit = Server.client.protocol2CodeConverter.asWorkspaceEdit(change.workspaceEdit);\n     let created;\n     let moved;\n-    for (const fsEdit of change.fileSystemEdits) {\n-        switch (fsEdit.type) {\n-            case 'createFile':\n-                const uri = vscode.Uri.parse(fsEdit.uri!);\n-                wsEdit.createFile(uri);\n-                created = uri;\n-                break;\n-            case 'moveFile':\n-                const src = vscode.Uri.parse(fsEdit.src!);\n-                const dst = vscode.Uri.parse(fsEdit.dst!);\n-                wsEdit.renameFile(src, dst);\n-                moved = dst;\n-                break;\n+    if (change.workspaceEdit.documentChanges) {\n+        for (const docChange of change.workspaceEdit.documentChanges) {\n+            if (lc.CreateFile.is(docChange)) {\n+                created = docChange.uri;\n+            } else if (lc.RenameFile.is(docChange)) {\n+                moved = docChange.newUri;\n+            }\n         }\n     }\n     const toOpen = created || moved;\n@@ -65,6 +42,6 @@ export async function handle(change: SourceChange) {\n         if (!editor.selection.isEmpty) {\n             return;\n         }\n-        editor!.selection = new vscode.Selection(position, position);\n+        editor.selection = new vscode.Selection(position, position);\n     }\n }"}]}