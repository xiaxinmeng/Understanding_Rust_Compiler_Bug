{"sha": "b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Nzk2OTQ2NmMyM2E1MWZkZDdkYTI1YWEzY2NjOThlNTJkNThkM2I=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T17:18:42Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:37Z"}, "message": "Clear up some code", "tree": {"sha": "9cb771b0e17a3e99d3cf7972763552ae5edff595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cb771b0e17a3e99d3cf7972763552ae5edff595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "html_url": "https://github.com/rust-lang/rust/commit/b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b77969466c23a51fdd7da25aa3ccc98e52d58d3b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932dbe816e98d874ca1d7a7f0913ca9f67a94a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/932dbe816e98d874ca1d7a7f0913ca9f67a94a84", "html_url": "https://github.com/rust-lang/rust/commit/932dbe816e98d874ca1d7a7f0913ca9f67a94a84"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "1538c070f373a5e96948740ccdcf758e371abd21", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b77969466c23a51fdd7da25aa3ccc98e52d58d3b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77969466c23a51fdd7da25aa3ccc98e52d58d3b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "patch": "@@ -109,27 +109,18 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                 _ => None,\n             };\n \n-            // FIXME: safety in closures\n             let safety = match fn_sig.unsafety {\n                 hir::Unsafety::Normal => Safety::Safe,\n+                hir::Unsafety::Unsafe if tcx.is_min_const_fn(fn_def_id) => {\n+                    // As specified in #55607, a `const unsafe fn` differs\n+                    // from an `unsafe fn` in that its body is still considered\n+                    // safe code by default.\n+                    assert!(!implicit_argument.is_none());\n+                    Safety::Safe\n+                },\n                 hir::Unsafety::Unsafe => Safety::FnUnsafe,\n             };\n \n-            let safety = match fn_sig.unsafety {\n-                hir::Unsafety::Normal => Safety::Safe,\n-                hir::Unsafety::Unsafe => {\n-                    if tcx.is_min_const_fn(fn_def_id) => {\n-                        // As specified in #55607, a `const unsafe fn` differs\n-                        // from an `unsafe fn` in that its body is still considered\n-                        // safe code by default.\n-                        assert!(!implicit_argument.is_none());\n-                        Safety::Safe\n-                    } else {\n-                        Safety::Unsafe\n-                    }\n-                }\n-            };\n-\n             let body = tcx.hir.body(body_id);\n             let explicit_arguments =\n                 body.arguments"}, {"sha": "b47f1957ab4c9505087f33ee1979a939998a1599", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b77969466c23a51fdd7da25aa3ccc98e52d58d3b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77969466c23a51fdd7da25aa3ccc98e52d58d3b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "patch": "@@ -351,19 +351,22 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 // only some unsafety is allowed in const fn\n                 if self.min_const_fn {\n+                    let min_const_unsafe_fn = self.tcx.features().min_const_unsafe_fn;\n                     for violation in violations {\n                         match violation.kind {\n-                            // these are allowed\n-                            UnsafetyViolationKind::GatedConstFnCall => {\n+                            UnsafetyViolationKind::GatedConstFnCall if min_const_unsafe_fn => {\n+                                // these function calls to unsafe functions are allowed\n                                 // if `#![feature(min_const_unsafe_fn)]` is active\n-                                if !self.tcx.sess.features_untracked().min_const_unsafe_fn {\n-                                    if !self.violations.contains(&violation) {\n-                                        self.violations.push(violation.clone())\n-                                    }\n+                            },\n+                            UnsafetyViolationKind::GatedConstFnCall => {\n+                                // without the feature gate, we report errors\n+                                if !self.violations.contains(&violation) {\n+                                    self.violations.push(violation.clone())\n                                 }\n                             }\n                             // these unsafe things are stable in const fn\n                             UnsafetyViolationKind::GeneralAndConstFn => {},\n+                            // these things are forbidden in const fns\n                             UnsafetyViolationKind::General |\n                             UnsafetyViolationKind::BorrowPacked(_) |\n                             UnsafetyViolationKind::ExternStatic(_) => {"}]}