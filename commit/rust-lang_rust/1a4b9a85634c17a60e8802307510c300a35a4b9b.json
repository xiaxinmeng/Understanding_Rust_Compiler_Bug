{"sha": "1a4b9a85634c17a60e8802307510c300a35a4b9b", "node_id": "C_kwDOAAsO6NoAKDFhNGI5YTg1NjM0YzE3YTYwZTg4MDIzMDc1MTBjMzAwYTM1YTRiOWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T08:13:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T08:13:21Z"}, "message": "Auto merge of #95775 - RalfJung:miri-windows-compat, r=ChrisDenton\n\nmake windows compat_fn (crudely) work on Miri\n\nWith https://github.com/rust-lang/rust/pull/95469, Windows `compat_fn!` now has to be supported by Miri to even make stdout work. Unfortunately, it relies on some outside-of-Rust linker hacks (`#[link_section = \".CRT$XCU\"]`) that are rather hard to make work in Miri. So I came up with this crude hack to make this stuff work in Miri regardless. It should come at no cost for regular executions, so I hope this is okay.\n\nCc https://github.com/rust-lang/rust/issues/95627 `@ChrisDenton`", "tree": {"sha": "f28f638d81329169809584deacf70a644285855b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28f638d81329169809584deacf70a644285855b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a4b9a85634c17a60e8802307510c300a35a4b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4b9a85634c17a60e8802307510c300a35a4b9b", "html_url": "https://github.com/rust-lang/rust/commit/1a4b9a85634c17a60e8802307510c300a35a4b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a4b9a85634c17a60e8802307510c300a35a4b9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "html_url": "https://github.com/rust-lang/rust/commit/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32"}, {"sha": "c599a4cfc3e33903d6523ba7355f862780714bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/c599a4cfc3e33903d6523ba7355f862780714bda", "html_url": "https://github.com/rust-lang/rust/commit/c599a4cfc3e33903d6523ba7355f862780714bda"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "c55df04200313dfa524c272b1194db731fcf599a", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1a4b9a85634c17a60e8802307510c300a35a4b9b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4b9a85634c17a60e8802307510c300a35a4b9b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=1a4b9a85634c17a60e8802307510c300a35a4b9b", "patch": "@@ -77,6 +77,10 @@ macro_rules! compat_fn {\n             static INIT_TABLE_ENTRY: unsafe extern \"C\" fn() = init;\n \n             unsafe extern \"C\" fn init() {\n+                PTR = get_f();\n+            }\n+\n+            unsafe extern \"C\" fn get_f() -> Option<F> {\n                 // There is no locking here. This code is executed before main() is entered, and\n                 // is guaranteed to be single-threaded.\n                 //\n@@ -88,13 +92,13 @@ macro_rules! compat_fn {\n                 let symbol_name: *const u8 = concat!(stringify!($symbol), \"\\0\").as_ptr();\n                 let module_handle = $crate::sys::c::GetModuleHandleA(module_name as *const i8);\n                 if !module_handle.is_null() {\n-                    match $crate::sys::c::GetProcAddress(module_handle, symbol_name as *const i8).addr() {\n-                        0 => {}\n-                        n => {\n-                            PTR = Some(mem::transmute::<usize, F>(n));\n-                        }\n+                    let ptr = $crate::sys::c::GetProcAddress(module_handle, symbol_name as *const i8);\n+                    if !ptr.is_null() {\n+                        // Transmute to the right function pointer type.\n+                        return Some(mem::transmute(ptr));\n                     }\n                 }\n+                return None;\n             }\n \n             #[allow(dead_code)]\n@@ -105,10 +109,15 @@ macro_rules! compat_fn {\n             #[allow(dead_code)]\n             pub unsafe fn call($($argname: $argtype),*) -> $rettype {\n                 if let Some(ptr) = PTR {\n-                    ptr($($argname),*)\n-                } else {\n-                    $fallback_body\n+                    return ptr($($argname),*);\n+                }\n+                if cfg!(miri) {\n+                    // Miri does not run `init`, so we just call `get_f` each time.\n+                    if let Some(ptr) = get_f() {\n+                        return ptr($($argname),*);\n+                    }\n                 }\n+                $fallback_body\n             }\n         }\n "}]}