{"sha": "f593393ebb9bfa515caf168a9f037324eeb6edfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OTMzOTNlYmI5YmZhNTE1Y2FmMTY4YTlmMDM3MzI0ZWViNmVkZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-31T07:45:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-31T07:45:41Z"}, "message": "Specify actions", "tree": {"sha": "7bb131eb52b9eaf457ac80760000ca5544fc0626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bb131eb52b9eaf457ac80760000ca5544fc0626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f593393ebb9bfa515caf168a9f037324eeb6edfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f593393ebb9bfa515caf168a9f037324eeb6edfe", "html_url": "https://github.com/rust-lang/rust/commit/f593393ebb9bfa515caf168a9f037324eeb6edfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f593393ebb9bfa515caf168a9f037324eeb6edfe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1161718792a1841841a51bc8450d37c4f1ff535", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1161718792a1841841a51bc8450d37c4f1ff535", "html_url": "https://github.com/rust-lang/rust/commit/c1161718792a1841841a51bc8450d37c4f1ff535"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "daeeac76f637bd9f7c4da0a7a2c9567817177752", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=f593393ebb9bfa515caf168a9f037324eeb6edfe", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     FilePosition, NavigationTarget, RangeInfo,\n };\n \n-// Feature: Go To Definition\n+// Feature: Go to Definition\n //\n // Navigates to the definition of an identifier.\n //"}, {"sha": "622a094e60019c8893754503e0a9a579aa7eaedb", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=f593393ebb9bfa515caf168a9f037324eeb6edfe", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n-// Feature: Go To Implementation\n+// Feature: Go to Implementation\n //\n // Navigates to the impl block of structs, enums or traits. Also implemented as a code lens.\n //"}, {"sha": "e74a502ecb9acba938bfd5205ff3e69e3b5915ec", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=f593393ebb9bfa515caf168a9f037324eeb6edfe", "patch": "@@ -5,9 +5,15 @@ use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffs\n \n use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n-// Feature: Go To Type Definition\n+// Feature: Go to Type Definition\n //\n // Navigates to the type of an identifier.\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Go to Type Definition*\n+// |===\n pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n     position: FilePosition,"}, {"sha": "4bf2678e104685171a3d56f3bea95e21517d14da", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f593393ebb9bfa515caf168a9f037324eeb6edfe/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=f593393ebb9bfa515caf168a9f037324eeb6edfe", "patch": "@@ -44,6 +44,17 @@ pub enum RunnableKind {\n     Bin,\n }\n \n+// Feature: Run\n+//\n+// Shows a popup suggesting to run a test/benchmark/binary **at the current cursor\n+// location**. Super useful for repeatedly running just a single test. Do bind this\n+// to a shortcut!\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Run**\n+// |===\n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(file_id);"}, {"sha": "df8e73a20d5fc400defd7da1617b30eb8b533f8f", "filename": "docs/user/features.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f593393ebb9bfa515caf168a9f037324eeb6edfe/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/f593393ebb9bfa515caf168a9f037324eeb6edfe/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=f593393ebb9bfa515caf168a9f037324eeb6edfe", "patch": "@@ -4,12 +4,6 @@ you can use <kbd>Ctrl+Shift+P</kbd> to search for the corresponding action.\n \n ### Commands <kbd>ctrl+shift+p</kbd>\n \n-#### Run\n-\n-Shows a popup suggesting to run a test/benchmark/binary **at the current cursor\n-location**. Super useful for repeatedly running just a single test. Do bind this\n-to a shortcut!\n-\n #### Parent Module\n \n Navigates to the parent module of the current module."}, {"sha": "1f6fcc97410eb3c7a844704306d1fb316d0946ad", "filename": "docs/user/generated_features.adoc", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f593393ebb9bfa515caf168a9f037324eeb6edfe/docs%2Fuser%2Fgenerated_features.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/f593393ebb9bfa515caf168a9f037324eeb6edfe/docs%2Fuser%2Fgenerated_features.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_features.adoc?ref=f593393ebb9bfa515caf168a9f037324eeb6edfe", "patch": "@@ -29,7 +29,7 @@ Provides a tree of the symbols defined in the file. Can be used to\n |===\n \n \n-=== Go To Definition\n+=== Go to Definition\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_definition.rs[goto_definition.rs]\n \n \n@@ -42,7 +42,7 @@ Navigates to the definition of an identifier.\n |===\n \n \n-=== Go To Implementation\n+=== Go to Implementation\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_implementation.rs[goto_implementation.rs]\n \n \n@@ -55,12 +55,18 @@ Navigates to the impl block of structs, enums or traits. Also implemented as a c\n |===\n \n \n-=== Go To Type Definition\n+=== Go to Type Definition\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_type_definition.rs[goto_type_definition.rs]\n \n \n Navigates to the type of an identifier.\n \n+|===\n+| Editor  | Action Name\n+\n+| VS Code | **Go to Type Definition*\n+|===\n+\n \n === On Typing Assists\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/typing.rs[typing.rs]\n@@ -73,6 +79,21 @@ Some features trigger on typing certain characters:\n - typing `.` in a chain method call auto-indents\n \n \n+=== Run\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs[runnables.rs]\n+\n+\n+Shows a popup suggesting to run a test/benchmark/binary **at the current cursor\n+location**. Super useful for repeatedly running just a single test. Do bind this\n+to a shortcut!\n+\n+|===\n+| Editor  | Action Name\n+\n+| VS Code | **Rust Analyzer: Run**\n+|===\n+\n+\n === Workspace Symbol\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_db/src/symbol_index.rs[symbol_index.rs]\n "}, {"sha": "170a3e88942a7304ce0ab2f07981c4663ca02c4d", "filename": "xtask/src/codegen/gen_feature_docs.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f593393ebb9bfa515caf168a9f037324eeb6edfe/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f593393ebb9bfa515caf168a9f037324eeb6edfe/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs?ref=f593393ebb9bfa515caf168a9f037324eeb6edfe", "patch": "@@ -38,11 +38,7 @@ impl Feature {\n \n             for block in comment_blocks {\n                 let id = block.id;\n-                assert!(\n-                    id.split_ascii_whitespace().all(|it| it.starts_with(char::is_uppercase)),\n-                    \"bad feature: {}\",\n-                    id\n-                );\n+                assert!(is_valid_feature_name(&id), \"invalid feature name: {:?}\", id);\n                 let doc = block.contents.join(\"\\n\");\n                 acc.push(Feature { id, path: path.clone(), doc })\n             }\n@@ -52,6 +48,25 @@ impl Feature {\n     }\n }\n \n+fn is_valid_feature_name(feature: &str) -> bool {\n+    'word: for word in feature.split_whitespace() {\n+        for &short in [\"to\"].iter() {\n+            if word == short {\n+                continue 'word;\n+            }\n+        }\n+        for &short in [\"To\"].iter() {\n+            if word == short {\n+                return false;\n+            }\n+        }\n+        if !word.starts_with(char::is_uppercase) {\n+            return false;\n+        }\n+    }\n+    true\n+}\n+\n impl fmt::Display for Feature {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(f, \"=== {}\", self.id)?;"}]}