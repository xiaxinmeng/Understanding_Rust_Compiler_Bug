{"sha": "bb02ae7532b9c6a99eca129b146039dc5707c17e", "node_id": "C_kwDOAAsO6NoAKGJiMDJhZTc1MzJiOWM2YTk5ZWNhMTI5YjE0NjAzOWRjNTcwN2MxN2U", "commit": {"author": {"name": "Luna Razzaghipour", "email": "lunarazzaghipour@gmail.com", "date": "2023-05-20T16:02:30Z"}, "committer": {"name": "Luna Razzaghipour", "email": "lunarazzaghipour@gmail.com", "date": "2023-05-20T16:02:30Z"}, "message": "Add doc comments for `QoSClass`", "tree": {"sha": "e7a9f0b6ea930155095c2022a9b9ffb349b1054b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a9f0b6ea930155095c2022a9b9ffb349b1054b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb02ae7532b9c6a99eca129b146039dc5707c17e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAAGgAAAATZWNkc2Etc2hhMi1uaXN0cDI1NgAAAAhuaXN0cDI1NgAAAE\nEEtPEPU+w9oQ90uLBc4R0g0O7C/w+fcT4a+R4nvkvJXioSPGOafBHNQJufyTj3tLLeNtO4\n1H9ztJfn/DlLu2mXigAAAANnaXQAAAAAAAAABnNoYTUxMgAAAGMAAAATZWNkc2Etc2hhMi\n1uaXN0cDI1NgAAAEgAAAAgI6FnOUXQmekVS5mZrFSU9qC1dep4KOkR8d1F1qZkhr0AAAAg\nRjW3SK8cyfFQG92R3wQI0lOP/Mm6tOiTIE/yyU/snw0=\n-----END SSH SIGNATURE-----", "payload": "tree e7a9f0b6ea930155095c2022a9b9ffb349b1054b\nparent 91f4fbe5961ad444076c28bfbb37a381d76543cd\nauthor Luna Razzaghipour <lunarazzaghipour@gmail.com> 1684598550 +1000\ncommitter Luna Razzaghipour <lunarazzaghipour@gmail.com> 1684598550 +1000\n\nAdd doc comments for `QoSClass`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb02ae7532b9c6a99eca129b146039dc5707c17e", "html_url": "https://github.com/rust-lang/rust/commit/bb02ae7532b9c6a99eca129b146039dc5707c17e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb02ae7532b9c6a99eca129b146039dc5707c17e/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91f4fbe5961ad444076c28bfbb37a381d76543cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f4fbe5961ad444076c28bfbb37a381d76543cd", "html_url": "https://github.com/rust-lang/rust/commit/91f4fbe5961ad444076c28bfbb37a381d76543cd"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "bbf0c6b82b3462db93e5e86eaee91f1d432ac51e", "filename": "crates/stdx/src/thread.rs", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/bb02ae7532b9c6a99eca129b146039dc5707c17e/crates%2Fstdx%2Fsrc%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb02ae7532b9c6a99eca129b146039dc5707c17e/crates%2Fstdx%2Fsrc%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fthread.rs?ref=bb02ae7532b9c6a99eca129b146039dc5707c17e", "patch": "@@ -94,9 +94,116 @@ impl<T> fmt::Debug for JoinHandle<T> {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n // Please maintain order from least to most priority for the derived `Ord` impl.\n pub enum QoSClass {\n+    // Documentation adapted from https://github.com/apple-oss-distributions/libpthread/blob/67e155c94093be9a204b69637d198eceff2c7c46/include/sys/qos.h#L55\n+    //\n+    /// TLDR: invisible maintenance tasks\n+    ///\n+    /// Contract:\n+    ///\n+    /// * **You do not care about how long it takes for work to finish.**\n+    /// * **You do not care about work being deferred temporarily.**\n+    ///   (e.g. if the device\u2019s battery is in a critical state)\n+    ///\n+    /// Examples:\n+    ///\n+    /// * in a video editor:\n+    ///   creating periodic backups of project files\n+    /// * in a browser:\n+    ///   cleaning up cached sites which have not been accessed in a long time\n+    /// * in a collaborative word processor:\n+    ///   creating a searchable index of all documents\n+    ///\n+    /// Use this QoS class for background tasks\n+    /// which the user did not initiate themselves\n+    /// and which are invisible to the user.\n+    /// It is expected that this work will take significant time to complete:\n+    /// minutes or even hours.\n+    ///\n+    /// This QoS class provides the most energy and thermally-efficient execution possible.\n+    /// All other work is prioritized over background tasks.\n     Background,\n+\n+    /// TLDR: tasks that don\u2019t block using your app\n+    ///\n+    /// Contract:\n+    ///\n+    /// * **Your app remains useful even as the task is executing.**\n+    ///\n+    /// Examples:\n+    ///\n+    /// * in a video editor:\n+    ///   exporting a video to disk \u2013\n+    ///   the user can still work on the timeline\n+    /// * in a browser:\n+    ///   automatically extracting a downloaded zip file \u2013\n+    ///   the user can still switch tabs\n+    /// * in a collaborative word processor:\n+    ///   downloading images embedded in a document \u2013\n+    ///   the user can still make edits\n+    ///\n+    /// Use this QoS class for tasks which\n+    /// may or may not be initiated by the user,\n+    /// but whose result is visible.\n+    /// It is expected that this work will take a few seconds to a few minutes.\n+    /// Typically your app will include a progress bar\n+    /// for tasks using this class.\n+    ///\n+    /// This QoS class provides a balance between\n+    /// performance, responsiveness and efficiency.\n     Utility,\n+\n+    /// TLDR: tasks that block using your app\n+    ///\n+    /// Contract:\n+    ///\n+    /// * **You need this work to complete\n+    ///   before the user can keep interacting with your app.**\n+    /// * **Your work will not take more than a few seconds to complete.**\n+    ///\n+    /// Examples:\n+    ///\n+    /// * in a video editor:\n+    ///   opening a saved project\n+    /// * in a browser:\n+    ///   loading a list of the user\u2019s bookmarks and top sites\n+    ///   when a new tab is created\n+    /// * in a collaborative word processor:\n+    ///   running a search on the document\u2019s content\n+    ///\n+    /// Use this QoS class for tasks which were initiated by the user\n+    /// and block the usage of your app while they are in progress.\n+    /// It is expected that this work will take a few seconds or less to complete;\n+    /// not long enough to cause the user to switch to something else.\n+    /// Your app will likely indicate progress on these tasks\n+    /// through the display of placeholder content or modals.\n+    ///\n+    /// This QoS class is not energy-efficient.\n+    /// Rather, it provides responsiveness\n+    /// by prioritizing work above other tasks on the system\n+    /// except for critical user-interactive work.\n     UserInitiated,\n+\n+    /// TLDR: render loops and nothing else\n+    ///\n+    /// Contract:\n+    ///\n+    /// * **You absolutely need this work to complete immediately\n+    ///   or your app will appear to freeze.**\n+    /// * **Your work will always complete virtually instantaneously.**\n+    ///\n+    /// Examples:\n+    ///\n+    /// * the main thread in a GUI application\n+    /// * the update & render loop in a game\n+    /// * a secondary thread which progresses an animation\n+    ///\n+    /// Use this QoS class for any work which, if delayed,\n+    /// will make your user interface unresponsive.\n+    /// It is expected that this work will be virtually instantaneous.\n+    ///\n+    /// This QoS class is not energy-efficient.\n+    /// Specifying this class is a request to run with\n+    /// nearly all available system CPU and I/O bandwidth even under contention.\n     UserInteractive,\n }\n "}]}