{"sha": "4c1b0c2241bf72b2c66a73b3468e6698964e3f0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMWIwYzIyNDFiZjcyYjJjNjZhNzNiMzQ2OGU2Njk4OTY0ZTNmMGE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-28T09:54:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-28T09:54:29Z"}, "message": "Merge pull request #3061 from mehcode/feature/default-edition\n\nFix help message for edition config option", "tree": {"sha": "33899ba094fc27c3b166fa81beca13eedc78e2c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33899ba094fc27c3b166fa81beca13eedc78e2c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbrfpVCRBK7hj4Ov3rIwAAdHIIAECFA3/rLhr0uOHZaAK8iiS6\nPkJ9lj15QLeLCroQ/fBd61YsKReZNXxEcncJIWGRDVpxABFaHUAR1xLlR6+1XVMZ\n4XahDKBqz39sewNL1Ijwiulnwv+UHomUW4gN5cxWqFP0/+9dGz3jc7iiHTui/HF5\nPjquSRMG/+MMed9nRK8BVtcfI7VX0IzprsPr5+mHEhg1t7EphbDmYAfQE+1TUtGe\neFI4i9B2jdrQEdaXNVnotZTDmHAbVVk2Rz+2r2vL/SYfQTGKo/yHj3qo4BBpUMf/\nwel3ibLfJ+UbjWnBsusMqfS4JUcm9mm7Ow49IallxzZQ0Ze2HNw8NqWS1Gt1rmQ=\n=NFob\n-----END PGP SIGNATURE-----\n", "payload": "tree 33899ba094fc27c3b166fa81beca13eedc78e2c1\nparent 3dc6eed601699e3fc79a96cfc69b45a79efe443c\nparent c7377c3555c37d23b0c31a727b3d7b95427767d3\nauthor Nick Cameron <nrc@ncameron.org> 1538128469 +1200\ncommitter GitHub <noreply@github.com> 1538128469 +1200\n\nMerge pull request #3061 from mehcode/feature/default-edition\n\nFix help message for edition config option"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a", "html_url": "https://github.com/rust-lang/rust/commit/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dc6eed601699e3fc79a96cfc69b45a79efe443c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc6eed601699e3fc79a96cfc69b45a79efe443c", "html_url": "https://github.com/rust-lang/rust/commit/3dc6eed601699e3fc79a96cfc69b45a79efe443c"}, {"sha": "c7377c3555c37d23b0c31a727b3d7b95427767d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7377c3555c37d23b0c31a727b3d7b95427767d3", "html_url": "https://github.com/rust-lang/rust/commit/c7377c3555c37d23b0c31a727b3d7b95427767d3"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "34b6ea0dde6584a1976746bc6bc48cb9bf48a63b", "filename": "src/config/options.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=4c1b0c2241bf72b2c66a73b3468e6698964e3f0a", "patch": "@@ -17,17 +17,21 @@ use isatty::stdout_isatty;\n use std::collections::HashSet;\n use std::path::{Path, PathBuf};\n \n-/// Macro for deriving implementations of Serialize/Deserialize for enums\n+/// Macro that will stringify the enum variants or a provided textual repr\n #[macro_export]\n-macro_rules! impl_enum_serialize_and_deserialize {\n-    (@stringify $variant:ident) => (\n+macro_rules! configuration_option_enum_stringify {\n+    ($variant:ident) => {\n         stringify!($variant)\n-    );\n+    };\n \n-    (@stringify $_variant:ident: $value:expr) => (\n+    ($_variant:ident: $value:expr) => {\n         stringify!($value)\n-    );\n+    };\n+}\n \n+/// Macro for deriving implementations of Serialize/Deserialize for enums\n+#[macro_export]\n+macro_rules! impl_enum_serialize_and_deserialize {\n     ( $e:ident, $( $variant:ident $(: $value:expr)* ),* ) => {\n         impl ::serde::ser::Serialize for $e {\n             fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n@@ -40,7 +44,7 @@ macro_rules! impl_enum_serialize_and_deserialize {\n                 match *self {\n                     $(\n                         $e::$variant => serializer.serialize_str(\n-                            impl_enum_serialize_and_deserialize!(@stringify $variant $(: $value)*)\n+                            configuration_option_enum_stringify!($variant $(: $value)*)\n                         ),\n                     )*\n                     _ => {\n@@ -69,13 +73,13 @@ macro_rules! impl_enum_serialize_and_deserialize {\n                 }\n                 let s = d.deserialize_string(StringOnly::<D>(PhantomData))?;\n                 $(\n-                    if impl_enum_serialize_and_deserialize!(@stringify $variant $(: $value)*)\n+                    if configuration_option_enum_stringify!($variant $(: $value)*)\n                         .eq_ignore_ascii_case(&s) {\n                       return Ok($e::$variant);\n                     }\n                 )*\n                 static ALLOWED: &'static[&str] = &[\n-                    $(impl_enum_serialize_and_deserialize!(@stringify $variant $(: $value)*),)*];\n+                    $(configuration_option_enum_stringify!($variant $(: $value)*),)*];\n                 Err(D::Error::unknown_variant(&s, ALLOWED))\n             }\n         }\n@@ -85,7 +89,7 @@ macro_rules! impl_enum_serialize_and_deserialize {\n \n             fn from_str(s: &str) -> Result<Self, Self::Err> {\n                 $(\n-                    if impl_enum_serialize_and_deserialize!(@stringify $variant $(: $value)*)\n+                    if configuration_option_enum_stringify!($variant $(: $value)*)\n                         .eq_ignore_ascii_case(s) {\n                         return Ok($e::$variant);\n                     }\n@@ -99,7 +103,7 @@ macro_rules! impl_enum_serialize_and_deserialize {\n                 let mut variants = Vec::new();\n                 $(\n                     variants.push(\n-                        impl_enum_serialize_and_deserialize!(@stringify $variant $(: $value)*)\n+                        configuration_option_enum_stringify!($variant $(: $value)*)\n                     );\n                 )*\n                 format!(\"[{}]\", variants.join(\"|\"))\n@@ -110,11 +114,21 @@ macro_rules! impl_enum_serialize_and_deserialize {\n \n macro_rules! configuration_option_enum {\n     ($e:ident: $( $name:ident $(: $value:expr)* ),+ $(,)*) => (\n-        #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+        #[derive(Copy, Clone, Eq, PartialEq)]\n         pub enum $e {\n             $( $name ),+\n         }\n \n+        impl ::std::fmt::Debug for $e {\n+            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+                f.write_str(match self {\n+                    $(\n+                        $e::$name => configuration_option_enum_stringify!($name $(: $value)*),\n+                    )+\n+                })\n+            }\n+        }\n+\n         impl_enum_serialize_and_deserialize!($e, $( $name $(: $value)* ),+);\n     );\n }"}]}