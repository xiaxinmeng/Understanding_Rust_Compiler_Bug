{"sha": "f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNTBjMTc4ZWE4Mjc1ZmFiMTU4YmM3ZmUyYTNiNWFmOWFiOGYzZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-14T19:14:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-14T19:14:37Z"}, "message": "Auto merge of #27937 - DiamondLovesYou:llvm-root-and-shared, r=alexcrichton\n\nThis handles cases when the LLVM used isn't configured will the 'usual' targets. Also, cases where LLVM is shared are also handled (ie with `LD_LIBRARY_PATH` etc).", "tree": {"sha": "d8095604f342e64feb5ab9e6b4eb07cfac5cab84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8095604f342e64feb5ab9e6b4eb07cfac5cab84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "html_url": "https://github.com/rust-lang/rust/commit/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea4b4f01f54ec741509c624a8aa62d7a47f7eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea4b4f01f54ec741509c624a8aa62d7a47f7eac", "html_url": "https://github.com/rust-lang/rust/commit/9ea4b4f01f54ec741509c624a8aa62d7a47f7eac"}, {"sha": "7bd69f2248ce2635f3fc05f08d8a7944eed0016a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd69f2248ce2635f3fc05f08d8a7944eed0016a", "html_url": "https://github.com/rust-lang/rust/commit/7bd69f2248ce2635f3fc05f08d8a7944eed0016a"}], "stats": {"total": 164, "additions": 115, "deletions": 49}, "files": [{"sha": "4c5fa4aaa604d735f3dee528256f6955a23687bb", "filename": "configure", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -939,6 +939,13 @@ then\n     putvar CFG_ENABLE_CLANG\n fi\n \n+if [ -z \"$CFG_DISABLE_LIBCPP\" -a -n \"$CFG_ENABLE_CLANG\" ]\n+then\n+    CFG_USING_LIBCPP=\"1\"\n+else\n+    CFG_USING_LIBCPP=\"0\"\n+fi\n+\n # Same with jemalloc.  save the setting here.\n if [ -n \"$CFG_DISABLE_JEMALLOC\" ]\n then\n@@ -1682,7 +1689,7 @@ do\n         CXXFLAGS=\"$CXXFLAGS $LLVM_CXXFLAGS\"\n         LDFLAGS=\"$LDFLAGS $LLVM_LDFLAGS\"\n \n-        if [ -z \"$CFG_DISABLE_LIBCPP\" ] && [ -n \"$CFG_USING_CLANG\" ]; then\n+        if [ \"$CFG_USING_LIBCPP\" != \"0\" ]; then\n             LLVM_OPTS=\"$LLVM_OPTS --enable-libcpp\"\n         fi\n \n@@ -1743,6 +1750,7 @@ putvar CFG_AARCH64_LINUX_ANDROID_NDK\n putvar CFG_ARM_LINUX_ANDROIDEABI_NDK\n putvar CFG_I686_LINUX_ANDROID_NDK\n putvar CFG_MANDIR\n+putvar CFG_USING_LIBCPP\n \n # Avoid spurious warnings from clang by feeding it original source on\n # ccache-miss rather than preprocessed input."}, {"sha": "6d5e9169367cf6d25fb1264dccfb69a9fed7e635", "filename": "mk/llvm.mk", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -80,10 +80,16 @@ endif\n \n \n # LLVM linkage:\n+# Note: Filter with llvm-config so that optional targets which aren't present\n+# don't cause errors (ie PNaCl's target is only present within PNaCl's LLVM\n+# fork).\n LLVM_LINKAGE_PATH_$(1):=$$(abspath $$(RT_OUTPUT_DIR_$(1))/llvmdeps.rs)\n $$(LLVM_LINKAGE_PATH_$(1)): $(S)src/etc/mklldeps.py $$(LLVM_CONFIG_$(1))\n-\t$(Q)$(CFG_PYTHON) \"$$<\" \"$$@\" \"$$(LLVM_COMPONENTS)\" \"$$(CFG_ENABLE_LLVM_STATIC_STDCPP)\" \\\n-\t\t$$(LLVM_CONFIG_$(1)) \"$(CFG_STDCPP_NAME)\"\n+\t$(Q)$(CFG_PYTHON) \"$$<\" \"$$@\" \"$$(filter $$(shell \\\n+\t\t\t\t$$(LLVM_CONFIG_$(1)) --components), \\\n+                        $(LLVM_OPTIONAL_COMPONENTS)) $(LLVM_REQUIRED_COMPONENTS)\" \\\n+\t\t\"$$(CFG_ENABLE_LLVM_STATIC_STDCPP)\" $$(LLVM_CONFIG_$(1)) \\\n+\t\t\"$(CFG_STDCPP_NAME)\" \"$$(CFG_USING_LIBCPP)\"\n endef\n \n $(foreach host,$(CFG_HOST), \\\n@@ -94,7 +100,9 @@ $(foreach host,$(CFG_HOST), \\\n \n # This can't be done in target.mk because it's included before this file.\n define LLVM_LINKAGE_DEPS\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc_llvm: $$(LLVM_LINKAGE_PATH_$(2))\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc_llvm: $$(LLVM_LINKAGE_PATH_$(3))\n+RUSTFLAGS$(1)_rustc_llvm_T_$(3) += $$(shell echo $$(LLVM_ALL_COMPONENTS_$(3)) | tr '-' '_' |\\\n+\tsed -e 's/^ //;s/\\([^ ]*\\)/\\-\\-cfg have_component_\\1/g')\n endef\n \n $(foreach source,$(CFG_HOST), \\"}, {"sha": "f2ff4f1c3a2bfe2f81ba4bf0a1458ab2dad5117b", "filename": "mk/main.mk", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -276,9 +276,18 @@ endif\n # LLVM macros\n ######################################################################\n \n-LLVM_COMPONENTS=x86 arm aarch64 mips powerpc ipo bitreader bitwriter linker asmparser mcjit \\\n+LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc\n+LLVM_REQUIRED_COMPONENTS=ipo bitreader bitwriter linker asmparser mcjit \\\n                 interpreter instrumentation\n \n+ifneq ($(CFG_LLVM_ROOT),)\n+# Ensure we only try to link targets that the installed LLVM actually has:\n+LLVM_COMPONENTS := $(filter $(shell $(CFG_LLVM_ROOT)/bin/llvm-config$(X_$(CFG_BUILD)) --components),\\\n+\t\t\t$(LLVM_OPTIONAL_COMPONENTS)) $(LLVM_REQUIRED_COMPONENTS)\n+else\n+LLVM_COMPONENTS := $(LLVM_OPTIONAL_COMPONENTS) $(LLVM_REQUIRED_COMPONENTS)\n+endif\n+\n # Only build these LLVM tools\n LLVM_TOOLS=bugpoint llc llvm-ar llvm-as llvm-dis llvm-mc opt llvm-extract\n \n@@ -314,6 +323,8 @@ LLVM_HOST_TRIPLE_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --host-target)\n LLVM_AS_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-as$$(X_$(1))\n LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X_$(1))\n \n+LLVM_ALL_COMPONENTS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --components)\n+\n endef\n \n $(foreach host,$(CFG_HOST), \\\n@@ -476,7 +487,7 @@ endif\n endif\n \n LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3) := \\\n-    $$(CURDIR)/$$(HLIB$(1)_H_$(3))\n+    $$(CURDIR)/$$(HLIB$(1)_H_$(3)):$$(CFG_LLVM_INST_DIR_$(3))/lib\n LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3) := \\\n     $$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\n "}, {"sha": "9d5e633c3c6c1745c28c313d0a0bfd676d730474", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -131,6 +131,7 @@ $$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n \t@$$(call E, rustc: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) \\\n \t\t$$(STDCPP_LIBDIR_RUSTFLAGS_$(2)) \\\n+\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n \t\t-o $$@ $$< --cfg $(4)\n \n endef"}, {"sha": "bd7414a3bb6393e5cd5e9711394a6e108f23bc6b", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -1072,7 +1072,9 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \t    \"$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\" \\\n \t    $(1) \\\n \t    $$(S) \\\n-\t    $(3)\n+\t    $(3) \\\n+\t    \"$$(LLVM_LIBDIR_RUSTFLAGS_$(3))\" \\\n+\t    \"$$(LLVM_ALL_COMPONENTS_$(3))\"\n \t@touch -r $$@.start_time $$@ && rm $$@.start_time\n else\n # FIXME #11094 - The above rule doesn't work right for multiple targets"}, {"sha": "34c2cdbef353869d84c96b65529258da36835ace", "filename": "src/etc/maketest.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -53,6 +53,8 @@ def convert_path_spec(name, value):\n putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[11]))\n putenv('RUST_BUILD_STAGE', sys.argv[12])\n putenv('S', os.path.abspath(sys.argv[13]))\n+putenv('RUSTFLAGS', sys.argv[15])\n+putenv('LLVM_COMPONENTS', sys.argv[16])\n putenv('PYTHON', sys.executable)\n os.putenv('TARGET', target_triple)\n "}, {"sha": "8381e4f704097a3982761a1382e5d118bdbe2050", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -18,6 +18,7 @@\n enable_static = sys.argv[3]\n llvm_config = sys.argv[4]\n stdcpp_name = sys.argv[5]\n+use_libcpp = sys.argv[6]\n \n f.write(\"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n@@ -44,11 +45,25 @@ def run(args):\n         sys.exit(1)\n     return out\n \n+def runErr(args):\n+    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    out, err = proc.communicate()\n+\n+    if err:\n+        return False, out\n+    else:\n+        return True, out\n+\n f.write(\"\\n\")\n \n+args = [llvm_config, '--shared-mode']\n+args.extend(components)\n+llvm_shared, out = runErr(args)\n+if llvm_shared:\n+    llvm_shared = 'shared' in out\n+\n # LLVM libs\n args = [llvm_config, '--libs', '--system-libs']\n-\n args.extend(components)\n out = run(args)\n for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n@@ -63,8 +78,7 @@ def run(args):\n     elif lib[0] == '-':\n         lib = lib.strip()[1:]\n     f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n-    # LLVM libraries are all static libraries\n-    if 'LLVM' in lib:\n+    if not llvm_shared and 'LLVM' in lib:\n         f.write(\", kind = \\\"static\\\"\")\n     f.write(\")]\\n\")\n \n@@ -83,7 +97,7 @@ def run(args):\n     # Note that we use `cfg_attr` here because on MSVC the C++ standard library\n     # is not c++ or stdc++, but rather the linker takes care of linking the\n     # right standard library.\n-    if 'stdlib=libc++' in out:\n+    if use_libcpp != \"0\" or 'stdlib=libc++' in out:\n         f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"c++\\\"))]\\n\")\n     else:\n         f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"\" + stdcpp_name + \"\\\"))]\\n\")"}, {"sha": "0f05db86742eb4e3c7f9be0b1a5b5cc35ff87c4e", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -33,6 +33,7 @@\n #![feature(link_args)]\n #![feature(staged_api)]\n #![feature(linked_from)]\n+#![feature(concat_idents)]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n@@ -2327,6 +2328,37 @@ pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String {\n         .expect(\"got a non-UTF8 DebugLoc from LLVM\")\n }\n \n+pub fn initialize_available_targets() {\n+    macro_rules! init_target(\n+        ($cfg:ident $arch:ident) => { {\n+            #[cfg($cfg)]\n+            fn init() {\n+                unsafe {\n+                    let f = concat_idents!(LLVMInitialize, $arch, TargetInfo);\n+                    f();\n+                    let f = concat_idents!(LLVMInitialize, $arch, Target);\n+                    f();\n+                    let f = concat_idents!(LLVMInitialize, $arch, TargetMC);\n+                    f();\n+                    let f = concat_idents!(LLVMInitialize, $arch, AsmPrinter);\n+                    f();\n+                    let f = concat_idents!(LLVMInitialize, $arch, AsmParser);\n+                    f();\n+                }\n+            }\n+            #[cfg(not($cfg))]\n+            fn init() { }\n+            init();\n+        } }\n+    );\n+\n+    init_target!(have_component_powerpc PowerPC);\n+    init_target!(have_component_mips Mips);\n+    init_target!(have_component_aarch64 AArch64);\n+    init_target!(have_component_arm ARM);\n+    init_target!(have_component_x86 X86);\n+}\n+\n // The module containing the native LLVM dependencies, generated by the build system\n // Note that this must come after the rustllvm extern declaration so that\n // parts of LLVM that rustllvm depends on aren't thrown away by the linker."}, {"sha": "4815a399d991384b8743b4ffab87d1dfaaf0d634", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -961,39 +961,7 @@ pub unsafe fn configure_llvm(sess: &Session) {\n \n     llvm::LLVMInitializePasses();\n \n-    // Only initialize the platforms supported by Rust here, because\n-    // using --llvm-root will have multiple platforms that rustllvm\n-    // doesn't actually link to and it's pointless to put target info\n-    // into the registry that Rust cannot generate machine code for.\n-    llvm::LLVMInitializeX86TargetInfo();\n-    llvm::LLVMInitializeX86Target();\n-    llvm::LLVMInitializeX86TargetMC();\n-    llvm::LLVMInitializeX86AsmPrinter();\n-    llvm::LLVMInitializeX86AsmParser();\n-\n-    llvm::LLVMInitializeARMTargetInfo();\n-    llvm::LLVMInitializeARMTarget();\n-    llvm::LLVMInitializeARMTargetMC();\n-    llvm::LLVMInitializeARMAsmPrinter();\n-    llvm::LLVMInitializeARMAsmParser();\n-\n-    llvm::LLVMInitializeAArch64TargetInfo();\n-    llvm::LLVMInitializeAArch64Target();\n-    llvm::LLVMInitializeAArch64TargetMC();\n-    llvm::LLVMInitializeAArch64AsmPrinter();\n-    llvm::LLVMInitializeAArch64AsmParser();\n-\n-    llvm::LLVMInitializeMipsTargetInfo();\n-    llvm::LLVMInitializeMipsTarget();\n-    llvm::LLVMInitializeMipsTargetMC();\n-    llvm::LLVMInitializeMipsAsmPrinter();\n-    llvm::LLVMInitializeMipsAsmParser();\n-\n-    llvm::LLVMInitializePowerPCTargetInfo();\n-    llvm::LLVMInitializePowerPCTarget();\n-    llvm::LLVMInitializePowerPCTargetMC();\n-    llvm::LLVMInitializePowerPCAsmPrinter();\n-    llvm::LLVMInitializePowerPCAsmParser();\n+    llvm::initialize_available_targets();\n \n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n                                  llvm_args.as_ptr());"}, {"sha": "4c818cd99e2d795561535831d6653e323c54f113", "filename": "src/test/run-make/execution-engine/Makefile", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Ftest%2Frun-make%2Fexecution-engine%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Ftest%2Frun-make%2Fexecution-engine%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2FMakefile?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -4,6 +4,8 @@\n # This is a basic test of LLVM ExecutionEngine functionality using compiled\n # Rust code built using the `rustc` crate.\n \n+ifeq ($(filter executionengine,$(LLVM_COMPONENTS)),executionengine)\n+\n ifneq ($(shell uname),FreeBSD)\n all:\n \t$(RUSTC) test.rs\n@@ -12,3 +14,8 @@ else\n all:\n \n endif\n+\n+else\n+all:\n+\n+endif"}, {"sha": "e9c974a01373282bd3aacf99d0a1f2cca5717d66", "filename": "src/test/run-make/simd-ffi/Makefile", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Ftest%2Frun-make%2Fsimd-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Ftest%2Frun-make%2Fsimd-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2FMakefile?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -1,15 +1,28 @@\n -include ../tools.mk\n \n+TARGETS =\n+ifeq ($(filter arm,$(LLVM_COMPONENTS)),arm)\n # construct a fairly exhaustive list of platforms that we\n # support. These ones don't follow a pattern\n-TARGETS=arm-linux-androideabi arm-unknown-linux-gnueabihf arm-unknown-linux-gnueabi\n+TARGETS += arm-linux-androideabi arm-unknown-linux-gnueabihf arm-unknown-linux-gnueabi\n+endif\n+\n+ifeq ($(filter x86,$(LLVM_COMPONENTS)),x86)\n+X86_ARCHS = i686 x86_64\n+else\n+X86_ARCHS =\n+endif\n \n # these ones do, each OS lists the architectures it supports\n-LINUX=aarch64 i686 x86_64 mips mipsel\n-WINDOWS=i686 x86_64\n+LINUX=$(filter aarch64 mips,$(LLVM_COMPONENTS)) $(X86_ARCHS)\n+ifeq ($(filter mips,$(LLVM_COMPONENTS)),mips)\n+LINUX += mipsel\n+endif\n+\n+WINDOWS=$(X86_ARCHS)\n # fails with: failed to get iphonesimulator SDK path: no such file or directory\n #IOS=i386 aarch64 armv7\n-DARWIN=i686 x86_64\n+DARWIN=$(X86_ARCHS)\n \n $(foreach arch,$(LINUX),$(eval TARGETS += $(arch)-unknown-linux-gnu))\n $(foreach arch,$(WINDOWS),$(eval TARGETS += $(arch)-pc-windows-gnu))"}, {"sha": "88cf2a2b031ee86e651638ea19ab270591de8b56", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "patch": "@@ -6,7 +6,7 @@ TARGET_RPATH_ENV = \\\n     $(LD_LIB_PATH_ENVVAR)=\"$(TMPDIR):$(TARGET_RPATH_DIR):$($(LD_LIB_PATH_ENVVAR))\"\n \n BARE_RUSTC := $(HOST_RPATH_ENV) $(RUSTC)\n-RUSTC := $(BARE_RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n+RUSTC := $(BARE_RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR) $(RUSTFLAGS)\n #CC := $(CC) -L $(TMPDIR)\n HTMLDOCCK := $(PYTHON) $(S)/src/etc/htmldocck.py\n "}]}