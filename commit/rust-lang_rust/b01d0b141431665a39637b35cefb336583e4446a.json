{"sha": "b01d0b141431665a39637b35cefb336583e4446a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMWQwYjE0MTQzMTY2NWEzOTYzN2IzNWNlZmIzMzY1ODNlNDQ0NmE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-02T01:24:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-02T01:24:35Z"}, "message": "Rollup merge of #76143 - jyn514:duplicate-builtin-macros, r=petrochenkov\n\nGive a better error message for duplicate built-in macros\n\nMinor follow-up to https://github.com/rust-lang/rust/pull/75176 giving a better error message for duplicate builtin macros. This would have made it a little easier to debug.\n\nr? @petrochenkov", "tree": {"sha": "20f454c475eabab56660670291fdd0b3356e0fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f454c475eabab56660670291fdd0b3356e0fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01d0b141431665a39637b35cefb336583e4446a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTvRTCRBK7hj4Ov3rIwAAdHIIAFbgqiZTczLCY9f8Cdr4/Gbj\nAoKMoEIkRvkyrP6iDbWnriiFWM1vBK90tmgcdDujb6aj8sIOMQ2F8o49iUi36tFZ\n1rqxntCe0PI82wzktZzvEJm9eIn9ina1jtulaUaMZd5uEynrRaUM7S1arE8MYttM\n4Rbpooma7Sed8JKLSrmd1XURN0xiU3A/nvvzHFOGAc+Q/XfLnO8SM6pGCVcZ5sfl\nGkw+kS/V1qcaUuYPKZMyib++FfGaHquRLXBru6S2w6VEaA9BrTE4KnrWc6asYmrI\nJRLMCrcTnq83eMb2YwPquCGlA1dC+FyZxRb5mUp6R5YMRZdV23yA/PLkmo2cP/c=\n=Unf2\n-----END PGP SIGNATURE-----\n", "payload": "tree 20f454c475eabab56660670291fdd0b3356e0fa0\nparent 738b8eadfd16583dae5f77ce736e126779093ace\nparent be2947d0b7cc7fb13601c41676285bb3f6d548c3\nauthor Tyler Mandry <tmandry@gmail.com> 1599009875 -0700\ncommitter GitHub <noreply@github.com> 1599009875 -0700\n\nRollup merge of #76143 - jyn514:duplicate-builtin-macros, r=petrochenkov\n\nGive a better error message for duplicate built-in macros\n\nMinor follow-up to https://github.com/rust-lang/rust/pull/75176 giving a better error message for duplicate builtin macros. This would have made it a little easier to debug.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01d0b141431665a39637b35cefb336583e4446a", "html_url": "https://github.com/rust-lang/rust/commit/b01d0b141431665a39637b35cefb336583e4446a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01d0b141431665a39637b35cefb336583e4446a/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "738b8eadfd16583dae5f77ce736e126779093ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/738b8eadfd16583dae5f77ce736e126779093ace", "html_url": "https://github.com/rust-lang/rust/commit/738b8eadfd16583dae5f77ce736e126779093ace"}, {"sha": "be2947d0b7cc7fb13601c41676285bb3f6d548c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be2947d0b7cc7fb13601c41676285bb3f6d548c3", "html_url": "https://github.com/rust-lang/rust/commit/be2947d0b7cc7fb13601c41676285bb3f6d548c3"}], "stats": {"total": 120, "additions": 112, "deletions": 8}, "files": [{"sha": "789a1fc35a64fa8af5a613b469d25eaaa9402f71", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -454,6 +454,7 @@ E0768: include_str!(\"./error_codes/E0768.md\"),\n E0769: include_str!(\"./error_codes/E0769.md\"),\n E0770: include_str!(\"./error_codes/E0770.md\"),\n E0771: include_str!(\"./error_codes/E0771.md\"),\n+E0773: include_str!(\"./error_codes/E0773.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "b19a58bf33d2c97fe025143497098a23004ffb39", "filename": "compiler/rustc_error_codes/src/error_codes/E0773.md", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0773.md", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0773.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0773.md?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -0,0 +1,38 @@\n+A builtin-macro was defined more than once.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0773\n+#![feature(decl_macro)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+pub macro test($item:item) {\n+    /* compiler built-in */\n+}\n+\n+mod inner {\n+    #[rustc_builtin_macro]\n+    pub macro test($item:item) {\n+        /* compiler built-in */\n+    }\n+}\n+```\n+\n+To fix the issue, remove the duplicate declaration:\n+\n+```\n+#![feature(decl_macro)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+pub macro test($item:item) {\n+    /* compiler built-in */\n+}\n+```\n+\n+In very rare edge cases, this may happen when loading `core` or `std` twice,\n+once with `check` metadata and once with `build` metadata.\n+For more information, see [#75176].\n+\n+[#75176]: https://github.com/rust-lang/rust/pull/75176#issuecomment-683234468"}, {"sha": "50729086ec6acb1ae122f0201f5ccd5a1e1b3ec9", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -867,6 +867,12 @@ pub struct ExternPreludeEntry<'a> {\n     pub introduced_by_item: bool,\n }\n \n+/// Used for better errors for E0773\n+enum BuiltinMacroState {\n+    NotYetSeen(SyntaxExtension),\n+    AlreadySeen(Span),\n+}\n+\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -960,7 +966,7 @@ pub struct Resolver<'a> {\n \n     crate_loader: CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n-    builtin_macros: FxHashMap<Symbol, SyntaxExtension>,\n+    builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: FxHashSet<Ident>,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,"}, {"sha": "bea7138964764126c561a97144e5c06c1cda666c", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -3,14 +3,15 @@\n \n use crate::imports::ImportResolver;\n use crate::Namespace::*;\n-use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n+use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, BuiltinMacroState, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc_ast::{self as ast, NodeId};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::struct_span_err;\n use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand, SyntaxExtension};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n@@ -166,7 +167,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     }\n \n     fn register_builtin_macro(&mut self, ident: Ident, ext: SyntaxExtension) {\n-        if self.builtin_macros.insert(ident.name, ext).is_some() {\n+        if self.builtin_macros.insert(ident.name, BuiltinMacroState::NotYetSeen(ext)).is_some() {\n             self.session\n                 .span_err(ident.span, &format!(\"built-in macro `{}` was already defined\", ident));\n         }\n@@ -1076,10 +1077,23 @@ impl<'a> Resolver<'a> {\n \n         if result.is_builtin {\n             // The macro was marked with `#[rustc_builtin_macro]`.\n-            if let Some(ext) = self.builtin_macros.remove(&item.ident.name) {\n+            if let Some(builtin_macro) = self.builtin_macros.get_mut(&item.ident.name) {\n                 // The macro is a built-in, replace its expander function\n                 // while still taking everything else from the source code.\n-                result.kind = ext.kind;\n+                // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'.\n+                match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {\n+                    BuiltinMacroState::NotYetSeen(ext) => result.kind = ext.kind,\n+                    BuiltinMacroState::AlreadySeen(span) => {\n+                        struct_span_err!(\n+                            self.session,\n+                            item.span,\n+                            E0773,\n+                            \"attempted to define built-in macro more than once\"\n+                        )\n+                        .span_note(span, \"previously defined here\")\n+                        .emit();\n+                    }\n+                }\n             } else {\n                 let msg = format!(\"cannot find a built-in macro with name `{}`\", item.ident);\n                 self.session.span_err(item.span, &msg);"}, {"sha": "35f0f429059a930b6ab427f5353ed42040bd8b6e", "filename": "src/test/ui/macros/duplicate-builtin.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Fduplicate-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Fduplicate-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fduplicate-builtin.rs?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags:--crate-type lib\n+#![feature(decl_macro)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+pub macro test($item:item) {\n+//~^ NOTE previously defined\n+    /* compiler built-in */\n+}\n+\n+mod inner {\n+    #[rustc_builtin_macro]\n+    pub macro test($item:item) {\n+    //~^ ERROR attempted to define built-in macro more than once [E0773]\n+        /* compiler built-in */\n+    }\n+}"}, {"sha": "58accea27bb960123850a2a277c3503f6501abf3", "filename": "src/test/ui/macros/duplicate-builtin.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Fduplicate-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Fduplicate-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fduplicate-builtin.stderr?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -0,0 +1,21 @@\n+error[E0773]: attempted to define built-in macro more than once\n+  --> $DIR/duplicate-builtin.rs:13:5\n+   |\n+LL | /     pub macro test($item:item) {\n+LL | |\n+LL | |         /* compiler built-in */\n+LL | |     }\n+   | |_____^\n+   |\n+note: previously defined here\n+  --> $DIR/duplicate-builtin.rs:6:1\n+   |\n+LL | / pub macro test($item:item) {\n+LL | |\n+LL | |     /* compiler built-in */\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0773`."}, {"sha": "16f9139e6479e2cdd87ca27e03e37aa01ff81157", "filename": "src/test/ui/macros/unknown-builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -1,12 +1,12 @@\n-// error-pattern: cannot find a built-in macro with name `line`\n+// error-pattern: attempted to define built-in macro more than once\n \n #![feature(rustc_attrs)]\n \n #[rustc_builtin_macro]\n macro_rules! unknown { () => () } //~ ERROR cannot find a built-in macro with name `unknown`\n \n #[rustc_builtin_macro]\n-macro_rules! line { () => () }\n+macro_rules! line { () => () } //~ NOTE previously defined here\n \n fn main() {\n     line!();"}, {"sha": "7b04e05293ea1f12ef8ed6c12dd06dcd4318488c", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01d0b141431665a39637b35cefb336583e4446a/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=b01d0b141431665a39637b35cefb336583e4446a", "patch": "@@ -4,7 +4,7 @@ error: cannot find a built-in macro with name `unknown`\n LL | macro_rules! unknown { () => () }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: cannot find a built-in macro with name `line`\n+error[E0773]: attempted to define built-in macro more than once\n   --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n LL | /     macro_rules! line {\n@@ -13,6 +13,13 @@ LL | |             /* compiler built-in */\n LL | |         };\n LL | |     }\n    | |_____^\n+   |\n+note: previously defined here\n+  --> $DIR/unknown-builtin.rs:9:1\n+   |\n+LL | macro_rules! line { () => () }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0773`."}]}