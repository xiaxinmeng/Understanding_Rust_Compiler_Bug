{"sha": "0e52a671d41a787fe236cfa158d004ee28836b11", "node_id": "C_kwDOAAsO6NoAKDBlNTJhNjcxZDQxYTc4N2ZlMjM2Y2ZhMTU4ZDAwNGVlMjg4MzZiMTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-26T03:51:26Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T20:10:17Z"}, "message": "Bless tests.", "tree": {"sha": "f70cd2a6db757cd8459734b765b45977bfdd5b66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f70cd2a6db757cd8459734b765b45977bfdd5b66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e52a671d41a787fe236cfa158d004ee28836b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e52a671d41a787fe236cfa158d004ee28836b11", "html_url": "https://github.com/rust-lang/rust/commit/0e52a671d41a787fe236cfa158d004ee28836b11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e52a671d41a787fe236cfa158d004ee28836b11/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60e04d1e8c3afd392551db103651e0ac55b4bd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e04d1e8c3afd392551db103651e0ac55b4bd7e", "html_url": "https://github.com/rust-lang/rust/commit/60e04d1e8c3afd392551db103651e0ac55b4bd7e"}], "stats": {"total": 2336, "additions": 643, "deletions": 1693}, "files": [{"sha": "c284bbfb1cc66de61500ee72435369c86fd9a3eb", "filename": "tests/ui/async-await/async-await-let-else.drop_tracking_mir.stderr", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -12,30 +12,43 @@ LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await\n    |              ^^^^^^ await occurs here, with `r` maybe used later\n-LL |     };\n-   |     - `r` is later dropped here\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n \n-error: future cannot be sent between threads safely\n+error[E0277]: `Rc<()>` cannot be sent between threads safely\n   --> $DIR/async-await-let-else.rs:50:13\n    |\n+LL | async fn foo2(x: Option<bool>) {\n+   |                                - within this `impl Future<Output = ()>`\n+...\n LL |     is_send(foo2(Some(true)));\n-   |             ^^^^^^^^^^^^^^^^ future returned by `foo2` is not `Send`\n+   |     ------- ^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:23:26\n-   |\n-LL |         bar2(Rc::new(())).await\n-   |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n-   |              |\n-   |              has type `Rc<()>` which is not `Send`\n-LL |     };\n-   |     - `Rc::new(())` is later dropped here\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:27:29\n+   |\n+LL |   async fn bar2<T>(_: T) -> ! {\n+   |  _____________________________^\n+LL | |     panic!()\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `impl Future<Output = !>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:21:32\n+   |\n+LL |   async fn foo2(x: Option<bool>) {\n+   |  ________________________________^\n+LL | |     let Some(_) = x else {\n+LL | |         bar2(Rc::new(())).await\n+LL | |     };\n+LL | | }\n+   | |_^\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n    |\n@@ -53,9 +66,8 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/async-await-let-else.rs:33:28\n    |\n LL |         (Rc::new(()), bar().await);\n-   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n-   |          |                 |\n-   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |          |\n    |          has type `Rc<()>` which is not `Send`\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n@@ -77,9 +89,6 @@ LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await;\n    |              ^^^^^^ await occurs here, with `r` maybe used later\n-...\n-LL |     };\n-   |     - `r` is later dropped here\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n    |\n@@ -88,3 +97,4 @@ LL | fn is_send<T: Send>(_: T) {}\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c6257cb324d9a62fa156cdfe6e5b79a51cc6ed4d", "filename": "tests/ui/async-await/async-error-span.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -14,7 +14,7 @@ LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:17:17\n+  --> $DIR/async-error-span.rs:19:17\n    |\n LL |     get_future().await;\n    |                 ^^^^^^"}, {"sha": "2f29ee6cdb0a1e7856af15d0964a2fdf64e11236", "filename": "tests/ui/async-await/async-error-span.drop_tracking_mir.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -7,19 +7,18 @@ LL | fn get_future() -> impl Future<Output = ()> {\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n \n-error[E0698]: type inside `async fn` body must be known in this context\n+error[E0282]: type annotations needed\n   --> $DIR/async-error-span.rs:16:9\n    |\n LL |     let a;\n-   |         ^ cannot infer type\n+   |         ^\n    |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:17:17\n+help: consider giving `a` an explicit type\n    |\n-LL |     get_future().await;\n-   |                 ^^^^^^\n+LL |     let a: /* Type */;\n+   |          ++++++++++++\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0698.\n+Some errors have detailed explanations: E0277, E0282.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "c6257cb324d9a62fa156cdfe6e5b79a51cc6ed4d", "filename": "tests/ui/async-await/async-error-span.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -14,7 +14,7 @@ LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:17:17\n+  --> $DIR/async-error-span.rs:19:17\n    |\n LL |     get_future().await;\n    |                 ^^^^^^"}, {"sha": "c9ecf359e3de59bdd0effb82a030ad73e3df4e18", "filename": "tests/ui/async-await/async-error-span.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -13,7 +13,9 @@ fn get_future() -> impl Future<Output = ()> {\n }\n \n async fn foo() {\n-    let a; //~ ERROR type inside `async fn` body must be known in this context\n+    let a;\n+    //[no_drop_tracking,drop_tracking]~^ ERROR type inside `async fn` body must be known in this context\n+    //[drop_tracking_mir]~^^ ERROR type annotations needed\n     get_future().await;\n }\n "}, {"sha": "083da1cec7313c58f96127a14cceb4cb23e4c6b0", "filename": "tests/ui/async-await/async-error-span.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=60e04d1e8c3afd392551db103651e0ac55b4bd7e", "patch": "@@ -1,25 +0,0 @@\n-error[E0277]: `()` is not a future\n-  --> $DIR/async-error-span.rs:10:20\n-   |\n-LL | fn get_future() -> impl Future<Output = ()> {\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `()`\n-   = note: () must be a future or must implement `IntoFuture` to be awaited\n-\n-error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/async-error-span.rs:16:9\n-   |\n-LL |     let a;\n-   |         ^ cannot infer type\n-   |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:17:17\n-   |\n-LL |     get_future().await;\n-   |                 ^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0277, E0698.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "57a01280145540072361cee6057922861e8f3bf9", "filename": "tests/ui/async-await/async-fn-nonsend.drop_tracking_mir.stderr", "status": "modified", "additions": 3, "deletions": 80, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,26 +1,3 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:70:17\n-   |\n-LL |     assert_send(local_dropped_before_await());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n-   |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:27:10\n-   |\n-LL |     let x = non_send();\n-   |         - has type `impl Debug` which is not `Send`\n-LL |     drop(x);\n-LL |     fut().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n-LL | }\n-   | - `x` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:67:24\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ^^^^ required by this bound in `assert_send`\n-\n error: future cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:72:17\n    |\n@@ -32,12 +9,9 @@ note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:36:25\n    |\n LL |     match Some(non_send()) {\n-   |                ---------- has type `impl Debug` which is not `Send`\n+   |           ---------------- has type `Option<impl Debug>` which is not `Send`\n LL |         Some(_) => fut().await,\n-   |                         ^^^^^^ await occurs here, with `non_send()` maybe used later\n-...\n-LL | }\n-   | - `non_send()` is later dropped here\n+   |                         ^^^^^^ await occurs here, with `Some(non_send())` maybe used later\n note: required by a bound in `assert_send`\n   --> $DIR/async-fn-nonsend.rs:67:24\n    |\n@@ -59,62 +33,11 @@ LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n ...\n LL |         fut().await;\n    |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n-LL |     }\n-LL | }\n-   | - `get_formatter()` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:67:24\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ^^^^ required by this bound in `assert_send`\n-\n-error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:76:17\n-   |\n-LL |     assert_send(non_sync_with_method_call_panic());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_panic` is not `Send`\n-   |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:56:14\n-   |\n-LL |     let f: &mut std::fmt::Formatter = panic!();\n-   |         - has type `&mut Formatter<'_>` which is not `Send`\n-LL |     if non_sync().fmt(f).unwrap() == () {\n-LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `f` maybe used later\n-LL |     }\n-LL | }\n-   | - `f` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:67:24\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ^^^^ required by this bound in `assert_send`\n-\n-error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:78:17\n-   |\n-LL |     assert_send(non_sync_with_method_call_infinite_loop());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_infinite_loop` is not `Send`\n-   |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:63:14\n-   |\n-LL |     let f: &mut std::fmt::Formatter = loop {};\n-   |         - has type `&mut Formatter<'_>` which is not `Send`\n-LL |     if non_sync().fmt(f).unwrap() == () {\n-LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `f` maybe used later\n-LL |     }\n-LL | }\n-   | - `f` is later dropped here\n note: required by a bound in `assert_send`\n   --> $DIR/async-fn-nonsend.rs:67:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "ed440bd0182a6d4ac338ca2bdb307e778abc1c5b", "filename": "tests/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -68,13 +68,13 @@ fn assert_send(_: impl Send) {}\n \n pub fn pass_assert() {\n     assert_send(local_dropped_before_await());\n-    //[no_drop_tracking,drop_tracking_mir]~^ ERROR future cannot be sent between threads safely\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     assert_send(non_send_temporary_in_match());\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call());\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call_panic());\n-    //[no_drop_tracking,drop_tracking_mir]~^ ERROR future cannot be sent between threads safely\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call_infinite_loop());\n-    //[no_drop_tracking,drop_tracking_mir]~^ ERROR future cannot be sent between threads safely\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n }"}, {"sha": "b89d8680407500997cdc244932c9aadc7dc2c0cf", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.drop_tracking_mir.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -13,8 +13,6 @@ LL |         let mut info = self.info_result.clone();\n ...\n LL |         let _ = send_element(element).await;\n    |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n-LL |     }\n-   |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`\n   --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n    |"}, {"sha": "8c9d14d624cd97182fb062327adb7144e6ba62a2", "filename": "tests/ui/async-await/field-assign-nonsend.drop_tracking_mir.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -13,8 +13,6 @@ LL |         let mut info = self.info_result.clone();\n ...\n LL |         let _ = send_element(element).await;\n    |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n-LL |     }\n-   |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`\n   --> $DIR/field-assign-nonsend.rs:40:19\n    |"}, {"sha": "c4c7f26c7c70b00962b2e375730376571f54f7bd", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be shared between threads safely\n-  --> $DIR/issue-64130-1-sync.rs:24:13\n+  --> $DIR/issue-64130-1-sync.rs:25:13\n    |\n LL |     is_sync(bar());\n    |             ^^^^^ future returned by `bar` is not `Sync`\n@@ -12,6 +12,7 @@ LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL |     drop(x);\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_sync`"}, {"sha": "6f43b568a7a6814fa9e90553ab6f53a1b1bc1b29", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be shared between threads safely\n-  --> $DIR/issue-64130-1-sync.rs:24:13\n+  --> $DIR/issue-64130-1-sync.rs:25:13\n    |\n LL |     is_sync(bar());\n    |             ^^^^^ future returned by `bar` is not `Sync`\n@@ -12,8 +12,6 @@ LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n-LL | }\n-   | - `x` is later dropped here\n note: required by a bound in `is_sync`\n   --> $DIR/issue-64130-1-sync.rs:14:15\n    |"}, {"sha": "c4c7f26c7c70b00962b2e375730376571f54f7bd", "filename": "tests/ui/async-await/issue-64130-1-sync.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be shared between threads safely\n-  --> $DIR/issue-64130-1-sync.rs:24:13\n+  --> $DIR/issue-64130-1-sync.rs:25:13\n    |\n LL |     is_sync(bar());\n    |             ^^^^^ future returned by `bar` is not `Sync`\n@@ -12,6 +12,7 @@ LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL |     drop(x);\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_sync`"}, {"sha": "44646e0e5f27be0c911ac795e76a97201c9e47d8", "filename": "tests/ui/async-await/issue-64130-1-sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -16,6 +16,7 @@ fn is_sync<T: Sync>(t: T) { }\n async fn bar() {\n     let x = Foo;\n     baz().await;\n+    drop(x);\n }\n \n async fn baz() { }"}, {"sha": "b6a73c2a5cb83fdf34d93403d007134d510c3681", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -4,12 +4,12 @@ error: future cannot be sent between threads safely\n LL |     is_send(bar());\n    |             ^^^^^ future returned by `bar` is not `Send`\n    |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n+   = note: the trait bound `Unique<Foo>: Send` is not satisfied\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-2-send.rs:18:10\n    |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which is not `Send`\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which is not `Send`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n@@ -19,6 +19,10 @@ note: required by a bound in `is_send`\n    |\n LL | fn is_send<T: Send>(t: T) { }\n    |               ^^^^ required by this bound in `is_send`\n+help: consider borrowing here\n+   |\n+LL |     is_send(&bar());\n+   |             +\n \n error: aborting due to previous error\n "}, {"sha": "560560f60366e69233c5d92ffc9a15528df580fe", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking_mir.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -4,21 +4,23 @@ error: future cannot be sent between threads safely\n LL |     is_send(bar());\n    |             ^^^^^ future returned by `bar` is not `Send`\n    |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n+   = note: the trait bound `Unique<Foo>: Send` is not satisfied\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-2-send.rs:18:10\n    |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which is not `Send`\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which is not `Send`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n-LL | }\n-   | - `x` is later dropped here\n note: required by a bound in `is_send`\n   --> $DIR/issue-64130-2-send.rs:14:15\n    |\n LL | fn is_send<T: Send>(t: T) { }\n    |               ^^^^ required by this bound in `is_send`\n+help: consider borrowing here\n+   |\n+LL |     is_send(&bar());\n+   |             +\n \n error: aborting due to previous error\n "}, {"sha": "b6a73c2a5cb83fdf34d93403d007134d510c3681", "filename": "tests/ui/async-await/issue-64130-2-send.no_drop_tracking.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -4,12 +4,12 @@ error: future cannot be sent between threads safely\n LL |     is_send(bar());\n    |             ^^^^^ future returned by `bar` is not `Send`\n    |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n+   = note: the trait bound `Unique<Foo>: Send` is not satisfied\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-2-send.rs:18:10\n    |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which is not `Send`\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which is not `Send`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n@@ -19,6 +19,10 @@ note: required by a bound in `is_send`\n    |\n LL | fn is_send<T: Send>(t: T) { }\n    |               ^^^^ required by this bound in `is_send`\n+help: consider borrowing here\n+   |\n+LL |     is_send(&bar());\n+   |             +\n \n error: aborting due to previous error\n "}, {"sha": "d6d855bac0762b4dddc5bc68fc29b5dcbead4e48", "filename": "tests/ui/async-await/issue-64130-2-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -14,7 +14,7 @@ impl !Send for Foo {}\n fn is_send<T: Send>(t: T) { }\n \n async fn bar() {\n-    let x = Foo;\n+    let x = Box::new(Foo);\n     baz().await;\n }\n "}, {"sha": "d65aae8cc3fdd86402257767c78065c17fad6edb", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -10,8 +10,8 @@ LL |     is_qux(bar());\n note: future does not implement `Qux` as this value is used across an await\n   --> $DIR/issue-64130-3-other.rs:21:10\n    |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which does not implement `Qux`\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which does not implement `Qux`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }"}, {"sha": "8fed69d9d8898c09942674f2ad1f2535bfd1217c", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -10,12 +10,10 @@ LL |     is_qux(bar());\n note: future does not implement `Qux` as this value is used across an await\n   --> $DIR/issue-64130-3-other.rs:21:10\n    |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which does not implement `Qux`\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which does not implement `Qux`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n-LL | }\n-   | - `x` is later dropped here\n note: required by a bound in `is_qux`\n   --> $DIR/issue-64130-3-other.rs:17:14\n    |"}, {"sha": "d65aae8cc3fdd86402257767c78065c17fad6edb", "filename": "tests/ui/async-await/issue-64130-3-other.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -10,8 +10,8 @@ LL |     is_qux(bar());\n note: future does not implement `Qux` as this value is used across an await\n   --> $DIR/issue-64130-3-other.rs:21:10\n    |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which does not implement `Qux`\n+LL |     let x = Box::new(Foo);\n+   |         - has type `Box<Foo>` which does not implement `Qux`\n LL |     baz().await;\n    |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }"}, {"sha": "92d3b7c81fb62e8ec1de472de5aaa3059762a647", "filename": "tests/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -17,7 +17,7 @@ impl !Qux for Foo {}\n fn is_qux<T: Qux>(t: T) {}\n \n async fn bar() {\n-    let x = Foo;\n+    let x = Box::new(Foo);\n     baz().await;\n }\n "}, {"sha": "884619f4dd69d4151a9c79a1bc401789173e29a9", "filename": "tests/ui/async-await/issue-64130-4-async-move.drop_tracking_mir.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop_tracking_mir.stderr?ref=60e04d1e8c3afd392551db103651e0ac55b4bd7e", "patch": "@@ -1,26 +0,0 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:20:17\n-   |\n-LL | pub fn foo() -> impl Future + Send {\n-   |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n-   |\n-   = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:27:31\n-   |\n-LL |         match client.status() {\n-   |               ------ has type `&Client` which is not `Send`\n-LL |             200 => {\n-LL |                 let _x = get().await;\n-   |                               ^^^^^^ await occurs here, with `client` maybe used later\n-...\n-LL |     }\n-   |     - `client` is later dropped here\n-help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-64130-4-async-move.rs:25:15\n-   |\n-LL |         match client.status() {\n-   |               ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0bc7cb2f2acdab035f7a1d13a16ae44f2339432d", "filename": "tests/ui/async-await/issue-64130-4-async-move.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:20:17\n+  --> $DIR/issue-64130-4-async-move.rs:21:17\n    |\n LL | pub fn foo() -> impl Future + Send {\n    |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`"}, {"sha": "bcb297aaa02585a994f8be3869c447f0fb0291fa", "filename": "tests/ui/async-await/issue-64130-4-async-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -2,6 +2,7 @@\n // revisions: no_drop_tracking drop_tracking drop_tracking_mir\n // [drop_tracking] compile-flags: -Zdrop-tracking\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking_mir] check-pass\n // [drop_tracking] check-pass\n \n use std::any::Any;\n@@ -19,7 +20,6 @@ async fn get() {}\n \n pub fn foo() -> impl Future + Send {\n     //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n-    //[drop_tracking_mir]~^^ ERROR future cannot be sent between threads safely\n     let client = Client(Box::new(true));\n     async move {\n         match client.status() {"}, {"sha": "fc8bcc8ae7964b58a9fbf24913c5673a547806b1", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -3,21 +3,23 @@ error: future cannot be sent between threads safely\n    |\n LL |       spawn(async {\n    |  ___________^\n-LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n LL | |         AFuture.await;\n+LL | |         drop(a);\n LL | |     });\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 24:6]`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:23:16\n    |\n-LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n-   |             -- has type `*mut ()` which is not `Send`\n+LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             - has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |                ^^^^^^ await occurs here, with `_a` maybe used later\n+   |                ^^^^^^ await occurs here, with `a` maybe used later\n+LL |         drop(a);\n LL |     });\n-   |     - `_a` is later dropped here\n+   |     - `a` is later dropped here\n note: required by a bound in `spawn`\n   --> $DIR/issue-67252-unnamed-future.rs:9:13\n    |"}, {"sha": "a3ef7add1166981a4522b13b7b2d548e4d7b67bc", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking_mir.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,23 +1,17 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-67252-unnamed-future.rs:21:11\n+  --> $DIR/issue-67252-unnamed-future.rs:21:5\n    |\n-LL |       spawn(async {\n-   |  ___________^\n-LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n-LL | |         AFuture.await;\n-LL | |     });\n-   | |_____^ future created by async block is not `Send`\n+LL |     spawn(async {\n+   |     ^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 24:6]`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:23:16\n    |\n-LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n-   |             -- has type `*mut ()` which is not `Send`\n+LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             - has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |                ^^^^^^ await occurs here, with `_a` maybe used later\n-LL |     });\n-   |     - `_a` is later dropped here\n+   |                ^^^^^^ await occurs here, with `a` maybe used later\n note: required by a bound in `spawn`\n   --> $DIR/issue-67252-unnamed-future.rs:9:13\n    |"}, {"sha": "fc8bcc8ae7964b58a9fbf24913c5673a547806b1", "filename": "tests/ui/async-await/issue-67252-unnamed-future.no_drop_tracking.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -3,21 +3,23 @@ error: future cannot be sent between threads safely\n    |\n LL |       spawn(async {\n    |  ___________^\n-LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n LL | |         AFuture.await;\n+LL | |         drop(a);\n LL | |     });\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 24:6]`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:23:16\n    |\n-LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n-   |             -- has type `*mut ()` which is not `Send`\n+LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             - has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |                ^^^^^^ await occurs here, with `_a` maybe used later\n+   |                ^^^^^^ await occurs here, with `a` maybe used later\n+LL |         drop(a);\n LL |     });\n-   |     - `_a` is later dropped here\n+   |     - `a` is later dropped here\n note: required by a bound in `spawn`\n   --> $DIR/issue-67252-unnamed-future.rs:9:13\n    |"}, {"sha": "bb9ad77cef31daf001ae185a8f488ad13e8aaf96", "filename": "tests/ui/async-await/issue-67252-unnamed-future.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -19,8 +19,9 @@ impl Future for AFuture{\n \n async fn foo() {\n     spawn(async { //~ ERROR future cannot be sent between threads safely\n-        let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+        let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n         AFuture.await;\n+        drop(a);\n     });\n }\n "}, {"sha": "7a9242cbaf591e9803f30e56a8873fc937a6d060", "filename": "tests/ui/async-await/issue-68112.drop_tracking_mir.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:37:18\n+  --> $DIR/issue-68112.rs:37:5\n    |\n LL |     require_send(send_fut);\n-   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n@@ -18,10 +18,10 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:46:18\n+  --> $DIR/issue-68112.rs:46:5\n    |\n LL |     require_send(send_fut);\n-   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n@@ -37,12 +37,10 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:65:18\n+  --> $DIR/issue-68112.rs:65:5\n    |\n LL |     require_send(send_fut);\n-   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n@@ -60,7 +58,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n+   = note: required because it captures the following types: `impl Future<Output = Arc<RefCell<i32>>>`, `Ready<i32>`\n note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:60:20\n    |"}, {"sha": "19119ae0fc127669a978cc3c5da39294e8edcce9", "filename": "tests/ui/async-await/issue-68112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -14,7 +14,7 @@ use std::{\n fn require_send(_: impl Send) {}\n \n struct Ready<T>(Option<T>);\n-impl<T> Future for Ready<T> {\n+impl<T: Unpin> Future for Ready<T> {\n     type Output = T;\n     fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<T> {\n         Poll::Ready(self.0.take().unwrap())"}, {"sha": "721234aa4a782875a2e90e32d4c2f5bea168c7f0", "filename": "tests/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -7,7 +7,7 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n    = note: required for `&Sender<i32>` to implement `Send`\n note: required because it's used within this closure\n-  --> $DIR/issue-70935-complex-spans.rs:18:13\n+  --> $DIR/issue-70935-complex-spans.rs:17:13\n    |\n LL |         baz(|| async{\n    |             ^^\n@@ -20,7 +20,7 @@ LL | | }\n    | |_^\n    = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n-  --> $DIR/issue-70935-complex-spans.rs:17:5\n+  --> $DIR/issue-70935-complex-spans.rs:16:5\n    |\n LL | /     async move {\n LL | |         baz(|| async{"}, {"sha": "c636be15a585c73df0bc4be8b30503c7914a4f49", "filename": "tests/ui/async-await/issue-70935-complex-spans.drop_tracking_mir.stderr", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,21 +1,34 @@\n-error: future cannot be sent between threads safely\n+error[E0277]: `Sender<i32>` cannot be shared between threads safely\n   --> $DIR/issue-70935-complex-spans.rs:13:45\n    |\n LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n-   |                                             ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |                                             ^^^^^^^^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:20:11\n+   = note: required for `&Sender<i32>` to implement `Send`\n+note: required because it's used within this closure\n+  --> $DIR/issue-70935-complex-spans.rs:17:13\n    |\n-LL |           baz(|| async{\n-   |  _____________-\n+LL |         baz(|| async{\n+   |             ^^\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-70935-complex-spans.rs:10:67\n+   |\n+LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n+   |  ___________________________________________________________________^\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `impl Future<Output = ()>`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-70935-complex-spans.rs:16:5\n+   |\n+LL | /     async move {\n+LL | |         baz(|| async{\n LL | |             foo(tx.clone());\n LL | |         }).await;\n-   | |         - ^^^^^^- the value is later dropped here\n-   | |         | |\n-   | |_________| await occurs here, with the value maybe used later\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:18:13: 18:15]` which is not `Send`\n+LL | |     }\n+   | |_____^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8036d82daa4a33f51f3dff008efa3c58b55c50bb", "filename": "tests/ui/async-await/issue-70935-complex-spans.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:20:11\n+  --> $DIR/issue-70935-complex-spans.rs:19:11\n    |\n LL |           baz(|| async{\n    |  _____________-\n@@ -15,7 +15,7 @@ LL | |         }).await;\n    | |         - ^^^^^^- the value is later dropped here\n    | |         | |\n    | |_________| await occurs here, with the value maybe used later\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:18:13: 18:15]` which is not `Send`\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:17:13: 17:15]` which is not `Send`\n \n error: aborting due to previous error\n "}, {"sha": "78625bd393d25f9fba5651bd18c534878a19c57b", "filename": "tests/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -12,8 +12,7 @@ async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n     //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n-    //[drop_tracking]~^^ ERROR `Sender<i32>` cannot be shared between threads\n-    //[drop_tracking_mir]~^^^ ERROR future cannot be sent between threads safely\n+    //[drop_tracking,drop_tracking_mir]~^^ ERROR `Sender<i32>` cannot be shared between threads\n     async move {\n         baz(|| async{\n             foo(tx.clone());"}, {"sha": "8b75d95a68eed8979b23bf7a5092f86e952f17dc", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.drop_tracking_mir.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.drop_tracking_mir.stderr?ref=60e04d1e8c3afd392551db103651e0ac55b4bd7e", "patch": "@@ -1,33 +0,0 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:16:17\n-   |\n-LL |       assert_send(async {\n-   |  _________________^\n-LL | |\n-LL | |\n-LL | |         bar(Foo(std::ptr::null())).await;\n-LL | |     })\n-   | |_____^ future created by async block is not `Send`\n-   |\n-   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 20:6]`, the trait `Send` is not implemented for `*const u8`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:35\n-   |\n-LL |         bar(Foo(std::ptr::null())).await;\n-   |                 ----------------  ^^^^^^- `std::ptr::null()` is later dropped here\n-   |                 |                 |\n-   |                 |                 await occurs here, with `std::ptr::null()` maybe used later\n-   |                 has type `*const u8` which is not `Send`\n-help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:13\n-   |\n-LL |         bar(Foo(std::ptr::null())).await;\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:13:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to previous error\n-"}, {"sha": "8745bdd973beabf5637819b3d9fdc462bb7b2a61", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,15 +1,14 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:16:17\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:17:17\n    |\n LL |       assert_send(async {\n    |  _________________^\n LL | |\n-LL | |\n LL | |         bar(Foo(std::ptr::null())).await;\n LL | |     })\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 20:6]`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:17:17: 20:6]`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:19:35\n    |\n@@ -24,7 +23,7 @@ help: consider moving this into a `let` binding to create a shorter lived borrow\n LL |         bar(Foo(std::ptr::null())).await;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:13:19\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}, {"sha": "d7ef929517c74eaabfbb60f0d6ee39d4372b46e8", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -3,6 +3,7 @@\n // [drop_tracking] compile-flags: -Zdrop-tracking\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // [drop_tracking] check-pass\n+// [drop_tracking_mir] check-pass\n \n struct Foo(*const u8);\n \n@@ -15,7 +16,6 @@ fn assert_send<T: Send>(_: T) {}\n fn main() {\n     assert_send(async {\n         //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n-        //[drop_tracking_mir]~^^ ERROR future cannot be sent between threads safely\n         bar(Foo(std::ptr::null())).await;\n     })\n }"}, {"sha": "4e9e7309be0911d9a579aabd0b54672ab6150b0c", "filename": "tests/ui/async-await/send-bound-async-closure.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fsend-bound-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Fsend-bound-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsend-bound-async-closure.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -0,0 +1,37 @@\n+// edition: 2021\n+// check-pass\n+\n+// This test verifies that we do not create a query cycle when typechecking has several inference\n+// variables that point to the same generator interior type.\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+type ChannelTask = Pin<Box<dyn Future<Output = ()> + Send>>;\n+\n+pub fn register_message_type() -> ChannelTask {\n+    Box::pin(async move {\n+        let f = |__cx: &mut Context<'_>| Poll::<()>::Pending;\n+        PollFn { f }.await\n+    })\n+}\n+\n+struct PollFn<F> {\n+    f: F,\n+}\n+\n+impl<F> Unpin for PollFn<F> {}\n+\n+impl<T, F> Future for PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    type Output = T;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n+        (&mut self.f)(cx)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "912e2b34c0541ee117620b52a989ce0f3ccd0eca", "filename": "tests/ui/async-await/unresolved_type_param.drop_tracking.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,35 +1,35 @@\n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n+  --> $DIR/unresolved_type_param.rs:12:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n+  --> $DIR/unresolved_type_param.rs:12:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n+  --> $DIR/unresolved_type_param.rs:12:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n+  --> $DIR/unresolved_type_param.rs:12:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n+  --> $DIR/unresolved_type_param.rs:12:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n+  --> $DIR/unresolved_type_param.rs:12:10\n    |\n LL |     bar().await;\n    |          ^^^^^^"}, {"sha": "95c799468314f6bbee8922273e38b73846c8e545", "filename": "tests/ui/async-await/unresolved_type_param.drop_tracking_mir.stderr", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,39 +1,14 @@\n-error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n+error[E0282]: type annotations needed\n+  --> $DIR/unresolved_type_param.rs:12:5\n    |\n LL |     bar().await;\n-   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |     ^^^ cannot infer type of the type parameter `T` declared on the function `bar`\n    |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n+help: consider specifying the generic argument\n    |\n-LL |     bar().await;\n-   |          ^^^^^^\n-\n-error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n-   |\n-LL |     bar().await;\n-   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n-   |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n-   |\n-LL |     bar().await;\n-   |          ^^^^^^\n-\n-error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n-   |\n-LL |     bar().await;\n-   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n-   |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n-   |\n-LL |     bar().await;\n-   |          ^^^^^^\n+LL |     bar::<T>().await;\n+   |        +++++\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0698`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "16d618caa5713304297c989ab4303fd8621348d0", "filename": "tests/ui/async-await/unresolved_type_param.no_drop_tracking.stderr", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,39 +1,63 @@\n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n+  --> $DIR/unresolved_type_param.rs:12:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n+  --> $DIR/unresolved_type_param.rs:12:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n+  --> $DIR/unresolved_type_param.rs:12:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n+  --> $DIR/unresolved_type_param.rs:12:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n+  --> $DIR/unresolved_type_param.rs:12:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n+  --> $DIR/unresolved_type_param.rs:12:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:12:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:12:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0698`."}, {"sha": "ca0a92b9434732294d297310954a4c38f3bff067", "filename": "tests/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -5,23 +5,32 @@\n // Error message should pinpoint the type parameter T as needing to be bound\n // (rather than give a general error message)\n // edition:2018\n-// compile-flags: -Zdrop-tracking\n \n async fn bar<T>() -> () {}\n \n async fn foo() {\n     bar().await;\n-    //~^ ERROR type inside `async fn` body must be known in this context\n-    //~| ERROR type inside `async fn` body must be known in this context\n-    //~| ERROR type inside `async fn` body must be known in this context\n-    //~| NOTE cannot infer type for type parameter `T`\n-    //~| NOTE cannot infer type for type parameter `T`\n-    //~| NOTE cannot infer type for type parameter `T`\n-    //~| NOTE the type is part of the `async fn` body because of this `await`\n-    //~| NOTE the type is part of the `async fn` body because of this `await`\n-    //~| NOTE the type is part of the `async fn` body because of this `await`\n-    //~| NOTE in this expansion of desugaring of `await`\n-    //~| NOTE in this expansion of desugaring of `await`\n-    //~| NOTE in this expansion of desugaring of `await`\n+    //[drop_tracking_mir]~^ ERROR type annotations needed\n+    //[drop_tracking_mir]~| NOTE cannot infer type of the type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~^^^ ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking,drop_tracking]~| ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking,drop_tracking]~| ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking,drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking,drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking,drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking]~^^^^^^^^^^^^^^^ ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking]~| ERROR type inside `async fn` body must be known in this context\n+    //[no_drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking]~| NOTE cannot infer type for type parameter `T`\n+    //[no_drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking]~| NOTE the type is part of the `async fn` body because of this `await`\n+    //[no_drop_tracking]~| NOTE in this expansion of desugaring of `await`\n+    //[no_drop_tracking]~| NOTE in this expansion of desugaring of `await`\n }\n fn main() {}"}, {"sha": "35698a98dbd629386b35371a88054e73f48f6b1d", "filename": "tests/ui/generator/drop-tracking-parent-expression.drop_tracking_mir.stderr", "status": "modified", "additions": 7, "deletions": 219, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,91 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:13\n    |\n LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:25:22\n-   |\n-LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n-   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n-...\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `copy::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:27:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n+   |               ^^^^^^^^^^^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -105,49 +22,6 @@ LL |               let g = move || match drop($name::Client { ..$name::Client::d\n ...\n LL |                   _ => yield,\n    |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -165,10 +39,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:13\n    |\n LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n+   |               ^^^^^^^^^^^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -188,49 +62,6 @@ LL |               let g = move || match drop($name::Client { ..$name::Client::d\n ...\n LL |                   _ => yield,\n    |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -248,10 +79,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:13\n    |\n LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n+   |               ^^^^^^^^^^^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -271,49 +102,6 @@ LL |               let g = move || match drop($name::Client { ..$name::Client::d\n ...\n LL |                   _ => yield,\n    |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -330,5 +118,5 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "ed9ac6d11adb1d787dd28ea184a0fd37753cd559", "filename": "tests/ui/generator/drop-tracking-parent-expression.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -21,14 +21,14 @@ macro_rules! type_combinations {\n             let g = move || match drop($name::Client { ..$name::Client::default() }) {\n             //~^ `significant_drop::Client` which is not `Send`\n             //~| `insignificant_dtor::Client` which is not `Send`\n-            //~| `derived_drop::Client` which is not `Send`\n+            //[no_drop_tracking,drop_tracking]~| `derived_drop::Client` which is not `Send`\n                 _ => yield,\n             };\n             assert_send(g);\n             //~^ ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~^^^^ ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n         }\n \n         // Simple owned value. This works because the Client is considered moved into `drop`,\n@@ -38,10 +38,10 @@ macro_rules! type_combinations {\n                 _ => yield,\n             };\n             assert_send(g);\n-            //[no_drop_tracking,drop_tracking_mir]~^ ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~^ ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n         }\n     )* }\n }"}, {"sha": "4bba20bbae0068c9d63fc8a1dd7c5ed8ec7eb1cc", "filename": "tests/ui/generator/issue-57017.drop_tracking_mir.stderr", "status": "removed", "additions": 0, "deletions": 248, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fissue-57017.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fissue-57017.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.drop_tracking_mir.stderr?ref=60e04d1e8c3afd392551db103651e0ac55b4bd7e", "patch": "@@ -1,248 +0,0 @@\n-error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:30:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:28:28\n-   |\n-LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n-   |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n-LL |                   _status => yield,\n-   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n-LL |               };\n-   |               - `&$name::unsync::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:42:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:40:28\n-   |\n-LL |               let g = move || match drop($name::unsend::Client::default()) {\n-   |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n-LL |                   _status => yield,\n-   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::unsend::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:30:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:28:28\n-   |\n-LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n-   |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n-LL |                   _status => yield,\n-   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n-LL |               };\n-   |               - `&$name::unsync::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:42:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:40:28\n-   |\n-LL |               let g = move || match drop($name::unsend::Client::default()) {\n-   |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n-LL |                   _status => yield,\n-   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::unsend::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:30:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:28:28\n-   |\n-LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n-   |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n-LL |                   _status => yield,\n-   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n-LL |               };\n-   |               - `&$name::unsync::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:42:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:40:28\n-   |\n-LL |               let g = move || match drop($name::unsend::Client::default()) {\n-   |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n-LL |                   _status => yield,\n-   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::unsend::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n-LL | |         significant_drop => {\n-...  |\n-LL | |         }\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 6 previous errors\n-"}, {"sha": "06d2d23b9efb17e79188cf429aaf071585ed45f9", "filename": "tests/ui/generator/issue-57017.no_drop_tracking.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,5 +1,5 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:30:25\n+  --> $DIR/issue-57017.rs:31:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -15,7 +15,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:28:28\n+  --> $DIR/issue-57017.rs:29:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n@@ -33,14 +33,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n+  --> $DIR/issue-57017.rs:51:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:42:25\n+  --> $DIR/issue-57017.rs:43:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -54,9 +54,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:40:28\n+  --> $DIR/issue-57017.rs:41:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n@@ -74,14 +74,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n+  --> $DIR/issue-57017.rs:51:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:30:25\n+  --> $DIR/issue-57017.rs:31:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -97,7 +97,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:28:28\n+  --> $DIR/issue-57017.rs:29:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n@@ -115,14 +115,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n+  --> $DIR/issue-57017.rs:51:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:42:25\n+  --> $DIR/issue-57017.rs:43:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -136,9 +136,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:40:28\n+  --> $DIR/issue-57017.rs:41:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n@@ -156,14 +156,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n+  --> $DIR/issue-57017.rs:51:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:30:25\n+  --> $DIR/issue-57017.rs:31:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -179,7 +179,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:28:28\n+  --> $DIR/issue-57017.rs:29:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n@@ -197,14 +197,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n+  --> $DIR/issue-57017.rs:51:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:42:25\n+  --> $DIR/issue-57017.rs:43:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -218,9 +218,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:40:28\n+  --> $DIR/issue-57017.rs:41:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n@@ -238,7 +238,7 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:50:19\n+  --> $DIR/issue-57017.rs:51:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}, {"sha": "03b00ac99ad221fd447eefec7af003d9adf37f63", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -2,6 +2,7 @@\n // [drop_tracking] compile-flags: -Zdrop-tracking\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // [drop_tracking] build-pass\n+// [drop_tracking_mir] build-pass\n \n #![feature(generators, negative_impls)]\n \n@@ -28,9 +29,9 @@ macro_rules! type_combinations {\n                 _status => yield,\n             };\n             assert_send(g);\n-            //[no_drop_tracking,drop_tracking_mir]~^ ERROR generator cannot be sent between threads safely\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~^ ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n         }\n \n         // This tests that `Client` is properly considered to be dropped after moving it into the\n@@ -40,9 +41,9 @@ macro_rules! type_combinations {\n                 _status => yield,\n             };\n             assert_send(g);\n-            //[no_drop_tracking,drop_tracking_mir]~^ ERROR generator cannot be sent between threads safely\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~^ ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking]~| ERROR generator cannot be sent between threads safely\n         }\n     )* }\n }"}, {"sha": "a253cafe24d0d75a3dda69c4230b8962e5a957cd", "filename": "tests/ui/generator/issue-57478.drop_tracking_mir.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fissue-57478.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fissue-57478.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.drop_tracking_mir.stderr?ref=60e04d1e8c3afd392551db103651e0ac55b4bd7e", "patch": "@@ -1,32 +0,0 @@\n-error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57478.rs:12:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |\n-LL | |         let guard = Foo;\n-LL | |         drop(guard);\n-LL | |         yield;\n-LL | |     })\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/issue-57478.rs:12:17: 12:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57478.rs:17:9\n-   |\n-LL |         let guard = Foo;\n-   |             ----- has type `Foo` which is not `Send`\n-LL |         drop(guard);\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     })\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/issue-57478.rs:21:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to previous error\n-"}, {"sha": "612dd9c37f70173259b2d037a85fc82859ee025d", "filename": "tests/ui/generator/issue-57478.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,17 +1,16 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57478.rs:12:17\n+  --> $DIR/issue-57478.rs:13:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |\n LL | |         let guard = Foo;\n LL | |         drop(guard);\n LL | |         yield;\n LL | |     })\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/issue-57478.rs:12:17: 12:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/issue-57478.rs:13:17: 13:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/issue-57478.rs:17:9\n    |"}, {"sha": "3c23b5992710e2bceb3a3b5903b6add9bcdb306f", "filename": "tests/ui/generator/issue-57478.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-57478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -2,6 +2,7 @@\n // [drop_tracking] compile-flags: -Zdrop-tracking\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // [drop_tracking] check-pass\n+// [drop_tracking_mir] check-pass\n \n #![feature(negative_impls, generators)]\n \n@@ -11,7 +12,6 @@ impl !Send for Foo {}\n fn main() {\n     assert_send(|| {\n         //[no_drop_tracking]~^ ERROR generator cannot be sent between threads safely\n-        //[drop_tracking_mir]~^^ ERROR generator cannot be sent between threads safely\n         let guard = Foo;\n         drop(guard);\n         yield;"}, {"sha": "a83522b714d539d9f00d15b8cc4788e4b92ac84a", "filename": "tests/ui/generator/issue-68112.drop_tracking_mir.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:43:18\n+  --> $DIR/issue-68112.rs:43:5\n    |\n LL |     require_send(send_gen);\n-   |                  ^^^^^^^^ generator is not `Send`\n+   |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n@@ -14,22 +14,17 @@ LL |         let _non_send_gen = make_non_send_generator();\n LL |\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n-...\n-LL |     };\n-   |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:25:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:67:18\n+  --> $DIR/issue-68112.rs:67:5\n    |\n LL |     require_send(send_gen);\n-   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n@@ -49,7 +44,7 @@ note: required because it appears within the type `impl Generator<Return = Arc<R\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n+   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`\n note: required because it's used within this generator\n   --> $DIR/issue-68112.rs:63:20\n    |"}, {"sha": "48b53b7693d41f5e83012b36c17e8e9cfd5d8e8f", "filename": "tests/ui/generator/issue-68112.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -11,7 +11,7 @@ use std::{\n };\n \n pub struct Ready<T>(Option<T>);\n-impl<T> Generator<()> for Ready<T> {\n+impl<T: Unpin> Generator<()> for Ready<T> {\n     type Return = T;\n     type Yield = ();\n     fn resume(mut self: Pin<&mut Self>, _args: ()) -> GeneratorState<(), T> {\n@@ -39,7 +39,7 @@ fn test1() {\n         yield;\n         //~^ NOTE yield occurs here\n         //~| NOTE value is used across a yield\n-    }; //~ NOTE later dropped here\n+    }; //[no_drop_tracking,drop_tracking]~ NOTE later dropped here\n     require_send(send_gen);\n     //~^ ERROR generator cannot be sent between threads\n     //~| NOTE not `Send`\n@@ -68,7 +68,7 @@ fn test2() {\n     //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE required for\n-    //~| NOTE required by a bound introduced by this call\n+    //[no_drop_tracking,drop_tracking]~| NOTE required by a bound introduced by this call\n     //~| NOTE captures the following types\n     //~| NOTE use `std::sync::RwLock` instead\n }"}, {"sha": "718fd42245ad31973cddf384da96719aacd0d286", "filename": "tests/ui/generator/not-send-sync.drop_tracking.stderr", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,58 +1,60 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:19:17\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:17:17\n    |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n+LL |       assert_sync(|| {\n+   |  _________________^\n LL | |\n-LL | |         drop(&a);\n+LL | |         let a = NotSync;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   | |_____^ generator is not `Sync`\n    |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/not-send-sync.rs:19:17\n+   = help: within `[generator@$DIR/not-send-sync.rs:17:17: 17:19]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:20:9\n    |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/not-send-sync.rs:10:23\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:14:23\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n \n-error: generator cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:12:17\n+error: generator cannot be sent between threads safely\n+  --> $DIR/not-send-sync.rs:24:17\n    |\n-LL |       assert_sync(|| {\n+LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         let a = Cell::new(2);\n+LL | |         let a = NotSend;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ generator is not `Sync`\n+   | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/not-send-sync.rs:12:17: 12:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/not-send-sync.rs:15:9\n+   = help: within `[generator@$DIR/not-send-sync.rs:24:17: 24:19]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:27:9\n    |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n LL |     });\n    |     - `a` is later dropped here\n-note: required by a bound in `assert_sync`\n-  --> $DIR/not-send-sync.rs:9:23\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:15:23\n    |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_sync`\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "66f01ae37d81ac6f61956428b78343600028f527", "filename": "tests/ui/generator/not-send-sync.drop_tracking_mir.stderr", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,58 +1,42 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:19:17\n-   |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | |\n-LL | |         drop(&a);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n-   |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/not-send-sync.rs:19:17\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:17:5\n    |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/not-send-sync.rs:10:23\n+LL |     assert_sync(|| {\n+   |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:12:17\n-   |\n-LL |       assert_sync(|| {\n-   |  _________________^\n-LL | |\n-LL | |         let a = Cell::new(2);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Sync`\n-   |\n-   = help: within `[generator@$DIR/not-send-sync.rs:12:17: 12:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+   = help: within `[generator@$DIR/not-send-sync.rs:17:17: 17:19]`, the trait `Sync` is not implemented for `NotSync`\n note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/not-send-sync.rs:15:9\n+  --> $DIR/not-send-sync.rs:20:9\n    |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n-LL |     });\n-   |     - `a` is later dropped here\n note: required by a bound in `assert_sync`\n-  --> $DIR/not-send-sync.rs:9:23\n+  --> $DIR/not-send-sync.rs:14:23\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_sync`\n \n+error: generator cannot be sent between threads safely\n+  --> $DIR/not-send-sync.rs:24:5\n+   |\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:24:17: 24:19]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:27:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:15:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "718fd42245ad31973cddf384da96719aacd0d286", "filename": "tests/ui/generator/not-send-sync.no_drop_tracking.stderr", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,58 +1,60 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:19:17\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:17:17\n    |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n+LL |       assert_sync(|| {\n+   |  _________________^\n LL | |\n-LL | |         drop(&a);\n+LL | |         let a = NotSync;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   | |_____^ generator is not `Sync`\n    |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/not-send-sync.rs:19:17\n+   = help: within `[generator@$DIR/not-send-sync.rs:17:17: 17:19]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:20:9\n    |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/not-send-sync.rs:10:23\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:14:23\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n \n-error: generator cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:12:17\n+error: generator cannot be sent between threads safely\n+  --> $DIR/not-send-sync.rs:24:17\n    |\n-LL |       assert_sync(|| {\n+LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         let a = Cell::new(2);\n+LL | |         let a = NotSend;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ generator is not `Sync`\n+   | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/not-send-sync.rs:12:17: 12:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/not-send-sync.rs:15:9\n+   = help: within `[generator@$DIR/not-send-sync.rs:24:17: 24:19]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:27:9\n    |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n LL |     });\n    |     - `a` is later dropped here\n-note: required by a bound in `assert_sync`\n-  --> $DIR/not-send-sync.rs:9:23\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:15:23\n    |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_sync`\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "8794db452b4651bfd51c14cef7973b51dda6284b", "filename": "tests/ui/generator/not-send-sync.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -2,23 +2,29 @@\n // [drop_tracking] compile-flags: -Zdrop-tracking\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(generators)]\n+#![feature(negative_impls)]\n \n-use std::cell::Cell;\n+struct NotSend;\n+struct NotSync;\n+\n+impl !Send for NotSend {}\n+impl !Sync for NotSync {}\n \n fn main() {\n     fn assert_sync<T: Sync>(_: T) {}\n     fn assert_send<T: Send>(_: T) {}\n \n     assert_sync(|| {\n         //~^ ERROR: generator cannot be shared between threads safely\n-        let a = Cell::new(2);\n+        let a = NotSync;\n         yield;\n+        drop(a);\n     });\n \n-    let a = Cell::new(2);\n     assert_send(|| {\n-        //~^ ERROR: E0277\n-        drop(&a);\n+        //~^ ERROR: generator cannot be sent between threads safely\n+        let a = NotSend;\n         yield;\n+        drop(a);\n     });\n }"}, {"sha": "bf814456427e03e299361f1cc26398a377e712c8", "filename": "tests/ui/generator/parent-expression.drop_tracking_mir.stderr", "status": "modified", "additions": 7, "deletions": 219, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,91 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:27:25\n+  --> $DIR/parent-expression.rs:27:13\n    |\n LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/parent-expression.rs:25:22\n-   |\n-LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n-   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n-...\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `copy::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:27:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n+   |               ^^^^^^^^^^^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -105,49 +22,6 @@ LL |               let g = move || match drop($name::Client { ..$name::Client::d\n ...\n LL |                   _ => yield,\n    |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -165,10 +39,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:27:25\n+  --> $DIR/parent-expression.rs:27:13\n    |\n LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n+   |               ^^^^^^^^^^^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -188,49 +62,6 @@ LL |               let g = move || match drop($name::Client { ..$name::Client::d\n ...\n LL |                   _ => yield,\n    |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -248,10 +79,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:27:25\n+  --> $DIR/parent-expression.rs:27:13\n    |\n LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n+   |               ^^^^^^^^^^^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -271,49 +102,6 @@ LL |               let g = move || match drop($name::Client { ..$name::Client::d\n ...\n LL |                   _ => yield,\n    |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-note: required by a bound in `assert_send`\n-  --> $DIR/parent-expression.rs:49:19\n-   |\n-LL | fn assert_send<T: Send>(_thing: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/parent-expression.rs:40:25\n-   |\n-LL |               assert_send(g);\n-   |                           ^ generator is not `Send`\n-...\n-LL | /     type_combinations!(\n-LL | |         // OK\n-LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n-LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n-...  |\n-LL | |         };\n-LL | |     );\n-   | |_____- in this macro invocation\n-   |\n-   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/parent-expression.rs:38:22\n-   |\n-LL |               let g = move || match drop($name::Client::default()) {\n-   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n-LL |                   _ => yield,\n-   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n-LL |               };\n-   |               - `$name::Client::default()` is later dropped here\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -330,5 +118,5 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "239034e3d4e8a99943a55a0593656d9e4da31267", "filename": "tests/ui/generator/parent-expression.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fparent-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fparent-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -28,7 +28,7 @@ macro_rules! type_combinations {\n             //~^ ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~^^^^ ERROR cannot be sent between threads\n+            //[no_drop_tracking]~^^^^ ERROR cannot be sent between threads\n         }\n \n         // Simple owned value. This works because the Client is considered moved into `drop`,\n@@ -38,10 +38,10 @@ macro_rules! type_combinations {\n                 _ => yield,\n             };\n             assert_send(g);\n-            //[no_drop_tracking,drop_tracking_mir]~^ ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n-            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~^ ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking]~| ERROR cannot be sent between threads\n         }\n     )* }\n }"}, {"sha": "f1b25cb8c34e979beda45ce6e41f35c3d7ddb0e5", "filename": "tests/ui/generator/partial-drop.drop_tracking.stderr", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,17 +1,16 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:16:17\n+  --> $DIR/partial-drop.rs:17:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n LL | |         let guard = Bar { foo: Foo, x: 42 };\n LL | |         drop(guard.foo);\n LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:17:17: 17:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/partial-drop.rs:21:9\n    |\n@@ -23,7 +22,7 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n+  --> $DIR/partial-drop.rs:33:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n@@ -34,16 +33,16 @@ error: generator cannot be sent between threads safely\n LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n+LL | |         let Bar { foo, x } = guard;\n+LL | |         drop(foo);\n LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:31:9\n+  --> $DIR/partial-drop.rs:29:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -53,40 +52,10 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n+  --> $DIR/partial-drop.rs:33:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:34:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:40:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-...\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "fa901b1977a156705af490b2f8dd4197a9b4dc5d", "filename": "tests/ui/generator/partial-drop.drop_tracking_mir.stderr", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking_mir.stderr?ref=60e04d1e8c3afd392551db103651e0ac55b4bd7e", "patch": "@@ -1,92 +0,0 @@\n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:16:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-LL | |         drop(guard.foo);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:21:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-LL |         drop(guard.foo);\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:24:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:31:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-...\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:34:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:40:9\n-   |\n-LL |         let Bar { foo, x } = guard;\n-   |                   --- has type `Foo` which is not `Send`\n-LL |         drop(foo);\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `foo` maybe used later\n-LL |     });\n-   |     - `foo` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "91152b5ea6f3dfa5e260e34c5e93964acb5e7ec1", "filename": "tests/ui/generator/partial-drop.no_drop_tracking.stderr", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,17 +1,16 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:16:17\n+  --> $DIR/partial-drop.rs:17:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n LL | |         let guard = Bar { foo: Foo, x: 42 };\n LL | |         drop(guard.foo);\n LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:17:17: 17:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/partial-drop.rs:21:9\n    |\n@@ -23,7 +22,7 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n+  --> $DIR/partial-drop.rs:33:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n@@ -34,46 +33,16 @@ error: generator cannot be sent between threads safely\n LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n+LL | |         let Bar { foo, x } = guard;\n+LL | |         drop(foo);\n LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:31:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-...\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:34:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:40:9\n+  --> $DIR/partial-drop.rs:29:9\n    |\n LL |         let Bar { foo, x } = guard;\n    |                   --- has type `Foo` which is not `Send`\n@@ -83,10 +52,10 @@ LL |         yield;\n LL |     });\n    |     - `foo` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n+  --> $DIR/partial-drop.rs:33:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "1d3ae075d43afb448beb8ea97070d1e8a818d164", "filename": "tests/ui/generator/partial-drop.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fpartial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fpartial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,6 +1,7 @@\n // revisions: no_drop_tracking drop_tracking drop_tracking_mir\n // [drop_tracking] compile-flags: -Zdrop-tracking\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking_mir] check-pass\n \n #![feature(negative_impls, generators)]\n \n@@ -14,26 +15,14 @@ struct Bar {\n \n fn main() {\n     assert_send(|| {\n-        //~^ ERROR generator cannot be sent between threads safely\n-        // FIXME: it would be nice to make this work.\n+        //[no_drop_tracking,drop_tracking]~^ ERROR generator cannot be sent between threads safely\n         let guard = Bar { foo: Foo, x: 42 };\n         drop(guard.foo);\n         yield;\n     });\n \n     assert_send(|| {\n-        //~^ ERROR generator cannot be sent between threads safely\n-        // FIXME: it would be nice to make this work.\n-        let guard = Bar { foo: Foo, x: 42 };\n-        drop(guard);\n-        guard.foo = Foo;\n-        guard.x = 23;\n-        yield;\n-    });\n-\n-    assert_send(|| {\n-        //~^ ERROR generator cannot be sent between threads safely\n-        // FIXME: it would be nice to make this work.\n+        //[no_drop_tracking,drop_tracking]~^ ERROR generator cannot be sent between threads safely\n         let guard = Bar { foo: Foo, x: 42 };\n         let Bar { foo, x } = guard;\n         drop(foo);"}, {"sha": "e3c19264ee8574cb2d9b2bef85003910390d6add", "filename": "tests/ui/generator/partial-drop.stderr", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fpartial-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e04d1e8c3afd392551db103651e0ac55b4bd7e/tests%2Fui%2Fgenerator%2Fpartial-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.stderr?ref=60e04d1e8c3afd392551db103651e0ac55b4bd7e", "patch": "@@ -1,92 +0,0 @@\n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:16:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-LL | |         drop(guard.foo);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:21:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-LL |         drop(guard.foo);\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:24:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:31:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-...\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:34:17\n-   |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         // FIXME: it would be nice to make this work.\n-LL | |         let guard = Bar { foo: Foo, x: 42 };\n-...  |\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Send`\n-   |\n-   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n-note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:40:9\n-   |\n-LL |         let guard = Bar { foo: Foo, x: 42 };\n-   |             ----- has type `Bar` which is not `Send`\n-...\n-LL |         yield;\n-   |         ^^^^^ yield occurs here, with `guard` maybe used later\n-LL |     });\n-   |     - `guard` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:44:19\n-   |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "c045b1441c146e127936fae446f8f25980c06e08", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking_mir.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:40:18\n+  --> $DIR/generator-print-verbose-1.rs:40:5\n    |\n LL |     require_send(send_gen);\n-   |                  ^^^^^^^^ generator is not `Send`\n+   |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n@@ -13,21 +13,17 @@ LL |         let _non_send_gen = make_non_send_generator();\n    |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n-LL |     };\n-   |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n   --> $DIR/generator-print-verbose-1.rs:29:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:59:18\n+  --> $DIR/generator-print-verbose-1.rs:59:5\n    |\n LL |     require_send(send_gen);\n-   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n@@ -47,7 +43,7 @@ note: required because it appears within the type `Opaque(DefId(0:36 ~ generator\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:55:20\n    |"}, {"sha": "c7052c7d1b04d5fa9ce393a2f1e3c60e17a6c28f", "filename": "tests/ui/generator/print/generator-print-verbose-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -15,7 +15,7 @@ use std::{\n };\n \n pub struct Ready<T>(Option<T>);\n-impl<T> Generator<()> for Ready<T> {\n+impl<T: Unpin> Generator<()> for Ready<T> {\n     type Return = T;\n     type Yield = ();\n     fn resume(mut self: Pin<&mut Self>, _args: ()) -> GeneratorState<(), T> {"}, {"sha": "1f2e530f6f5779c916c9eb0f2ff799dc93fe4952", "filename": "tests/ui/generator/print/generator-print-verbose-2.drop_tracking.stderr", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,58 +1,60 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:22:17\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:20:17\n    |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n+LL |       assert_sync(|| {\n+   |  _________________^\n LL | |\n-LL | |         drop(&a);\n+LL | |         let a = NotSync;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   | |_____^ generator is not `Sync`\n    |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&'_#4r Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-2.rs:22:17\n+   = help: within `[main::{closure#0} upvar_tys=() {NotSync, ()}]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:23:9\n    |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/generator-print-verbose-2.rs:13:23\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:17:23\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n \n-error: generator cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:15:17\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:27:17\n    |\n-LL |       assert_sync(|| {\n+LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         let a = Cell::new(2);\n+LL | |         let a = NotSend;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ generator is not `Sync`\n+   | |_____^ generator is not `Send`\n    |\n-   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/generator-print-verbose-2.rs:18:9\n+   = help: within `[main::{closure#1} upvar_tys=() {NotSend, ()}]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:30:9\n    |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n LL |     });\n    |     - `a` is later dropped here\n-note: required by a bound in `assert_sync`\n-  --> $DIR/generator-print-verbose-2.rs:12:23\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:18:23\n    |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_sync`\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "354369f19540261deea6406c870c47fc1e2d5134", "filename": "tests/ui/generator/print/generator-print-verbose-2.drop_tracking_mir.stderr", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,58 +1,42 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:22:17\n-   |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | |\n-LL | |         drop(&a);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n-   |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&'_#4r Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-2.rs:22:17\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:20:5\n    |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/generator-print-verbose-2.rs:13:23\n+LL |     assert_sync(|| {\n+   |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n-\n-error: generator cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:15:17\n-   |\n-LL |       assert_sync(|| {\n-   |  _________________^\n-LL | |\n-LL | |         let a = Cell::new(2);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^ generator is not `Sync`\n-   |\n-   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+   = help: within `[main::{closure#0} upvar_tys=() [main::{closure#0}]]`, the trait `Sync` is not implemented for `NotSync`\n note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/generator-print-verbose-2.rs:18:9\n+  --> $DIR/generator-print-verbose-2.rs:23:9\n    |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n-LL |     });\n-   |     - `a` is later dropped here\n note: required by a bound in `assert_sync`\n-  --> $DIR/generator-print-verbose-2.rs:12:23\n+  --> $DIR/generator-print-verbose-2.rs:17:23\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_sync`\n \n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:27:5\n+   |\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: within `[main::{closure#1} upvar_tys=() [main::{closure#1}]]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:30:9\n+   |\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:18:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "1f2e530f6f5779c916c9eb0f2ff799dc93fe4952", "filename": "tests/ui/generator/print/generator-print-verbose-2.no_drop_tracking.stderr", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,58 +1,60 @@\n-error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:22:17\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:20:17\n    |\n-LL |       assert_send(|| {\n-   |  _____-----------_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n+LL |       assert_sync(|| {\n+   |  _________________^\n LL | |\n-LL | |         drop(&a);\n+LL | |         let a = NotSync;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   | |_____^ generator is not `Sync`\n    |\n-   = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-   = note: required for `&'_#4r Cell<i32>` to implement `Send`\n-note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-2.rs:22:17\n+   = help: within `[main::{closure#0} upvar_tys=() {NotSync, ()}]`, the trait `Sync` is not implemented for `NotSync`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:23:9\n    |\n-LL |     assert_send(|| {\n-   |                 ^^\n-note: required by a bound in `assert_send`\n-  --> $DIR/generator-print-verbose-2.rs:13:23\n+LL |         let a = NotSync;\n+   |             - has type `NotSync` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:17:23\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_send`\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n \n-error: generator cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:15:17\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:27:17\n    |\n-LL |       assert_sync(|| {\n+LL |       assert_send(|| {\n    |  _________________^\n LL | |\n-LL | |         let a = Cell::new(2);\n+LL | |         let a = NotSend;\n LL | |         yield;\n+LL | |         drop(a);\n LL | |     });\n-   | |_____^ generator is not `Sync`\n+   | |_____^ generator is not `Send`\n    |\n-   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n-note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/generator-print-verbose-2.rs:18:9\n+   = help: within `[main::{closure#1} upvar_tys=() {NotSend, ()}]`, the trait `Send` is not implemented for `NotSend`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:30:9\n    |\n-LL |         let a = Cell::new(2);\n-   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         let a = NotSend;\n+   |             - has type `NotSend` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |         drop(a);\n LL |     });\n    |     - `a` is later dropped here\n-note: required by a bound in `assert_sync`\n-  --> $DIR/generator-print-verbose-2.rs:12:23\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:18:23\n    |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ^^^^ required by this bound in `assert_sync`\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ab29db6e09c964475a86222f7156dafe2d97c2e8", "filename": "tests/ui/generator/print/generator-print-verbose-2.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -5,23 +5,29 @@\n \n // Same as test/ui/generator/not-send-sync.rs\n #![feature(generators)]\n+#![feature(negative_impls)]\n \n-use std::cell::Cell;\n+struct NotSend;\n+struct NotSync;\n+\n+impl !Send for NotSend {}\n+impl !Sync for NotSync {}\n \n fn main() {\n     fn assert_sync<T: Sync>(_: T) {}\n     fn assert_send<T: Send>(_: T) {}\n \n     assert_sync(|| {\n         //~^ ERROR: generator cannot be shared between threads safely\n-        let a = Cell::new(2);\n+        let a = NotSync;\n         yield;\n+        drop(a);\n     });\n \n-    let a = Cell::new(2);\n     assert_send(|| {\n-        //~^ ERROR: E0277\n-        drop(&a);\n+        //~^ ERROR: generator cannot be sent between threads safely\n+        let a = NotSend;\n         yield;\n+        drop(a);\n     });\n }"}, {"sha": "c14bb5cc9142d9a2035354bf6fef0aba34a233ed", "filename": "tests/ui/impl-trait/issue-55872-2.drop_tracking_mir.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -4,5 +4,11 @@ error: type parameter `T` is part of concrete type but not used in parameter lis\n LL |         async {}\n    |         ^^^^^^^^\n \n-error: aborting due to previous error\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "cbc7b5d62e138a48026cb3be6bba832ead2e8088", "filename": "tests/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -16,6 +16,7 @@ impl<S> Bar for S {\n     fn foo<T>() -> Self::E {\n         async {}\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //[drop_tracking_mir]~^^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n     }\n }\n "}, {"sha": "92a3290622ef267794789f6b0dfb0b0704952f5b", "filename": "tests/ui/impl-trait/issues/infinite-impl-trait-issue-38064.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -8,13 +8,13 @@ LL |     Foo(bar())\n    |     ---------- returning here with type `Foo<impl Quux>`\n ...\n LL | fn bar() -> impl Quux {\n-   |             --------- returning this opaque type `Foo<impl Quux>`\n+   |             --------- returning this type `Foo<impl Quux>`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:14:13\n    |\n LL | fn foo() -> impl Quux {\n-   |             --------- returning this opaque type `Bar<impl Quux>`\n+   |             --------- returning this type `Bar<impl Quux>`\n ...\n LL | fn bar() -> impl Quux {\n    |             ^^^^^^^^^ recursive opaque type"}, {"sha": "662c74bcdc0d045434b761b5b6412953db9c7def", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -112,16 +112,8 @@ LL |     (substs_change::<&T>(),)\n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:76:24\n    |\n-LL |   fn generator_hold() -> impl Sized {\n-   |                          ^^^^^^^^^^ recursive opaque type\n-LL |\n-LL | /     move || {\n-LL | |         let x = generator_hold();\n-   | |             - generator captures itself here\n-LL | |         yield;\n-LL | |         x;\n-LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:78:5: 78:12]`\n+LL | fn generator_hold() -> impl Sized {\n+   |                        ^^^^^^^^^^ recursive opaque type\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:90:26"}, {"sha": "262657da5fe6f8af4cd3a074bc432a4033bd0d54", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,14 +1,16 @@\n error: `No` held across a suspend point, but should not be\n-  --> $DIR/dedup.rs:19:13\n+  --> $DIR/dedup.rs:19:9\n    |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^ ------ the value is held across this suspend point\n+LL |     let no = No {};\n+   |         ^^\n+LL |     wheeee(&no).await;\n+   |                ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/dedup.rs:19:13\n+  --> $DIR/dedup.rs:19:9\n    |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^\n+LL |     let no = No {};\n+   |         ^^\n note: the lint level is defined here\n   --> $DIR/dedup.rs:6:9\n    |"}, {"sha": "262657da5fe6f8af4cd3a074bc432a4033bd0d54", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking_mir.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,14 +1,16 @@\n error: `No` held across a suspend point, but should not be\n-  --> $DIR/dedup.rs:19:13\n+  --> $DIR/dedup.rs:19:9\n    |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^ ------ the value is held across this suspend point\n+LL |     let no = No {};\n+   |         ^^\n+LL |     wheeee(&no).await;\n+   |                ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/dedup.rs:19:13\n+  --> $DIR/dedup.rs:19:9\n    |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^\n+LL |     let no = No {};\n+   |         ^^\n note: the lint level is defined here\n   --> $DIR/dedup.rs:6:9\n    |"}, {"sha": "7ed43d2571989ebc03d82b79ed4e7595ffe1249f", "filename": "tests/ui/lint/must_not_suspend/dedup.no_drop_tracking.stderr", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,19 +1,33 @@\n error: `No` held across a suspend point, but should not be\n-  --> $DIR/dedup.rs:19:13\n+  --> $DIR/dedup.rs:19:9\n    |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^ ------ the value is held across this suspend point\n+LL |     let no = No {};\n+   |         ^^\n+LL |     wheeee(&no).await;\n+   |                ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/dedup.rs:19:13\n+  --> $DIR/dedup.rs:19:9\n    |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^\n+LL |     let no = No {};\n+   |         ^^\n note: the lint level is defined here\n   --> $DIR/dedup.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:20:13\n+   |\n+LL |     wheeee(&no).await;\n+   |             ^^ ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:20:13\n+   |\n+LL |     wheeee(&no).await;\n+   |             ^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "96bdb7715b18308f452a412f6cbb87decf7eaba1", "filename": "tests/ui/lint/must_not_suspend/dedup.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -16,7 +16,9 @@ async fn wheeee<T>(t: T) {\n }\n \n async fn yes() {\n-    wheeee(&No {}).await; //~ ERROR `No` held across\n+    let no = No {}; //~ ERROR `No` held across\n+    wheeee(&no).await; //[no_drop_tracking]~ ERROR `No` held across\n+    drop(no);\n }\n \n fn main() {"}, {"sha": "e3628ca5e493498eaea7849b90ec5c0eecf7ec0a", "filename": "tests/ui/lint/must_not_suspend/ref.drop_tracking_mir.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,22 +1,22 @@\n-error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/ref.rs:22:26\n+error: reference to `Umm` held across a suspend point, but should not be\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n-   |                          ^^^^^^\n+   |             ^^^^^\n LL |\n LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/ref.rs:22:26\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n-   |                          ^^^^^^\n+   |             ^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/ref.rs:22:26\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n-   |                          ^^^^^^\n+   |             ^^^^^\n note: the lint level is defined here\n   --> $DIR/ref.rs:7:9\n    |"}, {"sha": "d05dcb83ac57c5f21fad3c245426ce619fb6a33c", "filename": "tests/ui/lint/must_not_suspend/ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -23,6 +23,7 @@ impl Bar {\n \n         other().await;\n \n+        let _g = &*guard;\n         *guard = Umm { i: 2 }\n     }\n }"}, {"sha": "cc3ae298dbba7ab00f1189de2e42121a6d8e6442", "filename": "tests/ui/lint/must_not_suspend/trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -25,6 +25,9 @@ pub async fn uhoh() {\n     let _guard2 = r#dyn(); //~ ERROR boxed `Wow` trait object held across\n \n     other().await;\n+\n+    drop(_guard1);\n+    drop(_guard2);\n }\n \n fn main() {"}, {"sha": "f89b3e341fd8c2f862b65508a08fc591148da710", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,18 +1,18 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^"}, {"sha": "f89b3e341fd8c2f862b65508a08fc591148da710", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking_mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,18 +1,18 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^"}, {"sha": "f89b3e341fd8c2f862b65508a08fc591148da710", "filename": "tests/ui/lint/must_not_suspend/unit.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -1,18 +1,18 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/unit.rs:23:9\n+  --> $DIR/unit.rs:22:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^"}, {"sha": "fbc51b366817c9b482a004a108673566729fc30b", "filename": "tests/ui/lint/must_not_suspend/unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -10,7 +10,6 @@ struct Umm {\n     i: i64\n }\n \n-\n fn bar() -> Umm {\n     Umm {\n         i: 1\n@@ -22,6 +21,7 @@ async fn other() {}\n pub async fn uhoh() {\n     let _guard = bar(); //~ ERROR `Umm` held across\n     other().await;\n+    drop(_guard);\n }\n \n fn main() {"}, {"sha": "5a4863169ea358613ed6a35a83ff535f14d430d5", "filename": "tests/ui/lint/must_not_suspend/warn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e52a671d41a787fe236cfa158d004ee28836b11/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=0e52a671d41a787fe236cfa158d004ee28836b11", "patch": "@@ -23,6 +23,7 @@ async fn other() {}\n pub async fn uhoh() {\n     let _guard = bar(); //~ WARNING `Umm` held across\n     other().await;\n+    drop(_guard);\n }\n \n fn main() {"}]}