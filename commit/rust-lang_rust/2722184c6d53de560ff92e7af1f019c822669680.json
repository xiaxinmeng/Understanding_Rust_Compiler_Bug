{"sha": "2722184c6d53de560ff92e7af1f019c822669680", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MjIxODRjNmQ1M2RlNTYwZmY5MmU3YWYxZjAxOWM4MjI2Njk2ODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T17:32:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-04T17:32:34Z"}, "message": "Merge pull request #3458 from matklad/dist\n\ncargo xtask dist", "tree": {"sha": "7c7bba3328a85b0f4c5d9a3b7d9f3c3e3616b4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7bba3328a85b0f4c5d9a3b7d9f3c3e3616b4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2722184c6d53de560ff92e7af1f019c822669680", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeX+YyCRBK7hj4Ov3rIwAAdHIIAG8XyAooC0im8iTn1R94Z9/W\nA82OtR3xPK72jcaYMQ5ZSidNBjI1WR1pVrapdf6thxBdQz/LB1K/W9A7TudLJxWt\nn1gKa0N7sodtCH0h3o2PMT5bl+4mb/gwfN5ekS6nKMTs+faPtnvsXgRrzvAH112C\nC5xr+x4VFPaMu5H0AJYdsNH4ZuHGHoBkirR6PW5K4bwyR8H3VAepFhaxnalB4VLC\ns/FBgXUWPMP+9dQXz4PDDifB2PzvBTOMgql16slBJDKxXItlQp26qc64xG6+0/DS\nWUroZOKR00j46I8lIUVTqKEj/Uj6WSNBu5BcvOtrvCVcE13jrgZReCxLOCS2Xj0=\n=8xOA\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c7bba3328a85b0f4c5d9a3b7d9f3c3e3616b4f4\nparent ae6109a68ce6980bdaeb3824adfc14417d40aa4a\nparent fd586e58d97e4ac2d2448426cf6c4937b48c5660\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1583343154 +0100\ncommitter GitHub <noreply@github.com> 1583343154 +0100\n\nMerge pull request #3458 from matklad/dist\n\ncargo xtask dist"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2722184c6d53de560ff92e7af1f019c822669680", "html_url": "https://github.com/rust-lang/rust/commit/2722184c6d53de560ff92e7af1f019c822669680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2722184c6d53de560ff92e7af1f019c822669680/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6109a68ce6980bdaeb3824adfc14417d40aa4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6109a68ce6980bdaeb3824adfc14417d40aa4a", "html_url": "https://github.com/rust-lang/rust/commit/ae6109a68ce6980bdaeb3824adfc14417d40aa4a"}, {"sha": "fd586e58d97e4ac2d2448426cf6c4937b48c5660", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd586e58d97e4ac2d2448426cf6c4937b48c5660", "html_url": "https://github.com/rust-lang/rust/commit/fd586e58d97e4ac2d2448426cf6c4937b48c5660"}], "stats": {"total": 122, "additions": 81, "deletions": 41}, "files": [{"sha": "f5a07c21f576eb10eef47f26fc163481ef89be0a", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 12, "deletions": 31, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2722184c6d53de560ff92e7af1f019c822669680/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/2722184c6d53de560ff92e7af1f019c822669680/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=2722184c6d53de560ff92e7af1f019c822669680", "patch": "@@ -41,19 +41,27 @@ jobs:\n         target: x86_64-unknown-linux-musl\n         override: true\n \n+    - name: Create distribution dir\n+      run: mkdir ./dist\n+\n     - name: Build\n       if: matrix.os == 'ubuntu-latest'\n       run: cargo build --package rust-analyzer --bin rust-analyzer --release --target x86_64-unknown-linux-musl\n       env:\n         CC: clang\n \n+    - name: Build VS Code extension\n+      if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'\n+      run: cargo xtask dist\n+\n+    - name: Build VS Code extension\n+      if: matrix.os == 'ubuntu-latest' && github.event_name != 'push'\n+      run: cargo xtask dist --nightly\n+\n     - name: Build\n       if: matrix.os != 'ubuntu-latest'\n       run: cargo build --package rust-analyzer --bin rust-analyzer --release\n \n-    - name: Create distribution dir\n-      run: mkdir ./dist\n-\n     - name: Copy binary\n       if: matrix.os == 'ubuntu-latest'\n       run: cp ./target/x86_64-unknown-linux-musl/release/rust-analyzer ./dist/rust-analyzer-linux && strip ./dist/rust-analyzer-linux\n@@ -72,33 +80,6 @@ jobs:\n         name: server-${{ matrix.os }}\n         path: ./dist\n \n-  build-clients:\n-    name: build-clients\n-    runs-on: ubuntu-latest\n-    steps:\n-    - name: Checkout repository\n-      uses: actions/checkout@v1\n-\n-    - name: Install Nodejs\n-      uses: actions/setup-node@v1\n-      with:\n-        node-version: 12.x\n-\n-    - run: npm ci\n-      working-directory: ./editors/code\n-\n-    - run: npm run package --scripts-prepend-node-path\n-      working-directory: ./editors/code\n-\n-    - name: Copy vscode extension\n-      run: mkdir -p ./dist/code && cp ./editors/code/rust-analyzer.vsix ./dist/\n-\n-    - name: Upload artifacts\n-      uses: actions/upload-artifact@v1\n-      with:\n-        name: editor-plugins\n-        path: ./dist\n-\n   make-release:\n     name: make-release\n     runs-on: ubuntu-latest\n@@ -150,4 +131,4 @@ jobs:\n       if: github.event_name == 'push'\n       working-directory: ./editors/code\n       # token from https://dev.azure.com/rust-analyzer/\n-      run: npx vsce publish 0.1.$(date +%Y%m%d) --pat ${{ secrets.MARKETPLACE_TOKEN }}\n+      run: npx vsce publish 0.1.$(date +%Y%m%d) --pat ${{ secrets.MARKETPLACE_TOKEN }} --packagePath ../../dist/rust-analyzer.vsix"}, {"sha": "f835edef0062b901a03a35bfd195bbf7b2a386da", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2722184c6d53de560ff92e7af1f019c822669680/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/2722184c6d53de560ff92e7af1f019c822669680/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=2722184c6d53de560ff92e7af1f019c822669680", "patch": "@@ -1,4 +1,5 @@\n /target/\n+/dist/\n crates/*/target\n **/*.rs.bk\n **/*.rs.pending-snap"}, {"sha": "d0d745b05ec616c37ca77ab42ded9fc77815ff85", "filename": "xtask/src/install.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=2722184c6d53de560ff92e7af1f019c822669680", "patch": "@@ -4,10 +4,7 @@ use std::{env, path::PathBuf, str};\n \n use anyhow::{bail, format_err, Context, Result};\n \n-use crate::{\n-    not_bash::{pushd, run},\n-    project_root,\n-};\n+use crate::not_bash::{pushd, run};\n \n // Latest stable, feel free to send a PR if this lags behind.\n const REQUIRED_RUST_VERSION: u32 = 41;\n@@ -27,7 +24,6 @@ pub struct ServerOpt {\n \n impl InstallCmd {\n     pub fn run(self) -> Result<()> {\n-        let _dir = pushd(project_root());\n         let both = self.server.is_some() && self.client.is_some();\n         if cfg!(target_os = \"macos\") {\n             fix_path_for_mac().context(\"Fix path for mac\")?"}, {"sha": "adbee10eef8c4dd9f3973c206c4c95183fd8939f", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=2722184c6d53de560ff92e7af1f019c822669680", "patch": "@@ -19,7 +19,7 @@ use std::{\n \n use crate::{\n     codegen::Mode,\n-    not_bash::{fs2, pushd, rm_rf, run},\n+    not_bash::{fs2, pushd, pwd, rm_rf, run},\n };\n \n pub use anyhow::Result;\n@@ -206,3 +206,42 @@ Release: release:{}[]\n fn is_release_tag(tag: &str) -> bool {\n     tag.len() == \"2020-02-24\".len() && tag.starts_with(|c: char| c.is_ascii_digit())\n }\n+\n+pub fn run_dist(nightly: bool) -> Result<()> {\n+    let dist = project_root().join(\"dist\");\n+    rm_rf(&dist)?;\n+    fs2::create_dir_all(&dist)?;\n+\n+    let _d = pushd(\"./editors/code\");\n+\n+    let package_json_path = pwd().join(\"package.json\");\n+    let original_package_json = fs2::read_to_string(&package_json_path)?;\n+    let _restore =\n+        Restore { path: package_json_path.clone(), contents: original_package_json.clone() };\n+\n+    let mut package_json = original_package_json.replace(r#\"\"enableProposedApi\": true,\"#, r#\"\"#);\n+\n+    if nightly {\n+        package_json = package_json\n+            .replace(r#\"\"name\": \"rust-analyzer\"\"#, r#\"\"name\": \"rust-analyzer-nightly\"\"#)\n+            .replace(\n+                r#\"\"displayName\": \"rust-analyzer\"\"#,\n+                r#\"\"displayName\": \"rust-analyzer nightly\"\"#,\n+            );\n+    }\n+    fs2::write(package_json_path, package_json)?;\n+\n+    run!(\"npx vsce package -o {}/rust-analyzer.vsix\", dist.display())?;\n+    Ok(())\n+}\n+\n+struct Restore {\n+    path: PathBuf,\n+    contents: String,\n+}\n+\n+impl Drop for Restore {\n+    fn drop(&mut self) {\n+        fs2::write(&self.path, &self.contents).unwrap();\n+    }\n+}"}, {"sha": "17a2f1c683deb69da4b82f468e033c9caab903b9", "filename": "xtask/src/main.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=2722184c6d53de560ff92e7af1f019c822669680", "patch": "@@ -14,14 +14,18 @@ use pico_args::Arguments;\n use xtask::{\n     codegen::{self, Mode},\n     install::{ClientOpt, InstallCmd, ServerOpt},\n-    pre_commit, run_clippy, run_fuzzer, run_pre_cache, run_release, run_rustfmt, Result,\n+    not_bash::pushd,\n+    pre_commit, project_root, run_clippy, run_dist, run_fuzzer, run_pre_cache, run_release,\n+    run_rustfmt, Result,\n };\n \n fn main() -> Result<()> {\n     if env::args().next().map(|it| it.contains(\"pre-commit\")) == Some(true) {\n         return pre_commit::run_hook();\n     }\n \n+    let _d = pushd(project_root());\n+\n     let mut args = Arguments::from_env();\n     let subcommand = args.subcommand()?.unwrap_or_default();\n \n@@ -97,6 +101,11 @@ FLAGS:\n             args.finish()?;\n             run_release(dry_run)\n         }\n+        \"dist\" => {\n+            let nightly = args.contains(\"--nightly\");\n+            args.finish()?;\n+            run_dist(nightly)\n+        }\n         _ => {\n             eprintln!(\n                 \"\\\n@@ -112,7 +121,8 @@ SUBCOMMANDS:\n     fuzz-tests\n     codegen\n     install\n-    lint\"\n+    lint\n+    dist\"\n             );\n             Ok(())\n         }"}, {"sha": "1697b7fcd1302329919ec02ebf5e60bc070017e0", "filename": "xtask/src/not_bash.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722184c6d53de560ff92e7af1f019c822669680/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=2722184c6d53de560ff92e7af1f019c822669680", "patch": "@@ -19,6 +19,11 @@ pub mod fs2 {\n         fs::read_dir(path).with_context(|| format!(\"Failed to read {}\", path.display()))\n     }\n \n+    pub fn read_to_string<P: AsRef<Path>>(path: P) -> Result<String> {\n+        let path = path.as_ref();\n+        fs::read_to_string(path).with_context(|| format!(\"Failed to read {}\", path.display()))\n+    }\n+\n     pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> Result<()> {\n         let path = path.as_ref();\n         fs::write(path, contents).with_context(|| format!(\"Failed to write {}\", path.display()))\n@@ -40,6 +45,11 @@ pub mod fs2 {\n         let path = path.as_ref();\n         fs::remove_dir_all(path).with_context(|| format!(\"Failed to remove dir {}\", path.display()))\n     }\n+\n+    pub fn create_dir_all<P: AsRef<Path>>(path: P) -> Result<()> {\n+        let path = path.as_ref();\n+        fs::create_dir_all(path).with_context(|| format!(\"Failed to create dir {}\", path.display()))\n+    }\n }\n \n macro_rules! _run {\n@@ -61,6 +71,10 @@ pub fn pushd(path: impl Into<PathBuf>) -> Pushd {\n     Pushd { _p: () }\n }\n \n+pub fn pwd() -> PathBuf {\n+    Env::with(|env| env.cwd())\n+}\n+\n impl Drop for Pushd {\n     fn drop(&mut self) {\n         Env::with(|env| env.popd())\n@@ -85,7 +99,6 @@ pub fn run_process(cmd: String, echo: bool) -> Result<String> {\n }\n \n fn run_process_inner(cmd: &str, echo: bool) -> Result<String> {\n-    let cwd = Env::with(|env| env.cwd());\n     let mut args = shelx(cmd);\n     let binary = args.remove(0);\n \n@@ -95,7 +108,7 @@ fn run_process_inner(cmd: &str, echo: bool) -> Result<String> {\n \n     let output = Command::new(binary)\n         .args(args)\n-        .current_dir(cwd)\n+        .current_dir(pwd())\n         .stdin(Stdio::null())\n         .stderr(Stdio::inherit())\n         .output()?;"}]}