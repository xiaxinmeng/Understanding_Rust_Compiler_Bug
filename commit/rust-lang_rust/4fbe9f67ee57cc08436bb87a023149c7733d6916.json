{"sha": "4fbe9f67ee57cc08436bb87a023149c7733d6916", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYmU5ZjY3ZWU1N2NjMDg0MzZiYjg3YTAyMzE0OWM3NzMzZDY5MTY=", "commit": {"author": {"name": "Lukas Markeffsky", "email": "markeffsky@outlook.com", "date": "2019-08-09T17:19:49Z"}, "committer": {"name": "Lukas Markeffsky", "email": "markeffsky@outlook.com", "date": "2019-08-09T17:19:49Z"}, "message": "upgrade test to rust 2018", "tree": {"sha": "5e3ede46bdf621afcefed74207246546a961c91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3ede46bdf621afcefed74207246546a961c91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fbe9f67ee57cc08436bb87a023149c7733d6916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbe9f67ee57cc08436bb87a023149c7733d6916", "html_url": "https://github.com/rust-lang/rust/commit/4fbe9f67ee57cc08436bb87a023149c7733d6916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fbe9f67ee57cc08436bb87a023149c7733d6916/comments", "author": null, "committer": null, "parents": [{"sha": "d7b9a845aa1ed3d09d86515ca735283ed2276047", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b9a845aa1ed3d09d86515ca735283ed2276047", "html_url": "https://github.com/rust-lang/rust/commit/d7b9a845aa1ed3d09d86515ca735283ed2276047"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "445df8f595d6d9457c143e955955f6f282b7189f", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4fbe9f67ee57cc08436bb87a023149c7733d6916/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbe9f67ee57cc08436bb87a023149c7733d6916/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=4fbe9f67ee57cc08436bb87a023149c7733d6916", "patch": "@@ -1,5 +1,7 @@\n // aux-build:option_helpers.rs\n+// compile-flags: --edition 2018\n \n+#![feature(async_await)]\n #![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n #![allow(\n     clippy::blacklisted_name,\n@@ -144,15 +146,8 @@ impl<T> V<T> {\n struct AsyncNew;\n \n impl AsyncNew {\n-    fn new() -> impl Future<Output = Option<Self>> {\n-        struct F;\n-        impl Future for F {\n-            type Output = Option<AsyncNew>;\n-            fn poll(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Self::Output> {\n-                unimplemented!()\n-            }\n-        }\n-        F\n+    async fn new() -> Option<Self> {\n+        None\n     }\n }\n "}, {"sha": "90b6c296a286e7cd2bbce6a304413a9e86698fce", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4fbe9f67ee57cc08436bb87a023149c7733d6916/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fbe9f67ee57cc08436bb87a023149c7733d6916/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=4fbe9f67ee57cc08436bb87a023149c7733d6916", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:39:5\n+  --> $DIR/methods.rs:41:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:176:13\n+  --> $DIR/methods.rs:171:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -21,7 +21,7 @@ LL | |                .unwrap_or(0);\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:180:13\n+  --> $DIR/methods.rs:175:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -31,7 +31,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:184:13\n+  --> $DIR/methods.rs:179:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -41,15 +41,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:189:13\n+  --> $DIR/methods.rs:184:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:191:13\n+  --> $DIR/methods.rs:186:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -59,7 +59,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:195:13\n+  --> $DIR/methods.rs:190:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -70,15 +70,15 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:206:13\n+  --> $DIR/methods.rs:201:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:210:13\n+  --> $DIR/methods.rs:205:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -90,7 +90,7 @@ LL | |                .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:214:13\n+  --> $DIR/methods.rs:209:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -100,7 +100,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:218:13\n+  --> $DIR/methods.rs:213:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -110,7 +110,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:248:13\n+  --> $DIR/methods.rs:243:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +119,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:251:13\n+  --> $DIR/methods.rs:246:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -129,7 +129,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:267:13\n+  --> $DIR/methods.rs:262:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,7 +138,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:270:13\n+  --> $DIR/methods.rs:265:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -148,15 +148,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:276:13\n+  --> $DIR/methods.rs:271:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:279:13\n+  --> $DIR/methods.rs:274:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -166,15 +166,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:285:13\n+  --> $DIR/methods.rs:280:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:288:13\n+  --> $DIR/methods.rs:283:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -184,7 +184,7 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:303:13\n+  --> $DIR/methods.rs:298:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}]}