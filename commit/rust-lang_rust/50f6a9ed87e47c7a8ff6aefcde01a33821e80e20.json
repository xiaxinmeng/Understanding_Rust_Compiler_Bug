{"sha": "50f6a9ed87e47c7a8ff6aefcde01a33821e80e20", "node_id": "C_kwDOAAsO6NoAKDUwZjZhOWVkODdlNDdjN2E4ZmY2YWVmY2RlMDFhMzM4MjFlODBlMjA", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-06-14T01:49:59Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-06-14T21:09:07Z"}, "message": "use unchecked mul to compute slice sizes\n\n...since slice sizes can't signed wrap\n\nsee https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\n\n> The total size len * mem::size_of::<T>() of the slice must be no larger than isize::MAX.", "tree": {"sha": "ba1c3aa1679492531f6238685c14c86997b262d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba1c3aa1679492531f6238685c14c86997b262d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20", "html_url": "https://github.com/rust-lang/rust/commit/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca122c7ebb3ab50149c9d3d24ddb59c252b32272", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca122c7ebb3ab50149c9d3d24ddb59c252b32272", "html_url": "https://github.com/rust-lang/rust/commit/ca122c7ebb3ab50149c9d3d24ddb59c252b32272"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "e6f402ef19d870b69516a5bf5cefc0adb4fcfb82", "filename": "compiler/rustc_codegen_ssa/src/glue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs?ref=50f6a9ed87e47c7a8ff6aefcde01a33821e80e20", "patch": "@@ -39,7 +39,12 @@ pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             // The info in this case is the length of the str, so the size is that\n             // times the unit size.\n             (\n-                bx.mul(info.unwrap(), bx.const_usize(unit.size.bytes())),\n+                // All slice sizes must fit into `isize`, so this multiplication cannot (signed) wrap.\n+                // NOTE: ideally, we want the effects of both `unchecked_smul` and `unchecked_umul`\n+                // (resulting in `mul nsw nuw` in LLVM IR), since we know that the multiplication\n+                // cannot signed wrap, and that both operands are non-negative. But at the time of writing,\n+                // `BuilderMethods` can't do this, and it doesn't seem to enable any further optimizations.\n+                bx.unchecked_smul(info.unwrap(), bx.const_usize(unit.size.bytes())),\n                 bx.const_usize(unit.align.abi.bytes()),\n             )\n         }"}, {"sha": "a5dbef93460272a18a8c9857fc0df95bc7bf90e8", "filename": "src/test/codegen/issue-96497-slice-size-nowrap.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20/src%2Ftest%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6a9ed87e47c7a8ff6aefcde01a33821e80e20/src%2Ftest%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs?ref=50f6a9ed87e47c7a8ff6aefcde01a33821e80e20", "patch": "@@ -0,0 +1,29 @@\n+// This test case checks that LLVM is aware that computing the size of a slice cannot wrap.\n+// The possibility of wrapping results in an additional branch when dropping boxed slices\n+// in some situations, see https://github.com/rust-lang/rust/issues/96497#issuecomment-1112865218\n+\n+// compile-flags: -O\n+// min-llvm-version: 14.0\n+\n+#![crate_type=\"lib\"]\n+\n+// CHECK-LABEL: @simple_size_of_nowrap\n+#[no_mangle]\n+pub fn simple_size_of_nowrap(x: &[u32]) -> usize {\n+    // Make sure the shift used to compute the size has a nowrap flag.\n+\n+    // CHECK: [[A:%.*]] = shl nsw {{.*}}, 2\n+    // CHECK-NEXT: ret {{.*}} [[A]]\n+    core::mem::size_of_val(x)\n+}\n+\n+// CHECK-LABEL: @drop_write\n+#[no_mangle]\n+pub fn drop_write(mut x: Box<[u32]>) {\n+    // Check that this write is optimized out.\n+    // This depends on the size calculation not wrapping,\n+    // since otherwise LLVM can't tell that the memory is always deallocated if the slice len > 0.\n+\n+    // CHECK-NOT: store i32 42\n+    x[1] = 42;\n+}"}]}