{"sha": "cfc21deebd948e99c553cb6ad14ddb91368257d3", "node_id": "C_kwDOAAsO6NoAKGNmYzIxZGVlYmQ5NDhlOTljNTUzY2I2YWQxNGRkYjkxMzY4MjU3ZDM", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-22T21:10:27Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-01T00:28:34Z"}, "message": "Add #[rustc_box]\n\nThis commit adds an alternative content boxing syntax,\nand uses it inside alloc.\n\nThe usage inside the very performance relevant code in\nliballoc is the only remaining relevant usage of box syntax\nin the compiler (outside of tests, which are comparatively\neasy to port).\n\nbox syntax was originally designed to be used by all Rust\ndevelopers. This introduces a replacement syntax more tailored\nto only being used inside the Rust compiler, and with it,\nlays the groundwork for eventually removing box syntax.", "tree": {"sha": "4826db4d20fbe5c21454e3c38b83611a67270829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4826db4d20fbe5c21454e3c38b83611a67270829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfc21deebd948e99c553cb6ad14ddb91368257d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc21deebd948e99c553cb6ad14ddb91368257d3", "html_url": "https://github.com/rust-lang/rust/commit/cfc21deebd948e99c553cb6ad14ddb91368257d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfc21deebd948e99c553cb6ad14ddb91368257d3/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e810f750a2a407f9caeabba39059578e844add14", "url": "https://api.github.com/repos/rust-lang/rust/commits/e810f750a2a407f9caeabba39059578e844add14", "html_url": "https://github.com/rust-lang/rust/commit/e810f750a2a407f9caeabba39059578e844add14"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "04d88282862a8444cc203e213e7190b836e17866", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfc21deebd948e99c553cb6ad14ddb91368257d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfc21deebd948e99c553cb6ad14ddb91368257d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=cfc21deebd948e99c553cb6ad14ddb91368257d3", "patch": "@@ -41,7 +41,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Tup(ref elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),\n                 ExprKind::Call(ref f, ref args) => {\n-                    if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n+                    if e.attrs.get(0).map_or(false, |a| a.has_name(sym::rustc_box)) {\n+                        if let [inner] = &args[..] {\n+                            hir::ExprKind::Box(self.lower_expr(&inner))\n+                        } else {\n+                            self.sess\n+                                .struct_span_err(\n+                                    e.span,\n+                                    \"rustc_box requires precisely one argument\",\n+                                )\n+                                .emit();\n+                            hir::ExprKind::Err\n+                        }\n+                    } else if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n                         self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)\n                     } else {\n                         let f = self.lower_expr(f);"}, {"sha": "5eb2be97f8b92b80fd372f7d00015263fba568d3", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfc21deebd948e99c553cb6ad14ddb91368257d3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfc21deebd948e99c553cb6ad14ddb91368257d3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=cfc21deebd948e99c553cb6ad14ddb91368257d3", "patch": "@@ -675,6 +675,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"#[rustc_has_incoherent_inherent_impls] allows the addition of incoherent inherent impls for \\\n          the given type by annotating all impl items with #[rustc_allow_incoherent_impl].\"\n     ),\n+    rustc_attr!(\n+        rustc_box, AttributeType::Normal, template!(Word), ErrorFollowing,\n+        \"#[rustc_box] allows creating boxes \\\n+        and it is only intended to be used in `alloc`.\"\n+    ),\n+\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n         // FIXME: This can be `true` once we always use `tcx.is_diagnostic_item`."}, {"sha": "1954cdc0bff668d9379fb5c98978e684256169b1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfc21deebd948e99c553cb6ad14ddb91368257d3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfc21deebd948e99c553cb6ad14ddb91368257d3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=cfc21deebd948e99c553cb6ad14ddb91368257d3", "patch": "@@ -1173,6 +1173,7 @@ symbols! {\n         rustc_allow_const_fn_unstable,\n         rustc_allow_incoherent_impl,\n         rustc_attrs,\n+        rustc_box,\n         rustc_builtin_macro,\n         rustc_capture_analysis,\n         rustc_clean,"}, {"sha": "b59a73af9f93bb83c2969916045d9911151ed7c7", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfc21deebd948e99c553cb6ad14ddb91368257d3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc21deebd948e99c553cb6ad14ddb91368257d3/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=cfc21deebd948e99c553cb6ad14ddb91368257d3", "patch": "@@ -1,4 +1,4 @@\n-error: expected type, found `<[_]>::into_vec(box [0, 1])`\n+error: expected type, found `<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([0, 1]))`\n   --> $DIR/issue-47666.rs:3:25\n    |\n LL |     let _ = Option:Some(vec![0, 1]);"}]}