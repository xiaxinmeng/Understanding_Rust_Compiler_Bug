{"sha": "dc206a91c8b641b4eccd51541f59d96fabea877d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjA2YTkxYzhiNjQxYjRlY2NkNTE1NDFmNTlkOTZmYWJlYTg3N2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-23T04:28:57Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-24T21:06:13Z"}, "message": "Add tests", "tree": {"sha": "ebfae46d74b49dce77a8519a3f4f03e155915391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebfae46d74b49dce77a8519a3f4f03e155915391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc206a91c8b641b4eccd51541f59d96fabea877d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc206a91c8b641b4eccd51541f59d96fabea877d", "html_url": "https://github.com/rust-lang/rust/commit/dc206a91c8b641b4eccd51541f59d96fabea877d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc206a91c8b641b4eccd51541f59d96fabea877d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088cd566ea87c90a9c765a113a2310d60849e7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/088cd566ea87c90a9c765a113a2310d60849e7c1", "html_url": "https://github.com/rust-lang/rust/commit/088cd566ea87c90a9c765a113a2310d60849e7c1"}], "stats": {"total": 169, "additions": 167, "deletions": 2}, "files": [{"sha": "c8c7fb046b17e05aabe6689861feb68a31194067", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc206a91c8b641b4eccd51541f59d96fabea877d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc206a91c8b641b4eccd51541f59d96fabea877d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dc206a91c8b641b4eccd51541f59d96fabea877d", "patch": "@@ -1091,14 +1091,14 @@ fn check_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, cast: &CastCheck<'tcx>) {\n                 fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_NUMERIC_CAST,\n                                         e.id,\n                                         span,\n-                                        format!(\"trivial numeric cast: {} as {}\",\n+                                        format!(\"trivial numeric cast: `{}` as `{}`\",\n                                                 fcx.infcx().ty_to_string(t_e),\n                                                 fcx.infcx().ty_to_string(t_1)));\n             } else {\n                 fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_CAST,\n                                         e.id,\n                                         span,\n-                                        format!(\"trivial cast: {} as {}\",\n+                                        format!(\"trivial cast: `{}` as `{}`\",\n                                                 fcx.infcx().ty_to_string(t_e),\n                                                 fcx.infcx().ty_to_string(t_1)));\n             }"}, {"sha": "05c7747d5b92dfe1b3e20c7c8d70486a221505d3", "filename": "src/test/compile-fail/trivial_casts.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/dc206a91c8b641b4eccd51541f59d96fabea877d/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc206a91c8b641b4eccd51541f59d96fabea877d/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs?ref=dc206a91c8b641b4eccd51541f59d96fabea877d", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test the trivial_cast and trivial_numeric_cast lints. For each error we also\n+// check that the cast can be done using just coercion.\n+\n+#![deny(trivial_cast, trivial_numeric_cast)]\n+\n+trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+pub struct Bar;\n+\n+impl Foo for Bar {}\n+\n+pub fn main() {\n+    // Numeric\n+    let _ = 42_i32 as i32; //~ ERROR trivial numeric cast: `i32` as `i32`\n+    let _: i32 = 42_i32;\n+\n+    let _ = 42_u8 as u8; //~ ERROR trivial numeric cast: `u8` as `u8`\n+    let _: u8 = 42_u8;\n+\n+    // & to * pointers\n+    let x: &u32 = &42;\n+    let _ = x as *const u32; //~ERROR trivial cast: `&u32` as `*const u32`\n+    let _: *const u32 = x;\n+\n+    let x: &mut u32 = &mut 42;\n+    let _ = x as *mut u32; //~ERROR trivial cast: `&mut u32` as `*mut u32`\n+    let _: *mut u32 = x;\n+\n+    // unsize array\n+    let x: &[u32; 3] = &[42, 43, 44];\n+    let _ = x as &[u32]; //~ERROR trivial cast: `&[u32; 3]` as `&[u32]`\n+    let _ = x as *const [u32]; //~ERROR trivial cast: `&[u32; 3]` as `*const [u32]`\n+    let _: &[u32] = x;\n+    let _: *const [u32] = x;\n+\n+    let x: &mut [u32; 3] = &mut [42, 43, 44];\n+    let _ = x as &mut [u32]; //~ERROR trivial cast: `&mut [u32; 3]` as `&mut [u32]`\n+    let _ = x as *mut [u32]; //~ERROR trivial cast: `&mut [u32; 3]` as `*mut [u32]`\n+    let _: &mut [u32] = x;\n+    let _: *mut [u32] = x;\n+\n+    let x: Box<[u32; 3]> = Box::new([42, 43, 44]);\n+    let _ = x as Box<[u32]>; //~ERROR trivial cast: `Box<[u32; 3]>` as `Box<[u32]>`\n+    let x: Box<[u32; 3]> = Box::new([42, 43, 44]);\n+    let _: Box<[u32]> = x;\n+\n+    // unsize trait\n+    let x: &Bar = &Bar;\n+    let _ = x as &Foo; //~ERROR trivial cast: `&Bar` as `&Foo`\n+    let _ = x as *const Foo; //~ERROR trivial cast: `&Bar` as `*const Foo`\n+    let _: &Foo = x;\n+    let _: *const Foo = x;\n+\n+    let x: &mut Bar = &mut Bar;\n+    let _ = x as &mut Foo; //~ERROR trivial cast: `&mut Bar` as `&mut Foo`\n+    let _ = x as *mut Foo; //~ERROR trivial cast: `&mut Bar` as `*mut Foo`\n+    let _: &mut Foo = x;\n+    let _: *mut Foo = x;\n+\n+    let x: Box<Bar> = Box::new(Bar);\n+    let _ = x as Box<Foo>; //~ERROR trivial cast: `Box<Bar>` as `Box<Foo>`\n+    let x: Box<Bar> = Box::new(Bar);\n+    let _: Box<Foo> = x;\n+\n+    // functions\n+    fn baz(_x: i32) {}\n+    let _ = &baz as &Fn(i32); //~ERROR trivial cast: `&fn(i32) {main::baz}` as `&core::ops::Fn(i32)`\n+    let _: &Fn(i32) = &baz;\n+    let x = |_x: i32| {};\n+    let _ = &x as &Fn(i32); //~ERROR trivial cast\n+    let _: &Fn(i32) = &x;\n+}\n+\n+// subtyping\n+pub fn test_subtyping<'a, 'b: 'a>(a: &'a Bar, b: &'b Bar) {\n+    let _ = a as &'a Bar; //~ERROR trivial cast\n+    let _: &'a Bar = a;\n+    let _ = b as &'a Bar; //~ERROR trivial cast\n+    let _: &'a Bar = b;\n+    let _ = b as &'b Bar; //~ERROR trivial cast\n+    let _: &'b Bar = b;\n+}"}, {"sha": "4b145f1079beb7d14b231b5f32479ca96e294ec4", "filename": "src/test/run-pass/trivial_casts.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/dc206a91c8b641b4eccd51541f59d96fabea877d/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc206a91c8b641b4eccd51541f59d96fabea877d/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs?ref=dc206a91c8b641b4eccd51541f59d96fabea877d", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that all coercions can actually be done using casts (modulo the lints).\n+\n+#![allow(trivial_cast, trivial_numeric_cast)]\n+\n+trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+pub struct Bar;\n+\n+impl Foo for Bar {}\n+\n+pub fn main() {\n+    // Numeric\n+    let _ = 42_i32 as i32;\n+    let _ = 42_u8 as u8;\n+\n+    // & to * pointers\n+    let x: &u32 = &42;\n+    let _ = x as *const u32;\n+\n+    let x: &mut u32 = &mut 42;\n+    let _ = x as *mut u32;\n+\n+    // unsize array\n+    let x: &[u32; 3] = &[42, 43, 44];\n+    let _ = x as &[u32];\n+    let _ = x as *const [u32];\n+\n+    let x: &mut [u32; 3] = &mut [42, 43, 44];\n+    let _ = x as &mut [u32];\n+    let _ = x as *mut [u32];\n+\n+    let x: Box<[u32; 3]> = Box::new([42, 43, 44]);\n+    let _ = x as Box<[u32]>;\n+\n+    // unsize trait\n+    let x: &Bar = &Bar;\n+    let _ = x as &Foo;\n+    let _ = x as *const Foo;\n+\n+    let x: &mut Bar = &mut Bar;\n+    let _ = x as &mut Foo;\n+    let _ = x as *mut Foo;\n+\n+    let x: Box<Bar> = Box::new(Bar);\n+    let _ = x as Box<Foo>;\n+\n+    // functions\n+    fn baz(_x: i32) {}\n+    let _ = &baz as &Fn(i32);\n+    let x = |_x: i32| {};\n+    let _ = &x as &Fn(i32);\n+}\n+\n+// subtyping\n+pub fn test_subtyping<'a, 'b: 'a>(a: &'a Bar, b: &'b Bar) {\n+    let _ = a as &'a Bar;\n+    let _ = b as &'a Bar;\n+    let _ = b as &'b Bar;\n+}"}]}