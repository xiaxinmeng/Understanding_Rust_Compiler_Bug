{"sha": "92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZjc2NWZjZTk2YjYzNDRjY2ZlOWIyODhiYmQ4YjY1MmY1YWQwZWY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-09T12:47:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-18T17:07:25Z"}, "message": "Remove support for x86 oldBE", "tree": {"sha": "3c5571ae615b4c571d0bc4bb97e298c4b0acca14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5571ae615b4c571d0bc4bb97e298c4b0acca14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "html_url": "https://github.com/rust-lang/rust/commit/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c39cb46da7a51c92f1911d4df5f4bab6450cd0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c39cb46da7a51c92f1911d4df5f4bab6450cd0c7", "html_url": "https://github.com/rust-lang/rust/commit/c39cb46da7a51c92f1911d4df5f4bab6450cd0c7"}], "stats": {"total": 94, "additions": 26, "deletions": 68}, "files": [{"sha": "e6d3375fb1bab6240d6d309259aa84657547a559", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "patch": "@@ -12,9 +12,6 @@ jobs:\n       fail-fast: false\n       matrix:\n         os: [ubuntu-latest, macos-latest]\n-        env:\n-          - BACKEND: \"\"\n-          - BACKEND: --oldbe\n \n     steps:\n     - uses: actions/checkout@v2\n@@ -54,7 +51,7 @@ jobs:\n         export COMPILE_RUNS=2\n         export RUN_RUNS=2\n \n-        ./test.sh $BACKEND\n+        ./test.sh\n \n     - name: Package prebuilt cg_clif\n       run: tar cvfJ cg_clif.tar.xz build"}, {"sha": "9861af1f8eae2cfb384cbaee7ad709937835465a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "patch": "@@ -9,7 +9,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", features = [\"unwind\", \"x86\", \"x64\"] }\n+cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", features = [\"unwind\", \"x64\"] }\n cranelift-frontend = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", optional = true }\n@@ -38,7 +38,6 @@ smallvec = \"1.6.1\"\n default = [\"jit\", \"inline_asm\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n-oldbe = []\n \n [profile.dev]\n # By compiling dependencies with optimizations, performing tests gets much faster."}, {"sha": "090349e54b1484a33856b7e18e39179318ef973c", "filename": "build.sh", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "patch": "@@ -5,7 +5,6 @@ set -e\n export CHANNEL=\"release\"\n build_sysroot=\"clif\"\n target_dir='build'\n-oldbe=''\n while [[ $# != 0 ]]; do\n     case $1 in\n         \"--debug\")\n@@ -19,12 +18,9 @@ while [[ $# != 0 ]]; do\n             target_dir=$2\n             shift\n             ;;\n-        \"--oldbe\")\n-            oldbe='--features oldbe'\n-            ;;\n         *)\n             echo \"Unknown flag '$1'\"\n-            echo \"Usage: ./build.sh [--debug] [--sysroot none|clif|llvm] [--target-dir DIR] [--oldbe]\"\n+            echo \"Usage: ./build.sh [--debug] [--sysroot none|clif|llvm] [--target-dir DIR]\"\n             exit 1\n             ;;\n     esac\n@@ -44,9 +40,9 @@ else\n    exit 1\n fi\n if [[ \"$CHANNEL\" == \"release\" ]]; then\n-    cargo build $oldbe --release\n+    cargo build --release\n else\n-    cargo build $oldbe\n+    cargo build\n fi\n \n source scripts/ext_config.sh"}, {"sha": "03889a4687f82f7373b390f1c06db95a61198b85", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "patch": "@@ -149,14 +149,12 @@ pub(crate) fn codegen_fn<'tcx>(\n         &clif_comments,\n     );\n \n-    if let Some(mach_compile_result) = &context.mach_compile_result {\n-        if let Some(disasm) = &mach_compile_result.disasm {\n-            crate::pretty_clif::write_ir_file(\n-                tcx,\n-                &format!(\"{}.vcode\", tcx.symbol_name(instance).name),\n-                |file| file.write_all(disasm.as_bytes()),\n-            )\n-        }\n+    if let Some(disasm) = &context.mach_compile_result.as_ref().unwrap().disasm {\n+        crate::pretty_clif::write_ir_file(\n+            tcx,\n+            &format!(\"{}.vcode\", tcx.symbol_name(instance).name),\n+            |file| file.write_all(disasm.as_bytes()),\n+        )\n     }\n \n     // Define debuginfo for function"}, {"sha": "a40f963400c664f643fddc2cc885215a649d215c", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 13, "deletions": 36, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "patch": "@@ -129,7 +129,6 @@ impl<'tcx> DebugContext<'tcx> {\n \n     pub(super) fn create_debug_lines(\n         &mut self,\n-        isa: &dyn cranelift_codegen::isa::TargetIsa,\n         symbol: usize,\n         entry_id: UnitEntryId,\n         context: &Context,\n@@ -138,7 +137,6 @@ impl<'tcx> DebugContext<'tcx> {\n     ) -> CodeOffset {\n         let tcx = self.tcx;\n         let line_program = &mut self.dwarf.unit.line_program;\n-        let func = &context.func;\n \n         let line_strings = &mut self.dwarf.line_strings;\n         let mut last_span = None;\n@@ -202,43 +200,22 @@ impl<'tcx> DebugContext<'tcx> {\n \n         let mut func_end = 0;\n \n-        if let Some(ref mcr) = &context.mach_compile_result {\n-            for &MachSrcLoc { start, end, loc } in mcr.buffer.get_srclocs_sorted() {\n-                line_program.row().address_offset = u64::from(start);\n-                if !loc.is_default() {\n-                    let source_info = *source_info_set.get_index(loc.bits() as usize).unwrap();\n-                    create_row_for_span(line_program, source_info.span);\n-                } else {\n-                    create_row_for_span(line_program, function_span);\n-                }\n-                func_end = end;\n-            }\n-\n-            line_program.end_sequence(u64::from(func_end));\n-\n-            func_end = mcr.buffer.total_size();\n-        } else {\n-            let encinfo = isa.encoding_info();\n-            let mut blocks = func.layout.blocks().collect::<Vec<_>>();\n-            blocks.sort_by_key(|block| func.offsets[*block]); // Ensure inst offsets always increase\n-\n-            for block in blocks {\n-                for (offset, inst, size) in func.inst_offsets(block, &encinfo) {\n-                    let srcloc = func.srclocs[inst];\n-                    line_program.row().address_offset = u64::from(offset);\n-                    if !srcloc.is_default() {\n-                        let source_info =\n-                            *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n-                        create_row_for_span(line_program, source_info.span);\n-                    } else {\n-                        create_row_for_span(line_program, function_span);\n-                    }\n-                    func_end = offset + size;\n-                }\n+        let mcr = context.mach_compile_result.as_ref().unwrap();\n+        for &MachSrcLoc { start, end, loc } in mcr.buffer.get_srclocs_sorted() {\n+            line_program.row().address_offset = u64::from(start);\n+            if !loc.is_default() {\n+                let source_info = *source_info_set.get_index(loc.bits() as usize).unwrap();\n+                create_row_for_span(line_program, source_info.span);\n+            } else {\n+                create_row_for_span(line_program, function_span);\n             }\n-            line_program.end_sequence(u64::from(func_end));\n+            func_end = end;\n         }\n \n+        line_program.end_sequence(u64::from(func_end));\n+\n+        let func_end = mcr.buffer.total_size();\n+\n         assert_ne!(func_end, 0);\n \n         let entry = self.dwarf.unit.get_mut(entry_id);"}, {"sha": "87b1c5fb50e6dd19efbcf2a64c104d6ceb592bb3", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "patch": "@@ -252,18 +252,13 @@ impl<'tcx> DebugContext<'tcx> {\n             AttributeValue::StringRef(name_id),\n         );\n \n-        let end =\n-            self.create_debug_lines(isa, symbol, entry_id, context, mir.span, source_info_set);\n+        let end = self.create_debug_lines(symbol, entry_id, context, mir.span, source_info_set);\n \n         self.unit_range_list.0.push(Range::StartLength {\n             begin: Address::Symbol { symbol, addend: 0 },\n             length: u64::from(end),\n         });\n \n-        if isa.get_mach_backend().is_some() {\n-            return; // Not yet implemented for the AArch64 backend.\n-        }\n-\n         let func_entry = self.dwarf.unit.get_mut(entry_id);\n         // Gdb requires both DW_AT_low_pc and DW_AT_high_pc. Otherwise the DW_TAG_subprogram is skipped.\n         func_entry.set("}, {"sha": "f081a2d85a904f0dd9546a97b0e9615962c59aef", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f765fce96b6344ccfe9b288bbd8b652f5ad0ef/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=92f765fce96b6344ccfe9b288bbd8b652f5ad0ef", "patch": "@@ -343,11 +343,7 @@ fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n \n     let flags = settings::Flags::new(flags_builder);\n \n-    let variant = if cfg!(feature = \"oldbe\") {\n-        cranelift_codegen::isa::BackendVariant::Legacy\n-    } else {\n-        cranelift_codegen::isa::BackendVariant::MachInst\n-    };\n+    let variant = cranelift_codegen::isa::BackendVariant::MachInst;\n     let mut isa_builder = cranelift_codegen::isa::lookup_variant(target_triple, variant).unwrap();\n     // Don't use \"haswell\", as it implies `has_lzcnt`.macOS CI is still at Ivy Bridge EP, so `lzcnt`\n     // is interpreted as `bsr`."}]}