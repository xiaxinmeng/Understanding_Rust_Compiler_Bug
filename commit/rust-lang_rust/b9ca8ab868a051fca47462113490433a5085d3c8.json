{"sha": "b9ca8ab868a051fca47462113490433a5085d3c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5Y2E4YWI4NjhhMDUxZmNhNDc0NjIxMTM0OTA0MzNhNTA4NWQzYzg=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-01-26T12:21:41Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-01-26T12:32:48Z"}, "message": "Better visibility check.", "tree": {"sha": "3fd1f76b847e661d106e381b06ee2a5876026008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd1f76b847e661d106e381b06ee2a5876026008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9ca8ab868a051fca47462113490433a5085d3c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ca8ab868a051fca47462113490433a5085d3c8", "html_url": "https://github.com/rust-lang/rust/commit/b9ca8ab868a051fca47462113490433a5085d3c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9ca8ab868a051fca47462113490433a5085d3c8/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c071f7023a529d1c530e2fc3dccc1c0b65c860", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c071f7023a529d1c530e2fc3dccc1c0b65c860", "html_url": "https://github.com/rust-lang/rust/commit/27c071f7023a529d1c530e2fc3dccc1c0b65c860"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "87feb9bd8d5fc5f69acd4dd4964226bf629998e3", "filename": "crates/ra_ide_api_light/src/folding_ranges.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9ca8ab868a051fca47462113490433a5085d3c8/crates%2Fra_ide_api_light%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ca8ab868a051fca47462113490433a5085d3c8/crates%2Fra_ide_api_light%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Ffolding_ranges.rs?ref=b9ca8ab868a051fca47462113490433a5085d3c8", "patch": "@@ -83,7 +83,11 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n }\n \n fn has_visibility(node: &SyntaxNode) -> bool {\n-    return node.descendants().any(|n| n.kind() == VISIBILITY);\n+    use ast::VisibilityOwner;\n+\n+    return ast::Module::cast(node)\n+        .and_then(|m| m.visibility())\n+        .is_some();\n }\n \n fn has_newline(node: &SyntaxNode) -> bool {"}]}