{"sha": "0fc3fda8e79c509273af0f547b5143f97d60343c", "node_id": "C_kwDOAAsO6NoAKDBmYzNmZGE4ZTc5YzUwOTI3M2FmMGY1NDdiNTE0M2Y5N2Q2MDM0M2M", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-01-17T12:29:07Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-01-17T12:29:07Z"}, "message": "Merge commit '8d14c94b5c0a66241b4244f1c60ac5859cec1d97' into clippyup", "tree": {"sha": "df53f8bd13c601846a55886cdda34ff979de8203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df53f8bd13c601846a55886cdda34ff979de8203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc3fda8e79c509273af0f547b5143f97d60343c", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmHlYRQACgkQHKDfKvWd\naKWQdg/+ICWWRzBDRx1PnYPvyD0UPPBNUAOt1TN4FM3vRSSmHbmEGYKWAom9XU9S\nb0Rw0bev7uEPSpgkRZAv1ie3EuR1egPziJGYmtIZi+55011Xj/+SFnre0TWe9Jvn\nSCajmQz4DnOGffHZzlqw4zv+UeE12crtCKMTd+kmEVl2JWFSggtvt7yumBh7xAhg\n9hG5E3jJyYqGfjcL5Fyp75CQ6HXRhc0oxVUBXtqzJze3oAXIRYr8BFNq6R0x4GGT\nzW2cQ4H4FA2N2k3aufjGv2CI8JS5a9dUN0uAYtQO9rdgUOX1iBeHVtYzxcsPhDsl\nMbrxFxxrRjZe5pP1cdc+pN9/vvPH1lrw4C8/Qs287qw2lBy+yiw/LDNdEwpIBQ4S\n1BsCPnTChFTcffEYPT/+Uy1IDLn3rICfbgDlcgyukx1vFu3+hlGonYTfWWmIkRUZ\nXfMnlGxy6AGBDc/fK/ASiUkL+gWeUTYOcQVSh0kKLUkkuq1NhyD7Ltj0r9xAvtzY\n54Zp7jTwhZ4ZmxDXTto+c090mezHS7huyK5W1lIsdxeBo1J0kUpsVYmbI4a3cDNs\n9AG8yESa9t/LSsBFX8w/ouoFXP1xvLT1oknVfOXmB4DFzWoWIRyt3L952tN1ryUQ\n7ubjKAeJfkh2RnfaWs9NzZKwuugwh4nr21aDnpwlfnQxR8G4bZA=\n=/2+6\n-----END PGP SIGNATURE-----", "payload": "tree df53f8bd13c601846a55886cdda34ff979de8203\nparent 128417f40f80ce585414bf5a017540447e6be775\nparent 8d14c94b5c0a66241b4244f1c60ac5859cec1d97\nauthor flip1995 <philipp.krones@embecosm.com> 1642422547 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1642422547 +0100\n\nMerge commit '8d14c94b5c0a66241b4244f1c60ac5859cec1d97' into clippyup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc3fda8e79c509273af0f547b5143f97d60343c", "html_url": "https://github.com/rust-lang/rust/commit/0fc3fda8e79c509273af0f547b5143f97d60343c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc3fda8e79c509273af0f547b5143f97d60343c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "128417f40f80ce585414bf5a017540447e6be775", "url": "https://api.github.com/repos/rust-lang/rust/commits/128417f40f80ce585414bf5a017540447e6be775", "html_url": "https://github.com/rust-lang/rust/commit/128417f40f80ce585414bf5a017540447e6be775"}, {"sha": "8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d14c94b5c0a66241b4244f1c60ac5859cec1d97", "html_url": "https://github.com/rust-lang/rust/commit/8d14c94b5c0a66241b4244f1c60ac5859cec1d97"}], "stats": {"total": 854, "additions": 754, "deletions": 100}, "files": [{"sha": "258a8256f53177752b46ed1914cd5a1789e639aa", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -3049,6 +3049,7 @@ Released 2018-09-13\n [`iter_not_returning_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\n [`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n+[`iter_overeager_cloned`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_overeager_cloned\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n [`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits"}, {"sha": "a6be75b5e310a29ce5af8231014a893aaf6b65e8", "filename": "src/tools/clippy/COPYRIGHT", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FCOPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FCOPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCOPYRIGHT?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -1,4 +1,4 @@\n-Copyright 2014-2021 The Rust Project Developers\n+Copyright 2014-2022 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"}, {"sha": "0d62c37278e586a8196a77071d3b190d44655755", "filename": "src/tools/clippy/LICENSE-APACHE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FLICENSE-APACHE", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FLICENSE-APACHE", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FLICENSE-APACHE?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -186,7 +186,7 @@ APPENDIX: How to apply the Apache License to your work.\n    same \"printed page\" as the copyright notice for easier\n    identification within third-party archives.\n \n-Copyright 2014-2021 The Rust Project Developers\n+Copyright 2014-2022 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License."}, {"sha": "b724b24aa8309d6f210dec5f9f91f7693481c786", "filename": "src/tools/clippy/LICENSE-MIT", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FLICENSE-MIT", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FLICENSE-MIT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FLICENSE-MIT?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -1,6 +1,6 @@\n MIT License\n \n-Copyright (c) 2014-2021 The Rust Project Developers\n+Copyright (c) 2014-2022 The Rust Project Developers\n \n Permission is hereby granted, free of charge, to any\n person obtaining a copy of this software and associated"}, {"sha": "edbc626e354b5bbc11120a1ac539a92538455ba9", "filename": "src/tools/clippy/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FREADME.md?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -238,7 +238,7 @@ If you want to contribute to Clippy, you can find more information in [CONTRIBUT\n \n ## License\n \n-Copyright 2014-2021 The Rust Project Developers\n+Copyright 2014-2022 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n [https://www.apache.org/licenses/LICENSE-2.0](https://www.apache.org/licenses/LICENSE-2.0)> or the MIT license"}, {"sha": "ca4af66cad16bd48d474490af53d9c06ffc82a87", "filename": "src/tools/clippy/clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbit_mask.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -18,14 +18,14 @@ declare_clippy_lint! {\n     /// {`!=`, `>=`, `>`, `!=`, `>=`, `>`}) can be determined from the following\n     /// table:\n     ///\n-    /// |Comparison  |Bit Op|Example     |is always|Formula               |\n-    /// |------------|------|------------|---------|----------------------|\n-    /// |`==` or `!=`| `&`  |`x & 2 == 3`|`false`  |`c & m != c`          |\n-    /// |`<`  or `>=`| `&`  |`x & 2 < 3` |`true`   |`m < c`               |\n-    /// |`>`  or `<=`| `&`  |`x & 1 > 1` |`false`  |`m <= c`              |\n-    /// |`==` or `!=`| `|`  |`x | 1 == 0`|`false`  |`c | m != c`          |\n-    /// |`<`  or `>=`| `|`  |`x | 1 < 1` |`false`  |`m >= c`              |\n-    /// |`<=` or `>` | `|`  |`x | 1 > 0` |`true`   |`m > c`               |\n+    /// |Comparison  |Bit Op|Example      |is always|Formula               |\n+    /// |------------|------|-------------|---------|----------------------|\n+    /// |`==` or `!=`| `&`  |`x & 2 == 3` |`false`  |`c & m != c`          |\n+    /// |`<`  or `>=`| `&`  |`x & 2 < 3`  |`true`   |`m < c`               |\n+    /// |`>`  or `<=`| `&`  |`x & 1 > 1`  |`false`  |`m <= c`              |\n+    /// |`==` or `!=`| `\\|` |`x \\| 1 == 0`|`false`  |`c \\| m != c`         |\n+    /// |`<`  or `>=`| `\\|` |`x \\| 1 < 1` |`false`  |`m >= c`              |\n+    /// |`<=` or `>` | `\\|` |`x \\| 1 > 0` |`true`   |`m > c`               |\n     ///\n     /// ### Why is this bad?\n     /// If the bits that the comparison cares about are always\n@@ -53,10 +53,10 @@ declare_clippy_lint! {\n     /// without changing the outcome. The basic structure can be seen in the\n     /// following table:\n     ///\n-    /// |Comparison| Bit Op  |Example    |equals |\n-    /// |----------|---------|-----------|-------|\n-    /// |`>` / `<=`|`|` / `^`|`x | 2 > 3`|`x > 3`|\n-    /// |`<` / `>=`|`|` / `^`|`x ^ 1 < 4`|`x < 4`|\n+    /// |Comparison| Bit Op   |Example     |equals |\n+    /// |----------|----------|------------|-------|\n+    /// |`>` / `<=`|`\\|` / `^`|`x \\| 2 > 3`|`x > 3`|\n+    /// |`<` / `>=`|`\\|` / `^`|`x ^ 1 < 4` |`x < 4`|\n     ///\n     /// ### Why is this bad?\n     /// Not equally evil as [`bad_bit_mask`](#bad_bit_mask),"}, {"sha": "f44d370a8fd031e51073ef5f675879cb67da6cb6", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n                 lint_same_cond(cx, &conds);\n                 lint_same_fns_in_if_cond(cx, &conds);\n                 // Block duplication\n-                lint_same_then_else(cx, &blocks, conds.len() == blocks.len(), expr);\n+                lint_same_then_else(cx, &conds, &blocks, conds.len() == blocks.len(), expr);\n             }\n         }\n     }\n@@ -192,6 +192,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n /// Implementation of `BRANCHES_SHARING_CODE` and `IF_SAME_THEN_ELSE` if the blocks are equal.\n fn lint_same_then_else<'tcx>(\n     cx: &LateContext<'tcx>,\n+    conds: &[&'tcx Expr<'_>],\n     blocks: &[&Block<'tcx>],\n     has_conditional_else: bool,\n     expr: &'tcx Expr<'_>,\n@@ -204,7 +205,7 @@ fn lint_same_then_else<'tcx>(\n     // Check if each block has shared code\n     let has_expr = blocks[0].expr.is_some();\n \n-    let (start_eq, mut end_eq, expr_eq) = if let Some(block_eq) = scan_block_for_eq(cx, blocks) {\n+    let (start_eq, mut end_eq, expr_eq) = if let Some(block_eq) = scan_block_for_eq(cx, conds, blocks) {\n         (block_eq.start_eq, block_eq.end_eq, block_eq.expr_eq)\n     } else {\n         return;\n@@ -316,14 +317,14 @@ struct BlockEqual {\n \n /// This function can also trigger the `IF_SAME_THEN_ELSE` in which case it'll return `None` to\n /// abort any further processing and avoid duplicate lint triggers.\n-fn scan_block_for_eq(cx: &LateContext<'_>, blocks: &[&Block<'_>]) -> Option<BlockEqual> {\n+fn scan_block_for_eq(cx: &LateContext<'_>, conds: &[&Expr<'_>], blocks: &[&Block<'_>]) -> Option<BlockEqual> {\n     let mut start_eq = usize::MAX;\n     let mut end_eq = usize::MAX;\n     let mut expr_eq = true;\n-    let mut iter = blocks.windows(2);\n-    while let Some(&[win0, win1]) = iter.next() {\n-        let l_stmts = win0.stmts;\n-        let r_stmts = win1.stmts;\n+    let mut iter = blocks.windows(2).enumerate();\n+    while let Some((i, &[block0, block1])) = iter.next() {\n+        let l_stmts = block0.stmts;\n+        let r_stmts = block1.stmts;\n \n         // `SpanlessEq` now keeps track of the locals and is therefore context sensitive clippy#6752.\n         // The comparison therefore needs to be done in a way that builds the correct context.\n@@ -340,22 +341,26 @@ fn scan_block_for_eq(cx: &LateContext<'_>, blocks: &[&Block<'_>]) -> Option<Bloc\n             it1.zip(it2)\n                 .fold(0, |acc, (l, r)| if evaluator.eq_stmt(l, r) { acc + 1 } else { 0 })\n         };\n-        let block_expr_eq = both(&win0.expr, &win1.expr, |l, r| evaluator.eq_expr(l, r));\n+        let block_expr_eq = both(&block0.expr, &block1.expr, |l, r| evaluator.eq_expr(l, r));\n \n         // IF_SAME_THEN_ELSE\n         if_chain! {\n             if block_expr_eq;\n             if l_stmts.len() == r_stmts.len();\n             if l_stmts.len() == current_start_eq;\n-            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, win0.hir_id);\n-            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, win1.hir_id);\n+            // `conds` may have one last item than `blocks`.\n+            // Any `i` from `blocks.windows(2)` will exist in `conds`, but `i+1` may not exist on the last iteration.\n+            if !matches!(conds[i].kind, ExprKind::Let(..));\n+            if !matches!(conds.get(i + 1).map(|e| &e.kind), Some(ExprKind::Let(..)));\n+            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, block0.hir_id);\n+            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, block1.hir_id);\n             then {\n                 span_lint_and_note(\n                     cx,\n                     IF_SAME_THEN_ELSE,\n-                    win0.span,\n+                    block0.span,\n                     \"this `if` has identical blocks\",\n-                    Some(win1.span),\n+                    Some(block1.span),\n                     \"same as this\",\n                 );\n "}, {"sha": "395c920c9974c0a525772f0e5ae88c108458b40e", "filename": "src/tools/clippy/clippy_lints/src/format.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -9,7 +9,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, BytePos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -84,7 +84,22 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                         ExprKind::MethodCall(path, ..) => path.ident.name.as_str() == \"to_string\",\n                         _ => false,\n                     };\n-                    let sugg = if is_new_string {\n+                    let sugg = if format_args.format_string_span.contains(value.span) {\n+                        // Implicit argument. e.g. `format!(\"{x}\")` span points to `{x}`\n+                        let spdata = value.span.data();\n+                        let span = Span::new(\n+                            spdata.lo + BytePos(1),\n+                            spdata.hi - BytePos(1),\n+                            spdata.ctxt,\n+                            spdata.parent\n+                        );\n+                        let snip = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n+                        if is_new_string {\n+                            snip.into()\n+                        } else {\n+                            format!(\"{snip}.to_string()\")\n+                        }\n+                    } else if is_new_string {\n                         snippet_with_applicability(cx, value.span, \"..\", &mut applicability).into_owned()\n                     } else {\n                         let sugg = Sugg::hir_with_applicability(cx, value, \"<arg>\", &mut applicability);"}, {"sha": "834f6d2425e93895114bd6e29fbc4cebb11120d6", "filename": "src/tools/clippy/clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -42,8 +42,7 @@ fn check_raw_ptr<'tcx>(\n     let expr = &body.value;\n     if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(def_id) {\n         let raw_ptrs = iter_input_pats(decl, body)\n-            .zip(decl.inputs.iter())\n-            .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n+            .filter_map(|arg| raw_ptr_arg(cx, arg))\n             .collect::<HirIdSet>();\n \n         if !raw_ptrs.is_empty() {\n@@ -59,8 +58,12 @@ fn check_raw_ptr<'tcx>(\n     }\n }\n \n-fn raw_ptr_arg(arg: &hir::Param<'_>, ty: &hir::Ty<'_>) -> Option<hir::HirId> {\n-    if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.kind, &ty.kind) {\n+fn raw_ptr_arg(cx: &LateContext<'_>, arg: &hir::Param<'_>) -> Option<hir::HirId> {\n+    if let (&hir::PatKind::Binding(_, id, _, _), Some(&ty::RawPtr(_))) = (\n+        &arg.pat.kind,\n+        cx.maybe_typeck_results()\n+            .map(|typeck_results| typeck_results.pat_ty(arg.pat).kind()),\n+    ) {\n         Some(id)\n     } else {\n         None"}, {"sha": "b56d87c5348c2996ace5bafdf1475582df5c2d98", "filename": "src/tools/clippy/clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n \n fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefId) {\n     if sig.decl.implicit_self.has_implicit_self() {\n-        let ret_ty = cx.tcx.fn_sig(fn_id).skip_binder().output();\n+        let ret_ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(fn_id).output());\n         let ret_ty = cx\n             .tcx\n             .try_normalize_erasing_regions(cx.param_env, ret_ty)"}, {"sha": "87fd7f99748a1df8d1b00018e7e7b1c09d55a68d", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -156,6 +156,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::ITER_NEXT_SLICE),\n     LintId::of(methods::ITER_NTH),\n     LintId::of(methods::ITER_NTH_ZERO),\n+    LintId::of(methods::ITER_OVEREAGER_CLONED),\n     LintId::of(methods::ITER_SKIP_NEXT),\n     LintId::of(methods::MANUAL_FILTER_MAP),\n     LintId::of(methods::MANUAL_FIND_MAP),\n@@ -249,7 +250,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(reference::REF_IN_DEREF),\n     LintId::of(regex::INVALID_REGEX),\n     LintId::of(repeat_once::REPEAT_ONCE),\n-    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(returns::LET_AND_RETURN),\n     LintId::of(returns::NEEDLESS_RETURN),\n     LintId::of(self_assignment::SELF_ASSIGNMENT),"}, {"sha": "56146a0fd3a7525d84cfeb51f2dd08cfdf8119c0", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -288,6 +288,7 @@ store.register_lints(&[\n     methods::ITER_NEXT_SLICE,\n     methods::ITER_NTH,\n     methods::ITER_NTH_ZERO,\n+    methods::ITER_OVEREAGER_CLONED,\n     methods::ITER_SKIP_NEXT,\n     methods::MANUAL_FILTER_MAP,\n     methods::MANUAL_FIND_MAP,"}, {"sha": "1292675f4a96cde9b178869674b143c6e5038907", "filename": "src/tools/clippy/clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -81,6 +81,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(ranges::RANGE_PLUS_ONE),\n     LintId::of(redundant_else::REDUNDANT_ELSE),\n     LintId::of(ref_option_ref::REF_OPTION_REF),\n+    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n     LintId::of(strings::STRING_ADD_ASSIGN),\n     LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),"}, {"sha": "c44ef124bfa0ea3bcb1130283606736cc08ebbef", "filename": "src/tools/clippy/clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_perf.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -14,6 +14,7 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(methods::EXPECT_FUN_CALL),\n     LintId::of(methods::EXTEND_WITH_DRAIN),\n     LintId::of(methods::ITER_NTH),\n+    LintId::of(methods::ITER_OVEREAGER_CLONED),\n     LintId::of(methods::MANUAL_STR_REPEAT),\n     LintId::of(methods::OR_FUN_CALL),\n     LintId::of(methods::SINGLE_CHAR_PATTERN),"}, {"sha": "10f8ae4b7f7fca8583cde6a976955579a3efc4e1", "filename": "src/tools/clippy/clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -16,7 +16,6 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n-    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n ])"}, {"sha": "865e7702b7151567bb0e12da002d1265b2b77301", "filename": "src/tools/clippy/clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -1,31 +1,40 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::ty::peel_mid_ty_refs;\n use clippy_utils::{is_diag_item_method, is_diag_trait_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::TyS;\n-use rustc_span::{sym, Span};\n+use rustc_span::sym;\n \n use super::IMPLICIT_CLONE;\n \n-pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, span: Span) {\n+pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) {\n     if_chain! {\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if is_clone_like(cx, method_name, method_def_id);\n         let return_type = cx.typeck_results().expr_ty(expr);\n-        let input_type = cx.typeck_results().expr_ty(recv).peel_refs();\n+        let input_type = cx.typeck_results().expr_ty(recv);\n+        let (input_type, ref_count) = peel_mid_ty_refs(input_type);\n         if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did));\n         if TyS::same_type(return_type, input_type);\n         then {\n+            let mut app = Applicability::MachineApplicable;\n+            let recv_snip = snippet_with_context(cx, recv.span, expr.span.ctxt(), \"..\", &mut app).0;\n             span_lint_and_sugg(\n                 cx,\n                 IMPLICIT_CLONE,\n-                span,\n+                expr.span,\n                 &format!(\"implicitly cloning a `{}` by calling `{}` on its dereferenced type\", ty_name, method_name),\n                 \"consider using\",\n-                \"clone\".to_string(),\n-                Applicability::MachineApplicable\n+                if ref_count > 1 {\n+                    format!(\"({}{}).clone()\", \"*\".repeat(ref_count - 1), recv_snip)\n+                } else {\n+                    format!(\"{}.clone()\", recv_snip)\n+                },\n+                app,\n             );\n         }\n     }"}, {"sha": "ca33bfc643da84a5d3a669eaa163c6fcd718e2df", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_overeager_cloned.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -0,0 +1,62 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n+use itertools::Itertools;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use std::ops::Not;\n+\n+use super::ITER_OVEREAGER_CLONED;\n+use crate::redundant_clone::REDUNDANT_CLONE;\n+\n+/// lint overeager use of `cloned()` for `Iterator`s\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    recv: &'tcx hir::Expr<'_>,\n+    name: &str,\n+    map_arg: &[hir::Expr<'_>],\n+) {\n+    // Check if it's iterator and get type associated with `Item`.\n+    let inner_ty = match get_iterator_item_ty(cx, cx.typeck_results().expr_ty_adjusted(recv)) {\n+        Some(ty) => ty,\n+        _ => return,\n+    };\n+\n+    match inner_ty.kind() {\n+        ty::Ref(_, ty, _) if !is_copy(cx, ty) => {},\n+        _ => return,\n+    };\n+\n+    let (lint, preserve_cloned) = match name {\n+        \"count\" => (REDUNDANT_CLONE, false),\n+        _ => (ITER_OVEREAGER_CLONED, true),\n+    };\n+    let wildcard_params = map_arg.is_empty().not().then(|| \"...\").unwrap_or_default();\n+    let msg = format!(\n+        \"called `cloned().{}({})` on an `Iterator`. It may be more efficient to call `{}({}){}` instead\",\n+        name,\n+        wildcard_params,\n+        name,\n+        wildcard_params,\n+        preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n+    );\n+\n+    span_lint_and_sugg(\n+        cx,\n+        lint,\n+        expr.span,\n+        &msg,\n+        \"try this\",\n+        format!(\n+            \"{}.{}({}){}\",\n+            snippet(cx, recv.span, \"..\"),\n+            name,\n+            map_arg.iter().map(|a| snippet(cx, a.span, \"..\")).join(\", \"),\n+            preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}"}, {"sha": "7357219f7b47c70c763a6e9778c51d84b905ba47", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 70, "deletions": 16, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -30,6 +30,7 @@ mod iter_count;\n mod iter_next_slice;\n mod iter_nth;\n mod iter_nth_zero;\n+mod iter_overeager_cloned;\n mod iter_skip_next;\n mod iterator_step_by_zero;\n mod manual_saturating_arithmetic;\n@@ -106,6 +107,41 @@ declare_clippy_lint! {\n     \"used `cloned` where `copied` could be used instead\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usage of `_.cloned().<func>()` where call to `.cloned()` can be postponed.\n+    ///\n+    /// ### Why is this bad?\n+    /// It's often inefficient to clone all elements of an iterator, when eventually, only some\n+    /// of them will be consumed.\n+    ///\n+    /// ### Examples\n+    /// ```rust\n+    /// # let vec = vec![\"string\".to_string()];\n+    ///\n+    /// // Bad\n+    /// vec.iter().cloned().take(10);\n+    ///\n+    /// // Good\n+    /// vec.iter().take(10).cloned();\n+    ///\n+    /// // Bad\n+    /// vec.iter().cloned().last();\n+    ///\n+    /// // Good\n+    /// vec.iter().last().cloned();\n+    ///\n+    /// ```\n+    /// ### Known Problems\n+    /// This `lint` removes the side of effect of cloning items in the iterator.\n+    /// A code that relies on that side-effect could fail.\n+    ///\n+    #[clippy::version = \"1.59.0\"]\n+    pub ITER_OVEREAGER_CLONED,\n+    perf,\n+    \"using `cloned()` early with `Iterator::iter()` can lead to some performance inefficiencies\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usages of `Iterator::flat_map()` where `filter_map()` could be\n@@ -1950,6 +1986,7 @@ impl_lint_pass!(Methods => [\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n     CLONE_DOUBLE_REF,\n+    ITER_OVEREAGER_CLONED,\n     CLONED_INSTEAD_OF_COPIED,\n     FLAT_MAP_OPTION,\n     INEFFICIENT_TO_STRING,\n@@ -2243,9 +2280,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 },\n                 _ => {},\n             },\n-            (\"count\", []) => match method_call(recv) {\n-                Some((name @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n-                    iter_count::check(cx, expr, recv2, name);\n+            (name @ \"count\", args @ []) => match method_call(recv) {\n+                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                Some((name2 @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n+                    iter_count::check(cx, expr, recv2, name2);\n                 },\n                 Some((\"map\", [_, arg], _)) => suspicious_map::check(cx, expr, recv, arg),\n                 _ => {},\n@@ -2266,10 +2304,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 flat_map_identity::check(cx, expr, arg, span);\n                 flat_map_option::check(cx, expr, arg, span);\n             },\n-            (\"flatten\", []) => {\n-                if let Some((\"map\", [recv, map_arg], _)) = method_call(recv) {\n-                    map_flatten::check(cx, expr, recv, map_arg);\n-                }\n+            (name @ \"flatten\", args @ []) => match method_call(recv) {\n+                Some((\"map\", [recv, map_arg], _)) => map_flatten::check(cx, expr, recv, map_arg),\n+                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                _ => {},\n             },\n             (\"fold\", [init, acc]) => unnecessary_fold::check(cx, expr, init, acc, span),\n             (\"for_each\", [_]) => {\n@@ -2281,6 +2319,13 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n             (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n             (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n+            (\"last\", args @ []) | (\"skip\", args @ [_]) => {\n+                if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n+                    if let (\"cloned\", []) = (name2, args2) {\n+                        iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                    }\n+                }\n+            },\n             (\"map\", [m_arg]) => {\n                 if let Some((name, [recv2, args @ ..], span2)) = method_call(recv) {\n                     match (name, args) {\n@@ -2296,20 +2341,22 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 map_identity::check(cx, expr, recv, m_arg, span);\n             },\n             (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n-            (\"next\", []) => {\n-                if let Some((name, [recv, args @ ..], _)) = method_call(recv) {\n-                    match (name, args) {\n-                        (\"filter\", [arg]) => filter_next::check(cx, expr, recv, arg),\n-                        (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv, arg, msrv),\n-                        (\"iter\", []) => iter_next_slice::check(cx, expr, recv),\n-                        (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv, arg),\n+            (name @ \"next\", args @ []) => {\n+                if let Some((name2, [recv2, args2 @ ..], _)) = method_call(recv) {\n+                    match (name2, args2) {\n+                        (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                        (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n+                        (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, msrv),\n+                        (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n+                        (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv2, arg),\n                         (\"skip_while\", [_]) => skip_while_next::check(cx, expr),\n                         _ => {},\n                     }\n                 }\n             },\n-            (\"nth\", [n_arg]) => match method_call(recv) {\n+            (\"nth\", args @ [n_arg]) => match method_call(recv) {\n                 Some((\"bytes\", [recv2], _)) => bytes_nth::check(cx, expr, recv2, n_arg),\n+                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n                 Some((\"iter\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, false),\n                 Some((\"iter_mut\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, true),\n                 _ => iter_nth_zero::check(cx, expr, recv, n_arg),\n@@ -2337,8 +2384,15 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 }\n             },\n             (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n+            (\"take\", args @ [_arg]) => {\n+                if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n+                    if let (\"cloned\", []) = (name2, args2) {\n+                        iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                    }\n+                }\n+            },\n             (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n-                implicit_clone::check(cx, name, expr, recv, span);\n+                implicit_clone::check(cx, name, expr, recv);\n             },\n             (\"unwrap\", []) => match method_call(recv) {\n                 Some((\"get\", [recv, get_arg], _)) => get_unwrap::check(cx, expr, recv, get_arg, false),"}, {"sha": "448dc4e6147ffb97470ad021a674bab68c8ed432", "filename": "src/tools/clippy/clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -4,6 +4,7 @@ use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_mac\n use clippy_utils::ty::{implements_trait, match_type};\n use clippy_utils::{contains_return, is_trait_item, last_path_segment, paths};\n use if_chain::if_chain;\n+use rustc_errors::emitter::MAX_SUGGESTION_HIGHLIGHT_LINES;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -23,6 +24,7 @@ pub(super) fn check<'tcx>(\n     args: &'tcx [hir::Expr<'_>],\n ) {\n     /// Checks for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n+    #[allow(clippy::too_many_arguments)]\n     fn check_unwrap_or_default(\n         cx: &LateContext<'_>,\n         name: &str,\n@@ -31,6 +33,7 @@ pub(super) fn check<'tcx>(\n         arg: &hir::Expr<'_>,\n         or_has_args: bool,\n         span: Span,\n+        method_span: Span,\n     ) -> bool {\n         let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n@@ -52,16 +55,27 @@ pub(super) fn check<'tcx>(\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n+                let hint = \"unwrap_or_default()\";\n+                let mut sugg_span = span;\n+\n+                let mut sugg: String = format!(\n+                    \"{}.{}\",\n+                    snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability),\n+                    hint\n+                );\n+\n+                if sugg.lines().count() > MAX_SUGGESTION_HIGHLIGHT_LINES {\n+                    sugg_span = method_span.with_hi(span.hi());\n+                    sugg = hint.to_string();\n+                }\n+\n                 span_lint_and_sugg(\n                     cx,\n                     OR_FUN_CALL,\n-                    span,\n+                    sugg_span,\n                     &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                     \"try this\",\n-                    format!(\n-                        \"{}.unwrap_or_default()\",\n-                        snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability)\n-                    ),\n+                    sugg,\n                     applicability,\n                 );\n \n@@ -164,7 +178,7 @@ pub(super) fn check<'tcx>(\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n-                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span) {\n+                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span, method_span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n                     check_general_case(cx, name, method_span, self_arg, arg, expr.span, fun_span);\n                 }"}, {"sha": "8db71d1e967620ca73267880368df8dafc609090", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -548,6 +548,7 @@ fn is_array(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     matches!(&cx.typeck_results().expr_ty(expr).peel_refs().kind(), ty::Array(_, _))\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool) {\n     #[derive(Default)]\n     struct EqImpl {\n@@ -644,10 +645,26 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n                 hint = expr_snip;\n             } else {\n                 span = expr.span.to(other.span);\n+\n+                let cmp_span = if other.span < expr.span {\n+                    other.span.between(expr.span)\n+                } else {\n+                    expr.span.between(other.span)\n+                };\n                 if eq_impl.ty_eq_other {\n-                    hint = format!(\"{} == {}\", expr_snip, snippet(cx, other.span, \"..\"));\n+                    hint = format!(\n+                        \"{}{}{}\",\n+                        expr_snip,\n+                        snippet(cx, cmp_span, \"..\"),\n+                        snippet(cx, other.span, \"..\")\n+                    );\n                 } else {\n-                    hint = format!(\"{} == {}\", snippet(cx, other.span, \"..\"), expr_snip);\n+                    hint = format!(\n+                        \"{}{}{}\",\n+                        snippet(cx, other.span, \"..\"),\n+                        snippet(cx, cmp_span, \"..\"),\n+                        expr_snip\n+                    );\n                 }\n             }\n "}, {"sha": "79f104eac0be24c9e5b55e719021af891613471a", "filename": "src/tools/clippy/clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -60,7 +60,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.59.0\"]\n     pub RETURN_SELF_NOT_MUST_USE,\n-    suspicious,\n+    pedantic,\n     \"missing `#[must_use]` annotation on a method returning `Self`\"\n }\n "}, {"sha": "01891b51d3b0fc8f03d41143fc1af92b13ba91ac", "filename": "src/tools/clippy/rustc_tools_util/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Frustc_tools_util%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Frustc_tools_util%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frustc_tools_util%2FREADME.md?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -53,7 +53,7 @@ This gives the following output in clippy:\n \n ## License\n \n-Copyright 2014-2020 The Rust Project Developers\n+Copyright 2014-2022 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"}, {"sha": "44e41bdd1148711497a4d8a7928b3650a919e557", "filename": "src/tools/clippy/tests/ui/cmp_owned/comparison_flip.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.fixed?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+use std::fmt::{self, Display};\n+\n+fn main() {\n+    let a = Foo;\n+\n+    if a != \"bar\" {\n+        println!(\"foo\");\n+    }\n+\n+    if a != \"bar\" {\n+        println!(\"foo\");\n+    }\n+}\n+\n+struct Foo;\n+\n+impl Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"foo\")\n+    }\n+}\n+\n+impl PartialEq<&str> for Foo {\n+    fn eq(&self, other: &&str) -> bool {\n+        \"foo\" == *other\n+    }\n+}"}, {"sha": "662673abb62d9aee94b58b0e36746021a7c24d77", "filename": "src/tools/clippy/tests/ui/cmp_owned/comparison_flip.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+use std::fmt::{self, Display};\n+\n+fn main() {\n+    let a = Foo;\n+\n+    if a.to_string() != \"bar\" {\n+        println!(\"foo\");\n+    }\n+\n+    if \"bar\" != a.to_string() {\n+        println!(\"foo\");\n+    }\n+}\n+\n+struct Foo;\n+\n+impl Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"foo\")\n+    }\n+}\n+\n+impl PartialEq<&str> for Foo {\n+    fn eq(&self, other: &&str) -> bool {\n+        \"foo\" == *other\n+    }\n+}"}, {"sha": "e4d0d822bb1e341aa8dc0fc9bfbee2e923558b9b", "filename": "src/tools/clippy/tests/ui/cmp_owned/comparison_flip.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fcomparison_flip.stderr?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -0,0 +1,18 @@\n+error: this creates an owned instance just for comparison\n+  --> $DIR/comparison_flip.rs:8:8\n+   |\n+LL |     if a.to_string() != \"bar\" {\n+   |        ^^^^^^^^^^^^^ help: try: `a`\n+   |\n+   = note: `-D clippy::cmp-owned` implied by `-D warnings`\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/comparison_flip.rs:12:17\n+   |\n+LL |     if \"bar\" != a.to_string() {\n+   |        ---------^^^^^^^^^^^^^\n+   |        |\n+   |        help: try: `a != \"bar\"`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "78d2bfd474e4a18cbd9f687e488a69fd03ef076d", "filename": "src/tools/clippy/tests/ui/format.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -73,4 +73,10 @@ fn main() {\n     let _s: String = (&*v.join(\"\\n\")).to_string();\n \n     format!(\"prepend {:+}\", \"s\");\n+\n+    // Issue #8290\n+    let x = \"foo\";\n+    let _ = x.to_string();\n+    let _ = format!(\"{x:?}\"); // Don't lint on debug\n+    let _ = x.to_string();\n }"}, {"sha": "009c1aa216fcd8b6e89f1de0b383c486ce038ec8", "filename": "src/tools/clippy/tests/ui/format.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -75,4 +75,10 @@ fn main() {\n     let _s: String = format!(\"{}\", &*v.join(\"\\n\"));\n \n     format!(\"prepend {:+}\", \"s\");\n+\n+    // Issue #8290\n+    let x = \"foo\";\n+    let _ = format!(\"{x}\");\n+    let _ = format!(\"{x:?}\"); // Don't lint on debug\n+    let _ = format!(\"{y}\", y = x);\n }"}, {"sha": "660be57585e3710f3839e5f07ab2cea93091e27b", "filename": "src/tools/clippy/tests/ui/format.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -99,5 +99,17 @@ error: useless use of `format!`\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n-error: aborting due to 15 previous errors\n+error: useless use of `format!`\n+  --> $DIR/format.rs:81:13\n+   |\n+LL |     let _ = format!(\"{x}\");\n+   |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:83:13\n+   |\n+LL |     let _ = format!(\"{y}\", y = x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "5521870eaecf761af9b0f50bdbdd941d63aaa551", "filename": "src/tools/clippy/tests/ui/functions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -78,6 +78,14 @@ pub fn public(p: *const u8) {\n     unsafe { std::ptr::read(p) };\n }\n \n+type Alias = *const u8;\n+\n+pub fn type_alias(p: Alias) {\n+    println!(\"{}\", unsafe { *p });\n+    println!(\"{:?}\", unsafe { p.as_ref() });\n+    unsafe { std::ptr::read(p) };\n+}\n+\n impl Bar {\n     fn private(self, p: *const u8) {\n         println!(\"{}\", unsafe { *p });"}, {"sha": "8ebd4997f4f6e836983c92a66191a793429dc3ee", "filename": "src/tools/clippy/tests/ui/functions.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions.stderr?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -69,22 +69,40 @@ LL |     unsafe { std::ptr::read(p) };\n    |                             ^\n \n error: this public function might dereference a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:87:34\n+  --> $DIR/functions.rs:84:30\n+   |\n+LL |     println!(\"{}\", unsafe { *p });\n+   |                              ^\n+\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:85:31\n+   |\n+LL |     println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                               ^\n+\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:86:29\n+   |\n+LL |     unsafe { std::ptr::read(p) };\n+   |                             ^\n+\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:95:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n \n error: this public function might dereference a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:88:35\n+  --> $DIR/functions.rs:96:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function might dereference a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:89:33\n+  --> $DIR/functions.rs:97:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "0016009a02f5858b39461dba03a777ba713ebf39", "filename": "src/tools/clippy/tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_same_then_else2.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -138,6 +138,23 @@ fn if_same_then_else2() -> Result<&'static str, ()> {\n         let (y, x) = (1, 2);\n         return Ok(&foo[x..y]);\n     }\n+\n+    // Issue #7579\n+    let _ = if let Some(0) = None { 0 } else { 0 };\n+\n+    if true {\n+        return Err(());\n+    } else if let Some(0) = None {\n+        return Err(());\n+    }\n+\n+    let _ = if let Some(0) = None {\n+        0\n+    } else if let Some(1) = None {\n+        0\n+    } else {\n+        0\n+    };\n }\n \n fn main() {}"}, {"sha": "639fecb8927bd322b4754c9fb00268107612e793", "filename": "src/tools/clippy/tests/ui/implicit_clone.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -105,4 +105,13 @@ fn main() {\n     let os_str = OsStr::new(\"foo\");\n     let _ = os_str.to_owned();\n     let _ = os_str.to_os_string();\n+\n+    // issue #8227\n+    let pathbuf_ref = &pathbuf;\n+    let pathbuf_ref = &pathbuf_ref;\n+    let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&PathBuf`\n+    let _ = pathbuf_ref.to_path_buf();\n+    let pathbuf_ref = &pathbuf_ref;\n+    let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&&PathBuf`\n+    let _ = pathbuf_ref.to_path_buf();\n }"}, {"sha": "0f4124241907f3b73dd9d38d0d9abac3e885053b", "filename": "src/tools/clippy/tests/ui/implicit_clone.stderr", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.stderr?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -1,64 +1,76 @@\n error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:65:17\n+  --> $DIR/implicit_clone.rs:65:13\n    |\n LL |     let _ = vec.to_owned();\n-   |                 ^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^ help: consider using: `vec.clone()`\n    |\n    = note: `-D clippy::implicit-clone` implied by `-D warnings`\n \n error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:66:17\n+  --> $DIR/implicit_clone.rs:66:13\n    |\n LL |     let _ = vec.to_vec();\n-   |                 ^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^ help: consider using: `vec.clone()`\n \n error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:70:21\n+  --> $DIR/implicit_clone.rs:70:13\n    |\n LL |     let _ = vec_ref.to_owned();\n-   |                     ^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider using: `vec_ref.clone()`\n \n error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:71:21\n+  --> $DIR/implicit_clone.rs:71:13\n    |\n LL |     let _ = vec_ref.to_vec();\n-   |                     ^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^^^ help: consider using: `vec_ref.clone()`\n \n error: implicitly cloning a `String` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:83:17\n+  --> $DIR/implicit_clone.rs:83:13\n    |\n LL |     let _ = str.to_owned();\n-   |                 ^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^ help: consider using: `str.clone()`\n \n error: implicitly cloning a `Kitten` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:87:20\n+  --> $DIR/implicit_clone.rs:87:13\n    |\n LL |     let _ = kitten.to_owned();\n-   |                    ^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `kitten.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:97:21\n+  --> $DIR/implicit_clone.rs:97:13\n    |\n LL |     let _ = pathbuf.to_owned();\n-   |                     ^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider using: `pathbuf.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:98:21\n+  --> $DIR/implicit_clone.rs:98:13\n    |\n LL |     let _ = pathbuf.to_path_buf();\n-   |                     ^^^^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `pathbuf.clone()`\n \n error: implicitly cloning a `OsString` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:101:23\n+  --> $DIR/implicit_clone.rs:101:13\n    |\n LL |     let _ = os_string.to_owned();\n-   |                       ^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `os_string.clone()`\n \n error: implicitly cloning a `OsString` by calling `to_os_string` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:102:23\n+  --> $DIR/implicit_clone.rs:102:13\n    |\n LL |     let _ = os_string.to_os_string();\n-   |                       ^^^^^^^^^^^^ help: consider using: `clone`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `os_string.clone()`\n \n-error: aborting due to 10 previous errors\n+error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:113:13\n+   |\n+LL |     let _ = pathbuf_ref.to_path_buf();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(*pathbuf_ref).clone()`\n+\n+error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:116:13\n+   |\n+LL |     let _ = pathbuf_ref.to_path_buf();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(**pathbuf_ref).clone()`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "cce216fc649b1667d276f9283ea4c273d146c5cb", "filename": "src/tools/clippy/tests/ui/iter_not_returning_iterator.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_not_returning_iterator.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -64,4 +64,11 @@ impl S {\n     }\n }\n \n+struct S2([u8]);\n+impl S2 {\n+    fn iter(&self) -> core::slice::Iter<u8> {\n+        self.0.iter()\n+    }\n+}\n+\n fn main() {}"}, {"sha": "a9041671101b5006f437f516f3280545a6f67413", "filename": "src/tools/clippy/tests/ui/iter_overeager_cloned.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.fixed?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+#![warn(clippy::iter_overeager_cloned, clippy::redundant_clone, clippy::filter_next)]\n+\n+fn main() {\n+    let vec = vec![\"1\".to_string(), \"2\".to_string(), \"3\".to_string()];\n+\n+    let _: Option<String> = vec.iter().last().cloned();\n+\n+    let _: Option<String> = vec.iter().chain(vec.iter()).next().cloned();\n+\n+    let _: usize = vec.iter().filter(|x| x == &\"2\").count();\n+\n+    let _: Vec<_> = vec.iter().take(2).cloned().collect();\n+\n+    let _: Vec<_> = vec.iter().skip(2).cloned().collect();\n+\n+    let _ = vec.iter().filter(|x| x == &\"2\").nth(2).cloned();\n+\n+    let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+        .iter().flatten().cloned();\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().filter(|x| x.starts_with('2'));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().map(|x| x.len());\n+\n+    // This would fail if changed.\n+    let _ = vec.iter().cloned().map(|x| x + \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().find(|x| x == \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().for_each(|x| assert!(!x.is_empty()));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().all(|x| x.len() == 1);\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().any(|x| x.len() == 1);\n+\n+    // Should probably stay as it is.\n+    let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+}"}, {"sha": "dd04e33a4b3aeedb8901b55a5d7e49f4d611852f", "filename": "src/tools/clippy/tests/ui/iter_overeager_cloned.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -0,0 +1,47 @@\n+// run-rustfix\n+#![warn(clippy::iter_overeager_cloned, clippy::redundant_clone, clippy::filter_next)]\n+\n+fn main() {\n+    let vec = vec![\"1\".to_string(), \"2\".to_string(), \"3\".to_string()];\n+\n+    let _: Option<String> = vec.iter().cloned().last();\n+\n+    let _: Option<String> = vec.iter().chain(vec.iter()).cloned().next();\n+\n+    let _: usize = vec.iter().filter(|x| x == &\"2\").cloned().count();\n+\n+    let _: Vec<_> = vec.iter().cloned().take(2).collect();\n+\n+    let _: Vec<_> = vec.iter().cloned().skip(2).collect();\n+\n+    let _ = vec.iter().filter(|x| x == &\"2\").cloned().nth(2);\n+\n+    let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+        .iter()\n+        .cloned()\n+        .flatten();\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().filter(|x| x.starts_with('2'));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().map(|x| x.len());\n+\n+    // This would fail if changed.\n+    let _ = vec.iter().cloned().map(|x| x + \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().find(|x| x == \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().for_each(|x| assert!(!x.is_empty()));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().all(|x| x.len() == 1);\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().any(|x| x.len() == 1);\n+\n+    // Should probably stay as it is.\n+    let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+}"}, {"sha": "e36b0e36fbdf98c6f4346682bd3a44df84ffac3a", "filename": "src/tools/clippy/tests/ui/iter_overeager_cloned.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.stderr?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -0,0 +1,58 @@\n+error: called `cloned().last()` on an `Iterator`. It may be more efficient to call `last().cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:7:29\n+   |\n+LL |     let _: Option<String> = vec.iter().cloned().last();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().last().cloned()`\n+   |\n+   = note: `-D clippy::iter-overeager-cloned` implied by `-D warnings`\n+\n+error: called `cloned().next()` on an `Iterator`. It may be more efficient to call `next().cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:9:29\n+   |\n+LL |     let _: Option<String> = vec.iter().chain(vec.iter()).cloned().next();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().chain(vec.iter()).next().cloned()`\n+\n+error: called `cloned().count()` on an `Iterator`. It may be more efficient to call `count()` instead\n+  --> $DIR/iter_overeager_cloned.rs:11:20\n+   |\n+LL |     let _: usize = vec.iter().filter(|x| x == &\"2\").cloned().count();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").count()`\n+   |\n+   = note: `-D clippy::redundant-clone` implied by `-D warnings`\n+\n+error: called `cloned().take(...)` on an `Iterator`. It may be more efficient to call `take(...).cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:13:21\n+   |\n+LL |     let _: Vec<_> = vec.iter().cloned().take(2).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().take(2).cloned()`\n+\n+error: called `cloned().skip(...)` on an `Iterator`. It may be more efficient to call `skip(...).cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:15:21\n+   |\n+LL |     let _: Vec<_> = vec.iter().cloned().skip(2).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().skip(2).cloned()`\n+\n+error: called `cloned().nth(...)` on an `Iterator`. It may be more efficient to call `nth(...).cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:17:13\n+   |\n+LL |     let _ = vec.iter().filter(|x| x == &\"2\").cloned().nth(2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").nth(2).cloned()`\n+\n+error: called `cloned().flatten()` on an `Iterator`. It may be more efficient to call `flatten().cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:19:13\n+   |\n+LL |       let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+   |  _____________^\n+LL | |         .iter()\n+LL | |         .cloned()\n+LL | |         .flatten();\n+   | |__________________^\n+   |\n+help: try this\n+   |\n+LL ~     let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+LL ~         .iter().flatten().cloned();\n+   |\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "3208048e0d53c82e87407376138c0d0923db3bef", "filename": "src/tools/clippy/tests/ui/or_fun_call.fixed", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -176,4 +176,52 @@ mod issue6675 {\n     }\n }\n \n+mod issue8239 {\n+    fn more_than_max_suggestion_highest_lines_0() {\n+        let frames = Vec::new();\n+        frames\n+            .iter()\n+            .map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or_default();\n+    }\n+\n+    fn more_to_max_suggestion_highest_lines_1() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or_default();\n+    }\n+\n+    fn equal_to_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            }).unwrap_or_default();\n+    }\n+\n+    fn less_than_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        let map = iter.map(|f: &String| f.to_lowercase());\n+        map.reduce(|mut acc, f| {\n+            acc.push_str(&f);\n+            acc\n+        }).unwrap_or_default();\n+    }\n+}\n+\n fn main() {}"}, {"sha": "57ab5f03ee2851318b3ba58d9fcc2c72d23e442e", "filename": "src/tools/clippy/tests/ui/or_fun_call.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -176,4 +176,54 @@ mod issue6675 {\n     }\n }\n \n+mod issue8239 {\n+    fn more_than_max_suggestion_highest_lines_0() {\n+        let frames = Vec::new();\n+        frames\n+            .iter()\n+            .map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    fn more_to_max_suggestion_highest_lines_1() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    fn equal_to_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    fn less_than_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        let map = iter.map(|f: &String| f.to_lowercase());\n+        map.reduce(|mut acc, f| {\n+            acc.push_str(&f);\n+            acc\n+        })\n+        .unwrap_or(String::new());\n+    }\n+}\n+\n fn main() {}"}, {"sha": "549b00ae3c45980c75ac3b229d2139e7375e7ccb", "filename": "src/tools/clippy/tests/ui/or_fun_call.stderr", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -108,5 +108,57 @@ error: use of `unwrap_or` followed by a function call\n LL |         None.unwrap_or( unsafe { ptr_to_ref(s) }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { ptr_to_ref(s) })`\n \n-error: aborting due to 18 previous errors\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:189:14\n+   |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:202:14\n+   |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:208:9\n+   |\n+LL | /         iter.map(|f: &String| f.to_lowercase())\n+LL | |             .reduce(|mut acc, f| {\n+LL | |                 let _ = \"\";\n+LL | |                 acc.push_str(&f);\n+LL | |                 acc\n+LL | |             })\n+LL | |             .unwrap_or(String::new());\n+   | |_____________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         iter.map(|f: &String| f.to_lowercase())\n+LL +             .reduce(|mut acc, f| {\n+LL +                 let _ = \"\";\n+LL +                 acc.push_str(&f);\n+LL +                 acc\n+LL ~             }).unwrap_or_default();\n+   |\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:221:9\n+   |\n+LL | /         map.reduce(|mut acc, f| {\n+LL | |             acc.push_str(&f);\n+LL | |             acc\n+LL | |         })\n+LL | |         .unwrap_or(String::new());\n+   | |_________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         map.reduce(|mut acc, f| {\n+LL +             acc.push_str(&f);\n+LL +             acc\n+LL ~         }).unwrap_or_default();\n+   |\n+\n+error: aborting due to 22 previous errors\n "}, {"sha": "9b33ad6d3f6b3f83b26ca2ab4384bea9ee60cf51", "filename": "src/tools/clippy/tests/ui/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.rs?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -1,4 +1,5 @@\n #![crate_type = \"lib\"]\n+#![warn(clippy::return_self_not_must_use)]\n \n #[derive(Clone)]\n pub struct Bar;"}, {"sha": "94be87dfa31c73c85a57a262c203d162252cc098", "filename": "src/tools/clippy/tests/ui/return_self_not_must_use.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.stderr?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -1,5 +1,5 @@\n error: missing `#[must_use]` attribute on a method returning `Self`\n-  --> $DIR/return_self_not_must_use.rs:7:5\n+  --> $DIR/return_self_not_must_use.rs:8:5\n    |\n LL |     fn what(&self) -> Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     fn what(&self) -> Self;\n    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type\n \n error: missing `#[must_use]` attribute on a method returning `Self`\n-  --> $DIR/return_self_not_must_use.rs:17:5\n+  --> $DIR/return_self_not_must_use.rs:18:5\n    |\n LL | /     pub fn foo(&self) -> Self {\n LL | |         Self\n@@ -18,7 +18,7 @@ LL | |     }\n    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type\n \n error: missing `#[must_use]` attribute on a method returning `Self`\n-  --> $DIR/return_self_not_must_use.rs:20:5\n+  --> $DIR/return_self_not_must_use.rs:21:5\n    |\n LL | /     pub fn bar(self) -> Self {\n LL | |         self"}, {"sha": "5b7e61a349d979c08b68fc04e994c1b35f018e69", "filename": "src/tools/clippy/util/gh-pages/index.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/0fc3fda8e79c509273af0f547b5143f97d60343c/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html?ref=0fc3fda8e79c509273af0f547b5143f97d60343c", "patch": "@@ -368,7 +368,7 @@ <h2 class=\"panel-title\">\n         <img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" alt=\"Fork me on Github\"/>\n     </a>\n \n-    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/7.0.0/markdown-it.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/languages/rust.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.12/angular.min.js\"></script>"}]}