{"sha": "9752523f3a306a95c72032a2d957f09cd2801968", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTI1MjNmM2EzMDZhOTVjNzIwMzJhMmQ5NTdmMDljZDI4MDE5Njg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-17T01:24:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-17T01:24:00Z"}, "message": "Include intrinsic module in all crates, emit visit glue, fn intrinsic::visit_ty. Not yet working.", "tree": {"sha": "d22b9550bc1a38509ab8d085ebcdfb82bf48032e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22b9550bc1a38509ab8d085ebcdfb82bf48032e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9752523f3a306a95c72032a2d957f09cd2801968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9752523f3a306a95c72032a2d957f09cd2801968", "html_url": "https://github.com/rust-lang/rust/commit/9752523f3a306a95c72032a2d957f09cd2801968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9752523f3a306a95c72032a2d957f09cd2801968/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab5790c91154d988b8f5e32e6e0183771697ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab5790c91154d988b8f5e32e6e0183771697ff7", "html_url": "https://github.com/rust-lang/rust/commit/eab5790c91154d988b8f5e32e6e0183771697ff7"}], "stats": {"total": 494, "additions": 151, "deletions": 343}, "files": [{"sha": "e18ef276bb80d2cdbd872a73fe1dbd4f3b8f6784", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 40, "deletions": 133, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -3,144 +3,51 @@\n \n mod intrinsic {\n \n-    // import rusti::visit_ty;\n-    // import rusti::visit_val;\n-    // import rusti::visit_val_pair;\n-\n-    export ty_visitor, val_visitor, val_pair_visitor;\n-\n-    fn macros() {\n-        // Present for side-effect of defining intrinsic macros.\n-        #macro([#error[f, ...], log(core::error, #fmt[f, ...])]);\n-        #macro([#warn[f, ...], log(core::warn, #fmt[f, ...])]);\n-        #macro([#info[f, ...], log(core::info, #fmt[f, ...])]);\n-        #macro([#debug[f, ...], log(core::debug, #fmt[f, ...])]);\n-    }\n+    import rusti::visit_ty;\n+    export ty_visitor, visit_ty;\n \n     iface ty_visitor {\n-        fn visit_bot();\n-        fn visit_nil();\n-        fn visit_bool();\n-\n-        fn visit_int();\n-        fn visit_i8();\n-        fn visit_i16();\n-        fn visit_i32();\n-        fn visit_i64();\n-\n-        fn visit_uint();\n-        fn visit_u8();\n-        fn visit_u16();\n-        fn visit_u32();\n-        fn visit_u64();\n-\n-        fn visit_float();\n-        fn visit_f32();\n-        fn visit_f64();\n-\n-        fn visit_char();\n-        fn visit_str();\n-\n-        fn visit_vec(cells_mut: bool,\n-                     visit_cell: fn(uint, self));\n-\n-        fn visit_box(inner_mut: bool,\n-                     visit_inner: fn(self));\n-\n-        fn visit_uniq(inner_mut: bool,\n-                      visit_inner: fn(self));\n-\n-        fn visit_ptr(inner_mut: bool,\n-                     visit_inner: fn(self));\n-\n-        fn visit_rptr(inner_mut: bool,\n-                      visit_inner: fn(self));\n-\n-        fn visit_rec(n_fields: uint,\n-                     field_name: fn(uint) -> str/&,\n-                     field_mut: fn(uint) -> bool,\n-                     visit_field: fn(uint, self));\n-        fn visit_tup(n_fields: uint,\n-                     visit_field: fn(uint, self));\n-        fn visit_enum(n_variants: uint,\n-                      variant: uint,\n-                      variant_name: fn(uint) -> str/&,\n-                      visit_variant: fn(uint, self));\n-    }\n-\n-    iface val_visitor {\n-\n-        // Basic types we can visit directly.\n-        fn visit_bot();\n-        fn visit_nil();\n-        fn visit_bool(b: &bool);\n-\n-        fn visit_int(i: &int);\n-        fn visit_i8(i: &i8);\n-        fn visit_i16(i: &i16);\n-        fn visit_i32(i: &i32);\n-        fn visit_i64(i: &i64);\n-\n-        fn visit_uint(u: &uint);\n-        fn visit_u8(i: &i8);\n-        fn visit_u16(i: &i16);\n-        fn visit_u32(i: &i32);\n-        fn visit_u64(i: &i64);\n-\n-        fn visit_float(f: &float);\n-        fn visit_f32(f: &f32);\n-        fn visit_f64(f: &f64);\n-\n-        fn visit_char(c: &char);\n-\n-        // Vecs and strs we can provide a stub view of.\n-        fn visit_str(repr: &vec::unsafe::vec_repr,\n-                     visit_cell: fn(uint,self));\n-\n-        fn visit_vec(repr: &vec::unsafe::vec_repr,\n-                     cells_mut: bool,\n-                     visit_cell: fn(uint, self));\n-\n-        fn visit_box(mem: *u8,\n-                     inner_mut: bool,\n-                     visit_inner: fn(self));\n-\n-        fn visit_uniq(mem: *u8,\n-                      inner_mut: bool,\n-                      visit_inner: fn(self));\n-\n-        fn visit_ptr(mem: *u8,\n-                     inner_mut: bool,\n-                     visit_inner: fn(self));\n-\n-        fn visit_rptr(mem: *u8,\n-                      inner_mut: bool,\n-                      visit_inner: fn(self));\n-\n-        // Aggregates we can't really provide anything useful for\n-        // beyond a *u8. You really have to know what you're doing.\n-        fn visit_rec(mem: *u8,\n-                     n_fields: uint,\n-                     field_name: fn(uint) -> str/&,\n-                     field_mut: fn(uint) -> bool,\n-                     visit_field: fn(uint, self));\n-        fn visit_tup(mem: *u8,\n-                     n_fields: uint,\n-                     visit_field: fn(uint, self));\n-        fn visit_enum(mem: *u8,\n-                      n_variants: uint,\n-                      variant: uint,\n-                      variant_name: fn(uint) -> str/&,\n-                      visit_variant: fn(uint, self));\n-    }\n-\n-    iface val_pair_visitor {\n+        fn visit_bot() -> bool;\n+        fn visit_nil() -> bool;\n+        fn visit_bool() -> bool;\n+\n+        fn visit_int() -> bool;\n+        fn visit_i8() -> bool;\n+        fn visit_i16() -> bool;\n+        fn visit_i32() -> bool;\n+        fn visit_i64() -> bool;\n+\n+        fn visit_uint() -> bool;\n+        fn visit_u8() -> bool;\n+        fn visit_u16() -> bool;\n+        fn visit_u32() -> bool;\n+        fn visit_u64() -> bool;\n+\n+        fn visit_float() -> bool;\n+        fn visit_f32() -> bool;\n+        fn visit_f64() -> bool;\n+\n+        fn visit_char() -> bool;\n+        fn visit_str() -> bool;\n+\n+        // FIXME: possibly pair these as enter/leave calls\n+        // not just enter with implicit number of subsequent\n+        // calls.\n+        fn visit_vec_of(mutbl: uint) -> bool;\n+        fn visit_box_of(mutbl: uint) -> bool;\n+        fn visit_uniq_of(mutbl: uint) -> bool;\n+        fn visit_ptr_of(mutbl: uint) -> bool;\n+        fn visit_rptr_of(mutbl: uint) -> bool;\n+        fn visit_rec_of(n_fields: uint) -> bool;\n+        fn visit_rec_field(name: str/&, mutbl: uint) -> bool;\n+        fn visit_tup_of(n_fields: uint) -> bool;\n+        fn visit_tup_field(mutbl: uint) -> bool;\n+        fn visit_enum_of(n_variants: uint) -> bool;\n+        fn visit_enum_variant(name: str/&) -> bool;\n     }\n \n     #[abi = \"rust-intrinsic\"]\n     native mod rusti {\n-        // fn visit_ty<T,V:ty_visitor>(tv: V);\n-        // fn visit_val<T,V:val_visitor>(v: &T, vv: V);\n-        // fn visit_val_pair<T,V:val_pair_visitor>(a: &T, b: &T, vpv: &V);\n+        fn visit_ty<T>(&&tv: ty_visitor);\n     }\n }"}, {"sha": "8919265fb87bcf224c56f4eb1de20f577ab726ed", "filename": "src/rustc/front/intrinsic_inject.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic_inject.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -7,10 +7,9 @@ export inject_intrinsic;\n fn inject_intrinsic(sess: session,\n                     crate: @ast::crate) -> @ast::crate {\n \n-    // FIXME: upgrade this to #include_str(\"intrinsic.rs\");\n-    let intrinsic_module = @\"mod intrinsic { }\";\n+    let intrinsic_module = @#include_str(\"intrinsic.rs\");\n \n-    let item = parse::parse_item_from_source_str(\"intrinsic\",\n+    let item = parse::parse_item_from_source_str(\"<intrinsic>\",\n                                                  intrinsic_module,\n                                                  sess.opts.cfg,\n                                                  [], ast::public,"}, {"sha": "16e5e07b0cf86c506fa3936267fb13936186858e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -641,13 +641,10 @@ fn incr_refcnt_of_boxed(cx: block, box_ptr: ValueRef) {\n fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n     let _icx = bcx.insn_ctxt(\"make_visit_glue\");\n     let mut bcx = bcx;\n-    alt bcx.ccx().intrinsic_ifaces.find(\"visit_ty\") {\n-      some(iid) {\n-        bcx = reflect::emit_calls_to_iface_visit_ty(bcx, t, v, iid);\n-      }\n-      none {\n-      }\n-    }\n+    assert bcx.ccx().tcx.intrinsic_ifaces.contains_key(\"ty_visitor\");\n+    let (iid, ty) = bcx.ccx().tcx.intrinsic_ifaces.get(\"ty_visitor\");\n+    let v = PointerCast(bcx, v, T_ptr(type_of::type_of(bcx.ccx(), ty)));\n+    bcx = reflect::emit_calls_to_iface_visit_ty(bcx, t, Load(bcx, v), iid);\n     build_return(bcx);\n }\n \n@@ -1073,6 +1070,7 @@ fn lazily_emit_all_tydesc_glue(ccx: @crate_ctxt,\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_take_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_free_glue, static_ti);\n+    lazily_emit_tydesc_glue(ccx, abi::tydesc_field_visit_glue, static_ti);\n }\n \n fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: uint,\n@@ -5302,7 +5300,6 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           tn: tn,\n           externs: str_hash::<ValueRef>(),\n           intrinsics: intrinsics,\n-          intrinsic_ifaces: reflect::find_intrinsic_ifaces(crate),\n           item_vals: int_hash::<ValueRef>(),\n           exp_map: emap,\n           reachable: reachable,"}, {"sha": "c76c48c321edf782f894ab1aa0e01a4fbb37abfb", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -72,7 +72,6 @@ type crate_ctxt = {\n      tn: type_names,\n      externs: hashmap<str, ValueRef>,\n      intrinsics: hashmap<str, ValueRef>,\n-     intrinsic_ifaces: hashmap<str, ast::def_id>,\n      item_vals: hashmap<ast::node_id, ValueRef>,\n      exp_map: resolve::exp_map,\n      reachable: reachable::map,"}, {"sha": "c0b84174cdf13789d5733961d5d23454bf932704", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -836,53 +836,8 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n       }\n       \"visit_ty\" {\n         let tp_ty = substs.tys[0];\n-        let vp_ty = substs.tys[1];\n         let visitor = get_param(decl, first_real_arg);\n-\n-        alt impl::find_vtable_in_fn_ctxt(substs,\n-                                         1u, /* n_param */\n-                                         0u  /* n_bound */ ) {\n-\n-          typeck::vtable_iface(iid, _) {\n-            bcx = reflect::emit_calls_to_iface_visit_ty(bcx, tp_ty,\n-                                                        visitor, iid);\n-          }\n-\n-          // This case is a slightly weird and possibly redundant path in\n-          // which we monomorphize the reflection interface.  FIXME:\n-          // possibly remove this, it might be overkill.\n-          typeck::vtable_static(impl_did, impl_substs, sub_origins) {\n-            reflect::visit_ty_steps(bcx, tp_ty) {|mth_name, args|\n-                let mth_id = impl::method_with_name(ccx, impl_did, mth_name);\n-                let mth_ty = ty::lookup_item_type(ccx.tcx, mth_id).ty;\n-                // FIXME: is this safe? There is no callee AST node,\n-                // we're synthesizing it.\n-                let callee_id = (-1) as ast::node_id;\n-                let get_lval = {|bcx|\n-                    let lval = lval_static_fn_inner(bcx, mth_id, callee_id,\n-                                                    impl_substs,\n-                                                    some(sub_origins));\n-                    {env: self_env(visitor, vp_ty, none) with lval}\n-                };\n-                bcx = trans_call_inner(\n-                    bcx, none, mth_ty, ty::mk_bool(ccx.tcx),\n-                    get_lval, arg_vals(args), ignore);\n-            }\n-          }\n-\n-          _ {\n-            ccx.sess.span_bug(item.span,\n-                              \"non-static callee in 'visit_ty' intrinsinc\");\n-          }\n-        }\n-      }\n-\n-      \"visit_val\" {\n-        bcx.sess().unimpl(\"trans::native::visit_val\");\n-      }\n-\n-      \"visit_val_pair\" {\n-        bcx.sess().unimpl(\"trans::native::visit_val_pair\");\n+        call_tydesc_glue(bcx, visitor, tp_ty, abi::tydesc_field_visit_glue);\n       }\n     }\n     build_return(bcx);"}, {"sha": "336cb897ed3b70be8c610d0663392f8e65252c6f", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 49, "deletions": 67, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -10,27 +10,40 @@ import type_of::*;\n import ast::def_id;\n import util::ppaux::ty_to_str;\n \n-fn visit_ty_steps<T>(bcx: block, t: ty::t,\n-                     step: fn(tyname: str, args: [ValueRef]) -> T) -> T {\n+fn visit_ty_steps(bcx: block, t: ty::t,\n+                  step: fn(bcx: block,\n+                           tyname: str,\n+                           args: [ValueRef]) -> block,\n+                  sub: fn(bcx: block, t: ty::t) -> block) -> block {\n+\n+    let ccx = bcx.ccx();\n+\n     alt ty::get(t).struct {\n-      ty::ty_bot { step(\"visit_bot\", []) }\n-      ty::ty_nil { step(\"visit_nil\", []) }\n-      ty::ty_bool { step(\"visit_bool\", []) }\n-      ty::ty_int(ast::ty_i) { step(\"visit_int\", []) }\n-      ty::ty_int(ast::ty_char) { step(\"visit_char\", []) }\n-          ty::ty_int(ast::ty_i8) { step(\"visit_i8\", []) }\n-          ty::ty_int(ast::ty_i16) { step(\"visit_i16\", []) }\n-          ty::ty_int(ast::ty_i32) { step(\"visit_i32\", []) }\n-          ty::ty_int(ast::ty_i64) { step(\"visit_i64\", []) }\n-          ty::ty_uint(ast::ty_u) { step(\"visit_uint\", []) }\n-          ty::ty_uint(ast::ty_u8) { step(\"visit_u8\", []) }\n-          ty::ty_uint(ast::ty_u16) { step(\"visit_u16\", []) }\n-          ty::ty_uint(ast::ty_u32) { step(\"visit_u32\", []) }\n-          ty::ty_uint(ast::ty_u64) { step(\"visit_u64\", []) }\n-          ty::ty_float(ast::ty_f) { step(\"visit_float\", []) }\n-          ty::ty_float(ast::ty_f32) { step(\"visit_f32\", []) }\n-          ty::ty_float(ast::ty_f64) { step(\"visit_f64\", []) }\n-          ty::ty_str { step(\"visit_str\", []) }\n+      ty::ty_bot { step(bcx, \"visit_bot\", []) }\n+      ty::ty_nil { step(bcx, \"visit_nil\", []) }\n+      ty::ty_bool { step(bcx, \"visit_bool\", []) }\n+      ty::ty_int(ast::ty_i) { step(bcx, \"visit_int\", []) }\n+      ty::ty_int(ast::ty_char) { step(bcx, \"visit_char\", []) }\n+          ty::ty_int(ast::ty_i8) { step(bcx, \"visit_i8\", []) }\n+          ty::ty_int(ast::ty_i16) { step(bcx, \"visit_i16\", []) }\n+          ty::ty_int(ast::ty_i32) { step(bcx, \"visit_i32\", []) }\n+          ty::ty_int(ast::ty_i64) { step(bcx, \"visit_i64\", []) }\n+          ty::ty_uint(ast::ty_u) { step(bcx, \"visit_uint\", []) }\n+          ty::ty_uint(ast::ty_u8) { step(bcx, \"visit_u8\", []) }\n+          ty::ty_uint(ast::ty_u16) { step(bcx, \"visit_u16\", []) }\n+          ty::ty_uint(ast::ty_u32) { step(bcx, \"visit_u32\", []) }\n+          ty::ty_uint(ast::ty_u64) { step(bcx, \"visit_u64\", []) }\n+          ty::ty_float(ast::ty_f) { step(bcx, \"visit_float\", []) }\n+          ty::ty_float(ast::ty_f32) { step(bcx, \"visit_f32\", []) }\n+          ty::ty_float(ast::ty_f64) { step(bcx, \"visit_f64\", []) }\n+          ty::ty_str { step(bcx, \"visit_str\", []) }\n+\n+          ty::ty_vec(mt) {\n+            let bcx = step(bcx, \"visit_vec_of\",\n+                           [C_uint(ccx, mt.mutbl as uint)]);\n+            sub(bcx, mt.ty)\n+          }\n+\n       _ {\n         bcx.sess().unimpl(\"trans::reflect::visit_ty_args on \"\n                           + ty_to_str(bcx.ccx().tcx, t));\n@@ -43,51 +56,20 @@ fn emit_calls_to_iface_visit_ty(bcx: block, t: ty::t,\n                                 visitor_val: ValueRef,\n                                 visitor_iid: def_id) -> block {\n     let tcx = bcx.tcx();\n-    visit_ty_steps(bcx, t) {|mth_name, args|\n-        let methods = ty::iface_methods(tcx, visitor_iid);\n-        let mth_idx = option::get(ty::method_idx(mth_name, *methods));\n-        let mth_ty = ty::mk_fn(tcx, methods[mth_idx].fty);\n-        let get_lval = {|bcx|\n-            impl::trans_iface_callee(bcx, visitor_val, mth_ty, mth_idx)\n-        };\n-        trans_call_inner(bcx, none, mth_ty, ty::mk_bool(tcx),\n-                         get_lval, arg_vals(args), ignore)\n-    }\n+    let methods = ty::iface_methods(tcx, visitor_iid);\n+    visit_ty_steps(bcx, t,\n+                   {|bcx, mth_name, args|\n+                       let mth_idx = option::get(ty::method_idx(mth_name,\n+                                                                *methods));\n+                       let mth_ty = ty::mk_fn(tcx, methods[mth_idx].fty);\n+                       let get_lval = {|bcx|\n+                           impl::trans_iface_callee(bcx, visitor_val,\n+                                                    mth_ty, mth_idx)\n+                       };\n+                       trans_call_inner(bcx, none, mth_ty, ty::mk_bool(tcx),\n+                                        get_lval, arg_vals(args), ignore)\n+                   },\n+                   {|bcx, t_sub|\n+                       call_tydesc_glue(bcx, visitor_val, t_sub,\n+                                        abi::tydesc_field_visit_glue)})\n }\n-\n-\n-fn find_intrinsic_ifaces(crate: @ast::crate)\n-    -> hashmap<str, ast::def_id> {\n-\n-    let ifaces : hashmap<str, ast::def_id> = str_hash();\n-\n-    // FIXME: hooking into the \"intrinsic\" root module is crude.\n-    // there ought to be a better approach. Attributes?\n-\n-    for crate.node.module.items.each {|crate_item|\n-        if crate_item.ident == \"intrinsic\" {\n-            alt crate_item.node {\n-              ast::item_mod(m) {\n-                for m.items.each {|intrinsic_item|\n-                    alt intrinsic_item.node {\n-                      ast::item_iface(_, _, _) {\n-                        let def_id = { crate: ast::local_crate,\n-                                       node: intrinsic_item.id };\n-                        ifaces.insert(intrinsic_item.ident,\n-                                      def_id);\n-                      }\n-                      _ { }\n-                    }\n-                }\n-              }\n-              _ { }\n-            }\n-            break;\n-        }\n-    }\n-\n-    // Assert whatever ifaces we are expecting to get from mod intrinsic.\n-    // assert ifaces.contains_key(\"visit_ty\");\n-\n-    ret ifaces;\n-}\n\\ No newline at end of file"}, {"sha": "5061e525a19ae3369cd77443e796a05b82646b7a", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -76,7 +76,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n       ast_map::node_native_item(i@@{node: native_item_fn(_, _), _}, abi, _) {\n         if abi == native_abi_rust_intrinsic {\n             let flags = alt check i.ident {\n-              \"visit_ty\" | \"visit_val\" | \"visit_val_pair\" { 3u }\n+              \"visit_ty\" { 3u }\n               \"size_of\" |  \"pref_align_of\" | \"min_align_of\" |\n               \"init\" |  \"reinterpret_cast\" { use_repr }\n               \"get_tydesc\" | \"needs_drop\" { use_tydesc }"}, {"sha": "0501a6fa815c53616ba90bc8f1816afef6d23397", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -220,6 +220,7 @@ type ctxt =\n       node_type_substs: hashmap<node_id, [t]>,\n \n       items: ast_map::map,\n+      intrinsic_ifaces: hashmap<str, (ast::def_id, t)>,\n       freevars: freevars::freevar_map,\n       tcache: type_cache,\n       rcache: creader_cache,\n@@ -473,6 +474,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n       node_types: @smallintmap::mk(),\n       node_type_substs: map::int_hash(),\n       items: amap,\n+      intrinsic_ifaces: map::str_hash(),\n       freevars: freevars,\n       tcache: new_def_hash(),\n       rcache: mk_rcache(),"}, {"sha": "a9006e9583ae899f8e1eee740fa83a9af9ea20fd", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -24,6 +24,34 @@ import astconv::{type_rscope, empty_rscope, in_binding_rscope, ast_conv,\n                  ty_of_fn_decl, ty_of_arg, region_scope, ast_ty_to_ty};\n \n fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n+\n+    // FIXME: hooking into the \"intrinsic\" root module is crude.\n+    // there ought to be a better approach. Attributes?\n+\n+    for crate.node.module.items.each {|crate_item|\n+        if crate_item.ident == \"intrinsic\" {\n+            alt crate_item.node {\n+              ast::item_mod(m) {\n+                for m.items.each {|intrinsic_item|\n+                    alt intrinsic_item.node {\n+                      ast::item_iface(_, _, _) {\n+                        let def_id = { crate: ast::local_crate,\n+                                      node: intrinsic_item.id };\n+                        let substs = {self_r: none, self_ty: none, tps: []};\n+                        let ty = ty::mk_iface(ccx.tcx, def_id, substs);\n+                        ccx.tcx.intrinsic_ifaces.insert\n+                            (intrinsic_item.ident, (def_id, ty));\n+                      }\n+                      _ { }\n+                    }\n+                }\n+              }\n+              _ { }\n+            }\n+            break;\n+        }\n+    }\n+\n     visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n         visit_item: bind convert(ccx, _),\n         visit_native_item: bind convert_native(ccx, _)\n@@ -461,17 +489,11 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n                    ty::mk_imm_ptr(tcx, param(ccx, 0u))) }\n       \"needs_drop\" { (1u, [], ty::mk_bool(tcx)) }\n \n-      \"visit_ty\" { (2u, [arg(ast::by_ref, param(ccx, 1u))],\n-                    ty::mk_nil(tcx)) }\n-\n-      \"visit_val\" { (2u, [arg(ast::by_ref, param(ccx, 0u)),\n-                          arg(ast::by_ref, param(ccx, 1u))],\n-                     ty::mk_nil(tcx)) }\n-\n-      \"visit_val_pair\" { (2u, [arg(ast::by_ref, param(ccx, 0u)),\n-                               arg(ast::by_ref, param(ccx, 0u)),\n-                               arg(ast::by_ref, param(ccx, 1u))],\n-                          ty::mk_nil(tcx)) }\n+      \"visit_ty\" {\n+        assert ccx.tcx.intrinsic_ifaces.contains_key(\"ty_visitor\");\n+        let (_, visitor_iface) = ccx.tcx.intrinsic_ifaces.get(\"ty_visitor\");\n+        (1u, [arg(ast::by_ref, visitor_iface)], ty::mk_nil(tcx))\n+      }\n \n       other {\n         tcx.sess.span_err(it.span, \"unrecognized intrinsic function: `\" +"}, {"sha": "b996cf860ebef0ee82c7f3166b97982f4e61e16e", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 18, "deletions": 73, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/9752523f3a306a95c72032a2d957f09cd2801968/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752523f3a306a95c72032a2d957f09cd2801968/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=9752523f3a306a95c72032a2d957f09cd2801968", "patch": "@@ -1,54 +1,12 @@\n // xfail-test\n //\n-// This works on stage2 currently. Once we have a snapshot\n-// and some fiddling with inject_intrinsic (and possibly another\n-// snapshot after _that_) it can be un-xfailed and changed\n-// to use the intrinsic:: interface and native module.\n-//\n-\n-iface ty_visitor {\n-    fn visit_bot() -> bool;\n-    fn visit_nil() -> bool;\n-    fn visit_bool() -> bool;\n-\n-    fn visit_int() -> bool;\n-    fn visit_i8() -> bool;\n-    fn visit_i16() -> bool;\n-    fn visit_i32() -> bool;\n-    fn visit_i64() -> bool;\n-\n-    fn visit_uint() -> bool;\n-    fn visit_u8() -> bool;\n-    fn visit_u16() -> bool;\n-    fn visit_u32() -> bool;\n-    fn visit_u64() -> bool;\n+// This doesn't work quite yet. There's something wrong with the callback\n+// type when dispatching through the visit_glue. Get a GEP crash on the\n+// callee.\n \n-    fn visit_float() -> bool;\n-    fn visit_f32() -> bool;\n-    fn visit_f64() -> bool;\n-\n-    fn visit_char() -> bool;\n-    fn visit_str() -> bool;\n-\n-    // FIXME: possibly pair these as enter/leave calls\n-    // not just enter with implicit number of subsequent\n-    // calls.\n-    fn visit_vec_of(is_mut: bool) -> bool;\n-    fn visit_box_of(is_mut: bool) -> bool;\n-    fn visit_uniq_of(is_mut: bool) -> bool;\n-    fn visit_ptr_of(is_mut: bool) -> bool;\n-    fn visit_rptr_of(is_mut: bool) -> bool;\n-    fn visit_rec_of(n_fields: uint) -> bool;\n-    fn visit_rec_field(name: str/&, is_mut: bool) -> bool;\n-    fn visit_tup_of(n_fields: uint) -> bool;\n-    fn visit_tup_field(is_mut: bool) -> bool;\n-    fn visit_enum_of(n_variants: uint) -> bool;\n-    fn visit_enum_variant(name: str/&) -> bool;\n-}\n+enum my_visitor = @{ mut types: [str] };\n \n-enum my_visitor = { mut types: [str] };\n-\n-impl of ty_visitor for my_visitor {\n+impl of intrinsic::ty_visitor for my_visitor {\n     fn visit_bot() -> bool {\n         self.types += [\"bot\"];\n         #error(\"visited bot type\");\n@@ -95,43 +53,30 @@ impl of ty_visitor for my_visitor {\n     fn visit_char() -> bool { true }\n     fn visit_str() -> bool { true }\n \n-    fn visit_vec_of(_is_mut: bool) -> bool { true }\n-    fn visit_box_of(_is_mut: bool) -> bool { true }\n-    fn visit_uniq_of(_is_mut: bool) -> bool { true }\n-    fn visit_ptr_of(_is_mut: bool) -> bool { true }\n-    fn visit_rptr_of(_is_mut: bool) -> bool { true }\n+    fn visit_vec_of(_mutbl: uint) -> bool { true }\n+    fn visit_box_of(_mutbl: uint) -> bool { true }\n+    fn visit_uniq_of(_mutbl: uint) -> bool { true }\n+    fn visit_ptr_of(_mutbl: uint) -> bool { true }\n+    fn visit_rptr_of(_mutbl: uint) -> bool { true }\n     fn visit_rec_of(_n_fields: uint) -> bool { true }\n-    fn visit_rec_field(_name: str/&, _is_mut: bool) -> bool { true }\n+    fn visit_rec_field(_name: str/&, _mutbl: uint) -> bool { true }\n     fn visit_tup_of(_n_fields: uint) -> bool { true }\n-    fn visit_tup_field(_is_mut: bool) -> bool { true }\n+    fn visit_tup_field(_mutbl: uint) -> bool { true }\n     fn visit_enum_of(_n_variants: uint) -> bool { true }\n     fn visit_enum_variant(_name: str/&) -> bool { true }\n }\n \n-#[abi = \"rust-intrinsic\"]\n-native mod rusti {\n-    fn visit_ty<T,V:ty_visitor>(tv: V);\n-}\n-\n-fn via_iface(v: ty_visitor) {\n-    rusti::visit_ty::<bool,ty_visitor>(v);\n-    rusti::visit_ty::<int,ty_visitor>(v);\n-    rusti::visit_ty::<i8,ty_visitor>(v);\n-    rusti::visit_ty::<i16,ty_visitor>(v);\n-}\n-\n fn main() {\n-    let v = my_visitor({mut types: []});\n+    let v = my_visitor(@{mut types: []});\n+    let vv = v as intrinsic::ty_visitor;\n \n-    rusti::visit_ty::<bool,my_visitor>(v);\n-    rusti::visit_ty::<int,my_visitor>(v);\n-    rusti::visit_ty::<i8,my_visitor>(v);\n-    rusti::visit_ty::<i16,my_visitor>(v);\n+    intrinsic::visit_ty::<bool>(vv);\n+    intrinsic::visit_ty::<int>(vv);\n+    intrinsic::visit_ty::<i8>(vv);\n+    intrinsic::visit_ty::<i16>(vv);\n \n     for v.types.each {|s|\n         io::println(#fmt(\"type: %s\", s));\n     }\n     assert v.types == [\"bool\", \"int\", \"i8\", \"i16\"];\n-\n-    via_iface(v as ty_visitor);\n }"}]}