{"sha": "311dc5b04f0c41358714a88e097bbf2735deeb99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMWRjNWIwNGYwYzQxMzU4NzE0YTg4ZTA5N2JiZjI3MzVkZWViOTk=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T14:25:10Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:36:24Z"}, "message": "add test for method generation assist", "tree": {"sha": "08306e0f1e0953fbc4c32c245b5998615b3fec33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08306e0f1e0953fbc4c32c245b5998615b3fec33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/311dc5b04f0c41358714a88e097bbf2735deeb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/311dc5b04f0c41358714a88e097bbf2735deeb99", "html_url": "https://github.com/rust-lang/rust/commit/311dc5b04f0c41358714a88e097bbf2735deeb99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/311dc5b04f0c41358714a88e097bbf2735deeb99/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c31f3831d86b599dc6cb5a9a2fa09a59731c4e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c31f3831d86b599dc6cb5a9a2fa09a59731c4e0", "html_url": "https://github.com/rust-lang/rust/commit/3c31f3831d86b599dc6cb5a9a2fa09a59731c4e0"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "7321c1f38e234611fc1fc7f9fab452880b9c08f5", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 124, "deletions": 1, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/311dc5b04f0c41358714a88e097bbf2735deeb99/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311dc5b04f0c41358714a88e097bbf2735deeb99/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=311dc5b04f0c41358714a88e097bbf2735deeb99", "patch": "@@ -139,7 +139,7 @@ pub(crate) fn generate_method(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             builder.edit_file(function_template.file);\n             let mut new_fn = function_template.to_string(ctx.config.snippet_cap);\n             if impl_.is_none() {\n-                new_fn = format!(\"\\nimpl {} {{\\n   {}\\n}}\", ty.name(ctx.sema.db), new_fn,);\n+                new_fn = format!(\"\\nimpl {} {{\\n{}\\n}}\", ty.name(ctx.sema.db), new_fn,);\n             }\n             match ctx.config.snippet_cap {\n                 Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n@@ -1380,6 +1380,129 @@ fn foo() {\n async fn bar(arg: i32) ${0:-> ()} {\n     todo!()\n }\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn create_method() {\n+        check_assist(\n+            generate_method,\n+            r\"\n+struct S;\n+\n+fn foo() {\n+    S.bar$0();\n+}\n+\n+\",\n+            r\"\n+struct S;\n+\n+fn foo() {\n+    S.bar();\n+}\n+impl S {\n+\n+\n+fn bar(&self) ${0:-> ()} {\n+    todo!()\n+}\n+}\n+\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn create_method_within_an_impl() {\n+        check_assist(\n+            generate_method,\n+            r\"\n+struct S;\n+\n+fn foo() {\n+    S.bar$0();\n+}\n+impl S {}\n+\n+\",\n+            r\"\n+struct S;\n+\n+fn foo() {\n+    S.bar();\n+}\n+impl S {\n+    fn bar(&self) ${0:-> ()} {\n+        todo!()\n+    }\n+}\n+\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn create_method_from_different_module() {\n+        check_assist(\n+            generate_method,\n+            r\"\n+mod s {\n+    pub struct S;\n+}\n+fn foo() {\n+    s::S.bar$0();\n+}\n+\n+\",\n+            r\"\n+mod s {\n+    pub struct S;\n+impl S {\n+\n+\n+    pub(crate) fn bar(&self) ${0:-> ()} {\n+        todo!()\n+    }\n+}\n+}\n+fn foo() {\n+    s::S.bar();\n+}\n+\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn create_method_from_descendant_module() {\n+        check_assist(\n+            generate_method,\n+            r\"\n+struct S;\n+mod s {\n+    fn foo() {\n+        super::S.bar$0();\n+    }\n+}\n+\n+\",\n+            r\"\n+struct S;\n+mod s {\n+    fn foo() {\n+        super::S.bar();\n+    }\n+}\n+impl S {\n+\n+\n+fn bar(&self) ${0:-> ()} {\n+    todo!()\n+}\n+}\n+\n \",\n         )\n     }"}]}