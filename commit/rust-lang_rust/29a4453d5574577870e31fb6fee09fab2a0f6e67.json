{"sha": "29a4453d5574577870e31fb6fee09fab2a0f6e67", "node_id": "C_kwDOAAsO6NoAKDI5YTQ0NTNkNTU3NDU3Nzg3MGUzMWZiNmZlZTA5ZmFiMmEwZjZlNjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-27T15:01:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-27T15:01:16Z"}, "message": "Merge the two autoref vecs into one in autoderef_method_receiver", "tree": {"sha": "027b77c16dd909fcba7afc28d03748c1307ad8a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/027b77c16dd909fcba7afc28d03748c1307ad8a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a4453d5574577870e31fb6fee09fab2a0f6e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a4453d5574577870e31fb6fee09fab2a0f6e67", "html_url": "https://github.com/rust-lang/rust/commit/29a4453d5574577870e31fb6fee09fab2a0f6e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a4453d5574577870e31fb6fee09fab2a0f6e67/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e5fa74279b939a752826a52e1c4693205377a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5fa74279b939a752826a52e1c4693205377a26", "html_url": "https://github.com/rust-lang/rust/commit/9e5fa74279b939a752826a52e1c4693205377a26"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "1a5ee97fd047e2dd94714e783898950daae43856", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/29a4453d5574577870e31fb6fee09fab2a0f6e67/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a4453d5574577870e31fb6fee09fab2a0f6e67/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=29a4453d5574577870e31fb6fee09fab2a0f6e67", "patch": "@@ -821,9 +821,9 @@ pub fn iterate_method_candidates_dyn(\n \n             let mut table = InferenceTable::new(db, env.clone());\n             let ty = table.instantiate_canonical(ty.clone());\n-            let (deref_chain, adj) = autoderef_method_receiver(&mut table, ty);\n+            let deref_chain = autoderef_method_receiver(&mut table, ty);\n \n-            let result = deref_chain.into_iter().zip(adj).try_for_each(|(receiver_ty, adj)| {\n+            let result = deref_chain.into_iter().try_for_each(|(receiver_ty, adj)| {\n                 iterate_method_candidates_with_autoref(\n                     &receiver_ty,\n                     adj,\n@@ -867,7 +867,7 @@ fn iterate_method_candidates_with_autoref(\n         return ControlFlow::Continue(());\n     }\n \n-    let iterate_method_candidates_by_receiver = |receiver_ty, first_adjustment| {\n+    let mut iterate_method_candidates_by_receiver = move |receiver_ty, first_adjustment| {\n         iterate_method_candidates_by_receiver(\n             receiver_ty,\n             first_adjustment,\n@@ -1199,8 +1199,8 @@ pub fn resolve_indexing_op(\n ) -> Option<ReceiverAdjustments> {\n     let mut table = InferenceTable::new(db, env.clone());\n     let ty = table.instantiate_canonical(ty);\n-    let (deref_chain, adj) = autoderef_method_receiver(&mut table, ty);\n-    for (ty, adj) in deref_chain.into_iter().zip(adj) {\n+    let deref_chain = autoderef_method_receiver(&mut table, ty);\n+    for (ty, adj) in deref_chain {\n         let goal = generic_implements_goal(db, env.clone(), index_trait, &ty);\n         if db.trait_solve(env.krate, goal.cast(Interner)).is_some() {\n             return Some(adj);\n@@ -1410,25 +1410,24 @@ fn generic_implements_goal(\n fn autoderef_method_receiver(\n     table: &mut InferenceTable<'_>,\n     ty: Ty,\n-) -> (Vec<Canonical<Ty>>, Vec<ReceiverAdjustments>) {\n-    let (mut deref_chain, mut adjustments): (Vec<_>, Vec<_>) = (Vec::new(), Vec::new());\n+) -> Vec<(Canonical<Ty>, ReceiverAdjustments)> {\n+    let mut deref_chain: Vec<_> = Vec::new();\n     let mut autoderef = autoderef::Autoderef::new(table, ty);\n     while let Some((ty, derefs)) = autoderef.next() {\n-        deref_chain.push(autoderef.table.canonicalize(ty).value);\n-        adjustments.push(ReceiverAdjustments {\n-            autoref: None,\n-            autoderefs: derefs,\n-            unsize_array: false,\n-        });\n+        deref_chain.push((\n+            autoderef.table.canonicalize(ty).value,\n+            ReceiverAdjustments { autoref: None, autoderefs: derefs, unsize_array: false },\n+        ));\n     }\n     // As a last step, we can do array unsizing (that's the only unsizing that rustc does for method receivers!)\n-    if let (Some((TyKind::Array(parameters, _), binders)), Some(adj)) = (\n-        deref_chain.last().map(|ty| (ty.value.kind(Interner), ty.binders.clone())),\n-        adjustments.last().cloned(),\n-    ) {\n+    if let Some((TyKind::Array(parameters, _), binders, adj)) =\n+        deref_chain.last().map(|(ty, adj)| (ty.value.kind(Interner), ty.binders.clone(), adj))\n+    {\n         let unsized_ty = TyKind::Slice(parameters.clone()).intern(Interner);\n-        deref_chain.push(Canonical { value: unsized_ty, binders });\n-        adjustments.push(ReceiverAdjustments { unsize_array: true, ..adj });\n+        deref_chain.push((\n+            Canonical { value: unsized_ty, binders },\n+            ReceiverAdjustments { unsize_array: true, ..adj.clone() },\n+        ));\n     }\n-    (deref_chain, adjustments)\n+    deref_chain\n }"}, {"sha": "6206a541c1e8975617124acfa509f49308a8517c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a4453d5574577870e31fb6fee09fab2a0f6e67/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a4453d5574577870e31fb6fee09fab2a0f6e67/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=29a4453d5574577870e31fb6fee09fab2a0f6e67", "patch": "@@ -3376,7 +3376,7 @@ impl Type {\n         scope: &SemanticsScope<'_>,\n         with_local_impls: Option<Module>,\n         name: Option<&Name>,\n-        mut callback: impl FnMut(Function) -> Option<T>,\n+        callback: impl FnMut(Function) -> Option<T>,\n     ) -> Option<T> {\n         self.iterate_method_candidates_with_traits(\n             db,"}]}