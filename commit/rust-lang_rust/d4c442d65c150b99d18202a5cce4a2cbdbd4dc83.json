{"sha": "d4c442d65c150b99d18202a5cce4a2cbdbd4dc83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YzQ0MmQ2NWMxNTBiOTlkMTgyMDJhNWNjZTRhMmNiZGJkNGRjODM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-19T07:08:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-29T10:55:08Z"}, "message": "Expose miri <-> ctfe differences\n\nmiri needs to start storing everything in the TyCtxt so we can have relocations and aggregates", "tree": {"sha": "0b33d1660de756163b50fe278c6450e272e9870d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b33d1660de756163b50fe278c6450e272e9870d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlnOJowACgkQpp+NIls6\n19nveA/+LLwAcNELygfXRHrJOtoW00R6K+H+UYkmuSDZLeE51hDwcyi5zZvqme6B\nE++HO9K2nCDmCFkBIWIWanAx+jMB/OYYpMOBeeVPJrqe+nAhHMda5ai/uJsamuIw\nVk4JdXrrMHAdLFuQAPap2vBOfJYuruanYvMHWI5oSHkSy5gqFbF5EC+lo4MGvzVN\nN8fIzI1emsAGj/bq6A26IJrsDc0H2D86nQPXTzoafFTcSAkX15aLqOvkC3xlHddq\nR5Dh0Gt0GGnC5GpUX1hMBbXTlUxoT06BjAGjU2c4HJDHpgL8UeEn2lczmj98kI39\nnE/KqKDf6HyVkbWqiK/j4SvxB/aYHrVJPkwGmSFa/ylH9NvrLOM3agrSxvGdg39t\naSaiiMT/JwRARaC1DBs8NLa2jrJVUqf1eX8ebEpBfFkAzDbqvWpB+9MS9HAAHDjz\n6Q++txMEWfV9GIxDwv0tg3Ou/7U9q8QQxxbidnAqrnL7xHup/+WOTAkh9P30TMyk\nmOjUz0NUO/baERuvlnhLVKk+lpKC8aCqO8XyYrztlnvG1CD4+Hj8tvu2Jpish5Vx\ng9V8SBic0dkexhKk+05oJIh9M4+Lboy1Trtlz600LYr+Vxq+1CryAyoBmryfy2Rj\nvOJfGjMQw6lYTLMm9uvMorhrCdpIbdPI5bMcZKnUFXlg2962eXI=\n=6nJB\n-----END PGP SIGNATURE-----", "payload": "tree 0b33d1660de756163b50fe278c6450e272e9870d\nparent ea35192d7c3e64b8be7f694d0743d123b0c4563a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505804928 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1506682508 +0200\n\nExpose miri <-> ctfe differences\n\nmiri needs to start storing everything in the TyCtxt so we can have relocations and aggregates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83", "html_url": "https://github.com/rust-lang/rust/commit/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea35192d7c3e64b8be7f694d0743d123b0c4563a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea35192d7c3e64b8be7f694d0743d123b0c4563a", "html_url": "https://github.com/rust-lang/rust/commit/ea35192d7c3e64b8be7f694d0743d123b0c4563a"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "10da2b9ded765f3e0c1ffc93ca44745662eadb17", "filename": "src/librustc/mir/interpret/const_eval.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs?ref=d4c442d65c150b99d18202a5cce4a2cbdbd4dc83", "patch": "@@ -13,10 +13,10 @@ use rustc_const_math::ConstInt;\n use std::fmt;\n use std::error::Error;\n \n-pub fn eval_body_as_primval<'a, 'tcx>(\n+pub fn eval_body<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n-) -> EvalResult<'tcx, (PrimVal, Ty<'tcx>)> {\n+) -> EvalResult<'tcx, (Value, Ty<'tcx>)> {\n     let limits = super::ResourceLimits::default();\n     let mut ecx = EvalContext::<CompileTimeFunctionEvaluator>::new(tcx, limits, (), ());\n     let cid = GlobalId {\n@@ -73,7 +73,8 @@ pub fn eval_body_as_primval<'a, 'tcx>(\n         value,\n         ty: mir.return_ty,\n     };\n-    Ok((ecx.value_to_primval(valty)?, mir.return_ty))\n+    // FIXME: store cached value in TyCtxt\n+    Ok(value, mir.return_ty))\n }\n \n pub fn eval_body_as_integer<'a, 'tcx>("}, {"sha": "d9416c09699a61b20732c7dc453b4954575a3f93", "filename": "src/librustc/mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs?ref=d4c442d65c150b99d18202a5cce4a2cbdbd4dc83", "patch": "@@ -1895,7 +1895,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     pub(super) fn substs(&self) -> &'tcx Substs<'tcx> {\n-        self.frame().instance.substs\n+        if let Some(frame) = self.stack.last() {\n+            frame.instance.substs\n+        } else {\n+            Substs::empty()\n+        }\n     }\n \n     fn unsize_into_ptr("}, {"sha": "20745c27838b9d521b1e9cf76ca941d658c0c02e", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c442d65c150b99d18202a5cce4a2cbdbd4dc83/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=d4c442d65c150b99d18202a5cce4a2cbdbd4dc83", "patch": "@@ -793,68 +793,68 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let instance = ty::Instance::new(def_id, substs);\n-    let miri_result = ::rustc::interpret::eval_body_as_primval(tcx, instance);\n+    let miri_result = ::rustc::mir::interpret::eval_body_as_primval(tcx, instance);\n     let old_result = ConstContext::new(tcx, key.param_env.and(substs), tables).eval(&body.value);\n     match (miri_result, old_result) {\n         (Err(err), Ok(ok)) => {\n-            warn!(\"miri fails to eval {:?} to {:?} with error {:?}\", key, ok, err);\n-            Ok(ok)\n+            panic!(\"miri fails to eval {:?} to {:?} with error {:?}\", key, ok, err);\n+            //Ok(ok)\n         },\n         (Ok(ok), Err(err)) => {\n-            info!(\"miri can eval {:?} to {:?}, while old ctfe fails with {:?}\", key, ok, err);\n-            Err(err)\n+            panic!(\"miri can eval {:?} to {:?}, while old ctfe fails with {:?}\", key, ok, err);\n+            //Err(err)\n         },\n         (Err(_), Err(err)) => Err(err),\n         (Ok((miri_val, miri_ty)), Ok(ctfe)) => {\n             use rustc::ty::TypeVariants::*;\n-            use rustc::interpret::PrimVal;\n+            use rustc::mir::interpret::PrimVal;\n             match (miri_val, &miri_ty.sty, ctfe.val) {\n                 (PrimVal::Undef, _, _) => {\n-                    warn!(\"miri produced an undef, while old ctfe produced {:?}\", ctfe);\n+                    panic!(\"miri produced an undef, while old ctfe produced {:?}\", ctfe);\n                 },\n                 (PrimVal::Ptr(_), _, _) => {\n-                    warn!(\"miri produced a pointer, which isn't implemented yet\");\n+                    panic!(\"miri produced a pointer, which isn't implemented yet\");\n                 },\n                 (PrimVal::Bytes(b), &TyInt(int_ty), ConstVal::Integral(ci)) => {\n                     let c = ConstInt::new_signed_truncating(b as i128,\n                                                             int_ty,\n                                                             tcx.sess.target.isize_ty);\n                     if c != ci {\n-                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", b as i128, ci);\n+                        panic!(\"miri evaluated to {}, but ctfe yielded {}\", b as i128, ci);\n                     }\n                 }\n                 (PrimVal::Bytes(b), &TyUint(int_ty), ConstVal::Integral(ci)) => {\n                     let c = ConstInt::new_unsigned_truncating(b, int_ty, tcx.sess.target.usize_ty);\n                     if c != ci {\n-                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", b, ci);\n+                        panic!(\"miri evaluated to {}, but ctfe yielded {}\", b, ci);\n                     }\n                 }\n                 (PrimVal::Bytes(bits), &TyFloat(ty), ConstVal::Float(cf)) => {\n                     let f = ConstFloat { bits, ty };\n                     if f != cf {\n-                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", f, cf);\n+                        panic!(\"miri evaluated to {}, but ctfe yielded {}\", f, cf);\n                     }\n                 }\n                 (PrimVal::Bytes(bits), &TyBool, ConstVal::Bool(b)) => {\n                     if bits == 0 && b {\n-                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", bits == 0, b);\n+                        panic!(\"miri evaluated to {}, but ctfe yielded {}\", bits == 0, b);\n                     } else if bits == 1 && !b {\n-                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", bits == 1, b);\n+                        panic!(\"miri evaluated to {}, but ctfe yielded {}\", bits == 1, b);\n                     } else {\n-                        warn!(\"miri evaluated to {}, but expected a bool {}\", bits, b);\n+                        panic!(\"miri evaluated to {}, but expected a bool {}\", bits, b);\n                     }\n                 }\n                 (PrimVal::Bytes(bits), &TyChar, ConstVal::Char(c)) => {\n                     if let Some(cm) = ::std::char::from_u32(bits as u32) {\n                         if cm != c {\n-                            warn!(\"miri evaluated to {:?}, but expected {:?}\", cm, c);\n+                            panic!(\"miri evaluated to {:?}, but expected {:?}\", cm, c);\n                         }\n                     } else {\n-                        warn!(\"miri evaluated to {}, but expected a char {:?}\", bits, c);\n+                        panic!(\"miri evaluated to {}, but expected a char {:?}\", bits, c);\n                     }\n                 }\n                 _ => {\n-                    info!(\"can't check whether miri's {:?} ({}) makes sense when ctfe yields {:?}\",\n+                    panic!(\"can't check whether miri's {:?} ({}) makes sense when ctfe yields {:?}\",\n                         miri_val,\n                         miri_ty,\n                         ctfe)"}]}