{"sha": "0c0c31b11c5460ac25a6e8a478d414a56437e92d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMGMzMWIxMWM1NDYwYWMyNWE2ZThhNDc4ZDQxNGE1NjQzN2U5MmQ=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-02-03T05:41:33Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-02-03T16:44:23Z"}, "message": "implement proper linkchecker hardening", "tree": {"sha": "6bb36714bc8d85457510e18f31f016d04ef68ed3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb36714bc8d85457510e18f31f016d04ef68ed3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c0c31b11c5460ac25a6e8a478d414a56437e92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0c31b11c5460ac25a6e8a478d414a56437e92d", "html_url": "https://github.com/rust-lang/rust/commit/0c0c31b11c5460ac25a6e8a478d414a56437e92d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c0c31b11c5460ac25a6e8a478d414a56437e92d/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd946df3a7af6be0c075d5ab15f9845b3679364", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd946df3a7af6be0c075d5ab15f9845b3679364", "html_url": "https://github.com/rust-lang/rust/commit/bdd946df3a7af6be0c075d5ab15f9845b3679364"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "bbfda0fa2c846f303ac68eda511049a74643c4cc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c0c31b11c5460ac25a6e8a478d414a56437e92d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0c0c31b11c5460ac25a6e8a478d414a56437e92d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0c0c31b11c5460ac25a6e8a478d414a56437e92d", "patch": "@@ -3067,6 +3067,7 @@ name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap\",\n+ \"codespan\",\n  \"codespan-reporting\",\n  \"failure\",\n  \"mdbook\","}, {"sha": "e6e758dccdf0a8d741911e7f8769f6d77aec3f79", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c0c31b11c5460ac25a6e8a478d414a56437e92d/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0c0c31b11c5460ac25a6e8a478d414a56437e92d/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=0c0c31b11c5460ac25a6e8a478d414a56437e92d", "patch": "@@ -6,13 +6,14 @@ license = \"MIT OR Apache-2.0\"\n edition = \"2018\"\n \n [features]\n-linkcheck = [\"mdbook-linkcheck\", \"codespan-reporting\"]\n+linkcheck = [\"mdbook-linkcheck\", \"codespan-reporting\", \"codespan\"]\n \n [dependencies]\n clap = \"2.25.0\"\n failure = \"0.1\"\n mdbook-linkcheck = { version = \"0.5.0\", optional = true }\n # Keep in sync with mdbook-linkcheck.\n+codespan = { version = \"0.5\", optional = true }\n codespan-reporting = { version = \"0.5\", optional = true }\n \n "}, {"sha": "a0b7b29f46257b46c16e77b0b91670d3ad249d82", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0c0c31b11c5460ac25a6e8a478d414a56437e92d/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0c31b11c5460ac25a6e8a478d414a56437e92d/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=0c0c31b11c5460ac25a6e8a478d414a56437e92d", "patch": "@@ -8,8 +8,6 @@ use clap::{App, AppSettings, ArgMatches, SubCommand};\n use mdbook::errors::Result as Result3;\n use mdbook::MDBook;\n \n-#[cfg(feature = \"linkcheck\")]\n-use failure::Error;\n #[cfg(feature = \"linkcheck\")]\n use mdbook::renderer::RenderContext;\n \n@@ -53,8 +51,18 @@ fn main() {\n         (\"linkcheck\", Some(sub_matches)) => {\n             #[cfg(feature = \"linkcheck\")]\n             {\n-                if let Err(err) = linkcheck(sub_matches) {\n-                    eprintln!(\"Error: {}\", err);\n+                let (diags, files) = linkcheck(sub_matches).expect(\"Error while linkchecking.\");\n+                if !diags.is_empty() {\n+                    let color = codespan_reporting::term::termcolor::ColorChoice::Auto;\n+                    let mut writer =\n+                        codespan_reporting::term::termcolor::StandardStream::stderr(color);\n+                    let cfg = codespan_reporting::term::Config::default();\n+\n+                    for diag in diags {\n+                        codespan_reporting::term::emit(&mut writer, &cfg, &files, &diag)\n+                            .expect(\"Unable to emit linkcheck error.\");\n+                    }\n+\n                     std::process::exit(101);\n                 }\n             }\n@@ -73,14 +81,57 @@ fn main() {\n }\n \n #[cfg(feature = \"linkcheck\")]\n-pub fn linkcheck(args: &ArgMatches<'_>) -> Result<(), Error> {\n+pub fn linkcheck(\n+    args: &ArgMatches<'_>,\n+) -> Result<(Vec<codespan_reporting::diagnostic::Diagnostic>, codespan::Files), failure::Error> {\n+    use mdbook_linkcheck::Reason;\n+\n     let book_dir = get_book_dir(args);\n+    let src_dir = get_book_dir(args).join(\"src\");\n     let book = MDBook::load(&book_dir).unwrap();\n-    let cfg = book.config;\n-    let render_ctx = RenderContext::new(&book_dir, book.book, cfg, &book_dir);\n+    let linkck_cfg = mdbook_linkcheck::get_config(&book.config)?;\n+    let mut files = codespan::Files::new();\n+    let target_files = mdbook_linkcheck::load_files_into_memory(&book.book, &mut files);\n+    let render_ctx = RenderContext::new(&book_dir, book.book, book.config, &book_dir);\n     let cache_file = render_ctx.destination.join(\"cache.json\");\n-    let color = codespan_reporting::term::termcolor::ColorChoice::Auto;\n-    mdbook_linkcheck::run(&cache_file, color, &render_ctx)\n+    let cache = mdbook_linkcheck::Cache::load(std::fs::File::open(cache_file)?)?;\n+\n+    let (links, incomplete) = mdbook_linkcheck::extract_links(target_files, &files);\n+\n+    let outcome =\n+        mdbook_linkcheck::validate(&links, &linkck_cfg, &src_dir, &cache, &files, incomplete)?;\n+\n+    let mut is_real_error = false;\n+\n+    for link in outcome.invalid_links.iter() {\n+        match &link.reason {\n+            Reason::FileNotFound | Reason::TraversesParentDirectories => {\n+                is_real_error = true;\n+            }\n+            Reason::UnsuccessfulServerResponse(status) => {\n+                if status.is_client_error() {\n+                    is_real_error = true;\n+                } else {\n+                    eprintln!(\"Unsuccessful server response for link `{}`\", link.link.uri);\n+                }\n+            }\n+            Reason::Client(err) => {\n+                if err.is_timeout() {\n+                    eprintln!(\"Timeout for link `{}`\", link.link.uri);\n+                } else if err.is_server_error() {\n+                    eprintln!(\"Server error for link `{}`\", link.link.uri);\n+                } else {\n+                    is_real_error = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    if is_real_error {\n+        Ok((outcome.generate_diagnostics(&files, linkck_cfg.warning_policy), files))\n+    } else {\n+        Ok((vec![], files))\n+    }\n }\n \n // Build command implementation"}]}