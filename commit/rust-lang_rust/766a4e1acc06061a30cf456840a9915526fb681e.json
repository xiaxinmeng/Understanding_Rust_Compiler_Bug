{"sha": "766a4e1acc06061a30cf456840a9915526fb681e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NmE0ZTFhY2MwNjA2MWEzMGNmNDU2ODQwYTk5MTU1MjZmYjY4MWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-14T08:55:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-14T08:55:31Z"}, "message": "Auto merge of #23333 - oli-obk:slice_from_raw_parts, r=alexcrichton\n\nat least that's what the docs say: http://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\r\n\r\nA few situations got prettier. In some situations the mutability of the resulting and source pointers differed (and was cast away by transmute), the mutability matches now.", "tree": {"sha": "16d2c602028d25d21f28b2d28b69a334e7c849d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d2c602028d25d21f28b2d28b69a334e7c849d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/766a4e1acc06061a30cf456840a9915526fb681e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/766a4e1acc06061a30cf456840a9915526fb681e", "html_url": "https://github.com/rust-lang/rust/commit/766a4e1acc06061a30cf456840a9915526fb681e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/766a4e1acc06061a30cf456840a9915526fb681e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7453f940b6cbc2b07a2c0d7612a11fa435aad95", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7453f940b6cbc2b07a2c0d7612a11fa435aad95", "html_url": "https://github.com/rust-lang/rust/commit/f7453f940b6cbc2b07a2c0d7612a11fa435aad95"}, {"sha": "85080fa81d3ae6770eb228a982670746e55bf4d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/85080fa81d3ae6770eb228a982670746e55bf4d9", "html_url": "https://github.com/rust-lang/rust/commit/85080fa81d3ae6770eb228a982670746e55bf4d9"}], "stats": {"total": 152, "additions": 72, "deletions": 80}, "files": [{"sha": "1a8a4cb7e219e63a2bbc09a48883de287e197fc5", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -348,14 +348,8 @@ impl<K, V> Node<K, V> {\n     #[inline]\n     pub fn as_slices<'a>(&'a self) -> (&'a [K], &'a [V]) {\n         unsafe {(\n-            mem::transmute(raw::Slice {\n-                data: *self.keys as *const K,\n-                len: self.len()\n-            }),\n-            mem::transmute(raw::Slice {\n-                data: *self.vals as *const V,\n-                len: self.len()\n-            })\n+            slice::from_raw_parts(*self.keys, self.len()),\n+            slice::from_raw_parts(*self.vals, self.len()),\n         )}\n     }\n "}, {"sha": "e7f76698b40888cd2b8864aa2a9ae14f623b3b93", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -24,7 +24,7 @@ use core::iter::{IntoIterator, FromIterator};\n use core::mem;\n use core::ops::{self, Deref, Add, Index};\n use core::ptr;\n-use core::raw::Slice as RawSlice;\n+use core::slice;\n use unicode::str as unicode_str;\n use unicode::str::Utf16Item;\n \n@@ -468,11 +468,11 @@ impl String {\n         unsafe {\n             // Attempt to not use an intermediate buffer by just pushing bytes\n             // directly onto this string.\n-            let slice = RawSlice {\n-                data: self.vec.as_ptr().offset(cur_len as isize),\n-                len: 4,\n-            };\n-            let used = ch.encode_utf8(mem::transmute(slice)).unwrap_or(0);\n+            let slice = slice::from_raw_parts_mut (\n+                self.vec.as_mut_ptr().offset(cur_len as isize),\n+                4\n+            );\n+            let used = ch.encode_utf8(slice).unwrap_or(0);\n             self.vec.set_len(cur_len + used);\n         }\n     }"}, {"sha": "8a2c58e0b5d27b131b8c5a9abe63984cf9e53621", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -64,7 +64,6 @@ use core::ops::{Index, IndexMut, Deref, Add};\n use core::ops;\n use core::ptr;\n use core::ptr::Unique;\n-use core::raw::Slice as RawSlice;\n use core::slice;\n use core::usize;\n \n@@ -435,10 +434,7 @@ impl<T> Vec<T> {\n         unsafe {\n             let ptr = *self.ptr;\n             assume(!ptr.is_null());\n-            mem::transmute(RawSlice {\n-                data: ptr,\n-                len: self.len,\n-            })\n+            slice::from_raw_parts_mut(ptr, self.len)\n         }\n     }\n \n@@ -1560,10 +1556,7 @@ impl<T> AsSlice<T> for Vec<T> {\n         unsafe {\n             let p = *self.ptr;\n             assume(p != 0 as *mut T);\n-            mem::transmute(RawSlice {\n-                data: p,\n-                len: self.len\n-            })\n+            slice::from_raw_parts(p, self.len)\n         }\n     }\n }"}, {"sha": "43c9edcaa2b28a27419e1897bd4f868fb5b3b271", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -29,7 +29,7 @@ use core::num::{Int, UnsignedInt};\n use core::num::wrapping::WrappingOps;\n use core::ops::{Index, IndexMut};\n use core::ptr::{self, Unique};\n-use core::raw::Slice as RawSlice;\n+use core::slice;\n \n use core::hash::{Hash, Hasher};\n use core::cmp;\n@@ -91,13 +91,13 @@ impl<T> VecDeque<T> {\n     /// Turn ptr into a slice\n     #[inline]\n     unsafe fn buffer_as_slice(&self) -> &[T] {\n-        mem::transmute(RawSlice { data: *self.ptr as *const T, len: self.cap })\n+        slice::from_raw_parts(*self.ptr, self.cap)\n     }\n \n     /// Turn ptr into a mut slice\n     #[inline]\n     unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {\n-        mem::transmute(RawSlice { data: *self.ptr as *const T, len: self.cap })\n+        slice::from_raw_parts_mut(*self.ptr, self.cap)\n     }\n \n     /// Moves an element out of the buffer"}, {"sha": "62cffa9b86e9445937bcb1791783b5ce538e3030", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -520,10 +520,10 @@ impl<T> ops::Index<ops::Range<usize>> for [T] {\n         assert!(index.start <= index.end);\n         assert!(index.end <= self.len());\n         unsafe {\n-            transmute(RawSlice {\n-                    data: self.as_ptr().offset(index.start as isize),\n-                    len: index.end - index.start\n-                })\n+            from_raw_parts (\n+                self.as_ptr().offset(index.start as isize),\n+                index.end - index.start\n+            )\n         }\n     }\n }\n@@ -559,10 +559,10 @@ impl<T> ops::IndexMut<ops::Range<usize>> for [T] {\n         assert!(index.start <= index.end);\n         assert!(index.end <= self.len());\n         unsafe {\n-            transmute(RawSlice {\n-                    data: self.as_ptr().offset(index.start as isize),\n-                    len: index.end - index.start\n-                })\n+            from_raw_parts_mut(\n+                self.as_mut_ptr().offset(index.start as isize),\n+                index.end - index.start\n+            )\n         }\n     }\n }\n@@ -731,7 +731,21 @@ macro_rules! make_slice {\n             diff / mem::size_of::<$t>()\n         };\n         unsafe {\n-            transmute::<_, $result>(RawSlice { data: $start, len: len })\n+            from_raw_parts($start, len)\n+        }\n+    }}\n+}\n+\n+macro_rules! make_mut_slice {\n+    ($t: ty => $result: ty: $start: expr, $end: expr) => {{\n+        let diff = $end as usize - $start as usize;\n+        let len = if mem::size_of::<T>() == 0 {\n+            diff\n+        } else {\n+            diff / mem::size_of::<$t>()\n+        };\n+        unsafe {\n+            from_raw_parts_mut($start, len)\n         }\n     }}\n }\n@@ -898,7 +912,7 @@ impl<'a, T> ops::IndexMut<ops::RangeFrom<usize>> for IterMut<'a, T> {\n impl<'a, T> ops::IndexMut<RangeFull> for IterMut<'a, T> {\n     #[inline]\n     fn index_mut(&mut self, _index: &RangeFull) -> &mut [T] {\n-        make_slice!(T => &mut [T]: self.ptr, self.end)\n+        make_mut_slice!(T => &mut [T]: self.ptr, self.end)\n     }\n }\n \n@@ -912,7 +926,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// restricted lifetimes that do not consume the iterator.\n     #[unstable(feature = \"core\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n-        make_slice!(T => &'a mut [T]: self.ptr, self.end)\n+        make_mut_slice!(T => &'a mut [T]: self.ptr, self.end)\n     }\n }\n \n@@ -1404,16 +1418,15 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n #[unstable(feature = \"core\")]\n pub fn ref_slice<'a, A>(s: &'a A) -> &'a [A] {\n     unsafe {\n-        transmute(RawSlice { data: s, len: 1 })\n+        from_raw_parts(s, 1)\n     }\n }\n \n /// Converts a pointer to A into a slice of length 1 (without copying).\n #[unstable(feature = \"core\")]\n pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n     unsafe {\n-        let ptr: *const A = transmute(s);\n-        transmute(RawSlice { data: ptr, len: 1 })\n+        from_raw_parts_mut(s, 1)\n     }\n }\n "}, {"sha": "0728d5b46e2c37f3d538db738ca1b70772b6f9cc", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -14,8 +14,7 @@ use libc;\n use ArchiveRef;\n \n use std::ffi::CString;\n-use std::mem;\n-use std::raw;\n+use std::slice;\n use std::path::Path;\n \n pub struct ArchiveRO {\n@@ -62,10 +61,7 @@ impl ArchiveRO {\n             if ptr.is_null() {\n                 None\n             } else {\n-                Some(mem::transmute(raw::Slice {\n-                    data: ptr,\n-                    len: size as uint,\n-                }))\n+                Some(slice::from_raw_parts(ptr as *const u8, size as uint))\n             }\n         }\n     }"}, {"sha": "506bf4a058fc6f155e10b3b8a7a5ec4709c97d3f", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -26,7 +26,6 @@\n \n #![feature(box_syntax)]\n #![feature(collections)]\n-#![feature(core)]\n #![feature(int_uint)]\n #![feature(libc)]\n #![feature(link_args)]\n@@ -58,7 +57,7 @@ pub use self::Linkage::*;\n \n use std::ffi::CString;\n use std::cell::RefCell;\n-use std::{raw, mem};\n+use std::{slice, mem};\n use libc::{c_uint, c_ushort, uint64_t, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n use debuginfo::{DIBuilderRef, DIDescriptor,\n@@ -2226,10 +2225,7 @@ type RustStringRepr = *mut RefCell<Vec<u8>>;\n pub unsafe extern \"C\" fn rust_llvm_string_write_impl(sr: RustStringRef,\n                                                      ptr: *const c_char,\n                                                      size: size_t) {\n-    let slice: &[u8] = mem::transmute(raw::Slice {\n-        data: ptr as *const u8,\n-        len: size as uint,\n-    });\n+    let slice = slice::from_raw_parts(ptr as *const u8, size as uint);\n \n     let sr: RustStringRepr = mem::transmute(sr);\n     (*sr).borrow_mut().push_all(slice);"}, {"sha": "332b941bcc0fbfa16c4d7e06c48834345cfdf153", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -931,15 +931,15 @@ impl<'a> Reader for &'a mut (Reader+'a) {\n // Private function here because we aren't sure if we want to expose this as\n // API yet. If so, it should be a method on Vec.\n unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -> &'a mut [T] {\n-    use raw::Slice;\n+    use slice;\n     use ptr::PtrExt;\n \n     assert!(start <= end);\n     assert!(end <= v.capacity());\n-    transmute(Slice {\n-        data: v.as_ptr().offset(start as int),\n-        len: end - start\n-    })\n+    slice::from_raw_parts_mut(\n+        v.as_mut_ptr().offset(start as int),\n+        end - start\n+    )\n }\n \n /// A `RefReader` is a struct implementing `Reader` which contains a reference"}, {"sha": "4c0b26f8649d85afa5be4857fc5d36dc19c55023", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -29,7 +29,6 @@ use core::prelude::*;\n \n use core::char::{encode_utf8_raw, encode_utf16_raw};\n use core::str::{char_range_at_raw, next_code_point};\n-use core::raw::Slice as RawSlice;\n \n use ascii::*;\n use borrow::Cow;\n@@ -214,10 +213,10 @@ impl Wtf8Buf {\n         unsafe {\n             // Attempt to not use an intermediate buffer by just pushing bytes\n             // directly onto this string.\n-            let slice = RawSlice {\n-                data: self.bytes.as_ptr().offset(cur_len as int),\n-                len: 4,\n-            };\n+            let slice = slice::from_raw_parts_mut(\n+                self.bytes.as_mut_ptr().offset(cur_len as int),\n+                4\n+            );\n             let used = encode_utf8_raw(code_point.value, mem::transmute(slice))\n                 .unwrap_or(0);\n             self.bytes.set_len(cur_len + used);\n@@ -725,10 +724,11 @@ pub fn is_code_point_boundary(slice: &Wtf8, index: uint) -> bool {\n /// Copied from core::str::raw::slice_unchecked\n #[inline]\n pub unsafe fn slice_unchecked(s: &Wtf8, begin: uint, end: uint) -> &Wtf8 {\n-    mem::transmute(RawSlice {\n-        data: s.bytes.as_ptr().offset(begin as int),\n-        len: end - begin,\n-    })\n+    // memory layout of an &[u8] and &Wtf8 are the same\n+    mem::transmute(slice::from_raw_parts(\n+        s.bytes.as_ptr().offset(begin as int),\n+        end - begin\n+    ))\n }\n \n /// Copied from core::str::raw::slice_error_fail"}, {"sha": "f1d41a0f422167fa26da0e90a61353b96ee90f9a", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -12,7 +12,6 @@\n // type is `&mut [u8]`, passes in a pointer to the lvalue and not a\n // temporary. Issue #19147.\n \n-use std::raw;\n use std::mem;\n use std::slice;\n use std::old_io::IoResult;\n@@ -27,10 +26,10 @@ impl<'a> MyWriter for &'a mut [u8] {\n \n         let write_len = buf.len();\n         unsafe {\n-            *self = mem::transmute(raw::Slice {\n-                data: self.as_ptr().offset(write_len as int),\n-                len: self.len() - write_len,\n-            });\n+            *self = slice::from_raw_parts_mut(\n+                self.as_mut_ptr().offset(write_len as isize),\n+                self.len() - write_len\n+            );\n         }\n \n         Ok(())"}, {"sha": "f9185cd2642eeb3e344d83afc147fdc6fe8ee02e", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/766a4e1acc06061a30cf456840a9915526fb681e/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766a4e1acc06061a30cf456840a9915526fb681e/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=766a4e1acc06061a30cf456840a9915526fb681e", "patch": "@@ -15,31 +15,32 @@\n \n use std::mem;\n use std::raw;\n+use std::slice;\n \n struct Foo<T> {\n     f: [T],\n }\n \n struct Bar {\n-    f1: uint,\n-    f2: [uint],\n+    f1: usize,\n+    f2: [usize],\n }\n \n struct Baz {\n-    f1: uint,\n+    f1: usize,\n     f2: str,\n }\n \n trait Tr {\n-    fn foo(&self) -> uint;\n+    fn foo(&self) -> usize;\n }\n \n struct St {\n-    f: uint\n+    f: usize\n }\n \n impl Tr for St {\n-    fn foo(&self) -> uint {\n+    fn foo(&self) -> usize {\n         self.f\n     }\n }\n@@ -67,18 +68,18 @@ pub fn main() {\n         }\n \n         let data: Box<Foo_<i32>> = box Foo_{f: [1, 2, 3] };\n-        let x: &Foo<i32> = mem::transmute(raw::Slice { len: 3, data: &*data });\n+        let x: &Foo<i32> = mem::transmute(slice::from_raw_parts(&*data, 3));\n         assert!(x.f.len() == 3);\n         assert!(x.f[0] == 1);\n \n         struct Baz_ {\n-            f1: uint,\n+            f1: usize,\n             f2: [u8; 5],\n         }\n \n         let data: Box<_> = box Baz_ {\n             f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n-        let x: &Baz = mem::transmute( raw::Slice { len: 5, data: &*data } );\n+        let x: &Baz = mem::transmute(slice::from_raw_parts(&*data, 5));\n         assert!(x.f1 == 42);\n         let chs: Vec<char> = x.f2.chars().collect();\n         assert!(chs.len() == 5);"}]}