{"sha": "8a22454731cb81f3800fc0e8a5e1e7831e3c74e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjI0NTQ3MzFjYjgxZjM4MDBmYzBlOGE1ZTFlNzgzMWUzYzc0ZTI=", "commit": {"author": {"name": "Alexander Korolkov", "email": "alexander.korolkov@gmail.com", "date": "2015-01-23T15:51:12Z"}, "committer": {"name": "Alexander Korolkov", "email": "alexander.korolkov@gmail.com", "date": "2015-01-23T15:51:12Z"}, "message": "Rephrase error message on invalid fragment specifiers in macros.\n\nAlso, print help on valid fragment specifiers.", "tree": {"sha": "c4995f9703004182e19729a12e364be7d1bf0761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4995f9703004182e19729a12e364be7d1bf0761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2", "html_url": "https://github.com/rust-lang/rust/commit/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2/comments", "author": {"login": "alkor", "id": 187008, "node_id": "MDQ6VXNlcjE4NzAwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/187008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alkor", "html_url": "https://github.com/alkor", "followers_url": "https://api.github.com/users/alkor/followers", "following_url": "https://api.github.com/users/alkor/following{/other_user}", "gists_url": "https://api.github.com/users/alkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/alkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alkor/subscriptions", "organizations_url": "https://api.github.com/users/alkor/orgs", "repos_url": "https://api.github.com/users/alkor/repos", "events_url": "https://api.github.com/users/alkor/events{/privacy}", "received_events_url": "https://api.github.com/users/alkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alkor", "id": 187008, "node_id": "MDQ6VXNlcjE4NzAwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/187008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alkor", "html_url": "https://github.com/alkor", "followers_url": "https://api.github.com/users/alkor/followers", "following_url": "https://api.github.com/users/alkor/following{/other_user}", "gists_url": "https://api.github.com/users/alkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/alkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alkor/subscriptions", "organizations_url": "https://api.github.com/users/alkor/orgs", "repos_url": "https://api.github.com/users/alkor/repos", "events_url": "https://api.github.com/users/alkor/events{/privacy}", "received_events_url": "https://api.github.com/users/alkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedcbb9d82ccd7ead4b075ff55a99e363be94174", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedcbb9d82ccd7ead4b075ff55a99e363be94174", "html_url": "https://github.com/rust-lang/rust/commit/aedcbb9d82ccd7ead4b075ff55a99e363be94174"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "9d5be3fff61a60ee81ca8f5efe7617e5d0b15943", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=8a22454731cb81f3800fc0e8a5e1e7831e3c74e2", "patch": "@@ -83,7 +83,7 @@ use self::TokenTreeOrTokenTreeVec::*;\n use ast;\n use ast::{TokenTree, Ident};\n use ast::{TtDelimited, TtSequence, TtToken};\n-use codemap::{BytePos, mk_sp};\n+use codemap::{BytePos, mk_sp, Span};\n use codemap;\n use parse::lexer::*; //resolve bug?\n use parse::ParseSess;\n@@ -483,11 +483,11 @@ pub fn parse(sess: &ParseSess,\n \n                 let mut ei = bb_eis.pop().unwrap();\n                 match ei.top_elts.get_tt(ei.idx) {\n-                  TtToken(_, MatchNt(_, name, _, _)) => {\n+                  TtToken(span, MatchNt(_, name, _, _)) => {\n                     let name_string = token::get_ident(name);\n                     let match_cur = ei.match_cur;\n                     (&mut ei.matches[match_cur]).push(Rc::new(MatchedNonterminal(\n-                        parse_nt(&mut rust_parser, name_string.get()))));\n+                        parse_nt(&mut rust_parser, span, name_string.get()))));\n                     ei.idx += 1us;\n                     ei.match_cur += 1;\n                   }\n@@ -505,7 +505,7 @@ pub fn parse(sess: &ParseSess,\n     }\n }\n \n-pub fn parse_nt(p: &mut Parser, name: &str) -> Nonterminal {\n+pub fn parse_nt(p: &mut Parser, sp: Span, name: &str) -> Nonterminal {\n     match name {\n         \"tt\" => {\n             p.quote_depth += 1us; //but in theory, non-quoted tts might be useful\n@@ -541,7 +541,11 @@ pub fn parse_nt(p: &mut Parser, name: &str) -> Nonterminal {\n       }\n       \"meta\" => token::NtMeta(p.parse_meta_item()),\n       _ => {\n-          p.fatal(&format!(\"unsupported builtin nonterminal parser: {}\", name)[])\n+          p.span_fatal_help(sp,\n+                            &format!(\"invalid fragment specifier `{}`\", name)[],\n+                            \"valid fragment specifiers are `ident`, `block`, \\\n+                             `stmt`, `expr`, `pat`, `ty`, `path`, `meta`, `tt` \\\n+                             and `item`\")\n       }\n     }\n }"}, {"sha": "666281ac6b61060bb4c31f1a37fb38361f969982", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8a22454731cb81f3800fc0e8a5e1e7831e3c74e2", "patch": "@@ -457,7 +457,7 @@ fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n                 // harmless\n                 Ok(true)\n             },\n-            _ => Err(format!(\"unrecognized builtin nonterminal `{}`\", frag))\n+            _ => Err(format!(\"invalid fragment specifier `{}`\", frag))\n         }\n     }\n }"}, {"sha": "fefd432e22982c66c47b60f5d8ffdf56311c053b", "filename": "src/test/compile-fail/issue-21356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a22454731cb81f3800fc0e8a5e1e7831e3c74e2/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs?ref=8a22454731cb81f3800fc0e8a5e1e7831e3c74e2", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n macro_rules! test { ($wrong:t_ty ..) => () }\n-                  //~^ ERROR: unrecognized builtin nonterminal `t_ty`\n+                  //~^ ERROR: invalid fragment specifier `t_ty`\n \n fn main() {}"}]}