{"sha": "31918864261c9fde79df1f84c5f22ab40b115ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTE4ODY0MjYxYzlmZGU3OWRmMWY4NGM1ZjIyYWI0MGIxMTVjYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-07T13:02:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-07T13:02:52Z"}, "message": "Auto merge of #38551 - aidanhs:aphs-vec-in-place, r=brson\n\nImplement placement-in protocol for `Vec`\n\nFollow-up of #32366 per comment at https://github.com/rust-lang/rust/issues/30172#issuecomment-268099009, updating to latest rust, leaving @apasel422 as author and putting myself as committer.\n\nI've removed the implementation of `push` in terms of place to make this PR more conservative.", "tree": {"sha": "4467f64120e66a03cdf586ec064dbd8c98bed445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4467f64120e66a03cdf586ec064dbd8c98bed445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31918864261c9fde79df1f84c5f22ab40b115ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31918864261c9fde79df1f84c5f22ab40b115ca9", "html_url": "https://github.com/rust-lang/rust/commit/31918864261c9fde79df1f84c5f22ab40b115ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31918864261c9fde79df1f84c5f22ab40b115ca9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1dfe3d678de05f0e5b5f1bfa9c06025a7a0fb37", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1dfe3d678de05f0e5b5f1bfa9c06025a7a0fb37", "html_url": "https://github.com/rust-lang/rust/commit/e1dfe3d678de05f0e5b5f1bfa9c06025a7a0fb37"}, {"sha": "75fe66e349d8ec4393562a775ce457c61bf9e11b", "url": "https://api.github.com/repos/rust-lang/rust/commits/75fe66e349d8ec4393562a775ce457c61bf9e11b", "html_url": "https://github.com/rust-lang/rust/commit/75fe66e349d8ec4393562a775ce457c61bf9e11b"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "f9746f5694a4911b08e31c18dc039fac2d0f757c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=31918864261c9fde79df1f84c5f22ab40b115ca9", "patch": "@@ -45,6 +45,7 @@\n #![feature(nonzero)]\n #![feature(pattern)]\n #![feature(placement_in)]\n+#![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n #![feature(shared)]\n #![feature(slice_get_slice)]"}, {"sha": "c399283babf261cd94edc84df496111b72ce643d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=31918864261c9fde79df1f84c5f22ab40b115ca9", "patch": "@@ -77,7 +77,7 @@ use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::mem;\n-use core::ops::{Index, IndexMut};\n+use core::ops::{InPlace, Index, IndexMut, Place, Placer};\n use core::ops;\n use core::ptr;\n use core::ptr::Shared;\n@@ -1246,6 +1246,29 @@ impl<T: Clone> Vec<T> {\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n         self.spec_extend(other.iter())\n     }\n+\n+    /// Returns a place for insertion at the back of the `Vec`.\n+    ///\n+    /// Using this method with placement syntax is equivalent to [`push`](#method.push),\n+    /// but may be more efficient.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(collection_placement)]\n+    /// #![feature(placement_in_syntax)]\n+    ///\n+    /// let mut vec = vec![1, 2];\n+    /// vec.place_back() <- 3;\n+    /// vec.place_back() <- 4;\n+    /// assert_eq!(&vec, &[1, 2, 3, 4]);\n+    /// ```\n+    #[unstable(feature = \"collection_placement\",\n+               reason = \"placement protocol is subject to change\",\n+               issue = \"30172\")]\n+    pub fn place_back(&mut self) -> PlaceBack<T> {\n+        PlaceBack { vec: self }\n+    }\n }\n \n // Set the length of the vec when the `SetLenOnDrop` value goes out of scope.\n@@ -2119,3 +2142,52 @@ impl<'a, T> ExactSizeIterator for Drain<'a, T> {\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Drain<'a, T> {}\n+\n+/// A place for insertion at the back of a `Vec`.\n+///\n+/// See [`Vec::place_back`](struct.Vec.html#method.place_back) for details.\n+#[must_use = \"places do nothing unless written to with `<-` syntax\"]\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n+pub struct PlaceBack<'a, T: 'a> {\n+    vec: &'a mut Vec<T>,\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> Placer<T> for PlaceBack<'a, T> {\n+    type Place = PlaceBack<'a, T>;\n+\n+    fn make_place(self) -> Self {\n+        // This will panic or abort if we would allocate > isize::MAX bytes\n+        // or if the length increment would overflow for zero-sized types.\n+        if self.vec.len == self.vec.buf.cap() {\n+            self.vec.buf.double();\n+        }\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> Place<T> for PlaceBack<'a, T> {\n+    fn pointer(&mut self) -> *mut T {\n+        unsafe { self.vec.as_mut_ptr().offset(self.vec.len as isize) }\n+    }\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> InPlace<T> for PlaceBack<'a, T> {\n+    type Owner = &'a mut T;\n+\n+    unsafe fn finalize(mut self) -> &'a mut T {\n+        let ptr = self.pointer();\n+        self.vec.len += 1;\n+        &mut *ptr\n+    }\n+}"}, {"sha": "05671e41ed33e2bd533f1bd8b2ea5a425fddb710", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=31918864261c9fde79df1f84c5f22ab40b115ca9", "patch": "@@ -13,13 +13,15 @@\n #![feature(binary_heap_extras)]\n #![feature(box_syntax)]\n #![feature(btree_range)]\n+#![feature(collection_placement)]\n #![feature(collections)]\n #![feature(collections_bound)]\n #![feature(const_fn)]\n #![feature(dedup_by)]\n #![feature(enumset)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]\n+#![feature(placement_in_syntax)]\n #![feature(rand)]\n #![feature(repeat_str)]\n #![feature(step_by)]"}, {"sha": "6d0f1eaffaa7bb6c432690f12ae437d7a9896102", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31918864261c9fde79df1f84c5f22ab40b115ca9/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=31918864261c9fde79df1f84c5f22ab40b115ca9", "patch": "@@ -12,6 +12,7 @@ use std::ascii::AsciiExt;\n use std::borrow::Cow;\n use std::iter::{FromIterator, repeat};\n use std::mem::size_of;\n+use std::panic;\n use std::vec::{Drain, IntoIter};\n \n use test::Bencher;\n@@ -615,6 +616,24 @@ fn assert_covariance() {\n     }\n }\n \n+#[test]\n+fn test_placement() {\n+    let mut vec = vec![1];\n+    assert_eq!(vec.place_back() <- 2, &2);\n+    assert_eq!(vec.len(), 2);\n+    assert_eq!(vec.place_back() <- 3, &3);\n+    assert_eq!(vec.len(), 3);\n+    assert_eq!(&vec, &[1, 2, 3]);\n+}\n+\n+#[test]\n+fn test_placement_panic() {\n+    let mut vec = vec![1, 2, 3];\n+    fn mkpanic() -> usize { panic!() }\n+    let _ = panic::catch_unwind(panic::AssertUnwindSafe(|| { vec.place_back() <- mkpanic(); }));\n+    assert_eq!(vec.len(), 3);\n+}\n+\n #[bench]\n fn bench_new(b: &mut Bencher) {\n     b.iter(|| {"}]}