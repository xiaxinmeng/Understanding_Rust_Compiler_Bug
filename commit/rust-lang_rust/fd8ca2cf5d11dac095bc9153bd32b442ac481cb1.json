{"sha": "fd8ca2cf5d11dac095bc9153bd32b442ac481cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGNhMmNmNWQxMWRhYzA5NWJjOTE1M2JkMzJiNDQyYWM0ODFjYjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-22T20:53:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-22T21:34:36Z"}, "message": "Translate istr literals. Issue #855", "tree": {"sha": "aa0eeaa79bafc1a7382822816dfe65d4bf7d2846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa0eeaa79bafc1a7382822816dfe65d4bf7d2846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1", "html_url": "https://github.com/rust-lang/rust/commit/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a93a48ff50c62d4d830f63a913256fefacb742f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a93a48ff50c62d4d830f63a913256fefacb742f", "html_url": "https://github.com/rust-lang/rust/commit/0a93a48ff50c62d4d830f63a913256fefacb742f"}], "stats": {"total": 96, "additions": 41, "deletions": 55}, "files": [{"sha": "2239718cc245b061db1595c8516737664fc0699f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 54, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fd8ca2cf5d11dac095bc9153bd32b442ac481cb1", "patch": "@@ -2444,61 +2444,30 @@ fn move_val_if_temp(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n }\n \n fn trans_lit_istr(cx: &@block_ctxt, s: str) -> result {\n-    let llstackpart = alloca(cx, T_ivec(T_i8()));\n-    let len = str::byte_len(s);\n-\n-    let bcx;\n-    if len < 3u { // 3 because of the \\0\n-        cx.build.Store(C_uint(len + 1u),\n-                       cx.build.InBoundsGEP(llstackpart,\n-                                            [C_int(0), C_int(0)]));\n-        cx.build.Store(C_int(4),\n-                       cx.build.InBoundsGEP(llstackpart,\n-                                            [C_int(0), C_int(1)]));\n-        let i = 0u;\n-        while i < len {\n-            cx.build.Store(C_u8(s[i] as uint),\n-                           cx.build.InBoundsGEP(llstackpart,\n-                                                [C_int(0), C_int(2),\n-                                                 C_uint(i)]));\n-            i += 1u;\n-        }\n-        cx.build.Store(C_u8(0u),\n-                       cx.build.InBoundsGEP(llstackpart,\n-                                            [C_int(0), C_int(2),\n-                                             C_uint(len)]));\n+    let vec_ty = ty::mk_vec(bcx_tcx(cx),\n+                            {ty: ty::mk_mach(bcx_tcx(cx), ast::ty_u8),\n+                             mut: ast::imm});\n+    let strlen = str::byte_len(s);\n+    let veclen = strlen + 1u; // +1 for \\0\n+    let alloc_res = trans_ivec::alloc_with_heap(cx, vec_ty, veclen);\n+\n+    let bcx = alloc_res.bcx;\n+    let llvecptr = alloc_res.llptr;\n+    let llfirsteltptr = alloc_res.llfirsteltptr;\n+\n+    // FIXME: Do something smarter here to load the string\n+    let i = 0u;\n+    while i < strlen {\n+        bcx.build.Store(C_u8(s[i] as uint),\n+                        bcx.build.InBoundsGEP(llfirsteltptr,\n+                                              [C_uint(i)]));\n+        i += 1u;\n+    }\n+    bcx.build.Store(C_u8(0u),\n+                    bcx.build.InBoundsGEP(llfirsteltptr,\n+                                          [C_uint(strlen)]));\n \n-        bcx = cx;\n-    } else {\n-        let r =\n-            trans_shared_malloc(cx, T_ptr(T_ivec_heap_part(T_i8())),\n-                                llsize_of(T_struct([T_int(),\n-                                                    T_array(T_i8(),\n-                                                            len + 1u)])));\n-        bcx = r.bcx;\n-        let llheappart = r.val;\n-\n-        bcx.build.Store(C_uint(len + 1u),\n-                        bcx.build.InBoundsGEP(llheappart,\n-                                              [C_int(0), C_int(0)]));\n-        bcx.build.Store(llvm::LLVMConstString(str::buf(s), len, False),\n-                        bcx.build.InBoundsGEP(llheappart,\n-                                              [C_int(0), C_int(1)]));\n-\n-        let llspilledstackpart =\n-            bcx.build.PointerCast(llstackpart, T_ptr(T_ivec_heap(T_i8())));\n-        bcx.build.Store(C_int(0),\n-                        bcx.build.InBoundsGEP(llspilledstackpart,\n-                                              [C_int(0), C_int(0)]));\n-        bcx.build.Store(C_uint(len + 1u),\n-                        bcx.build.InBoundsGEP(llspilledstackpart,\n-                                              [C_int(0), C_int(1)]));\n-        bcx.build.Store(llheappart,\n-                        bcx.build.InBoundsGEP(llspilledstackpart,\n-                                              [C_int(0), C_int(2)]));\n-    }\n-\n-    ret rslt(bcx, llstackpart);\n+    ret rslt(bcx, llvecptr);\n }\n \n fn trans_crate_lit(cx: &@crate_ctxt, lit: &ast::lit) -> ValueRef {"}, {"sha": "bc548c8c4b549764e57a3f20c66ab3e4897bb6b2", "filename": "src/comp/middle/trans_ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs?ref=fd8ca2cf5d11dac095bc9153bd32b442ac481cb1", "patch": "@@ -12,7 +12,7 @@ import trans::{call_memmove, trans_shared_malloc, llsize_of,\n import trans_common::*;\n \n export trans_ivec, get_len_and_data, duplicate_heap_part, trans_add,\n-trans_append;\n+trans_append, alloc_with_heap;\n \n fn alloc_with_heap(bcx: @block_ctxt, typ: &ty::t, vecsz: uint) ->\n     {bcx: @block_ctxt,"}, {"sha": "624b7edb1027d611b2dad228569093da4185fac7", "filename": "src/test/run-pass/istr.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8ca2cf5d11dac095bc9153bd32b442ac481cb1/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=fd8ca2cf5d11dac095bc9153bd32b442ac481cb1", "patch": "@@ -0,0 +1,17 @@\n+fn test_stack_assign() {\n+    let s: istr = ~\"a\";\n+    log s;\n+    let t: istr = ~\"a\";\n+    assert s == t;\n+    let u: istr = ~\"b\";\n+    assert s != u;\n+}\n+\n+fn test_heap_lit() {\n+    ~\"a big string\";\n+}\n+\n+fn main() {\n+    test_stack_assign();\n+    test_heap_lit();\n+}\n\\ No newline at end of file"}]}