{"sha": "1177d0669ac213f12aee6c998b47ca1e8904ccf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzdkMDY2OWFjMjEzZjEyYWVlNmM5OThiNDdjYTFlODkwNGNjZjA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-02-08T14:47:29Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-02-08T14:47:29Z"}, "message": "Clean up E0277 and E0282 explanations", "tree": {"sha": "2bb019c08bb7e48e6bb6a7cd77f26f17c1e8cba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bb019c08bb7e48e6bb6a7cd77f26f17c1e8cba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1177d0669ac213f12aee6c998b47ca1e8904ccf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1177d0669ac213f12aee6c998b47ca1e8904ccf0", "html_url": "https://github.com/rust-lang/rust/commit/1177d0669ac213f12aee6c998b47ca1e8904ccf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1177d0669ac213f12aee6c998b47ca1e8904ccf0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320ada6479b3e29c7d9a66bc56ac44c2d2b57566", "url": "https://api.github.com/repos/rust-lang/rust/commits/320ada6479b3e29c7d9a66bc56ac44c2d2b57566", "html_url": "https://github.com/rust-lang/rust/commit/320ada6479b3e29c7d9a66bc56ac44c2d2b57566"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "2e2cd5e01fb6a6cface9126163080c8748676708", "filename": "src/librustc_error_codes/error_codes/E0277.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1177d0669ac213f12aee6c998b47ca1e8904ccf0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0277.md", "raw_url": "https://github.com/rust-lang/rust/raw/1177d0669ac213f12aee6c998b47ca1e8904ccf0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0277.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0277.md?ref=1177d0669ac213f12aee6c998b47ca1e8904ccf0", "patch": "@@ -1,5 +1,7 @@\n You tried to use a type which doesn't implement some trait in a place which\n-expected that trait. Erroneous code example:\n+expected that trait.\n+\n+Erroneous code example:\n \n ```compile_fail,E0277\n // here we declare the Foo trait with a bar method"}, {"sha": "49d2205f92c2a52dbb255a165c3a9bc8f8894495", "filename": "src/librustc_error_codes/error_codes/E0282.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1177d0669ac213f12aee6c998b47ca1e8904ccf0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0282.md", "raw_url": "https://github.com/rust-lang/rust/raw/1177d0669ac213f12aee6c998b47ca1e8904ccf0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0282.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0282.md?ref=1177d0669ac213f12aee6c998b47ca1e8904ccf0", "patch": "@@ -1,3 +1,11 @@\n+The compiler could not infer a type and asked for a type annotation.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0282\n+let x = \"hello\".chars().rev().collect();\n+```\n+\n This error indicates that type inference did not result in one unique possible\n type, and extra information is required. In most cases this can be provided\n by adding a type annotation. Sometimes you need to specify a generic type\n@@ -8,13 +16,9 @@ parameter with a `FromIterator` bound, which for a `char` iterator is\n implemented by `Vec` and `String` among others. Consider the following snippet\n that reverses the characters of a string:\n \n-```compile_fail,E0282\n-let x = \"hello\".chars().rev().collect();\n-```\n-\n-In this case, the compiler cannot infer what the type of `x` should be:\n-`Vec<char>` and `String` are both suitable candidates. To specify which type to\n-use, you can use a type annotation on `x`:\n+In the first code example, the compiler cannot infer what the type of `x` should\n+be: `Vec<char>` and `String` are both suitable candidates. To specify which type\n+to use, you can use a type annotation on `x`:\n \n ```\n let x: Vec<char> = \"hello\".chars().rev().collect();"}]}