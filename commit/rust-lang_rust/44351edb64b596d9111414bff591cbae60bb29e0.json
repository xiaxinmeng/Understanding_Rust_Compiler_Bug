{"sha": "44351edb64b596d9111414bff591cbae60bb29e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MzUxZWRiNjRiNTk2ZDkxMTE0MTRiZmY1OTFjYmFlNjBiYjI5ZTA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-09-07T00:27:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-07T00:27:45Z"}, "message": "Rollup merge of #44097 - Xaeroxe:clamp, r=burntsushi\n\nAdd clamp functions\n\nImplementation of clamp feature:\n\nTracking issue: https://github.com/rust-lang/rust/issues/44095\nRFC: https://github.com/rust-lang/rfcs/pull/1961", "tree": {"sha": "f9d71d87cce148a5f23cfdbca73d0220e3a4827c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d71d87cce148a5f23cfdbca73d0220e3a4827c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44351edb64b596d9111414bff591cbae60bb29e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44351edb64b596d9111414bff591cbae60bb29e0", "html_url": "https://github.com/rust-lang/rust/commit/44351edb64b596d9111414bff591cbae60bb29e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44351edb64b596d9111414bff591cbae60bb29e0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3681220877771954fa923e50f227e632aabe8bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3681220877771954fa923e50f227e632aabe8bbc", "html_url": "https://github.com/rust-lang/rust/commit/3681220877771954fa923e50f227e632aabe8bbc"}, {"sha": "b762283e57ff71f6763effb9cfc7fc0c7967b6b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b762283e57ff71f6763effb9cfc7fc0c7967b6b0", "html_url": "https://github.com/rust-lang/rust/commit/b762283e57ff71f6763effb9cfc7fc0c7967b6b0"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "dc1f2981a50ad7406754e74f6adf0573140e0a2e", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=44351edb64b596d9111414bff591cbae60bb29e0", "patch": "@@ -481,6 +481,30 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     where Self: Sized {\n         if self <= other { self } else { other }\n     }\n+\n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this will return self.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(clamp)]\n+    ///\n+    /// assert!((-3).clamp(-2, 1) == -2);\n+    /// assert!(0.clamp(-2, 1) == 0);\n+    /// assert!(2.clamp(-2, 1) == 1);\n+    /// ```\n+    ///\n+    /// # Panics\n+    /// Panics if min > max.\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    fn clamp(self, min: Self, max: Self) -> Self\n+    where Self: Sized {\n+        assert!(min <= max);\n+        if self < min { min }\n+        else if self > max { max }\n+        else { self }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "69ca77f54b44aa70b33e2bd33952f91fabb0826d", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=44351edb64b596d9111414bff591cbae60bb29e0", "patch": "@@ -1080,6 +1080,32 @@ impl f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this returns self.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(clamp)]\n+    /// use std::f32::NAN;\n+    /// assert!((-3.0f32).clamp(-2.0f32, 1.0f32) == -2.0f32);\n+    /// assert!((0.0f32).clamp(-2.0f32, 1.0f32) == 0.0f32);\n+    /// assert!((2.0f32).clamp(-2.0f32, 1.0f32) == 1.0f32);\n+    /// assert!((NAN).clamp(-2.0f32, 1.0f32).is_nan());\n+    /// ```\n+    ///\n+    /// # Panics\n+    /// Panics if min > max, min is NaN, or max is NaN.\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    #[inline]\n+    pub fn clamp(self, min: f32, max: f32) -> f32 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min { x = min; }\n+        if x > max { x = max; }\n+        x\n+    }\n+\n     /// Raw transmutation to `u32`.\n     ///\n     /// Converts the `f32` into its raw memory representation,\n@@ -1751,4 +1777,22 @@ mod tests {\n         assert_ne!(nan_masked & QNAN_MASK, 0);\n         assert!(nan_masked_fl.is_nan());\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f32.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f32.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f32.clamp(3.0, NAN);\n+    }\n }"}, {"sha": "6ec633bfaaac1be5dcfa5f7110ddb0671db6c3a3", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=44351edb64b596d9111414bff591cbae60bb29e0", "patch": "@@ -970,6 +970,32 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this returns self.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(clamp)]\n+    /// use std::f64::NAN;\n+    /// assert!((-3.0f64).clamp(-2.0f64, 1.0f64) == -2.0f64);\n+    /// assert!((0.0f64).clamp(-2.0f64, 1.0f64) == 0.0f64);\n+    /// assert!((2.0f64).clamp(-2.0f64, 1.0f64) == 1.0f64);\n+    /// assert!((NAN).clamp(-2.0f64, 1.0f64).is_nan());\n+    /// ```\n+    ///\n+    /// # Panics\n+    /// Panics if min > max, min is NaN, or max is NaN.\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    #[inline]\n+    pub fn clamp(self, min: f64, max: f64) -> f64 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min { x = min; }\n+        if x > max { x = max; }\n+        x\n+    }\n+\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n     // of expected NaN).\n@@ -1642,4 +1668,22 @@ mod tests {\n         assert_approx_eq!(f64::from_bits(0x4094e40000000000), 1337.0);\n         assert_approx_eq!(f64::from_bits(0xc02c800000000000), -14.25);\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f64.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f64.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f64.clamp(3.0, NAN);\n+    }\n }"}, {"sha": "433499a90a4054f574cb4ae8cfde1063887c0e74", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44351edb64b596d9111414bff591cbae60bb29e0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=44351edb64b596d9111414bff591cbae60bb29e0", "patch": "@@ -249,6 +249,7 @@\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n+#![feature(clamp)]\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]"}]}