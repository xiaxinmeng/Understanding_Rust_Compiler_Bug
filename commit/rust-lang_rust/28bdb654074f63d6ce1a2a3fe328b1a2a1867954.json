{"sha": "28bdb654074f63d6ce1a2a3fe328b1a2a1867954", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YmRiNjU0MDc0ZjYzZDZjZTFhMmEzZmUzMjhiMWEyYTE4Njc5NTQ=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-20T21:42:24Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-22T11:10:54Z"}, "message": "ra_mbe: added test for malformed token in macro invokation\n\nThere was a panic where lexer returned None on malformed tokens.\nBut now we just ignore tokenization errors in mbe.", "tree": {"sha": "9983c53ae04fa6a82483339f2a383956c025021f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9983c53ae04fa6a82483339f2a383956c025021f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28bdb654074f63d6ce1a2a3fe328b1a2a1867954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28bdb654074f63d6ce1a2a3fe328b1a2a1867954", "html_url": "https://github.com/rust-lang/rust/commit/28bdb654074f63d6ce1a2a3fe328b1a2a1867954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28bdb654074f63d6ce1a2a3fe328b1a2a1867954/comments", "author": null, "committer": null, "parents": [{"sha": "93a19bda173cdd9ef80aeb1b647eb4e9fd4f7955", "url": "https://api.github.com/repos/rust-lang/rust/commits/93a19bda173cdd9ef80aeb1b647eb4e9fd4f7955", "html_url": "https://github.com/rust-lang/rust/commit/93a19bda173cdd9ef80aeb1b647eb4e9fd4f7955"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "ef34dde5c2c2c361bcc92a7997827ca4ed32bc2f", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28bdb654074f63d6ce1a2a3fe328b1a2a1867954/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28bdb654074f63d6ce1a2a3fe328b1a2a1867954/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=28bdb654074f63d6ce1a2a3fe328b1a2a1867954", "patch": "@@ -1374,14 +1374,22 @@ pub(crate) struct MacroFixture {\n \n impl MacroFixture {\n     pub(crate) fn expand_tt(&self, invocation: &str) -> tt::Subtree {\n-        let source_file = ast::SourceFile::parse(invocation).ok().unwrap();\n+        self.try_expand_tt(invocation).unwrap()\n+    }\n+\n+    fn try_expand_tt(&self, invocation: &str) -> Result<tt::Subtree, ExpandError> {\n+        let source_file = ast::SourceFile::parse(invocation).tree();\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n         let (invocation_tt, _) =\n             ast_to_token_tree(&macro_invocation.token_tree().unwrap()).unwrap();\n \n-        self.rules.expand(&invocation_tt).unwrap()\n+        self.rules.expand(&invocation_tt)\n+    }\n+\n+    fn assert_expand_err(&self, invocation: &str, err: &ExpandError) {\n+        assert_eq!(self.try_expand_tt(invocation).as_ref(), Err(err));\n     }\n \n     fn expand_items(&self, invocation: &str) -> SyntaxNode {\n@@ -1448,7 +1456,7 @@ impl MacroFixture {\n \n pub(crate) fn parse_macro(macro_definition: &str) -> MacroFixture {\n     let source_file = ast::SourceFile::parse(macro_definition).ok().unwrap();\n-    let macro_definition =\n+    let macro_definition: ast::MacroCall =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n     let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n@@ -1539,3 +1547,13 @@ fn test_repeat_bad_var() {\n     )\n     .assert_expand_items(\"foo!(b0 b1);\", \"b0 b1\");\n }\n+\n+#[test]\n+fn test_expand_bad_literal() {\n+    parse_macro(\n+        r#\"\n+        macro_rules! foo { ($i:literal) => {}; }\n+    \"#,\n+    )\n+    .assert_expand_err(r#\"foo!(&k\");\"#, &ExpandError::NoMatchingRule);\n+}"}]}