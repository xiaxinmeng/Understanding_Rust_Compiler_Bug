{"sha": "e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YjQ3ZGJiMzZkMzZiOGZkNzUwMGUwNjU4MWZkMGVmNjg3Y2M1ODI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T15:41:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T15:41:41Z"}, "message": "remove AnalysisHostImpl", "tree": {"sha": "3141988893060d566ee7b8457a5546df4a7e7d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3141988893060d566ee7b8457a5546df4a7e7d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "html_url": "https://github.com/rust-lang/rust/commit/e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b47dbb36d36b8fd7500e06581fd0ef687cc582/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f22c861a925b6851540430ede0b87fe83c5374c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f22c861a925b6851540430ede0b87fe83c5374c", "html_url": "https://github.com/rust-lang/rust/commit/2f22c861a925b6851540430ede0b87fe83c5374c"}], "stats": {"total": 71, "additions": 26, "deletions": 45}, "files": [{"sha": "d9a3f97e97d4209ab627e30f1c27776539dd4a58", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e9b47dbb36d36b8fd7500e06581fd0ef687cc582/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b47dbb36d36b8fd7500e06581fd0ef687cc582/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "patch": "@@ -27,86 +27,70 @@ use crate::{\n     symbol_index::{LibrarySymbolsQuery, FileSymbol},\n };\n \n-#[derive(Debug, Default)]\n-pub(crate) struct AnalysisHostImpl {\n-    db: db::RootDatabase,\n-}\n-\n-impl AnalysisHostImpl {\n-    pub fn analysis(&self) -> AnalysisImpl {\n+impl db::RootDatabase {\n+    pub(crate) fn analysis(&self) -> AnalysisImpl {\n         AnalysisImpl {\n-            db: self.db.snapshot(),\n+            db: self.snapshot(),\n         }\n     }\n-    pub fn apply_change(&mut self, change: AnalysisChange) {\n+    pub(crate) fn apply_change(&mut self, change: AnalysisChange) {\n         log::info!(\"apply_change {:?}\", change);\n         // self.gc_syntax_trees();\n         if !change.new_roots.is_empty() {\n-            let mut local_roots = Vec::clone(&self.db.local_roots());\n+            let mut local_roots = Vec::clone(&self.local_roots());\n             for (root_id, is_local) in change.new_roots {\n-                self.db\n-                    .query_mut(ra_db::SourceRootQuery)\n+                self.query_mut(ra_db::SourceRootQuery)\n                     .set(root_id, Default::default());\n                 if is_local {\n                     local_roots.push(root_id);\n                 }\n             }\n-            self.db\n-                .query_mut(ra_db::LocalRootsQuery)\n+            self.query_mut(ra_db::LocalRootsQuery)\n                 .set((), Arc::new(local_roots));\n         }\n \n         for (root_id, root_change) in change.roots_changed {\n             self.apply_root_change(root_id, root_change);\n         }\n         for (file_id, text) in change.files_changed {\n-            self.db.query_mut(ra_db::FileTextQuery).set(file_id, text)\n+            self.query_mut(ra_db::FileTextQuery).set(file_id, text)\n         }\n         if !change.libraries_added.is_empty() {\n-            let mut libraries = Vec::clone(&self.db.library_roots());\n+            let mut libraries = Vec::clone(&self.library_roots());\n             for library in change.libraries_added {\n                 libraries.push(library.root_id);\n-                self.db\n-                    .query_mut(ra_db::SourceRootQuery)\n+                self.query_mut(ra_db::SourceRootQuery)\n                     .set(library.root_id, Default::default());\n-                self.db\n-                    .query_mut(LibrarySymbolsQuery)\n+                self.query_mut(LibrarySymbolsQuery)\n                     .set_constant(library.root_id, Arc::new(library.symbol_index));\n                 self.apply_root_change(library.root_id, library.root_change);\n             }\n-            self.db\n-                .query_mut(ra_db::LibraryRootsQuery)\n+            self.query_mut(ra_db::LibraryRootsQuery)\n                 .set((), Arc::new(libraries));\n         }\n         if let Some(crate_graph) = change.crate_graph {\n-            self.db\n-                .query_mut(ra_db::CrateGraphQuery)\n+            self.query_mut(ra_db::CrateGraphQuery)\n                 .set((), Arc::new(crate_graph))\n         }\n     }\n \n     fn apply_root_change(&mut self, root_id: SourceRootId, root_change: RootChange) {\n-        let mut source_root = SourceRoot::clone(&self.db.source_root(root_id));\n+        let mut source_root = SourceRoot::clone(&self.source_root(root_id));\n         for add_file in root_change.added {\n-            self.db\n-                .query_mut(ra_db::FileTextQuery)\n+            self.query_mut(ra_db::FileTextQuery)\n                 .set(add_file.file_id, add_file.text);\n-            self.db\n-                .query_mut(ra_db::FileRelativePathQuery)\n+            self.query_mut(ra_db::FileRelativePathQuery)\n                 .set(add_file.file_id, add_file.path.clone());\n-            self.db\n-                .query_mut(ra_db::FileSourceRootQuery)\n+            self.query_mut(ra_db::FileSourceRootQuery)\n                 .set(add_file.file_id, root_id);\n             source_root.files.insert(add_file.path, add_file.file_id);\n         }\n         for remove_file in root_change.removed {\n-            self.db\n-                .query_mut(ra_db::FileTextQuery)\n+            self.query_mut(ra_db::FileTextQuery)\n                 .set(remove_file.file_id, Default::default());\n             source_root.files.remove(&remove_file.path);\n         }\n-        self.db\n-            .query_mut(ra_db::SourceRootQuery)\n+        self.query_mut(ra_db::SourceRootQuery)\n             .set(root_id, Arc::new(source_root));\n     }\n \n@@ -115,14 +99,11 @@ impl AnalysisHostImpl {\n     /// syntax trees. However, if we actually do that, everything is recomputed\n     /// for some reason. Needs investigation.\n     fn gc_syntax_trees(&mut self) {\n-        self.db\n-            .query(ra_db::SourceFileQuery)\n+        self.query(ra_db::SourceFileQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n-        self.db\n-            .query(hir::db::SourceFileItemsQuery)\n+        self.query(hir::db::SourceFileItemsQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n-        self.db\n-            .query(hir::db::FileItemQuery)\n+        self.query(hir::db::FileItemQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n     }\n }"}, {"sha": "03994b7c41982173ba52c0051b3d7eb8cf1c09a0", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9b47dbb36d36b8fd7500e06581fd0ef687cc582/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b47dbb36d36b8fd7500e06581fd0ef687cc582/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=e9b47dbb36d36b8fd7500e06581fd0ef687cc582", "patch": "@@ -29,7 +29,7 @@ use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n \n use crate::{\n-    imp::{AnalysisHostImpl, AnalysisImpl},\n+    imp::AnalysisImpl,\n     symbol_index::{SymbolIndex, FileSymbol},\n };\n \n@@ -153,21 +153,21 @@ impl AnalysisChange {\n /// `AnalysisHost` stores the current state of the world.\n #[derive(Debug, Default)]\n pub struct AnalysisHost {\n-    imp: AnalysisHostImpl,\n+    db: db::RootDatabase,\n }\n \n impl AnalysisHost {\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {\n         Analysis {\n-            imp: self.imp.analysis(),\n+            imp: self.db.analysis(),\n         }\n     }\n     /// Applies changes to the current state of the world. If there are\n     /// outstanding snapshots, they will be canceled.\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n-        self.imp.apply_change(change)\n+        self.db.apply_change(change)\n     }\n }\n "}]}