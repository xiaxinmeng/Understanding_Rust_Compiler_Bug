{"sha": "9f24cc7126f6508dcc9e429a33bd12975873d3e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMjRjYzcxMjZmNjUwOGRjYzllNDI5YTMzYmQxMjk3NTg3M2QzZTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-07T20:10:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-07T20:10:20Z"}, "message": "Merge #9519\n\n9519: Explicitly name all spawned threads r=weirdsmiley a=weirdsmiley\n\nFixes: [#9385](https://github.com/rust-analyzer/rust-analyzer/issues/9385)\r\n\r\nThe thread name is shown in debugger as well as panic messages and this\r\npatch makes it easier to follow a thread instead of looking through\r\nfull backtrace, by naming all spawned threads according to their\r\nfunctioning.\n\nCo-authored-by: Manas <manas18244@iiitd.ac.in>", "tree": {"sha": "8d0868530e96747c823a37b07f64344da51c1987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d0868530e96747c823a37b07f64344da51c1987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f24cc7126f6508dcc9e429a33bd12975873d3e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5gosCRBK7hj4Ov3rIwAA+IkIAHLUit7Fr+19rW4NFhko0FDl\nwE3Dv2r+r3K82NHiaLTBkwDf8NXwV5NJiK4F0fL3EnfgEM0VuSnjpMFF2wHRTIqo\nkKrIwXz33P9vhAWySlbfhRTGWs7H+sWTDnTIcfxiUmb657qKaIPkViu7QtzqTt5i\nzH1dN/R76MUqDzKFUYcGStuq7e/vIVwO/8BzLH/EgRNqgyNMP4mx8Fbu/UMGLPYS\nDjGr+6DjRqrdoQx7wyhMAHIrYBCBD4YF+YxZ2CTWJE1i2RHEcqpEjgUbCNtwEHEk\nJmkOgmBApbNF4M4G+8W+5UgO1+32M5HCccjV5UW/AiSnxab++afwTGkp/soy0dM=\n=8Ue2\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d0868530e96747c823a37b07f64344da51c1987\nparent 11f3231a75f74e87074bd6e4c9d61c635adffce1\nparent 5e6eee5f631e354ba3323e7237bf35d24d7741e9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625688620 +0000\ncommitter GitHub <noreply@github.com> 1625688620 +0000\n\nMerge #9519\n\n9519: Explicitly name all spawned threads r=weirdsmiley a=weirdsmiley\n\nFixes: [#9385](https://github.com/rust-analyzer/rust-analyzer/issues/9385)\r\n\r\nThe thread name is shown in debugger as well as panic messages and this\r\npatch makes it easier to follow a thread instead of looking through\r\nfull backtrace, by naming all spawned threads according to their\r\nfunctioning.\n\nCo-authored-by: Manas <manas18244@iiitd.ac.in>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f24cc7126f6508dcc9e429a33bd12975873d3e4", "html_url": "https://github.com/rust-lang/rust/commit/9f24cc7126f6508dcc9e429a33bd12975873d3e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f24cc7126f6508dcc9e429a33bd12975873d3e4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f3231a75f74e87074bd6e4c9d61c635adffce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f3231a75f74e87074bd6e4c9d61c635adffce1", "html_url": "https://github.com/rust-lang/rust/commit/11f3231a75f74e87074bd6e4c9d61c635adffce1"}, {"sha": "5e6eee5f631e354ba3323e7237bf35d24d7741e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6eee5f631e354ba3323e7237bf35d24d7741e9", "html_url": "https://github.com/rust-lang/rust/commit/5e6eee5f631e354ba3323e7237bf35d24d7741e9"}], "stats": {"total": 110, "additions": 64, "deletions": 46}, "files": [{"sha": "e55f74bc452686cd07667ab78f4ac72be72880b5", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=9f24cc7126f6508dcc9e429a33bd12975873d3e4", "patch": "@@ -67,7 +67,10 @@ impl FlycheckHandle {\n     ) -> FlycheckHandle {\n         let actor = FlycheckActor::new(id, sender, config, workspace_root);\n         let (sender, receiver) = unbounded::<Restart>();\n-        let thread = jod_thread::spawn(move || actor.run(receiver));\n+        let thread = jod_thread::Builder::new()\n+            .name(\"FlycheckThread\".to_owned())\n+            .spawn(move || actor.run(receiver))\n+            .expect(\"failed to spawn thread\");\n         FlycheckHandle { sender, thread }\n     }\n \n@@ -266,7 +269,10 @@ impl CargoHandle {\n         let child_stdout = child.stdout.take().unwrap();\n         let (sender, receiver) = unbounded();\n         let actor = CargoActor::new(child_stdout, sender);\n-        let thread = jod_thread::spawn(move || actor.run());\n+        let thread = jod_thread::Builder::new()\n+            .name(\"CargoHandleThread\".to_owned())\n+            .spawn(move || actor.run())\n+            .expect(\"failed to spawn thread\");\n         CargoHandle { child, thread, receiver }\n     }\n     fn join(mut self) -> io::Result<()> {"}, {"sha": "19f854dba12b66eb5f99272f5482e378d92261ca", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=9f24cc7126f6508dcc9e429a33bd12975873d3e4", "patch": "@@ -37,9 +37,12 @@ impl ProcMacroProcessSrv {\n         let process = Process::run(process_path, args)?;\n \n         let (task_tx, task_rx) = bounded(0);\n-        let handle = jod_thread::spawn(move || {\n-            client_loop(task_rx, process);\n-        });\n+        let handle = jod_thread::Builder::new()\n+            .name(\"ProcMacroClientThread\".to_owned())\n+            .spawn(move || {\n+                client_loop(task_rx, process);\n+            })\n+            .expect(\"failed to spawn thread\");\n \n         let task_tx = Arc::new(task_tx);\n         let srv = ProcMacroProcessSrv { inner: Arc::downgrade(&task_tx) };"}, {"sha": "29b340445efe03c2b74a7d677607cdfd97f762cf", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/server.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs?ref=9f24cc7126f6508dcc9e429a33bd12975873d3e4", "patch": "@@ -181,21 +181,24 @@ impl ExecutionStrategy for CrossThread1 {\n         let (req_tx, req_rx) = channel();\n         let (res_tx, res_rx) = channel();\n \n-        let join_handle = thread::spawn(move || {\n-            let mut dispatch = |b| {\n-                req_tx.send(b).unwrap();\n-                res_rx.recv().unwrap()\n-            };\n-\n-            run_client(\n-                Bridge {\n-                    cached_buffer: input,\n-                    dispatch: (&mut dispatch).into(),\n-                    force_show_panics,\n-                },\n-                client_data,\n-            )\n-        });\n+        let join_handle = thread::Builder::new()\n+            .name(\"DispatchThread\".to_owned())\n+            .spawn(move || {\n+                let mut dispatch = |b| {\n+                    req_tx.send(b).unwrap();\n+                    res_rx.recv().unwrap()\n+                };\n+\n+                run_client(\n+                    Bridge {\n+                        cached_buffer: input,\n+                        dispatch: (&mut dispatch).into(),\n+                        force_show_panics,\n+                    },\n+                    client_data,\n+                )\n+            })\n+            .expect(\"failed to spawn thread\");\n \n         for b in req_rx {\n             res_tx.send(dispatcher.dispatch(b)).unwrap();\n@@ -227,33 +230,36 @@ impl ExecutionStrategy for CrossThread2 {\n \n         let server_thread = thread::current();\n         let state2 = state.clone();\n-        let join_handle = thread::spawn(move || {\n-            let mut dispatch = |b| {\n-                *state2.lock().unwrap() = State::Req(b);\n-                server_thread.unpark();\n-                loop {\n-                    thread::park();\n-                    if let State::Res(b) = &mut *state2.lock().unwrap() {\n-                        break b.take();\n+        let join_handle = thread::Builder::new()\n+            .name(\"ServerThread\".to_owned())\n+            .spawn(move || {\n+                let mut dispatch = |b| {\n+                    *state2.lock().unwrap() = State::Req(b);\n+                    server_thread.unpark();\n+                    loop {\n+                        thread::park();\n+                        if let State::Res(b) = &mut *state2.lock().unwrap() {\n+                            break b.take();\n+                        }\n                     }\n-                }\n-            };\n+                };\n+\n+                let r = run_client(\n+                    Bridge {\n+                        cached_buffer: input,\n+                        dispatch: (&mut dispatch).into(),\n+                        force_show_panics,\n+                    },\n+                    client_data,\n+                );\n+\n+                // Wake up the server so it can exit the dispatch loop.\n+                drop(state2);\n+                server_thread.unpark();\n \n-            let r = run_client(\n-                Bridge {\n-                    cached_buffer: input,\n-                    dispatch: (&mut dispatch).into(),\n-                    force_show_panics,\n-                },\n-                client_data,\n-            );\n-\n-            // Wake up the server so it can exit the dispatch loop.\n-            drop(state2);\n-            server_thread.unpark();\n-\n-            r\n-        });\n+                r\n+            })\n+            .expect(\"failed to spawn thread\");\n \n         // Check whether `state2` was dropped, to know when to stop.\n         while Arc::get_mut(&mut state).is_none() {"}, {"sha": "ca341ddae92f774d8a97034871fccb7c2134745b", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f24cc7126f6508dcc9e429a33bd12975873d3e4/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=9f24cc7126f6508dcc9e429a33bd12975873d3e4", "patch": "@@ -31,7 +31,10 @@ impl loader::Handle for NotifyHandle {\n     fn spawn(sender: loader::Sender) -> NotifyHandle {\n         let actor = NotifyActor::new(sender);\n         let (sender, receiver) = unbounded::<Message>();\n-        let thread = jod_thread::spawn(move || actor.run(receiver));\n+        let thread = jod_thread::Builder::new()\n+            .name(\"LoaderThread\".to_owned())\n+            .spawn(move || actor.run(receiver))\n+            .expect(\"failed to spawn thread\");\n         NotifyHandle { sender, thread }\n     }\n     fn set_config(&mut self, config: loader::Config) {"}]}