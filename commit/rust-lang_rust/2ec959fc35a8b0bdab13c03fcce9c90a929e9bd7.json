{"sha": "2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzk1OWZjMzVhOGIwYmRhYjEzYzAzZmNjZTljOTBhOTI5ZTliZDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T22:33:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-07T10:27:58Z"}, "message": "extend MIR dump with detailed, extra information", "tree": {"sha": "2f60661ebe46929bbe329177d584311a8def7fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f60661ebe46929bbe329177d584311a8def7fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7", "html_url": "https://github.com/rust-lang/rust/commit/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "html_url": "https://github.com/rust-lang/rust/commit/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6"}], "stats": {"total": 128, "additions": 104, "deletions": 24}, "files": [{"sha": "98d746952a402391de5ac3d68256db1de3cf76dc", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 96, "deletions": 21, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7", "patch": "@@ -11,7 +11,8 @@\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n-use rustc::ty::TyCtxt;\n+use rustc::mir::visit::Visitor;\n+use rustc::ty::{self, TyCtxt};\n use rustc::ty::item_path;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -125,14 +126,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n {\n     let _: io::Result<()> = do catch {\n-        let mut file = create_dump_file(\n-            tcx,\n-            \"mir\",\n-            pass_num,\n-            pass_name,\n-            disambiguator,\n-            source,\n-        )?;\n+        let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n         writeln!(file, \"// pass_name = {}\", pass_name)?;\n@@ -148,15 +142,9 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     };\n \n     if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n-    let _: io::Result<()> = do catch {\n-            let mut file = create_dump_file(\n-                tcx,\n-                \"dot\",\n-                pass_num,\n-                pass_name,\n-                disambiguator,\n-                source,\n-            )?;\n+        let _: io::Result<()> = do catch {\n+            let mut file =\n+                create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, source)?;\n             write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;\n             Ok(())\n         };\n@@ -297,10 +285,10 @@ where\n }\n \n /// Write out a human-readable textual representation for the given basic block.\n-pub fn write_basic_block<F>(\n-    tcx: TyCtxt,\n+pub fn write_basic_block<'cx, 'gcx, 'tcx, F>(\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     block: BasicBlock,\n-    mir: &Mir,\n+    mir: &Mir<'tcx>,\n     extra_data: &mut F,\n     w: &mut Write,\n ) -> io::Result<()>\n@@ -330,6 +318,11 @@ where\n             comment(tcx, statement.source_info),\n             A = ALIGN,\n         )?;\n+\n+        write_extra(tcx, w, |visitor| {\n+            visitor.visit_statement(current_location.block, statement, current_location);\n+        })?;\n+\n         extra_data(PassWhere::AfterLocation(current_location), w)?;\n \n         current_location.statement_index += 1;\n@@ -346,11 +339,93 @@ where\n         comment(tcx, data.terminator().source_info),\n         A = ALIGN,\n     )?;\n+\n+    write_extra(tcx, w, |visitor| {\n+        visitor.visit_terminator(current_location.block, data.terminator(), current_location);\n+    })?;\n+\n     extra_data(PassWhere::AfterLocation(current_location), w)?;\n \n     writeln!(w, \"{}}}\", INDENT)\n }\n \n+/// After we print the main statement, we sometimes dump extra\n+/// information. There's often a lot of little things \"nuzzled up\" in\n+/// a statement.\n+fn write_extra<'cx, 'gcx, 'tcx, F>(\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+    write: &mut Write,\n+    mut visit_op: F,\n+) -> io::Result<()>\n+where F: FnMut(&mut ExtraComments<'cx, 'gcx, 'tcx>)\n+{\n+    let mut extra_comments = ExtraComments {\n+        _tcx: tcx,\n+        comments: vec![],\n+    };\n+    visit_op(&mut extra_comments);\n+    for comment in extra_comments.comments {\n+        writeln!(write, \"{:A$} // {}\", \"\", comment, A = ALIGN)?;\n+    }\n+    Ok(())\n+}\n+\n+struct ExtraComments<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n+    _tcx: TyCtxt<'cx, 'gcx, 'tcx>, // don't need it now, but bet we will soon\n+    comments: Vec<String>,\n+}\n+\n+impl<'cx, 'gcx, 'tcx> ExtraComments<'cx, 'gcx, 'tcx> {\n+    fn push(&mut self, lines: &str) {\n+        for line in lines.split(\"\\n\") {\n+            self.comments.push(line.to_string());\n+        }\n+    }\n+}\n+\n+impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n+    fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n+        self.super_constant(constant, location);\n+        let Constant { span, ty, literal } = constant;\n+        self.push(&format!(\"mir::Constant\"));\n+        self.push(&format!(\"\u2514 span: {:?}\", span));\n+        self.push(&format!(\"\u2514 ty: {:?}\", ty));\n+        self.push(&format!(\"\u2514 literal: {:?}\", literal));\n+    }\n+\n+    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n+        self.super_const(constant);\n+        let ty::Const { ty, val } = constant;\n+        self.push(&format!(\"ty::Const\"));\n+        self.push(&format!(\"\u2514 ty: {:?}\", ty));\n+        self.push(&format!(\"\u2514 val: {:?}\", val));\n+    }\n+\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+        self.super_rvalue(rvalue, location);\n+        match rvalue {\n+            Rvalue::Aggregate(kind, _) => match **kind {\n+                AggregateKind::Closure(def_id, substs) => {\n+                    self.push(&format!(\"closure\"));\n+                    self.push(&format!(\"\u2514 def_id: {:?}\", def_id));\n+                    self.push(&format!(\"\u2514 substs: {:#?}\", substs));\n+                }\n+\n+                AggregateKind::Generator(def_id, substs, interior) => {\n+                    self.push(&format!(\"generator\"));\n+                    self.push(&format!(\"\u2514 def_id: {:?}\", def_id));\n+                    self.push(&format!(\"\u2514 substs: {:#?}\", substs));\n+                    self.push(&format!(\"\u2514 interior: {:?}\", interior));\n+                }\n+\n+                _ => {}\n+            },\n+\n+            _ => {}\n+        }\n+    }\n+}\n+\n fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String {\n     format!(\n         \"scope {} at {}\","}, {"sha": "a18f4ec1aadb469b83e6762d447699ed9eb04098", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2ec959fc35a8b0bdab13c03fcce9c90a929e9bd7", "patch": "@@ -2535,7 +2535,10 @@ impl<'test> TestCx<'test> {\n         let mut dumped_file = fs::File::open(output_file.clone()).unwrap();\n         let mut dumped_string = String::new();\n         dumped_file.read_to_string(&mut dumped_string).unwrap();\n-        let mut dumped_lines = dumped_string.lines().filter(|l| !l.is_empty());\n+        let mut dumped_lines = dumped_string\n+            .lines()\n+            .map(|l| nocomment_mir_line(l))\n+            .filter(|l| !l.is_empty());\n         let mut expected_lines = expected_content\n             .iter()\n             .filter(|&l| {\n@@ -2573,7 +2576,7 @@ impl<'test> TestCx<'test> {\n                 .join(\"\\n\");\n             panic!(\n                 \"Did not find expected line, error: {}\\n\\\n-                 Actual Line: {:?}\\n\\\n+                 Expected Line: {:?}\\n\\\n                  Expected:\\n{}\\n\\\n                  Actual:\\n{}\",\n                 extra_msg,\n@@ -2599,7 +2602,9 @@ impl<'test> TestCx<'test> {\n                         error(\n                             expected_line,\n                             format!(\n-                                \"Mismatch in lines\\nCurrnt block: {}\\nExpected Line: {:?}\",\n+                                \"Mismatch in lines\\n\\\n+                                 Current block: {}\\n\\\n+                                 Actual Line: {:?}\",\n                                 start_block_line.unwrap_or(\"None\"),\n                                 dumped_line\n                             ),"}]}