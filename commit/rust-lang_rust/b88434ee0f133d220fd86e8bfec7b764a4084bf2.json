{"sha": "b88434ee0f133d220fd86e8bfec7b764a4084bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODQzNGVlMGYxMzNkMjIwZmQ4NmU4YmZlYzdiNzY0YTQwODRiZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T12:40:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T12:40:01Z"}, "message": "Auto merge of #75816 - LeSeulArtichaut:core-intra-docs, r=jyn514\n\nUse intra-doc-links in `core::{raw, ffi, pin}`\n\nHelps with #75080.\nr? @jyn514", "tree": {"sha": "332efd11d6bc953b79332743b44d05e819115945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/332efd11d6bc953b79332743b44d05e819115945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88434ee0f133d220fd86e8bfec7b764a4084bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88434ee0f133d220fd86e8bfec7b764a4084bf2", "html_url": "https://github.com/rust-lang/rust/commit/b88434ee0f133d220fd86e8bfec7b764a4084bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88434ee0f133d220fd86e8bfec7b764a4084bf2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2342cc33333d0e87f692cf0b95b762743c74324d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2342cc33333d0e87f692cf0b95b762743c74324d", "html_url": "https://github.com/rust-lang/rust/commit/2342cc33333d0e87f692cf0b95b762743c74324d"}, {"sha": "c8a372ecff373e8753da97d10a21e16bd853fb76", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a372ecff373e8753da97d10a21e16bd853fb76", "html_url": "https://github.com/rust-lang/rust/commit/c8a372ecff373e8753da97d10a21e16bd853fb76"}], "stats": {"total": 49, "additions": 15, "deletions": 34}, "files": [{"sha": "4525ba78ba09548e1f8dd1f89a105a2724dd9376", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88434ee0f133d220fd86e8bfec7b764a4084bf2/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88434ee0f133d220fd86e8bfec7b764a4084bf2/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=b88434ee0f133d220fd86e8bfec7b764a4084bf2", "patch": "@@ -281,8 +281,6 @@ impl<'a, 'f: 'a> DerefMut for VaList<'a, 'f> {\n // improving this.\n mod sealed_trait {\n     /// Trait which permits the allowed types to be used with [VaList::arg].\n-    ///\n-    /// [VaList::arg]: ../struct.VaList.html#method.arg\n     #[unstable(\n         feature = \"c_variadic\",\n         reason = \"the `c_variadic` feature has not been properly tested on \\"}, {"sha": "290aa797fd964971df6a2aebfbe3160b366a9978", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b88434ee0f133d220fd86e8bfec7b764a4084bf2/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88434ee0f133d220fd86e8bfec7b764a4084bf2/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=b88434ee0f133d220fd86e8bfec7b764a4084bf2", "patch": "@@ -349,37 +349,28 @@\n //! mutable reference even when you just have [`Pin`]`<&mut Self>` (such as in your own\n //! [`poll`] implementation).\n //!\n-//! [`Pin<P>`]: struct.Pin.html\n-//! [`Unpin`]: ../marker/trait.Unpin.html\n-//! [`Deref`]: ../ops/trait.Deref.html\n-//! [`DerefMut`]: ../ops/trait.DerefMut.html\n-//! [`mem::swap`]: ../mem/fn.swap.html\n-//! [`mem::forget`]: ../mem/fn.forget.html\n+//! [`Pin<P>`]: Pin\n+//! [`Deref`]: crate::ops::Deref\n+//! [`DerefMut`]: crate::ops::DerefMut\n+//! [`mem::swap`]: crate::mem::swap\n+//! [`mem::forget`]: crate::mem::forget\n //! [`Box<T>`]: ../../std/boxed/struct.Box.html\n //! [`Vec<T>`]: ../../std/vec/struct.Vec.html\n //! [`Vec::set_len`]: ../../std/vec/struct.Vec.html#method.set_len\n-//! [`Pin`]: struct.Pin.html\n //! [`Box`]: ../../std/boxed/struct.Box.html\n //! [Vec::pop]: ../../std/vec/struct.Vec.html#method.pop\n //! [Vec::push]: ../../std/vec/struct.Vec.html#method.push\n //! [`Rc`]: ../../std/rc/struct.Rc.html\n-//! [`RefCell<T>`]: ../../std/cell/struct.RefCell.html\n-//! [`Drop`]: ../../std/ops/trait.Drop.html\n-//! [`drop`]: ../../std/ops/trait.Drop.html#tymethod.drop\n+//! [`RefCell<T>`]: crate::cell::RefCell\n+//! [`drop`]: Drop::drop\n //! [`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n-//! [`Option<T>`]: ../../std/option/enum.Option.html\n-//! [`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n-//! [`RefCell<T>`]: ../cell/struct.RefCell.html\n-//! [`None`]: ../option/enum.Option.html#variant.None\n-//! [`Some(v)`]: ../option/enum.Option.html#variant.Some\n-//! [`ptr::write`]: ../ptr/fn.write.html\n-//! [`Future`]: ../future/trait.Future.html\n+//! [`Option<T>`]: Option\n+//! [`Some(v)`]: Some\n+//! [`ptr::write`]: crate::ptr::write\n+//! [`Future`]: crate::future::Future\n //! [drop-impl]: #drop-implementation\n //! [drop-guarantee]: #drop-guarantee\n-//! [`poll`]: ../../std/future/trait.Future.html#tymethod.poll\n-//! [`Pin::get_unchecked_mut`]: struct.Pin.html#method.get_unchecked_mut\n-//! [`bool`]: ../../std/primitive.bool.html\n-//! [`i32`]: ../../std/primitive.i32.html\n+//! [`poll`]: crate::future::Future::poll\n \n #![stable(feature = \"pin\", since = \"1.33.0\")]\n \n@@ -397,8 +388,7 @@ use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Receiver};\n ///\n /// *See the [`pin` module] documentation for an explanation of pinning.*\n ///\n-/// [`Unpin`]: ../../std/marker/trait.Unpin.html\n-/// [`pin` module]: ../../std/pin/index.html\n+/// [`pin` module]: self\n //\n // Note: the `Clone` derive below causes unsoundness as it's possible to implement\n // `Clone` for mutable references.\n@@ -481,8 +471,6 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// Unlike `Pin::new_unchecked`, this method is safe because the pointer\n     /// `P` dereferences to an [`Unpin`] type, which cancels the pinning guarantees.\n-    ///\n-    /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn new(pointer: P) -> Pin<P> {\n@@ -495,8 +483,6 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n     /// can ignore the pinning invariants when unwrapping it.\n-    ///\n-    /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n     #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n     pub fn into_inner(pin: Pin<P>) -> P {\n@@ -568,7 +554,7 @@ impl<P: Deref> Pin<P> {\n     ///  }\n     ///  ```\n     ///\n-    /// [`mem::swap`]: ../../std/mem/fn.swap.html\n+    /// [`mem::swap`]: crate::mem::swap\n     #[cfg_attr(not(bootstrap), lang = \"new_unchecked\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n@@ -603,9 +589,6 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// If the underlying data is [`Unpin`], [`Pin::into_inner`] should be used\n     /// instead.\n-    ///\n-    /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n-    /// [`Pin::into_inner`]: #method.into_inner\n     #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n     pub unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {"}, {"sha": "1227d9b01f011105a316b693704d63e22802caa0", "filename": "library/core/src/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88434ee0f133d220fd86e8bfec7b764a4084bf2/library%2Fcore%2Fsrc%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88434ee0f133d220fd86e8bfec7b764a4084bf2/library%2Fcore%2Fsrc%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fraw.rs?ref=b88434ee0f133d220fd86e8bfec7b764a4084bf2", "patch": "@@ -26,7 +26,7 @@\n /// [`std::mem::transmute`][transmute]. Similarly, the only way to create a true\n /// trait object from a `TraitObject` value is with `transmute`.\n ///\n-/// [transmute]: ../intrinsics/fn.transmute.html\n+/// [transmute]: crate::intrinsics::transmute\n ///\n /// Synthesizing a trait object with mismatched types\u2014one where the\n /// vtable does not correspond to the type of the value to which the"}]}