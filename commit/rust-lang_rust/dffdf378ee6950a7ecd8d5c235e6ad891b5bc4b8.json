{"sha": "dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZmRmMzc4ZWU2OTUwYTdlY2Q4ZDVjMjM1ZTZhZDg5MWI1YmM0Yjg=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2019-11-03T22:06:48Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2019-11-24T14:17:16Z"}, "message": "Add version mismatch help message for unimplemented trait\n\nIssue #22750\nThe error reporting for E0277 (the trait `X` is not implemented for `Foo`)\nnow checks whether `Foo` implements a trait with the same path as `X`,\nwhich probably means that the programmer wanted to actually use only one\nversion of the trait `X` instead of the two.", "tree": {"sha": "3cf832c6c4cbe481ff75934e1998255c4e897ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf832c6c4cbe481ff75934e1998255c4e897ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "html_url": "https://github.com/rust-lang/rust/commit/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56b23988de532744fd05301f87c329b612700e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56b23988de532744fd05301f87c329b612700e3", "html_url": "https://github.com/rust-lang/rust/commit/b56b23988de532744fd05301f87c329b612700e3"}], "stats": {"total": 94, "additions": 87, "deletions": 7}, "files": [{"sha": "00b575adbce0a79cd04b42e5d4eca20075ccc05e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "patch": "@@ -38,6 +38,7 @@ use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n use syntax_pos::{DUMMY_SP, Span, ExpnKind, MultiSpan};\n+use rustc::hir::def_id::LOCAL_CRATE;\n \n use rustc_error_codes::*;\n \n@@ -799,6 +800,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n+                        self.note_version_mismatch(&mut err, &trait_ref);\n \n                         // Try to report a help message\n                         if !trait_ref.has_infer_types() &&\n@@ -1050,6 +1052,43 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    /// If the `Self` type of the unsatisfied trait `trait_ref` implements a trait\n+    /// with the same path as `trait_ref`, a help message about\n+    /// a probable version mismatch is added to `err`\n+    fn note_version_mismatch(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+    ) {\n+        let get_trait_impl = |trait_def_id| {\n+            let mut trait_impl = None;\n+            self.tcx.for_each_relevant_impl(trait_def_id, trait_ref.self_ty(), |impl_def_id| {\n+                if trait_impl.is_none() {\n+                    trait_impl = Some(impl_def_id);\n+                }\n+            });\n+            trait_impl\n+        };\n+        let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n+        let all_traits = self.tcx.all_traits(LOCAL_CRATE);\n+        let traits_with_same_path: std::collections::BTreeSet<_> = all_traits\n+            .iter()\n+            .filter(|trait_def_id| **trait_def_id != trait_ref.def_id())\n+            .filter(|trait_def_id| self.tcx.def_path_str(**trait_def_id) == required_trait_path)\n+            .collect();\n+        for trait_with_same_path in traits_with_same_path {\n+            if let Some(impl_def_id) = get_trait_impl(*trait_with_same_path) {\n+                let impl_span = self.tcx.def_span(impl_def_id);\n+                err.span_help(impl_span, \"Trait impl with same name found\");\n+                let trait_crate = self.tcx.crate_name(trait_with_same_path.krate);\n+                let crate_msg = format!(\n+                    \"Perhaps two different versions of crate `{}` are being used?\",\n+                    trait_crate\n+                );\n+                err.note(&crate_msg);\n+            }\n+        }\n+    }\n     fn suggest_restricting_param_bound(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "724206860fe501408281b38ae285e553d119e730", "filename": "src/test/ui/traits/auxiliary/crate_a1.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs?ref=dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "patch": "@@ -2,10 +2,4 @@ pub struct Foo;\n \n pub trait Bar{}\n \n-pub fn bar() -> Box<Bar> {\n-    unimplemented!()\n-}\n-\n-\n-pub fn try_foo(x: Foo){}\n-pub fn try_bar(x: Box<Bar>){}\n+pub fn try_foo(x: impl Bar){}"}, {"sha": "d8a178dc0d90e966b6b95d6f31c5fb0be25a5909", "filename": "src/test/ui/traits/auxiliary/crate_a2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs?ref=dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "patch": "@@ -0,0 +1,5 @@\n+pub struct Foo;\n+\n+pub trait Bar{}\n+\n+impl Bar for Foo {}"}, {"sha": "2ef1c989a5661fd8a741aa2cd671166de9b784bc", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs?ref=dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "patch": "@@ -0,0 +1,21 @@\n+// aux-build:crate_a1.rs\n+// aux-build:crate_a2.rs\n+\n+// Issue 22750\n+// This tests the extra help message reported when a trait bound\n+// is not met but the struct implements a trait with the same path.\n+\n+fn main() {\n+    let foo2 = {\n+        extern crate crate_a2 as a;\n+        a::Foo\n+    };\n+\n+    {\n+        extern crate crate_a1 as a;\n+        a::try_foo(foo2);\n+        //~^ ERROR E0277\n+        //~| Trait impl with same name found\n+        //~| Perhaps two different versions of crate `crate_a2`\n+    }\n+}"}, {"sha": "78ea9a849f437235ce5dc97bab5b678bdaab1abf", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr?ref=dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `main::a::Foo: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:16:20\n+   |\n+LL |         a::try_foo(foo2);\n+   |                    ^^^^ the trait `main::a::Bar` is not implemented for `main::a::Foo`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:5:24\n+   |\n+LL | pub fn try_foo(x: impl Bar){}\n+   |                        --- required by this bound in `main::a::try_foo`\n+   |\n+help: Trait impl with same name found\n+  --> $DIR/auxiliary/crate_a2.rs:5:1\n+   |\n+LL | impl Bar for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^\n+   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}