{"sha": "b795fab046ca1b218785bee5ec5af7326ef9fc85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTVmYWIwNDZjYTFiMjE4Nzg1YmVlNWVjNWFmNzMyNmVmOWZjODU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-22T00:33:56Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-22T00:33:56Z"}, "message": "oops v2, apparently writing std::comm::stream() doesn't work on check-fast; fix this", "tree": {"sha": "2d04a9a90d8aa78bb92ae0218c85bb7a2581f1d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d04a9a90d8aa78bb92ae0218c85bb7a2581f1d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b795fab046ca1b218785bee5ec5af7326ef9fc85", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b795fab046ca1b218785bee5ec5af7326ef9fc85", "html_url": "https://github.com/rust-lang/rust/commit/b795fab046ca1b218785bee5ec5af7326ef9fc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b795fab046ca1b218785bee5ec5af7326ef9fc85/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ad36d75b18bb6b37d88fd5559c6873e50dd4c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ad36d75b18bb6b37d88fd5559c6873e50dd4c6", "html_url": "https://github.com/rust-lang/rust/commit/22ad36d75b18bb6b37d88fd5559c6873e50dd4c6"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "d7ee3aae4d52cdfd0979dee01a259355228f5d5a", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=b795fab046ca1b218785bee5ec5af7326ef9fc85", "patch": "@@ -11,16 +11,18 @@\n // Tests (negatively) the ability for the Self type in default methods\n // to use capabilities granted by builtin kinds as supertraits.\n \n+use std::comm;\n+\n trait Foo : Freeze {\n-    fn foo(self, chan: std::comm::Chan<Self>) {\n+    fn foo(self, chan: comm::Chan<Self>) {\n         chan.send(self); //~ ERROR does not fulfill `Send`\n     }\n }\n \n impl <T: Freeze> Foo for T { }\n \n fn main() {\n-    let (p,c) = std::comm::stream();\n+    let (p,c) = comm::stream();\n     1193182.foo(c);\n     assert!(p.recv() == 1193182);\n }"}, {"sha": "74a218ac469a30bda8e6be9e905f1b443f14f425", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=b795fab046ca1b218785bee5ec5af7326ef9fc85", "patch": "@@ -14,18 +14,20 @@\n // a Send. Basically this just makes sure rustc is using\n // each_bound_trait_and_supertraits in type_contents correctly.\n \n+use std::comm;\n+\n trait Bar : Send { }\n trait Foo : Bar { }\n \n impl <T: Send> Foo for T { }\n impl <T: Send> Bar for T { }\n \n-fn foo<T: Foo>(val: T, chan: std::comm::Chan<T>) {\n+fn foo<T: Foo>(val: T, chan: comm::Chan<T>) {\n     chan.send(val);\n }\n \n fn main() {\n-    let (p,c) = std::comm::stream();\n+    let (p,c) = comm::stream();\n     foo(31337, c);\n     assert!(p.recv() == 31337);\n }"}, {"sha": "ea61b91e3b92e48047881f1ceca4c72d5a0fefe9", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=b795fab046ca1b218785bee5ec5af7326ef9fc85", "patch": "@@ -17,19 +17,20 @@\n \n extern mod trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n+use std::comm;\n \n #[deriving(Eq)]\n struct X<T>(T);\n \n impl <T: Freeze> RequiresFreeze for X<T> { }\n impl <T: Freeze+Send> RequiresRequiresFreezeAndSend for X<T> { }\n \n-fn foo<T: RequiresRequiresFreezeAndSend>(val: T, chan: std::comm::Chan<T>) {\n+fn foo<T: RequiresRequiresFreezeAndSend>(val: T, chan: comm::Chan<T>) {\n     chan.send(val);\n }\n \n fn main() {\n-    let (p,c) = std::comm::stream();\n+    let (p,c) = comm::stream();\n     foo(X(31337), c);\n     assert!(p.recv() == X(31337));\n }"}, {"sha": "c2d2129b1c182a3056092727aa561bfed9545648", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=b795fab046ca1b218785bee5ec5af7326ef9fc85", "patch": "@@ -12,16 +12,18 @@\n // builtin-kinds, e.g., if a trait requires Send to implement, then\n // at usage site of that trait, we know we have the Send capability.\n \n+use std::comm;\n+\n trait Foo : Send { }\n \n impl <T: Send> Foo for T { }\n \n-fn foo<T: Foo>(val: T, chan: std::comm::Chan<T>) {\n+fn foo<T: Foo>(val: T, chan: comm::Chan<T>) {\n     chan.send(val);\n }\n \n fn main() {\n-    let (p,c) = std::comm::stream();\n+    let (p,c) = comm::stream();\n     foo(31337, c);\n     assert!(p.recv() == 31337);\n }"}, {"sha": "2285c471c91912abc3a6d299929448624ab273e0", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795fab046ca1b218785bee5ec5af7326ef9fc85/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=b795fab046ca1b218785bee5ec5af7326ef9fc85", "patch": "@@ -11,16 +11,18 @@\n // Tests the ability for the Self type in default methods to use\n // capabilities granted by builtin kinds as supertraits.\n \n+use std::comm;\n+\n trait Foo : Send {\n-    fn foo(self, chan: std::comm::Chan<Self>) {\n+    fn foo(self, chan: comm::Chan<Self>) {\n         chan.send(self);\n     }\n }\n \n impl <T: Send> Foo for T { }\n \n fn main() {\n-    let (p,c) = std::comm::stream();\n+    let (p,c) = comm::stream();\n     1193182.foo(c);\n     assert!(p.recv() == 1193182);\n }"}]}