{"sha": "f194750a2a4d5f034e89b937e1271637b884a503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOTQ3NTBhMmE0ZDVmMDM0ZTg5YjkzN2UxMjcxNjM3Yjg4NGE1MDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T16:50:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T16:50:54Z"}, "message": "G: start attributes", "tree": {"sha": "1f6ebe89813801a07e2be445acd6b112627adf9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f6ebe89813801a07e2be445acd6b112627adf9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f194750a2a4d5f034e89b937e1271637b884a503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f194750a2a4d5f034e89b937e1271637b884a503", "html_url": "https://github.com/rust-lang/rust/commit/f194750a2a4d5f034e89b937e1271637b884a503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f194750a2a4d5f034e89b937e1271637b884a503/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5034410c8e5aabf809d2665e38017ef79d05601", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5034410c8e5aabf809d2665e38017ef79d05601", "html_url": "https://github.com/rust-lang/rust/commit/b5034410c8e5aabf809d2665e38017ef79d05601"}], "stats": {"total": 199, "additions": 188, "deletions": 11}, "files": [{"sha": "39cb0a5431541fc157e1a091df56ed0032b379b7", "filename": "grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -39,7 +39,7 @@ Grammar(\n         \"EQEQ\",\n         \"FAT_ARROW\",\n         \"NEQ\",\n-        \"NOT\",\n+        \"EXCL\",\n         \"LIFETIME\",\n         \"CHAR\",\n         \"BYTE\",\n@@ -65,5 +65,6 @@ Grammar(\n         \"STRUCT_ITEM\",\n         \"STRUCT_FIELD\",\n         \"FN_ITEM\",\n+        \"ATTR\",\n     ]\n )\n\\ No newline at end of file"}, {"sha": "842059a42ba95c79a0bdf94256c965b19c0568d9", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -129,7 +129,7 @@ fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n                 ptr.bump();\n                 NEQ\n             }\n-            _ => NOT,\n+            _ => EXCL,\n         },\n         '-' => return if ptr.next_is('>') {\n             ptr.bump();"}, {"sha": "d657ee1cd00bd6b8a68eff5e35dd6723acb26ab6", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -17,10 +17,6 @@ pub fn file(p: &mut Parser) {\n     })\n }\n \n-fn inner_attributes(_: &mut Parser) {\n-    //TODO\n-}\n-\n fn item_first(p: &Parser) -> bool {\n     let current = match p.current() {\n         Some(c) => c,\n@@ -58,6 +54,20 @@ fn fn_item(p: &mut Parser) {\n \n // Paths, types, attributes, and stuff //\n \n+fn inner_attributes(p: &mut Parser) {\n+    many(p, inner_attribute)\n+}\n+\n+fn inner_attribute(p: &mut Parser) -> bool {\n+    if !(p.lookahead(&[EXCL, POUND])) {\n+        return false;\n+    }\n+    node(p, ATTR, |p| {\n+        p.bump_n(2);\n+    });\n+    true\n+}\n+\n fn outer_attributes(_: &mut Parser) {\n }\n \n@@ -143,9 +153,15 @@ impl<'p> Parser<'p> {\n         }\n     }\n \n-    pub(crate) fn optional(&mut self, kind: SyntaxKind) {\n+    fn optional(&mut self, kind: SyntaxKind) {\n         if self.current_is(kind) {\n             self.bump();\n         }\n     }\n+\n+    fn bump_n(&mut self, n: u8) {\n+        for _ in 0..n {\n+            self.bump();\n+        }\n+    }\n }\n\\ No newline at end of file"}, {"sha": "f8330af4e22526a260600c0acf22e1a6740c49a9", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -86,6 +86,14 @@ impl<'t> Parser<'t> {\n         Some(kind)\n     }\n \n+    pub(crate) fn lookahead(&self, kinds: &[SyntaxKind]) -> bool {\n+        if self.non_ws_tokens[self.pos..].len() < kinds.len() {\n+            return false\n+        }\n+        kinds.iter().zip(self.non_ws_tokens[self.pos..].iter())\n+            .all(|(&k1, &(idx, _))| k1 == self.raw_tokens[idx].kind)\n+    }\n+\n     pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> bool {\n         let old_level = self.curly_level;\n         let old_limit = self.curly_limit;"}, {"sha": "67c840a3e1101d59f6d964bfe4d387a232432d71", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -38,7 +38,7 @@ pub const EQ: SyntaxKind = SyntaxKind(33);\n pub const EQEQ: SyntaxKind = SyntaxKind(34);\n pub const FAT_ARROW: SyntaxKind = SyntaxKind(35);\n pub const NEQ: SyntaxKind = SyntaxKind(36);\n-pub const NOT: SyntaxKind = SyntaxKind(37);\n+pub const EXCL: SyntaxKind = SyntaxKind(37);\n pub const LIFETIME: SyntaxKind = SyntaxKind(38);\n pub const CHAR: SyntaxKind = SyntaxKind(39);\n pub const BYTE: SyntaxKind = SyntaxKind(40);\n@@ -62,8 +62,9 @@ pub const FILE: SyntaxKind = SyntaxKind(57);\n pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(58);\n pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(59);\n pub const FN_ITEM: SyntaxKind = SyntaxKind(60);\n+pub const ATTR: SyntaxKind = SyntaxKind(61);\n \n-static INFOS: [SyntaxInfo; 61] = [\n+static INFOS: [SyntaxInfo; 62] = [\n     SyntaxInfo { name: \"USE_KW\" },\n     SyntaxInfo { name: \"FN_KW\" },\n     SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -101,7 +102,7 @@ static INFOS: [SyntaxInfo; 61] = [\n     SyntaxInfo { name: \"EQEQ\" },\n     SyntaxInfo { name: \"FAT_ARROW\" },\n     SyntaxInfo { name: \"NEQ\" },\n-    SyntaxInfo { name: \"NOT\" },\n+    SyntaxInfo { name: \"EXCL\" },\n     SyntaxInfo { name: \"LIFETIME\" },\n     SyntaxInfo { name: \"CHAR\" },\n     SyntaxInfo { name: \"BYTE\" },\n@@ -125,6 +126,7 @@ static INFOS: [SyntaxInfo; 61] = [\n     SyntaxInfo { name: \"STRUCT_ITEM\" },\n     SyntaxInfo { name: \"STRUCT_FIELD\" },\n     SyntaxInfo { name: \"FN_ITEM\" },\n+    SyntaxInfo { name: \"ATTR\" },\n ];\n \n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {"}, {"sha": "0f99c24cd7fca1f0c495cf45d4a28662dd03c01d", "filename": "tests/data/lexer/0005_symbols.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/tests%2Fdata%2Flexer%2F0005_symbols.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/tests%2Fdata%2Flexer%2F0005_symbols.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0005_symbols.txt?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -58,7 +58,7 @@ EQ 1 \"=\"\n WHITESPACE 1 \" \"\n FAT_ARROW 2 \"=>\"\n WHITESPACE 1 \"\\n\"\n-NOT 1 \"!\"\n+EXCL 1 \"!\"\n WHITESPACE 1 \" \"\n NEQ 2 \"!=\"\n WHITESPACE 1 \"\\n\""}, {"sha": "e81f8b1e84fbcc0a9c21b33256e9f1d9965f1af8", "filename": "tests/data/parser/ok/0006_inner_attributes.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/tests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/tests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.rs?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -0,0 +1,10 @@\n+#![attr]\n+#![attr(true)]\n+#![attr(ident)]\n+#![attr(ident, 100, true, \"true\", ident = 100, ident = \"hello\", ident(100))]\n+#![attr(100)]\n+#![attr(enabled = true)]\n+#![enabled(true)]\n+#![attr(\"hello\")]\n+#![repr(C, align = 4)]\n+#![repr(C, align(4))]\n\\ No newline at end of file"}, {"sha": "c837979d10ee729c885687a8c528f9753956e2a9", "filename": "tests/data/parser/ok/0006_inner_attributes.txt", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/tests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/tests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.txt?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -0,0 +1,135 @@\n+FILE@[0; 236)\n+  ERROR@[0; 236)\n+  err: `expected item`\n+    POUND@[0; 1)\n+    EXCL@[1; 2)\n+    L_BRACK@[2; 3)\n+    IDENT@[3; 7)\n+    R_BRACK@[7; 8)\n+    WHITESPACE@[8; 9)\n+    POUND@[9; 10)\n+    EXCL@[10; 11)\n+    L_BRACK@[11; 12)\n+    IDENT@[12; 16)\n+    L_PAREN@[16; 17)\n+    IDENT@[17; 21)\n+    R_PAREN@[21; 22)\n+    R_BRACK@[22; 23)\n+    WHITESPACE@[23; 24)\n+    POUND@[24; 25)\n+    EXCL@[25; 26)\n+    L_BRACK@[26; 27)\n+    IDENT@[27; 31)\n+    L_PAREN@[31; 32)\n+    IDENT@[32; 37)\n+    R_PAREN@[37; 38)\n+    R_BRACK@[38; 39)\n+    WHITESPACE@[39; 40)\n+    POUND@[40; 41)\n+    EXCL@[41; 42)\n+    L_BRACK@[42; 43)\n+    IDENT@[43; 47)\n+    L_PAREN@[47; 48)\n+    IDENT@[48; 53)\n+    COMMA@[53; 54)\n+    WHITESPACE@[54; 55)\n+    INT_NUMBER@[55; 58)\n+    COMMA@[58; 59)\n+    WHITESPACE@[59; 60)\n+    IDENT@[60; 64)\n+    COMMA@[64; 65)\n+    WHITESPACE@[65; 66)\n+    STRING@[66; 72)\n+    COMMA@[72; 73)\n+    WHITESPACE@[73; 74)\n+    IDENT@[74; 79)\n+    WHITESPACE@[79; 80)\n+    EQ@[80; 81)\n+    WHITESPACE@[81; 82)\n+    INT_NUMBER@[82; 85)\n+    COMMA@[85; 86)\n+    WHITESPACE@[86; 87)\n+    IDENT@[87; 92)\n+    WHITESPACE@[92; 93)\n+    EQ@[93; 94)\n+    WHITESPACE@[94; 95)\n+    STRING@[95; 102)\n+    COMMA@[102; 103)\n+    WHITESPACE@[103; 104)\n+    IDENT@[104; 109)\n+    L_PAREN@[109; 110)\n+    INT_NUMBER@[110; 113)\n+    R_PAREN@[113; 114)\n+    R_PAREN@[114; 115)\n+    R_BRACK@[115; 116)\n+    WHITESPACE@[116; 117)\n+    POUND@[117; 118)\n+    EXCL@[118; 119)\n+    L_BRACK@[119; 120)\n+    IDENT@[120; 124)\n+    L_PAREN@[124; 125)\n+    INT_NUMBER@[125; 128)\n+    R_PAREN@[128; 129)\n+    R_BRACK@[129; 130)\n+    WHITESPACE@[130; 131)\n+    POUND@[131; 132)\n+    EXCL@[132; 133)\n+    L_BRACK@[133; 134)\n+    IDENT@[134; 138)\n+    L_PAREN@[138; 139)\n+    IDENT@[139; 146)\n+    WHITESPACE@[146; 147)\n+    EQ@[147; 148)\n+    WHITESPACE@[148; 149)\n+    IDENT@[149; 153)\n+    R_PAREN@[153; 154)\n+    R_BRACK@[154; 155)\n+    WHITESPACE@[155; 156)\n+    POUND@[156; 157)\n+    EXCL@[157; 158)\n+    L_BRACK@[158; 159)\n+    IDENT@[159; 166)\n+    L_PAREN@[166; 167)\n+    IDENT@[167; 171)\n+    R_PAREN@[171; 172)\n+    R_BRACK@[172; 173)\n+    WHITESPACE@[173; 174)\n+    POUND@[174; 175)\n+    EXCL@[175; 176)\n+    L_BRACK@[176; 177)\n+    IDENT@[177; 181)\n+    L_PAREN@[181; 182)\n+    STRING@[182; 189)\n+    R_PAREN@[189; 190)\n+    R_BRACK@[190; 191)\n+    WHITESPACE@[191; 192)\n+    POUND@[192; 193)\n+    EXCL@[193; 194)\n+    L_BRACK@[194; 195)\n+    IDENT@[195; 199)\n+    L_PAREN@[199; 200)\n+    IDENT@[200; 201)\n+    COMMA@[201; 202)\n+    WHITESPACE@[202; 203)\n+    IDENT@[203; 208)\n+    WHITESPACE@[208; 209)\n+    EQ@[209; 210)\n+    WHITESPACE@[210; 211)\n+    INT_NUMBER@[211; 212)\n+    R_PAREN@[212; 213)\n+    R_BRACK@[213; 214)\n+    WHITESPACE@[214; 215)\n+    POUND@[215; 216)\n+    EXCL@[216; 217)\n+    L_BRACK@[217; 218)\n+    IDENT@[218; 222)\n+    L_PAREN@[222; 223)\n+    IDENT@[223; 224)\n+    COMMA@[224; 225)\n+    WHITESPACE@[225; 226)\n+    IDENT@[226; 231)\n+    L_PAREN@[231; 232)\n+    INT_NUMBER@[232; 233)\n+    R_PAREN@[233; 234)\n+    R_PAREN@[234; 235)\n+    R_BRACK@[235; 236)"}, {"sha": "2739bfcdd83ba8ac81de6a0d23cb3dceb421e9c6", "filename": "validation.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f194750a2a4d5f034e89b937e1271637b884a503/validation.md", "raw_url": "https://github.com/rust-lang/rust/raw/f194750a2a4d5f034e89b937e1271637b884a503/validation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/validation.md?ref=f194750a2a4d5f034e89b937e1271637b884a503", "patch": "@@ -1,9 +1,14 @@\n Fixmes:\n \n+Lexer:\n * Fix `is_whitespace`, add more tests\n * Add more thorough tests for idents for XID_Start & XID_Continue\n * Validate that float and integer literals use digits only of the appropriate\n   base, and are in range\n * Validation for unclosed char literal\n * Strings are completely wrong: more tests and comparison with libsyntax.\n * Comment lexing is completely wrong\n+\n+Parser:\n+* Figure out what is the expected state of attribute grammar.\n+  Token trees or something more structured? Token trees would be unfortunate: no extend selection =/\n\\ No newline at end of file"}]}