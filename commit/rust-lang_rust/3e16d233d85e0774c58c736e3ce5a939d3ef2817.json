{"sha": "3e16d233d85e0774c58c736e3ce5a939d3ef2817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMTZkMjMzZDg1ZTA3NzRjNThjNzM2ZTNjZTVhOTM5ZDNlZjI4MTc=", "commit": {"author": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2021-04-13T13:55:21Z"}, "committer": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2021-04-13T13:55:21Z"}, "message": "move new c abi abort behavior behind feature gate\n\n ### Background\n\n    In #76570, new ABI strings including `C-unwind` were introduced.\n    Their behavior is specified in RFC 2945 [1].\n\n    However, it was reported in the #ffi-unwind stream of the Rust\n    community Zulip that this had altered the way that `extern \"C\"`\n    functions behaved even when the `c_unwind` feature gate was not\n    active. [2]\n\n ### Overview\n\n    This makes a small patch to\n    `rustc_mir_build::build::should_abort_on_panic`, so that the same\n    behavior from before is in place when the `c_unwind` gate is not\n    active.\n\n    `rustc_middle::ty::layout::fn_can_unwind` is not touched, as the\n    visible behavior should not differ before/after #76570. [3]\n\n ### Footnotes\n\n [1]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\n [2]: https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/Is.20unwinding.20through.20extern.20C.20UB.3F/near/230112325\n [3]: https://github.com/rust-lang/rust/pull/76570/files#diff-b0320c2b8868f325d83c027fc5d71732636e9763551e35895488f30fe057c6e9L2599-R2617", "tree": {"sha": "80d4aac08cb2c9e0abc8344883515e68072137e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d4aac08cb2c9e0abc8344883515e68072137e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e16d233d85e0774c58c736e3ce5a939d3ef2817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e16d233d85e0774c58c736e3ce5a939d3ef2817", "html_url": "https://github.com/rust-lang/rust/commit/3e16d233d85e0774c58c736e3ce5a939d3ef2817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e16d233d85e0774c58c736e3ce5a939d3ef2817/comments", "author": null, "committer": null, "parents": [{"sha": "1284da34da56a17ae368e4673920ec4120562cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1284da34da56a17ae368e4673920ec4120562cbd", "html_url": "https://github.com/rust-lang/rust/commit/1284da34da56a17ae368e4673920ec4120562cbd"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "f944e5f8f0420e038b4bb857a31451f3777ee761", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d233d85e0774c58c736e3ce5a939d3ef2817/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d233d85e0774c58c736e3ce5a939d3ef2817/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=3e16d233d85e0774c58c736e3ce5a939d3ef2817", "patch": "@@ -584,7 +584,7 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, abi: Abi) -> bo\n         Some(UnwindAttr::Aborts) => true,\n         // If no attribute was found and the panic strategy is `unwind`, then we should examine\n         // the function's ABI string to determine whether it should abort upon panic.\n-        None => {\n+        None if tcx.features().c_unwind => {\n             use Abi::*;\n             match abi {\n                 // In the case of ABI's that have an `-unwind` equivalent, check whether the ABI\n@@ -615,6 +615,10 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, abi: Abi) -> bo\n                 | Unadjusted => true,\n             }\n         }\n+        // If the `c_unwind` feature gate is not active, follow the behavior that was in place\n+        // prior to #76570. This is a special case: some functions have a C ABI but are meant to\n+        // unwind anyway. Don't stop them.\n+        None => false, // FIXME(#58794); should be `!(abi == Abi::Rust || abi == Abi::RustCall)`\n     }\n }\n "}]}