{"sha": "d38a8ad488047b8acdeed44bb7c67dc776324624", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOGE4YWQ0ODgwNDdiOGFjZGVlZDQ0YmI3YzY3ZGM3NzYzMjQ2MjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-28T23:56:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-28T23:57:14Z"}, "message": "Improve diagnostics for inaccessible constructors", "tree": {"sha": "14487d55b8c731ecc60e175039fa17de93bf64d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14487d55b8c731ecc60e175039fa17de93bf64d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d38a8ad488047b8acdeed44bb7c67dc776324624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d38a8ad488047b8acdeed44bb7c67dc776324624", "html_url": "https://github.com/rust-lang/rust/commit/d38a8ad488047b8acdeed44bb7c67dc776324624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d38a8ad488047b8acdeed44bb7c67dc776324624/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "html_url": "https://github.com/rust-lang/rust/commit/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b"}], "stats": {"total": 115, "additions": 103, "deletions": 12}, "files": [{"sha": "eb6c7f4bed5deaddb2cdeec5528afc97a4f3d2b0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d38a8ad488047b8acdeed44bb7c67dc776324624", "patch": "@@ -345,9 +345,7 @@ impl<'a> Resolver<'a> {\n                     let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n                                                    CtorKind::from_ast(struct_def));\n                     self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n-                    if !ctor_vis.is_at_least(vis, &*self) {\n-                        self.legacy_ctor_visibilities.insert(def.def_id(), (ctor_def, ctor_vis));\n-                    }\n+                    self.struct_constructors.insert(def.def_id(), (ctor_def, ctor_vis));\n                 }\n             }\n \n@@ -441,9 +439,17 @@ impl<'a> Resolver<'a> {\n             Def::Variant(..) | Def::TyAlias(..) => {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n-            Def::Fn(..) | Def::Static(..) | Def::Const(..) |\n-            Def::VariantCtor(..) | Def::StructCtor(..) => {\n+            Def::Fn(..) | Def::Static(..) | Def::Const(..) | Def::VariantCtor(..) => {\n+                self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, Mark::root()));\n+            }\n+            Def::StructCtor(..) => {\n                 self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, Mark::root()));\n+\n+                if let Some(struct_def_id) =\n+                        self.session.cstore.def_key(def_id).parent\n+                            .map(|index| DefId { krate: def_id.krate, index: index }) {\n+                    self.struct_constructors.insert(struct_def_id, (def, vis));\n+                }\n             }\n             Def::Trait(..) => {\n                 let module_kind = ModuleKind::Def(def, ident.name);"}, {"sha": "676ff98e602d6714fe1204b2f625583f874a594d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d38a8ad488047b8acdeed44bb7c67dc776324624", "patch": "@@ -1132,8 +1132,9 @@ pub struct Resolver<'a> {\n \n     potentially_unused_imports: Vec<&'a ImportDirective<'a>>,\n \n-    // Auxiliary map used only for reporting `legacy_constructor_visibility` lint.\n-    legacy_ctor_visibilities: DefIdMap<(Def, ty::Visibility)>,\n+    // This table maps struct IDs into struct constructor IDs,\n+    // it's not used during normal resolution, only for better error reporting.\n+    struct_constructors: DefIdMap<(Def, ty::Visibility)>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1313,7 +1314,7 @@ impl<'a> Resolver<'a> {\n             proc_macro_enabled: features.proc_macro,\n             warned_proc_macros: FxHashSet(),\n             potentially_unused_imports: Vec::new(),\n-            legacy_ctor_visibilities: DefIdMap(),\n+            struct_constructors: DefIdMap(),\n         }\n     }\n \n@@ -2209,6 +2210,15 @@ impl<'a> Resolver<'a> {\n                         _ => {}\n                     },\n                     _ if ns == ValueNS && is_struct_like(def) => {\n+                        if let Def::Struct(def_id) = def {\n+                            if let Some((ctor_def, ctor_vis))\n+                                    = this.struct_constructors.get(&def_id).cloned() {\n+                                if is_expected(ctor_def) && !this.is_accessible(ctor_vis) {\n+                                    err.span_label(span, &format!(\"constructor is not visible \\\n+                                                                   here due to private fields\"));\n+                                }\n+                            }\n+                        }\n                         err.span_label(span, &format!(\"did you mean `{} {{ /* fields */ }}`?\",\n                                                        path_str));\n                         return err;\n@@ -2244,7 +2254,7 @@ impl<'a> Resolver<'a> {\n                     let mut res = None;\n                     if let Def::Struct(def_id) = resolution.base_def {\n                         if let Some((ctor_def, ctor_vis))\n-                                = self.legacy_ctor_visibilities.get(&def_id).cloned() {\n+                                = self.struct_constructors.get(&def_id).cloned() {\n                             if is_expected(ctor_def) && self.is_accessible(ctor_vis) {\n                                 let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n                                 self.session.add_lint(lint, id, span,"}, {"sha": "3b62aaf2ab8e9450789eca11ffa54610af1bc333", "filename": "src/test/compile-fail/issue-38412.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs?ref=d38a8ad488047b8acdeed44bb7c67dc776324624", "patch": "@@ -11,6 +11,7 @@\n fn main() {\n     let Box(a) = loop { };\n     //~^ ERROR expected tuple struct/variant, found struct `Box`\n+    //~| ERROR expected tuple struct/variant, found struct `Box`\n \n     // (The below is a trick to allow compiler to infer a type for\n     // variable `a` without attempting to ascribe a type to the"}, {"sha": "f190f5dd0534d09999ccf95cd30d36e04df1bb75", "filename": "src/test/ui/resolve/auxiliary/privacy-struct-ctor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs?ref=d38a8ad488047b8acdeed44bb7c67dc776324624", "previous_filename": "src/test/compile-fail/auxiliary/privacy-struct-ctor.rs"}, {"sha": "3d0c76c740ad6cc27abc93cd75a4c5917059bc0a", "filename": "src/test/ui/resolve/privacy-struct-ctor.rs", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs?ref=d38a8ad488047b8acdeed44bb7c67dc776324624", "patch": "@@ -25,18 +25,24 @@ mod m {\n \n     fn f() {\n         n::Z; //~ ERROR tuple struct `Z` is private\n-        Z; //~ ERROR expected value, found struct `Z`\n+        Z;\n+        //~^ ERROR expected value, found struct `Z`\n+        //~| NOTE tuple struct constructors with private fields are invisible outside of their mod\n     }\n }\n \n use m::S; // OK, only the type is imported\n \n fn main() {\n     m::S; //~ ERROR tuple struct `S` is private\n-    S; //~ ERROR expected value, found struct `S`\n+    S;\n+    //~^ ERROR expected value, found struct `S`\n+    //~| NOTE constructor is not visible here due to private fields\n     m::n::Z; //~ ERROR tuple struct `Z` is private\n \n     xcrate::m::S; //~ ERROR tuple struct `S` is private\n-    xcrate::S; //~ ERROR expected value, found struct `xcrate::S`\n+    xcrate::S;\n+    //~^ ERROR expected value, found struct `xcrate::S`\n+    //~| NOTE constructor is not visible here due to private fields\n     xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n }", "previous_filename": "src/test/compile-fail/privacy-struct-ctor.rs"}, {"sha": "30fdbb02cc71522101be52b443dbd7b1cb697e4b", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d38a8ad488047b8acdeed44bb7c67dc776324624/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=d38a8ad488047b8acdeed44bb7c67dc776324624", "patch": "@@ -0,0 +1,68 @@\n+error[E0423]: expected value, found struct `Z`\n+  --> $DIR/privacy-struct-ctor.rs:28:9\n+   |\n+28 |         Z;\n+   |         ^\n+   |         |\n+   |         did you mean `Z { /* fields */ }`?\n+   |         constructor is not visible here due to private fields\n+   |\n+   = help: possible better candidate is found in another module, you can import it into scope:\n+             `use m::n::Z;`\n+\n+error[E0423]: expected value, found struct `S`\n+  --> $DIR/privacy-struct-ctor.rs:38:5\n+   |\n+38 |     S;\n+   |     ^\n+   |     |\n+   |     did you mean `S { /* fields */ }`?\n+   |     constructor is not visible here due to private fields\n+   |\n+   = help: possible better candidate is found in another module, you can import it into scope:\n+             `use m::S;`\n+\n+error[E0423]: expected value, found struct `xcrate::S`\n+  --> $DIR/privacy-struct-ctor.rs:44:5\n+   |\n+44 |     xcrate::S;\n+   |     ^^^^^^^^^\n+   |     |\n+   |     did you mean `xcrate::S { /* fields */ }`?\n+   |     constructor is not visible here due to private fields\n+   |\n+   = help: possible better candidate is found in another module, you can import it into scope:\n+             `use m::S;`\n+\n+error: tuple struct `Z` is private\n+  --> $DIR/privacy-struct-ctor.rs:27:9\n+   |\n+27 |         n::Z; //~ ERROR tuple struct `Z` is private\n+   |         ^^^^\n+\n+error: tuple struct `S` is private\n+  --> $DIR/privacy-struct-ctor.rs:37:5\n+   |\n+37 |     m::S; //~ ERROR tuple struct `S` is private\n+   |     ^^^^\n+\n+error: tuple struct `Z` is private\n+  --> $DIR/privacy-struct-ctor.rs:41:5\n+   |\n+41 |     m::n::Z; //~ ERROR tuple struct `Z` is private\n+   |     ^^^^^^^\n+\n+error: tuple struct `S` is private\n+  --> $DIR/privacy-struct-ctor.rs:43:5\n+   |\n+43 |     xcrate::m::S; //~ ERROR tuple struct `S` is private\n+   |     ^^^^^^^^^^^^\n+\n+error: tuple struct `Z` is private\n+  --> $DIR/privacy-struct-ctor.rs:47:5\n+   |\n+47 |     xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}]}