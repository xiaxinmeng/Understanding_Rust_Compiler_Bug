{"sha": "0fb01224dd6d1966ca4f64416e092243ae19ec84", "node_id": "C_kwDOAAsO6NoAKDBmYjAxMjI0ZGQ2ZDE5NjZjYTRmNjQ0MTZlMDkyMjQzYWUxOWVjODQ", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T06:56:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T06:56:15Z"}, "message": "Rollup merge of #87631 - :solarish_upd_fs, r=joshtriplett\n\nos current_exe using same approach as linux to get always the full ab\u2026\n\n\u2026solute path", "tree": {"sha": "427b8564895ed844636187121b0e112750f3ad49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427b8564895ed844636187121b0e112750f3ad49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb01224dd6d1966ca4f64416e092243ae19ec84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW/cPCRBK7hj4Ov3rIwAAGZYIAHwuZgDhz2nKeODXpQSvW9CW\nxeYYEwPCBFLuBJf6LRihftZSZw5ea4Ga5ue1N14ZG2Xb23y8gr4aBxXqjPahV48W\n4BxRU9gl3g8l4zJQ8BZAOmNy5ecQX+xPoegT9MRejmZja/aZFh1F7f82lq0oTrm1\n/4fV9g2Fh9vF1Dczng+9HSeXo3aX9kLv/Umswgb27TKXlE7tmib1ZA43vBfB0nSJ\nY3ThdOPrxYgAWH+t7EKpklbgvKEDtkz9XfrVqi55PTDMgywFuq6pIq1AO85x7ZbO\nDiM6EVj7fMSmNzJS/w3PROxUfzyjQsWcN1uHNvdy16kg7cEShDdPT6aO62DU2pM=\n=Z+IE\n-----END PGP SIGNATURE-----\n", "payload": "tree 427b8564895ed844636187121b0e112750f3ad49\nparent a804c4b1123ae665a8d4f726524109c49efac5b6\nparent cb4519e59c75b848e808a28f2046c8bc2f91b943\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633416975 -0700\ncommitter GitHub <noreply@github.com> 1633416975 -0700\n\nRollup merge of #87631 - :solarish_upd_fs, r=joshtriplett\n\nos current_exe using same approach as linux to get always the full ab\u2026\n\n\u2026solute path\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb01224dd6d1966ca4f64416e092243ae19ec84", "html_url": "https://github.com/rust-lang/rust/commit/0fb01224dd6d1966ca4f64416e092243ae19ec84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb01224dd6d1966ca4f64416e092243ae19ec84/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a804c4b1123ae665a8d4f726524109c49efac5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a804c4b1123ae665a8d4f726524109c49efac5b6", "html_url": "https://github.com/rust-lang/rust/commit/a804c4b1123ae665a8d4f726524109c49efac5b6"}, {"sha": "cb4519e59c75b848e808a28f2046c8bc2f91b943", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4519e59c75b848e808a28f2046c8bc2f91b943", "html_url": "https://github.com/rust-lang/rust/commit/cb4519e59c75b848e808a28f2046c8bc2f91b943"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "87893d269120bb0eb09adcbb253b9c5aa441c4c6", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01224dd6d1966ca4f64416e092243ae19ec84/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01224dd6d1966ca4f64416e092243ae19ec84/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=0fb01224dd6d1966ca4f64416e092243ae19ec84", "patch": "@@ -380,20 +380,24 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    extern \"C\" {\n-        fn getexecname() -> *const c_char;\n-    }\n-    unsafe {\n-        let path = getexecname();\n-        if path.is_null() {\n-            Err(io::Error::last_os_error())\n-        } else {\n-            let filename = CStr::from_ptr(path).to_bytes();\n-            let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n+    if let Ok(path) = crate::fs::read_link(\"/proc/self/path/a.out\") {\n+        Ok(path)\n+    } else {\n+        extern \"C\" {\n+            fn getexecname() -> *const c_char;\n+        }\n+        unsafe {\n+            let path = getexecname();\n+            if path.is_null() {\n+                Err(io::Error::last_os_error())\n+            } else {\n+                let filename = CStr::from_ptr(path).to_bytes();\n+                let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n \n-            // Prepend a current working directory to the path if\n-            // it doesn't contain an absolute pathname.\n-            if filename[0] == b'/' { Ok(path) } else { getcwd().map(|cwd| cwd.join(path)) }\n+                // Prepend a current working directory to the path if\n+                // it doesn't contain an absolute pathname.\n+                if filename[0] == b'/' { Ok(path) } else { getcwd().map(|cwd| cwd.join(path)) }\n+            }\n         }\n     }\n }"}]}