{"sha": "f4ee5582c7ed1af52485816f96c84296348f17dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZWU1NTgyYzdlZDFhZjUyNDg1ODE2Zjk2Yzg0Mjk2MzQ4ZjE3ZGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-27T21:50:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-27T21:50:33Z"}, "message": "core: Rename iter::to_list to to_vec. Closes #2056", "tree": {"sha": "1954547d9ccdc770f74493cc6854e2069fc48596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1954547d9ccdc770f74493cc6854e2069fc48596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ee5582c7ed1af52485816f96c84296348f17dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ee5582c7ed1af52485816f96c84296348f17dc", "html_url": "https://github.com/rust-lang/rust/commit/f4ee5582c7ed1af52485816f96c84296348f17dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ee5582c7ed1af52485816f96c84296348f17dc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "html_url": "https://github.com/rust-lang/rust/commit/ba3292d3be4b05a86a03c5f03eea24fe289a4e81"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "e5cb78c38d49309f0e73a53ad7a9aeeb09386bb7", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4ee5582c7ed1af52485816f96c84296348f17dc/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ee5582c7ed1af52485816f96c84296348f17dc/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=f4ee5582c7ed1af52485816f96c84296348f17dc", "patch": "@@ -99,14 +99,14 @@ fn foldr<A:copy,B,IA:iterable<A>>(\n     ret b;\n }\n \n-fn to_list<A:copy,IA:iterable<A>>(self: IA) -> [A] {\n+fn to_vec<A:copy,IA:iterable<A>>(self: IA) -> [A] {\n     foldl::<A,[A],IA>(self, [], {|r, a| r + [a]})\n }\n \n // FIXME: This could be made more efficient with an riterable interface\n // #2005\n fn reversed<A:copy,IA:iterable<A>>(self: IA, blk: fn(A)) {\n-    vec::riter(to_list(self), blk)\n+    vec::riter(to_vec(self), blk)\n }\n \n fn count<A,IA:iterable<A>>(self: IA, x: A) -> uint {\n@@ -167,17 +167,17 @@ fn test_enumerate() {\n }\n \n #[test]\n-fn test_map_and_to_list() {\n+fn test_map_and_to_vec() {\n     let a = bind vec::iter([0, 1, 2], _);\n     let b = bind map(a, {|i| 2*i}, _);\n-    let c = to_list(b);\n+    let c = to_vec(b);\n     assert c == [0, 2, 4];\n }\n \n #[test]\n fn test_map_directly_on_vec() {\n     let b = bind map([0, 1, 2], {|i| 2*i}, _);\n-    let c = to_list(b);\n+    let c = to_vec(b);\n     assert c == [0, 2, 4];\n }\n \n@@ -187,7 +187,7 @@ fn test_filter_on_int_range() {\n         ret (i % 2) == 0;\n     }\n \n-    let l = to_list(bind filter(bind int::range(0, 10, _), is_even, _));\n+    let l = to_vec(bind filter(bind int::range(0, 10, _), is_even, _));\n     assert l == [0, 2, 4, 6, 8];\n }\n \n@@ -197,7 +197,7 @@ fn test_filter_on_uint_range() {\n         ret (i % 2u) == 0u;\n     }\n \n-    let l = to_list(bind filter(bind uint::range(0u, 10u, _), is_even, _));\n+    let l = to_vec(bind filter(bind uint::range(0u, 10u, _), is_even, _));\n     assert l == [0u, 2u, 4u, 6u, 8u];\n }\n \n@@ -211,7 +211,7 @@ fn test_filter_map() {\n         }\n     }\n \n-    let l = to_list(bind filter_map(\n+    let l = to_vec(bind filter_map(\n         bind int::range(0, 5, _), negativate_the_evens, _));\n     assert l == [0, -2, -4];\n }\n@@ -225,7 +225,7 @@ fn test_flat_map_with_option() {\n \n     let a = bind vec::iter([0, 1, 2], _);\n     let b = bind flat_map(a, if_even, _);\n-    let c = to_list(b);\n+    let c = to_vec(b);\n     assert c == [0, 2];\n }\n \n@@ -239,7 +239,7 @@ fn test_flat_map_with_list() {\n \n     let a = bind vec::iter([0, 1, 2, 3], _);\n     let b = bind flat_map(a, repeat, _);\n-    let c = to_list(b);\n+    let c = to_vec(b);\n     #debug[\"c = %?\", c];\n     assert c == [1, 2, 2, 3, 3, 3];\n }\n@@ -281,7 +281,7 @@ fn test_max_empty() {\n \n #[test]\n fn test_reversed() {\n-    assert to_list(bind reversed([1, 2, 3], _)) == [3, 2, 1];\n+    assert to_vec(bind reversed([1, 2, 3], _)) == [3, 2, 1];\n }\n \n #[test]"}]}