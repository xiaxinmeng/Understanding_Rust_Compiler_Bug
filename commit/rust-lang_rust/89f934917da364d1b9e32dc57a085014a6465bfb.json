{"sha": "89f934917da364d1b9e32dc57a085014a6465bfb", "node_id": "C_kwDOAAsO6NoAKDg5ZjkzNDkxN2RhMzY0ZDFiOWUzMmRjNTdhMDg1MDE0YTY0NjViZmI", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:33:28Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:26Z"}, "message": "Small corrections of documentation", "tree": {"sha": "7b9b24e0490d986513dbaa7dbdfa73cfc01ecfa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9b24e0490d986513dbaa7dbdfa73cfc01ecfa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89f934917da364d1b9e32dc57a085014a6465bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89f934917da364d1b9e32dc57a085014a6465bfb", "html_url": "https://github.com/rust-lang/rust/commit/89f934917da364d1b9e32dc57a085014a6465bfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89f934917da364d1b9e32dc57a085014a6465bfb/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72196ee6661a38cb640d66c2a8d9941f9d6c6bf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72196ee6661a38cb640d66c2a8d9941f9d6c6bf4", "html_url": "https://github.com/rust-lang/rust/commit/72196ee6661a38cb640d66c2a8d9941f9d6c6bf4"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "2c631a937b6228ca5aa68b3557f70888bef320ce", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89f934917da364d1b9e32dc57a085014a6465bfb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f934917da364d1b9e32dc57a085014a6465bfb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=89f934917da364d1b9e32dc57a085014a6465bfb", "patch": "@@ -560,12 +560,12 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n         }\n     }\n \n-    /// Retrieve the value stored for a place, or \u22a5 if it is not tracked.\n+    /// Retrieve the value stored for a place, or \u22a4 if it is not tracked.\n     pub fn get(&self, place: PlaceRef<'_>, map: &Map) -> V {\n         map.find(place).map(|place| self.get_idx(place, map)).unwrap_or(V::top())\n     }\n \n-    /// Retrieve the value stored for a place index, or \u22a5 if it is not tracked.\n+    /// Retrieve the value stored for a place index, or \u22a4 if it is not tracked.\n     pub fn get_idx(&self, place: PlaceIndex, map: &Map) -> V {\n         match &self.0 {\n             StateData::Reachable(values) => {\n@@ -652,7 +652,7 @@ impl Map {\n         mut filter: impl FnMut(Ty<'tcx>) -> bool,\n         exclude: &FxHashSet<Place<'tcx>>,\n     ) {\n-        // This is used to tell whether a type is `!Freeze`.\n+        // This is used to tell whether a type is `Freeze`.\n         let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n \n         let mut projection = Vec::new();"}]}