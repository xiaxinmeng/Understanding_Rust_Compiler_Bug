{"sha": "cd5f5a129fab998a1ee7c72204d093dc475981d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNWY1YTEyOWZhYjk5OGExZWU3YzcyMjA0ZDA5M2RjNDc1OTgxZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-18T03:05:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-18T03:05:27Z"}, "message": "Auto merge of #52353 - alexcrichton:wasm-custom-section, r=eddyb\n\nrustc: Use link_section, not wasm_custom_section\n\nThis commit transitions definitions of custom sections on the wasm target from\nthe unstable `#[wasm_custom_section]` attribute to the\nalready-stable-for-other-targets `#[link_section]` attribute. Mostly the same\nrestrictions apply as before, except that this now applies only to statics.\n\nCloses #51088", "tree": {"sha": "e59dcf1d561e6aff89440217899dfe2a366a09dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59dcf1d561e6aff89440217899dfe2a366a09dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd5f5a129fab998a1ee7c72204d093dc475981d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f5a129fab998a1ee7c72204d093dc475981d1", "html_url": "https://github.com/rust-lang/rust/commit/cd5f5a129fab998a1ee7c72204d093dc475981d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f5a129fab998a1ee7c72204d093dc475981d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f686885a14fff16ddf984b08fb0d9ded07e66f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f686885a14fff16ddf984b08fb0d9ded07e66f1c", "html_url": "https://github.com/rust-lang/rust/commit/f686885a14fff16ddf984b08fb0d9ded07e66f1c"}, {"sha": "b7ef674832c0d7e703e12f7880a928bf8cd0c9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ef674832c0d7e703e12f7880a928bf8cd0c9c5", "html_url": "https://github.com/rust-lang/rust/commit/b7ef674832c0d7e703e12f7880a928bf8cd0c9c5"}], "stats": {"total": 475, "additions": 147, "deletions": 328}, "files": [{"sha": "79d0aed10ed78fec554391695c2feec281f6854d", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -81,10 +81,6 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                     self.tcx.sess.span_err(attr.span, \"\\\n                         must only be attached to foreign modules\");\n                 }\n-            } else if attr.check_name(\"wasm_custom_section\") {\n-                if target != Target::Const {\n-                    self.tcx.sess.span_err(attr.span, \"only allowed on consts\");\n-                }\n             }\n         }\n "}, {"sha": "1df756d204de7b4d8c67676de69e0a4c09fe21b8", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -2266,20 +2266,22 @@ pub struct CodegenFnAttrs {\n     pub export_name: Option<Symbol>,\n     pub target_features: Vec<Symbol>,\n     pub linkage: Option<Linkage>,\n-    pub wasm_custom_section: Option<Symbol>,\n+    pub link_section: Option<Symbol>,\n }\n \n bitflags! {\n     #[derive(RustcEncodable, RustcDecodable)]\n-    pub struct CodegenFnAttrFlags: u8 {\n-        const COLD                      = 0b0000_0001;\n-        const ALLOCATOR                 = 0b0000_0010;\n-        const UNWIND                    = 0b0000_0100;\n-        const RUSTC_ALLOCATOR_NOUNWIND  = 0b0000_1000;\n-        const NAKED                     = 0b0001_0000;\n-        const NO_MANGLE                 = 0b0010_0000;\n-        const RUSTC_STD_INTERNAL_SYMBOL = 0b0100_0000;\n-        const NO_DEBUG                  = 0b1000_0000;\n+    pub struct CodegenFnAttrFlags: u32 {\n+        const COLD                      = 1 << 0;\n+        const ALLOCATOR                 = 1 << 1;\n+        const UNWIND                    = 1 << 2;\n+        const RUSTC_ALLOCATOR_NOUNWIND  = 1 << 3;\n+        const NAKED                     = 1 << 4;\n+        const NO_MANGLE                 = 1 << 5;\n+        const RUSTC_STD_INTERNAL_SYMBOL = 1 << 6;\n+        const NO_DEBUG                  = 1 << 7;\n+        const THREAD_LOCAL              = 1 << 8;\n+        const USED                      = 1 << 9;\n     }\n }\n \n@@ -2291,7 +2293,7 @@ impl CodegenFnAttrs {\n             export_name: None,\n             target_features: vec![],\n             linkage: None,\n-            wasm_custom_section: None,\n+            link_section: None,\n         }\n     }\n "}, {"sha": "28f3f20a82bc5d617af7b98cde64c89788ea8b1e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -1120,7 +1120,7 @@ impl_stable_hash_for!(struct hir::CodegenFnAttrs {\n     export_name,\n     target_features,\n     linkage,\n-    wasm_custom_section,\n+    link_section,\n });\n \n impl<'hir> HashStable<StableHashingContext<'hir>> for hir::CodegenFnAttrFlags"}, {"sha": "126abb0d359bb0fd63614bad796070b0205aef9e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -313,11 +313,6 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt,\n         return true;\n     }\n \n-    // These constants are special for wasm\n-    if attr::contains_name(attrs, \"wasm_custom_section\") {\n-        return true;\n-    }\n-\n     tcx.lint_level_at_node(lint::builtin::DEAD_CODE, id).0 == lint::Allow\n }\n "}, {"sha": "f0d6b8170eb64ccc6b1b1ca848e15610ed0cd7a2", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -24,7 +24,6 @@ pub enum MonoItem<'tcx> {\n     Fn(Instance<'tcx>),\n     Static(DefId),\n     GlobalAsm(NodeId),\n-    CustomSection(DefId),\n }\n \n impl<'tcx> MonoItem<'tcx> {\n@@ -38,8 +37,7 @@ impl<'tcx> MonoItem<'tcx> {\n             // Conservatively estimate the size of a static declaration\n             // or assembly to be 1.\n             MonoItem::Static(_) |\n-            MonoItem::GlobalAsm(_) |\n-            MonoItem::CustomSection(_) => 1,\n+            MonoItem::GlobalAsm(_) => 1,\n         }\n     }\n }\n@@ -54,8 +52,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for MonoItem<'tcx> {\n             MonoItem::Fn(ref instance) => {\n                 instance.hash_stable(hcx, hasher);\n             }\n-            MonoItem::Static(def_id) |\n-            MonoItem::CustomSection(def_id) => {\n+            MonoItem::Static(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n             MonoItem::GlobalAsm(node_id) => {"}, {"sha": "6d37f1ca3cafc648bb3097cf484d5f0deb482075", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 9, "deletions": 57, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -33,7 +33,6 @@ use back::link;\n use back::write::{self, OngoingCodegen, create_target_machine};\n use llvm::{ContextRef, ModuleRef, ValueRef, Vector, get_param};\n use llvm;\n-use libc::c_uint;\n use metadata;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::middle::lang_items::StartFnLangItem;\n@@ -87,8 +86,7 @@ use std::sync::mpsc;\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n use syntax::attr;\n-use rustc::hir;\n-use syntax::ast;\n+use rustc::hir::{self, CodegenFnAttrs};\n \n use mir::operand::OperandValue;\n \n@@ -513,17 +511,14 @@ pub fn codegen_instance<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, instance: Instance<'\n     mir::codegen_mir(cx, lldecl, &mir, instance, sig);\n }\n \n-pub fn set_link_section(cx: &CodegenCx,\n-                        llval: ValueRef,\n-                        attrs: &[ast::Attribute]) {\n-    if let Some(sect) = attr::first_attr_value_str_by_name(attrs, \"link_section\") {\n-        if contains_null(&sect.as_str()) {\n-            cx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\", &sect));\n-        }\n-        unsafe {\n-            let buf = CString::new(sect.as_str().as_bytes()).unwrap();\n-            llvm::LLVMSetSection(llval, buf.as_ptr());\n-        }\n+pub fn set_link_section(llval: ValueRef, attrs: &CodegenFnAttrs) {\n+    let sect = match attrs.link_section {\n+        Some(name) => name,\n+        None => return,\n+    };\n+    unsafe {\n+        let buf = CString::new(sect.as_str().as_bytes()).unwrap();\n+        llvm::LLVMSetSection(llval, buf.as_ptr());\n     }\n }\n \n@@ -613,10 +608,6 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n     }\n }\n \n-fn contains_null(s: &str) -> bool {\n-    s.bytes().any(|b| b == 0)\n-}\n-\n fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                             llmod_id: &str,\n                             link_meta: &LinkMeta)\n@@ -1369,42 +1360,3 @@ mod temp_stable_hash_impls {\n         }\n     }\n }\n-\n-pub fn define_custom_section(cx: &CodegenCx, def_id: DefId) {\n-    use rustc::mir::interpret::GlobalId;\n-\n-    assert!(cx.tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\"));\n-\n-    info!(\"loading wasm section {:?}\", def_id);\n-\n-    let section = cx.tcx.codegen_fn_attrs(def_id).wasm_custom_section.unwrap();\n-\n-    let instance = ty::Instance::mono(cx.tcx, def_id);\n-    let cid = GlobalId {\n-        instance,\n-        promoted: None\n-    };\n-    let param_env = ty::ParamEnv::reveal_all();\n-    let val = cx.tcx.const_eval(param_env.and(cid)).unwrap();\n-    let alloc = cx.tcx.const_value_to_allocation(val);\n-\n-    unsafe {\n-        let section = llvm::LLVMMDStringInContext(\n-            cx.llcx,\n-            section.as_str().as_ptr() as *const _,\n-            section.as_str().len() as c_uint,\n-        );\n-        let alloc = llvm::LLVMMDStringInContext(\n-            cx.llcx,\n-            alloc.bytes.as_ptr() as *const _,\n-            alloc.bytes.len() as c_uint,\n-        );\n-        let data = [section, alloc];\n-        let meta = llvm::LLVMMDNodeInContext(cx.llcx, data.as_ptr(), 2);\n-        llvm::LLVMAddNamedMetadataOperand(\n-            cx.llmod,\n-            \"wasm.custom_sections\\0\".as_ptr() as *const _,\n-            meta,\n-        );\n-    }\n-}"}, {"sha": "5c00947889dfe98a40094a28af3025e87978cf3c", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use libc::c_uint;\n use llvm;\n use llvm::{SetUnnamedAddr};\n use llvm::{ValueRef, True};\n@@ -24,11 +25,9 @@ use type_of::LayoutLlvmExt;\n use rustc::ty;\n use rustc::ty::layout::{Align, LayoutOf};\n \n-use rustc::hir;\n+use rustc::hir::{self, CodegenFnAttrFlags};\n \n use std::ffi::{CStr, CString};\n-use syntax::ast;\n-use syntax::attr;\n \n pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {\n     unsafe {\n@@ -244,18 +243,19 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n }\n \n pub fn codegen_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                              def_id: DefId,\n-                              is_mutable: bool,\n-                              attrs: &[ast::Attribute]) {\n+                                def_id: DefId,\n+                                is_mutable: bool) {\n     unsafe {\n-        let g = get_static(cx, def_id);\n+        let attrs = cx.tcx.codegen_fn_attrs(def_id);\n \n         let (v, alloc) = match ::mir::codegen_static_initializer(cx, def_id) {\n             Ok(v) => v,\n             // Error has already been reported\n             Err(_) => return,\n         };\n \n+        let g = get_static(cx, def_id);\n+\n         // boolean SSA values are i1, but they have to be stored in i8 slots,\n         // otherwise some LLVM optimization passes don't work as expected\n         let mut val_llty = val_ty(v);\n@@ -307,7 +307,7 @@ pub fn codegen_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         debuginfo::create_global_var_metadata(cx, def_id, g);\n \n-        if attr::contains_name(attrs, \"thread_local\") {\n+        if attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {\n             llvm::set_thread_local_mode(g, cx.tls_model);\n \n             // Do not allow LLVM to change the alignment of a TLS on macOS.\n@@ -349,9 +349,34 @@ pub fn codegen_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             }\n         }\n \n-        base::set_link_section(cx, g, attrs);\n \n-        if attr::contains_name(attrs, \"used\") {\n+        // Wasm statics with custom link sections get special treatment as they\n+        // go into custom sections of the wasm executable.\n+        if cx.tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+            if let Some(section) = attrs.link_section {\n+                let section = llvm::LLVMMDStringInContext(\n+                    cx.llcx,\n+                    section.as_str().as_ptr() as *const _,\n+                    section.as_str().len() as c_uint,\n+                );\n+                let alloc = llvm::LLVMMDStringInContext(\n+                    cx.llcx,\n+                    alloc.bytes.as_ptr() as *const _,\n+                    alloc.bytes.len() as c_uint,\n+                );\n+                let data = [section, alloc];\n+                let meta = llvm::LLVMMDNodeInContext(cx.llcx, data.as_ptr(), 2);\n+                llvm::LLVMAddNamedMetadataOperand(\n+                    cx.llmod,\n+                    \"wasm.custom_sections\\0\".as_ptr() as *const _,\n+                    meta,\n+                );\n+            }\n+        } else {\n+            base::set_link_section(g, &attrs);\n+        }\n+\n+        if attrs.flags.contains(CodegenFnAttrFlags::USED) {\n             // This static will be stored in the llvm.used variable which is an array of i8*\n             let cast = llvm::LLVMConstPointerCast(g, Type::i8p(cx).to_ref());\n             cx.used_statics.borrow_mut().push(cast);"}, {"sha": "a528008e3b4bdfbf991a7c906a582576a43768ca", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -54,9 +54,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                         bug!(\"Expected Def::Static for {:?}, found nothing\", def_id)\n                     }\n                 };\n-                let attrs = tcx.get_attrs(def_id);\n-\n-                consts::codegen_static(&cx, def_id, is_mutable, &attrs);\n+                consts::codegen_static(&cx, def_id, is_mutable);\n             }\n             MonoItem::GlobalAsm(node_id) => {\n                 let item = cx.tcx.hir.expect_item(node_id);\n@@ -66,9 +64,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                     span_bug!(item.span, \"Mismatch between hir::Item type and MonoItem type\")\n                 }\n             }\n-            MonoItem::CustomSection(def_id) => {\n-                base::define_custom_section(cx, def_id);\n-            }\n             MonoItem::Fn(instance) => {\n                 base::codegen_instance(&cx, instance);\n             }\n@@ -100,7 +95,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n             MonoItem::Fn(instance) => {\n                 predefine_fn(cx, instance, linkage, visibility, &symbol_name);\n             }\n-            MonoItem::CustomSection(..) => {}\n             MonoItem::GlobalAsm(..) => {}\n         }\n \n@@ -120,9 +114,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n             MonoItem::Static(id) => {\n                 format!(\"Static({:?})\", id)\n             }\n-            MonoItem::CustomSection(id) => {\n-                format!(\"CustomSection({:?})\", id)\n-            }\n             MonoItem::GlobalAsm(id) => {\n                 format!(\"GlobalAsm({:?})\", id)\n             }\n@@ -164,10 +155,10 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             !instance.substs.has_param_types());\n \n     let mono_ty = instance.ty(cx.tcx);\n-    let attrs = instance.def.attrs(cx.tcx);\n+    let attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n     let lldecl = declare::declare_fn(cx, symbol_name, mono_ty);\n     unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n-    base::set_link_section(cx, lldecl, &attrs);\n+    base::set_link_section(lldecl, &attrs);\n     if linkage == Linkage::LinkOnceODR ||\n         linkage == Linkage::WeakODR {\n         llvm::SetUniqueComdat(cx.llmod, lldecl);"}, {"sha": "2f983e25acd74347d469dd41ec6612c3dc70763f", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -414,9 +414,6 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         MonoItem::GlobalAsm(..) => {\n             recursion_depth_reset = None;\n         }\n-        MonoItem::CustomSection(..) => {\n-            recursion_depth_reset = None;\n-        }\n     }\n \n     record_accesses(tcx, starting_point, &neighbors[..], inlining_map);\n@@ -993,13 +990,6 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemKind::Const(..) => {\n                 // const items only generate mono items if they are\n                 // actually used somewhere. Just declaring them is insufficient.\n-\n-                let def_id = self.tcx.hir.local_def_id(item.id);\n-                if self.tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") &&\n-                    self.tcx.codegen_fn_attrs(def_id).wasm_custom_section.is_some()\n-                {\n-                    self.output.push(MonoItem::CustomSection(def_id));\n-                }\n             }\n             hir::ItemKind::Fn(..) => {\n                 let def_id = self.tcx.hir.local_def_id(item.id);"}, {"sha": "95968c0ea4f1fb5b4a23a008ea456a06c7e096ea", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -63,7 +63,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                 instance.substs.types().next().is_some()\n             }\n             MonoItem::Static(..) |\n-            MonoItem::CustomSection(..) |\n             MonoItem::GlobalAsm(..) => false,\n         }\n     }\n@@ -74,9 +73,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::Static(def_id) => {\n                 tcx.symbol_name(Instance::mono(tcx, def_id))\n             }\n-            MonoItem::CustomSection(def_id) => {\n-                tcx.symbol_name(Instance::mono(tcx, def_id))\n-            }\n             MonoItem::GlobalAsm(node_id) => {\n                 let def_id = tcx.hir.local_def_id(node_id);\n                 ty::SymbolName {\n@@ -126,7 +122,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                 }\n             }\n             MonoItem::Static(..) |\n-            MonoItem::CustomSection(..) |\n             MonoItem::GlobalAsm(..) => {\n                 InstantiationMode::GloballyShared { may_conflict: false }\n             }\n@@ -137,7 +132,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         let def_id = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => instance.def_id(),\n             MonoItem::Static(def_id) => def_id,\n-            MonoItem::CustomSection(..) => return None,\n             MonoItem::GlobalAsm(..) => return None,\n         };\n \n@@ -175,7 +169,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         let (def_id, substs) = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n             MonoItem::Static(def_id) => (def_id, Substs::empty()),\n-            MonoItem::CustomSection(..) => return true,\n             // global asm never has predicates\n             MonoItem::GlobalAsm(..) => return true\n         };\n@@ -192,10 +185,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                 let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n                 to_string_internal(tcx, \"static \", instance)\n             },\n-            MonoItem::CustomSection(def_id) => {\n-                let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n-                to_string_internal(tcx, \"custom-section \", instance)\n-            },\n             MonoItem::GlobalAsm(..) => {\n                 \"global_asm\".to_string()\n             }\n@@ -221,9 +210,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::Static(def_id) => {\n                 tcx.hir.as_local_node_id(def_id)\n             }\n-            MonoItem::CustomSection(def_id) => {\n-                tcx.hir.as_local_node_id(def_id)\n-            }\n             MonoItem::GlobalAsm(node_id) => {\n                 Some(node_id)\n             }"}, {"sha": "f83ea6fa13b5284b1fb1cb349f181d2f987fe127", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -180,8 +180,7 @@ pub trait CodegenUnitExt<'tcx> {\n                         }\n                     }\n                 }\n-                MonoItem::Static(def_id) |\n-                MonoItem::CustomSection(def_id) => {\n+                MonoItem::Static(def_id) => {\n                     tcx.hir.as_local_node_id(def_id)\n                 }\n                 MonoItem::GlobalAsm(node_id) => {\n@@ -450,9 +449,6 @@ fn place_root_mono_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         };\n                         (Linkage::External, visibility)\n                     }\n-                    MonoItem::CustomSection(..) => {\n-                        (Linkage::External, Visibility::Hidden)\n-                    }\n                     MonoItem::GlobalAsm(node_id) => {\n                         let def_id = tcx.hir.local_def_id(node_id);\n                         let visibility = if tcx.is_reachable_non_generic(def_id) {\n@@ -718,7 +714,6 @@ fn characteristic_def_id_of_mono_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Some(def_id)\n         }\n         MonoItem::Static(def_id) => Some(def_id),\n-        MonoItem::CustomSection(def_id) => Some(def_id),\n         MonoItem::GlobalAsm(node_id) => Some(tcx.hir.local_def_id(node_id)),\n     }\n }"}, {"sha": "6e09b83a7b059dffe330c6a56026fd11e07020c8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -1270,14 +1270,12 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n     match it.node {\n       // Consts can play a role in type-checking, so they are included here.\n       hir::ItemKind::Static(..) => {\n-        tcx.typeck_tables_of(tcx.hir.local_def_id(it.id));\n+        let def_id = tcx.hir.local_def_id(it.id);\n+        tcx.typeck_tables_of(def_id);\n+        maybe_check_static_with_link_section(tcx, def_id, it.span);\n       }\n       hir::ItemKind::Const(..) => {\n         tcx.typeck_tables_of(tcx.hir.local_def_id(it.id));\n-        if it.attrs.iter().any(|a| a.check_name(\"wasm_custom_section\")) {\n-            let def_id = tcx.hir.local_def_id(it.id);\n-            check_const_is_u8_array(tcx, def_id, it.span);\n-        }\n       }\n       hir::ItemKind::Enum(ref enum_definition, _) => {\n         check_enum(tcx,\n@@ -1350,19 +1348,38 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n     }\n }\n \n-fn check_const_is_u8_array<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                     def_id: DefId,\n-                                     span: Span) {\n-    match tcx.type_of(def_id).sty {\n-        ty::TyArray(t, _) => {\n-            match t.sty {\n-                ty::TyUint(ast::UintTy::U8) => return,\n-                _ => {}\n-            }\n+fn maybe_check_static_with_link_section(tcx: TyCtxt, id: DefId, span: Span) {\n+    // Only restricted on wasm32 target for now\n+    if !tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+        return\n+    }\n+\n+    // If `#[link_section]` is missing, then nothing to verify\n+    let attrs = tcx.codegen_fn_attrs(id);\n+    if attrs.link_section.is_none() {\n+        return\n+    }\n+\n+    // For the wasm32 target statics with #[link_section] are placed into custom\n+    // sections of the final output file, but this isn't link custom sections of\n+    // other executable formats. Namely we can only embed a list of bytes,\n+    // nothing with pointers to anything else or relocations. If any relocation\n+    // show up, reject them here.\n+    let instance = ty::Instance::mono(tcx, id);\n+    let cid = GlobalId {\n+        instance,\n+        promoted: None\n+    };\n+    let param_env = ty::ParamEnv::reveal_all();\n+    if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n+        let alloc = tcx.const_value_to_allocation(static_);\n+        if alloc.relocations.len() != 0 {\n+            let msg = \"statics with a custom `#[link_section]` must be a \\\n+                       simple list of bytes on the wasm target with no \\\n+                       extra levels of indirection such as references\";\n+            tcx.sess.span_err(span, msg);\n         }\n-        _ => {}\n     }\n-    tcx.sess.span_err(span, \"must be an array of bytes like `[u8; N]`\");\n }\n \n fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "03fa7f521d9ad7dec011e3d35fb062bca388be7d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -1867,6 +1867,10 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if attr.check_name(\"no_debug\") {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_DEBUG;\n+        } else if attr.check_name(\"used\") {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n+        } else if attr.check_name(\"thread_local\") {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if attr.check_name(\"inline\") {\n             codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n                 if attr.path != \"inline\" {\n@@ -1929,12 +1933,14 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n             if let Some(val) = attr.value_str() {\n                 codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, id, &val.as_str()));\n             }\n-        } else if attr.check_name(\"wasm_custom_section\") {\n-            match attr.value_str() {\n-                Some(name) => codegen_fn_attrs.wasm_custom_section = Some(name),\n-                None => {\n-                    tcx.sess.span_err(attr.span, \"must be of the form \\\n-                        #[wasm_custom_section = \\\"foo\\\"]\");\n+        } else if attr.check_name(\"link_section\") {\n+            if let Some(val) = attr.value_str() {\n+                if val.as_str().bytes().any(|b| b == 0) {\n+                    let msg = format!(\"illegal null byte in link_section \\\n+                                       value: `{}`\", &val);\n+                    tcx.sess.span_err(attr.span, &msg);\n+                } else {\n+                    codegen_fn_attrs.link_section = Some(val);\n                 }\n             }\n         }"}, {"sha": "2ef90e3ec47a839407270e4792c169e31bdce8b2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -407,9 +407,6 @@ declare_features! (\n     // `use path as _;` and `extern crate c as _;`\n     (active, underscore_imports, \"1.26.0\", Some(48216), None),\n \n-    // The #[wasm_custom_section] attribute\n-    (active, wasm_custom_section, \"1.26.0\", Some(51088), None),\n-\n     // The #![wasm_import_module] attribute\n     (active, wasm_import_module, \"1.26.0\", Some(52090), None),\n \n@@ -1062,11 +1059,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                    \"infer outlives requirements is an experimental feature\",\n                                    cfg_fn!(infer_outlives_requirements))),\n \n-    (\"wasm_custom_section\", Whitelisted, Gated(Stability::Unstable,\n-                                 \"wasm_custom_section\",\n-                                 \"attribute is currently unstable\",\n-                                 cfg_fn!(wasm_custom_section))),\n-\n     // RFC 2070\n     (\"panic_implementation\", Normal, Gated(Stability::Unstable,\n                            \"panic_implementation\","}, {"sha": "134f114e6accacd30e663420eba8758d53e7866b", "filename": "src/test/incremental/issue-49595/issue_49595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Fincremental%2Fissue-49595%2Fissue_49595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Fincremental%2Fissue-49595%2Fissue_49595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-49595%2Fissue_49595.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -15,7 +15,7 @@\n #![feature(rustc_attrs)]\n #![crate_type = \"rlib\"]\n \n-#![rustc_partition_codegened(module=\"issue_49595-tests\", cfg=\"cfail2\")]\n+#![rustc_partition_codegened(module=\"issue_49595-__test\", cfg=\"cfail2\")]\n #![rustc_partition_codegened(module=\"issue_49595-lit_test\", cfg=\"cfail3\")]\n \n mod tests {"}, {"sha": "ed537280e6c520163c966eed0752b2b8824c6d8a", "filename": "src/test/run-make/wasm-custom-section/bar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Fbar.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -14,11 +14,11 @@\n \n extern crate foo;\n \n-#[wasm_custom_section = \"foo\"]\n-const A: [u8; 2] = [5, 6];\n+#[link_section = \"foo\"]\n+pub static A: [u8; 2] = [5, 6];\n \n-#[wasm_custom_section = \"baz\"]\n-const B: [u8; 2] = [7, 8];\n+#[link_section = \"baz\"]\n+pub static B: [u8; 2] = [7, 8];\n \n #[no_mangle]\n pub extern fn foo() {}"}, {"sha": "fb3bec31ada7fcd4ff91c6b6b50990d118ea74f0", "filename": "src/test/run-make/wasm-custom-section/foo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Ffoo.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -12,8 +12,8 @@\n #![feature(wasm_custom_section)]\n #![deny(warnings)]\n \n-#[wasm_custom_section = \"foo\"]\n-const A: [u8; 2] = [1, 2];\n+#[link_section = \"foo\"]\n+pub static A: [u8; 2] = [1, 2];\n \n-#[wasm_custom_section = \"bar\"]\n-const B: [u8; 2] = [3, 4];\n+#[link_section = \"bar\"]\n+pub static B: [u8; 2] = [3, 4];"}, {"sha": "c695ef4ff068f2196236da7c18082d1886b443ce", "filename": "src/test/ui/feature-gate-wasm_custom_section.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.rs?ref=f686885a14fff16ddf984b08fb0d9ded07e66f1c", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[wasm_custom_section = \"foo\"] //~ ERROR: attribute is currently unstable\n-const A: [u8; 2] = [1, 2];\n-\n-fn main() {}"}, {"sha": "91f75d6817f957b2a98513c1f781773eed738ca6", "filename": "src/test/ui/feature-gate-wasm_custom_section.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.stderr?ref=f686885a14fff16ddf984b08fb0d9ded07e66f1c", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: attribute is currently unstable (see issue #51088)\n-  --> $DIR/feature-gate-wasm_custom_section.rs:11:1\n-   |\n-LL | #[wasm_custom_section = \"foo\"] //~ ERROR: attribute is currently unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(wasm_custom_section)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5631a70192afd0962bbb6548a0d79278d1bca52a", "filename": "src/test/ui/wasm-custom-section-relocations.rs", "status": "renamed", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.rs?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -8,12 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(wasm_custom_section)]\n+// only-wasm32\n \n-#[wasm_custom_section] //~ ERROR: must be of the form\n-const A: [u8; 1] = [0];\n+#[link_section = \"test\"]\n+pub static A: &[u8] = &[1]; //~ ERROR: no extra levels of indirection\n \n-#[wasm_custom_section(foo)] //~ ERROR: must be of the form\n-const B: [u8; 1] = [0];\n+#[link_section = \"test\"]\n+pub static B: [u8; 3] = [1, 2, 3];\n \n-fn main() {}\n+#[link_section = \"test\"]\n+pub static C: usize = 3;\n+\n+#[link_section = \"test\"]\n+pub static D: &usize = &C; //~ ERROR: no extra levels of indirection", "previous_filename": "src/test/ui/wasm-custom-section/malformed.rs"}, {"sha": "9b96b99e02ae4ebb78c8de511c2dffbbfb8c6b16", "filename": "src/test/ui/wasm-custom-section-relocations.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f5a129fab998a1ee7c72204d093dc475981d1/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section-relocations.stderr?ref=cd5f5a129fab998a1ee7c72204d093dc475981d1", "patch": "@@ -0,0 +1,19 @@\n+error[E0601]: `main` function not found in crate `wasm_custom_section_relocations`\n+   |\n+   = note: consider adding a `main` function to `$DIR/wasm-custom-section-relocations.rs`\n+\n+error: statics with a custom `#[link_section]` must be a simple list of bytes on the wasm target with no extra levels of indirection such as references\n+  --> $DIR/wasm-custom-section-relocations.rs:14:1\n+   |\n+LL | pub static A: &[u8] = &[1]; //~ ERROR: no extra levels of indirection\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statics with a custom `#[link_section]` must be a simple list of bytes on the wasm target with no extra levels of indirection such as references\n+  --> $DIR/wasm-custom-section-relocations.rs:23:1\n+   |\n+LL | pub static D: &usize = &C; //~ ERROR: no extra levels of indirection\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "c716c824aebda4b18112eab014bd9eadce0c094d", "filename": "src/test/ui/wasm-custom-section/malformed.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fmalformed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fmalformed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section%2Fmalformed.stderr?ref=f686885a14fff16ddf984b08fb0d9ded07e66f1c", "patch": "@@ -1,14 +0,0 @@\n-error: must be of the form #[wasm_custom_section = \"foo\"]\n-  --> $DIR/malformed.rs:13:1\n-   |\n-LL | #[wasm_custom_section] //~ ERROR: must be of the form\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: must be of the form #[wasm_custom_section = \"foo\"]\n-  --> $DIR/malformed.rs:16:1\n-   |\n-LL | #[wasm_custom_section(foo)] //~ ERROR: must be of the form\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "68077fb2fe4ac0bfcd5e24c8b8f80d6ae4ff19a8", "filename": "src/test/ui/wasm-custom-section/not-const.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-const.rs?ref=f686885a14fff16ddf984b08fb0d9ded07e66f1c", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(wasm_custom_section)]\n-\n-#[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-static A: [u8; 2] = [1, 2];\n-\n-#[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-struct B {}\n-\n-#[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-enum C {}\n-\n-#[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-impl B {}\n-\n-#[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-mod d {}\n-\n-#[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-fn main() {}"}, {"sha": "17c85b3e848eb3deff77cd242817e703bf4f2568", "filename": "src/test/ui/wasm-custom-section/not-const.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-const.stderr?ref=f686885a14fff16ddf984b08fb0d9ded07e66f1c", "patch": "@@ -1,38 +0,0 @@\n-error: only allowed on consts\n-  --> $DIR/not-const.rs:13:1\n-   |\n-LL | #[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: only allowed on consts\n-  --> $DIR/not-const.rs:16:1\n-   |\n-LL | #[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: only allowed on consts\n-  --> $DIR/not-const.rs:19:1\n-   |\n-LL | #[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: only allowed on consts\n-  --> $DIR/not-const.rs:22:1\n-   |\n-LL | #[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: only allowed on consts\n-  --> $DIR/not-const.rs:25:1\n-   |\n-LL | #[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: only allowed on consts\n-  --> $DIR/not-const.rs:28:1\n-   |\n-LL | #[wasm_custom_section = \"foo\"] //~ ERROR: only allowed on consts\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 6 previous errors\n-"}, {"sha": "2d91641a5f7568a495a9a1c3859f22dabe1feb44", "filename": "src/test/ui/wasm-custom-section/not-slice.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-slice.rs?ref=f686885a14fff16ddf984b08fb0d9ded07e66f1c", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(wasm_custom_section)]\n-\n-#[wasm_custom_section = \"foo\"]\n-const A: u8 = 0; //~ ERROR: must be an array of bytes\n-\n-#[wasm_custom_section = \"foo\"]\n-const B: &[u8] = &[0]; //~ ERROR: must be an array of bytes\n-\n-#[wasm_custom_section = \"foo\"]\n-const C: &[u8; 1] = &[0]; //~ ERROR: must be an array of bytes\n-\n-fn main() {}"}, {"sha": "f2563ce0dddc1ac59398364fd1ca10d2eddf8bfb", "filename": "src/test/ui/wasm-custom-section/not-slice.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f686885a14fff16ddf984b08fb0d9ded07e66f1c/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-custom-section%2Fnot-slice.stderr?ref=f686885a14fff16ddf984b08fb0d9ded07e66f1c", "patch": "@@ -1,20 +0,0 @@\n-error: must be an array of bytes like `[u8; N]`\n-  --> $DIR/not-slice.rs:14:1\n-   |\n-LL | const A: u8 = 0; //~ ERROR: must be an array of bytes\n-   | ^^^^^^^^^^^^^^^^\n-\n-error: must be an array of bytes like `[u8; N]`\n-  --> $DIR/not-slice.rs:17:1\n-   |\n-LL | const B: &[u8] = &[0]; //~ ERROR: must be an array of bytes\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: must be an array of bytes like `[u8; N]`\n-  --> $DIR/not-slice.rs:20:1\n-   |\n-LL | const C: &[u8; 1] = &[0]; //~ ERROR: must be an array of bytes\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}]}