{"sha": "9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "node_id": "C_kwDOAAsO6NoAKDlkMGVhYzRkMDJkYThhMWIxMzlmZjNkY2E3ZmM0YjQ1OGZiOTllYjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-20T03:24:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-20T03:24:27Z"}, "message": "Auto merge of #108148 - parthopdas:master, r=oli-obk\n\nImplementing \"<test_binary> --list --format json\" for use by IDE test explorers / runners\n\nFixes #107307\n\nPR 1 of 2 - wiring up just the new information + implement the command line changes i.e. --format json + tests\n\nupcoming:\nPR 2 of 2 - clean up \"#[cfg(not(bootstrap))]\" from PR 1\n\nAs per the discussions on\n- MCP: https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Implementing.20.22.3Ctest_binary.3E.20--list.20--form.E2.80.A6.20compiler-team.23592/near/328747548\n- preRFC: https://internals.rust-lang.org/t/pre-rfc-implementing-test-binary-list-format-json-for-use-by-ide-test-explorers-runners/18308\n- FYI on Discord: https://discord.com/channels/442252698964721669/459149169546887178/1075581549409484820", "tree": {"sha": "f6087867007f08eb2ded4a12f37f67deff2a9878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6087867007f08eb2ded4a12f37f67deff2a9878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "html_url": "https://github.com/rust-lang/rust/commit/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da7c50c089d5db2d3ebaf227fe075bb1346bfaec", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7c50c089d5db2d3ebaf227fe075bb1346bfaec", "html_url": "https://github.com/rust-lang/rust/commit/da7c50c089d5db2d3ebaf227fe075bb1346bfaec"}, {"sha": "37207536327c10186b1b348cdc57354b35bcbba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/37207536327c10186b1b348cdc57354b35bcbba6", "html_url": "https://github.com/rust-lang/rust/commit/37207536327c10186b1b348cdc57354b35bcbba6"}], "stats": {"total": 600, "additions": 554, "deletions": 46}, "files": [{"sha": "485968d9c56ff5a3a37c74b331704914da82011c", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -21,6 +21,7 @@ Session.vim\n .project\n .favorites.json\n .settings/\n+.vs/\n \n ## Tool\n .valgrindrc"}, {"sha": "007d14b0e748c316605dadb098bb4121a44deba4", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::Applicability;\n use rustc_expand::base::*;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{FileNameDisplayPreference, Span};\n use std::iter;\n use thin_vec::{thin_vec, ThinVec};\n \n@@ -231,6 +231,8 @@ pub fn expand_test_or_bench(\n         &item.ident,\n     ));\n \n+    let location_info = get_location_info(cx, &item);\n+\n     let mut test_const = cx.item(\n         sp,\n         Ident::new(item.ident.name, sp),\n@@ -280,6 +282,16 @@ pub fn expand_test_or_bench(\n                                             cx.expr_none(sp)\n                                         },\n                                     ),\n+                                    // source_file: <relative_path_of_source_file>\n+                                    field(\"source_file\", cx.expr_str(sp, location_info.0)),\n+                                    // start_line: start line of the test fn identifier.\n+                                    field(\"start_line\", cx.expr_usize(sp, location_info.1)),\n+                                    // start_col: start column of the test fn identifier.\n+                                    field(\"start_col\", cx.expr_usize(sp, location_info.2)),\n+                                    // end_line: end line of the test fn identifier.\n+                                    field(\"end_line\", cx.expr_usize(sp, location_info.3)),\n+                                    // end_col: end column of the test fn identifier.\n+                                    field(\"end_col\", cx.expr_usize(sp, location_info.4)),\n                                     // compile_fail: true | false\n                                     field(\"compile_fail\", cx.expr_bool(sp, false)),\n                                     // no_run: true | false\n@@ -364,6 +376,19 @@ pub fn expand_test_or_bench(\n     }\n }\n \n+fn get_location_info(cx: &ExtCtxt<'_>, item: &ast::Item) -> (Symbol, usize, usize, usize, usize) {\n+    let span = item.ident.span;\n+    let (source_file, lo_line, lo_col, hi_line, hi_col) =\n+        cx.sess.source_map().span_to_location_info(span);\n+\n+    let file_name = match source_file {\n+        Some(sf) => sf.name.display(FileNameDisplayPreference::Remapped).to_string(),\n+        None => \"no-location\".to_string(),\n+    };\n+\n+    (Symbol::intern(&file_name), lo_line, lo_col, hi_line, hi_col)\n+}\n+\n fn item_path(mod_path: &[Ident], item_ident: &Ident) -> String {\n     mod_path\n         .iter()"}, {"sha": "ee895f53eba9bf046faa4fc5eaaf45548771349b", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -448,25 +448,36 @@ impl SourceMap {\n         sp: Span,\n         filename_display_pref: FileNameDisplayPreference,\n     ) -> String {\n-        if self.files.borrow().source_files.is_empty() || sp.is_dummy() {\n-            return \"no-location\".to_string();\n-        }\n+        let (source_file, lo_line, lo_col, hi_line, hi_col) = self.span_to_location_info(sp);\n+\n+        let file_name = match source_file {\n+            Some(sf) => sf.name.display(filename_display_pref).to_string(),\n+            None => return \"no-location\".to_string(),\n+        };\n \n-        let lo = self.lookup_char_pos(sp.lo());\n-        let hi = self.lookup_char_pos(sp.hi());\n         format!(\n-            \"{}:{}:{}{}\",\n-            lo.file.name.display(filename_display_pref),\n-            lo.line,\n-            lo.col.to_usize() + 1,\n+            \"{file_name}:{lo_line}:{lo_col}{}\",\n             if let FileNameDisplayPreference::Short = filename_display_pref {\n                 String::new()\n             } else {\n-                format!(\": {}:{}\", hi.line, hi.col.to_usize() + 1)\n+                format!(\": {hi_line}:{hi_col}\")\n             }\n         )\n     }\n \n+    pub fn span_to_location_info(\n+        &self,\n+        sp: Span,\n+    ) -> (Option<Lrc<SourceFile>>, usize, usize, usize, usize) {\n+        if self.files.borrow().source_files.is_empty() || sp.is_dummy() {\n+            return (None, 0, 0, 0, 0);\n+        }\n+\n+        let lo = self.lookup_char_pos(sp.lo());\n+        let hi = self.lookup_char_pos(sp.hi());\n+        (Some(lo.file), lo.line, lo.col.to_usize() + 1, hi.line, hi.col.to_usize() + 1)\n+    }\n+\n     /// Format the span location suitable for embedding in build artifacts\n     pub fn span_to_embeddable_string(&self, sp: Span) -> String {\n         self.span_to_string(sp, FileNameDisplayPreference::Remapped)"}, {"sha": "7eee4ca236190ba7c25465dd7ed508eac4611e1c", "filename": "library/test/src/console.rs", "status": "modified", "additions": 57, "deletions": 26, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -41,6 +41,46 @@ impl<T: Write> Write for OutputLocation<T> {\n     }\n }\n \n+pub struct ConsoleTestDiscoveryState {\n+    pub log_out: Option<File>,\n+    pub tests: usize,\n+    pub benchmarks: usize,\n+    pub ignored: usize,\n+    pub options: Options,\n+}\n+\n+impl ConsoleTestDiscoveryState {\n+    pub fn new(opts: &TestOpts) -> io::Result<ConsoleTestDiscoveryState> {\n+        let log_out = match opts.logfile {\n+            Some(ref path) => Some(File::create(path)?),\n+            None => None,\n+        };\n+\n+        Ok(ConsoleTestDiscoveryState {\n+            log_out,\n+            tests: 0,\n+            benchmarks: 0,\n+            ignored: 0,\n+            options: opts.options,\n+        })\n+    }\n+\n+    pub fn write_log<F, S>(&mut self, msg: F) -> io::Result<()>\n+    where\n+        S: AsRef<str>,\n+        F: FnOnce() -> S,\n+    {\n+        match self.log_out {\n+            None => Ok(()),\n+            Some(ref mut o) => {\n+                let msg = msg();\n+                let msg = msg.as_ref();\n+                o.write_all(msg.as_bytes())\n+            }\n+        }\n+    }\n+}\n+\n pub struct ConsoleTestState {\n     pub log_out: Option<File>,\n     pub total: usize,\n@@ -138,53 +178,44 @@ impl ConsoleTestState {\n \n // List the tests to console, and optionally to logfile. Filters are honored.\n pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Result<()> {\n-    let mut output = match term::stdout() {\n+    let output = match term::stdout() {\n         None => OutputLocation::Raw(io::stdout().lock()),\n         Some(t) => OutputLocation::Pretty(t),\n     };\n \n-    let quiet = opts.format == OutputFormat::Terse;\n-    let mut st = ConsoleTestState::new(opts)?;\n-\n-    let mut ntest = 0;\n-    let mut nbench = 0;\n+    let mut out: Box<dyn OutputFormatter> = match opts.format {\n+        OutputFormat::Pretty | OutputFormat::Junit => {\n+            Box::new(PrettyFormatter::new(output, false, 0, false, None))\n+        }\n+        OutputFormat::Terse => Box::new(TerseFormatter::new(output, false, 0, false)),\n+        OutputFormat::Json => Box::new(JsonFormatter::new(output)),\n+    };\n+    let mut st = ConsoleTestDiscoveryState::new(opts)?;\n \n+    out.write_discovery_start()?;\n     for test in filter_tests(opts, tests).into_iter() {\n         use crate::TestFn::*;\n \n-        let TestDescAndFn { desc: TestDesc { name, .. }, testfn } = test;\n+        let TestDescAndFn { desc, testfn } = test;\n \n         let fntype = match testfn {\n             StaticTestFn(..) | DynTestFn(..) => {\n-                ntest += 1;\n+                st.tests += 1;\n                 \"test\"\n             }\n             StaticBenchFn(..) | DynBenchFn(..) => {\n-                nbench += 1;\n+                st.benchmarks += 1;\n                 \"benchmark\"\n             }\n         };\n \n-        writeln!(output, \"{name}: {fntype}\")?;\n-        st.write_log(|| format!(\"{fntype} {name}\\n\"))?;\n-    }\n+        st.ignored += if desc.ignore { 1 } else { 0 };\n \n-    fn plural(count: u32, s: &str) -> String {\n-        match count {\n-            1 => format!(\"1 {s}\"),\n-            n => format!(\"{n} {s}s\"),\n-        }\n+        out.write_test_discovered(&desc, fntype)?;\n+        st.write_log(|| format!(\"{fntype} {}\\n\", desc.name))?;\n     }\n \n-    if !quiet {\n-        if ntest != 0 || nbench != 0 {\n-            writeln!(output)?;\n-        }\n-\n-        writeln!(output, \"{}, {}\", plural(ntest, \"test\"), plural(nbench, \"benchmark\"))?;\n-    }\n-\n-    Ok(())\n+    out.write_discovery_finish(&st)\n }\n \n // Updates `ConsoleTestState` depending on result of the test execution."}, {"sha": "40976ec5e1c8b037660e3319b7a7fa587f383948", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -2,7 +2,7 @@ use std::{borrow::Cow, io, io::prelude::Write};\n \n use super::OutputFormatter;\n use crate::{\n-    console::{ConsoleTestState, OutputLocation},\n+    console::{ConsoleTestDiscoveryState, ConsoleTestState, OutputLocation},\n     test_result::TestResult,\n     time,\n     types::TestDesc,\n@@ -60,6 +60,56 @@ impl<T: Write> JsonFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for JsonFormatter<T> {\n+    fn write_discovery_start(&mut self) -> io::Result<()> {\n+        self.writeln_message(&format!(r#\"{{ \"type\": \"suite\", \"event\": \"discovery\" }}\"#))\n+    }\n+\n+    fn write_test_discovered(&mut self, desc: &TestDesc, test_type: &str) -> io::Result<()> {\n+        let TestDesc {\n+            name,\n+            ignore,\n+            ignore_message,\n+            #[cfg(not(bootstrap))]\n+            source_file,\n+            #[cfg(not(bootstrap))]\n+            start_line,\n+            #[cfg(not(bootstrap))]\n+            start_col,\n+            #[cfg(not(bootstrap))]\n+            end_line,\n+            #[cfg(not(bootstrap))]\n+            end_col,\n+            ..\n+        } = desc;\n+\n+        #[cfg(bootstrap)]\n+        let source_file = \"\";\n+        #[cfg(bootstrap)]\n+        let start_line = 0;\n+        #[cfg(bootstrap)]\n+        let start_col = 0;\n+        #[cfg(bootstrap)]\n+        let end_line = 0;\n+        #[cfg(bootstrap)]\n+        let end_col = 0;\n+\n+        self.writeln_message(&format!(\n+            r#\"{{ \"type\": \"{test_type}\", \"event\": \"discovered\", \"name\": \"{}\", \"ignore\": {ignore}, \"ignore_message\": \"{}\", \"source_path\": \"{}\", \"start_line\": {start_line}, \"start_col\": {start_col}, \"end_line\": {end_line}, \"end_col\": {end_col} }}\"#,\n+            EscapedString(name.as_slice()),\n+            ignore_message.unwrap_or(\"\"),\n+            EscapedString(source_file),\n+        ))\n+    }\n+\n+    fn write_discovery_finish(&mut self, state: &ConsoleTestDiscoveryState) -> io::Result<()> {\n+        let ConsoleTestDiscoveryState { tests, benchmarks, ignored, .. } = state;\n+\n+        let total = tests + benchmarks;\n+        self.writeln_message(&format!(\n+            r#\"{{ \"type\": \"suite\", \"event\": \"completed\", \"tests\": {tests}, \"benchmarks\": {benchmarks}, \"total\": {total}, \"ignored\": {ignored} }}\"#\n+        ))\n+    }\n+\n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         let shuffle_seed_json = if let Some(shuffle_seed) = shuffle_seed {\n             format!(r#\", \"shuffle_seed\": {shuffle_seed}\"#)"}, {"sha": "2e07ce3c09923fc569dd62160af46110a91f7f09", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -3,7 +3,7 @@ use std::time::Duration;\n \n use super::OutputFormatter;\n use crate::{\n-    console::{ConsoleTestState, OutputLocation},\n+    console::{ConsoleTestDiscoveryState, ConsoleTestState, OutputLocation},\n     test_result::TestResult,\n     time,\n     types::{TestDesc, TestType},\n@@ -27,6 +27,18 @@ impl<T: Write> JunitFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for JunitFormatter<T> {\n+    fn write_discovery_start(&mut self) -> io::Result<()> {\n+        Err(io::Error::new(io::ErrorKind::NotFound, \"Not yet implemented!\"))\n+    }\n+\n+    fn write_test_discovered(&mut self, _desc: &TestDesc, _test_type: &str) -> io::Result<()> {\n+        Err(io::Error::new(io::ErrorKind::NotFound, \"Not yet implemented!\"))\n+    }\n+\n+    fn write_discovery_finish(&mut self, _state: &ConsoleTestDiscoveryState) -> io::Result<()> {\n+        Err(io::Error::new(io::ErrorKind::NotFound, \"Not yet implemented!\"))\n+    }\n+\n     fn write_run_start(\n         &mut self,\n         _test_count: usize,"}, {"sha": "bc6ffebc1d3b2f85295c6e668042a2cebe2e3468", "filename": "library/test/src/formatters/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -1,7 +1,7 @@\n use std::{io, io::prelude::Write};\n \n use crate::{\n-    console::ConsoleTestState,\n+    console::{ConsoleTestDiscoveryState, ConsoleTestState},\n     test_result::TestResult,\n     time,\n     types::{TestDesc, TestName},\n@@ -18,6 +18,10 @@ pub(crate) use self::pretty::PrettyFormatter;\n pub(crate) use self::terse::TerseFormatter;\n \n pub(crate) trait OutputFormatter {\n+    fn write_discovery_start(&mut self) -> io::Result<()>;\n+    fn write_test_discovered(&mut self, desc: &TestDesc, test_type: &str) -> io::Result<()>;\n+    fn write_discovery_finish(&mut self, state: &ConsoleTestDiscoveryState) -> io::Result<()>;\n+\n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()>;\n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()>;\n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()>;"}, {"sha": "22654a3400b44f8fd0458df456b060b3d7f69f5c", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -3,7 +3,7 @@ use std::{io, io::prelude::Write};\n use super::OutputFormatter;\n use crate::{\n     bench::fmt_bench_samples,\n-    console::{ConsoleTestState, OutputLocation},\n+    console::{ConsoleTestDiscoveryState, ConsoleTestState, OutputLocation},\n     term,\n     test_result::TestResult,\n     time,\n@@ -181,6 +181,33 @@ impl<T: Write> PrettyFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n+    fn write_discovery_start(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+\n+    fn write_test_discovered(&mut self, desc: &TestDesc, test_type: &str) -> io::Result<()> {\n+        self.write_plain(format!(\"{}: {test_type}\\n\", desc.name))\n+    }\n+\n+    fn write_discovery_finish(&mut self, state: &ConsoleTestDiscoveryState) -> io::Result<()> {\n+        fn plural(count: usize, s: &str) -> String {\n+            match count {\n+                1 => format!(\"1 {s}\"),\n+                n => format!(\"{n} {s}s\"),\n+            }\n+        }\n+\n+        if state.tests != 0 || state.benchmarks != 0 {\n+            self.write_plain(\"\\n\")?;\n+        }\n+\n+        self.write_plain(format!(\n+            \"{}, {}\\n\",\n+            plural(state.tests, \"test\"),\n+            plural(state.benchmarks, \"benchmark\")\n+        ))\n+    }\n+\n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };\n         let shuffle_seed_msg = if let Some(shuffle_seed) = shuffle_seed {"}, {"sha": "2931ca6ead0ac59877e2dc5afa5cff277aa1359e", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -3,7 +3,7 @@ use std::{io, io::prelude::Write};\n use super::OutputFormatter;\n use crate::{\n     bench::fmt_bench_samples,\n-    console::{ConsoleTestState, OutputLocation},\n+    console::{ConsoleTestDiscoveryState, ConsoleTestState, OutputLocation},\n     term,\n     test_result::TestResult,\n     time,\n@@ -167,6 +167,18 @@ impl<T: Write> TerseFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for TerseFormatter<T> {\n+    fn write_discovery_start(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+\n+    fn write_test_discovered(&mut self, desc: &TestDesc, test_type: &str) -> io::Result<()> {\n+        self.write_plain(format!(\"{}: {test_type}\\n\", desc.name))\n+    }\n+\n+    fn write_discovery_finish(&mut self, _state: &ConsoleTestDiscoveryState) -> io::Result<()> {\n+        Ok(())\n+    }\n+\n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         self.total_test_count = test_count;\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };"}, {"sha": "5ffdbf73fbf93368d45fa7cabdac9798667ae2e2", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -63,6 +63,16 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"1\"),\n                 ignore: true,\n                 ignore_message: None,\n+                #[cfg(not(bootstrap))]\n+                source_file: \"\",\n+                #[cfg(not(bootstrap))]\n+                start_line: 0,\n+                #[cfg(not(bootstrap))]\n+                start_col: 0,\n+                #[cfg(not(bootstrap))]\n+                end_line: 0,\n+                #[cfg(not(bootstrap))]\n+                end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n                 no_run: false,\n@@ -75,6 +85,16 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"2\"),\n                 ignore: false,\n                 ignore_message: None,\n+                #[cfg(not(bootstrap))]\n+                source_file: \"\",\n+                #[cfg(not(bootstrap))]\n+                start_line: 0,\n+                #[cfg(not(bootstrap))]\n+                start_col: 0,\n+                #[cfg(not(bootstrap))]\n+                end_line: 0,\n+                #[cfg(not(bootstrap))]\n+                end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n                 no_run: false,\n@@ -95,6 +115,16 @@ pub fn do_not_run_ignored_tests() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -118,6 +148,16 @@ pub fn ignored_tests_result_in_ignored() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -143,6 +183,16 @@ fn test_should_panic() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n             no_run: false,\n@@ -168,6 +218,16 @@ fn test_should_panic_good_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             compile_fail: false,\n             no_run: false,\n@@ -198,6 +258,16 @@ fn test_should_panic_bad_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n             no_run: false,\n@@ -232,6 +302,16 @@ fn test_should_panic_non_string_message_type() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n             no_run: false,\n@@ -260,6 +340,16 @@ fn test_should_panic_but_succeeds() {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 ignore_message: None,\n+                #[cfg(not(bootstrap))]\n+                source_file: \"\",\n+                #[cfg(not(bootstrap))]\n+                start_line: 0,\n+                #[cfg(not(bootstrap))]\n+                start_col: 0,\n+                #[cfg(not(bootstrap))]\n+                end_line: 0,\n+                #[cfg(not(bootstrap))]\n+                end_col: 0,\n                 should_panic,\n                 compile_fail: false,\n                 no_run: false,\n@@ -288,6 +378,16 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -325,6 +425,16 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -364,6 +474,16 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         name: StaticTestName(\"whatever\"),\n         ignore: false,\n         ignore_message: None,\n+        #[cfg(not(bootstrap))]\n+        source_file: \"\",\n+        #[cfg(not(bootstrap))]\n+        start_line: 0,\n+        #[cfg(not(bootstrap))]\n+        start_col: 0,\n+        #[cfg(not(bootstrap))]\n+        end_line: 0,\n+        #[cfg(not(bootstrap))]\n+        end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -476,6 +596,16 @@ pub fn exclude_should_panic_option() {\n             name: StaticTestName(\"3\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n             no_run: false,\n@@ -500,6 +630,16 @@ pub fn exact_filter_match() {\n                     name: StaticTestName(name),\n                     ignore: false,\n                     ignore_message: None,\n+                    #[cfg(not(bootstrap))]\n+                    source_file: \"\",\n+                    #[cfg(not(bootstrap))]\n+                    start_line: 0,\n+                    #[cfg(not(bootstrap))]\n+                    start_col: 0,\n+                    #[cfg(not(bootstrap))]\n+                    end_line: 0,\n+                    #[cfg(not(bootstrap))]\n+                    end_col: 0,\n                     should_panic: ShouldPanic::No,\n                     compile_fail: false,\n                     no_run: false,\n@@ -591,6 +731,16 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n                 name: DynTestName((*name).clone()),\n                 ignore: false,\n                 ignore_message: None,\n+                #[cfg(not(bootstrap))]\n+                source_file: \"\",\n+                #[cfg(not(bootstrap))]\n+                start_line: 0,\n+                #[cfg(not(bootstrap))]\n+                start_col: 0,\n+                #[cfg(not(bootstrap))]\n+                end_line: 0,\n+                #[cfg(not(bootstrap))]\n+                end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n                 no_run: false,\n@@ -720,6 +870,16 @@ pub fn test_bench_no_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         ignore_message: None,\n+        #[cfg(not(bootstrap))]\n+        source_file: \"\",\n+        #[cfg(not(bootstrap))]\n+        start_line: 0,\n+        #[cfg(not(bootstrap))]\n+        start_col: 0,\n+        #[cfg(not(bootstrap))]\n+        end_line: 0,\n+        #[cfg(not(bootstrap))]\n+        end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -743,6 +903,16 @@ pub fn test_bench_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         ignore_message: None,\n+        #[cfg(not(bootstrap))]\n+        source_file: \"\",\n+        #[cfg(not(bootstrap))]\n+        start_line: 0,\n+        #[cfg(not(bootstrap))]\n+        start_col: 0,\n+        #[cfg(not(bootstrap))]\n+        end_line: 0,\n+        #[cfg(not(bootstrap))]\n+        end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -759,6 +929,16 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n         ignore_message: None,\n+        #[cfg(not(bootstrap))]\n+        source_file: \"\",\n+        #[cfg(not(bootstrap))]\n+        start_line: 0,\n+        #[cfg(not(bootstrap))]\n+        start_col: 0,\n+        #[cfg(not(bootstrap))]\n+        end_line: 0,\n+        #[cfg(not(bootstrap))]\n+        end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -769,6 +949,16 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n         ignore_message: None,\n+        #[cfg(not(bootstrap))]\n+        source_file: \"\",\n+        #[cfg(not(bootstrap))]\n+        start_line: 0,\n+        #[cfg(not(bootstrap))]\n+        start_col: 0,\n+        #[cfg(not(bootstrap))]\n+        end_line: 0,\n+        #[cfg(not(bootstrap))]\n+        end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -816,6 +1006,16 @@ fn test_dyn_bench_returning_err_fails_when_run_as_test() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n+            #[cfg(not(bootstrap))]\n+            source_file: \"\",\n+            #[cfg(not(bootstrap))]\n+            start_line: 0,\n+            #[cfg(not(bootstrap))]\n+            start_col: 0,\n+            #[cfg(not(bootstrap))]\n+            end_line: 0,\n+            #[cfg(not(bootstrap))]\n+            end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,"}, {"sha": "8d4e204c8ac1253f94360d221e73b9d1c80e5b15", "filename": "library/test/src/types.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -119,6 +119,16 @@ pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n     pub ignore_message: Option<&'static str>,\n+    #[cfg(not(bootstrap))]\n+    pub source_file: &'static str,\n+    #[cfg(not(bootstrap))]\n+    pub start_line: usize,\n+    #[cfg(not(bootstrap))]\n+    pub start_col: usize,\n+    #[cfg(not(bootstrap))]\n+    pub end_line: usize,\n+    #[cfg(not(bootstrap))]\n+    pub end_col: usize,\n     pub should_panic: options::ShouldPanic,\n     pub compile_fail: bool,\n     pub no_run: bool,"}, {"sha": "aaa83ecce4817ecb549e913829fed31730046963", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -1057,6 +1057,16 @@ impl Tester for Collector {\n                     Ignore::Some(ref ignores) => ignores.iter().any(|s| target_str.contains(s)),\n                 },\n                 ignore_message: None,\n+                #[cfg(not(bootstrap))]\n+                source_file: \"\",\n+                #[cfg(not(bootstrap))]\n+                start_line: 0,\n+                #[cfg(not(bootstrap))]\n+                start_col: 0,\n+                #[cfg(not(bootstrap))]\n+                end_line: 0,\n+                #[cfg(not(bootstrap))]\n+                end_col: 0,\n                 // compiler failures are test failures\n                 should_panic: test::ShouldPanic::No,\n                 compile_fail: config.compile_fail,"}, {"sha": "22a0b1d13be160359808c09a741ea4a0b005f4f8", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -1047,6 +1047,16 @@ pub fn make_test_description<R: Read>(\n         name,\n         ignore,\n         ignore_message,\n+        #[cfg(not(bootstrap))]\n+        source_file: \"\",\n+        #[cfg(not(bootstrap))]\n+        start_line: 0,\n+        #[cfg(not(bootstrap))]\n+        start_col: 0,\n+        #[cfg(not(bootstrap))]\n+        end_line: 0,\n+        #[cfg(not(bootstrap))]\n+        end_col: 0,\n         should_panic,\n         compile_fail: false,\n         no_run: false,"}, {"sha": "58f746f2e0ef87eb24440ee458d1209c04e64f2d", "filename": "tests/pretty/tests-are-sorted.pp", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fpretty%2Ftests-are-sorted.pp", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fpretty%2Ftests-are-sorted.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Ftests-are-sorted.pp?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -4,7 +4,7 @@\n use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n-// compile-flags: --crate-type=lib --test\n+// compile-flags: --crate-type=lib --test --remap-path-prefix={{src-base}}/=/the/src/ --remap-path-prefix={{src-base}}\\=/the/src/\n // pretty-compare-only\n // pretty-mode:expanded\n // pp-exact:tests-are-sorted.pp\n@@ -18,6 +18,11 @@\n             name: test::StaticTestName(\"m_test\"),\n             ignore: false,\n             ignore_message: ::core::option::Option::None,\n+            source_file: \"/the/src/tests-are-sorted.rs\",\n+            start_line: 7usize,\n+            start_col: 4usize,\n+            end_line: 7usize,\n+            end_col: 10usize,\n             compile_fail: false,\n             no_run: false,\n             should_panic: test::ShouldPanic::No,\n@@ -34,15 +39,21 @@\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: test::StaticTestName(\"z_test\"),\n-            ignore: false,\n-            ignore_message: ::core::option::Option::None,\n+            ignore: true,\n+            ignore_message: ::core::option::Option::Some(\"not yet implemented\"),\n+            source_file: \"/the/src/tests-are-sorted.rs\",\n+            start_line: 11usize,\n+            start_col: 4usize,\n+            end_line: 11usize,\n+            end_col: 10usize,\n             compile_fail: false,\n             no_run: false,\n             should_panic: test::ShouldPanic::No,\n             test_type: test::TestType::Unknown,\n         },\n         testfn: test::StaticTestFn(|| test::assert_test_result(z_test())),\n     };\n+#[ignore = \"not yet implemented\"]\n fn z_test() {}\n \n extern crate test;\n@@ -54,6 +65,11 @@\n             name: test::StaticTestName(\"a_test\"),\n             ignore: false,\n             ignore_message: ::core::option::Option::None,\n+            source_file: \"/the/src/tests-are-sorted.rs\",\n+            start_line: 14usize,\n+            start_col: 4usize,\n+            end_line: 14usize,\n+            end_col: 10usize,\n             compile_fail: false,\n             no_run: false,\n             should_panic: test::ShouldPanic::No,"}, {"sha": "39e0922250b8d0c02e36d4b8278a376fbea060e5", "filename": "tests/pretty/tests-are-sorted.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fpretty%2Ftests-are-sorted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fpretty%2Ftests-are-sorted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Ftests-are-sorted.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --crate-type=lib --test\n+// compile-flags: --crate-type=lib --test --remap-path-prefix={{src-base}}/=/the/src/ --remap-path-prefix={{src-base}}\\=/the/src/\n // pretty-compare-only\n // pretty-mode:expanded\n // pp-exact:tests-are-sorted.pp\n@@ -7,6 +7,7 @@\n fn m_test() {}\n \n #[test]\n+#[ignore = \"not yet implemented\"]\n fn z_test() {}\n \n #[test]"}, {"sha": "d5df4b57b05913cdfdd865566b9fd4e661958827", "filename": "tests/ui/test-attrs/tests-listing-format-default.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-default.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1,18 @@\n+// no-prefer-dynamic\n+// compile-flags: --test\n+// run-flags: --list\n+// run-pass\n+// check-run-results\n+\n+// Checks the listing of tests with no --format arguments.\n+\n+#![cfg(test)]\n+#[test]\n+fn m_test() {}\n+\n+#[test]\n+#[ignore = \"not yet implemented\"]\n+fn z_test() {}\n+\n+#[test]\n+fn a_test() {}"}, {"sha": "72337daf02cdfb43ef278bfb1c83afba3a15ce09", "filename": "tests/ui/test-attrs/tests-listing-format-default.run.stdout", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-default.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-default.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-default.run.stdout?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1,5 @@\n+a_test: test\n+m_test: test\n+z_test: test\n+\n+3 tests, 0 benchmarks"}, {"sha": "5247f1f8f1746bfb14f49de180f1f7e345cb7aac", "filename": "tests/ui/test-attrs/tests-listing-format-json-without-unstableopts.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json-without-unstableopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json-without-unstableopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json-without-unstableopts.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1,18 @@\n+// no-prefer-dynamic\n+// compile-flags: --test\n+// run-flags: --list --format json\n+// run-fail\n+// check-run-results\n+\n+// Checks that --format json does not work without -Zunstable-options.\n+\n+#![cfg(test)]\n+#[test]\n+fn m_test() {}\n+\n+#[test]\n+#[ignore = \"not yet implemented\"]\n+fn z_test() {}\n+\n+#[test]\n+fn a_test() {}"}, {"sha": "9f6276300a0bde79983fc46972add4011cb3f060", "filename": "tests/ui/test-attrs/tests-listing-format-json-without-unstableopts.run.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json-without-unstableopts.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json-without-unstableopts.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json-without-unstableopts.run.stderr?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1 @@\n+error: The \"json\" format is only accepted on the nightly compiler"}, {"sha": "18f1521eeeb1c8e55fe2a085b4a4f2105549df62", "filename": "tests/ui/test-attrs/tests-listing-format-json.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1,20 @@\n+// no-prefer-dynamic\n+// compile-flags: --test\n+// run-flags: --list --format json -Zunstable-options\n+// run-pass\n+// check-run-results\n+// normalize-stdout-test: \"fake-test-src-base/test-attrs/\" -> \"$$DIR/\"\n+// normalize-stdout-test: \"fake-test-src-base\\\\test-attrs\\\\\" -> \"$$DIR/\"\n+\n+// Checks the listing of tests with --format json.\n+\n+#![cfg(test)]\n+#[test]\n+fn m_test() {}\n+\n+#[test]\n+#[ignore = \"not yet implemented\"]\n+fn z_test() {}\n+\n+#[test]\n+fn a_test() {}"}, {"sha": "b4131e97c34bc4c60bb7833a399d439ba9c8578a", "filename": "tests/ui/test-attrs/tests-listing-format-json.run.stdout", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-json.run.stdout?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1,5 @@\n+{ \"type\": \"suite\", \"event\": \"discovery\" }\n+{ \"type\": \"test\", \"event\": \"discovered\", \"name\": \"a_test\", \"ignore\": false, \"ignore_message\": \"\", \"source_path\": \"$DIR/tests-listing-format-json.rs\", \"start_line\": 20, \"start_col\": 4, \"end_line\": 20, \"end_col\": 10 }\n+{ \"type\": \"test\", \"event\": \"discovered\", \"name\": \"m_test\", \"ignore\": false, \"ignore_message\": \"\", \"source_path\": \"$DIR/tests-listing-format-json.rs\", \"start_line\": 13, \"start_col\": 4, \"end_line\": 13, \"end_col\": 10 }\n+{ \"type\": \"test\", \"event\": \"discovered\", \"name\": \"z_test\", \"ignore\": true, \"ignore_message\": \"not yet implemented\", \"source_path\": \"$DIR/tests-listing-format-json.rs\", \"start_line\": 17, \"start_col\": 4, \"end_line\": 17, \"end_col\": 10 }\n+{ \"type\": \"suite\", \"event\": \"completed\", \"tests\": 3, \"benchmarks\": 0, \"total\": 3, \"ignored\": 1 }"}, {"sha": "7835f71759cb41ec9f8c49f242dd3b794654a1f7", "filename": "tests/ui/test-attrs/tests-listing-format-terse.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-terse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-terse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-terse.rs?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1,18 @@\n+// no-prefer-dynamic\n+// compile-flags: --test\n+// run-flags: --list --format terse\n+// run-pass\n+// check-run-results\n+\n+// Checks the listing of tests with --format terse.\n+\n+#![cfg(test)]\n+#[test]\n+fn m_test() {}\n+\n+#[test]\n+#[ignore = \"not yet implemented\"]\n+fn z_test() {}\n+\n+#[test]\n+fn a_test() {}"}, {"sha": "22afe104bfb1d921ed50c460be7f2ccbbcebce9d", "filename": "tests/ui/test-attrs/tests-listing-format-terse.run.stdout", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-terse.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-terse.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftests-listing-format-terse.run.stdout?ref=9d0eac4d02da8a1b139ff3dca7fc4b458fb99eb6", "patch": "@@ -0,0 +1,3 @@\n+a_test: test\n+m_test: test\n+z_test: test"}]}