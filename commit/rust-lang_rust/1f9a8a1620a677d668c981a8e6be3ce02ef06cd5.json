{"sha": "1f9a8a1620a677d668c981a8e6be3ce02ef06cd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOWE4YTE2MjBhNjc3ZDY2OGM5ODFhOGU2YmUzY2UwMmVmMDZjZDU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-05T08:44:42Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-20T05:46:40Z"}, "message": "Add a `std::io::read_to_string` function\n\nThe equivalent of `std::fs::read_to_string`, but generalized to all\n`Read` impls.\n\nAs the documentation on `std::io::read_to_string` says, the advantage of\nthis function is that it means you don't have to create a variable first\nand it provides more type safety since you can only get the buffer out\nif there were no errors. If you use `Read::read_to_string`, you have to\nremember to check whether the read succeeded because otherwise your\nbuffer will be empty.\n\nIt's friendlier to newcomers and better in most cases to use an explicit\nreturn value instead of an out parameter.", "tree": {"sha": "f0fd43feb0e964af9c49031703495130bced0567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0fd43feb0e964af9c49031703495130bced0567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5", "html_url": "https://github.com/rust-lang/rust/commit/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c11b93f5a8914a40f619b0a1663baafe029d427", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c11b93f5a8914a40f619b0a1663baafe029d427", "html_url": "https://github.com/rust-lang/rust/commit/0c11b93f5a8914a40f619b0a1663baafe029d427"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "7a1896e4e59015270d4402f606a51c39bae65ccd", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=1f9a8a1620a677d668c981a8e6be3ce02ef06cd5", "patch": "@@ -945,6 +945,33 @@ pub trait Read {\n     }\n }\n \n+/// Convenience function for [`Read::read_to_string`].\n+///\n+/// This avoids having to create a variable first and it provides more type safety\n+/// since you can only get the buffer out if there were no errors. (If you use\n+/// [`Read::read_to_string`] you have to remember to check whether the read succeeded\n+/// because otherwise your buffer will be empty.)\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(io_read_to_string)]\n+///\n+/// # use std::io;\n+/// fn main() -> io::Result<()> {\n+///     let stdin = io::read_to_string(&mut io::stdin())?;\n+///     println!(\"Stdin was:\");\n+///     println!(\"{}\", stdin);\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"io_read_to_string\", issue = \"80218\")]\n+pub fn read_to_string<R: Read>(reader: &mut R) -> Result<String> {\n+    let mut buf = String::new();\n+    reader.read_to_string(&mut buf)?;\n+    Ok(buf)\n+}\n+\n /// A buffer type used with `Read::read_vectored`.\n ///\n /// It is semantically a wrapper around an `&mut [u8]`, but is guaranteed to be"}]}