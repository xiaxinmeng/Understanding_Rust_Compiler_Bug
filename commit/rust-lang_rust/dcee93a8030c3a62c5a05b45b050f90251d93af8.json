{"sha": "dcee93a8030c3a62c5a05b45b050f90251d93af8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZWU5M2E4MDMwYzNhNjJjNWEwNWI0NWIwNTBmOTAyNTFkOTNhZjg=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-16T08:11:48Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-18T00:37:31Z"}, "message": "replace Add example with something more evocative of addition\n\nCurrently most of the operator traits use trivial implementation\nexamples that only perform side effects. Honestly, that might not be too\nbad for the sake of documentation; but anyway, here's a proposal to move\na slightly modified version of the module-level point-addition example\ninto the `Add` documentation, since it's more evocative of addition\nsemantics.\n\nPart of #29365\n\nwrap identifiers in backticks\n\nminor rephrasing\n\nfix module-level documentation to be more truthful\n\nThis branch changes the example for `Add` to no longer be a \"minimum implementation that prints something to the screen\".", "tree": {"sha": "b964e1bd288edb951899c01a8845a558cbeb0a90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b964e1bd288edb951899c01a8845a558cbeb0a90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcee93a8030c3a62c5a05b45b050f90251d93af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcee93a8030c3a62c5a05b45b050f90251d93af8", "html_url": "https://github.com/rust-lang/rust/commit/dcee93a8030c3a62c5a05b45b050f90251d93af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcee93a8030c3a62c5a05b45b050f90251d93af8/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f65d96fe3fa3cfae2cfc88be40f7416a22c88bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65d96fe3fa3cfae2cfc88be40f7416a22c88bf2", "html_url": "https://github.com/rust-lang/rust/commit/f65d96fe3fa3cfae2cfc88be40f7416a22c88bf2"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "9e6310ed460d2a90b14a64bd933ed35c8cc8ba29", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dcee93a8030c3a62c5a05b45b050f90251d93af8/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcee93a8030c3a62c5a05b45b050f90251d93af8/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=dcee93a8030c3a62c5a05b45b050f90251d93af8", "patch": "@@ -62,8 +62,7 @@\n //! }\n //! ```\n //!\n-//! See the documentation for each trait for a minimum implementation that\n-//! prints something to the screen.\n+//! See the documentation for each trait for an example implementation.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -166,25 +165,38 @@ macro_rules! forward_ref_binop {\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Add`. When `Foo + Foo` happens, it ends up\n-/// calling `add`, and therefore, `main` prints `Adding!`.\n+/// This example creates a `Point` struct that implements the `Add` trait, and\n+/// then demonstrates adding two `Point`s.\n ///\n /// ```\n /// use std::ops::Add;\n ///\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n ///\n-/// impl Add for Foo {\n-///     type Output = Foo;\n+/// impl Add for Point {\n+///     type Output = Point;\n ///\n-///     fn add(self, _rhs: Foo) -> Foo {\n-///         println!(\"Adding!\");\n-///         self\n+///     fn add(self, other: Point) -> Point {\n+///         Point {\n+///             x: self.x + other.x,\n+///             y: self.y + other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Point {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo + Foo;\n+///     assert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n+///                Point { x: 3, y: 3 });\n /// }\n /// ```\n #[lang = \"add\"]"}]}