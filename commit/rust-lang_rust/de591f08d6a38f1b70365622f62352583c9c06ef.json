{"sha": "de591f08d6a38f1b70365622f62352583c9c06ef", "node_id": "C_kwDOAAsO6NoAKGRlNTkxZjA4ZDZhMzhmMWI3MDM2NTYyMmY2MjM1MjU4M2M5YzA2ZWY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-03T13:57:08Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-03T15:26:05Z"}, "message": "Handle raw identifiers in proc macro server", "tree": {"sha": "e14d3c1d2454393507c6e821a16906455e9ac6b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14d3c1d2454393507c6e821a16906455e9ac6b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de591f08d6a38f1b70365622f62352583c9c06ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmOLao0ACgkQ4laYqTBY\nYXE0NQ//bU37D71qwvxRWhov+nuppTvsrl8z9m+AHeLs5Npgt5QS5y7DVEL3oDna\nd+ulWKf0/TcDhUIWnbl/Tq7TifO1ioCXWxQXG4JE9tZ/V48weAOLUtiuMZQsTMK9\nDdyL0lKbe3zbc3KYA9zEBXYLkgpTsubkxIJiajVgSPhDjIA6rpcfAUXRpcl6qN8g\nQ8V8ckqgUWBOxx7TIkLMtGAMWfDeNDPWYBR6RmFXnr8M4vxorDJacYDq9+2rpw/u\nN0jIYjewfvzQc+A8UhNKkHpZd0cQ3lba+lM6y13stL0SMzBKCQSaVWP2jAWD+9NV\nH/Qce1RjB7Kehc+IV0fidKbOF0xuomgnUrCEqV4YWYV2Y52BVQ+t5u8DFK6gASEa\n+nhKKT6MnACWsNbzJlRx90B8CO9zA9PlhWnJcQIefBUqHEYOzI4WsYTtu5qra3F6\nAwKjyotYPF+uXFMDctDfyD9WyYbQXYAyeeKuN4cL3Z230D+QQE/8mJk3oqo4RUZn\notpLHpE/1EVKxlEU3qv7QZxBGltvyeOxjdIiTr7RMzXf2MuYY8ZDp7DUsr5e67nG\nOerKEVlSY3tyUN9zABvzSaW2MyP5bWrDLwCt6rcc6Tt+F4zr21n8qtbZSLfB47Hf\nlyhRwssIeCcAKnQW9jjNgLaW0RmzwG/zWWyxkn1SbWqwgVNHdos=\n=Z5Wj\n-----END PGP SIGNATURE-----", "payload": "tree e14d3c1d2454393507c6e821a16906455e9ac6b6\nparent 04a2ac2de20565e87c561bdb3c3814dfeec1513c\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1670075828 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1670081165 +0900\n\nHandle raw identifiers in proc macro server\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de591f08d6a38f1b70365622f62352583c9c06ef", "html_url": "https://github.com/rust-lang/rust/commit/de591f08d6a38f1b70365622f62352583c9c06ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de591f08d6a38f1b70365622f62352583c9c06ef/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a2ac2de20565e87c561bdb3c3814dfeec1513c", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a2ac2de20565e87c561bdb3c3814dfeec1513c", "html_url": "https://github.com/rust-lang/rust/commit/04a2ac2de20565e87c561bdb3c3814dfeec1513c"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "c19684850fcb53dcaccab56643504076c1fc72df", "filename": "crates/proc-macro-srv/src/abis/abi_1_58/ra_server.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs?ref=de591f08d6a38f1b70365622f62352583c9c06ef", "patch": "@@ -471,8 +471,12 @@ impl server::Punct for RustAnalyzer {\n }\n \n impl server::Ident for RustAnalyzer {\n-    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n+    fn new(&mut self, string: &str, span: Self::Span, is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident::new_with_is_raw(\n+            string.into(),\n+            span,\n+            is_raw,\n+        ))))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "eb9d7a94b5dc9c4f18345ec160408a07d769b34f", "filename": "crates/proc-macro-srv/src/abis/abi_1_63/ra_server.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs?ref=de591f08d6a38f1b70365622f62352583c9c06ef", "patch": "@@ -486,8 +486,12 @@ impl server::Punct for RustAnalyzer {\n }\n \n impl server::Ident for RustAnalyzer {\n-    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n+    fn new(&mut self, string: &str, span: Self::Span, is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident::new_with_is_raw(\n+            string.into(),\n+            span,\n+            is_raw,\n+        ))))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "d38bd9400b5a962d4713d4d4026e2f6a13425102", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=de591f08d6a38f1b70365622f62352583c9c06ef", "patch": "@@ -107,8 +107,8 @@ impl server::TokenStream for RustAnalyzer {\n             }\n \n             bridge::TokenTree::Ident(ident) => {\n-                // FIXME: handle raw idents\n                 let text = ident.sym.text();\n+                let text = if ident.is_raw { tt::SmolStr::from_iter([\"r#\", &text]) } else { text };\n                 let ident: tt::Ident = tt::Ident { text, id: ident.span };\n                 let leaf = tt::Leaf::from(ident);\n                 let tree = TokenTree::from(leaf);\n@@ -182,9 +182,8 @@ impl server::TokenStream for RustAnalyzer {\n             .map(|tree| match tree {\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n                     bridge::TokenTree::Ident(bridge::Ident {\n-                        sym: Symbol::intern(&ident.text),\n-                        // FIXME: handle raw idents\n-                        is_raw: false,\n+                        sym: Symbol::intern(&ident.text.trim_start_matches(\"r#\")),\n+                        is_raw: ident.text.starts_with(\"r#\"),\n                         span: ident.id,\n                     })\n                 }"}, {"sha": "1ccc170f422b086a854bd746650f9d19facdd735", "filename": "crates/proc-macro-srv/src/tests/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs?ref=de591f08d6a38f1b70365622f62352583c9c06ef", "patch": "@@ -63,7 +63,7 @@ fn test_fn_like_macro_clone_raw_ident() {\n         \"r#async\",\n         expect![[r#\"\n             SUBTREE $\n-              IDENT   async 4294967295\"#]],\n+              IDENT   r#async 4294967295\"#]],\n     );\n }\n \n@@ -86,15 +86,13 @@ fn test_fn_like_mk_literals() {\n \n #[test]\n fn test_fn_like_mk_idents() {\n-    // FIXME: this test is wrong: raw should be 'r#raw' but ABIs 1.64 and below\n-    // simply ignore `is_raw` when implementing the `Ident` interface.\n     assert_expand(\n         \"fn_like_mk_idents\",\n         r#\"\"#,\n         expect![[r#\"\n             SUBTREE $\n               IDENT   standard 4294967295\n-              IDENT   raw 4294967295\"#]],\n+              IDENT   r#raw 4294967295\"#]],\n     );\n }\n "}, {"sha": "85daec262c424646618b4e69d31a3730ccfa802c", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de591f08d6a38f1b70365622f62352583c9c06ef/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=de591f08d6a38f1b70365622f62352583c9c06ef", "patch": "@@ -86,10 +86,20 @@ pub enum Spacing {\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Ident {\n+    /// Identifier or keyword. Unlike rustc, we keep \"r#\" prefix when it represents a raw identifier.\n     pub text: SmolStr,\n     pub id: TokenId,\n }\n \n+impl Ident {\n+    /// Constructor intended to be used only by proc macro server. `text` should not contain raw\n+    /// identifier prefix.\n+    pub fn new_with_is_raw(text: SmolStr, id: TokenId, is_raw: bool) -> Self {\n+        let text = if is_raw { SmolStr::from_iter([\"r#\", &text]) } else { text };\n+        Ident { text, id }\n+    }\n+}\n+\n impl Leaf {\n     pub fn id(&self) -> TokenId {\n         match self {"}]}