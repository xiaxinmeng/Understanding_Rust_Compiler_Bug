{"sha": "dbeea18fc5f94d29db74144e55089cc55aa8e11d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWVhMThmYzVmOTRkMjlkYjc0MTQ0ZTU1MDg5Y2M1NWFhOGUxMWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-01T21:04:32Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-01T21:05:03Z"}, "message": "docs: Document language items, as per #3342", "tree": {"sha": "df5a1d46893ccd3c3b073688dd36a7454be8e8df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5a1d46893ccd3c3b073688dd36a7454be8e8df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbeea18fc5f94d29db74144e55089cc55aa8e11d", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbeea18fc5f94d29db74144e55089cc55aa8e11d", "html_url": "https://github.com/rust-lang/rust/commit/dbeea18fc5f94d29db74144e55089cc55aa8e11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbeea18fc5f94d29db74144e55089cc55aa8e11d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9fd72d05d5baa1005eedb6511e2577e363549a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9fd72d05d5baa1005eedb6511e2577e363549a", "html_url": "https://github.com/rust-lang/rust/commit/8e9fd72d05d5baa1005eedb6511e2577e363549a"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "fef894792be68bd776121430d30f5f1716ecd14d", "filename": "doc/rust.md", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/dbeea18fc5f94d29db74144e55089cc55aa8e11d/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbeea18fc5f94d29db74144e55089cc55aa8e11d/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=dbeea18fc5f94d29db74144e55089cc55aa8e11d", "patch": "@@ -1420,13 +1420,111 @@ names are effectively reserved. Some significant attributes include:\n \n * The `doc` attribute, for documenting code in-place.\n * The `cfg` attribute, for conditional-compilation by build-configuration.\n+* The `lang` attribute, for custom definitions of traits and functions that are known to the Rust compiler (see [Language items](#language-items)).\n * The `link` attribute, for describing linkage metadata for a crate.\n * The `test` attribute, for marking functions as unit tests.\n-* The `allow`, `warn`, `forbid`, and `deny` attributes, for controling lint checks. Lint checks supported\n+* The `allow`, `warn`, `forbid`, and `deny` attributes, for controlling lint checks. Lint checks supported\n by the compiler can be found via `rustc -W help`.\n \n Other attributes may be added or removed during development of the language.\n \n+### Language items\n+\n+Some primitive Rust operations are defined in Rust code,\n+rather than being implemented directly in C or assembly language.\n+The definitions of these operations have to be easy for the compiler to find.\n+The `lang` attribute makes it possible to declare these operations.\n+For example, the `str` module in the Rust core library defines the string equality function:\n+\n+~~~\n+#[lang=\"str_eq\"]\n+pub fn eq_slice(a: &str, b: &str) -> bool {\n+    true // not actually the implementation\n+}\n+~~~\n+\n+The name `str_eq` has a special meaning to the Rust compiler,\n+and the presence of this definition means that it will use this definition\n+when generating calls to the string equality function.\n+\n+A complete list of the built-in language items follows:\n+\n+#### Traits\n+\n+`const`\n+  : Cannot be mutated.\n+`copy`\n+  : Can be implicitly copied.\n+`owned`\n+  : Are uniquely owned.\n+`durable`\n+  : Contain borrowed pointers.\n+`drop`\n+  : Have finalizers.\n+`add`\n+  : Elements can be added (for example, integers and floats).\n+`sub`\n+  : Elements can be subtracted.\n+`mul`\n+  : Elements can be multiplied.\n+`div`\n+  : Elements can be divided.\n+`mod`\n+  : Elements have a modulo operation.\n+`neg`\n+  : Elements can be negated arithmetically.\n+`not`\n+  : Elements can be negated logically.\n+`bitxor`\n+  : Elements have an exclusive-or operation.\n+`bitand`\n+  : Elements have a bitwise `and` operation.\n+`bitor`\n+  : Elements have a bitwise `or` operation.\n+`shl`\n+  : Elements have a left shift operation.\n+`shr`\n+  : Elements have a right shift operation.\n+`index`\n+  : Elements can be indexed.\n+`eq`\n+  : Elements can be compared for equality.\n+`ord`\n+  : Elements have a partial ordering.\n+\n+#### Operations\n+\n+`str_eq`\n+  : Compare two strings for equality.\n+`uniq_str_eq`\n+  : Compare two owned strings for equality.\n+`annihilate`\n+  : Destroy a box before freeing it.\n+`log_type`\n+  : Generically print a string representation of any type.\n+`fail_`\n+  : Abort the program with an error.\n+`fail_bounds_check`\n+  : Abort the program with a bounds check error.\n+`exchange_malloc`\n+  : Allocate memory on the exchange heap.\n+`exchange_free`\n+  : Free memory that was allocated on the exchange heap.\n+`malloc`\n+  : Allocate memory on the managed heap.\n+`free`\n+  : Free memory that was allocated on the managed heap.\n+`borrow_as_imm`\n+  : Create an immutable borrowed pointer to a mutable value.\n+`return_to_mut`\n+  : Release a borrowed pointer created with `return_to_mut`\n+`check_not_borrowed`\n+  : Fail if a value has existing borrowed pointers to it.\n+`strdup_uniq`\n+  : Return a new unique string containing a copy of the contents of a unique string.\n+\n+> **Note:** This list is likely to become out of date. We should auto-generate it\n+> from `librustc/middle/lang_items.rs`.\n \n # Statements and expressions\n "}]}