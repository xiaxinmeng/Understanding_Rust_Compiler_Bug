{"sha": "231444d989db23ab53001e29af53fa844e0b08a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTQ0NGQ5ODlkYjIzYWI1MzAwMWUyOWFmNTNmYTg0NGUwYjA4YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T18:57:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T18:57:55Z"}, "message": "Auto merge of #6035 - matthiaskrgr:try_into_show_type, r=flip1995\n\nuseless_conversion: show type in error message.\n\nchangelog: useless_conversion: show type in error message.", "tree": {"sha": "ce7b968d7eb165aca944e0c97a83124d6bc7e5d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7b968d7eb165aca944e0c97a83124d6bc7e5d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/231444d989db23ab53001e29af53fa844e0b08a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/231444d989db23ab53001e29af53fa844e0b08a1", "html_url": "https://github.com/rust-lang/rust/commit/231444d989db23ab53001e29af53fa844e0b08a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/231444d989db23ab53001e29af53fa844e0b08a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96c47effaa649ec2f83f13862567328bd91a21b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96c47effaa649ec2f83f13862567328bd91a21b", "html_url": "https://github.com/rust-lang/rust/commit/f96c47effaa649ec2f83f13862567328bd91a21b"}, {"sha": "7ba1a8fec42ca11c169bcff3650f9c1e108b6743", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba1a8fec42ca11c169bcff3650f9c1e108b6743", "html_url": "https://github.com/rust-lang/rust/commit/7ba1a8fec42ca11c169bcff3650f9c1e108b6743"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "4e4a206a583a2d12c85c7ed55f9365fe25306b1e", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/231444d989db23ab53001e29af53fa844e0b08a1/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231444d989db23ab53001e29af53fa844e0b08a1/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=231444d989db23ab53001e29af53fa844e0b08a1", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"useless conversion to the same type\",\n+                            &format!(\"useless conversion to the same type: `{}`\", b),\n                             \"consider removing `.into()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -95,7 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"useless conversion to the same type\",\n+                            &format!(\"useless conversion to the same type: `{}`\", b),\n                             \"consider removing `.into_iter()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -116,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                 cx,\n                                 USELESS_CONVERSION,\n                                 e.span,\n-                                \"useless conversion to the same type\",\n+                                &format!(\"useless conversion to the same type: `{}`\", b),\n                                 None,\n                                 \"consider removing `.try_into()`\",\n                             );\n@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    \"useless conversion to the same type\",\n+                                    &format!(\"useless conversion to the same type: `{}`\", b),\n                                     None,\n                                     &hint,\n                                 );\n@@ -166,7 +166,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    \"useless conversion to the same type\",\n+                                    &format!(\"useless conversion to the same type: `{}`\", b),\n                                     &sugg_msg,\n                                     sugg.to_string(),\n                                     Applicability::MachineApplicable, // snippet"}, {"sha": "11c6efb25cceace746742c0bf5677c2c21b5043d", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/231444d989db23ab53001e29af53fa844e0b08a1/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/231444d989db23ab53001e29af53fa844e0b08a1/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=231444d989db23ab53001e29af53fa844e0b08a1", "patch": "@@ -1,4 +1,4 @@\n-error: useless conversion to the same type\n+error: useless conversion to the same type: `T`\n   --> $DIR/useless_conversion.rs:6:13\n    |\n LL |     let _ = T::from(val);\n@@ -10,61 +10,61 @@ note: the lint level is defined here\n LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `T`\n   --> $DIR/useless_conversion.rs:7:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `i32`\n   --> $DIR/useless_conversion.rs:19:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion.rs:60:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion.rs:61:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion.rs:62:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion.rs:63:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::str::Lines`\n   --> $DIR/useless_conversion.rs:64:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n   --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion.rs:66:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `i32`\n   --> $DIR/useless_conversion.rs:71:13\n    |\n LL |     let _ = i32::from(a + b) * 3;"}, {"sha": "2e0d9129bfb3064735077e7ff5a6c23ede5390c6", "filename": "tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/231444d989db23ab53001e29af53fa844e0b08a1/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/231444d989db23ab53001e29af53fa844e0b08a1/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=231444d989db23ab53001e29af53fa844e0b08a1", "patch": "@@ -1,4 +1,4 @@\n-error: useless conversion to the same type\n+error: useless conversion to the same type: `T`\n   --> $DIR/useless_conversion_try.rs:6:13\n    |\n LL |     let _ = T::try_from(val).unwrap();\n@@ -11,63 +11,63 @@ LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: consider removing `T::try_from()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `T`\n   --> $DIR/useless_conversion_try.rs:7:5\n    |\n LL |     val.try_into().unwrap()\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:29:21\n    |\n LL |     let _: String = \"foo\".to_string().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:30:21\n    |\n LL |     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `TryFrom::try_from()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:31:13\n    |\n LL |     let _ = String::try_from(\"foo\".to_string()).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:32:13\n    |\n LL |     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:33:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:34:21\n    |\n LL |     let _: String = \"\".to_owned().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n-error: useless conversion to the same type\n+error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:35:27\n    |\n LL |     let _: String = match String::from(\"_\").try_into() {"}]}