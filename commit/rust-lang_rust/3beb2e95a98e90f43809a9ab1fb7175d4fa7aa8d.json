{"sha": "3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZWIyZTk1YTk4ZTkwZjQzODA5YTlhYjFmYjcxNzVkNGZhN2FhOGQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T20:30:16Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T20:30:16Z"}, "message": "Expand assert!(expr) to panic() function instead of panic!() macro.\n\nThe panic message might contain braces which should never be\ninterpreted as format placeholders, which panic!() will do in a future\nedition.", "tree": {"sha": "f9d62c295b54888714864c0565deb54bd8f49f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d62c295b54888714864c0565deb54bd8f49f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d", "html_url": "https://github.com/rust-lang/rust/commit/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f228efc3f56ca13a4a969d0ee72c2e0844ac6a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/f228efc3f56ca13a4a969d0ee72c2e0844ac6a72", "html_url": "https://github.com/rust-lang/rust/commit/f228efc3f56ca13a4a969d0ee72c2e0844ac6a72"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "bc3276538da8f3eff470ca1eb5ec8bb82face44e", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d", "patch": "@@ -1,8 +1,8 @@\n use rustc_errors::{Applicability, DiagnosticBuilder};\n \n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, TokenKind};\n-use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n@@ -26,31 +26,41 @@ pub fn expand_assert<'cx>(\n     // `core::panic` and `std::panic` are different macros, so we use call-site\n     // context to pick up whichever is currently in scope.\n     let sp = cx.with_call_site_ctxt(sp);\n-    let tokens = custom_message.unwrap_or_else(|| {\n-        TokenStream::from(TokenTree::token(\n-            TokenKind::lit(\n-                token::Str,\n-                Symbol::intern(&format!(\n-                    \"assertion failed: {}\",\n-                    pprust::expr_to_string(&cond_expr).escape_debug()\n-                )),\n-                None,\n-            ),\n-            DUMMY_SP,\n-        ))\n-    });\n-    let args = P(MacArgs::Delimited(DelimSpan::from_single(sp), MacDelimiter::Parenthesis, tokens));\n-    let panic_call = MacCall {\n-        path: Path::from_ident(Ident::new(sym::panic, sp)),\n-        args,\n-        prior_type_ascription: None,\n+\n+    let panic_call = {\n+        if let Some(tokens) = custom_message {\n+            // Pass the custom message to panic!().\n+            cx.expr(\n+                sp,\n+                ExprKind::MacCall(MacCall {\n+                    path: Path::from_ident(Ident::new(sym::panic, sp)),\n+                    args: P(MacArgs::Delimited(\n+                        DelimSpan::from_single(sp),\n+                        MacDelimiter::Parenthesis,\n+                        tokens,\n+                    )),\n+                    prior_type_ascription: None,\n+                }),\n+            )\n+        } else {\n+            // Pass our own message directly to $crate::panicking::panic(),\n+            // because it might contain `{` and `}` that should always be\n+            // passed literally.\n+            cx.expr_call_global(\n+                sp,\n+                cx.std_path(&[sym::panicking, sym::panic]),\n+                vec![cx.expr_str(\n+                    DUMMY_SP,\n+                    Symbol::intern(&format!(\n+                        \"assertion failed: {}\",\n+                        pprust::expr_to_string(&cond_expr).escape_debug()\n+                    )),\n+                )],\n+            )\n+        }\n     };\n-    let if_expr = cx.expr_if(\n-        sp,\n-        cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)),\n-        cx.expr(sp, ExprKind::MacCall(panic_call)),\n-        None,\n-    );\n+    let if_expr =\n+        cx.expr_if(sp, cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)), panic_call, None);\n     MacEager::expr(if_expr)\n }\n "}, {"sha": "733d2b1ef9ab2bfe3e04e8971037585343a4cc6c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d", "patch": "@@ -791,6 +791,7 @@ symbols! {\n         panic_runtime,\n         panic_str,\n         panic_unwind,\n+        panicking,\n         param_attrs,\n         parent_trait,\n         partial_cmp,"}, {"sha": "53e6b4598392ceb4306f8a546ecb3b5b46146e41", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=3beb2e95a98e90f43809a9ab1fb7175d4fa7aa8d", "patch": "@@ -1217,6 +1217,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     #[rustc_diagnostic_item = \"assert_macro\"]\n+    #[allow_internal_unstable(core_panic)]\n     macro_rules! assert {\n         ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};"}]}