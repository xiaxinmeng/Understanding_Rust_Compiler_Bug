{"sha": "f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MWQ4N2U2YTAzZjRlNjQwMzRlZThmYTA3M2FjOGQ0N2U3MWRjODg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T19:07:40Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcollections: fix fallout", "tree": {"sha": "385190a611f2a33320a3f2440e6553e9c1ffde3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385190a611f2a33320a3f2440e6553e9c1ffde3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "html_url": "https://github.com/rust-lang/rust/commit/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/comments", "author": null, "committer": null, "parents": [{"sha": "1646d10edc57ec82536d6253f866084beb69a73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1646d10edc57ec82536d6253f866084beb69a73e", "html_url": "https://github.com/rust-lang/rust/commit/1646d10edc57ec82536d6253f866084beb69a73e"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "e49a8ddbe5ab8054fed030b8bdb2231374dc4a50", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "patch": "@@ -107,10 +107,12 @@ pub struct MoveEntries<K, V> {\n }\n \n /// An iterator over a BTreeMap's keys.\n-pub type Keys<'a, K, V> = iter::Map<'static, (&'a K, &'a V), &'a K, Entries<'a, K, V>>;\n+pub type Keys<'a, K, V> =\n+    iter::Map<(&'a K, &'a V), &'a K, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>;\n \n /// An iterator over a BTreeMap's values.\n-pub type Values<'a, K, V> = iter::Map<'static, (&'a K, &'a V), &'a V, Entries<'a, K, V>>;\n+pub type Values<'a, K, V> =\n+    iter::Map<(&'a K, &'a V), &'a V, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>;\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n pub enum Entry<'a, K:'a, V:'a> {\n@@ -1207,7 +1209,9 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n-        self.iter().map(|(k, _)| k)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.iter().map(first)\n     }\n \n     /// Gets an iterator over the values of the map.\n@@ -1226,7 +1230,9 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n-        self.iter().map(|(_, v)| v)\n+        fn second<A, B>((_, b): (A, B)) -> B { b }\n+\n+        self.iter().map(second)\n     }\n \n     /// Return the number of elements in the map."}, {"sha": "4289d42977b48b3caa7343660836437d5f50e1b6", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "patch": "@@ -36,7 +36,8 @@ pub struct BTreeSet<T>{\n pub type Items<'a, T> = Keys<'a, T, ()>;\n \n /// An owning iterator over a BTreeSet's items.\n-pub type MoveItems<T> = iter::Map<'static, (T, ()), T, MoveEntries<T, ()>>;\n+pub type MoveItems<T> =\n+    iter::Map<(T, ()), T, MoveEntries<T, ()>, fn((T, ())) -> T>;\n \n /// A lazy iterator producing elements in the set difference (in-order).\n pub struct DifferenceItems<'a, T:'a> {\n@@ -87,7 +88,9 @@ impl<T> BTreeSet<T> {\n     /// Gets an iterator for moving out the BtreeSet's contents.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn into_iter(self) -> MoveItems<T> {\n-        self.map.into_iter().map(|(k, _)| k)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.map.into_iter().map(first)\n     }\n }\n "}, {"sha": "95fddb6ee1141e31ca568d2d005e9fb034312ded", "filename": "src/libcollections/tree/map.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Ftree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Ftree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmap.rs?ref=f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "patch": "@@ -234,7 +234,9 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n-        self.iter().map(|(k, _v)| k)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.iter().map(first)\n     }\n \n     /// Gets a lazy iterator over the values in the map, in ascending order\n@@ -256,7 +258,9 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n-        self.iter().map(|(_k, v)| v)\n+        fn second<A, B>((_, b): (A, B)) -> B { b }\n+\n+        self.iter().map(second)\n     }\n \n     /// Gets a lazy iterator over the key-value pairs in the map, in ascending order.\n@@ -863,11 +867,11 @@ pub struct RevMutEntries<'a, K:'a, V:'a> {\n \n /// TreeMap keys iterator.\n pub type Keys<'a, K, V> =\n-    iter::Map<'static, (&'a K, &'a V), &'a K, Entries<'a, K, V>>;\n+    iter::Map<(&'a K, &'a V), &'a K, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>;\n \n /// TreeMap values iterator.\n pub type Values<'a, K, V> =\n-    iter::Map<'static, (&'a K, &'a V), &'a V, Entries<'a, K, V>>;\n+    iter::Map<(&'a K, &'a V), &'a V, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>;\n \n \n // FIXME #5846 we want to be able to choose between &x and &mut x"}, {"sha": "cee32619c810132003a6a68de949823ca9bb675c", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "patch": "@@ -205,7 +205,9 @@ impl<T: Ord> TreeSet<T> {\n     #[inline]\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn into_iter(self) -> MoveSetItems<T> {\n-        self.map.into_iter().map(|(value, _)| value)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.map.into_iter().map(first)\n     }\n \n     /// Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\n@@ -560,7 +562,7 @@ pub struct RevSetItems<'a, T:'a> {\n }\n \n /// A lazy forward iterator over a set that consumes the set while iterating.\n-pub type MoveSetItems<T> = iter::Map<'static, (T, ()), T, MoveEntries<T, ()>>;\n+pub type MoveSetItems<T> = iter::Map<(T, ()), T, MoveEntries<T, ()>, fn((T, ())) -> T>;\n \n /// A lazy iterator producing elements in the set difference (in-order).\n pub struct DifferenceItems<'a, T:'a> {"}, {"sha": "a4dee8076487d142fa0172085398e6c2e7561f6f", "filename": "src/libcollections/trie/map.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Ftrie%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Ftrie%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmap.rs?ref=f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "patch": "@@ -197,14 +197,18 @@ impl<T> TrieMap<T> {\n     /// The iterator's element type is `uint`.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn keys<'r>(&'r self) -> Keys<'r, T> {\n-        self.iter().map(|(k, _v)| k)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.iter().map(first)\n     }\n \n     /// Gets an iterator visiting all values in ascending order by the keys.\n     /// The iterator's element type is `&'r T`.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn values<'r>(&'r self) -> Values<'r, T> {\n-        self.iter().map(|(_k, v)| v)\n+        fn second<A, B>((_, b): (A, B)) -> B { b }\n+\n+        self.iter().map(second)\n     }\n \n     /// Gets an iterator over the key-value pairs in the map, ordered by keys.\n@@ -1091,12 +1095,11 @@ pub struct MutEntries<'a, T:'a> {\n }\n \n /// A forward iterator over the keys of a map.\n-pub type Keys<'a, T> =\n-    iter::Map<'static, (uint, &'a T), uint, Entries<'a, T>>;\n+pub type Keys<'a, T> = iter::Map<(uint, &'a T), uint, Entries<'a, T>, fn((uint, &'a T)) -> uint>;\n \n /// A forward iterator over the values of a map.\n pub type Values<'a, T> =\n-    iter::Map<'static, (uint, &'a T), &'a T, Entries<'a, T>>;\n+    iter::Map<(uint, &'a T), &'a T, Entries<'a, T>, fn((uint, &'a T)) -> &'a T>;\n \n // FIXME #5846: see `addr!` above.\n macro_rules! item { ($i:item) => {$i}}"}, {"sha": "9356c769d266246133937aea3da225df9d3af617", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "patch": "@@ -141,14 +141,18 @@ impl<V> VecMap<V> {\n     /// The iterator's element type is `uint`.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn keys<'r>(&'r self) -> Keys<'r, V> {\n-        self.iter().map(|(k, _v)| k)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.iter().map(first)\n     }\n \n     /// Returns an iterator visiting all values in ascending order by the keys.\n     /// The iterator's element type is `&'r V`.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn values<'r>(&'r self) -> Values<'r, V> {\n-        self.iter().map(|(_k, v)| v)\n+        fn second<A, B>((_, b): (A, B)) -> B { b }\n+\n+        self.iter().map(second)\n     }\n \n     /// Returns an iterator visiting all key-value pairs in ascending order by the keys.\n@@ -620,12 +624,11 @@ iterator!(impl MutEntries -> (uint, &'a mut V), as_mut)\n double_ended_iterator!(impl MutEntries -> (uint, &'a mut V), as_mut)\n \n /// Forward iterator over the keys of a map\n-pub type Keys<'a, V> =\n-    iter::Map<'static, (uint, &'a V), uint, Entries<'a, V>>;\n+pub type Keys<'a, V> = iter::Map<(uint, &'a V), uint, Entries<'a, V>, fn((uint, &'a V)) -> uint>;\n \n /// Forward iterator over the values of a map\n pub type Values<'a, V> =\n-    iter::Map<'static, (uint, &'a V), &'a V, Entries<'a, V>>;\n+    iter::Map<(uint, &'a V), &'a V, Entries<'a, V>, fn((uint, &'a V)) -> &'a V>;\n \n /// Iterator over the key-value pairs of a map, the iterator consumes the map\n pub type MoveItems<V> ="}]}