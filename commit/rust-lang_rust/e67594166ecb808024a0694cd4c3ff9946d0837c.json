{"sha": "e67594166ecb808024a0694cd4c3ff9946d0837c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NzU5NDE2NmVjYjgwODAyNGEwNjk0Y2Q0YzNmZjk5NDZkMDgzN2M=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T18:35:47Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T18:35:47Z"}, "message": "Run tests in nll mode", "tree": {"sha": "875edd76f6a1360c5d54fed8932eb09e5207bd63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/875edd76f6a1360c5d54fed8932eb09e5207bd63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e67594166ecb808024a0694cd4c3ff9946d0837c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e67594166ecb808024a0694cd4c3ff9946d0837c", "html_url": "https://github.com/rust-lang/rust/commit/e67594166ecb808024a0694cd4c3ff9946d0837c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e67594166ecb808024a0694cd4c3ff9946d0837c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2683aa5694878120bee5dd8cbb361a04e512ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2683aa5694878120bee5dd8cbb361a04e512ebb", "html_url": "https://github.com/rust-lang/rust/commit/c2683aa5694878120bee5dd8cbb361a04e512ebb"}], "stats": {"total": 115, "additions": 106, "deletions": 9}, "files": [{"sha": "d0f3be336dccb2b36419e9b5a89dbd879676373e", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.nll.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr?ref=e67594166ecb808024a0694cd4c3ff9946d0837c", "patch": "@@ -0,0 +1,50 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n+   |\n+LL |     let z: i32 = x;\n+   |            ---   ^ expected `i32`, found opaque type\n+   |            |\n+   |            expected due to this\n+...\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ------------ the found opaque type\n+   |\n+   = note:     expected type `i32`\n+           found opaque type `impl Sized`\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:17:30\n+   |\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                              ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   = note: ...so that the type `T` will meet its required lifetime bounds\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0308, E0310.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "7496d96fa2136aff302dae359aa353e11b8aa9fd", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.nll.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr?ref=e67594166ecb808024a0694cd4c3ff9946d0837c", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n    |\n LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n@@ -19,15 +19,15 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:14:30\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:17:30\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                              ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr"}, {"sha": "481d66dd8110f5400f6b65738d3fe26ffeebd63a", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.nll.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr?ref=e67594166ecb808024a0694cd4c3ff9946d0837c", "patch": "@@ -0,0 +1,47 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-57611-trait-alias.rs:8:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'static X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0343a769564af807e62b9dffdd9ce948138abca3", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.nll.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e67594166ecb808024a0694cd4c3ff9946d0837c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr?ref=e67594166ecb808024a0694cd4c3ff9946d0837c", "patch": "@@ -1,31 +1,31 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'static X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr"}]}