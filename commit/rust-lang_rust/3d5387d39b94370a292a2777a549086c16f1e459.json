{"sha": "3d5387d39b94370a292a2777a549086c16f1e459", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNTM4N2QzOWI5NDM3MGEyOTJhMjc3N2E1NDkwODZjMTZmMWU0NTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T02:18:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T02:18:37Z"}, "message": "Rollup merge of #63383 - Centril:async-lifetime-elision-tests, r=nikomatsakis\n\n`async fn` lifetime elision tests\n\nAdd `async fn` version of the tests in https://github.com/rust-lang/rust/pull/61207 per the first checkbox in https://github.com/rust-lang/rust/issues/62121#issuecomment-506884048.\nWorks towards resolving blockers in https://github.com/rust-lang/rust/pull/63209.\n\nr? @nikomatsakis\ncc @cramertj", "tree": {"sha": "e5cd5d943a0b7323c63e600ebfd87781813404f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5cd5d943a0b7323c63e600ebfd87781813404f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d5387d39b94370a292a2777a549086c16f1e459", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdU29+CRBK7hj4Ov3rIwAAdHIIAB/NGv75833dYdez/KqeMjpV\nklYcLzlrMuxDormpUsV+lb3XJSkroHo3+7arUkvGs8ITzfeyCpD1tURSMBGdkg/o\nyAjq+lDlgUIkbr6Jj0cri9Q26866EVYDYUPGGj0wrUnWAseRJIFuD5NNMaSF3NH0\nEU4XLgKhXub5flT6T9fNGv3lq1OdhGPExAM41dMbMxcDtk1EaksCh5NgKYljJrC/\nVWi+jcvnT0Z4GRdJ0+4JnXuhcqrYaRIM805F6B6utz+uuH99o2RwTIrBVJYSa4ed\n0wTUyUomVcWUEHWHbJzMXDlPNdXS3MOxVlW22Qu/aeZyWoHs9TmuNqEeoksdplU=\n=0Ivr\n-----END PGP SIGNATURE-----\n", "payload": "tree e5cd5d943a0b7323c63e600ebfd87781813404f3\nparent 3f181120795de77b3d9489f37e805082daa571e7\nparent 5ce8f7a1f98072d9df9fb562526151b83ecfe879\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565749117 +0200\ncommitter GitHub <noreply@github.com> 1565749117 +0200\n\nRollup merge of #63383 - Centril:async-lifetime-elision-tests, r=nikomatsakis\n\n`async fn` lifetime elision tests\n\nAdd `async fn` version of the tests in https://github.com/rust-lang/rust/pull/61207 per the first checkbox in https://github.com/rust-lang/rust/issues/62121#issuecomment-506884048.\nWorks towards resolving blockers in https://github.com/rust-lang/rust/pull/63209.\n\nr? @nikomatsakis\ncc @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5387d39b94370a292a2777a549086c16f1e459", "html_url": "https://github.com/rust-lang/rust/commit/3d5387d39b94370a292a2777a549086c16f1e459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d5387d39b94370a292a2777a549086c16f1e459/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f181120795de77b3d9489f37e805082daa571e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f181120795de77b3d9489f37e805082daa571e7", "html_url": "https://github.com/rust-lang/rust/commit/3f181120795de77b3d9489f37e805082daa571e7"}, {"sha": "5ce8f7a1f98072d9df9fb562526151b83ecfe879", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce8f7a1f98072d9df9fb562526151b83ecfe879", "html_url": "https://github.com/rust-lang/rust/commit/5ce8f7a1f98072d9df9fb562526151b83ecfe879"}], "stats": {"total": 2867, "additions": 2867, "deletions": 0}, "files": [{"sha": "b853f88a96dde3222382c236e4874193516d614b", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime-async.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn pin_ref(self: Pin<&Self>) -> Pin<&Self> { self }\n+\n+    async fn pin_mut(self: Pin<&mut Self>) -> Pin<&mut Self> { self }\n+\n+    async fn pin_pin_pin_ref(self: Pin<Pin<Pin<&Self>>>) -> Pin<Pin<Pin<&Self>>> { self }\n+\n+    async fn pin_ref_impl_trait(self: Pin<&Self>) -> impl Clone + '_ { self }\n+\n+    fn b(self: Pin<&Foo>, f: &Foo) -> Pin<&Foo> { self }\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> Alias<&Self> { self }\n+}\n+\n+// FIXME(Centril): extend with the rest of the non-`async fn` test\n+// when we allow `async fn`s inside traits and trait implementations.\n+\n+fn main() {\n+    let mut foo = Foo;\n+    { Pin::new(&foo).pin_ref() };\n+    { Pin::new(&mut foo).pin_mut() };\n+    { Pin::new(Pin::new(Pin::new(&foo))).pin_pin_pin_ref() };\n+    { Pin::new(&foo).pin_ref_impl_trait() };\n+}"}, {"sha": "2421632c664c1679cb5e586684323d2f66611053", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:48\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`\n+   |                          |\n+   |                          lifetime `'_` defined here\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'_`, add `'_` as a constraint\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "aecb82325c1f200c9d5ad9e3f2cd772c44d05437", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn f(self: Pin<&Self>) -> impl Clone { self }\n+    //~^ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn main() {\n+    { Pin::new(&Foo).f() };\n+}"}, {"sha": "f0032449db14e0a5bbc1755dd7b08f3c9aff2ca5", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,20 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:16\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                ^^^^                 ---------- this return type evaluates to the `'static` lifetime...\n+   |                |\n+   |                ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:26\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6585609555675371c791bdf798637f6e43f33871", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,27 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:60\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                            ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:67\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                                   ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "93870b7cdcf288261a85528a28fa38013fe15234", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR cannot infer an appropriate lifetime\n+    // FIXME: should be E0623?\n+\n+    async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR cannot infer an appropriate lifetime\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR cannot infer an appropriate lifetime\n+    // FIXME: should be E0623?\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg } //~ ERROR E0623\n+}\n+\n+fn main() {}"}, {"sha": "c7d10e7fc780d4cded6a5e9865a61bf6b592bc4e", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,88 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:60\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                            ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:67\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                                   ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:33\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                 |\n+   |                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:26\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo + '_ { f }\n+   |                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:16\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                ^^^^ ...but this borrow...             ----------------- this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:34\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                  ^                    ----------------- this return type evaluates to the `'static` lifetime...\n+   |                                  |\n+   |                                  ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:25:58\n+   |\n+LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                                  -----                   ^^^\n+   |                                  |                       |\n+   |                                  |                       ...but data from `arg` is returned here\n+   |                                  this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "c4f06433ba70965bac7a702f46d8242811558150", "filename": "src/test/ui/self/elision/README.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -42,3 +42,34 @@ In each case, we test the following patterns:\n - `self: Box<Pin<XXX>>`\n \n In the non-reference cases, `Pin` causes errors so we substitute `Rc`.\n+\n+### `async fn`\n+\n+For each of the tests above we also check that `async fn` behaves as an `fn` would.\n+These tests are in files named `*-async.rs`.\n+\n+Legends:\n+- \u2713 \u27f9 Yes / Pass\n+- X \u27f9 No\n+- \u03b1 \u27f9 lifetime mismatch\n+- \u03b2 \u27f9 cannot infer an appropriate lifetime\n+- \u03b3 \u27f9 missing lifetime specifier\n+\n+| `async` file | Pass? | Conforms to `fn`? | How does it diverge? <br/> `fn` \u27f6 `async fn` |\n+| --- | --- | --- | --- |\n+| `self-async.rs` | \u2713 | \u2713 | N/A |\n+| `struct-async.rs`| \u2713 | \u2713 | N/A |\n+| `alias-async.rs`| \u2713 | \u2713 | N/A |\n+| `assoc-async.rs`| \u2713 | \u2713 | N/A |\n+| `ref-self-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n+| `ref-mut-self-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n+| `ref-struct-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n+| `ref-mut-struct-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3 |\n+| `ref-alias-async.rs` | X | X | \u2713 \u27f6 \u03b2 + \u03b3 |\n+| `ref-assoc-async.rs` | X | X | \u2713 \u27f6 \u03b2 + \u03b3 |\n+| `ref-mut-alias-async.rs` | X | X | \u2713 \u27f6 \u03b2 + \u03b3 |\n+| `lt-self-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-struct-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-alias-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-assoc-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-ref-self-async.rs` | X | X | \u03b1 \u27f6 \u03b2 + \u03b3"}, {"sha": "3d5b24a8946aa8b973a75853d81758cea36bd20e", "filename": "src/test/ui/self/elision/alias-async.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    async fn alias(self: Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_Alias(self: Box<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn rc_Alias(self: Rc<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_Alias(self: Box<Box<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_rc_Alias(self: Box<Rc<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "0f33f2887726c485949d75ccfaf91be6ef203819", "filename": "src/test/ui/self/elision/assoc-async.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct { }\n+\n+impl Trait for Struct {\n+    type AssocType = Self;\n+}\n+\n+impl Struct {\n+    async fn assoc(self: <Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_AssocType(self: Box<<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn rc_AssocType(self: Rc<<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_AssocType(self: Box<Box<<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_rc_AssocType(self: Box<Rc<<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "5a8989f078ef35e5d612cd3a869d5db2cf577bfb", "filename": "src/test/ui/self/elision/lt-alias-async.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,41 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+type Alias<'a> = Struct<'a>;\n+\n+impl<'a> Alias<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Alias(self: Alias<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Alias(self: Box<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Alias(self: Box<Box<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Alias(self: Rc<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Alias(self: Box<Rc<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "98c9aa3b6c26a5bd49b9802f05fb175de4c17d0a", "filename": "src/test/ui/self/elision/lt-assoc-async.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,53 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+impl<'a> Trait for Struct<'a> {\n+    type AssocType = Self;\n+}\n+\n+impl<'a> Struct<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_AssocType(self: <Struct<'a> as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_AssocType(self: Box<<Struct<'a> as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_AssocType(\n+        self: Box<Box<<Struct<'a> as Trait>::AssocType>>,\n+        f: &u32\n+    ) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_AssocType(self: Rc<<Struct<'a> as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_AssocType(\n+        self: Box<Rc<<Struct<'a> as Trait>::AssocType>>,\n+        f: &u32\n+    ) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "d3aeb73b9b7c23d70707fa94137ccb9047584486", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,51 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:15:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:23:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:29:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:35:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:41:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:47:62\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "84b91ba08b75dec55284cdeed5d27895410e00b8", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,54 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct<'a> { data: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    // Test using `&self` sugar:\n+\n+    async fn ref_self(&self, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "56595d008a6bf6389743041f04149f59d7e8ee63", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,159 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:15:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:23:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:29:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:35:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:41:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:47:62\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:15:30\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                              |\n+   |                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:23\n+  --> $DIR/lt-ref-self-async.rs:15:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 + '_ {\n+   |                                          ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:23:36\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                    ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                    |\n+   |                                    ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 23:29\n+  --> $DIR/lt-ref-self-async.rs:23:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 + '_ {\n+   |                                                ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:29:45\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 29:37\n+  --> $DIR/lt-ref-self-async.rs:29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:35:45\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 35:37\n+  --> $DIR/lt-ref-self-async.rs:35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:41:54\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 41:45\n+  --> $DIR/lt-ref-self-async.rs:41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:47:50\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                  ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                  |\n+   |                                                  ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 47:41\n+  --> $DIR/lt-ref-self-async.rs:47:41\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                         ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 47:41\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                              ^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "0202db8a63526b5c14b18e12cbc0851a0c158fd9", "filename": "src/test/ui/self/elision/lt-self-async.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,52 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+use std::rc::Rc;\n+\n+struct Struct<'a> {\n+    x: &'a u32\n+}\n+\n+impl<'a> Struct<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    // N/A\n+    //fn take_Pin_Self(self: Pin<Self>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+\n+    // N/A\n+    //fn take_Box_Pin_Self(self: Box<Pin<Self>>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+}\n+\n+fn main() { }"}, {"sha": "c0fc63d423257e370ae4fb7e37cff9f207a97cd7", "filename": "src/test/ui/self/elision/lt-struct-async.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Struct(self: Struct<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Struct(self: Box<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Struct(self: Box<Box<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Struct(self: Rc<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Struct(self: Box<Rc<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "00e16cd7f99fbdb40b0d15b9924401e438479c8d", "filename": "src/test/ui/self/elision/multiple-ref-self-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:24:74\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:30:84\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:36:84\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:42:93\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:48:93\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "3cc146c5dc7b2c1e4c7795bde2aef3ab7ce7fce2", "filename": "src/test/ui/self/elision/multiple-ref-self-async.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,55 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using multiple `&Self`:\n+\n+    async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "2a89ed3feba62fd17c274d82657897acbaa11e60", "filename": "src/test/ui/self/elision/multiple-ref-self-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:24:74\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:30:84\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:36:84\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:42:93\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:48:93\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:24:63\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                               ^          --- this return type evaluates to the `'static` lifetime...\n+   |                                                               |\n+   |                                                               ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 24:48\n+  --> $DIR/multiple-ref-self-async.rs:24:48\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 24:48\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 + '_ {\n+   |                                                                          ^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:30:72\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                        |\n+   |                                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 30:56\n+  --> $DIR/multiple-ref-self-async.rs:30:56\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                        ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 30:56\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:36:72\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                        |\n+   |                                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 36:56\n+  --> $DIR/multiple-ref-self-async.rs:36:56\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                        ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 36:56\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:42:81\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                 |\n+   |                                                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 42:64\n+  --> $DIR/multiple-ref-self-async.rs:42:64\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 42:64\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:48:81\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                 |\n+   |                                                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 48:64\n+  --> $DIR/multiple-ref-self-async.rs:48:64\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 48:64\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                             ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "7e47b3794035f49bfbac43a02efd581361905f54", "filename": "src/test/ui/self/elision/ref-alias-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:20:50\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:26:59\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:32:59\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:38:68\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:44:68\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "224151b9b0c55281037b083edae0e01b636aa547", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,51 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+    //\n+    // FIXME. We currently fail to recognize this as the self type, which\n+    // feels like a bug.\n+\n+    async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "a3250562c6ffffc9edfd8d29f6792af7529522ab", "filename": "src/test/ui/self/elision/ref-alias-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:20:50\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:26:59\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:32:59\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:38:68\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:44:68\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:20:38\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                      |\n+   |                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 20:30\n+  --> $DIR/ref-alias-async.rs:20:30\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 20:30\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 + '_ {\n+   |                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:26:47\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                               ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                               |\n+   |                                               ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 26:38\n+  --> $DIR/ref-alias-async.rs:26:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 26:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                           ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:32:47\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                               ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                               |\n+   |                                               ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 32:38\n+  --> $DIR/ref-alias-async.rs:32:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 32:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                           ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:38:56\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                        |\n+   |                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 38:46\n+  --> $DIR/ref-alias-async.rs:38:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 38:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:44:56\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                        |\n+   |                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 44:46\n+  --> $DIR/ref-alias-async.rs:44:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 44:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                    ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "25c8bf652d84b35867fd1daa457920f5918b07fd", "filename": "src/test/ui/self/elision/ref-assoc-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:21:77\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:27:86\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:33:86\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:39:95\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:45:95\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "380937e61ca3f8c4ae7a8ac9578afcbea38916ef", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,52 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct { }\n+\n+impl Trait for Struct {\n+    type AssocType = Self;\n+}\n+\n+impl Struct {\n+    async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "c2e893a3f58bff6e1a2338f1d2c4e17f54701276", "filename": "src/test/ui/self/elision/ref-assoc-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:21:77\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:27:86\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:33:86\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:39:95\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:45:95\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:21:65\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                 |\n+   |                                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 21:34\n+  --> $DIR/ref-assoc-async.rs:21:34\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                  ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:34\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 + '_ {\n+   |                                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:27:74\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                          |\n+   |                                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 27:42\n+  --> $DIR/ref-assoc-async.rs:27:42\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:42\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 + '_ {\n+   |                                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:33:74\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                          |\n+   |                                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 33:42\n+  --> $DIR/ref-assoc-async.rs:33:42\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:42\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 + '_ {\n+   |                                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:39:83\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                   |\n+   |                                                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 39:50\n+  --> $DIR/ref-assoc-async.rs:39:50\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                  ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:50\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                               ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:45:83\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                   |\n+   |                                                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 45:50\n+  --> $DIR/ref-assoc-async.rs:45:50\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                  ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 45:50\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                               ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "1026a0b492f34b2b76f1054086c4440fb4946b6f", "filename": "src/test/ui/self/elision/ref-mut-alias-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:17:54\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:23:63\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:29:63\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:35:72\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:41:72\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ce66313bddd125228f0bed99864e1383666d36bb", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,48 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "678bf7451860682918d5215e70af352a439748ad", "filename": "src/test/ui/self/elision/ref-mut-alias-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:17:54\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:23:63\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:29:63\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:35:72\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:41:72\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:17:42\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                          |\n+   |                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 17:30\n+  --> $DIR/ref-mut-alias-async.rs:17:30\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 17:30\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 + '_ {\n+   |                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:23:51\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                   |\n+   |                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 23:38\n+  --> $DIR/ref-mut-alias-async.rs:23:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                               ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:29:51\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                   |\n+   |                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 29:38\n+  --> $DIR/ref-mut-alias-async.rs:29:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                               ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:35:60\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                            ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                            |\n+   |                                                            ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 35:46\n+  --> $DIR/ref-mut-alias-async.rs:35:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                        ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:41:60\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                            ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                            |\n+   |                                                            ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 41:46\n+  --> $DIR/ref-mut-alias-async.rs:41:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                        ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "35969659b19d173e41976ff53ba5bdd4163fd4d5", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,51 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:15:46\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:23:52\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:29:61\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:35:61\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:41:70\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:47:70\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "7d143e1b35e459192b2731cbd1224555af6a2b8b", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,54 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut self` sugar:\n+\n+    async fn ref_self(&mut self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    // Test using `&mut Self` explicitly:\n+\n+    async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "15f5f8dd0dd48e4e9ee15d356fa401276214afca", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,159 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:15:46\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:23:52\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:29:61\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:35:61\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:41:70\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:47:70\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:15:34\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                                  ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                  |\n+   |                                  ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:23\n+  --> $DIR/ref-mut-self-async.rs:15:23\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:23\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 + '_ {\n+   |                                              ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:23:40\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                        |\n+   |                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 23:29\n+  --> $DIR/ref-mut-self-async.rs:23:29\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:29\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 + '_ {\n+   |                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:29:49\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 29:37\n+  --> $DIR/ref-mut-self-async.rs:29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:35:49\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 35:37\n+  --> $DIR/ref-mut-self-async.rs:35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:41:58\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 41:45\n+  --> $DIR/ref-mut-self-async.rs:41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:47:58\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 47:45\n+  --> $DIR/ref-mut-self-async.rs:47:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 47:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                      ^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "a70dcf5b0ad19a93ad8e0e9c55181e0805ab7efd", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:15:56\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:27:65\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:33:74\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:39:74\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "3ba9c95d35ff4c9aba8cf5eae91ee59b2e88fd2b", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,46 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut Struct` explicitly:\n+\n+    async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "fd2581eba9434b956684a441955fec380a077d9f", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:15:56\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:27:65\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:33:74\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:39:74\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:15:44\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                            ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                            |\n+   |                                            ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:31\n+  --> $DIR/ref-mut-struct-async.rs:15:31\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:31\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 + '_ {\n+   |                                                        ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:21:53\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                     ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                     |\n+   |                                                     ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 21:39\n+  --> $DIR/ref-mut-struct-async.rs:21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                                 ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:27:53\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                     ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                     |\n+   |                                                     ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 27:39\n+  --> $DIR/ref-mut-struct-async.rs:27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                                 ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:33:62\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                              |\n+   |                                                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 33:47\n+  --> $DIR/ref-mut-struct-async.rs:33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                          ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:39:62\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                              |\n+   |                                                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 39:47\n+  --> $DIR/ref-mut-struct-async.rs:39:47\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:47\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                          ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ae17ba9839d224c63467498628df2fa78fe9b4c0", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,59 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:24:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:32:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:38:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:44:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:50:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:56:66\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:62:69\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                                     ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "6cca5494ff784a69cfbb2c622074b0215f652067", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,69 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using `&self` sugar:\n+\n+    async fn ref_self(&self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "eab77cfacd956f5da31c58c75d436add9349dbb0", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,185 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:24:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:32:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:38:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:44:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:50:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:56:66\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:62:69\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                                     ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:24:30\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                              |\n+   |                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 24:23\n+  --> $DIR/ref-self-async.rs:24:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 24:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 + '_ {\n+   |                                          ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:32:36\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                    ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                    |\n+   |                                    ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 32:29\n+  --> $DIR/ref-self-async.rs:32:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 32:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 + '_ {\n+   |                                                ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:38:45\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 38:37\n+  --> $DIR/ref-self-async.rs:38:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 38:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:44:45\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 44:37\n+  --> $DIR/ref-self-async.rs:44:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 44:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:50:54\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 50:45\n+  --> $DIR/ref-self-async.rs:50:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 50:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:56:54\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 56:45\n+  --> $DIR/ref-self-async.rs:56:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 56:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:62:58\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                          ^          --- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 62:44\n+  --> $DIR/ref-self-async.rs:62:44\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                            ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 62:44\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 + '_ {\n+   |                                                                     ^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "b4f12d7057db425f510613f3d906edfe69811424", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:15:52\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:21:61\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:27:61\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:33:70\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:39:66\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "cd0f5a2a6058d6714a72daf286f2a9bd48811324", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,46 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&Struct` explicitly:\n+\n+    async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "966e102fa5f2764372e9e4561795adbb9defe3ec", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:15:52\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:21:61\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:27:61\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:33:70\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:39:66\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:15:40\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                        |\n+   |                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:31\n+  --> $DIR/ref-struct-async.rs:15:31\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:31\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 + '_ {\n+   |                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:21:49\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 21:39\n+  --> $DIR/ref-struct-async.rs:21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:27:49\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 27:39\n+  --> $DIR/ref-struct-async.rs:27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:33:58\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 33:47\n+  --> $DIR/ref-struct-async.rs:33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:39:54\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 39:43\n+  --> $DIR/ref-struct-async.rs:39:43\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                           ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:43\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "d1dc050be0d1e5f98b8e8fc70489292798d26134", "filename": "src/test/ui/self/elision/self-async.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "f7c8591ebd31df91a9aca1c7c605a15f81e91ee9", "filename": "src/test/ui/self/elision/struct-async.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    async fn ref_Struct(self: Struct, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_Struct(self: Box<Struct>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn rc_Struct(self: Rc<Struct>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_Struct(self: Box<Box<Struct>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_rc_Struct(self: Box<Rc<Struct>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "805d2433f87acccfa3a37f5ad007122bd5fff626", "filename": "src/test/ui/self/self_lifetime-async.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,11 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/self_lifetime-async.rs:9:44\n+   |\n+LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n+   |                                            ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found none.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "71eba01fe1a02bf76d18ef3298509bb7c96904b0", "filename": "src/test/ui/self/self_lifetime-async.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,20 @@\n+// FIXME: Investigate why `self_lifetime.rs` is check-pass but this isn't.\n+\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Foo<'a>(&'a ());\n+impl<'a> Foo<'a> {\n+    async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR cannot infer an appropriate lifetime\n+}\n+\n+type Alias = Foo<'static>;\n+impl Alias {\n+    async fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n+    //~^ ERROR lifetime mismatch\n+}\n+\n+fn main() {}"}, {"sha": "e3ec1abd44763863558c96ced88e83cd9599db45", "filename": "src/test/ui/self/self_lifetime-async.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5387d39b94370a292a2777a549086c16f1e459/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr?ref=3d5387d39b94370a292a2777a549086c16f1e459", "patch": "@@ -0,0 +1,39 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/self_lifetime-async.rs:9:44\n+   |\n+LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n+   |                                            ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found none.\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/self_lifetime-async.rs:9:22\n+   |\n+LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n+   |                      ^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 8:6...\n+  --> $DIR/self_lifetime-async.rs:8:6\n+   |\n+LL | impl<'a> Foo<'a> {\n+   |      ^^\n+   = note: ...so that the expression is assignable:\n+           expected &Foo<'_>\n+              found &'b Foo<'a>\n+   = note: but, the lifetime must be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected &()\n+              found &'static ()\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/self_lifetime-async.rs:16:52\n+   |\n+LL |     async fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n+   |                            ------                  ^^^\n+   |                            |                       |\n+   |                            |                       ...but data from `arg` is returned here\n+   |                            this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}]}