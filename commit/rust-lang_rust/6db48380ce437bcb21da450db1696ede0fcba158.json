{"sha": "6db48380ce437bcb21da450db1696ede0fcba158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjQ4MzgwY2U0MzdiY2IyMWRhNDUwZGIxNjk2ZWRlMGZjYmExNTg=", "commit": {"author": {"name": "Venkata Giri Reddy", "email": "venkatagirireddy@gmail.com", "date": "2017-06-13T20:14:23Z"}, "committer": {"name": "Venkata Giri Reddy", "email": "venkatagirireddy@gmail.com", "date": "2017-06-28T17:54:17Z"}, "message": "rustc_typeck: remove old-style WF obligation", "tree": {"sha": "32dd3ee1f393c53ac2dcb935045a11bbd5082cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32dd3ee1f393c53ac2dcb935045a11bbd5082cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db48380ce437bcb21da450db1696ede0fcba158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db48380ce437bcb21da450db1696ede0fcba158", "html_url": "https://github.com/rust-lang/rust/commit/6db48380ce437bcb21da450db1696ede0fcba158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db48380ce437bcb21da450db1696ede0fcba158/comments", "author": {"login": "venkatagiri", "id": 231465, "node_id": "MDQ6VXNlcjIzMTQ2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/231465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/venkatagiri", "html_url": "https://github.com/venkatagiri", "followers_url": "https://api.github.com/users/venkatagiri/followers", "following_url": "https://api.github.com/users/venkatagiri/following{/other_user}", "gists_url": "https://api.github.com/users/venkatagiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/venkatagiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/venkatagiri/subscriptions", "organizations_url": "https://api.github.com/users/venkatagiri/orgs", "repos_url": "https://api.github.com/users/venkatagiri/repos", "events_url": "https://api.github.com/users/venkatagiri/events{/privacy}", "received_events_url": "https://api.github.com/users/venkatagiri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "venkatagiri", "id": 231465, "node_id": "MDQ6VXNlcjIzMTQ2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/231465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/venkatagiri", "html_url": "https://github.com/venkatagiri", "followers_url": "https://api.github.com/users/venkatagiri/followers", "following_url": "https://api.github.com/users/venkatagiri/following{/other_user}", "gists_url": "https://api.github.com/users/venkatagiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/venkatagiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/venkatagiri/subscriptions", "organizations_url": "https://api.github.com/users/venkatagiri/orgs", "repos_url": "https://api.github.com/users/venkatagiri/repos", "events_url": "https://api.github.com/users/venkatagiri/events{/privacy}", "received_events_url": "https://api.github.com/users/venkatagiri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47faf1d51952ecd9d4c8a7325332fba34fbe00bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/47faf1d51952ecd9d4c8a7325332fba34fbe00bd", "html_url": "https://github.com/rust-lang/rust/commit/47faf1d51952ecd9d4c8a7325332fba34fbe00bd"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "c08eeb740ec3b07d27e31855acc4bf7ec71b6fda", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6db48380ce437bcb21da450db1696ede0fcba158/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db48380ce437bcb21da450db1696ede0fcba158/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6db48380ce437bcb21da450db1696ede0fcba158", "patch": "@@ -992,14 +992,6 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Add formal parameters.\n     for (arg_ty, arg) in fn_sig.inputs().iter().zip(&body.arguments) {\n-        // The type of the argument must be well-formed.\n-        //\n-        // NB -- this is now checked in wfcheck, but that\n-        // currently only results in warnings, so we issue an\n-        // old-style WF obligation here so that we still get the\n-        // errors that we used to get.\n-        fcx.register_old_wf_obligation(arg_ty, arg.pat.span, traits::MiscObligation);\n-\n         // Check the pattern.\n         fcx.check_pat_arg(&arg.pat, arg_ty, true);\n         fcx.write_ty(arg.id, arg_ty);\n@@ -1977,17 +1969,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Registers an obligation for checking later, during regionck, that the type `ty` must\n-    /// outlive the region `r`.\n-    pub fn register_region_obligation(&self,\n-                                      ty: Ty<'tcx>,\n-                                      region: ty::Region<'tcx>,\n-                                      cause: traits::ObligationCause<'tcx>)\n-    {\n-        let mut fulfillment_cx = self.fulfillment_cx.borrow_mut();\n-        fulfillment_cx.register_region_obligation(ty, region, cause);\n-    }\n-\n     /// Registers an obligation for checking later, during regionck, that the type `ty` must\n     /// outlive the region `r`.\n     pub fn register_wf_obligation(&self,\n@@ -2002,21 +1983,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                         ty::Predicate::WellFormed(ty)));\n     }\n \n-    pub fn register_old_wf_obligation(&self,\n-                                      ty: Ty<'tcx>,\n-                                      span: Span,\n-                                      code: traits::ObligationCauseCode<'tcx>)\n-    {\n-        // Registers an \"old-style\" WF obligation that uses the\n-        // implicator code.  This is basically a buggy version of\n-        // `register_wf_obligation` that is being kept around\n-        // temporarily just to help with phasing in the newer rules.\n-        //\n-        // FIXME(#27579) all uses of this should be migrated to register_wf_obligation eventually\n-        let cause = traits::ObligationCause::new(span, self.body_id, code);\n-        self.register_region_obligation(ty, self.tcx.types.re_empty, cause);\n-    }\n-\n     /// Registers obligations that all types appearing in `substs` are well-formed.\n     pub fn add_wf_bounds(&self, substs: &Substs<'tcx>, expr: &hir::Expr)\n     {"}]}