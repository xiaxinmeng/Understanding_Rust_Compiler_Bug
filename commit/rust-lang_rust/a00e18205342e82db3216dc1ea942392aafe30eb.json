{"sha": "a00e18205342e82db3216dc1ea942392aafe30eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMGUxODIwNTM0MmU4MmRiMzIxNmRjMWVhOTQyMzkyYWFmZTMwZWI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-05-11T04:21:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-11T04:21:24Z"}, "message": "Rollup merge of #41192 - zackw:eprintln, r=alexcrichton\n\nAdd `eprint!` and `eprintln!` macros to the prelude.\n\nThese are exactly the same as `print!` and `println!` except that they write to stderr instead of stdout.  Issues #39228 and #40528; previous PR #39229; accepted RFC rust-lang/rfcs#1869; proposed revision to The Book rust-lang/book#615.\n\nI have _not_ revised this any since the original submission; I will do that later this week.  I wanted to get this PR in place since it's been quite a while since the RFC was merged.\n\nKnown outstanding review comments:\n\n* [x] @steveklabnik requested a new chapter for the unstable version of The Book -- please see if the proposed revisions to the second edition cover it.\n* [x] @nodakai asked if it were possible to merge the internal methods `_print` and `_eprint` - not completely, since they both refer to different internal globals which we don't want to expose, but I will see if some duplication can be factored out.\n\nPlease let me know if I missed anything.", "tree": {"sha": "f346c620627bce19ec09a95eefb4df7ec861f683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f346c620627bce19ec09a95eefb4df7ec861f683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00e18205342e82db3216dc1ea942392aafe30eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00e18205342e82db3216dc1ea942392aafe30eb", "html_url": "https://github.com/rust-lang/rust/commit/a00e18205342e82db3216dc1ea942392aafe30eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00e18205342e82db3216dc1ea942392aafe30eb/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8d51c2ebe8d89c9cdcf06a9383d6e974efc5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8d51c2ebe8d89c9cdcf06a9383d6e974efc5b6", "html_url": "https://github.com/rust-lang/rust/commit/bb8d51c2ebe8d89c9cdcf06a9383d6e974efc5b6"}, {"sha": "72588a2b2a1af655b81fcd3c1c467707d9c237c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/72588a2b2a1af655b81fcd3c1c467707d9c237c2", "html_url": "https://github.com/rust-lang/rust/commit/72588a2b2a1af655b81fcd3c1c467707d9c237c2"}], "stats": {"total": 154, "additions": 128, "deletions": 26}, "files": [{"sha": "8f26e4d36cda2dd52d48073160c5e3073d197c1e", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=a00e18205342e82db3216dc1ea942392aafe30eb", "patch": "@@ -178,7 +178,7 @@\n     - [peek](library-features/peek.md)\n     - [placement_in](library-features/placement-in.md)\n     - [placement_new_protocol](library-features/placement-new-protocol.md)\n-    - [print](library-features/print.md)\n+    - [print_internals](library-features/print-internals.md)\n     - [proc_macro_internals](library-features/proc-macro-internals.md)\n     - [process_try_wait](library-features/process-try-wait.md)\n     - [question_mark_carrier](library-features/question-mark-carrier.md)"}, {"sha": "a68557872af553af9fcd3c508081b53a090fe365", "filename": "src/doc/unstable-book/src/library-features/print-internals.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprint-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprint-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprint-internals.md?ref=a00e18205342e82db3216dc1ea942392aafe30eb", "patch": "@@ -1,4 +1,4 @@\n-# `print`\n+# `print_internals`\n \n This feature is internal to the Rust compiler and is not intended for general use.\n ", "previous_filename": "src/doc/unstable-book/src/library-features/print.md"}, {"sha": "c872a8e52611408c64218569acd378e167cbc5cc", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a00e18205342e82db3216dc1ea942392aafe30eb", "patch": "@@ -287,9 +287,11 @@ pub use self::error::{Result, Error, ErrorKind};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::util::{copy, sink, Sink, empty, Empty, repeat, Repeat};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::stdio::{stdin, stdout, stderr, _print, Stdin, Stdout, Stderr};\n+pub use self::stdio::{stdin, stdout, stderr, Stdin, Stdout, Stderr};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{StdoutLock, StderrLock, StdinLock};\n+#[unstable(feature = \"print_internals\", issue = \"0\")]\n+pub use self::stdio::{_print, _eprint};\n #[unstable(feature = \"libstd_io_internals\", issue = \"0\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::{set_panic, set_print};"}, {"sha": "a8b0bf0071a22465ddc0882d1196715ceed728b7", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=a00e18205342e82db3216dc1ea942392aafe30eb", "patch": "@@ -17,7 +17,7 @@ use io::{self, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use thread::LocalKeyState;\n+use thread::{LocalKey, LocalKeyState};\n \n /// Stdout used by print! and println! macros\n thread_local! {\n@@ -659,41 +659,56 @@ pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n     })\n }\n \n-#[unstable(feature = \"print\",\n-           reason = \"implementation detail which may disappear or be replaced at any time\",\n-           issue = \"0\")]\n-#[doc(hidden)]\n-pub fn _print(args: fmt::Arguments) {\n-    // As an implementation of the `println!` macro, we want to try our best to\n-    // not panic wherever possible and get the output somewhere. There are\n-    // currently two possible vectors for panics we take care of here:\n-    //\n-    // 1. If the TLS key for the local stdout has been destroyed, accessing it\n-    //    would cause a panic. Note that we just lump in the uninitialized case\n-    //    here for convenience, we're not trying to avoid a panic.\n-    // 2. If the local stdout is currently in use (e.g. we're in the middle of\n-    //    already printing) then accessing again would cause a panic.\n-    //\n-    // If, however, the actual I/O causes an error, we do indeed panic.\n-    let result = match LOCAL_STDOUT.state() {\n+/// Write `args` to output stream `local_s` if possible, `global_s`\n+/// otherwise. `label` identifies the stream in a panic message.\n+///\n+/// This function is used to print error messages, so it takes extra\n+/// care to avoid causing a panic when `local_stream` is unusable.\n+/// For instance, if the TLS key for the local stream is uninitialized\n+/// or already destroyed, or if the local stream is locked by another\n+/// thread, it will just fall back to the global stream.\n+///\n+/// However, if the actual I/O causes an error, this function does panic.\n+fn print_to<T>(args: fmt::Arguments,\n+               local_s: &'static LocalKey<RefCell<Option<Box<Write+Send>>>>,\n+               global_s: fn() -> T,\n+               label: &str) where T: Write {\n+    let result = match local_s.state() {\n         LocalKeyState::Uninitialized |\n-        LocalKeyState::Destroyed => stdout().write_fmt(args),\n+        LocalKeyState::Destroyed => global_s().write_fmt(args),\n         LocalKeyState::Valid => {\n-            LOCAL_STDOUT.with(|s| {\n+            local_s.with(|s| {\n                 if let Ok(mut borrowed) = s.try_borrow_mut() {\n                     if let Some(w) = borrowed.as_mut() {\n                         return w.write_fmt(args);\n                     }\n                 }\n-                stdout().write_fmt(args)\n+                global_s().write_fmt(args)\n             })\n         }\n     };\n     if let Err(e) = result {\n-        panic!(\"failed printing to stdout: {}\", e);\n+        panic!(\"failed printing to {}: {}\", label, e);\n     }\n }\n \n+#[unstable(feature = \"print_internals\",\n+           reason = \"implementation detail which may disappear or be replaced at any time\",\n+           issue = \"0\")]\n+#[doc(hidden)]\n+pub fn _print(args: fmt::Arguments) {\n+    print_to(args, &LOCAL_STDOUT, stdout, \"stdout\");\n+}\n+\n+#[unstable(feature = \"print_internals\",\n+           reason = \"implementation detail which may disappear or be replaced at any time\",\n+           issue = \"0\")]\n+#[doc(hidden)]\n+pub fn _eprint(args: fmt::Arguments) {\n+    use panicking::LOCAL_STDERR;\n+    print_to(args, &LOCAL_STDERR, stderr, \"stderr\");\n+}\n+\n #[cfg(test)]\n mod tests {\n     use thread;"}, {"sha": "ef78ea6dfe8ee72c047315f07e3b2be4e96a8739", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=a00e18205342e82db3216dc1ea942392aafe30eb", "patch": "@@ -68,6 +68,9 @@ macro_rules! panic {\n /// necessary to use `io::stdout().flush()` to ensure the output is emitted\n /// immediately.\n ///\n+/// Use `print!` only for the primary output of your program.  Use\n+/// `eprint!` instead to print error and progress messages.\n+///\n /// # Panics\n ///\n /// Panics if writing to `io::stdout()` fails.\n@@ -105,9 +108,12 @@ macro_rules! print {\n /// Use the `format!` syntax to write data to the standard output.\n /// See `std::fmt` for more information.\n ///\n+/// Use `println!` only for the primary output of your program.  Use\n+/// `eprintln!` instead to print error and progress messages.\n+///\n /// # Panics\n ///\n-/// Panics if writing to `io::stdout()` fails.\n+/// Panics if writing to `io::stdout` fails.\n ///\n /// # Examples\n ///\n@@ -124,6 +130,45 @@ macro_rules! println {\n     ($fmt:expr, $($arg:tt)*) => (print!(concat!($fmt, \"\\n\"), $($arg)*));\n }\n \n+/// Macro for printing to the standard error.\n+///\n+/// Equivalent to the `print!` macro, except that output goes to\n+/// `io::stderr` instead of `io::stdout`.  See `print!` for\n+/// example usage.\n+///\n+/// Use `eprint!` only for error and progress messages.  Use `print!`\n+/// instead for the primary output of your program.\n+///\n+/// # Panics\n+///\n+/// Panics if writing to `io::stderr` fails.\n+#[macro_export]\n+#[stable(feature = \"eprint\", since=\"1.18.0\")]\n+#[allow_internal_unstable]\n+macro_rules! eprint {\n+    ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n+}\n+\n+/// Macro for printing to the standard error, with a newline.\n+///\n+/// Equivalent to the `println!` macro, except that output goes to\n+/// `io::stderr` instead of `io::stdout`.  See `println!` for\n+/// example usage.\n+///\n+/// Use `eprintln!` only for error and progress messages.  Use `println!`\n+/// instead for the primary output of your program.\n+///\n+/// # Panics\n+///\n+/// Panics if writing to `io::stderr` fails.\n+#[macro_export]\n+#[stable(feature = \"eprint\", since=\"1.18.0\")]\n+macro_rules! eprintln {\n+    () => (eprint!(\"\\n\"));\n+    ($fmt:expr) => (eprint!(concat!($fmt, \"\\n\")));\n+    ($fmt:expr, $($arg:tt)*) => (eprint!(concat!($fmt, \"\\n\"), $($arg)*));\n+}\n+\n /// A macro to select an event from a number of receivers.\n ///\n /// This macro is used to wait for the first event to occur on a number of"}, {"sha": "0a0f30aba72c20895c5112ed99674d1550a0cc14", "filename": "src/test/run-pass/print-stdout-eprint-stderr.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e18205342e82db3216dc1ea942392aafe30eb/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs?ref=a00e18205342e82db3216dc1ea942392aafe30eb", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten spawning processes is not supported\n+\n+use std::{env, process};\n+\n+fn child() {\n+    print!(\"[stdout 0]\");\n+    print!(\"[stdout {}]\", 1);\n+    println!(\"[stdout {}]\", 2);\n+    println!();\n+    eprint!(\"[stderr 0]\");\n+    eprint!(\"[stderr {}]\", 1);\n+    eprintln!(\"[stderr {}]\", 2);\n+    eprintln!();\n+}\n+\n+fn parent() {\n+    let this = env::args().next().unwrap();\n+    let output = process::Command::new(this).arg(\"-\").output().unwrap();\n+    assert!(output.status.success());\n+\n+    let stdout = String::from_utf8(output.stdout).unwrap();\n+    let stderr = String::from_utf8(output.stderr).unwrap();\n+\n+    assert_eq!(stdout, \"[stdout 0][stdout 1][stdout 2]\\n\\n\");\n+    assert_eq!(stderr, \"[stderr 0][stderr 1][stderr 2]\\n\\n\");\n+}\n+\n+fn main() {\n+    if env::args().count() == 2 { child() } else { parent() }\n+}"}]}