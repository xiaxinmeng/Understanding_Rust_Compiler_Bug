{"sha": "61222b5731a733628555a7f6eabc9ff93bd2437f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMjIyYjU3MzFhNzMzNjI4NTU1YTdmNmVhYmM5ZmY5M2JkMjQzN2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-31T14:10:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-31T14:10:37Z"}, "message": "Rollup merge of #59572 - davidtwco:issue-59508, r=varkor\n\nInclude bounds in generic re-ordering diagnostic\n\nFixes #59508.\n\nr? @estebank\ncc @varkor", "tree": {"sha": "358a35bf46a5300947098a18db0842c3bfe54815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/358a35bf46a5300947098a18db0842c3bfe54815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61222b5731a733628555a7f6eabc9ff93bd2437f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcoMpdCRBK7hj4Ov3rIwAAdHIIAK3x/CFruEgxGCCTcBJkp7Af\n6TXTX4RR/yPfBioTy5KDxQthwmKPYk9Wos9nktlkAQsvmgQGlVFfsT39HqYiMYpS\naOBZ8hXovIjnYcAAMK9IRfYQxKDwHg20KYu4jHLjLkc2/8yJ//p937Xu1YPSMjOC\ntKJyTvvDL879QznzHgPWf8CbQSiZvcQ9lv03wK8CHAtKONsH3uoUhzJxNVQQWWZ4\nhWtZjSCUL3NmiS+rKL2PAkEfO+cNcDcsX1c+rIME3ws7Sb5sOgKfCgg7fRryVHQy\nQdS8M8GljAIhXWsA8V4LUyxr/hu4Kr5mKHoPzXgD8fpwZbGYTkCnssp7LZFal/8=\n=Av3x\n-----END PGP SIGNATURE-----\n", "payload": "tree 358a35bf46a5300947098a18db0842c3bfe54815\nparent df18e190be00cb16f13b0f49207be2ba95240455\nparent 0270d565d9f6287bce6a7e64e55aac245288541e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554041437 +0200\ncommitter GitHub <noreply@github.com> 1554041437 +0200\n\nRollup merge of #59572 - davidtwco:issue-59508, r=varkor\n\nInclude bounds in generic re-ordering diagnostic\n\nFixes #59508.\n\nr? @estebank\ncc @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61222b5731a733628555a7f6eabc9ff93bd2437f", "html_url": "https://github.com/rust-lang/rust/commit/61222b5731a733628555a7f6eabc9ff93bd2437f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61222b5731a733628555a7f6eabc9ff93bd2437f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df18e190be00cb16f13b0f49207be2ba95240455", "url": "https://api.github.com/repos/rust-lang/rust/commits/df18e190be00cb16f13b0f49207be2ba95240455", "html_url": "https://github.com/rust-lang/rust/commit/df18e190be00cb16f13b0f49207be2ba95240455"}, {"sha": "0270d565d9f6287bce6a7e64e55aac245288541e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0270d565d9f6287bce6a7e64e55aac245288541e", "html_url": "https://github.com/rust-lang/rust/commit/0270d565d9f6287bce6a7e64e55aac245288541e"}], "stats": {"total": 178, "additions": 140, "deletions": 38}, "files": [{"sha": "a9a604cad8bcf1eee19431732efebe46693f7dd9", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -352,18 +352,26 @@ enum GenericPosition {\n }\n \n fn validate_generics_order<'a>(\n+    sess: &Session,\n     handler: &errors::Handler,\n-    generics: impl Iterator<Item = (ParamKindOrd, Span, Option<String>)>,\n+    generics: impl Iterator<\n+        Item = (\n+            ParamKindOrd,\n+            Option<&'a [GenericBound]>,\n+            Span,\n+            Option<String>\n+        ),\n+    >,\n     pos: GenericPosition,\n     span: Span,\n ) {\n     let mut max_param: Option<ParamKindOrd> = None;\n     let mut out_of_order = FxHashMap::default();\n     let mut param_idents = vec![];\n \n-    for (kind, span, ident) in generics {\n+    for (kind, bounds, span, ident) in generics {\n         if let Some(ident) = ident {\n-            param_idents.push((kind, param_idents.len(), ident));\n+            param_idents.push((kind, bounds, param_idents.len(), ident));\n         }\n         let max_param = &mut max_param;\n         match max_param {\n@@ -377,13 +385,19 @@ fn validate_generics_order<'a>(\n \n     let mut ordered_params = \"<\".to_string();\n     if !out_of_order.is_empty() {\n-        param_idents.sort_by_key(|&(po, i, _)| (po, i));\n+        param_idents.sort_by_key(|&(po, _, i, _)| (po, i));\n         let mut first = true;\n-        for (_, _, ident) in param_idents {\n+        for (_, bounds, _, ident) in param_idents {\n             if !first {\n                 ordered_params += \", \";\n             }\n             ordered_params += &ident;\n+            if let Some(bounds) = bounds {\n+                if !bounds.is_empty() {\n+                    ordered_params += \": \";\n+                    ordered_params += &pprust::bounds_to_string(&bounds);\n+                }\n+            }\n             first = false;\n         }\n     }\n@@ -405,7 +419,11 @@ fn validate_generics_order<'a>(\n         if let GenericPosition::Param = pos {\n             err.span_suggestion(\n                 span,\n-                &format!(\"reorder the {}s: lifetimes, then types, then consts\", pos_str),\n+                &format!(\n+                    \"reorder the {}s: lifetimes, then types{}\",\n+                    pos_str,\n+                    if sess.features_untracked().const_generics { \", then consts\" } else { \"\" },\n+                ),\n                 ordered_params.clone(),\n                 Applicability::MachineApplicable,\n             );\n@@ -687,13 +705,19 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n                 walk_list!(self, visit_generic_arg, &data.args);\n-                validate_generics_order(self.err_handler(), data.args.iter().map(|arg| {\n-                    (match arg {\n-                        GenericArg::Lifetime(..) => ParamKindOrd::Lifetime,\n-                        GenericArg::Type(..) => ParamKindOrd::Type,\n-                        GenericArg::Const(..) => ParamKindOrd::Const,\n-                    }, arg.span(), None)\n-                }), GenericPosition::Arg, generic_args.span());\n+                validate_generics_order(\n+                    self.session,\n+                    self.err_handler(),\n+                    data.args.iter().map(|arg| {\n+                        (match arg {\n+                            GenericArg::Lifetime(..) => ParamKindOrd::Lifetime,\n+                            GenericArg::Type(..) => ParamKindOrd::Type,\n+                            GenericArg::Const(..) => ParamKindOrd::Const,\n+                        }, None, arg.span(), None)\n+                    }),\n+                    GenericPosition::Arg,\n+                    generic_args.span(),\n+                );\n \n                 // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                 // are allowed to contain nested `impl Trait`.\n@@ -726,18 +750,24 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n         }\n \n-        validate_generics_order(self.err_handler(), generics.params.iter().map(|param| {\n-            let span = param.ident.span;\n-            let ident = Some(param.ident.to_string());\n-            match &param.kind {\n-                GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, span, ident),\n-                GenericParamKind::Type { .. } => (ParamKindOrd::Type, span, ident),\n-                GenericParamKind::Const { ref ty } => {\n-                    let ty = pprust::ty_to_string(ty);\n-                    (ParamKindOrd::Const, span, Some(format!(\"const {}: {}\", param.ident, ty)))\n-                }\n-            }\n-        }), GenericPosition::Param, generics.span);\n+        validate_generics_order(\n+            self.session,\n+            self.err_handler(),\n+            generics.params.iter().map(|param| {\n+                let ident = Some(param.ident.to_string());\n+                let (kind, ident) = match &param.kind {\n+                    GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, ident),\n+                    GenericParamKind::Type { .. } => (ParamKindOrd::Type, ident),\n+                    GenericParamKind::Const { ref ty } => {\n+                        let ty = pprust::ty_to_string(ty);\n+                        (ParamKindOrd::Const, Some(format!(\"const {}: {}\", param.ident, ty)))\n+                    }\n+                };\n+                (kind, Some(&*param.bounds), param.ident.span, ident)\n+            }),\n+            GenericPosition::Param,\n+            generics.span,\n+        );\n \n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {"}, {"sha": "4fbed9b08f215a9698d98b4f03874e541d5618f8", "filename": "src/test/ui/issue-59508-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508-1.rs?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -0,0 +1,18 @@\n+#![allow(dead_code)]\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+// This test checks that generic parameter re-ordering diagnostic suggestions mention that\n+// consts come after types and lifetimes when the `const_generics` feature is enabled.\n+// We cannot run rustfix on this test because of the above const generics warning.\n+\n+struct A;\n+\n+impl A {\n+    pub fn do_things<T, 'a, 'b: 'a>() {\n+    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+        println!(\"panic\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8fb7d7c3c84dc295ddbd4b7a32c9eb737cdcaf96", "filename": "src/test/ui/issue-59508-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508-1.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -0,0 +1,14 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-59508-1.rs:2:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/issue-59508-1.rs:12:25\n+   |\n+LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n+   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b: 'a, T>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5c60a1626f53584d522b01f9c92a055197c92bd", "filename": "src/test/ui/issue-59508.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508.fixed?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+// This test checks that generic parameter re-ordering diagnostic suggestions contain bounds.\n+\n+struct A;\n+\n+impl A {\n+    pub fn do_things<'a, 'b: 'a, T>() {\n+    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+        println!(\"panic\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0b39c5d8f2aec802e4a1e80b33232e89778d9010", "filename": "src/test/ui/issue-59508.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508.rs?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+// This test checks that generic parameter re-ordering diagnostic suggestions contain bounds.\n+\n+struct A;\n+\n+impl A {\n+    pub fn do_things<T, 'a, 'b: 'a>() {\n+    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+        println!(\"panic\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c0fdb2ef34ac4efd38db83c27af1e81fc6a9b33b", "filename": "src/test/ui/issue-59508.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fissue-59508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -0,0 +1,8 @@\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/issue-59508.rs:10:25\n+   |\n+LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n+   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types: `<'a, 'b: 'a, T>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ffc6784bafed8f4f3db54d85ea392071049603db", "filename": "src/test/ui/lifetime-before-type-params.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -2,25 +2,25 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:2:13\n    |\n LL | fn first<T, 'a, 'b>() {}\n-   |         ----^^--^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |         ----^^--^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:4:18\n    |\n LL | fn second<'a, T, 'b>() {}\n-   |          --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |          --------^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:6:16\n    |\n LL | fn third<T, U, 'a>() {}\n-   |         -------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n+   |         -------^^- help: reorder the parameters: lifetimes, then types: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/lifetime-before-type-params.rs:8:18\n    |\n LL | fn fourth<'a, T, 'b, U, 'c, V>() {}\n-   |          --------^^-----^^---- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, 'c, T, U, V>`\n+   |          --------^^-----^^---- help: reorder the parameters: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n \n error[E0601]: `main` function not found in crate `lifetime_before_type_params`\n    |"}, {"sha": "46f16ea0cc41cbd286b43c84b33c7e0e9504287f", "filename": "src/test/ui/parser/issue-14303-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-enum.rs:1:15\n    |\n LL | enum X<'a, T, 'b> {\n-   |       --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |       --------^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "8cbab4b9653a0b67b12ba7a223dfde2d77785fbb", "filename": "src/test/ui/parser/issue-14303-fn-def.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-fn-def.rs:1:15\n    |\n LL | fn foo<'a, T, 'b>(x: &'a T) {}\n-   |       --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |       --------^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "56cd4fb381038090802bee4966c071706464a20f", "filename": "src/test/ui/parser/issue-14303-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-impl.rs:3:13\n    |\n LL | impl<'a, T, 'b> X<T> {}\n-   |     --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |     --------^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "f31cb92ad66ce2924f62b3db1f643f22a434d224", "filename": "src/test/ui/parser/issue-14303-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-struct.rs:1:17\n    |\n LL | struct X<'a, T, 'b> {\n-   |         --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |         --------^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "0e7399102bf177d2d2737bd50255e64d2003189c", "filename": "src/test/ui/parser/issue-14303-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-trait.rs:1:18\n    |\n LL | trait Foo<'a, T, 'b> {}\n-   |          --------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T>`\n+   |          --------^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, T>`\n \n error: aborting due to previous error\n "}, {"sha": "1851c8deaa8b4dbb14e99d744d8125858b2d3f10", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61222b5731a733628555a7f6eabc9ff93bd2437f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=61222b5731a733628555a7f6eabc9ff93bd2437f", "patch": "@@ -2,25 +2,25 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:1:13\n    |\n LL | struct A<T, 'a> {\n-   |         ----^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T>`\n+   |         ----^^- help: reorder the parameters: lifetimes, then types: `<'a, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:5:13\n    |\n LL | struct B<T, 'a, U> {\n-   |         ----^^---- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n+   |         ----^^---- help: reorder the parameters: lifetimes, then types: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:10:16\n    |\n LL | struct C<T, U, 'a> {\n-   |         -------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, U>`\n+   |         -------^^- help: reorder the parameters: lifetimes, then types: `<'a, T, U>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:15:16\n    |\n LL | struct D<T, U, 'a, 'b, V, 'c> {\n-   |         -------^^--^^-----^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, 'c, T, U, V>`\n+   |         -------^^--^^-----^^- help: reorder the parameters: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n \n error: aborting due to 4 previous errors\n "}]}