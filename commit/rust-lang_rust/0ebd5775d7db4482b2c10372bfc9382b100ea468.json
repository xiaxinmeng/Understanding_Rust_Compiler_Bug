{"sha": "0ebd5775d7db4482b2c10372bfc9382b100ea468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYmQ1Nzc1ZDdkYjQ0ODJiMmMxMDM3MmJmYzkzODJiMTAwZWE0Njg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-14T20:46:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-14T20:46:14Z"}, "message": "Merge pull request #1550 from topecongiro/issue-1547\n\nPrevent rewriting closure block to expr inside macro", "tree": {"sha": "152ea80473da0d10304bb0eeda04cc7bd47c5a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152ea80473da0d10304bb0eeda04cc7bd47c5a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ebd5775d7db4482b2c10372bfc9382b100ea468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd5775d7db4482b2c10372bfc9382b100ea468", "html_url": "https://github.com/rust-lang/rust/commit/0ebd5775d7db4482b2c10372bfc9382b100ea468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd5775d7db4482b2c10372bfc9382b100ea468/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e151279d022cf9a2395099d742d1d55f5017db", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e151279d022cf9a2395099d742d1d55f5017db", "html_url": "https://github.com/rust-lang/rust/commit/65e151279d022cf9a2395099d742d1d55f5017db"}, {"sha": "7ec78711f2f727baf3d10ca46f7dda35a2f0ffb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec78711f2f727baf3d10ca46f7dda35a2f0ffb4", "html_url": "https://github.com/rust-lang/rust/commit/7ec78711f2f727baf3d10ca46f7dda35a2f0ffb4"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "858103489fd7e4cae14edbbda1a1becb1173a863", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=0ebd5775d7db4482b2c10372bfc9382b100ea468", "patch": "@@ -440,5 +440,5 @@ fn rewrite_method_call(method_name: ast::Ident,\n     let callee_str = format!(\".{}{}\", method_name, type_str);\n     let span = mk_sp(lo, span.hi);\n \n-    rewrite_call(context, &callee_str, &args[1..], span, shape, false)\n+    rewrite_call(context, &callee_str, &args[1..], span, shape)\n }"}, {"sha": "a52e163ac7abd3b9cd23d300d33c6ecaddf1a7f3", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0ebd5775d7db4482b2c10372bfc9382b100ea468", "patch": "@@ -70,7 +70,7 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Call(ref callee, ref args) => {\n             let inner_span = mk_sp(callee.span.hi, expr.span.hi);\n-            rewrite_call(context, &**callee, args, inner_span, shape, false)\n+            rewrite_call(context, &**callee, args, inner_span, shape)\n         }\n         ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape),\n         ast::ExprKind::Binary(ref op, ref lhs, ref rhs) => {\n@@ -512,7 +512,8 @@ fn rewrite_closure(capture: ast::CaptureBy,\n         }\n \n         // Figure out if the block is necessary.\n-        let needs_block = block.rules != ast::BlockCheckMode::Default || block.stmts.len() > 1 ||\n+        let needs_block = block.rules != ast::BlockCheckMode::Default ||\n+                          block.stmts.len() > 1 || context.inside_macro ||\n                           block_contains_comment(block, context.codemap) ||\n                           prefix.contains('\\n');\n \n@@ -1599,20 +1600,12 @@ pub fn rewrite_call<R>(context: &RewriteContext,\n                        callee: &R,\n                        args: &[ptr::P<ast::Expr>],\n                        span: Span,\n-                       shape: Shape,\n-                       force_no_trailing_comma: bool)\n+                       shape: Shape)\n                        -> Option<String>\n     where R: Rewrite\n {\n-    let closure = |callee_max_width| {\n-        rewrite_call_inner(context,\n-                           callee,\n-                           callee_max_width,\n-                           args,\n-                           span,\n-                           shape,\n-                           force_no_trailing_comma)\n-    };\n+    let closure =\n+        |callee_max_width| rewrite_call_inner(context, callee, callee_max_width, args, span, shape);\n \n     // 2 is for parens\n     let max_width = try_opt!(shape.width.checked_sub(2));\n@@ -1624,8 +1617,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                          max_callee_width: usize,\n                          args: &[ptr::P<ast::Expr>],\n                          span: Span,\n-                         shape: Shape,\n-                         force_no_trailing_comma: bool)\n+                         shape: Shape)\n                          -> Result<String, Ordering>\n     where R: Rewrite\n {\n@@ -1665,13 +1657,8 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     let span_lo = context.codemap.span_after(span, \"(\");\n     let span = mk_sp(span_lo, span.hi);\n \n-    let list_str = rewrite_call_args(context,\n-                                     args,\n-                                     span,\n-                                     nested_shape,\n-                                     one_line_width,\n-                                     force_no_trailing_comma)\n-            .ok_or(Ordering::Less)?;\n+    let list_str = rewrite_call_args(context, args, span, nested_shape, one_line_width)\n+        .ok_or(Ordering::Less)?;\n \n     let result = if context.config.fn_call_style == IndentStyle::Visual ||\n                     (!list_str.contains('\\n') && list_str.chars().last().unwrap_or(' ') != ',') {\n@@ -1695,8 +1682,7 @@ fn rewrite_call_args(context: &RewriteContext,\n                      args: &[ptr::P<ast::Expr>],\n                      span: Span,\n                      shape: Shape,\n-                     one_line_width: usize,\n-                     force_no_trailing_comma: bool)\n+                     one_line_width: usize)\n                      -> Option<String> {\n     let arg_count = args.len();\n \n@@ -1766,7 +1752,7 @@ fn rewrite_call_args(context: &RewriteContext,\n     let mut fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: if force_no_trailing_comma ||\n+        trailing_separator: if context.inside_macro ||\n                                context.config.fn_call_style == IndentStyle::Visual ||\n                                arg_count <= 1 {\n             SeparatorTactic::Never\n@@ -1783,7 +1769,7 @@ fn rewrite_call_args(context: &RewriteContext,\n         // try to put it on the next line. Try this only when we are in block mode\n         // and not rewriting macro.\n         Some(ref s) if context.config.fn_call_style == IndentStyle::Block &&\n-                       !force_no_trailing_comma &&\n+                       !context.inside_macro &&\n                        (!s.contains('\\n') &&\n                         (s.len() > one_line_width || s.len() > context.config.fn_call_width)) => {\n             fmt.trailing_separator = SeparatorTactic::Vertical;"}, {"sha": "d644e32bb6d595fe8b9a1b8089bb8bbe230394c6", "filename": "src/macros.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=0ebd5775d7db4482b2c10372bfc9382b100ea468", "patch": "@@ -65,6 +65,8 @@ pub fn rewrite_macro(mac: &ast::Mac,\n                      shape: Shape,\n                      position: MacroPosition)\n                      -> Option<String> {\n+    let mut context = &mut context.clone();\n+    context.inside_macro = true;\n     if context.config.use_try_shorthand {\n         if let Some(expr) = convert_try_mac(mac, context) {\n             return expr.rewrite(context, shape);\n@@ -146,11 +148,12 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape, true)\n-                .map(|rw| match position {\n-                         MacroPosition::Item => format!(\"{};\", rw),\n-                         _ => rw,\n-                     })\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(|rw| {\n+                match position {\n+                    MacroPosition::Item => format!(\"{};\", rw),\n+                    _ => rw,\n+                }\n+            })\n         }\n         MacroStyle::Brackets => {\n             // Format macro invocation as array literal."}, {"sha": "c1047e41b33c2332f0571f4503aa55b625bbff89", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=0ebd5775d7db4482b2c10372bfc9382b100ea468", "patch": "@@ -26,6 +26,7 @@ pub struct RewriteContext<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n     pub config: &'a Config,\n+    pub inside_macro: bool,\n }\n \n impl<'a> RewriteContext<'a> {"}, {"sha": "e813f3a181304245dad226a275170e22492bd5e4", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd5775d7db4482b2c10372bfc9382b100ea468/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=0ebd5775d7db4482b2c10372bfc9382b100ea468", "patch": "@@ -574,6 +574,7 @@ impl<'a> FmtVisitor<'a> {\n             parse_session: self.parse_session,\n             codemap: self.codemap,\n             config: self.config,\n+            inside_macro: false,\n         }\n     }\n }"}, {"sha": "b58527eb8fbbd5a19c1f626c2b154cc51b3cae2c", "filename": "tests/target/closure-block-inside-macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd5775d7db4482b2c10372bfc9382b100ea468/tests%2Ftarget%2Fclosure-block-inside-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd5775d7db4482b2c10372bfc9382b100ea468/tests%2Ftarget%2Fclosure-block-inside-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure-block-inside-macro.rs?ref=0ebd5775d7db4482b2c10372bfc9382b100ea468", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-fn_call_style: Block\n+\n+// #1547\n+fuzz_target!(\n+    |data: &[u8]| {\n+        if let Some(first) = data.first() {\n+            let index = *first as usize;\n+            if index >= ENCODINGS.len() {\n+                return;\n+            }\n+            let encoding = ENCODINGS[index];\n+            dispatch_test(encoding, &data[1..]);\n+        }\n+    }\n+);"}]}