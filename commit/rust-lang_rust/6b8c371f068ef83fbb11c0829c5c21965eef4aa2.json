{"sha": "6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "node_id": "C_kwDOAAsO6NoAKDZiOGMzNzFmMDY4ZWY4M2ZiYjExYzA4MjljNWMyMTk2NWVlZjRhYTI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-20T23:08:00Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-20T23:09:49Z"}, "message": "Manual adjustments", "tree": {"sha": "41f5aab4785d1333766529b8fb4ceb009e509405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f5aab4785d1333766529b8fb4ceb009e509405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKw/j0ACgkQ+boUO5X/\nbYK1mQ/9G/7rNqiyEmWWA+krMFu10NqEtF+zgDALaEBtt04kIDR+IYqi6FjcJw1D\neMUEbXWq04TAz2FaejHiJhtckwdqlpanf5uutSuSzVdTKecoslbEFInORLGZBLtl\nXRoa60h/oznhZD0dSmES714Db2ah4MEfU1+m/Q0WhwlKIGN4HbPGwtXjjYeRN98C\nu+3Vkc+SSvVteek8URKkkV7pVpeXD5e/qwoIsz7CUYVdZ7nt+y0MlJffu3UjPoWa\n1b6qJHLcqSotukKLG4r8GFG5+ft1Q+/zSuR9FPL6sHYVdexluC2u5sQ0noy/2IU7\n6KRXAm5XIqPx3TltOVcKmFzOx+2+mGjl0hh/eXdzaAICcOJpgaUnzQqDvabc6NJD\n/F/GcyNuy/qLmw0IXFmHqyT22+s2iet3vp6He84CUSLo8X0imCMfJye33iKGVJ+n\nVrfyUJg7wMIDNKFItFUkIwNJ0VSRr9e/ZELvMSvTUFpZ6F4q2KYt3Bz4tIqnAtv9\nUoQh4w2XYAMruZscsu47+CRXcghw3iKbwFfbL5SknSgZdQwPOWnDwZwfuRJle02H\nU/2pA1wLtPCrSvkxnjH3d9qlG7xaGbQi3qPeUsmlc/hkPnG+3K1LKr3k0ukPcNgA\nP+p7kJkvKCA3RLmmVKEnyE6ci+9ymR/UE+0MPoKsGiYLEuHjqn8=\n=tKWr\n-----END PGP SIGNATURE-----", "payload": "tree 41f5aab4785d1333766529b8fb4ceb009e509405\nparent df8d8b655b9ff5c1a941697119cc7fac41e77321\nauthor David Tolnay <dtolnay@gmail.com> 1655766480 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655766589 -0700\n\nManual adjustments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "html_url": "https://github.com/rust-lang/rust/commit/6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8d8b655b9ff5c1a941697119cc7fac41e77321", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8d8b655b9ff5c1a941697119cc7fac41e77321", "html_url": "https://github.com/rust-lang/rust/commit/df8d8b655b9ff5c1a941697119cc7fac41e77321"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "64d397f91aeec49254ae355eaeff49cf50653e5f", "filename": "tests/pass/issues/issue-17877.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Fissues%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Fissues%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fissues%2Fissue-17877.rs?ref=6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "patch": "@@ -3,7 +3,7 @@ fn main() {\n         match [0u8; 16 * 1024] {\n             _ => 42_usize,\n         },\n-        42_usize\n+        42_usize,\n     );\n \n     assert_eq!(\n@@ -12,6 +12,6 @@ fn main() {\n             [0, ..] => 1_usize,\n             _ => 2_usize,\n         },\n-        1_usize\n+        1_usize,\n     );\n }"}, {"sha": "f97b9dd2b9eaa2ca50b502418626967c0e6a88ff", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "patch": "@@ -95,7 +95,7 @@ fn test_mutex_libc_init_recursive() {\n         assert_eq!(libc::pthread_mutexattr_init(&mut attr as *mut _), 0);\n         assert_eq!(\n             libc::pthread_mutexattr_settype(&mut attr as *mut _, libc::PTHREAD_MUTEX_RECURSIVE),\n-            0\n+            0,\n         );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mut attr as *mut _), 0);\n@@ -118,11 +118,11 @@ fn test_mutex_libc_init_normal() {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n         assert_eq!(\n             libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, 0x12345678),\n-            libc::EINVAL\n+            libc::EINVAL,\n         );\n         assert_eq!(\n             libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n-            0\n+            0,\n         );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n@@ -141,9 +141,9 @@ fn test_mutex_libc_init_errorcheck() {\n         assert_eq!(\n             libc::pthread_mutexattr_settype(\n                 &mut mutexattr as *mut _,\n-                libc::PTHREAD_MUTEX_ERRORCHECK\n+                libc::PTHREAD_MUTEX_ERRORCHECK,\n             ),\n-            0\n+            0,\n         );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n@@ -216,7 +216,7 @@ fn test_prctl_thread_name() {\n         let mut buf = [255; 10];\n         assert_eq!(\n             libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long),\n-            0\n+            0,\n         );\n         assert_eq!(b\"<unnamed>\\0\", &buf);\n         let thread_name = CString::new(\"hello\").expect(\"CString::new failed\");\n@@ -226,14 +226,14 @@ fn test_prctl_thread_name() {\n                 thread_name.as_ptr(),\n                 0 as c_long,\n                 0 as c_long,\n-                0 as c_long\n+                0 as c_long,\n             ),\n-            0\n+            0,\n         );\n         let mut buf = [255; 6];\n         assert_eq!(\n             libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long),\n-            0\n+            0,\n         );\n         assert_eq!(b\"hello\\0\", &buf);\n         let long_thread_name = CString::new(\"01234567890123456789\").expect(\"CString::new failed\");\n@@ -243,14 +243,14 @@ fn test_prctl_thread_name() {\n                 long_thread_name.as_ptr(),\n                 0 as c_long,\n                 0 as c_long,\n-                0 as c_long\n+                0 as c_long,\n             ),\n-            0\n+            0,\n         );\n         let mut buf = [255; 16];\n         assert_eq!(\n             libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long),\n-            0\n+            0,\n         );\n         assert_eq!(b\"012345678901234\\0\", &buf);\n     }"}, {"sha": "ad1a1f27c7713e5f5c71724876fe4f047dc84672", "filename": "tests/pass/linux-getrandom-without-isolation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Flinux-getrandom-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Flinux-getrandom-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flinux-getrandom-without-isolation.rs?ref=6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "patch": "@@ -11,31 +11,31 @@ fn main() {\n                 libc::SYS_getrandom,\n                 0 as *mut libc::c_void,\n                 0 as libc::size_t,\n-                0 as libc::c_uint\n+                0 as libc::c_uint,\n             ),\n-            0\n+            0,\n         );\n         assert_eq!(\n             libc::syscall(\n                 libc::SYS_getrandom,\n                 buf.as_mut_ptr() as *mut libc::c_void,\n                 5 as libc::size_t,\n-                0 as libc::c_uint\n+                0 as libc::c_uint,\n             ),\n-            5\n+            5,\n         );\n \n         assert_eq!(\n             libc::getrandom(0 as *mut libc::c_void, 0 as libc::size_t, 0 as libc::c_uint),\n-            0\n+            0,\n         );\n         assert_eq!(\n             libc::getrandom(\n                 buf.as_mut_ptr() as *mut libc::c_void,\n                 5 as libc::size_t,\n-                0 as libc::c_uint\n+                0 as libc::c_uint,\n             ),\n-            5\n+            5,\n         );\n     }\n }"}, {"sha": "7d3f899f4408a3ba1ad18aa3f7ea19237a5a3f92", "filename": "tests/pass/linux-getrandom.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Flinux-getrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Flinux-getrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flinux-getrandom.rs?ref=6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "patch": "@@ -10,31 +10,31 @@ fn main() {\n                 libc::SYS_getrandom,\n                 0 as *mut libc::c_void,\n                 0 as libc::size_t,\n-                0 as libc::c_uint\n+                0 as libc::c_uint,\n             ),\n-            0\n+            0,\n         );\n         assert_eq!(\n             libc::syscall(\n                 libc::SYS_getrandom,\n                 buf.as_mut_ptr() as *mut libc::c_void,\n                 5 as libc::size_t,\n-                0 as libc::c_uint\n+                0 as libc::c_uint,\n             ),\n-            5\n+            5,\n         );\n \n         assert_eq!(\n             libc::getrandom(0 as *mut libc::c_void, 0 as libc::size_t, 0 as libc::c_uint),\n-            0\n+            0,\n         );\n         assert_eq!(\n             libc::getrandom(\n                 buf.as_mut_ptr() as *mut libc::c_void,\n                 5 as libc::size_t,\n-                0 as libc::c_uint\n+                0 as libc::c_uint,\n             ),\n-            5\n+            5,\n         );\n     }\n }"}, {"sha": "345cb64ccf713d677fd4dddb7418941602deabaa", "filename": "tests/pass/stacked-borrows/2phase.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Fstacked-borrows%2F2phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8c371f068ef83fbb11c0829c5c21965eef4aa2/tests%2Fpass%2Fstacked-borrows%2F2phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2F2phase.rs?ref=6b8c371f068ef83fbb11c0829c5c21965eef4aa2", "patch": "@@ -22,8 +22,8 @@ fn two_phase3(b: bool) {\n     x.push((\n         {\n             if b {\n-                x = &mut y\n-            };\n+                x = &mut y;\n+            }\n             22\n         },\n         x.len(),"}]}