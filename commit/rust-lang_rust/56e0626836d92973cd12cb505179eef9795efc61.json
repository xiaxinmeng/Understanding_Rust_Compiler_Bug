{"sha": "56e0626836d92973cd12cb505179eef9795efc61", "node_id": "C_kwDOAAsO6NoAKDU2ZTA2MjY4MzZkOTI5NzNjZDEyY2I1MDUxNzllZWY5Nzk1ZWZjNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T10:54:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T10:54:04Z"}, "message": "Auto merge of #110041 - fmease:diag-sugg-adding-const-param, r=compiler-errors\n\nSuggest defining const parameter when appropriate\n\nHelps a bit with #91119.\nFollowing #105523's lead, I use placeholder `/* Type */` instead of `_` in the suggestion.\nIt should be easier for newcomers to parse.\n\n`@rustbot` label A-diagnostics\nr? diagnostics", "tree": {"sha": "e4937c502e8bd7ae5aa4933d44bacff7564507f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4937c502e8bd7ae5aa4933d44bacff7564507f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e0626836d92973cd12cb505179eef9795efc61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e0626836d92973cd12cb505179eef9795efc61", "html_url": "https://github.com/rust-lang/rust/commit/56e0626836d92973cd12cb505179eef9795efc61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e0626836d92973cd12cb505179eef9795efc61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709a97fffec5e09cb5feca894c394ee80c2680ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/709a97fffec5e09cb5feca894c394ee80c2680ba", "html_url": "https://github.com/rust-lang/rust/commit/709a97fffec5e09cb5feca894c394ee80c2680ba"}, {"sha": "f2acafe9e280bc234a06fcd5f6e9a55dac109914", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2acafe9e280bc234a06fcd5f6e9a55dac109914", "html_url": "https://github.com/rust-lang/rust/commit/f2acafe9e280bc234a06fcd5f6e9a55dac109914"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "b3f66c4ba3354a6213c0aa800c01e1347650be85", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e0626836d92973cd12cb505179eef9795efc61/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e0626836d92973cd12cb505179eef9795efc61/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=56e0626836d92973cd12cb505179eef9795efc61", "patch": "@@ -3467,8 +3467,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         sugg.to_string(),\n                         Applicability::MaybeIncorrect,\n                     ))\n-                } else if res.is_none() && matches!(source, PathSource::Type) {\n-                    this.report_missing_type_error(path)\n+                } else if res.is_none() && let PathSource::Type | PathSource::Expr(_) = source {\n+                    this.suggest_adding_generic_parameter(path, source)\n                 } else {\n                     None\n                 };"}, {"sha": "37fbfad2de631fb8ae301111a419ffc16573a774", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56e0626836d92973cd12cb505179eef9795efc61/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e0626836d92973cd12cb505179eef9795efc61/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=56e0626836d92973cd12cb505179eef9795efc61", "patch": "@@ -2110,9 +2110,10 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         }\n     }\n \n-    pub(crate) fn report_missing_type_error(\n+    pub(crate) fn suggest_adding_generic_parameter(\n         &self,\n         path: &[Segment],\n+        source: PathSource<'_>,\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n         let (ident, span) = match path {\n             [segment]\n@@ -2148,7 +2149,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             // Without the 2nd `true`, we'd suggest `impl <T>` for `impl T` when a type `T` isn't found\n             | (Some(Item { kind: kind @ ItemKind::Impl(..), .. }), true, true)\n             | (Some(Item { kind, .. }), false, _) => {\n-                // Likely missing type parameter.\n                 if let Some(generics) = kind.generics() {\n                     if span.overlaps(generics.span) {\n                         // Avoid the following:\n@@ -2161,7 +2161,12 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         //   |           not found in this scope\n                         return None;\n                     }\n-                    let msg = \"you might be missing a type parameter\";\n+\n+                    let (msg, sugg) = match source {\n+                        PathSource::Type => (\"you might be missing a type parameter\", ident),\n+                        PathSource::Expr(_) => (\"you might be missing a const parameter\", format!(\"const {ident}: /* Type */\")),\n+                        _ => return None,\n+                    };\n                     let (span, sugg) = if let [.., param] = &generics.params[..] {\n                         let span = if let [.., bound] = &param.bounds[..] {\n                             bound.span()\n@@ -2172,9 +2177,9 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         } else {\n                             param.ident.span\n                         };\n-                        (span, format!(\", {}\", ident))\n+                        (span, format!(\", {sugg}\"))\n                     } else {\n-                        (generics.span, format!(\"<{}>\", ident))\n+                        (generics.span, format!(\"<{sugg}>\"))\n                     };\n                     // Do not suggest if this is coming from macro expansion.\n                     if span.can_be_used_for_suggestions() {"}, {"sha": "a3af88f263331e55841090423081b7f3668ef5d5", "filename": "tests/ui/missing/missing-items/missing-const-parameter.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56e0626836d92973cd12cb505179eef9795efc61/tests%2Fui%2Fmissing%2Fmissing-items%2Fmissing-const-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e0626836d92973cd12cb505179eef9795efc61/tests%2Fui%2Fmissing%2Fmissing-items%2Fmissing-const-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-items%2Fmissing-const-parameter.rs?ref=56e0626836d92973cd12cb505179eef9795efc61", "patch": "@@ -0,0 +1,24 @@\n+struct Struct<const N: usize>;\n+\n+impl Struct<{ N }> {}\n+//~^ ERROR cannot find value `N` in this scope\n+//~| HELP you might be missing a const parameter\n+\n+fn func0(_: Struct<{ N }>) {}\n+//~^ ERROR cannot find value `N` in this scope\n+//~| HELP you might be missing a const parameter\n+\n+fn func1(_: [u8; N]) {}\n+//~^ ERROR cannot find value `N` in this scope\n+//~| HELP you might be missing a const parameter\n+\n+fn func2<T>(_: [T; N]) {}\n+//~^ ERROR cannot find value `N` in this scope\n+//~| HELP you might be missing a const parameter\n+\n+struct Image<const R: usize>([[u32; C]; R]);\n+//~^ ERROR cannot find value `C` in this scope\n+//~| HELP a const parameter with a similar name exists\n+//~| HELP you might be missing a const parameter\n+\n+fn main() {}"}, {"sha": "d9fea1306514c71de0765e3335013ac60c542eed", "filename": "tests/ui/missing/missing-items/missing-const-parameter.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/56e0626836d92973cd12cb505179eef9795efc61/tests%2Fui%2Fmissing%2Fmissing-items%2Fmissing-const-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e0626836d92973cd12cb505179eef9795efc61/tests%2Fui%2Fmissing%2Fmissing-items%2Fmissing-const-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-items%2Fmissing-const-parameter.stderr?ref=56e0626836d92973cd12cb505179eef9795efc61", "patch": "@@ -0,0 +1,64 @@\n+error[E0425]: cannot find value `N` in this scope\n+  --> $DIR/missing-const-parameter.rs:3:15\n+   |\n+LL | impl Struct<{ N }> {}\n+   |               ^ not found in this scope\n+   |\n+help: you might be missing a const parameter\n+   |\n+LL | impl<const N: /* Type */> Struct<{ N }> {}\n+   |     +++++++++++++++++++++\n+\n+error[E0425]: cannot find value `N` in this scope\n+  --> $DIR/missing-const-parameter.rs:7:22\n+   |\n+LL | fn func0(_: Struct<{ N }>) {}\n+   |                      ^ not found in this scope\n+   |\n+help: you might be missing a const parameter\n+   |\n+LL | fn func0<const N: /* Type */>(_: Struct<{ N }>) {}\n+   |         +++++++++++++++++++++\n+\n+error[E0425]: cannot find value `N` in this scope\n+  --> $DIR/missing-const-parameter.rs:11:18\n+   |\n+LL | fn func1(_: [u8; N]) {}\n+   |                  ^ not found in this scope\n+   |\n+help: you might be missing a const parameter\n+   |\n+LL | fn func1<const N: /* Type */>(_: [u8; N]) {}\n+   |         +++++++++++++++++++++\n+\n+error[E0425]: cannot find value `N` in this scope\n+  --> $DIR/missing-const-parameter.rs:15:20\n+   |\n+LL | fn func2<T>(_: [T; N]) {}\n+   |                    ^ not found in this scope\n+   |\n+help: you might be missing a const parameter\n+   |\n+LL | fn func2<T, const N: /* Type */>(_: [T; N]) {}\n+   |           +++++++++++++++++++++\n+\n+error[E0425]: cannot find value `C` in this scope\n+  --> $DIR/missing-const-parameter.rs:19:37\n+   |\n+LL | struct Image<const R: usize>([[u32; C]; R]);\n+   |                    -                ^\n+   |                    |\n+   |                    similarly named const parameter `R` defined here\n+   |\n+help: a const parameter with a similar name exists\n+   |\n+LL | struct Image<const R: usize>([[u32; R]; R]);\n+   |                                     ~\n+help: you might be missing a const parameter\n+   |\n+LL | struct Image<const R: usize, const C: /* Type */>([[u32; C]; R]);\n+   |                            +++++++++++++++++++++\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}