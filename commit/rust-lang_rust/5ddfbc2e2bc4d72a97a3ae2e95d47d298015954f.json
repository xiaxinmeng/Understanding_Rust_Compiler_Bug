{"sha": "5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZGZiYzJlMmJjNGQ3MmE5N2EzYWUyZTk1ZDQ3ZDI5ODAxNTk1NGY=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2019-12-06T07:41:48Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2019-12-06T07:41:51Z"}, "message": "Fix Query type docs\n\n`give` no longer exists, `compute` is used to generate query results\nnow.", "tree": {"sha": "3602a8ef1e25618f77b5e1f6c14142e8d9a4abfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3602a8ef1e25618f77b5e1f6c14142e8d9a4abfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f", "html_url": "https://github.com/rust-lang/rust/commit/5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234c9f21d9930e4ae804d00b191d0780959cfcbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/234c9f21d9930e4ae804d00b191d0780959cfcbe", "html_url": "https://github.com/rust-lang/rust/commit/234c9f21d9930e4ae804d00b191d0780959cfcbe"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "d1fbb949fb164326eb4fc93237e2831d0d221d66", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=5ddfbc2e2bc4d72a97a3ae2e95d47d298015954f", "patch": "@@ -22,7 +22,7 @@ use std::mem;\n use syntax::{self, ast};\n \n /// Represent the result of a query.\n-/// This result can be stolen with the `take` method and returned with the `give` method.\n+/// This result can be stolen with the `take` method and generated with the `compute` method.\n pub struct Query<T> {\n     result: RefCell<Option<Result<T>>>,\n }\n@@ -37,7 +37,7 @@ impl<T> Query<T> {\n     }\n \n     /// Takes ownership of the query result. Further attempts to take or peek the query\n-    /// result will panic unless it is returned by calling the `give` method.\n+    /// result will panic unless it is generated by calling the `compute` method.\n     pub fn take(&self) -> T {\n         self.result\n             .borrow_mut()"}]}