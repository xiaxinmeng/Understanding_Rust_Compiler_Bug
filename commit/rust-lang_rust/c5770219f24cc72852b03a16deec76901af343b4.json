{"sha": "c5770219f24cc72852b03a16deec76901af343b4", "node_id": "C_kwDOAAsO6NoAKGM1NzcwMjE5ZjI0Y2M3Mjg1MmIwM2ExNmRlZWM3NjkwMWFmMzQzYjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-28T07:35:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-28T07:35:18Z"}, "message": "Rollup merge of #101002 - estebank:hashmap-idx, r=davidtwco\n\nProvide structured suggestion for `hashmap[idx] = val`", "tree": {"sha": "a4863a248e27c63d2646ede0e88d21e602f3a8ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4863a248e27c63d2646ede0e88d21e602f3a8ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5770219f24cc72852b03a16deec76901af343b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCxq2CRBK7hj4Ov3rIwAAL2YIAE4c+q5Awp6oMbY6h0SXJ5Hc\n1K1MKXvPqGlfzWX+Up4QLt0yKCD/XB6ZdsPGLvUOe1NT6ZCs3feGuf6EvDN+0e3V\nXy3snY+jfPk1XBDi2CkGpI97+LkF54Qa/iqcyPy4d4MgkJQBcKEt2FgBlJjcSDB8\nHIR6gYL9mh2RLnnn+KwTWmr9wJVDgN3PyO92BfrHYgN5V4BiSl3ChpK7Z2Z+ade7\nzkmRUlw+rvF9lwMDAvPCO3/9aFwVR3VQHmJaycznouvFeqNgvwEhWmK+1wKf03vC\nYS/tMHOu+P3GHULd+adKQ55SoSayox2X+4S9cWJ5To/s+vNoA3Anog/FXk7nOJk=\n=x6MA\n-----END PGP SIGNATURE-----\n", "payload": "tree a4863a248e27c63d2646ede0e88d21e602f3a8ac\nparent edd81d136b861f82bf17e1c0e6f760883710497a\nparent 752902957bb6cfcdb17c0a9119763f4b8a8bb147\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661672118 +0200\ncommitter GitHub <noreply@github.com> 1661672118 +0200\n\nRollup merge of #101002 - estebank:hashmap-idx, r=davidtwco\n\nProvide structured suggestion for `hashmap[idx] = val`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5770219f24cc72852b03a16deec76901af343b4", "html_url": "https://github.com/rust-lang/rust/commit/c5770219f24cc72852b03a16deec76901af343b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5770219f24cc72852b03a16deec76901af343b4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd81d136b861f82bf17e1c0e6f760883710497a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd81d136b861f82bf17e1c0e6f760883710497a", "html_url": "https://github.com/rust-lang/rust/commit/edd81d136b861f82bf17e1c0e6f760883710497a"}, {"sha": "752902957bb6cfcdb17c0a9119763f4b8a8bb147", "url": "https://api.github.com/repos/rust-lang/rust/commits/752902957bb6cfcdb17c0a9119763f4b8a8bb147", "html_url": "https://github.com/rust-lang/rust/commit/752902957bb6cfcdb17c0a9119763f4b8a8bb147"}], "stats": {"total": 162, "additions": 149, "deletions": 13}, "files": [{"sha": "dd9590016b990f27f98f64cd04cd49b3a3e005ea", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 113, "deletions": 3, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/c5770219f24cc72852b03a16deec76901af343b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5770219f24cc72852b03a16deec76901af343b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=c5770219f24cc72852b03a16deec76901af343b4", "patch": "@@ -1,5 +1,8 @@\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    Applicability, Diagnostic, DiagnosticBuilder, EmissionGuarantee, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n@@ -614,7 +617,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             \"trait `IndexMut` is required to modify indexed content, \\\n                                 but it is not implemented for `{ty}`\",\n                         ));\n-                        self.suggest_map_index_mut_alternatives(ty, &mut err);\n+                        self.suggest_map_index_mut_alternatives(ty, &mut err, span);\n                     }\n                     _ => (),\n                 }\n@@ -632,13 +635,120 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'_>,\n         err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        span: Span,\n     ) {\n         let Some(adt) = ty.ty_adt_def() else { return };\n         let did = adt.did();\n         if self.infcx.tcx.is_diagnostic_item(sym::HashMap, did)\n             || self.infcx.tcx.is_diagnostic_item(sym::BTreeMap, did)\n         {\n-            err.help(format!(\"to modify a `{ty}`, use `.get_mut()`, `.insert()` or the entry API\"));\n+            struct V<'a, 'b, 'tcx, G: EmissionGuarantee> {\n+                assign_span: Span,\n+                err: &'a mut DiagnosticBuilder<'b, G>,\n+                ty: Ty<'tcx>,\n+                suggested: bool,\n+            }\n+            impl<'a, 'b: 'a, 'hir, 'tcx, G: EmissionGuarantee> Visitor<'hir> for V<'a, 'b, 'tcx, G> {\n+                fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'hir>) {\n+                    hir::intravisit::walk_stmt(self, stmt);\n+                    let expr = match stmt.kind {\n+                        hir::StmtKind::Semi(expr) | hir::StmtKind::Expr(expr) => expr,\n+                        hir::StmtKind::Local(hir::Local { init: Some(expr), .. }) => expr,\n+                        _ => {\n+                            return;\n+                        }\n+                    };\n+                    if let hir::ExprKind::Assign(place, rv, _sp) = expr.kind\n+                        && let hir::ExprKind::Index(val, index) = place.kind\n+                        && (expr.span == self.assign_span || place.span == self.assign_span)\n+                    {\n+                        // val[index] = rv;\n+                        // ---------- place\n+                        self.err.multipart_suggestions(\n+                            &format!(\n+                                \"to modify a `{}`, use `.get_mut()`, `.insert()` or the entry API\",\n+                                self.ty,\n+                            ),\n+                            vec![\n+                                vec![ // val.insert(index, rv);\n+                                    (\n+                                        val.span.shrink_to_hi().with_hi(index.span.lo()),\n+                                        \".insert(\".to_string(),\n+                                    ),\n+                                    (\n+                                        index.span.shrink_to_hi().with_hi(rv.span.lo()),\n+                                        \", \".to_string(),\n+                                    ),\n+                                    (rv.span.shrink_to_hi(), \")\".to_string()),\n+                                ],\n+                                vec![ // val.get_mut(index).map(|v| { *v = rv; });\n+                                    (\n+                                        val.span.shrink_to_hi().with_hi(index.span.lo()),\n+                                        \".get_mut(\".to_string(),\n+                                    ),\n+                                    (\n+                                        index.span.shrink_to_hi().with_hi(place.span.hi()),\n+                                        \").map(|val| { *val\".to_string(),\n+                                    ),\n+                                    (\n+                                        rv.span.shrink_to_hi(),\n+                                        \"; })\".to_string(),\n+                                    ),\n+                                ],\n+                                vec![ // let x = val.entry(index).or_insert(rv);\n+                                    (val.span.shrink_to_lo(), \"let val = \".to_string()),\n+                                    (\n+                                        val.span.shrink_to_hi().with_hi(index.span.lo()),\n+                                        \".entry(\".to_string(),\n+                                    ),\n+                                    (\n+                                        index.span.shrink_to_hi().with_hi(rv.span.lo()),\n+                                        \").or_insert(\".to_string(),\n+                                    ),\n+                                    (rv.span.shrink_to_hi(), \")\".to_string()),\n+                                ],\n+                            ].into_iter(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        self.suggested = true;\n+                    } else if let hir::ExprKind::MethodCall(_path, args @ [_, ..], sp) = expr.kind\n+                        && let hir::ExprKind::Index(val, index) = args[0].kind\n+                        && expr.span == self.assign_span\n+                    {\n+                        // val[index].path(args..);\n+                        self.err.multipart_suggestion(\n+                            &format!(\"to modify a `{}` use `.get_mut()`\", self.ty),\n+                            vec![\n+                                (\n+                                    val.span.shrink_to_hi().with_hi(index.span.lo()),\n+                                    \".get_mut(\".to_string(),\n+                                ),\n+                                (\n+                                    index.span.shrink_to_hi().with_hi(args[0].span.hi()),\n+                                    \").map(|val| val\".to_string(),\n+                                ),\n+                                (sp.shrink_to_hi(), \")\".to_string()),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        );\n+                        self.suggested = true;\n+                    }\n+                }\n+            }\n+            let hir_map = self.infcx.tcx.hir();\n+            let def_id = self.body.source.def_id();\n+            let hir_id = hir_map.local_def_id_to_hir_id(def_id.as_local().unwrap());\n+            let node = hir_map.find(hir_id);\n+            let Some(hir::Node::Item(item)) = node else { return; };\n+            let hir::ItemKind::Fn(.., body_id) = item.kind else { return; };\n+            let body = self.infcx.tcx.hir().body(body_id);\n+            let mut v = V { assign_span: span, err, ty, suggested: false };\n+            v.visit_body(body);\n+            if !v.suggested {\n+                err.help(&format!(\n+                    \"to modify a `{ty}`, use `.get_mut()`, `.insert()` or the entry API\",\n+                ));\n+            }\n         }\n     }\n "}, {"sha": "35266e113a6de437ce055995c60e10f603519a94", "filename": "src/test/ui/borrowck/index-mut-help.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.rs?ref=c5770219f24cc72852b03a16deec76901af343b4", "patch": "@@ -1,10 +1,9 @@\n // When mutably indexing a type that implements `Index` but not `IndexMut`, a\n // special 'help' message is added to the output.\n+use std::collections::HashMap;\n \n \n fn main() {\n-    use std::collections::HashMap;\n-\n     let mut map = HashMap::new();\n     map.insert(\"peter\", \"23\".to_string());\n "}, {"sha": "f42d7e0155433fbcb61bf3cb8efeacf32d7bd2ea", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=c5770219f24cc72852b03a16deec76901af343b4", "patch": "@@ -1,23 +1,33 @@\n error[E0596]: cannot borrow data in an index of `HashMap<&str, String>` as mutable\n-  --> $DIR/index-mut-help.rs:11:5\n+  --> $DIR/index-mut-help.rs:10:5\n    |\n LL |     map[\"peter\"].clear();\n    |     ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n-   = help: to modify a `HashMap<&str, String>`, use `.get_mut()`, `.insert()` or the entry API\n+help: to modify a `HashMap<&str, String>` use `.get_mut()`\n+   |\n+LL |     map.get_mut(\"peter\").map(|val| val.clear());\n+   |        ~~~~~~~~~       ~~~~~~~~~~~~~~~        +\n \n error[E0594]: cannot assign to data in an index of `HashMap<&str, String>`\n-  --> $DIR/index-mut-help.rs:12:5\n+  --> $DIR/index-mut-help.rs:11:5\n    |\n LL |     map[\"peter\"] = \"0\".to_string();\n    |     ^^^^^^^^^^^^ cannot assign\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n-   = help: to modify a `HashMap<&str, String>`, use `.get_mut()`, `.insert()` or the entry API\n+help: to modify a `HashMap<&str, String>`, use `.get_mut()`, `.insert()` or the entry API\n+   |\n+LL |     map.insert(\"peter\", \"0\".to_string());\n+   |        ~~~~~~~~       ~                +\n+LL |     map.get_mut(\"peter\").map(|val| { *val = \"0\".to_string(); });\n+   |        ~~~~~~~~~       ~~~~~~~~~~~~~~~~~~                  ++++\n+LL |     let val = map.entry(\"peter\").or_insert(\"0\".to_string());\n+   |     +++++++++    ~~~~~~~       ~~~~~~~~~~~~               +\n \n error[E0596]: cannot borrow data in an index of `HashMap<&str, String>` as mutable\n-  --> $DIR/index-mut-help.rs:13:13\n+  --> $DIR/index-mut-help.rs:12:13\n    |\n LL |     let _ = &mut map[\"peter\"];\n    |             ^^^^^^^^^^^^^^^^^ cannot borrow as mutable"}, {"sha": "26f2a4c4b29145faff8ea86e67b42e2d36636bb6", "filename": "src/test/ui/btreemap/btreemap-index-mut.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.stderr?ref=c5770219f24cc72852b03a16deec76901af343b4", "patch": "@@ -5,7 +5,14 @@ LL |     map[&0] = 1;\n    |     ^^^^^^^^^^^ cannot assign\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `BTreeMap<u32, u32>`\n-   = help: to modify a `BTreeMap<u32, u32>`, use `.get_mut()`, `.insert()` or the entry API\n+help: to modify a `BTreeMap<u32, u32>`, use `.get_mut()`, `.insert()` or the entry API\n+   |\n+LL |     map.insert(&0, 1);\n+   |        ~~~~~~~~  ~  +\n+LL |     map.get_mut(&0).map(|val| { *val = 1; });\n+   |        ~~~~~~~~~  ~~~~~~~~~~~~~~~~~~    ++++\n+LL |     let val = map.entry(&0).or_insert(1);\n+   |     +++++++++    ~~~~~~~  ~~~~~~~~~~~~ +\n \n error: aborting due to previous error\n "}, {"sha": "c1948ab627149dad14a0b162c6f516903881ee3d", "filename": "src/test/ui/hashmap/hashmap-index-mut.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.stderr?ref=c5770219f24cc72852b03a16deec76901af343b4", "patch": "@@ -5,7 +5,14 @@ LL |     map[&0] = 1;\n    |     ^^^^^^^^^^^ cannot assign\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<u32, u32>`\n-   = help: to modify a `HashMap<u32, u32>`, use `.get_mut()`, `.insert()` or the entry API\n+help: to modify a `HashMap<u32, u32>`, use `.get_mut()`, `.insert()` or the entry API\n+   |\n+LL |     map.insert(&0, 1);\n+   |        ~~~~~~~~  ~  +\n+LL |     map.get_mut(&0).map(|val| { *val = 1; });\n+   |        ~~~~~~~~~  ~~~~~~~~~~~~~~~~~~    ++++\n+LL |     let val = map.entry(&0).or_insert(1);\n+   |     +++++++++    ~~~~~~~  ~~~~~~~~~~~~ +\n \n error: aborting due to previous error\n "}, {"sha": "b05c1fb14efc6d23778c5e78659936320efe51c4", "filename": "src/test/ui/issues/issue-41726.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5770219f24cc72852b03a16deec76901af343b4/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr?ref=c5770219f24cc72852b03a16deec76901af343b4", "patch": "@@ -5,7 +5,10 @@ LL |         things[src.as_str()].sort();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<String, Vec<String>>`\n-   = help: to modify a `HashMap<String, Vec<String>>`, use `.get_mut()`, `.insert()` or the entry API\n+help: to modify a `HashMap<String, Vec<String>>` use `.get_mut()`\n+   |\n+LL |         things.get_mut(src.as_str()).map(|val| val.sort());\n+   |               ~~~~~~~~~            ~~~~~~~~~~~~~~~       +\n \n error: aborting due to previous error\n "}]}