{"sha": "cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "node_id": "C_kwDOAAsO6NoAKGNlY2JkNzY1N2E4MGE4MjRiZGNmNjBmYjQzYWNjN2FmMDAwYWMyYzE", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-13T16:07:22Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-20T19:19:34Z"}, "message": "Suggest constraining `fn` type params when appropriate", "tree": {"sha": "5bf2d8aff434a406360d36494e14e8faea8673b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf2d8aff434a406360d36494e14e8faea8673b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "html_url": "https://github.com/rust-lang/rust/commit/cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa165d11b5eeedcf6e04f4812704d7fccf60ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa165d11b5eeedcf6e04f4812704d7fccf60ed6", "html_url": "https://github.com/rust-lang/rust/commit/9fa165d11b5eeedcf6e04f4812704d7fccf60ed6"}], "stats": {"total": 113, "additions": 85, "deletions": 28}, "files": [{"sha": "ca174ed5e84972cb3950e301e6bd3c7a107be699", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 46, "deletions": 26, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "patch": "@@ -704,27 +704,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let (ty::Param(_), ty::PredicateKind::Trait(p)) =\n                                 (self_ty.kind(), parent_pred.kind().skip_binder())\n                             {\n-                                if let ty::Adt(def, _) = p.trait_ref.self_ty().kind() {\n-                                    let node = def.did.as_local().map(|def_id| {\n+                                let node = match p.trait_ref.self_ty().kind() {\n+                                    ty::Param(_) => {\n+                                        // Account for `fn` items like in `issue-35677.rs` to\n+                                        // suggest restricting its type params.\n+                                        let did = self.tcx.hir().body_owner_def_id(hir::BodyId {\n+                                            hir_id: self.body_id,\n+                                        });\n+                                        Some(\n+                                            self.tcx\n+                                                .hir()\n+                                                .get(self.tcx.hir().local_def_id_to_hir_id(did)),\n+                                        )\n+                                    }\n+                                    ty::Adt(def, _) => def.did.as_local().map(|def_id| {\n                                         self.tcx\n                                             .hir()\n                                             .get(self.tcx.hir().local_def_id_to_hir_id(def_id))\n-                                    });\n-                                    if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n-                                        if let Some(g) = kind.generics() {\n-                                            let key = match g.where_clause.predicates {\n-                                                [.., pred] => (pred.span().shrink_to_hi(), false),\n-                                                [] => (\n-                                                    g.where_clause\n-                                                        .span_for_predicates_or_empty_place(),\n-                                                    true,\n-                                                ),\n-                                            };\n-                                            type_params\n-                                                .entry(key)\n-                                                .or_insert_with(FxHashSet::default)\n-                                                .insert(obligation.to_owned());\n-                                        }\n+                                    }),\n+                                    _ => None,\n+                                };\n+                                if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n+                                    if let Some(g) = kind.generics() {\n+                                        let key = match g.where_clause.predicates {\n+                                            [.., pred] => (pred.span().shrink_to_hi(), false),\n+                                            [] => (\n+                                                g.where_clause.span_for_predicates_or_empty_place(),\n+                                                true,\n+                                            ),\n+                                        };\n+                                        type_params\n+                                            .entry(key)\n+                                            .or_insert_with(FxHashSet::default)\n+                                            .insert(obligation.to_owned());\n                                     }\n                                 }\n                             }\n@@ -875,19 +887,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .iter()\n                         .filter(|(pred, _, _parent_pred)| !skip_list.contains(&pred))\n                         .filter_map(|(pred, parent_pred, _cause)| {\n-                            format_pred(*pred).map(|(p, self_ty)| match parent_pred {\n-                                None => format!(\"`{}`\", &p),\n-                                Some(parent_pred) => match format_pred(*parent_pred) {\n+                            format_pred(*pred).map(|(p, self_ty)| {\n+                                collect_type_param_suggestions(self_ty, pred, &p);\n+                                match parent_pred {\n                                     None => format!(\"`{}`\", &p),\n-                                    Some((parent_p, _)) => {\n-                                        collect_type_param_suggestions(self_ty, parent_pred, &p);\n-                                        format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)\n-                                    }\n-                                },\n+                                    Some(parent_pred) => match format_pred(*parent_pred) {\n+                                        None => format!(\"`{}`\", &p),\n+                                        Some((parent_p, _)) => {\n+                                            collect_type_param_suggestions(\n+                                                self_ty,\n+                                                parent_pred,\n+                                                &p,\n+                                            );\n+                                            format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)\n+                                        }\n+                                    },\n+                                }\n                             })\n                         })\n                         .enumerate()\n                         .collect::<Vec<(usize, String)>>();\n+\n                     for ((span, empty_where), obligations) in type_params.into_iter() {\n                         restrict_type_params = true;\n                         // #74886: Sort here so that the output is always the same."}, {"sha": "08174d8d8d53ad476ed5212c055012b1a15136ea", "filename": "src/test/ui/issues/issue-35677.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-35677.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-35677.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.fixed?ref=cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+use std::collections::HashSet;\n+use std::hash::Hash;\n+\n+fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash {\n+    this.is_subset(other)\n+    //~^ ERROR the method\n+}\n+\n+fn main() {}"}, {"sha": "2cb394386b8aaf95cff763a357852e0974024764", "filename": "src/test/ui/issues/issue-35677.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs?ref=cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+#![allow(dead_code)]\n use std::collections::HashSet;\n+use std::hash::Hash;\n \n fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool {\n     this.is_subset(other)"}, {"sha": "a2201b946a6f0d5352c8db71b2e1e8f9972f7b62", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "patch": "@@ -1,12 +1,16 @@\n error[E0599]: the method `is_subset` exists for reference `&HashSet<T>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-35677.rs:4:10\n+  --> $DIR/issue-35677.rs:7:10\n    |\n LL |     this.is_subset(other)\n    |          ^^^^^^^^^ method cannot be called on `&HashSet<T>` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `T: Eq`\n            `T: Hash`\n+help: consider restricting the type parameters to satisfy the trait bounds\n+   |\n+LL | fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash {\n+   |                                                                ++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d57badcfd8cf83942e9f1994b1394926754bb82c", "filename": "src/test/ui/issues/issue-69725.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-69725.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-69725.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.fixed?ref=cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+// aux-build:issue-69725.rs\n+#![allow(dead_code)]\n+\n+extern crate issue_69725;\n+use issue_69725::Struct;\n+\n+fn crash<A>() where A: Clone {\n+    let _ = Struct::<A>::new().clone();\n+    //~^ ERROR: the method\n+}\n+\n+fn main() {}"}, {"sha": "9c88969c5cff8dffd94f7c669cf23f26f8e722ad", "filename": "src/test/ui/issues/issue-69725.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs?ref=cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n // aux-build:issue-69725.rs\n+#![allow(dead_code)]\n \n extern crate issue_69725;\n use issue_69725::Struct;"}, {"sha": "6395bca300c92da47aff438a5ff942e5a919c36c", "filename": "src/test/ui/issues/issue-69725.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cecbd7657a80a824bdcf60fb43acc7af000ac2c1/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr?ref=cecbd7657a80a824bdcf60fb43acc7af000ac2c1", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: the method `clone` exists for struct `Struct<A>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-69725.rs:7:32\n+  --> $DIR/issue-69725.rs:9:32\n    |\n LL |     let _ = Struct::<A>::new().clone();\n    |                                ^^^^^ method cannot be called on `Struct<A>` due to unsatisfied trait bounds\n@@ -12,6 +12,10 @@ LL | pub struct Struct<A>(A);\n    = note: the following trait bounds were not satisfied:\n            `A: Clone`\n            which is required by `Struct<A>: Clone`\n+help: consider restricting the type parameter to satisfy the trait bound\n+   |\n+LL | fn crash<A>() where A: Clone {\n+   |               ++++++++++++++\n \n error: aborting due to previous error\n "}]}