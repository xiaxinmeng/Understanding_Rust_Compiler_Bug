{"sha": "634f8cc06a88eb978c5e52390014740c4bab1e33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNGY4Y2MwNmE4OGViOTc4YzVlNTIzOTAwMTQ3NDBjNGJhYjFlMzM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-11-15T17:01:09Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-26T03:49:54Z"}, "message": "Print inlined functions on Windows", "tree": {"sha": "57d414588e236c301ad3c4ce49759771a6339e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57d414588e236c301ad3c4ce49759771a6339e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/634f8cc06a88eb978c5e52390014740c4bab1e33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/634f8cc06a88eb978c5e52390014740c4bab1e33", "html_url": "https://github.com/rust-lang/rust/commit/634f8cc06a88eb978c5e52390014740c4bab1e33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/634f8cc06a88eb978c5e52390014740c4bab1e33/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0a9007f8d28234086f33c425bb996acd646bd14", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a9007f8d28234086f33c425bb996acd646bd14", "html_url": "https://github.com/rust-lang/rust/commit/a0a9007f8d28234086f33c425bb996acd646bd14"}], "stats": {"total": 112, "additions": 62, "deletions": 50}, "files": [{"sha": "1b970187558c83603dfd039b4bd69cf71d71fd06", "filename": "src/libstd/sys/cloudabi/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -77,6 +77,7 @@ extern \"C\" fn trace_fn(\n         cx.frames[cx.idx] = Frame {\n             symbol_addr: symaddr as *mut u8,\n             exact_position: ip as *mut u8,\n+            inline_context: 0,\n         };\n         cx.idx += 1;\n     }"}, {"sha": "bb70ca360370edce10f800bda91c9595f337db90", "filename": "src/libstd/sys/redox/backtrace/tracing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -98,6 +98,7 @@ extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n         cx.frames[cx.idx] = Frame {\n             symbol_addr: symaddr as *mut u8,\n             exact_position: ip as *mut u8,\n+            inline_context: 0,\n         };\n         cx.idx += 1;\n     }"}, {"sha": "6293eeb4ed649e327e1f899693fa88f3825d9b2c", "filename": "src/libstd/sys/unix/backtrace/tracing/backtrace_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -38,6 +38,7 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n         *to = Frame {\n             exact_position: *from as *mut u8,\n             symbol_addr: *from as *mut u8,\n+            inline_context: 0,\n         };\n     }\n     Ok((nb_frames as usize, BacktraceContext))"}, {"sha": "1b92fc0e6ad09d0e1f8d3b16b215e9061108a702", "filename": "src/libstd/sys/unix/backtrace/tracing/gcc_s.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -98,6 +98,7 @@ extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n         cx.frames[cx.idx] = Frame {\n             symbol_addr: symaddr as *mut u8,\n             exact_position: ip as *mut u8,\n+            inline_context: 0,\n         };\n         cx.idx += 1;\n     }"}, {"sha": "82498ad4d58202bc1aeac8e014139f74a44dca33", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -56,14 +56,15 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n     // Fetch the symbols necessary from dbghelp.dll\n     let SymInitialize = sym!(dbghelp, \"SymInitialize\", SymInitializeFn)?;\n     let SymCleanup = sym!(dbghelp, \"SymCleanup\", SymCleanupFn)?;\n-    let StackWalk64 = sym!(dbghelp, \"StackWalk64\", StackWalk64Fn)?;\n+    let StackWalkEx = sym!(dbghelp, \"StackWalkEx\", StackWalkExFn)?;\n \n     // Allocate necessary structures for doing the stack walk\n     let process = unsafe { c::GetCurrentProcess() };\n     let thread = unsafe { c::GetCurrentThread() };\n     let mut context: c::CONTEXT = unsafe { mem::zeroed() };\n     unsafe { c::RtlCaptureContext(&mut context) };\n-    let mut frame: c::STACKFRAME64 = unsafe { mem::zeroed() };\n+    let mut frame: c::STACKFRAME_EX = unsafe { mem::zeroed() };\n+    frame.StackFrameSize = mem::size_of_val(&frame) as c::DWORD;\n     let image = init_frame(&mut frame, &context);\n \n     let backtrace_context = BacktraceContext {\n@@ -79,24 +80,22 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n     }\n \n     // And now that we're done with all the setup, do the stack walking!\n-    // Start from -1 to avoid printing this stack frame, which will\n-    // always be exactly the same.\n     let mut i = 0;\n     unsafe {\n         while i < frames.len() &&\n-              StackWalk64(image, process, thread, &mut frame, &mut context,\n+              StackWalkEx(image, process, thread, &mut frame, &mut context,\n                           ptr::null_mut(),\n                           ptr::null_mut(),\n                           ptr::null_mut(),\n-                          ptr::null_mut()) == c::TRUE\n+                          ptr::null_mut(),\n+                          0) == c::TRUE\n         {\n-            let addr = frame.AddrPC.Offset;\n-            if addr == frame.AddrReturn.Offset || addr == 0 ||\n-               frame.AddrReturn.Offset == 0 { break }\n+            let addr = (frame.AddrPC.Offset - 1) as *const u8;\n \n             frames[i] = Frame {\n-                symbol_addr: (addr - 1) as *const u8,\n-                exact_position: (addr - 1) as *const u8,\n+                symbol_addr: addr,\n+                exact_position: addr,\n+                inline_context: frame.InlineFrameContext,\n             };\n             i += 1;\n         }\n@@ -111,14 +110,14 @@ type SymInitializeFn =\n type SymCleanupFn =\n     unsafe extern \"system\" fn(c::HANDLE) -> c::BOOL;\n \n-type StackWalk64Fn =\n+type StackWalkExFn =\n     unsafe extern \"system\" fn(c::DWORD, c::HANDLE, c::HANDLE,\n-                              *mut c::STACKFRAME64, *mut c::CONTEXT,\n+                              *mut c::STACKFRAME_EX, *mut c::CONTEXT,\n                               *mut c_void, *mut c_void,\n-                              *mut c_void, *mut c_void) -> c::BOOL;\n+                              *mut c_void, *mut c_void, c::DWORD) -> c::BOOL;\n \n #[cfg(target_arch = \"x86\")]\n-fn init_frame(frame: &mut c::STACKFRAME64,\n+fn init_frame(frame: &mut c::STACKFRAME_EX,\n               ctx: &c::CONTEXT) -> c::DWORD {\n     frame.AddrPC.Offset = ctx.Eip as u64;\n     frame.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;\n@@ -130,7 +129,7 @@ fn init_frame(frame: &mut c::STACKFRAME64,\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-fn init_frame(frame: &mut c::STACKFRAME64,\n+fn init_frame(frame: &mut c::STACKFRAME_EX,\n               ctx: &c::CONTEXT) -> c::DWORD {\n     frame.AddrPC.Offset = ctx.Rip as u64;\n     frame.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;"}, {"sha": "967df1c8a2de9bddabf36dd4cbcc7eecb19ba674", "filename": "src/libstd/sys/windows/backtrace/printing/msvc.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -16,20 +16,22 @@ use sys::c;\n use sys::backtrace::BacktraceContext;\n use sys_common::backtrace::Frame;\n \n-type SymFromAddrFn =\n-    unsafe extern \"system\" fn(c::HANDLE, u64, *mut u64,\n-                              *mut c::SYMBOL_INFO) -> c::BOOL;\n-type SymGetLineFromAddr64Fn =\n-    unsafe extern \"system\" fn(c::HANDLE, u64, *mut u32,\n-                              *mut c::IMAGEHLP_LINE64) -> c::BOOL;\n+type SymFromInlineContextFn =\n+    unsafe extern \"system\" fn(c::HANDLE, u64, c::ULONG,\n+                              *mut u64, *mut c::SYMBOL_INFO) -> c::BOOL;\n+type SymGetLineFromInlineContextFn =\n+    unsafe extern \"system\" fn(c::HANDLE, u64, c::ULONG,\n+                              u64, *mut c::DWORD, *mut c::IMAGEHLP_LINE64) -> c::BOOL;\n \n /// Converts a pointer to symbol to its string value.\n pub fn resolve_symname<F>(frame: Frame,\n                           callback: F,\n                           context: &BacktraceContext) -> io::Result<()>\n     where F: FnOnce(Option<&str>) -> io::Result<()>\n {\n-    let SymFromAddr = sym!(&context.dbghelp, \"SymFromAddr\", SymFromAddrFn)?;\n+    let SymFromInlineContext = sym!(&context.dbghelp,\n+                                    \"SymFromInlineContext\",\n+                                    SymFromInlineContextFn)?;\n \n     unsafe {\n         let mut info: c::SYMBOL_INFO = mem::zeroed();\n@@ -40,12 +42,22 @@ pub fn resolve_symname<F>(frame: Frame,\n         info.SizeOfStruct = 88;\n \n         let mut displacement = 0u64;\n-        let ret = SymFromAddr(context.handle,\n-                              frame.symbol_addr as u64,\n-                              &mut displacement,\n-                              &mut info);\n-\n-        let symname = if ret == c::TRUE {\n+        let ret = SymFromInlineContext(context.handle,\n+                                       frame.symbol_addr as u64,\n+                                       frame.inline_context,\n+                                       &mut displacement,\n+                                       &mut info);\n+        let valid_range = if ret == c::TRUE &&\n+                             frame.symbol_addr as usize >= info.Address as usize {\n+            if info.Size != 0 {\n+                (frame.symbol_addr as usize) < info.Address as usize + info.Size as usize\n+            } else {\n+                true\n+            }\n+        } else {\n+            false\n+        };\n+        let symname = if valid_range {\n             let ptr = info.Name.as_ptr() as *const c_char;\n             CStr::from_ptr(ptr).to_str().ok()\n         } else {\n@@ -61,19 +73,21 @@ pub fn foreach_symbol_fileline<F>(frame: Frame,\n     -> io::Result<bool>\n     where F: FnMut(&[u8], u32) -> io::Result<()>\n {\n-    let SymGetLineFromAddr64 = sym!(&context.dbghelp,\n-                                    \"SymGetLineFromAddr64\",\n-                                    SymGetLineFromAddr64Fn)?;\n+    let SymGetLineFromInlineContext = sym!(&context.dbghelp,\n+                                    \"SymGetLineFromInlineContext\",\n+                                    SymGetLineFromInlineContextFn)?;\n \n     unsafe {\n         let mut line: c::IMAGEHLP_LINE64 = mem::zeroed();\n         line.SizeOfStruct = ::mem::size_of::<c::IMAGEHLP_LINE64>() as u32;\n \n         let mut displacement = 0u32;\n-        let ret = SymGetLineFromAddr64(context.handle,\n-                                       frame.exact_position as u64,\n-                                       &mut displacement,\n-                                       &mut line);\n+        let ret = SymGetLineFromInlineContext(context.handle,\n+                                              frame.exact_position as u64,\n+                                              frame.inline_context,\n+                                              0,\n+                                              &mut displacement,\n+                                              &mut line);\n         if ret == c::TRUE {\n             let name = CStr::from_ptr(line.Filename).to_bytes();\n             f(name, line.LineNumber as u32)?;"}, {"sha": "6d929f21365cf65815baba420c586f2e7f32db89", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -619,7 +619,7 @@ pub struct ADDRESS64 {\n \n #[repr(C)]\n #[cfg(feature = \"backtrace\")]\n-pub struct STACKFRAME64 {\n+pub struct STACKFRAME_EX {\n     pub AddrPC: ADDRESS64,\n     pub AddrReturn: ADDRESS64,\n     pub AddrFrame: ADDRESS64,\n@@ -631,6 +631,8 @@ pub struct STACKFRAME64 {\n     pub Virtual: BOOL,\n     pub Reserved: [u64; 3],\n     pub KdHelp: KDHELP64,\n+    pub StackFrameSize: DWORD,\n+    pub InlineFrameContext: DWORD,\n }\n \n #[repr(C)]"}, {"sha": "a364a0392b39957d28c139b1e4a42c6c427f0360", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -41,6 +41,8 @@ pub struct Frame {\n     pub exact_position: *const u8,\n     /// Address of the enclosing function.\n     pub symbol_addr: *const u8,\n+    /// Which inlined function is this frame referring to\n+    pub inline_context: u32,\n }\n \n /// Max number of frames to print.\n@@ -64,6 +66,7 @@ fn _print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n     let mut frames = [Frame {\n         exact_position: ptr::null(),\n         symbol_addr: ptr::null(),\n+        inline_context: 0,\n     }; MAX_NB_FRAMES];\n     let (nb_frames, context) = unwind_backtrace(&mut frames)?;\n     let (skipped_before, skipped_after) ="}, {"sha": "cb7ef7e30062ccefc540bfd47d9da3ea45b83d15", "filename": "src/test/run-pass/backtrace-debuginfo-aux.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -15,9 +15,7 @@ pub fn callback<F>(f: F) where F: FnOnce((&'static str, u32)) {\n     f((file!(), line!()))\n }\n \n-// LLVM does not yet output the required debug info to support showing inlined\n-// function calls in backtraces when targeting MSVC, so disable inlining in\n-// this case.\n+// We emit the wrong location for the caller here when inlined on MSVC\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]\n pub fn callback_inlined<F>(f: F) where F: FnOnce((&'static str, u32)) {"}, {"sha": "e8b5f3490e50e290ce6f2ec0d5fd2e9c28cda996", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634f8cc06a88eb978c5e52390014740c4bab1e33/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=634f8cc06a88eb978c5e52390014740c4bab1e33", "patch": "@@ -62,10 +62,7 @@ type Pos = (&'static str, u32);\n // this goes to stdout and each line has to be occurred\n // in the following backtrace to stderr with a correct order.\n fn dump_filelines(filelines: &[Pos]) {\n-    // Skip top frame for MSVC, because it sees the macro rather than\n-    // the containing function.\n-    let skip = if cfg!(target_env = \"msvc\") {1} else {0};\n-    for &(file, line) in filelines.iter().rev().skip(skip) {\n+    for &(file, line) in filelines.iter().rev() {\n         // extract a basename\n         let basename = file.split(&['/', '\\\\'][..]).last().unwrap();\n         println!(\"{}:{}\", basename, line);\n@@ -84,9 +81,7 @@ fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     });\n }\n \n-// LLVM does not yet output the required debug info to support showing inlined\n-// function calls in backtraces when targeting MSVC, so disable inlining in\n-// this case.\n+// We emit the wrong location for the caller here when inlined on MSVC\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]\n fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n@@ -137,9 +132,6 @@ fn run_test(me: &str) {\n     use std::str;\n     use std::process::Command;\n \n-    let mut template = Command::new(me);\n-    template.env(\"RUST_BACKTRACE\", \"full\");\n-\n     let mut i = 0;\n     loop {\n         let out = Command::new(me)"}]}