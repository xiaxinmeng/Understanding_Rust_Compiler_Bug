{"sha": "1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTliNDhlMDIwMjc5NmQ3ZGVjOGFlMDljZmIyMTEyYzdiNDdlYmQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-20T18:17:45Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-30T18:04:37Z"}, "message": "Correct comments about untracked accesses.", "tree": {"sha": "a297e5b8388e7cfd67f500081e840927c14f5b95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a297e5b8388e7cfd67f500081e840927c14f5b95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "html_url": "https://github.com/rust-lang/rust/commit/1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e5e228066f8e307bc5680ed62c11bb6b692411", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e5e228066f8e307bc5680ed62c11bb6b692411", "html_url": "https://github.com/rust-lang/rust/commit/f0e5e228066f8e307bc5680ed62c11bb6b692411"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "8341afb53627cba8c7462aebd31dbb8c5ab7cd0e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "patch": "@@ -445,7 +445,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_def_path_table(&mut self) {\n-        let table = self.tcx.hir().definitions().def_path_table();\n+        let table = self.tcx.resolutions(()).definitions.def_path_table();\n         if self.is_proc_macro {\n             for def_index in std::iter::once(CRATE_DEF_INDEX)\n                 .chain(self.tcx.hir().krate().proc_macros.iter().map(|p| p.owner.local_def_index))\n@@ -1062,7 +1062,7 @@ impl EncodeContext<'a, 'tcx> {\n \n         let data = ModData {\n             reexports,\n-            expansion: tcx.hir().definitions().expansion_that_defined(local_def_id),\n+            expansion: tcx.resolutions(()).definitions.expansion_that_defined(local_def_id),\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n@@ -1754,7 +1754,7 @@ impl EncodeContext<'a, 'tcx> {\n             .map(|(trait_def_id, mut impls)| {\n                 // Bring everything into deterministic order for hashing\n                 impls.sort_by_cached_key(|&(index, _)| {\n-                    tcx.hir().definitions().def_path_hash(LocalDefId { local_def_index: index })\n+                    tcx.hir().def_path_hash(LocalDefId { local_def_index: index })\n                 });\n \n                 TraitImpls {"}, {"sha": "eb2715503be6ec63dbc714d85900883d4f99e913", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefKey, DefPath, Definitions};\n+use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -154,14 +154,8 @@ impl<'hir> Map<'hir> {\n         self.tcx.hir_crate(())\n     }\n \n-    #[inline]\n-    pub fn definitions(&self) -> &'hir Definitions {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n-        &self.tcx.untracked_resolutions.definitions\n-    }\n-\n     pub fn def_key(&self, def_id: LocalDefId) -> DefKey {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n+        // Accessing the DefKey is ok, since it is part of DefPathHash.\n         self.tcx.untracked_resolutions.definitions.def_key(def_id)\n     }\n \n@@ -170,10 +164,16 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn def_path(&self, def_id: LocalDefId) -> DefPath {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n+        // Accessing the DefPath is ok, since it is part of DefPathHash.\n         self.tcx.untracked_resolutions.definitions.def_path(def_id)\n     }\n \n+    #[inline]\n+    pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {\n+        // Accessing the DefPathHash is ok, it is incr. comp. stable.\n+        self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)\n+    }\n+\n     #[inline]\n     pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {\n         self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n@@ -187,18 +187,25 @@ impl<'hir> Map<'hir> {\n \n     #[inline]\n     pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n+        // Create a dependency to the owner to ensure the query gets re-executed when the amount of\n+        // children changes.\n+        self.tcx.ensure().hir_owner_nodes(hir_id.owner);\n         self.tcx.untracked_resolutions.definitions.opt_hir_id_to_local_def_id(hir_id)\n     }\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n-        self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)\n+        let ret = self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id);\n+        // Create a dependency to the owner to ensure the query gets re-executed when the amount of\n+        // children changes.\n+        self.tcx.ensure().hir_owner_nodes(ret.owner);\n+        ret\n     }\n \n     pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n+        // Create a dependency to the crate to be sure we reexcute this when the amount of\n+        // definitions change.\n+        self.tcx.ensure().hir_crate(());\n         self.tcx.untracked_resolutions.definitions.iter_local_def_id()\n     }\n "}, {"sha": "6dd6c1630a80f93740391c754699ab378e50cccf", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "patch": "@@ -1211,9 +1211,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n+        // Accessing the DefKey is ok, since it is part of DefPathHash.\n         if let Some(id) = id.as_local() {\n-            self.hir().def_key(id)\n+            self.untracked_resolutions.definitions.def_key(id)\n         } else {\n             self.untracked_resolutions.cstore.def_key(id)\n         }\n@@ -1225,17 +1225,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Note that if `id` is not local to this crate, the result will\n     ///  be a non-local `DefPath`.\n     pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n+        // Accessing the DefPath is ok, since it is part of DefPathHash.\n         if let Some(id) = id.as_local() {\n-            self.hir().def_path(id)\n+            self.untracked_resolutions.definitions.def_path(id)\n         } else {\n             self.untracked_resolutions.cstore.def_path(id)\n         }\n     }\n \n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {\n-        // Accessing the definitions is ok, since all its contents are tracked by the query system.\n+        // Accessing the DefPathHash is ok, it is incr. comp. stable.\n         if let Some(def_id) = def_id.as_local() {\n             self.untracked_resolutions.definitions.def_path_hash(def_id)\n         } else {"}, {"sha": "81325021ad492c1e304e527ce413f57b59077a9b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "patch": "@@ -1867,7 +1867,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         match scope.as_local() {\n             // Parsing and expansion aren't incremental, so we don't\n             // need to go through a query for the same-crate case.\n-            Some(scope) => self.hir().definitions().expansion_that_defined(scope),\n+            Some(scope) => self.resolutions(()).definitions.expansion_that_defined(scope),\n             None => self.expn_that_defined(scope),\n         }\n     }\n@@ -1887,7 +1887,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             match ident.span.normalize_to_macros_2_0_and_adjust(self.expansion_that_defined(scope))\n             {\n                 Some(actual_expansion) => {\n-                    self.hir().definitions().parent_module_of_macro_def(actual_expansion)\n+                    self.resolutions(()).definitions.parent_module_of_macro_def(actual_expansion)\n                 }\n                 None => self.parent_module(block).to_def_id(),\n             };"}, {"sha": "fa48df3ed45c63e2ba1fe338de8e8f2dae996155", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1119b48e0202796d7dec8ae09cfb2112c7b47ebd/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=1119b48e0202796d7dec8ae09cfb2112c7b47ebd", "patch": "@@ -108,7 +108,7 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n         queries.iter().filter(|q| q.local_def_id_keys.is_some()).collect();\n     def_id_density.sort_by_key(|q| q.local_def_id_keys.unwrap());\n     eprintln!(\"\\nLocal DefId density:\");\n-    let total = tcx.hir().definitions().def_index_count() as f64;\n+    let total = tcx.resolutions(()).definitions.def_index_count() as f64;\n     for q in def_id_density.iter().rev() {\n         let local = q.local_def_id_keys.unwrap();\n         eprintln!(\"   {} - {} = ({}%)\", q.name, local, (local as f64 * 100.0) / total);"}]}