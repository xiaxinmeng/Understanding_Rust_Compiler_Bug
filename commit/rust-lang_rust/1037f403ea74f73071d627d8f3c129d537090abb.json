{"sha": "1037f403ea74f73071d627d8f3c129d537090abb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzdmNDAzZWE3NGY3MzA3MWQ2MjdkOGYzYzEyOWQ1MzcwOTBhYmI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-24T15:33:25Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-08T08:59:08Z"}, "message": "Move `unwrap_fn` and `unwrap_memory` to `GlobalAlloc`", "tree": {"sha": "fae3dc860a0666139cbd2933ef7c9579a28acafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae3dc860a0666139cbd2933ef7c9579a28acafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1037f403ea74f73071d627d8f3c129d537090abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1037f403ea74f73071d627d8f3c129d537090abb", "html_url": "https://github.com/rust-lang/rust/commit/1037f403ea74f73071d627d8f3c129d537090abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1037f403ea74f73071d627d8f3c129d537090abb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ae8f32865b47524c22294273bca665607bb1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ae8f32865b47524c22294273bca665607bb1c9", "html_url": "https://github.com/rust-lang/rust/commit/38ae8f32865b47524c22294273bca665607bb1c9"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "b17a77e0f6fa79d8edb13303a16243b45c5ed53b", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=1037f403ea74f73071d627d8f3c129d537090abb", "patch": "@@ -42,6 +42,7 @@\n #![feature(or_patterns)]\n #![feature(range_is_empty)]\n #![feature(specialization)]\n+#![feature(track_caller)]\n #![feature(trusted_len)]\n #![feature(vec_remove_item)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "7cec2f9a2c7e1c43e77bd759826d605d63132853", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=1037f403ea74f73071d627d8f3c129d537090abb", "patch": "@@ -379,6 +379,28 @@ pub enum GlobalAlloc<'tcx> {\n     Memory(&'tcx Allocation),\n }\n \n+impl GlobalAlloc<'tcx> {\n+    /// Panics if the `GlobalAlloc` does not refer to an `GlobalAlloc::Memory`\n+    #[track_caller]\n+    #[inline]\n+    pub fn unwrap_memory(&self) -> &'tcx Allocation {\n+        match *self {\n+            GlobalAlloc::Memory(mem) => mem,\n+            _ => bug!(\"expected memory, got {:?}\", self),\n+        }\n+    }\n+\n+    /// Panics if the `GlobalAlloc` is not `GlobalAlloc::Function`\n+    #[track_caller]\n+    #[inline]\n+    pub fn unwrap_fn(&self) -> Instance<'tcx> {\n+        match *self {\n+            GlobalAlloc::Function(instance) => instance,\n+            _ => bug!(\"expected function, got {:?}\", self),\n+        }\n+    }\n+}\n+\n pub struct AllocMap<'tcx> {\n     /// Maps `AllocId`s to their corresponding allocations.\n     alloc_map: FxHashMap<AllocId, GlobalAlloc<'tcx>>,\n@@ -491,22 +513,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.alloc_map.lock().alloc_map.get(&id).cloned()\n     }\n \n-    /// Panics if the `AllocId` does not refer to an `Allocation`\n-    pub fn unwrap_memory(&self, id: AllocId) -> &'tcx Allocation {\n-        match self.get_global_alloc(id) {\n-            Some(GlobalAlloc::Memory(mem)) => mem,\n-            _ => bug!(\"expected allocation ID {} to point to memory\", id),\n-        }\n-    }\n-\n-    /// Panics if the `AllocId` does not refer to a function\n-    pub fn unwrap_fn(&self, id: AllocId) -> Instance<'tcx> {\n-        match self.get_global_alloc(id) {\n-            Some(GlobalAlloc::Function(instance)) => instance,\n-            _ => bug!(\"expected allocation ID {} to point to a function\", id),\n-        }\n-    }\n-\n     /// Freezes an `AllocId` created with `reserve` by pointing it at an `Allocation`. Trying to\n     /// call this function twice, even with the same `Allocation` will ICE the compiler.\n     pub fn set_alloc_id_memory(&self, id: AllocId, mem: &'tcx Allocation) {"}, {"sha": "e2478cd061bb75731a2e98d7bd9d9f1295977b00", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=1037f403ea74f73071d627d8f3c129d537090abb", "patch": "@@ -956,7 +956,9 @@ pub trait PrettyPrinter<'tcx>:\n             ) => {\n                 let byte_str = self\n                     .tcx()\n-                    .unwrap_memory(ptr.alloc_id)\n+                    .get_global_alloc(ptr.alloc_id)\n+                    .unwrap()\n+                    .unwrap_memory()\n                     .get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n                     .unwrap();\n                 p!(pretty_print_byte_str(byte_str));\n@@ -1019,7 +1021,7 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n-                let instance = self.tcx().unwrap_fn(ptr.alloc_id);\n+                let instance = self.tcx().get_global_alloc(ptr.alloc_id).unwrap().unwrap_fn();\n                 self = self.typed_value(\n                     |this| this.print_value_path(instance.def_id(), instance.substs),\n                     |this| this.print_type(ty),"}, {"sha": "52a692a288ade3786dd67f76d2d58bc4850da4d7", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=1037f403ea74f73071d627d8f3c129d537090abb", "patch": "@@ -549,8 +549,10 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     if a_val == b_val {\n                         Ok(ConstValue::Scalar(a_val))\n                     } else if let ty::FnPtr(_) = a.ty.kind {\n-                        let a_instance = tcx.unwrap_fn(a_val.assert_ptr().alloc_id);\n-                        let b_instance = tcx.unwrap_fn(b_val.assert_ptr().alloc_id);\n+                        let a_instance =\n+                            tcx.get_global_alloc(a_val.assert_ptr().alloc_id).unwrap().unwrap_fn();\n+                        let b_instance =\n+                            tcx.get_global_alloc(b_val.assert_ptr().alloc_id).unwrap().unwrap_fn();\n                         if a_instance == b_instance {\n                             Ok(ConstValue::Scalar(a_val))\n                         } else {"}, {"sha": "821c776ce0ffd8d76070f964e960ae13a1338444", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=1037f403ea74f73071d627d8f3c129d537090abb", "patch": "@@ -130,7 +130,7 @@ pub(super) fn op_to_const<'tcx>(\n \n     let to_const_value = |mplace: MPlaceTy<'_>| match mplace.ptr {\n         Scalar::Ptr(ptr) => {\n-            let alloc = ecx.tcx.unwrap_memory(ptr.alloc_id);\n+            let alloc = ecx.tcx.get_global_alloc(ptr.alloc_id).unwrap().unwrap_memory();\n             ConstValue::ByRef { alloc, offset: ptr.offset }\n         }\n         Scalar::Raw { data, .. } => {\n@@ -154,7 +154,10 @@ pub(super) fn op_to_const<'tcx>(\n             },\n             Immediate::ScalarPair(a, b) => {\n                 let (data, start) = match a.not_undef().unwrap() {\n-                    Scalar::Ptr(ptr) => (ecx.tcx.unwrap_memory(ptr.alloc_id), ptr.offset.bytes()),\n+                    Scalar::Ptr(ptr) => (\n+                        ecx.tcx.get_global_alloc(ptr.alloc_id).unwrap().unwrap_memory(),\n+                        ptr.offset.bytes(),\n+                    ),\n                     Scalar::Raw { .. } => (\n                         ecx.tcx\n                             .intern_const_alloc(Allocation::from_byte_aligned_bytes(b\"\" as &[u8])),\n@@ -200,7 +203,10 @@ fn validate_and_turn_into_const<'tcx>(\n         // whether they become immediates.\n         if is_static || cid.promoted.is_some() {\n             let ptr = mplace.ptr.assert_ptr();\n-            Ok(ConstValue::ByRef { alloc: ecx.tcx.unwrap_memory(ptr.alloc_id), offset: ptr.offset })\n+            Ok(ConstValue::ByRef {\n+                alloc: ecx.tcx.get_global_alloc(ptr.alloc_id).unwrap().unwrap_memory(),\n+                offset: ptr.offset,\n+            })\n         } else {\n             Ok(op_to_const(&ecx, mplace.into()))\n         }"}, {"sha": "de1ca2cc22020506f361a37e4d4b12f519c3ac8b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1037f403ea74f73071d627d8f3c129d537090abb", "patch": "@@ -467,7 +467,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     })?;\n                 // Make sure we use the ID of the resolved memory, not the lazy one!\n                 let id = raw_const.alloc_id;\n-                let allocation = tcx.unwrap_memory(id);\n+                let allocation = tcx.get_global_alloc(id).unwrap().unwrap_memory();\n \n                 (allocation, Some(def_id))\n             }"}, {"sha": "b3061768cce8274f3ba9efa36d0c2b154ec5c5d0", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1037f403ea74f73071d627d8f3c129d537090abb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=1037f403ea74f73071d627d8f3c129d537090abb", "patch": "@@ -286,7 +286,7 @@ impl<'tcx> LiteralExpander<'tcx> {\n             (ConstValue::Scalar(p), x, y) if x == y => {\n                 match p {\n                     Scalar::Ptr(p) => {\n-                        let alloc = self.tcx.unwrap_memory(p.alloc_id);\n+                        let alloc = self.tcx.get_global_alloc(p.alloc_id).unwrap().unwrap_memory();\n                         ConstValue::ByRef { alloc, offset: p.offset }\n                     }\n                     Scalar::Raw { .. } => {\n@@ -305,7 +305,7 @@ impl<'tcx> LiteralExpander<'tcx> {\n             (ConstValue::Scalar(Scalar::Ptr(p)), ty::Array(t, n), ty::Slice(u)) => {\n                 assert_eq!(t, u);\n                 ConstValue::Slice {\n-                    data: self.tcx.unwrap_memory(p.alloc_id),\n+                    data: self.tcx.get_global_alloc(p.alloc_id).unwrap().unwrap_memory(),\n                     start: p.offset.bytes().try_into().unwrap(),\n                     end: n.eval_usize(self.tcx, ty::ParamEnv::empty()).try_into().unwrap(),\n                 }"}]}