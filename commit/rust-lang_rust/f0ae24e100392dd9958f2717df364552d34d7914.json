{"sha": "f0ae24e100392dd9958f2717df364552d34d7914", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYWUyNGUxMDAzOTJkZDk5NThmMjcxN2RmMzY0NTUyZDM0ZDc5MTQ=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-10-27T07:10:41Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-10-27T07:13:11Z"}, "message": "Handle type errors in closure/generator upvar_tys\n\nCo-authored-by: Roxane Fruytier <roxane.fruytier@hotmail.com>", "tree": {"sha": "8f31ae10117218191f3b667a8ebb809ca6042040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f31ae10117218191f3b667a8ebb809ca6042040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0ae24e100392dd9958f2717df364552d34d7914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ae24e100392dd9958f2717df364552d34d7914", "html_url": "https://github.com/rust-lang/rust/commit/f0ae24e100392dd9958f2717df364552d34d7914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0ae24e100392dd9958f2717df364552d34d7914/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "html_url": "https://github.com/rust-lang/rust/commit/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb"}], "stats": {"total": 81, "additions": 74, "deletions": 7}, "files": [{"sha": "6f925b505334f5efc9239e41190753f7d8868b31", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae24e100392dd9958f2717df364552d34d7914/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae24e100392dd9958f2717df364552d34d7914/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f0ae24e100392dd9958f2717df364552d34d7914", "patch": "@@ -3883,6 +3883,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-ir\",\n+ \"either\",\n  \"measureme 9.0.0\",\n  \"polonius-engine\",\n  \"rustc-rayon-core\","}, {"sha": "0d5fbf16a581084970d9267056bad2ebd6eb79f4", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae24e100392dd9958f2717df364552d34d7914/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae24e100392dd9958f2717df364552d34d7914/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=f0ae24e100392dd9958f2717df364552d34d7914", "patch": "@@ -8,6 +8,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n+either = \"1.5.0\"\n rustc_arena = { path = \"../rustc_arena\" }\n bitflags = \"1.2.1\"\n tracing = \"0.1\""}, {"sha": "96a8902a76c999721baf9e60ce633c236d8d3382", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae24e100392dd9958f2717df364552d34d7914/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae24e100392dd9958f2717df364552d34d7914/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f0ae24e100392dd9958f2717df364552d34d7914", "patch": "@@ -5,6 +5,8 @@\n use self::InferTy::*;\n use self::TyKind::*;\n \n+use either::Either;\n+\n use crate::infer::canonical::Canonical;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{\n@@ -388,9 +390,17 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.split().parent_substs\n     }\n \n+    /// Returns an iterator over the list of types of captured paths by the closure.\n+    /// In case there was a type error in figuring out the types of the captured path, an\n+    /// empty iterator is returned.\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        self.tupled_upvars_ty().tuple_fields()\n+        match self.tupled_upvars_ty().kind() {\n+            TyKind::Error(_) => Either::Left(std::iter::empty()),\n+            TyKind::Tuple(..) => Either::Right(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n+            ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n+        }\n     }\n \n     /// Returns the tuple type representing the upvars for this closure.\n@@ -515,9 +525,17 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         self.split().witness.expect_ty()\n     }\n \n+    /// Returns an iterator over the list of types of captured paths by the generator.\n+    /// In case there was a type error in figuring out the types of the captured path, an\n+    /// empty iterator is returned.\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        self.tupled_upvars_ty().tuple_fields()\n+        match self.tupled_upvars_ty().kind() {\n+            TyKind::Error(_) => Either::Left(std::iter::empty()),\n+            TyKind::Tuple(..) => Either::Right(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n+            ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n+        }\n     }\n \n     /// Returns the tuple type representing the upvars for this generator.\n@@ -660,13 +678,15 @@ pub enum UpvarSubsts<'tcx> {\n }\n \n impl<'tcx> UpvarSubsts<'tcx> {\n+    /// Returns an iterator over the list of types of captured paths by the closure/generator.\n+    /// In case there was a type error in figuring out the types of the captured path, an\n+    /// empty iterator is returned.\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        let tupled_upvars_ty = match self {\n-            UpvarSubsts::Closure(substs) => substs.as_closure().split().tupled_upvars_ty,\n-            UpvarSubsts::Generator(substs) => substs.as_generator().split().tupled_upvars_ty,\n-        };\n-        tupled_upvars_ty.expect_ty().tuple_fields()\n+        match self {\n+            UpvarSubsts::Closure(substs) => Either::Left(substs.as_closure().upvar_tys()),\n+            UpvarSubsts::Generator(substs) => Either::Right(substs.as_generator().upvar_tys()),\n+        }\n     }\n \n     #[inline]"}, {"sha": "515b3bc09f0763fa46b5832b69ae4c4350cca432", "filename": "src/test/ui/issues/issue-77993-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs?ref=f0ae24e100392dd9958f2717df364552d34d7914", "patch": "@@ -0,0 +1,12 @@\n+#[derive(Clone)]\n+struct InGroup<F> {\n+    it: It,\n+    //~^ ERROR cannot find type `It` in this scope\n+    f: F,\n+}\n+fn dates_in_year() -> impl Clone {\n+    InGroup { f: |d| d }\n+    //~^ ERROR missing field `it` in initializer of `InGroup<_>`\n+}\n+\n+fn main() {}"}, {"sha": "3dc78ba6f8563e13369181e55b4dcb3aed1ad861", "filename": "src/test/ui/issues/issue-77993-1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr?ref=f0ae24e100392dd9958f2717df364552d34d7914", "patch": "@@ -0,0 +1,16 @@\n+error[E0412]: cannot find type `It` in this scope\n+  --> $DIR/issue-77993-1.rs:3:9\n+   |\n+LL |     it: It,\n+   |         ^^ not found in this scope\n+\n+error[E0063]: missing field `it` in initializer of `InGroup<_>`\n+  --> $DIR/issue-77993-1.rs:8:5\n+   |\n+LL |     InGroup { f: |d| d }\n+   |     ^^^^^^^ missing `it`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0063, E0412.\n+For more information about an error, try `rustc --explain E0063`."}, {"sha": "4d554a0a1d0e19ec2fa4382ddbf2f6363b0c702f", "filename": "src/test/ui/issues/issue-77993-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.rs?ref=f0ae24e100392dd9958f2717df364552d34d7914", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+async fn test() -> Result<(), Box<dyn std::error::Error>> {\n+    macro!();\n+    //~^ ERROR expected identifier, found `!`\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "64b378f83fc03e02b4741b5892b51518729c8305", "filename": "src/test/ui/issues/issue-77993-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae24e100392dd9958f2717df364552d34d7914/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.stderr?ref=f0ae24e100392dd9958f2717df364552d34d7914", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `!`\n+  --> $DIR/issue-77993-2.rs:4:10\n+   |\n+LL |     macro!();\n+   |          ^ expected identifier\n+\n+error: aborting due to previous error\n+"}]}