{"sha": "0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjE2ZTc3Y2E1YTBiOWY5ZGZhYWFiNGRmZTI1M2Q3YTljYzVjY2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T21:01:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T21:01:03Z"}, "message": "Add \"mutable?\" to _vec in the standard library; fix callers", "tree": {"sha": "dec1d851a353d9992cf58ceaf00e7099de38ad48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec1d851a353d9992cf58ceaf00e7099de38ad48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "html_url": "https://github.com/rust-lang/rust/commit/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "368eb4bab615feb99e203eecdcec6d0be02f5b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/368eb4bab615feb99e203eecdcec6d0be02f5b42", "html_url": "https://github.com/rust-lang/rust/commit/368eb4bab615feb99e203eecdcec6d0be02f5b42"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "1ddb07e3ea4287edb35419b7c3c5b90e78f31e6b", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "patch": "@@ -35,7 +35,7 @@ fn alloc_mut[T](uint n_elts) -> vec[mutable T] {\n     ret rustrt.vec_alloc_mut[vec[mutable T], T](n_elts);\n }\n \n-fn refcount[T](vec[T] v) -> uint {\n+fn refcount[T](vec[mutable? T] v) -> uint {\n     auto r = rustrt.refcount[T](v);\n     if (r == dbg.const_refcount) {\n         ret r;\n@@ -94,29 +94,29 @@ fn init_elt_mut[T](&T t, uint n_elts) -> vec[mutable T] {\n     ret v;\n }\n \n-fn buf[T](vec[T] v) -> vbuf {\n+fn buf[T](vec[mutable? T] v) -> vbuf {\n     ret rustrt.vec_buf[T](v, 0u);\n }\n \n-fn len[T](vec[T] v) -> uint {\n+fn len[T](vec[mutable? T] v) -> uint {\n     ret rustrt.vec_len[T](v);\n }\n \n-fn len_set[T](vec[T] v, uint n) {\n+fn len_set[T](vec[mutable? T] v, uint n) {\n     rustrt.vec_len_set[T](v, n);\n }\n \n-fn buf_off[T](vec[T] v, uint offset) -> vbuf {\n+fn buf_off[T](vec[mutable? T] v, uint offset) -> vbuf {\n     check (offset < len[T](v));\n     ret rustrt.vec_buf[T](v, offset);\n }\n \n-fn print_debug_info[T](vec[T] v) {\n+fn print_debug_info[T](vec[mutable? T] v) {\n     rustrt.vec_print_debug_info[T](v);\n }\n \n // Returns elements from [start..end) from v.\n-fn slice[T](vec[T] v, uint start, uint end) -> vec[T] {\n+fn slice[T](vec[mutable? T] v, uint start, uint end) -> vec[T] {\n     check (start <= end);\n     check (end <= len[T](v));\n     auto result = alloc[T](end - start);\n@@ -128,15 +128,15 @@ fn slice[T](vec[T] v, uint start, uint end) -> vec[T] {\n     ret result;\n }\n \n-fn shift[T](&mutable vec[T] v) -> T {\n+fn shift[T](&mutable vec[mutable? T] v) -> T {\n     auto ln = len[T](v);\n     check(ln > 0u);\n     auto e = v.(0);\n     v = slice[T](v, 1u, ln);\n     ret e;\n }\n \n-fn pop[T](&mutable vec[T] v) -> T {\n+fn pop[T](&mutable vec[mutable? T] v) -> T {\n     auto ln = len[T](v);\n     check(ln > 0u);\n     ln -= 1u;\n@@ -145,34 +145,35 @@ fn pop[T](&mutable vec[T] v) -> T {\n     ret e;\n }\n \n-fn push[T](&mutable vec[T] v, &T t) {\n+fn push[T](&mutable vec[mutable? T] v, &T t) {\n     v += vec(t);\n }\n \n-fn unshift[T](&mutable vec[T] v, &T t) {\n+fn unshift[T](&mutable vec[mutable? T] v, &T t) {\n     auto res = alloc[T](len[T](v) + 1u);\n     res += vec(t);\n     res += v;\n     v = res;\n }\n \n-fn grow[T](&mutable vec[T] v, int n, &T initval) {\n+fn grow[T](&mutable vec[mutable? T] v, int n, &T initval) {\n     let int i = n;\n     while (i > 0) {\n         i -= 1;\n         v += vec(initval);\n     }\n }\n \n-fn map[T, U](&option.operator[T,U] f, &vec[T] v) -> vec[U] {\n+fn map[T, U](&option.operator[T,U] f, &vec[mutable? T] v) -> vec[U] {\n     let vec[U] u = alloc[U](len[T](v));\n     for (T ve in v) {\n         u += vec(f(ve));\n     }\n     ret u;\n }\n \n-fn map2[T,U,V](&operator2[T,U,V] f, &vec[T] v0, &vec[U] v1) -> vec[V] {\n+fn map2[T,U,V](&operator2[T,U,V] f, &vec[mutable? T] v0, &vec[mutable? U] v1)\n+        -> vec[V] {\n     auto v0_len = len[T](v0);\n     if (v0_len != len[U](v1)) {\n         fail;"}, {"sha": "2029ef5295274c3c4a4708777cac116de2a821c4", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "patch": "@@ -21,7 +21,7 @@ fn create(uint nbits, bool init) -> t {\n         elt = 0u;\n     }\n \n-    auto storage = _vec.init_elt[mutable uint](elt, nbits / uint_bits() + 1u);\n+    auto storage = _vec.init_elt_mut[uint](elt, nbits / uint_bits() + 1u);\n     ret rec(storage = storage, nbits = nbits);\n }\n "}, {"sha": "61d5ccf637a730f6d5c52f8294a7afa2811e34aa", "filename": "src/lib/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "patch": "@@ -29,7 +29,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     }\n \n     fn make_buckets[K, V](uint nbkts) -> vec[mutable bucket[K, V]] {\n-        ret _vec.init_elt[mutable bucket[K, V]](nil[K, V], nbkts);\n+        ret _vec.init_elt_mut[bucket[K, V]](nil[K, V], nbkts);\n     }\n \n     // Derive two hash functions from the one given by taking the upper"}, {"sha": "b2294a3c14aabf18688e36a0c2cd1346cab3dddc", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=0cf16e77ca5a0b9f9dfaaab4dfe253d7a9cc5cce", "patch": "@@ -73,7 +73,7 @@ fn mk_sha1() -> sha1 {\n                      0xCA62C1D6u32);\n \n         let int t; // Loop counter\n-        let vec[mutable u32] w = _vec.init_elt[mutable u32](0u32, 80u);\n+        let vec[mutable u32] w = _vec.init_elt_mut[u32](0u32, 80u);\n \n         // Initialize the first 16 words of the vector w\n         t = 0;\n@@ -261,10 +261,10 @@ fn mk_sha1() -> sha1 {\n         }\n     }\n \n-    auto st = rec(h = _vec.init_elt[mutable u32](0u32, digest_buf_len),\n+    auto st = rec(h = _vec.init_elt_mut[u32](0u32, digest_buf_len),\n                   mutable len_low = 0u32,\n                   mutable len_high = 0u32,\n-                  msg_block = _vec.init_elt[mutable u8](0u8, msg_block_len),\n+                  msg_block = _vec.init_elt_mut[u8](0u8, msg_block_len),\n                   mutable msg_block_idx = 0u,\n                   mutable computed = false);\n     auto sh = sha1(st);"}]}