{"sha": "9dc1826cfaa75983a83f9eb7f788067d5dedf5a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzE4MjZjZmFhNzU5ODNhODNmOWViN2Y3ODgwNjdkNWRlZGY1YTc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:19:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:37:58Z"}, "message": "Fix various names, e.g. Iterator not resolving in core prelude\n\nBasically, `Iterator` is re-exported via several steps, which happened to not be\nresolved yet when we got to the prelude import, but since the name resolved to\nthe reexport from `core::iter` (just to no actual items), we gave up trying to\nresolve it further.\n\nMaybe part of the problem is that we can have\n`PartialResolvedImport::Unresolved` or `PartialResolvedImport::Indeterminate`\nwith `None` in all namespaces, and handle them differently.\n\nFixes #2683.", "tree": {"sha": "c92f033b4b97ee393dafb3a83537f47c4c82d435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c92f033b4b97ee393dafb3a83537f47c4c82d435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7", "html_url": "https://github.com/rust-lang/rust/commit/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e09a96f82d4ba15de2c8b8fbbe40fd78e21c185", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e09a96f82d4ba15de2c8b8fbbe40fd78e21c185", "html_url": "https://github.com/rust-lang/rust/commit/2e09a96f82d4ba15de2c8b8fbbe40fd78e21c185"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "7499dff3131d9f58fb41b67f711e1d05515d92ff", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=9dc1826cfaa75983a83f9eb7f788067d5dedf5a7", "patch": "@@ -328,7 +328,7 @@ where\n             );\n \n             let def = res.resolved_def;\n-            if res.reached_fixedpoint == ReachedFixedPoint::No {\n+            if res.reached_fixedpoint == ReachedFixedPoint::No || def.is_none() {\n                 return PartialResolvedImport::Unresolved;\n             }\n "}, {"sha": "22103ab2908083b4be1c40dec0e5a684f29e51ea", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=9dc1826cfaa75983a83f9eb7f788067d5dedf5a7", "patch": "@@ -52,6 +52,51 @@ fn nested_module_resolution() {\n     \"###);\n }\n \n+#[test]\n+fn nested_module_resolution_2() {\n+    let map = def_map(\n+        \"\n+        //- /lib.rs\n+        mod prelude;\n+        mod iter;\n+\n+        //- /prelude.rs\n+        pub use crate::iter::Iterator;\n+\n+        //- /iter.rs\n+        pub use self::traits::Iterator;\n+        mod traits;\n+\n+        //- /iter/traits.rs\n+        pub use self::iterator::Iterator;\n+        mod iterator;\n+\n+        //- /iter/traits/iterator.rs\n+        pub trait Iterator;\n+        \",\n+    );\n+\n+    assert_snapshot!(map, @r###\"\n+    crate\n+    iter: t\n+    prelude: t\n+    \n+    crate::iter\n+    Iterator: t\n+    traits: t\n+    \n+    crate::iter::traits\n+    Iterator: t\n+    iterator: t\n+    \n+    crate::iter::traits::iterator\n+    Iterator: t\n+    \n+    crate::prelude\n+    Iterator: t\n+    \"###);\n+}\n+\n #[test]\n fn module_resolution_works_for_non_standard_filenames() {\n     let map = def_map("}, {"sha": "aa948dcbfbba6e4d57e505379b6987390cef8b01", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc1826cfaa75983a83f9eb7f788067d5dedf5a7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=9dc1826cfaa75983a83f9eb7f788067d5dedf5a7", "patch": "@@ -2,6 +2,8 @@ use insta::assert_snapshot;\n use test_utils::covers;\n \n use super::infer;\n+use crate::test_db::TestDB;\n+use ra_db::fixture::WithFixture;\n \n #[test]\n fn bug_484() {\n@@ -399,3 +401,55 @@ fn test() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn issue_2683_chars_impl() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+fn test() {\n+    let chars: std::str::Chars<'_>;\n+    (chars.next(), chars.nth(1))<|>;\n+}\n+\n+//- /std.rs crate:std\n+#[prelude_import]\n+use prelude::*;\n+\n+pub mod prelude {\n+    pub use crate::iter::Iterator;\n+    pub use crate::option::Option;\n+}\n+\n+pub mod iter {\n+    pub use self::traits::Iterator;\n+    pub mod traits {\n+        pub use self::iterator::Iterator;\n+\n+        pub mod iterator {\n+            pub trait Iterator {\n+                type Item;\n+                fn next(&mut self) -> Option<Self::Item>;\n+                fn nth(&mut self, n: usize) -> Option<Self::Item> {}\n+            }\n+        }\n+    }\n+}\n+\n+pub mod option {\n+    pub enum Option<T> {}\n+}\n+\n+pub mod str {\n+    pub struct Chars<'a> {}\n+    impl<'a> Iterator for Chars<'a> {\n+        type Item = char;\n+        fn next(&mut self) -> Option<char> {}\n+    }\n+}\n+\"#,\n+    );\n+\n+    // should be Option<char>, but currently not because of Chalk ambiguity problem\n+    assert_eq!(\"(Option<{unknown}>, Option<{unknown}>)\", super::type_at_pos(&db, pos));\n+}"}]}