{"sha": "6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZmU3MjViYmNiY2JhZDRjYWY0YjEwZTU0NjY4N2MxM2MxZDJhYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T18:18:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T18:18:32Z"}, "message": "Auto merge of #5520 - matthiaskrgr:rustup_44, r=flip1995,phansch\n\nrustup https://github.com/rust-lang/rust/pull/71215/\n\nThere's currently an crash in `ui/new_without_default.rs` that I need to figure out how to avoid.\n\nchangelog: none", "tree": {"sha": "d6e6b16d2c3fea58dd90fa610e4b55ded11f06c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e6b16d2c3fea58dd90fa610e4b55ded11f06c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "html_url": "https://github.com/rust-lang/rust/commit/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c94352d4bbb055dce656da21d86aa1bf672562", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c94352d4bbb055dce656da21d86aa1bf672562", "html_url": "https://github.com/rust-lang/rust/commit/02c94352d4bbb055dce656da21d86aa1bf672562"}, {"sha": "dda1c8d8af92237a9db9f67e2c210ffca2f3f8e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda1c8d8af92237a9db9f67e2c210ffca2f3f8e0", "html_url": "https://github.com/rust-lang/rust/commit/dda1c8d8af92237a9db9f67e2c210ffca2f3f8e0"}], "stats": {"total": 262, "additions": 212, "deletions": 50}, "files": [{"sha": "3ba72e84fa827a7dace8698873b845b815fe1ae6", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n         hir_id: HirId,\n     ) {\n         let def_id = cx.tcx.hir().local_def_id(hir_id);\n-        if !cx.tcx.has_attr(def_id, sym!(test)) {\n+        if !cx.tcx.has_attr(def_id.to_def_id(), sym!(test)) {\n             self.check(cx, kind, decl, body, span);\n         }\n     }"}, {"sha": "3cbb8fa72f74f70f9cb9fcb6b8e25996a8d58814", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -160,16 +160,20 @@ fn check_hash_peq<'a, 'tcx>(\n                     };\n \n                     span_lint_and_then(\n-                        cx, DERIVE_HASH_XOR_EQ, span,\n+                        cx,\n+                        DERIVE_HASH_XOR_EQ,\n+                        span,\n                         mess,\n                         |diag| {\n-                        if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(impl_id) {\n-                            diag.span_note(\n-                                cx.tcx.hir().span(hir_id),\n-                                \"`PartialEq` implemented here\"\n-                            );\n+                            if let Some(local_def_id) = impl_id.as_local() {\n+                                let hir_id = cx.tcx.hir().as_local_hir_id(local_def_id);\n+                                diag.span_note(\n+                                    cx.tcx.hir().span(hir_id),\n+                                    \"`PartialEq` implemented here\"\n+                                );\n+                            }\n                         }\n-                    });\n+                    );\n                 }\n             });\n         }\n@@ -225,7 +229,7 @@ fn check_unsafe_derive_deserialize<'a, 'tcx>(\n     ty: Ty<'tcx>,\n ) {\n     fn item_from_def_id<'tcx>(cx: &LateContext<'_, 'tcx>, def_id: DefId) -> &'tcx Item<'tcx> {\n-        let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n+        let hir_id = cx.tcx.hir().as_local_hir_id(def_id.expect_local());\n         cx.tcx.hir().expect_item(hir_id)\n     }\n "}, {"sha": "8d1e91f9adbd61f5aa97e0f896832c099e3d63b0", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n-                if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id))\n+                if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id).to_def_id())\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n                     lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));"}, {"sha": "6907e021a00b8261847c455ee842db4c4f59b231", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n \n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n         cx.tcx.infer_ctxt().enter(|infcx| {\n-            ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.tables).consume_body(body);\n+            ExprUseVisitor::new(&mut v, &infcx, fn_def_id.to_def_id(), cx.param_env, cx.tables).consume_body(body);\n         });\n \n         for node in v.set {"}, {"sha": "621d56185a9dd4fac7ebb73a33f5a359d8959d49", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Exit {\n                     // If the next item up is a function we check if it is an entry point\n                     // and only then emit a linter warning\n                     let def_id = cx.tcx.hir().local_def_id(parent);\n-                    if !is_entrypoint_fn(cx, def_id) {\n+                    if !is_entrypoint_fn(cx, def_id.to_def_id()) {\n                         span_lint(cx, EXIT, e.span, \"usage of `process::exit`\");\n                     }\n                 }"}, {"sha": "1d86ca9696f2bb778431b9dfdec0736a4df2f1d5", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -143,7 +143,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_i\n     if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n         let visited_trait_def_id = cx.tcx.hir().local_def_id(visited_trait.hir_id);\n-        fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);\n+        fill_trait_set(visited_trait_def_id.to_def_id(), &mut current_and_super_traits, cx);\n \n         let is_empty_method_found = current_and_super_traits\n             .iter()"}, {"sha": "56dd2795c609f4f2c7db89759b84bcddb6918da6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -576,20 +576,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n                             && !is_iterator_used_after_while_let(cx, iter_expr)\n                             && !is_nested(cx, expr, &method_args[0]))\n                 {\n-                    let iterator = snippet(cx, method_args[0].span, \"_\");\n+                    let mut applicability = Applicability::MachineApplicable;\n+                    let iterator = snippet_with_applicability(cx, method_args[0].span, \"_\", &mut applicability);\n                     let loop_var = if pat_args.is_empty() {\n                         \"_\".to_string()\n                     } else {\n-                        snippet(cx, pat_args[0].span, \"_\").into_owned()\n+                        snippet_with_applicability(cx, pat_args[0].span, \"_\", &mut applicability).into_owned()\n                     };\n                     span_lint_and_sugg(\n                         cx,\n                         WHILE_LET_ON_ITERATOR,\n-                        expr.span,\n+                        expr.span.with_hi(match_expr.span.hi()),\n                         \"this loop could be written as a `for` loop\",\n                         \"try\",\n-                        format!(\"for {} in {} {{ .. }}\", loop_var, iterator),\n-                        Applicability::HasPlaceholders,\n+                        format!(\"for {} in {}\", loop_var, iterator),\n+                        applicability,\n                     );\n                 }\n             }"}, {"sha": "4301157e16440ccbea1f95732b57d81335514ca5", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -83,12 +83,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     ) {\n         let def_id = cx.tcx.hir().local_def_id(hir_id);\n \n-        if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id) {\n+        if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id.to_def_id()) {\n             return;\n         }\n \n         // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n-        if fn_has_unsatisfiable_preds(cx, def_id) {\n+        if fn_has_unsatisfiable_preds(cx, def_id.to_def_id()) {\n             return;\n         }\n \n@@ -118,8 +118,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n \n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        if let Err((span, err)) = is_min_const_fn(cx.tcx, def_id, &mir) {\n-            if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id) {\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, def_id.to_def_id(), &mir) {\n+            if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, &err);\n             }\n         } else {"}, {"sha": "5300fd2215b391a7c2c40a52e30d34484893de12", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if cx.tcx.hir().as_local_hir_id(trait_def_id).is_some() && !cx.access_levels.is_exported(impl_item.hir_id) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "28650c88b4800b8516fde049c8d83510289ef7f7", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -135,7 +135,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         } = {\n             let mut ctx = MovedVariablesCtxt::default();\n             cx.tcx.infer_ctxt().enter(|infcx| {\n-                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id, cx.param_env, cx.tables).consume_body(body);\n+                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id.to_def_id(), cx.param_env, cx.tables)\n+                    .consume_body(body);\n             });\n             ctx\n         };"}, {"sha": "a599667b8d8a8a9f7214c0774f24b3658abe817d", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -136,8 +136,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                         let mut impls = HirIdSet::default();\n                                         cx.tcx.for_each_impl(default_trait_id, |d| {\n                                             if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n-                                                if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(ty_def.did) {\n-                                                    impls.insert(hir_id);\n+                                                if let Some(local_def_id) = ty_def.did.as_local() {\n+                                                    impls.insert(cx.tcx.hir().as_local_hir_id(local_def_id));\n                                                 }\n                                             }\n                                         });"}, {"sha": "7e8c61ba24a22a5c5aa0d812f75b080ec0b50830", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -378,7 +378,7 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         },\n         hir::ItemKind::Trait(..) => {\n             println!(\"trait decl\");\n-            if cx.tcx.trait_is_auto(did) {\n+            if cx.tcx.trait_is_auto(did.to_def_id()) {\n                 println!(\"trait is auto\");\n             } else {\n                 println!(\"trait is not auto\");"}, {"sha": "51b872e21c08582afd3e9bea7943c2d64d0af4b0", "filename": "tests/ui/issue_2356.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fissue_2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fissue_2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_2356.stderr?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -1,8 +1,8 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/issue_2356.rs:15:29\n+  --> $DIR/issue_2356.rs:15:9\n    |\n LL |         while let Some(e) = it.next() {\n-   |                             ^^^^^^^^^ help: try: `for e in it { .. }`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for e in it`\n    |\n note: the lint level is defined here\n   --> $DIR/issue_2356.rs:1:9"}, {"sha": "447b36048eed1a38095052860e2ddf550bb70c0f", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -0,0 +1,144 @@\n+// run-rustfix\n+\n+#![warn(clippy::while_let_on_iterator)]\n+#![allow(clippy::never_loop, unreachable_code, unused_mut)]\n+\n+fn base() {\n+    let mut iter = 1..20;\n+    for x in iter {\n+        println!(\"{}\", x);\n+    }\n+\n+    let mut iter = 1..20;\n+    for x in iter {\n+        println!(\"{}\", x);\n+    }\n+\n+    let mut iter = 1..20;\n+    for _ in iter {}\n+\n+    let mut iter = 1..20;\n+    while let None = iter.next() {} // this is fine (if nonsensical)\n+\n+    let mut iter = 1..20;\n+    if let Some(x) = iter.next() {\n+        // also fine\n+        println!(\"{}\", x)\n+    }\n+\n+    // the following shouldn't warn because it can't be written with a for loop\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        println!(\"next: {:?}\", iter.next())\n+    }\n+\n+    // neither can this\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        println!(\"next: {:?}\", iter.next());\n+    }\n+\n+    // or this\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        break;\n+    }\n+    println!(\"Remaining iter {:?}\", iter);\n+\n+    // or this\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        iter = 1..20;\n+    }\n+}\n+\n+// Issue #1188\n+fn refutable() {\n+    let a = [42, 1337];\n+    let mut b = a.iter();\n+\n+    // consume all the 42s\n+    while let Some(&42) = b.next() {}\n+\n+    let a = [(1, 2, 3)];\n+    let mut b = a.iter();\n+\n+    while let Some(&(1, 2, 3)) = b.next() {}\n+\n+    let a = [Some(42)];\n+    let mut b = a.iter();\n+\n+    while let Some(&None) = b.next() {}\n+\n+    /* This gives \u201crefutable pattern in `for` loop binding: `&_` not covered\u201d\n+    for &42 in b {}\n+    for &(1, 2, 3) in b {}\n+    for &Option::None in b.next() {}\n+    // */\n+}\n+\n+fn nested_loops() {\n+    let a = [42, 1337];\n+    let mut y = a.iter();\n+    loop {\n+        // x is reused, so don't lint here\n+        while let Some(_) = y.next() {}\n+    }\n+\n+    let mut y = a.iter();\n+    for _ in 0..2 {\n+        while let Some(_) = y.next() {\n+            // y is reused, don't lint\n+        }\n+    }\n+\n+    loop {\n+        let mut y = a.iter();\n+        for _ in y {\n+            // use a for loop here\n+        }\n+    }\n+}\n+\n+fn issue1121() {\n+    use std::collections::HashSet;\n+    let mut values = HashSet::new();\n+    values.insert(1);\n+\n+    while let Some(&value) = values.iter().next() {\n+        values.remove(&value);\n+    }\n+}\n+\n+fn issue2965() {\n+    // This should not cause an ICE and suggest:\n+    //\n+    // for _ in values.iter() {}\n+    //\n+    use std::collections::HashSet;\n+    let mut values = HashSet::new();\n+    values.insert(1);\n+\n+    for _ in values.iter() {\n+        // FIXME(flip1995): Linting this with the following line uncommented is a FP, see #1654\n+        // values.remove(&1);\n+    }\n+}\n+\n+fn issue3670() {\n+    let array = [Some(0), None, Some(1)];\n+    let mut iter = array.iter();\n+\n+    while let Some(elem) = iter.next() {\n+        let _ = elem.or_else(|| *iter.next()?);\n+    }\n+}\n+\n+fn main() {\n+    base();\n+    refutable();\n+    nested_loops();\n+    issue1121();\n+    issue2965();\n+    issue3670();\n+}"}, {"sha": "56a245aa8c7d8772ba1abe0d7106e168b3ff30ea", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n #![warn(clippy::while_let_on_iterator)]\n-#![allow(clippy::never_loop)]\n+#![allow(clippy::never_loop, unreachable_code, unused_mut)]\n \n-fn main() {\n+fn base() {\n     let mut iter = 1..20;\n     while let Option::Some(x) = iter.next() {\n         println!(\"{}\", x);\n@@ -26,26 +28,26 @@ fn main() {\n \n     // the following shouldn't warn because it can't be written with a for loop\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         println!(\"next: {:?}\", iter.next())\n     }\n \n     // neither can this\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         println!(\"next: {:?}\", iter.next());\n     }\n \n     // or this\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         break;\n     }\n     println!(\"Remaining iter {:?}\", iter);\n \n     // or this\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         iter = 1..20;\n     }\n }\n@@ -80,19 +82,19 @@ fn nested_loops() {\n     let mut y = a.iter();\n     loop {\n         // x is reused, so don't lint here\n-        while let Some(v) = y.next() {}\n+        while let Some(_) = y.next() {}\n     }\n \n     let mut y = a.iter();\n     for _ in 0..2 {\n-        while let Some(v) = y.next() {\n+        while let Some(_) = y.next() {\n             // y is reused, don't lint\n         }\n     }\n \n     loop {\n         let mut y = a.iter();\n-        while let Some(v) = y.next() {\n+        while let Some(_) = y.next() {\n             // use a for loop here\n         }\n     }\n@@ -118,7 +120,8 @@ fn issue2965() {\n     values.insert(1);\n \n     while let Some(..) = values.iter().next() {\n-        values.remove(&1);\n+        // FIXME(flip1995): Linting this with the following line uncommented is a FP, see #1654\n+        // values.remove(&1);\n     }\n }\n \n@@ -130,3 +133,12 @@ fn issue3670() {\n         let _ = elem.or_else(|| *iter.next()?);\n     }\n }\n+\n+fn main() {\n+    base();\n+    refutable();\n+    nested_loops();\n+    issue1121();\n+    issue2965();\n+    issue3670();\n+}"}, {"sha": "94caedb43a51118142d55dafd879ae5122f368b5", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=6ffe725bbcbcbad4caf4b10e546687c13c1d2ac7", "patch": "@@ -1,34 +1,34 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:6:33\n+  --> $DIR/while_let_on_iterator.rs:8:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n-   |                                 ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:11:25\n+  --> $DIR/while_let_on_iterator.rs:13:5\n    |\n LL |     while let Some(x) = iter.next() {\n-   |                         ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:16:25\n+  --> $DIR/while_let_on_iterator.rs:18:5\n    |\n LL |     while let Some(_) = iter.next() {}\n-   |                         ^^^^^^^^^^^ help: try: `for _ in iter { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:95:29\n+  --> $DIR/while_let_on_iterator.rs:97:9\n    |\n-LL |         while let Some(v) = y.next() {\n-   |                             ^^^^^^^^ help: try: `for v in y { .. }`\n+LL |         while let Some(_) = y.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:120:26\n+  --> $DIR/while_let_on_iterator.rs:122:5\n    |\n LL |     while let Some(..) = values.iter().next() {\n-   |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in values.iter() { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in values.iter()`\n \n error: aborting due to 5 previous errors\n "}]}