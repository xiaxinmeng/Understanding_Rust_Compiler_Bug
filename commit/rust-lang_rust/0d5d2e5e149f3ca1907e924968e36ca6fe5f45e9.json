{"sha": "0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNWQyZTVlMTQ5ZjNjYTE5MDdlOTI0OTY4ZTM2Y2E2ZmU1ZjQ1ZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T07:17:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T07:20:05Z"}, "message": "core: Don't use upcall_vec_grow from str::push_char", "tree": {"sha": "be029d206dcfba9f42248084810ccce99b8b625d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be029d206dcfba9f42248084810ccce99b8b625d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9", "html_url": "https://github.com/rust-lang/rust/commit/0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a87258155dce69e5c2146278af974fb854850da", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a87258155dce69e5c2146278af974fb854850da", "html_url": "https://github.com/rust-lang/rust/commit/7a87258155dce69e5c2146278af974fb854850da"}], "stats": {"total": 125, "additions": 63, "deletions": 62}, "files": [{"sha": "155510ffabaf027ad7176c87493ba27c4259b338", "filename": "src/libcore/str.rs", "status": "modified", "additions": 63, "deletions": 62, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=0d5d2e5e149f3ca1907e924968e36ca6fe5f45e9", "patch": "@@ -101,8 +101,6 @@ export\n native mod rustrt {\n     fn rust_str_push(&s: str, ch: u8);\n     fn str_reserve_shared(&ss: str, nn: libc::size_t);\n-    #[rust_stack]\n-    fn upcall_vec_grow(&s: str, new_sz: libc::size_t);\n }\n \n /*\n@@ -145,66 +143,69 @@ fn push_char(&s: str, ch: char) unsafe {\n         else if code < max_four_b { 4u }\n         else if code < max_five_b { 5u }\n         else { 6u };\n-    let mut repr: *vec::unsafe::vec_repr = ::unsafe::reinterpret_cast(s);\n-    let fill = (*repr).fill;\n-    if fill + nb <= (*repr).alloc {\n-        (*repr).fill = fill + nb;\n-    } else {\n-        rustrt::upcall_vec_grow(s, fill + nb);\n-        // possibly realloc'd\n-        repr = ::unsafe::reinterpret_cast(s);\n-    }\n-    let off = fill - 1u;\n-    if nb == 1u {\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n-            code as u8;\n-    } else if nb == 2u {\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n-            (code >> 6u & 31u | tag_two_b) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n-            (code & 63u | tag_cont) as u8;\n-    } else if nb == 3u {\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n-            (code >> 12u & 15u | tag_three_b) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n-            (code >> 6u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n-            (code & 63u | tag_cont) as u8;\n-    } else if nb == 4u {\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n-            (code >> 18u & 7u | tag_four_b) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n-            (code >> 12u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n-            (code >> 6u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 3u) =\n-            (code & 63u | tag_cont) as u8;\n-    } else if nb == 5u {\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n-            (code >> 24u & 3u | tag_five_b) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n-            (code >> 18u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n-            (code >> 12u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 3u) =\n-            (code >> 6u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 4u) =\n-            (code & 63u | tag_cont) as u8;\n-    } else if nb == 6u {\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off) =\n-            (code >> 30u & 1u | tag_six_b) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 1u) =\n-            (code >> 24u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 2u) =\n-            (code >> 18u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 3u) =\n-            (code >> 12u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 4u) =\n-            (code >> 6u & 63u | tag_cont) as u8;\n-        *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + 5u) =\n-            (code & 63u | tag_cont) as u8;\n-    }\n-    *ptr::mut_offset(ptr::mut_addr_of((*repr).data), off + nb) = 0u8;\n+    let len = len(s);\n+    let new_len = len + nb;\n+    reserve_at_least(s, new_len);\n+    let off = len;\n+    as_buf(s) {|buf|\n+        let buf: *mut u8 = ::unsafe::reinterpret_cast(buf);\n+        if nb == 1u {\n+            *ptr::mut_offset(buf, off) =\n+                code as u8;\n+        } else if nb == 2u {\n+            *ptr::mut_offset(buf, off) =\n+                (code >> 6u & 31u | tag_two_b) as u8;\n+            *ptr::mut_offset(buf, off + 1u) =\n+                (code & 63u | tag_cont) as u8;\n+        } else if nb == 3u {\n+            *ptr::mut_offset(buf, off) =\n+                (code >> 12u & 15u | tag_three_b) as u8;\n+            *ptr::mut_offset(buf, off + 1u) =\n+                (code >> 6u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 2u) =\n+                (code & 63u | tag_cont) as u8;\n+        } else if nb == 4u {\n+            *ptr::mut_offset(buf, off) =\n+                (code >> 18u & 7u | tag_four_b) as u8;\n+            *ptr::mut_offset(buf, off + 1u) =\n+                (code >> 12u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 2u) =\n+                (code >> 6u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 3u) =\n+                (code & 63u | tag_cont) as u8;\n+        } else if nb == 5u {\n+            *ptr::mut_offset(buf, off) =\n+                (code >> 24u & 3u | tag_five_b) as u8;\n+            *ptr::mut_offset(buf, off + 1u) =\n+                (code >> 18u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 2u) =\n+                (code >> 12u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 3u) =\n+                (code >> 6u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 4u) =\n+                (code & 63u | tag_cont) as u8;\n+        } else if nb == 6u {\n+            *ptr::mut_offset(buf, off) =\n+                (code >> 30u & 1u | tag_six_b) as u8;\n+            *ptr::mut_offset(buf, off + 1u) =\n+                (code >> 24u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 2u) =\n+                (code >> 18u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 3u) =\n+                (code >> 12u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 4u) =\n+                (code >> 6u & 63u | tag_cont) as u8;\n+            *ptr::mut_offset(buf, off + 5u) =\n+                (code & 63u | tag_cont) as u8;\n+        }\n+        *ptr::mut_offset(buf, off + nb) = 0u8;\n+    }\n+\n+    as_bytes(s) {|bytes|\n+        let mut mut_bytes: [u8] = ::unsafe::reinterpret_cast(bytes);\n+        vec::unsafe::set_len(mut_bytes, new_len + 1u);\n+        ::unsafe::forget(mut_bytes);\n+    }\n }\n \n #[doc = \"Convert a char to a string\"]"}]}