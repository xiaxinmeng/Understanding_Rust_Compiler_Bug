{"sha": "656d2a3a12746d624b8ee9dada8a70d708e1526c", "node_id": "C_kwDOAAsO6NoAKDY1NmQyYTNhMTI3NDZkNjI0YjhlZTlkYWRhOGE3MGQ3MDhlMTUyNmM", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-01T22:57:31Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-01T22:58:11Z"}, "message": "Use `From`/`Into` rather than the traits they replaced.", "tree": {"sha": "d8220901785eb473b656be11d11ee9bb26f47c08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8220901785eb473b656be11d11ee9bb26f47c08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/656d2a3a12746d624b8ee9dada8a70d708e1526c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/656d2a3a12746d624b8ee9dada8a70d708e1526c", "html_url": "https://github.com/rust-lang/rust/commit/656d2a3a12746d624b8ee9dada8a70d708e1526c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/656d2a3a12746d624b8ee9dada8a70d708e1526c/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89544e900125aed4899706c78e8bbce5cb5f1023", "url": "https://api.github.com/repos/rust-lang/rust/commits/89544e900125aed4899706c78e8bbce5cb5f1023", "html_url": "https://github.com/rust-lang/rust/commit/89544e900125aed4899706c78e8bbce5cb5f1023"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "6feea737f3b5f4ce558436f4d1fd34a23a36ff7a", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/656d2a3a12746d624b8ee9dada8a70d708e1526c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656d2a3a12746d624b8ee9dada8a70d708e1526c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=656d2a3a12746d624b8ee9dada8a70d708e1526c", "patch": "@@ -8,9 +8,9 @@ use crate::os::raw;\n #[cfg(unix)]\n use crate::os::unix::io::OwnedFd;\n #[cfg(all(doc, unix))]\n-use crate::os::unix::io::{AsFd, FromFd, IntoFd};\n+use crate::os::unix::io::AsFd;\n #[cfg(all(doc, target_os = \"wasi\"))]\n-use crate::os::unix::io::{AsFd, FromFd, IntoFd};\n+use crate::os::unix::io::AsFd;\n #[cfg(target_os = \"wasi\")]\n use crate::os::wasi::io::OwnedFd;\n use crate::sys_common::{AsInner, IntoInner};\n@@ -69,8 +69,9 @@ pub trait FromRawFd {\n     /// will take responsibility for closing it when the object goes out of\n     /// scope.\n     ///\n-    /// However, consuming ownership is not strictly required. See\n-    /// [`FromFd::from_fd`] for an API which strictly consumes ownership.\n+    /// However, consuming ownership is not strictly required. Use a\n+    /// [`From<OwnedFd>::from`] implementation for an API which strictly\n+    /// consumes ownership.\n     ///\n     /// # Safety\n     ///\n@@ -109,8 +110,9 @@ pub trait IntoRawFd {\n     /// file descriptor to the caller. When used in this way, callers are then the unique\n     /// owners of the file descriptor and must close it once it's no longer needed.\n     ///\n-    /// However, transferring ownership is not strictly required. See\n-    /// [`IntoFd::into_fd`] for an API which strictly transfers ownership.\n+    /// However, transferring ownership is not strictly required. Use a\n+    /// [`Into<OwnedFd>::into`] implementation for an API which strictly\n+    /// transfers ownership.\n     ///\n     /// # Example\n     ///"}, {"sha": "dc84a38156ab8aea040e6e66ea57e0c0dda790b5", "filename": "library/std/src/os/windows/io/raw.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/656d2a3a12746d624b8ee9dada8a70d708e1526c/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656d2a3a12746d624b8ee9dada8a70d708e1526c/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs?ref=656d2a3a12746d624b8ee9dada8a70d708e1526c", "patch": "@@ -6,7 +6,7 @@ use crate::fs;\n use crate::io;\n use crate::net;\n #[cfg(doc)]\n-use crate::os::windows::io::{AsHandle, AsSocket, FromHandle, FromSocket, IntoHandle, IntoSocket};\n+use crate::os::windows::io::{AsHandle, AsSocket};\n use crate::os::windows::io::{OwnedHandle, OwnedSocket};\n use crate::os::windows::raw;\n use crate::sys;\n@@ -48,8 +48,9 @@ pub trait FromRawHandle {\n     /// will take responsibility for closing it when the object goes out of\n     /// scope.\n     ///\n-    /// However, consuming ownership is not strictly required. See\n-    /// [`FromHandle::from_handle`] for an API which strictly consumes ownership.\n+    /// However, consuming ownership is not strictly required. Use a\n+    /// `From<OwnedHandle>::from` implementation for an API which strictly\n+    /// consumes ownership.\n     ///\n     /// # Safety\n     ///\n@@ -79,8 +80,9 @@ pub trait IntoRawHandle {\n     /// handle to the caller. When used in this way, callers are then the unique\n     /// owners of the handle and must close it once it's no longer needed.\n     ///\n-    /// However, transferring ownership is not strictly required. See\n-    /// [`IntoHandle::into_handle`] for an API which strictly transfers ownership.\n+    /// However, transferring ownership is not strictly required. Use a\n+    /// `Into<OwnedHandle>::into` implementation for an API which strictly\n+    /// transfers ownership.\n     #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_handle(self) -> RawHandle;\n }\n@@ -181,8 +183,9 @@ pub trait FromRawSocket {\n     /// will take responsibility for closing it when the object goes out of\n     /// scope.\n     ///\n-    /// However, consuming ownership is not strictly required. See\n-    /// [`FromSocket::from_socket`] for an API which strictly consumes ownership.\n+    /// However, consuming ownership is not strictly required. Use a\n+    /// `From<OwnedSocket>::from` implementation for an API which strictly\n+    /// consumes ownership.\n     ///\n     /// # Safety\n     ///\n@@ -205,8 +208,9 @@ pub trait IntoRawSocket {\n     /// socket to the caller. When used in this way, callers are then the unique\n     /// owners of the socket and must close it once it's no longer needed.\n     ///\n-    /// However, transferring ownership is not strictly required. See\n-    /// [`IntoSocket::into_socket`] for an API which strictly transfers ownership.\n+    /// However, transferring ownership is not strictly required. Use a\n+    /// `Into<OwnedSocket>::into` implementation for an API which strictly\n+    /// transfers ownership.\n     #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_socket(self) -> RawSocket;\n }"}]}