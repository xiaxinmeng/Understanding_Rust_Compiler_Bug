{"sha": "ed4859ea78581a6d5dd8b5f1636c5ac121588179", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNDg1OWVhNzg1ODFhNmQ1ZGQ4YjVmMTYzNmM1YWMxMjE1ODgxNzk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-09T05:00:13Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-09T05:00:13Z"}, "message": "extra: Address review comments from Jack", "tree": {"sha": "6d9d76b12d6054f12ea10d68455d7b4ddd31c3ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9d76b12d6054f12ea10d68455d7b4ddd31c3ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed4859ea78581a6d5dd8b5f1636c5ac121588179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4859ea78581a6d5dd8b5f1636c5ac121588179", "html_url": "https://github.com/rust-lang/rust/commit/ed4859ea78581a6d5dd8b5f1636c5ac121588179", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed4859ea78581a6d5dd8b5f1636c5ac121588179/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a0fb94ee685381b08d138454052b062c8b4f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a0fb94ee685381b08d138454052b062c8b4f6e", "html_url": "https://github.com/rust-lang/rust/commit/02a0fb94ee685381b08d138454052b062c8b4f6e"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "bbb8dbfcbfe5378bad1ba379157259b7abdea46c", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ed4859ea78581a6d5dd8b5f1636c5ac121588179/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4859ea78581a6d5dd8b5f1636c5ac121588179/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=ed4859ea78581a6d5dd8b5f1636c5ac121588179", "patch": "@@ -296,9 +296,9 @@ impl Context {\n     }\n \n     pub fn new_with_freshness(db: RWArc<Database>,\n-               lg: RWArc<Logger>,\n-               cfg: Arc<json::Object>,\n-               freshness: Arc<FreshnessMap>) -> Context {\n+                              lg: RWArc<Logger>,\n+                              cfg: Arc<json::Object>,\n+                              freshness: Arc<FreshnessMap>) -> Context {\n         Context {\n             db: db,\n             logger: lg,\n@@ -319,16 +319,18 @@ impl Context {\n }\n \n impl Exec {\n-    pub fn discover_input(&mut self, dependency_kind:&str,\n-       // Discovered input\n-       dependency_name: &str, dependency_val: &str) {\n+    pub fn discover_input(&mut self,\n+                          dependency_kind: &str,\n+                          dependency_name: &str,\n+                          dependency_val: &str) {\n         debug!(\"Discovering input %s %s %s\", dependency_kind, dependency_name, dependency_val);\n         self.discovered_inputs.insert_work_key(WorkKey::new(dependency_kind, dependency_name),\n                                  dependency_val.to_owned());\n     }\n-    pub fn discover_output(&mut self, dependency_kind:&str,\n-       // Discovered output\n-       dependency_name: &str, dependency_val: &str) {\n+    pub fn discover_output(&mut self,\n+                           dependency_kind: &str,\n+                           dependency_name: &str,\n+                           dependency_val: &str) {\n         debug!(\"Discovering output %s %s %s\", dependency_kind, dependency_name, dependency_val);\n         self.discovered_outputs.insert_work_key(WorkKey::new(dependency_kind, dependency_name),\n                                  dependency_val.to_owned());\n@@ -340,11 +342,10 @@ impl Exec {\n         for (k, v) in self.discovered_inputs.iter() {\n             for (k1, _) in v.iter() {\n                 rs.push((k1.clone(), k.clone()));\n-                }\n+            }\n         }\n         rs\n     }\n-\n }\n \n impl<'self> Prep<'self> {\n@@ -368,7 +369,7 @@ impl<'self> Prep<'self> {\n }\n \n impl<'self> Prep<'self> {\n-    pub fn declare_input(&mut self, kind:&str, name:&str, val:&str) {\n+    pub fn declare_input(&mut self, kind: &str, name: &str, val: &str) {\n         debug!(\"Declaring input %s %s %s\", kind, name, val);\n         self.declared_inputs.insert_work_key(WorkKey::new(kind, name),\n                                  val.to_owned());"}]}