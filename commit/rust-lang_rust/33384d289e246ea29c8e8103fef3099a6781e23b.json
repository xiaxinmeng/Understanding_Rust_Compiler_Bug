{"sha": "33384d289e246ea29c8e8103fef3099a6781e23b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzg0ZDI4OWUyNDZlYTI5YzhlODEwM2ZlZjMwOTlhNjc4MWUyM2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-24T12:32:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-24T12:32:29Z"}, "message": "pit-of-success API for unresolved code actions", "tree": {"sha": "5f8af3a0a37a445f6b1d5db30ff864e058875ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f8af3a0a37a445f6b1d5db30ff864e058875ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33384d289e246ea29c8e8103fef3099a6781e23b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33384d289e246ea29c8e8103fef3099a6781e23b", "html_url": "https://github.com/rust-lang/rust/commit/33384d289e246ea29c8e8103fef3099a6781e23b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33384d289e246ea29c8e8103fef3099a6781e23b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1487f2f10efe2d0a54e8627692643f3a48ffdbff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1487f2f10efe2d0a54e8627692643f3a48ffdbff", "html_url": "https://github.com/rust-lang/rust/commit/1487f2f10efe2d0a54e8627692643f3a48ffdbff"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a75cc85b6e88a00bf443250940ee283086d7e8b1", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33384d289e246ea29c8e8103fef3099a6781e23b/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33384d289e246ea29c8e8103fef3099a6781e23b/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=33384d289e246ea29c8e8103fef3099a6781e23b", "patch": "@@ -490,25 +490,25 @@ impl Analysis {\n             .unwrap_or_default())\n     }\n \n+    /// Computes assists (aka code actions aka intentions) for the given\n+    /// position. Computes enough info to show the lightbulb list in the editor,\n+    /// but doesn't compute actual edits, to improve performance.\n+    ///\n+    /// When the user clicks on the assist, call `resolve_assists` to get the\n+    /// edit.\n+    pub fn assists(&self, config: &AssistConfig, frange: FileRange) -> Cancelable<Vec<Assist>> {\n+        self.with_db(|db| Assist::unresolved(db, config, frange))\n+    }\n+\n     /// Computes resolved assists with source changes for the given position.\n-    pub fn resolved_assists(\n+    pub fn resolve_assists(\n         &self,\n         config: &AssistConfig,\n         frange: FileRange,\n     ) -> Cancelable<Vec<ResolvedAssist>> {\n         self.with_db(|db| assists::Assist::resolved(db, config, frange))\n     }\n \n-    /// Computes unresolved assists (aka code actions aka intentions) for the given\n-    /// position.\n-    pub fn unresolved_assists(\n-        &self,\n-        config: &AssistConfig,\n-        frange: FileRange,\n-    ) -> Cancelable<Vec<Assist>> {\n-        self.with_db(|db| Assist::unresolved(db, config, frange))\n-    }\n-\n     /// Computes the set of diagnostics for the given file.\n     pub fn diagnostics(\n         &self,"}, {"sha": "1207b31c486853d128de9103f59e4feeb3087b04", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33384d289e246ea29c8e8103fef3099a6781e23b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33384d289e246ea29c8e8103fef3099a6781e23b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=33384d289e246ea29c8e8103fef3099a6781e23b", "patch": "@@ -946,12 +946,12 @@ pub(crate) fn handle_code_action(\n \n     if snap.config.client_caps.code_action_resolve {\n         for (index, assist) in\n-            snap.analysis.unresolved_assists(&assists_config, frange)?.into_iter().enumerate()\n+            snap.analysis.assists(&assists_config, frange)?.into_iter().enumerate()\n         {\n             res.push(to_proto::unresolved_code_action(&snap, params.clone(), assist, index)?);\n         }\n     } else {\n-        for assist in snap.analysis.resolved_assists(&assists_config, frange)?.into_iter() {\n+        for assist in snap.analysis.resolve_assists(&assists_config, frange)?.into_iter() {\n             res.push(to_proto::resolved_code_action(&snap, assist)?);\n         }\n     }\n@@ -1014,7 +1014,7 @@ pub(crate) fn handle_code_action_resolve(\n         .only\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n-    let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n+    let assists = snap.analysis.resolve_assists(&snap.config.assist, frange)?;\n     let (id, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];"}]}