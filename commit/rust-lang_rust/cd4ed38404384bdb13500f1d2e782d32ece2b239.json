{"sha": "cd4ed38404384bdb13500f1d2e782d32ece2b239", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNGVkMzg0MDQzODRiZGIxMzUwMGYxZDJlNzgyZDMyZWNlMmIyMzk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T07:30:55Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-06T12:21:01Z"}, "message": "Deprecate the constant-returning functions in Float.\n\nThese are replaced by the equivalent constants in `std::f32` and\n`std::f64` respectively.\n\n[breaking-change]", "tree": {"sha": "d0ae795a9b726c0d795c006a430127556e5a1de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ae795a9b726c0d795c006a430127556e5a1de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4ed38404384bdb13500f1d2e782d32ece2b239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4ed38404384bdb13500f1d2e782d32ece2b239", "html_url": "https://github.com/rust-lang/rust/commit/cd4ed38404384bdb13500f1d2e782d32ece2b239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4ed38404384bdb13500f1d2e782d32ece2b239/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb2e2acd72c651f97f285a86956f3f01a461a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb2e2acd72c651f97f285a86956f3f01a461a2d", "html_url": "https://github.com/rust-lang/rust/commit/cfb2e2acd72c651f97f285a86956f3f01a461a2d"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "d2334943b3d164d9d5ad1f4190fde3ce9d2473b2", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4ed38404384bdb13500f1d2e782d32ece2b239/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4ed38404384bdb13500f1d2e782d32ece2b239/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=cd4ed38404384bdb13500f1d2e782d32ece2b239", "patch": "@@ -177,33 +177,43 @@ impl Float for f32 {\n     }\n \n     #[inline]\n+    #[deprecated]\n     fn mantissa_digits(_: Option<f32>) -> uint { MANTISSA_DIGITS }\n \n     #[inline]\n+    #[deprecated]\n     fn digits(_: Option<f32>) -> uint { DIGITS }\n \n     #[inline]\n+    #[deprecated]\n     fn epsilon() -> f32 { EPSILON }\n \n     #[inline]\n+    #[deprecated]\n     fn min_exp(_: Option<f32>) -> int { MIN_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn max_exp(_: Option<f32>) -> int { MAX_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn min_10_exp(_: Option<f32>) -> int { MIN_10_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn max_10_exp(_: Option<f32>) -> int { MAX_10_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn min_value() -> f32 { MIN_VALUE }\n \n     #[inline]\n+    #[deprecated]\n     fn min_pos_value(_: Option<f32>) -> f32 { MIN_POS_VALUE }\n \n     #[inline]\n+    #[deprecated]\n     fn max_value() -> f32 { MAX_VALUE }\n \n     /// Returns the mantissa, exponent and sign as integers."}, {"sha": "95cc5f22409039e9f15beab2b29d1bdf566b82b6", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4ed38404384bdb13500f1d2e782d32ece2b239/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4ed38404384bdb13500f1d2e782d32ece2b239/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=cd4ed38404384bdb13500f1d2e782d32ece2b239", "patch": "@@ -185,33 +185,43 @@ impl Float for f64 {\n     }\n \n     #[inline]\n+    #[deprecated]\n     fn mantissa_digits(_: Option<f64>) -> uint { MANTISSA_DIGITS }\n \n     #[inline]\n+    #[deprecated]\n     fn digits(_: Option<f64>) -> uint { DIGITS }\n \n     #[inline]\n+    #[deprecated]\n     fn epsilon() -> f64 { EPSILON }\n \n     #[inline]\n+    #[deprecated]\n     fn min_exp(_: Option<f64>) -> int { MIN_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn max_exp(_: Option<f64>) -> int { MAX_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn min_10_exp(_: Option<f64>) -> int { MIN_10_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn max_10_exp(_: Option<f64>) -> int { MAX_10_EXP }\n \n     #[inline]\n+    #[deprecated]\n     fn min_value() -> f64 { MIN_VALUE }\n \n     #[inline]\n+    #[deprecated]\n     fn min_pos_value(_: Option<f64>) -> f64 { MIN_POS_VALUE }\n \n     #[inline]\n+    #[deprecated]\n     fn max_value() -> f64 { MAX_VALUE }\n \n     /// Returns the mantissa, exponent and sign as integers."}, {"sha": "1f20fae2f45cacf3ea973c8c60756ae412c523cc", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd4ed38404384bdb13500f1d2e782d32ece2b239/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4ed38404384bdb13500f1d2e782d32ece2b239/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cd4ed38404384bdb13500f1d2e782d32ece2b239", "patch": "@@ -910,12 +910,12 @@ impl_to_primitive_uint! { u32 }\n impl_to_primitive_uint! { u64 }\n \n macro_rules! impl_to_primitive_float_to_float {\n-    ($SrcT:ty, $DstT:ty, $slf:expr) => (\n+    ($SrcT:ident, $DstT:ident, $slf:expr) => (\n         if size_of::<$SrcT>() <= size_of::<$DstT>() {\n             Some($slf as $DstT)\n         } else {\n             let n = $slf as f64;\n-            let max_value: $SrcT = Float::max_value();\n+            let max_value: $SrcT = ::$SrcT::MAX_VALUE;\n             if -max_value as f64 <= n && n <= max_value as f64 {\n                 Some($slf as $DstT)\n             } else {\n@@ -926,7 +926,7 @@ macro_rules! impl_to_primitive_float_to_float {\n }\n \n macro_rules! impl_to_primitive_float {\n-    ($T:ty) => (\n+    ($T:ident) => (\n         impl ToPrimitive for $T {\n             #[inline]\n             fn to_int(&self) -> Option<int> { Some(*self as int) }\n@@ -1251,24 +1251,34 @@ pub trait Float\n     // FIXME (#5527): These should be associated constants\n \n     /// Returns the number of binary digits of mantissa that this type supports.\n+    #[deprecated = \"use `std::f32::MANTISSA_DIGITS` or `std::f64::MANTISSA_DIGITS` as appropriate\"]\n     fn mantissa_digits(unused_self: Option<Self>) -> uint;\n     /// Returns the number of base-10 digits of precision that this type supports.\n+    #[deprecated = \"use `std::f32::DIGITS` or `std::f64::DIGITS` as appropriate\"]\n     fn digits(unused_self: Option<Self>) -> uint;\n     /// Returns the difference between 1.0 and the smallest representable number larger than 1.0.\n+    #[deprecated = \"use `std::f32::EPSILON` or `std::f64::EPSILON` as appropriate\"]\n     fn epsilon() -> Self;\n     /// Returns the minimum binary exponent that this type can represent.\n+    #[deprecated = \"use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` as appropriate\"]\n     fn min_exp(unused_self: Option<Self>) -> int;\n     /// Returns the maximum binary exponent that this type can represent.\n+    #[deprecated = \"use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` as appropriate\"]\n     fn max_exp(unused_self: Option<Self>) -> int;\n     /// Returns the minimum base-10 exponent that this type can represent.\n+    #[deprecated = \"use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` as appropriate\"]\n     fn min_10_exp(unused_self: Option<Self>) -> int;\n     /// Returns the maximum base-10 exponent that this type can represent.\n+    #[deprecated = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\"]\n     fn max_10_exp(unused_self: Option<Self>) -> int;\n     /// Returns the smallest finite value that this type can represent.\n+    #[deprecated = \"use `std::f32::MIN_VALUE` or `std::f64::MIN_VALUE` as appropriate\"]\n     fn min_value() -> Self;\n     /// Returns the smallest normalized positive number that this type can represent.\n+    #[deprecated = \"use `std::f32::MIN_POS_VALUE` or `std::f64::MIN_POS_VALUE` as appropriate\"]\n     fn min_pos_value(unused_self: Option<Self>) -> Self;\n     /// Returns the largest finite value that this type can represent.\n+    #[deprecated = \"use `std::f32::MAX_VALUE` or `std::f64::MAX_VALUE` as appropriate\"]\n     fn max_value() -> Self;\n \n     /// Returns true if this value is NaN and false otherwise."}]}