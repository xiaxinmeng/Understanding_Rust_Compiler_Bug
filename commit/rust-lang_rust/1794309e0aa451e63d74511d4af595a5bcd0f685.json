{"sha": "1794309e0aa451e63d74511d4af595a5bcd0f685", "node_id": "C_kwDOAAsO6NoAKDE3OTQzMDllMGFhNDUxZTYzZDc0NTExZDRhZjU5NWE1YmNkMGY2ODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-04T21:42:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-04T21:42:04Z"}, "message": "Rollup merge of #97737 - jackh726:verbose-pretty-printing-fix, r=compiler-errors\n\nFix pretty printing named bound regions under -Zverbose\n\nFixed regression introduced in #97023\n\nr? `@compiler-errors`\n\ncc `@cjgillot`", "tree": {"sha": "a6b7bf7a28772ae52c3b1da7e4aa66c1aa1c16aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b7bf7a28772ae52c3b1da7e4aa66c1aa1c16aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1794309e0aa451e63d74511d4af595a5bcd0f685", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJim9GtCRBK7hj4Ov3rIwAADLMIAEU1v0gHb471pSxz6DOkDZNc\n5FkJ6EpN2nncZvVDe+rrg/RjuF1qpfwfdN1dkTS17f36NeVD89ifDeWdF8/rU8+7\naN9ug3LWTNrdk3C2NxQhjb5yrTy7AnZkKla11ynohfjCMnp+ym92kQTB1jPg2HKP\nWo2xuOW3vq+Phf+ikIniQP4JH3s4T8vA0P5WxgeBOo3ABNnPRIGpjhqwyfuscBVV\n8aCvfYcgJGpxPKrPwLf/V8w46F0QbwlTnw/yxGjLuOeb9137imj2ydGGR34STTwv\nqafKry/IGjywT8PMafw9+kCKeHn+wv6yIK8rt1vS1UrrETAhkl8GDdMyYeAVMHI=\n=yPf4\n-----END PGP SIGNATURE-----\n", "payload": "tree a6b7bf7a28772ae52c3b1da7e4aa66c1aa1c16aa\nparent 8d0de3a8da50c2a0eca8e8ece13b77d712d8652d\nparent dd38fecb78dcccf2c8b506cf901bdce1ba1a6df8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654378924 +0200\ncommitter GitHub <noreply@github.com> 1654378924 +0200\n\nRollup merge of #97737 - jackh726:verbose-pretty-printing-fix, r=compiler-errors\n\nFix pretty printing named bound regions under -Zverbose\n\nFixed regression introduced in #97023\n\nr? `@compiler-errors`\n\ncc `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1794309e0aa451e63d74511d4af595a5bcd0f685", "html_url": "https://github.com/rust-lang/rust/commit/1794309e0aa451e63d74511d4af595a5bcd0f685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1794309e0aa451e63d74511d4af595a5bcd0f685/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d0de3a8da50c2a0eca8e8ece13b77d712d8652d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0de3a8da50c2a0eca8e8ece13b77d712d8652d", "html_url": "https://github.com/rust-lang/rust/commit/8d0de3a8da50c2a0eca8e8ece13b77d712d8652d"}, {"sha": "dd38fecb78dcccf2c8b506cf901bdce1ba1a6df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd38fecb78dcccf2c8b506cf901bdce1ba1a6df8", "html_url": "https://github.com/rust-lang/rust/commit/dd38fecb78dcccf2c8b506cf901bdce1ba1a6df8"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "08879afa64a0ebaa601d0e5e24e2a9a1fbd27a51", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1794309e0aa451e63d74511d4af595a5bcd0f685/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1794309e0aa451e63d74511d4af595a5bcd0f685/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1794309e0aa451e63d74511d4af595a5bcd0f685", "patch": "@@ -2190,34 +2190,40 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         // this is not *quite* right and changes the ordering of some output\n         // anyways.\n         let (new_value, map) = if self.tcx().sess.verbose() {\n-            // anon index + 1 (BrEnv takes 0) -> name\n-            let mut region_map: FxHashMap<_, _> = Default::default();\n-            let bound_vars = value.bound_vars();\n-            for var in bound_vars {\n-                let ty::BoundVariableKind::Region(var) = var else { continue };\n-                match var {\n-                    ty::BrAnon(_) | ty::BrEnv => {\n-                        start_or_continue(&mut self, \"for<\", \", \");\n-                        let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        region_map.insert(var, ty::BrNamed(CRATE_DEF_ID.to_def_id(), name));\n-                    }\n-                    ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n-                        start_or_continue(&mut self, \"for<\", \", \");\n-                        let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        region_map.insert(var, ty::BrNamed(def_id, name));\n-                    }\n-                    ty::BrNamed(_, name) => {\n-                        start_or_continue(&mut self, \"for<\", \", \");\n-                        do_continue(&mut self, name);\n+            let regions: Vec<_> = value\n+                .bound_vars()\n+                .into_iter()\n+                .map(|var| {\n+                    let ty::BoundVariableKind::Region(var) = var else {\n+                    // This doesn't really matter because it doesn't get used,\n+                    // it's just an empty value\n+                    return ty::BrAnon(0);\n+                };\n+                    match var {\n+                        ty::BrAnon(_) | ty::BrEnv => {\n+                            start_or_continue(&mut self, \"for<\", \", \");\n+                            let name = next_name(&self);\n+                            do_continue(&mut self, name);\n+                            ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n+                        }\n+                        ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n+                            start_or_continue(&mut self, \"for<\", \", \");\n+                            let name = next_name(&self);\n+                            do_continue(&mut self, name);\n+                            ty::BrNamed(def_id, name)\n+                        }\n+                        ty::BrNamed(def_id, name) => {\n+                            start_or_continue(&mut self, \"for<\", \", \");\n+                            do_continue(&mut self, name);\n+                            ty::BrNamed(def_id, name)\n+                        }\n                     }\n-                }\n-            }\n+                })\n+                .collect();\n             start_or_continue(&mut self, \"\", \"> \");\n \n             self.tcx.replace_late_bound_regions(value.clone(), |br| {\n-                let kind = region_map[&br.kind];\n+                let kind = regions[br.var.as_usize()];\n                 self.tcx.mk_region(ty::ReLateBound(\n                     ty::INNERMOST,\n                     ty::BoundRegion { var: br.var, kind },"}]}