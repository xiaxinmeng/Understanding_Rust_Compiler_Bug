{"sha": "b771c993044d87d80c4ebc740e86b1b744770c57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NzFjOTkzMDQ0ZDg3ZDgwYzRlYmM3NDBlODZiMWI3NDQ3NzBjNTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-27T22:21:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:05Z"}, "message": "core::rt: Fix the finalizer on UvTcpStream and UvTcpListener\n\nEliminates a lot of calls to `close`", "tree": {"sha": "7519451e8ffc72740d70cda247d7203b4adfb590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7519451e8ffc72740d70cda247d7203b4adfb590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b771c993044d87d80c4ebc740e86b1b744770c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b771c993044d87d80c4ebc740e86b1b744770c57", "html_url": "https://github.com/rust-lang/rust/commit/b771c993044d87d80c4ebc740e86b1b744770c57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b771c993044d87d80c4ebc740e86b1b744770c57/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b7b7d5a0feeb88b5dba1e295925a7564473685", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b7b7d5a0feeb88b5dba1e295925a7564473685", "html_url": "https://github.com/rust-lang/rust/commit/01b7b7d5a0feeb88b5dba1e295925a7564473685"}], "stats": {"total": 68, "additions": 16, "deletions": 52}, "files": [{"sha": "ae4a7a2039717628c8ff4bd6dbffad7f30fed438", "filename": "src/libcore/rt/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b771c993044d87d80c4ebc740e86b1b744770c57/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b771c993044d87d80c4ebc740e86b1b744770c57/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=b771c993044d87d80c4ebc740e86b1b744770c57", "patch": "@@ -10,7 +10,6 @@\n \n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use ops::Drop;\n use rt::sched::local_sched::unsafe_borrow_io;\n use rt::io::net::ip::IpAddr;\n use rt::io::{Reader, Writer, Listener};\n@@ -79,12 +78,6 @@ impl Writer for TcpStream {\n     fn flush(&mut self) { fail!() }\n }\n \n-impl Drop for TcpStream {\n-    fn finalize(&self) {\n-        self.rtstream.close();\n-    }\n-}\n-\n pub struct TcpListener {\n     rtlistener: ~RtioTcpListenerObject\n }\n@@ -120,12 +113,6 @@ impl Listener<TcpStream> for TcpListener {\n     }\n }\n \n-impl Drop for TcpListener {\n-    fn finalize(&self) {\n-        self.rtlistener.close();\n-    }\n-}\n-\n #[cfg(test)]\n mod test {\n     use super::*;"}, {"sha": "49fbf1429630dae861a8129e5dc9842dbd2a78ae", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 16, "deletions": 39, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b771c993044d87d80c4ebc740e86b1b744770c57/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b771c993044d87d80c4ebc740e86b1b744770c57/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=b771c993044d87d80c4ebc740e86b1b744770c57", "patch": "@@ -124,7 +124,7 @@ impl IoFactory for UvIoFactory {\n                 rtdebug!(\"connect: in connect callback\");\n                 let maybe_stream = if status.is_none() {\n                     rtdebug!(\"status is none\");\n-                    Ok(~UvTcpStream(stream_watcher))\n+                    Ok(~UvTcpStream { watcher: stream_watcher })\n                 } else {\n                     rtdebug!(\"status is some\");\n                     // XXX: Wait for close\n@@ -148,7 +148,7 @@ impl IoFactory for UvIoFactory {\n     fn tcp_bind(&mut self, addr: IpAddr) -> Result<~RtioTcpListenerObject, IoError> {\n         let mut watcher = TcpWatcher::new(self.uv_loop());\n         match watcher.bind(addr) {\n-            Ok(_) => Ok(~UvTcpListener(watcher)),\n+            Ok(_) => Ok(~UvTcpListener { watcher: watcher }),\n             Err(uverr) => {\n                 // XXX: Should we wait until close completes?\n                 watcher.as_stream().close(||());\n@@ -158,23 +158,19 @@ impl IoFactory for UvIoFactory {\n     }\n }\n \n-pub struct UvTcpListener(TcpWatcher);\n+// FIXME #6090: Prefer newtype structs but Drop doesn't work\n+pub struct UvTcpListener {\n+    watcher: TcpWatcher\n+}\n \n impl UvTcpListener {\n-    fn watcher(&self) -> TcpWatcher {\n-        match self { &UvTcpListener(w) => w }\n-    }\n-\n-    fn close(&self) {\n-        // XXX: Need to wait until close finishes before returning\n-        self.watcher().as_stream().close(||());\n-    }\n+    fn watcher(&self) -> TcpWatcher { self.watcher }\n }\n \n impl Drop for UvTcpListener {\n     fn finalize(&self) {\n-        // XXX: Again, this never gets called. Use .close() instead\n-        //self.watcher().as_stream().close(||());\n+        // XXX: Need to wait until close finishes before returning\n+        self.watcher().as_stream().close(||());\n     }\n }\n \n@@ -200,7 +196,7 @@ impl RtioTcpListener for UvTcpListener {\n                     let client_tcp_watcher = TcpWatcher::new(&mut loop_).as_stream();\n                     // XXX: Needs to be surfaced in interface\n                     server_stream_watcher.accept(client_tcp_watcher);\n-                    Ok(~UvTcpStream::new(client_tcp_watcher))\n+                    Ok(~UvTcpStream { watcher: client_tcp_watcher })\n                 } else {\n                     Err(standard_error(OtherIoError))\n                 };\n@@ -219,28 +215,19 @@ impl RtioTcpListener for UvTcpListener {\n     }\n }\n \n-pub struct UvTcpStream(StreamWatcher);\n+// FIXME #6090: Prefer newtype structs but Drop doesn't work\n+pub struct UvTcpStream {\n+    watcher: StreamWatcher\n+}\n \n impl UvTcpStream {\n-    fn new(watcher: StreamWatcher) -> UvTcpStream {\n-        UvTcpStream(watcher)\n-    }\n-\n-    fn watcher(&self) -> StreamWatcher {\n-        match self { &UvTcpStream(w) => w }\n-    }\n-\n-    // XXX: finalize isn't working for ~UvStream???\n-    fn close(&self) {\n-        // XXX: Need to wait until this finishes before returning\n-        self.watcher().close(||());\n-    }\n+    fn watcher(&self) -> StreamWatcher { self.watcher }\n }\n \n impl Drop for UvTcpStream {\n     fn finalize(&self) {\n         rtdebug!(\"closing stream\");\n-        //self.watcher().close(||());\n+        self.watcher().close(||());\n     }\n }\n \n@@ -354,8 +341,6 @@ fn test_simple_tcp_server_and_client() {\n                     rtdebug!(\"%u\", buf[i] as uint);\n                     assert!(buf[i] == i as u8);\n                 }\n-                stream.close();\n-                listener.close();\n             }\n         }\n \n@@ -364,7 +349,6 @@ fn test_simple_tcp_server_and_client() {\n                 let io = local_sched::unsafe_borrow_io();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-                stream.close();\n             }\n         }\n     }\n@@ -408,9 +392,6 @@ fn test_read_and_block() {\n \n             // Make sure we had multiple reads\n             assert!(reads > 1);\n-\n-            stream.close();\n-            listener.close();\n         }\n \n         do spawntask_immediately {\n@@ -421,7 +402,6 @@ fn test_read_and_block() {\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-                stream.close();\n             }\n         }\n \n@@ -445,8 +425,6 @@ fn test_read_read_read() {\n                     stream.write(buf);\n                     total_bytes_written += buf.len();\n                 }\n-                stream.close();\n-                listener.close();\n             }\n         }\n \n@@ -465,7 +443,6 @@ fn test_read_read_read() {\n                     }\n                 }\n                 rtdebug!(\"read %u bytes total\", total_bytes_read as uint);\n-                stream.close();\n             }\n         }\n     }"}]}