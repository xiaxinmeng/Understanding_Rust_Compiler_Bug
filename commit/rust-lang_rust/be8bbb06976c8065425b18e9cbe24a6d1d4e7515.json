{"sha": "be8bbb06976c8065425b18e9cbe24a6d1d4e7515", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOGJiYjA2OTc2YzgwNjU0MjViMThlOWNiZTI0YTZkMWQ0ZTc1MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-10T01:16:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-10T01:16:48Z"}, "message": "Auto merge of #62756 - newpavlov:stabilize_dur_float, r=alexcrichton\n\nStabilize duration_float\n\nCloses: #54361", "tree": {"sha": "d588c0a9f8663cbe63a93aa967ef30ed92b7c700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d588c0a9f8663cbe63a93aa967ef30ed92b7c700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8bbb06976c8065425b18e9cbe24a6d1d4e7515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8bbb06976c8065425b18e9cbe24a6d1d4e7515", "html_url": "https://github.com/rust-lang/rust/commit/be8bbb06976c8065425b18e9cbe24a6d1d4e7515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8bbb06976c8065425b18e9cbe24a6d1d4e7515/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff76ad8dd90a6beae0018e773936727e5ad5d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff76ad8dd90a6beae0018e773936727e5ad5d2a", "html_url": "https://github.com/rust-lang/rust/commit/0ff76ad8dd90a6beae0018e773936727e5ad5d2a"}, {"sha": "4281e6136df6886462e8da4e45877f6eeecd552a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4281e6136df6886462e8da4e45877f6eeecd552a", "html_url": "https://github.com/rust-lang/rust/commit/4281e6136df6886462e8da4e45877f6eeecd552a"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "5a0e4388e0325b485f66d4e841dc9c1d7dcd638d", "filename": "src/libcore/time.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be8bbb06976c8065425b18e9cbe24a6d1d4e7515/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8bbb06976c8065425b18e9cbe24a6d1d4e7515/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=be8bbb06976c8065425b18e9cbe24a6d1d4e7515", "patch": "@@ -505,15 +505,14 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.as_secs_f64(), 2.7);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub const fn as_secs_f64(&self) -> f64 {\n+    pub fn as_secs_f64(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n     }\n \n@@ -523,15 +522,14 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.as_secs_f32(), 2.7);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub const fn as_secs_f32(&self) -> f32 {\n+    pub fn as_secs_f32(&self) -> f32 {\n         (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n     }\n \n@@ -543,13 +541,12 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::from_secs_f64(2.7);\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn from_secs_f64(secs: f64) -> Duration {\n         const MAX_NANOS_F64: f64 =\n@@ -579,13 +576,12 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::from_secs_f32(2.7);\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn from_secs_f32(secs: f32) -> Duration {\n         const MAX_NANOS_F32: f32 =\n@@ -614,14 +610,13 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n     /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn mul_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(rhs * self.as_secs_f64())\n@@ -634,7 +629,6 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n@@ -643,7 +637,7 @@ impl Duration {\n     /// assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_640));\n     /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn mul_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(rhs * self.as_secs_f32())\n@@ -656,15 +650,14 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n     /// // note that truncation is used, not rounding\n     /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn div_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(self.as_secs_f64() / rhs)\n@@ -677,7 +670,6 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n@@ -687,7 +679,7 @@ impl Duration {\n     /// // note that truncation is used, not rounding\n     /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn div_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(self.as_secs_f32() / rhs)\n@@ -697,14 +689,14 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n+    /// #![feature(div_duration)]\n     /// use std::time::Duration;\n     ///\n     /// let dur1 = Duration::new(2, 700_000_000);\n     /// let dur2 = Duration::new(5, 400_000_000);\n     /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[unstable(feature = \"div_duration\", issue = \"63139\")]\n     #[inline]\n     pub fn div_duration_f64(self, rhs: Duration) -> f64 {\n         self.as_secs_f64() / rhs.as_secs_f64()\n@@ -714,14 +706,14 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n+    /// #![feature(div_duration)]\n     /// use std::time::Duration;\n     ///\n     /// let dur1 = Duration::new(2, 700_000_000);\n     /// let dur2 = Duration::new(5, 400_000_000);\n     /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[unstable(feature = \"div_duration\", issue = \"63139\")]\n     #[inline]\n     pub fn div_duration_f32(self, rhs: Duration) -> f32 {\n         self.as_secs_f32() / rhs.as_secs_f32()"}]}