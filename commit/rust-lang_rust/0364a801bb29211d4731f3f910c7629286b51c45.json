{"sha": "0364a801bb29211d4731f3f910c7629286b51c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjRhODAxYmIyOTIxMWQ0NzMxZjNmOTEwYzc2MjkyODZiNTFjNDU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-06-24T18:15:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-06-24T18:15:22Z"}, "message": "Clean up trans_alt_tag to use slots, not assume interior words. Also remove record-based destructuring (hard on eyes). Add execution parts to generic-tag-alt.rs and un-XFAIL it.", "tree": {"sha": "2fb2a4eed938c03fc8259b292929154a5ce0d250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb2a4eed938c03fc8259b292929154a5ce0d250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0364a801bb29211d4731f3f910c7629286b51c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0364a801bb29211d4731f3f910c7629286b51c45", "html_url": "https://github.com/rust-lang/rust/commit/0364a801bb29211d4731f3f910c7629286b51c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0364a801bb29211d4731f3f910c7629286b51c45/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25eb1fd3c9d997e460dff3e03d87e398e616c726", "url": "https://api.github.com/repos/rust-lang/rust/commits/25eb1fd3c9d997e460dff3e03d87e398e616c726", "html_url": "https://github.com/rust-lang/rust/commit/25eb1fd3c9d997e460dff3e03d87e398e616c726"}], "stats": {"total": 97, "additions": 50, "deletions": 47}, "files": [{"sha": "193f04d7ef30a40051116a646ea2e205171a13a4", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0364a801bb29211d4731f3f910c7629286b51c45/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0364a801bb29211d4731f3f910c7629286b51c45/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=0364a801bb29211d4731f3f910c7629286b51c45", "patch": "@@ -322,7 +322,6 @@ TEST_XFAILS_X86 :=  test/run-pass/mlist-cycle.rs \\\n                     test/run-pass/generic-fn-infer.rs \\\n                     test/run-pass/generic-recursive-tag.rs \\\n                     test/run-pass/generic-tag.rs \\\n-                    test/run-pass/generic-tag-alt.rs \\\n                     test/run-pass/bind-obj-ctor.rs \\\n                     test/run-pass/task-comm.rs \\\n                     test/compile-fail/rec-missing-fields.rs \\"}, {"sha": "3213863922e88cbe7c00ea689f87dc532722c55d", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 41, "deletions": 44, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0364a801bb29211d4731f3f910c7629286b51c45/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0364a801bb29211d4731f3f910c7629286b51c45/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=0364a801bb29211d4731f3f910c7629286b51c45", "patch": "@@ -3737,30 +3737,21 @@ let trans_visitor\n     drop_slot_in_current_frame (cell_of_block_slot slot_id) slot None\n \n \n-  and trans_alt_tag { Ast.alt_tag_lval = lval; Ast.alt_tag_arms = arms } =\n-    let ((lval_cell:Il.cell), { Ast.slot_ty = ty_opt }) = trans_lval lval in\n-    let lval_ty =\n-      match ty_opt with\n-          Some ty -> ty\n-        | None -> bug cx \"expected lval type\"\n-    in\n+  and trans_alt_tag (at:Ast.stmt_alt_tag) : unit =\n \n-    let trans_arm { node = (pat, block) } : quad_idx =\n-      (* Translates the pattern and returns the addresses of the branch\n-       * instructions, which are taken if the match fails. *)\n-      let rec trans_pat pat cell (ty:Ast.ty) =\n+    let trans_arm arm : quad_idx =\n+      let (pat, block) = arm.node in\n+        (* Translates the pattern and returns the addresses of the branch\n+         * instructions, which are taken if the match fails. *)\n+      let rec trans_pat pat src_cell src_slot =\n         match pat with\n             Ast.PAT_lit lit ->\n-              let operand = trans_lit lit in\n-              emit (Il.cmp (Il.Cell cell) operand);\n-              let next_jump = mark() in\n-              emit (Il.jmp Il.JNE Il.CodeNone);\n-              [ next_jump ]\n+              trans_compare Il.JNE (trans_lit lit) (Il.Cell src_cell)\n \n           | Ast.PAT_tag (tag_namei, pats) ->\n               let tag_name = tag_namei.node in\n               let ty_tag =\n-                match ty with\n+                match slot_ty src_slot with\n                     Ast.TY_tag tag_ty -> tag_ty\n                   | Ast.TY_iso ti -> (ti.Ast.iso_group).(ti.Ast.iso_index)\n                   | _ -> bug cx \"expected tag type\"\n@@ -3769,50 +3760,56 @@ let trans_visitor\n               let tag_number = arr_idx tag_keys tag_name in\n               let ty_tup = Hashtbl.find ty_tag tag_name in\n \n-              let tag_cell:Il.cell = get_element_ptr cell 0 in\n-              let union_cell = get_element_ptr_dyn_in_current_frame cell 1 in\n+              (* NB: follow any exterior pointer as we go. *)\n+              let src_cell = deref_slot false src_cell src_slot in\n+\n+              (* NB: follow any exterior pointer as we go. *)\n+              let tag_cell:Il.cell = get_element_ptr src_cell 0 in\n+              let union_cell =\n+                get_element_ptr_dyn_in_current_frame src_cell 1\n+              in\n \n-              emit (Il.cmp\n-                      (Il.Cell tag_cell)\n-                      (imm (Int64.of_int tag_number)));\n-              let next_jump = mark() in\n-              emit (Il.jmp Il.JNE Il.CodeNone);\n+              let next_jumps =\n+                trans_compare Il.JNE\n+                  (Il.Cell tag_cell) (imm (Int64.of_int tag_number))\n+              in\n \n               let tup_cell:Il.cell = get_variant_ptr union_cell tag_number in\n \n               let trans_elem_pat i elem_pat : quad_idx list =\n                 let elem_cell =\n                   get_element_ptr_dyn_in_current_frame tup_cell i\n                 in\n-                let elem_ty =\n-                  match ty_tup.(i).Ast.slot_ty with\n-                      Some ty -> ty\n-                    | None -> bug cx \"expected element type\"\n-                in\n-                trans_pat elem_pat elem_cell elem_ty\n+                let elem_slot = ty_tup.(i) in\n+                  trans_pat elem_pat elem_cell elem_slot\n               in\n \n               let elem_jumps = Array.mapi trans_elem_pat pats in\n-              next_jump::(List.concat (Array.to_list elem_jumps))\n+                next_jumps @ (List.concat (Array.to_list elem_jumps))\n \n-          | Ast.PAT_slot ({ node = dst_slot; id = dst_id }, _) ->\n-              let dst_cell = cell_of_block_slot dst_id in\n-              let src_cell = Il.Cell cell in\n-              mov (deref_slot true dst_cell dst_slot) src_cell;\n-              []                  (* irrefutable *)\n+          | Ast.PAT_slot (dst, _) ->\n+              let dst_slot = get_slot cx dst.id in\n+              let dst_cell = cell_of_block_slot dst.id in\n+                trans_copy_slot\n+                  (get_ty_params_of_current_frame()) true\n+                  dst_cell dst_slot\n+                  src_cell src_slot\n+                  None;\n+                []                (* irrefutable *)\n \n           | Ast.PAT_wild -> []    (* irrefutable *)\n       in\n \n-      let next_jumps = trans_pat pat lval_cell lval_ty in\n-      trans_block block;\n-      let last_jump = mark() in\n-      emit (Il.jmp Il.JMP Il.CodeNone);\n-      List.iter patch next_jumps;\n-      last_jump\n+      let (lval_cell, lval_slot) = trans_lval at.Ast.alt_tag_lval in\n+      let next_jumps = trans_pat pat lval_cell lval_slot in\n+        trans_block block;\n+        let last_jump = mark() in\n+          emit (Il.jmp Il.JMP Il.CodeNone);\n+          List.iter patch next_jumps;\n+          last_jump\n     in\n-    let last_jumps = Array.map trans_arm arms in\n-    Array.iter patch last_jumps\n+    let last_jumps = Array.map trans_arm at.Ast.alt_tag_arms in\n+      Array.iter patch last_jumps\n \n   and drop_slots_at_curr_stmt _ : unit =\n     let stmt = Stack.top curr_stmt in"}, {"sha": "302096fb63c4d57d0161fd8bc8df534ea617a067", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0364a801bb29211d4731f3f910c7629286b51c45/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0364a801bb29211d4731f3f910c7629286b51c45/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=0364a801bb29211d4731f3f910c7629286b51c45", "patch": "@@ -1,9 +1,16 @@\n type foo[T] = tag(arm(T));\n \n fn altfoo[T](foo[T] f) {\n+  auto hit = false;\n   alt (f) {\n-    case (arm(x)) {}\n+    case (arm(x)) {\n+      log \"in arm\";\n+      hit = true;\n+    }\n   }\n+  check (hit);\n }\n \n-fn main() {}\n+fn main() {\n+  altfoo[int](arm[int](10));\n+}"}]}