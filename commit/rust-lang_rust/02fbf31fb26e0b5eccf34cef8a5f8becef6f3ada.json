{"sha": "02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZmJmMzFmYjI2ZTBiNWVjY2YzNGNlZjhhNWY4YmVjZWY2ZjNhZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-14T13:42:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-14T13:42:59Z"}, "message": "Auto merge of #30897 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #30821, #30869, #30871, #30874, #30879, #30886, #30892\n- Failed merges: #30864", "tree": {"sha": "554d5d05b0c5f4baee9180cdec5fffd98c10239b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554d5d05b0c5f4baee9180cdec5fffd98c10239b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "html_url": "https://github.com/rust-lang/rust/commit/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3a75fe560362b812f2c4947d449558a9472496", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3a75fe560362b812f2c4947d449558a9472496", "html_url": "https://github.com/rust-lang/rust/commit/5b3a75fe560362b812f2c4947d449558a9472496"}, {"sha": "a964c86d45577f089507a8ecf3e1dc6486166ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a964c86d45577f089507a8ecf3e1dc6486166ac2", "html_url": "https://github.com/rust-lang/rust/commit/a964c86d45577f089507a8ecf3e1dc6486166ac2"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "afffec1a53a913a398f3c34da36e475314f0a845", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_x86_64-unknown-bitrig=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-bitrig=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-bitrig=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-bitrig := -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig := -Wall -Werror -fPIC -m64 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig := -Wall -Werror -fPIE -fPIC -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64 $(LDFLAGS)\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-bitrig := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-unknown-bitrig :="}, {"sha": "d32b1a91944e46366a5100f62808386619a959ef", "filename": "src/doc/book/bibliography.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fdoc%2Fbook%2Fbibliography.md", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fdoc%2Fbook%2Fbibliography.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fbibliography.md?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -33,7 +33,7 @@ Rust, as well as publications about Rust.\n * [Non-blocking steal-half work queues](http://www.cs.bgu.ac.il/%7Ehendlerd/papers/p280-hendler.pdf)\n * [Reagents: expressing and composing fine-grained concurrency](http://www.mpi-sws.org/~turon/reagents.pdf)\n * [Algorithms for scalable synchronization of shared-memory multiprocessors](https://www.cs.rochester.edu/u/scott/papers/1991_TOCS_synch.pdf)\n-* [Epoc-based reclamation](https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-579.pdf).\n+* [Epoch-based reclamation](https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-579.pdf).\n \n ### Others\n "}, {"sha": "ecd196a9f0d1fe5b3b79b4f3b54dd7d8df892ed9", "filename": "src/doc/book/unsafe.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fdoc%2Fbook%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fdoc%2Fbook%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Funsafe.md?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -41,8 +41,8 @@ unsafe impl Scary for i32 {}\n ```\n \n It\u2019s important to be able to explicitly delineate code that may have bugs that\n-cause big problems. If a Rust program segfaults, you can be sure it\u2019s somewhere\n-in the sections marked `unsafe`.\n+cause big problems. If a Rust program segfaults, you can be sure the cause is\n+related to something marked `unsafe`.\n \n # What does \u2018safe\u2019 mean?\n "}, {"sha": "87104b4526f72b670ec916aec08ce7c6627dc57b", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -3677,10 +3677,10 @@ sites are:\n \n * `let` statements where an explicit type is given.\n \n-   For example, `128` is coerced to have type `i8` in the following:\n+   For example, `42` is coerced to have type `i8` in the following:\n \n    ```rust\n-   let _: i8 = 128;\n+   let _: i8 = 42;\n    ```\n \n * `static` and `const` statements (similar to `let` statements).\n@@ -3690,36 +3690,36 @@ sites are:\n   The value being coerced is the actual parameter, and it is coerced to\n   the type of the formal parameter.\n \n-  For example, `128` is coerced to have type `i8` in the following:\n+  For example, `42` is coerced to have type `i8` in the following:\n \n   ```rust\n   fn bar(_: i8) { }\n \n   fn main() {\n-      bar(128);\n+      bar(42);\n   }\n   ```\n \n * Instantiations of struct or variant fields\n \n-  For example, `128` is coerced to have type `i8` in the following:\n+  For example, `42` is coerced to have type `i8` in the following:\n \n   ```rust\n   struct Foo { x: i8 }\n \n   fn main() {\n-      Foo { x: 128 };\n+      Foo { x: 42 };\n   }\n   ```\n \n * Function results, either the final line of a block if it is not\n   semicolon-terminated or any expression in a `return` statement\n \n-  For example, `128` is coerced to have type `i8` in the following:\n+  For example, `42` is coerced to have type `i8` in the following:\n \n   ```rust\n   fn foo() -> i8 {\n-      128\n+      42\n   }\n   ```\n "}, {"sha": "efc28be92a45b8e6c6b3d8afe4d3330a3d58e8e0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -237,17 +237,17 @@ impl<T> Box<T> {\n }\n \n impl<T: ?Sized> Box<T> {\n-    /// Constructs a box from the raw pointer.\n+    /// Constructs a box from a raw pointer.\n     ///\n-    /// After this function call, pointer is owned by resulting box.\n-    /// In particular, it means that `Box` destructor calls destructor\n-    /// of `T` and releases memory. Since the way `Box` allocates and\n-    /// releases memory is unspecified, the only valid pointer to pass\n-    /// to this function is the one taken from another `Box` with\n-    /// `Box::into_raw` function.\n+    /// After calling this function, the raw pointer is owned by the\n+    /// resulting `Box`. Specifically, the `Box` destructor will call\n+    /// the destructor of `T` and free the allocated memory. Since the\n+    /// way `Box` allocates and releases memory is unspecified, the\n+    /// only valid pointer to pass to this function is the one taken\n+    /// from another `Box` via the `Box::into_raw` function.\n     ///\n-    /// Function is unsafe, because improper use of this function may\n-    /// lead to memory problems like double-free, for example if the\n+    /// This function is unsafe because improper use may lead to\n+    /// memory problems. For example, a double-free may occur if the\n     /// function is called twice on the same raw pointer.\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n@@ -257,11 +257,11 @@ impl<T: ?Sized> Box<T> {\n \n     /// Consumes the `Box`, returning the wrapped raw pointer.\n     ///\n-    /// After call to this function, caller is responsible for the memory\n-    /// previously managed by `Box`, in particular caller should properly\n-    /// destroy `T` and release memory. The proper way to do it is to\n-    /// convert pointer back to `Box` with `Box::from_raw` function, because\n-    /// `Box` does not specify, how memory is allocated.\n+    /// After calling this function, the caller is responsible for the\n+    /// memory previously managed by the `Box`. In particular, the\n+    /// caller should properly destroy `T` and release the memory. The\n+    /// proper way to do so is to convert the raw pointer back into a\n+    /// `Box` with the `Box::from_raw` function.\n     ///\n     /// # Examples\n     ///"}, {"sha": "8b876df32af5245b4b40a417e3cde5b8e62e0465", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -10,7 +10,7 @@\n \n //! Collection types.\n //!\n-//! See [std::collections](../std/collections) for a detailed discussion of\n+//! See [std::collections](../std/collections/index.html) for a detailed discussion of\n //! collections in Rust.\n \n #![crate_name = \"collections\"]"}, {"sha": "afcd779ddf19f92db8c6b575b2619905675893a3", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"collections_range\", reason = \"was just added\",\n-            issue = \"27711\")]\n+#![unstable(feature = \"collections_range\",\n+            reason = \"waiting for dust to settle on inclusive ranges\",\n+            issue = \"30877\")]\n \n //! Range syntax.\n "}, {"sha": "766867f284ee1f0c0e5148f7a650b08272501669", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -1384,7 +1384,7 @@ impl str {\n     ///\n     /// For iterating from the front, the [`matches()`] method can be used.\n     ///\n-    /// [`matches`]: #method.matches\n+    /// [`matches()`]: #method.matches\n     ///\n     /// # Examples\n     ///"}, {"sha": "eb9628d6e39dd7e00975dfff28a0f33758ed0d19", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -98,6 +98,7 @@ use boxed::Box;\n /// hello.push_str(\"orld!\");\n /// ```\n ///\n+/// [`char`]: ../primitive.char.html\n /// [`push()`]: #method.push\n /// [`push_str()`]: #method.push_str\n ///\n@@ -199,8 +200,8 @@ use boxed::Box;\n /// ```\n ///\n /// [`as_ptr()`]: #method.as_ptr\n-/// [`len()`]: # method.len\n-/// [`capacity()`]: # method.capacity\n+/// [`len()`]: #method.len\n+/// [`capacity()`]: #method.capacity\n ///\n /// If a `String` has enough capacity, adding elements to it will not\n /// re-allocate. For example, consider this program:\n@@ -480,15 +481,15 @@ impl String {\n     /// Converts a slice of bytes to a `String`, including invalid characters.\n     ///\n     /// A string slice ([`&str`]) is made of bytes ([`u8`]), and a slice of\n-    /// bytes ([`&[u8]`]) is made of bytes, so this function converts between\n+    /// bytes ([`&[u8]`][byteslice]) is made of bytes, so this function converts between\n     /// the two. Not all byte slices are valid string slices, however: [`&str`]\n     /// requires that it is valid UTF-8. During this conversion,\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// `U+FFFD REPLACEMENT CHARACTER`, which looks like this: \ufffd\n     ///\n     /// [`&str`]: ../primitive.str.html\n     /// [`u8`]: ../primitive.u8.html\n-    /// [`&[u8]`]: ../primitive.slice.html\n+    /// [byteslice]: ../primitive.slice.html\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the conversion, there is an unsafe version\n@@ -1347,6 +1348,8 @@ impl FromUtf8Error {\n     ///\n     /// [`Utf8Error`]: ../str/struct.Utf8Error.html\n     /// [`std::str`]: ../str/index.html\n+    /// [`u8`]: ../primitive.u8.html\n+    /// [`&str`]: ../primitive.str.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "e3e783329ec812e003d8d6cd915648eac8c86c86", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -1358,7 +1358,7 @@ pub trait Iterator {\n     /// One of the keys to `collect()`'s power is that many things you might\n     /// not think of as 'collections' actually are. For example, a [`String`]\n     /// is a collection of [`char`]s. And a collection of [`Result<T, E>`] can\n-    /// be thought of as single [`Result<Collection<T>, E>`]. See the examples\n+    /// be thought of as single `Result<Collection<T>, E>`. See the examples\n     /// below for more.\n     ///\n     /// [`String`]: ../string/struct.String.html"}, {"sha": "46ecd3a80b5d12e8bc77f855773a888bc16caf36", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -46,8 +46,8 @@ pub use tables::UNICODE_VERSION;\n /// This `struct` is created by the [`to_lowercase()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_lowercase()`]: primitive.char.html#method.escape_to_lowercase\n-/// [`char`]: primitive.char.html\n+/// [`to_lowercase()`]: ../primitive.char.html#method.to_lowercase\n+/// [`char`]: ../primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToLowercase(CaseMappingIter);\n \n@@ -64,8 +64,8 @@ impl Iterator for ToLowercase {\n /// This `struct` is created by the [`to_uppercase()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_uppercase()`]: primitive.char.html#method.escape_to_uppercase\n-/// [`char`]: primitive.char.html\n+/// [`to_uppercase()`]: ../primitive.char.html#method.to_uppercase\n+/// [`char`]: ../primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToUppercase(CaseMappingIter);\n "}, {"sha": "40533117f06c2353d3a6fe888677c9c32b6ddb96", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=02fbf31fb26e0b5eccf34cef8a5f8becef6f3ada", "patch": "@@ -112,7 +112,7 @@\n //! ```\n //!\n //! `BufWriter` doesn't add any new ways of writing; it just buffers every call\n-//! to [`write()`][write]:\n+//! to [`write()`][write()]:\n //!\n //! ```\n //! use std::io;\n@@ -134,7 +134,7 @@\n //! # }\n //! ```\n //!\n-//! [write]: trait.Write.html#tymethod.write\n+//! [write()]: trait.Write.html#tymethod.write\n //!\n //! ## Standard input and output\n //!\n@@ -399,7 +399,7 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n ///\n /// [`File`][file]s implement `Read`:\n ///\n-/// [file]: ../std/fs/struct.File.html\n+/// [file]: ../fs/struct.File.html\n ///\n /// ```\n /// use std::io;\n@@ -459,7 +459,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -501,7 +501,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -540,7 +540,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -600,7 +600,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -643,7 +643,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -682,7 +682,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -718,7 +718,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// #![feature(io)]\n@@ -753,7 +753,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -789,7 +789,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -823,7 +823,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// #![feature(io)]"}]}