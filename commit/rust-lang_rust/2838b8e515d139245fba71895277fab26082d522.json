{"sha": "2838b8e515d139245fba71895277fab26082d522", "node_id": "C_kwDOAAsO6NoAKDI4MzhiOGU1MTVkMTM5MjQ1ZmJhNzE4OTUyNzdmYWIyNjA4MmQ1MjI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T22:49:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T22:49:50Z"}, "message": "Point at method call when it is the source of the bound error", "tree": {"sha": "7d58d6aa4239dfd753ee4f3541b58f5c03799606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d58d6aa4239dfd753ee4f3541b58f5c03799606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2838b8e515d139245fba71895277fab26082d522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2838b8e515d139245fba71895277fab26082d522", "html_url": "https://github.com/rust-lang/rust/commit/2838b8e515d139245fba71895277fab26082d522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2838b8e515d139245fba71895277fab26082d522/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce486d538b909658f72d6016dae758f075089d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce486d538b909658f72d6016dae758f075089d3c", "html_url": "https://github.com/rust-lang/rust/commit/ce486d538b909658f72d6016dae758f075089d3c"}], "stats": {"total": 260, "additions": 96, "deletions": 164}, "files": [{"sha": "6bc0c2615654952873f464f2b34b272e5169b4d5", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -370,7 +370,11 @@ impl Diagnostic {\n         self.set_span(after);\n         for span_label in before.span_labels() {\n             if let Some(label) = span_label.label {\n-                self.span.push_span_label(after, label);\n+                if span_label.is_primary {\n+                    self.span.push_span_label(after, label);\n+                } else {\n+                    self.span.push_span_label(span_label.span, label);\n+                }\n             }\n         }\n         self"}, {"sha": "162e73faa2a8aabc84637c6a2aad968b0e6060ea", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -3108,6 +3108,16 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         point_at_chain(expr);\n                     }\n                 }\n+                let call_node = hir.find(call_hir_id);\n+                if let Some(Node::Expr(hir::Expr {\n+                    kind: hir::ExprKind::MethodCall(path, rcvr, ..),\n+                    ..\n+                })) = call_node\n+                {\n+                    if Some(rcvr.span) == err.span.primary_span() {\n+                        err.replace_span_with(path.ident.span);\n+                    }\n+                }\n                 if let Some(Node::Expr(hir::Expr {\n                     kind:\n                         hir::ExprKind::Call(hir::Expr { span, .. }, _)"}, {"sha": "422ac5484271d519b82c04d253ef709720b9178a", "filename": "src/test/ui/generic-associated-types/issue-101020.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `for<'a> &'a mut (): Foo<&'a mut ()>` is not satisfied\n-  --> $DIR/issue-101020.rs:31:5\n+  --> $DIR/issue-101020.rs:31:22\n    |\n LL |     (&mut EmptyIter).consume(());\n-   |     ^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |     |\n-   |     the trait `for<'a> Foo<&'a mut ()>` is not implemented for `&'a mut ()`\n+   |                      ^^^^^^^ the trait `for<'a> Foo<&'a mut ()>` is not implemented for `&'a mut ()`\n    |\n note: required for `&'a mut ()` to implement `for<'a> FuncInput<'a, &'a mut ()>`\n   --> $DIR/issue-101020.rs:27:20"}, {"sha": "d70bf6e1d921c3618744544c4763648cd8057d27", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `X: Ord` is not satisfied\n-  --> $DIR/issue-20162.rs:5:5\n+  --> $DIR/issue-20162.rs:5:7\n    |\n LL |     b.sort();\n-   |     ^ ---- required by a bound introduced by this call\n-   |     |\n-   |     the trait `Ord` is not implemented for `X`\n+   |       ^^^^ the trait `Ord` is not implemented for `X`\n    |\n note: required by a bound in `slice::<impl [T]>::sort`\n   --> $SRC_DIR/alloc/src/slice.rs:LL:COL"}, {"sha": "f678df5b42b60d927cf4386889a745d7a553e73a", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -4,12 +4,11 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n     let mut found_e = false;\n \n     let temp: Vec<u8> = it\n-        //~^ ERROR to be an iterator that yields `&_`, but it yields `u8`\n         .take_while(|&x| {\n             found_e = true;\n             false\n         })\n-        .cloned()\n+        .cloned() //~ ERROR to be an iterator that yields `&_`, but it yields `u8`\n         .collect(); //~ ERROR the method\n }\n "}, {"sha": "62d841f37893f67f80161657c81bfe4b59179eb9", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,16 +1,8 @@\n-error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>` to be an iterator that yields `&_`, but it yields `u8`\n-  --> $DIR/issue-31173.rs:6:25\n-   |\n-LL |       let temp: Vec<u8> = it\n-   |  _________________________^\n-LL | |\n-LL | |         .take_while(|&x| {\n-LL | |             found_e = true;\n-LL | |             false\n-LL | |         })\n-   | |__________^ expected reference, found `u8`\n-LL |           .cloned()\n-   |            ------ required by a bound introduced by this call\n+error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>` to be an iterator that yields `&_`, but it yields `u8`\n+  --> $DIR/issue-31173.rs:11:10\n+   |\n+LL |         .cloned()\n+   |          ^^^^^^ expected reference, found `u8`\n    |\n    = note: expected reference `&_`\n                    found type `u8`\n@@ -20,11 +12,11 @@ note: required by a bound in `cloned`\n LL |         Self: Sized + Iterator<Item = &'a T>,\n    |                                ^^^^^^^^^^^^ required by this bound in `Iterator::cloned`\n \n-error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-31173.rs:13:10\n+error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-31173.rs:12:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>` due to unsatisfied trait bounds\n+   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>` due to unsatisfied trait bounds\n    |\n   ::: $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n@@ -37,10 +29,10 @@ LL | pub struct Cloned<I> {\n    | -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]> as Iterator>::Item = &_`\n-           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n-           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n-           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n+           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]> as Iterator>::Item = &_`\n+           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n+           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n+           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "73a9b786fe2b580d41982b38056ebb58474f42fe", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n-  --> $DIR/issue-33941.rs:6:14\n+  --> $DIR/issue-33941.rs:6:36\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^ ------ required by a bound introduced by this call\n-   |              |\n-   |              expected reference, found tuple\n+   |                                    ^^^^^^ expected reference, found tuple\n    |\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`"}, {"sha": "b610e5c1366683b2838d0946fe4b01dbdeefdda4", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -13,12 +13,10 @@ LL |     let sr: Vec<(u32, _, _)> = vec![];\n    |                            +\n \n error[E0277]: a value of type `Vec<(u32, _, _)>` cannot be built from an iterator over elements of type `()`\n-  --> $DIR/issue-34334.rs:5:33\n+  --> $DIR/issue-34334.rs:5:87\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |                                 |\n-   |                                 value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n+   |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<(u32, _, _)>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`"}, {"sha": "c6352978613aa553849af5fb8938b41e80ce9cf9", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n-  --> $DIR/issue-66923-show-error-for-correct-call.rs:8:24\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:8:39\n    |\n LL |     let x2: Vec<f64> = x1.into_iter().collect();\n-   |                        ^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |                        |\n-   |                        value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |                                       ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n@@ -22,12 +20,10 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n-  --> $DIR/issue-66923-show-error-for-correct-call.rs:12:14\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n    |\n LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n-   |              ^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |              |\n-   |              value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |                             ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`"}, {"sha": "99d0d9bd735532bfc8a299ba1a7d9cde7a42dc0d", "filename": "src/test/ui/iterators/collect-into-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -3,5 +3,4 @@ fn main() {\n     //~^ ERROR an array of type `[u32; 10]` cannot be built directly from an iterator\n     //~| NOTE try collecting into a `Vec<{integer}>`, then using `.try_into()`\n     //~| NOTE required by a bound in `collect`\n-    //~| NOTE required by a bound introduced by this call\n }"}, {"sha": "7a07fed1fae3af7ec3bdcd4188ed7e89b1454569", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: an array of type `[u32; 10]` cannot be built directly from an iterator\n-  --> $DIR/collect-into-array.rs:2:31\n+  --> $DIR/collect-into-array.rs:2:39\n    |\n LL |     let whatever: [u32; 10] = (0..10).collect();\n-   |                               ^^^^^^^ ------- required by a bound introduced by this call\n-   |                               |\n-   |                               try collecting into a `Vec<{integer}>`, then using `.try_into()`\n+   |                                       ^^^^^^^ try collecting into a `Vec<{integer}>`, then using `.try_into()`\n    |\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[u32; 10]`\n note: required by a bound in `collect`"}, {"sha": "5a8aacb1a6df0bc392290c051c300d638525cb7f", "filename": "src/test/ui/iterators/collect-into-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -13,6 +13,5 @@ fn main() {\n     //~| NOTE all local variables must have a statically known size\n     //~| NOTE doesn't have a size known at compile-time\n     //~| NOTE doesn't have a size known at compile-time\n-    //~| NOTE required by a bound introduced by this call\n     process_slice(&some_generated_vec);\n }"}, {"sha": "58da222e0397b4172d442f259546c4f0f067e9be", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -22,12 +22,10 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                ^ required by this bound in `Iterator::collect`\n \n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n-  --> $DIR/collect-into-slice.rs:6:30\n+  --> $DIR/collect-into-slice.rs:6:38\n    |\n LL |     let some_generated_vec = (0..10).collect();\n-   |                              ^^^^^^^ ------- required by a bound introduced by this call\n-   |                              |\n-   |                              try explicitly collecting into a `Vec<{integer}>`\n+   |                                      ^^^^^^^ try explicitly collecting into a `Vec<{integer}>`\n    |\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[i32]`\n note: required by a bound in `collect`"}, {"sha": "87116e49245703805c9867ac9db2dce04c287ac1", "filename": "src/test/ui/iterators/invalid-iterator-chain.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -7,25 +7,25 @@ fn main() {\n     println!(\"{}\", scores.sum::<i32>()); //~ ERROR E0277\n     println!(\n         \"{}\",\n-        vec![0, 1] //~ ERROR E0277\n+        vec![0, 1]\n             .iter()\n             .map(|x| x * 2)\n             .map(|x| x as f64)\n             .map(|x| x as i64)\n             .filter(|x| *x > 0)\n             .map(|x| { x + 1 })\n             .map(|x| { x; })\n-            .sum::<i32>(),\n+            .sum::<i32>(), //~ ERROR E0277\n     );\n     println!(\n         \"{}\",\n-        vec![0, 1] //~ ERROR E0277\n+        vec![0, 1]\n             .iter()\n             .map(|x| x * 2)\n             .map(|x| x as f64)\n             .filter(|x| *x > 0.0)\n             .map(|x| { x + 1.0 })\n-            .sum::<i32>(),\n+            .sum::<i32>(), //~ ERROR E0277\n     );\n     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>()); //~ ERROR E0277\n     println!(\"{}\", vec![(), ()].iter().sum::<i32>()); //~ ERROR E0277"}, {"sha": "49651b20fb16db3403dce5bc8e96263475abf338", "filename": "src/test/ui/iterators/invalid-iterator-chain.stderr", "status": "modified", "additions": 16, "deletions": 39, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n-  --> $DIR/invalid-iterator-chain.rs:7:20\n+  --> $DIR/invalid-iterator-chain.rs:7:27\n    |\n LL |     println!(\"{}\", scores.sum::<i32>());\n-   |                    ^^^^^^ --- required by a bound introduced by this call\n-   |                    |\n-   |                    value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=()>`\n+   |                           ^^^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `Sum<()>` is not implemented for `i32`\n    = help: the following other types implement trait `Sum<A>`:\n@@ -29,18 +27,10 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n-  --> $DIR/invalid-iterator-chain.rs:10:9\n-   |\n-LL | /         vec![0, 1]\n-LL | |             .iter()\n-LL | |             .map(|x| x * 2)\n-LL | |             .map(|x| x as f64)\n-...  |\n-LL | |             .map(|x| { x + 1 })\n-LL | |             .map(|x| { x; })\n-   | |____________________________^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=()>`\n-LL |               .sum::<i32>(),\n-   |                --- required by a bound introduced by this call\n+  --> $DIR/invalid-iterator-chain.rs:18:14\n+   |\n+LL |             .sum::<i32>(),\n+   |              ^^^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `Sum<()>` is not implemented for `i32`\n    = help: the following other types implement trait `Sum<A>`:\n@@ -72,17 +62,10 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `f64`\n-  --> $DIR/invalid-iterator-chain.rs:22:9\n-   |\n-LL | /         vec![0, 1]\n-LL | |             .iter()\n-LL | |             .map(|x| x * 2)\n-LL | |             .map(|x| x as f64)\n-LL | |             .filter(|x| *x > 0.0)\n-LL | |             .map(|x| { x + 1.0 })\n-   | |_________________________________^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=f64>`\n-LL |               .sum::<i32>(),\n-   |                --- required by a bound introduced by this call\n+  --> $DIR/invalid-iterator-chain.rs:28:14\n+   |\n+LL |             .sum::<i32>(),\n+   |              ^^^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=f64>`\n    |\n    = help: the trait `Sum<f64>` is not implemented for `i32`\n    = help: the following other types implement trait `Sum<A>`:\n@@ -110,12 +93,10 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n-  --> $DIR/invalid-iterator-chain.rs:30:20\n+  --> $DIR/invalid-iterator-chain.rs:30:54\n    |\n LL |     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>());\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --- required by a bound introduced by this call\n-   |                    |\n-   |                    value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=()>`\n+   |                                                      ^^^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `Sum<()>` is not implemented for `i32`\n    = help: the following other types implement trait `Sum<A>`:\n@@ -136,12 +117,10 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `&()`\n-  --> $DIR/invalid-iterator-chain.rs:31:20\n+  --> $DIR/invalid-iterator-chain.rs:31:40\n    |\n LL |     println!(\"{}\", vec![(), ()].iter().sum::<i32>());\n-   |                    ^^^^^^^^^^^^^^^^^^^ --- required by a bound introduced by this call\n-   |                    |\n-   |                    value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=&()>`\n+   |                                        ^^^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=&()>`\n    |\n    = help: the trait `Sum<&()>` is not implemented for `i32`\n    = help: the following other types implement trait `Sum<A>`:\n@@ -161,12 +140,10 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator over elements of type `()`\n-  --> $DIR/invalid-iterator-chain.rs:40:23\n+  --> $DIR/invalid-iterator-chain.rs:40:25\n    |\n LL |     let g: Vec<i32> = f.collect();\n-   |                       ^ ------- required by a bound introduced by this call\n-   |                       |\n-   |                       value of type `Vec<i32>` cannot be built from `std::iter::Iterator<Item=()>`\n+   |                         ^^^^^^^ value of type `Vec<i32>` cannot be built from `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<i32>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`"}, {"sha": "c66069c4d2570b7fd3e40d962d53c985215aff40", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: a value of type `Bar` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/branches.rs:19:9\n+  --> $DIR/branches.rs:19:28\n    |\n LL |         std::iter::empty().collect()\n-   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |         |\n-   |         value of type `Bar` cannot be built from `std::iter::Iterator<Item=_>`\n+   |                            ^^^^^^^ value of type `Bar` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `Bar`\n note: required by a bound in `collect`"}, {"sha": "a92c3a6809eae634d0e44c0d5904c3d3230e04a6", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion4.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: a value of type `Foo` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/recursion4.rs:10:9\n+  --> $DIR/recursion4.rs:10:28\n    |\n LL |     x = std::iter::empty().collect();\n-   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |         |\n-   |         value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n+   |                            ^^^^^^^ value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `Foo`\n note: required by a bound in `collect`\n@@ -14,12 +12,10 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `impl Debug` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/recursion4.rs:19:9\n+  --> $DIR/recursion4.rs:19:28\n    |\n LL |     x = std::iter::empty().collect();\n-   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |         |\n-   |         value of type `impl Debug` cannot be built from `std::iter::Iterator<Item=_>`\n+   |                            ^^^^^^^ value of type `impl Debug` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `impl Debug`\n note: required by a bound in `collect`"}, {"sha": "c2515c40b1d778373235367e02fdfaefb501fb0b", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: `Foo` doesn't implement `Debug`\n-  --> $DIR/method-help-unsatisfied-bound.rs:5:5\n+  --> $DIR/method-help-unsatisfied-bound.rs:5:7\n    |\n LL |     a.unwrap();\n-   |     ^ ------ required by a bound introduced by this call\n-   |     |\n-   |     `Foo` cannot be formatted using `{:?}`\n+   |       ^^^^^^ `Foo` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`"}, {"sha": "37d94cf0ebd8c515e7c1d1db7fb7a01ad1276c34", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,13 +1,11 @@\n error[E0277]: the trait bound `S: Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n-  --> $DIR/not-clone-closure.rs:11:17\n+  --> $DIR/not-clone-closure.rs:11:23\n    |\n LL |     let hello = move || {\n    |                 ------- within this `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n ...\n LL |     let hello = hello.clone();\n-   |                 ^^^^^ ----- required by a bound introduced by this call\n-   |                 |\n-   |                 within `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`, the trait `Clone` is not implemented for `S`\n+   |                       ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`, the trait `Clone` is not implemented for `S`\n    |\n note: required because it's used within this closure\n   --> $DIR/not-clone-closure.rs:7:17"}, {"sha": "70706541ad650e83391cd526d65c331802c6537d", "filename": "src/test/ui/on-unimplemented/sum.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `&()`\n-  --> $DIR/sum.rs:4:5\n+  --> $DIR/sum.rs:4:25\n    |\n LL |     vec![(), ()].iter().sum::<i32>();\n-   |     ^^^^^^^^^^^^^^^^^^^ --- required by a bound introduced by this call\n-   |     |\n-   |     value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=&()>`\n+   |                         ^^^ value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=&()>`\n    |\n    = help: the trait `Sum<&()>` is not implemented for `i32`\n    = help: the following other types implement trait `Sum<A>`:\n@@ -24,12 +22,10 @@ LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by multiplying all elements of type `&()` from an iterator\n-  --> $DIR/sum.rs:7:5\n+  --> $DIR/sum.rs:7:25\n    |\n LL |     vec![(), ()].iter().product::<i32>();\n-   |     ^^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n-   |     |\n-   |     value of type `i32` cannot be made by multiplying all elements from a `std::iter::Iterator<Item=&()>`\n+   |                         ^^^^^^^ value of type `i32` cannot be made by multiplying all elements from a `std::iter::Iterator<Item=&()>`\n    |\n    = help: the trait `Product<&()>` is not implemented for `i32`\n    = help: the following other types implement trait `Product<A>`:"}, {"sha": "f9d0d1f7875fb891b4016ed2078de369beeecca8", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `NonConstImpl: ~const ConstDefaultFn` is not satisfied\n-  --> $DIR/const-default-method-bodies.rs:24:5\n+  --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n-   |     ^^^^^^^^^^^^ - required by a bound introduced by this call\n-   |     |\n-   |     the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n+   |                  ^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n    |\n note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that implementation is not `const`\n   --> $DIR/const-default-method-bodies.rs:24:5"}, {"sha": "633b7cc255a52a817a20a02d03afbdf079247331", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gatednc.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:17:5\n+  --> $DIR/cross-crate.rs:17:14\n    |\n LL |     NonConst.func();\n-   |     ^^^^^^^^ ---- required by a bound introduced by this call\n-   |     |\n-   |     the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n    |\n note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n   --> $DIR/cross-crate.rs:17:5"}, {"sha": "9e97d3f11376014a3f08bd9eb596d664e70c0e4a", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stocknc.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `cross_crate::NonConst: cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:17:5\n+  --> $DIR/cross-crate.rs:17:14\n    |\n LL |     NonConst.func();\n-   |     ^^^^^^^^ ---- required by a bound introduced by this call\n-   |     |\n-   |     the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n    |\n note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n   --> $DIR/cross-crate.rs:17:5"}, {"sha": "21ecddaffbb6517c64933d1c5114bed8bd42eb38", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:9\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n-   |         ^^ - required by a bound introduced by this call\n-   |         |\n-   |         the trait `~const Tr` is not implemented for `()`\n+   |            ^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n   --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:9"}, {"sha": "13fc719f28c5c2ad681a357c78c1df7170f691d7", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yn.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:15:7\n    |\n LL |     x.a();\n-   |     ^ - required by a bound introduced by this call\n-   |     |\n-   |     the trait `~const Foo` is not implemented for `T`\n+   |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n   --> $DIR/super-traits-fail-2.rs:15:5"}, {"sha": "13fc719f28c5c2ad681a357c78c1df7170f691d7", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yy.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:15:7\n    |\n LL |     x.a();\n-   |     ^ - required by a bound introduced by this call\n-   |     |\n-   |     the trait `~const Foo` is not implemented for `T`\n+   |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n   --> $DIR/super-traits-fail-2.rs:15:5"}, {"sha": "a5e6f5b5ffcb0a40fa7a4041ea1baff58bdd7042", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `&[i8]: From<&[u8]>` is not satisfied\n-  --> $DIR/issue-71394-no-from-impl.rs:3:20\n+  --> $DIR/issue-71394-no-from-impl.rs:3:25\n    |\n LL |     let _: &[i8] = data.into();\n-   |                    ^^^^ ---- required by a bound introduced by this call\n-   |                    |\n-   |                    the trait `From<&[u8]>` is not implemented for `&[i8]`\n+   |                         ^^^^ the trait `From<&[u8]>` is not implemented for `&[i8]`\n    |\n    = help: the following other types implement trait `From<T>`:\n              <[T; LANES] as From<Simd<T, LANES>>>"}, {"sha": "9062a0fab630a3103d5e8ac839e5b1a54dd90b40", "filename": "src/test/ui/traits/issue-97576.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `String: From<impl ToString>` is not satisfied\n-  --> $DIR/issue-97576.rs:8:18\n+  --> $DIR/issue-97576.rs:8:22\n    |\n LL |             bar: bar.into(),\n-   |                  ^^^ ---- required by a bound introduced by this call\n-   |                  |\n-   |                  the trait `From<impl ToString>` is not implemented for `String`\n+   |                      ^^^^ the trait `From<impl ToString>` is not implemented for `String`\n    |\n    = note: required for `impl ToString` to implement `Into<String>`\n "}, {"sha": "d7b95f55769fdc600f7b37ff9ec22b43e9844215", "filename": "src/test/ui/unsized/issue-71659.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2838b8e515d139245fba71895277fab26082d522/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr?ref=2838b8e515d139245fba71895277fab26082d522", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `dyn Foo: CastTo<[i32]>` is not satisfied\n-  --> $DIR/issue-71659.rs:30:13\n+  --> $DIR/issue-71659.rs:30:15\n    |\n LL |     let x = x.cast::<[i32]>();\n-   |             ^ ---- required by a bound introduced by this call\n-   |             |\n-   |             the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n+   |               ^^^^ the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n    |\n note: required by a bound in `Cast::cast`\n   --> $DIR/issue-71659.rs:19:15"}]}