{"sha": "b588edc41374c217b290dad0a27d6206ef183cdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ODhlZGM0MTM3NGMyMTdiMjkwZGFkMGEyN2Q2MjA2ZWYxODNjZGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-12T11:02:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:55Z"}, "message": "only normalize operand types when in an ADT constructor", "tree": {"sha": "00787f141ca821ee236dff28932e0bc0129d1716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00787f141ca821ee236dff28932e0bc0129d1716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b588edc41374c217b290dad0a27d6206ef183cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b588edc41374c217b290dad0a27d6206ef183cdb", "html_url": "https://github.com/rust-lang/rust/commit/b588edc41374c217b290dad0a27d6206ef183cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b588edc41374c217b290dad0a27d6206ef183cdb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527a5dd2517f7ca7857ebd006a3cc6bcd0abec39", "url": "https://api.github.com/repos/rust-lang/rust/commits/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39", "html_url": "https://github.com/rust-lang/rust/commit/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "63cbc637547d647c53f532d39abe17d3ca8fd572", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b588edc41374c217b290dad0a27d6206ef183cdb/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b588edc41374c217b290dad0a27d6206ef183cdb/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=b588edc41374c217b290dad0a27d6206ef183cdb", "patch": "@@ -47,7 +47,7 @@ pub fn compute_regions<'a, 'gcx, 'tcx>(\n \n     // Run the MIR type-checker.\n     let mir_node_id = infcx.tcx.hir.as_local_node_id(def_id).unwrap();\n-    let constraint_sets = &type_check::type_check(infcx, mir_node_id, param_env, mir);\n+    let constraint_sets = &type_check::type_check(infcx, mir_node_id, param_env, mir, def_id);\n \n     // Create the region inference context, taking ownership of the region inference\n     // data that was contained in `infcx`."}, {"sha": "cdfa506a3c2e359746d9d9ce1ca24c57efd72e84", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b588edc41374c217b290dad0a27d6206ef183cdb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b588edc41374c217b290dad0a27d6206ef183cdb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=b588edc41374c217b290dad0a27d6206ef183cdb", "patch": "@@ -11,6 +11,8 @@\n //! This pass type-checks the MIR to ensure it is not broken.\n #![allow(unreachable_code)]\n \n+use rustc::hir::def_id::DefId;\n+use rustc::hir::map::DefPathData;\n use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n use rustc::infer::region_constraints::RegionConstraintData;\n use rustc::traits::{self, FulfillmentContext};\n@@ -41,8 +43,9 @@ pub fn type_check<'a, 'gcx, 'tcx>(\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n+    mir_def_id: DefId,\n ) -> MirTypeckRegionConstraints<'tcx> {\n-    let mut checker = TypeChecker::new(infcx, body_id, param_env);\n+    let mut checker = TypeChecker::new(infcx, body_id, param_env, mir_def_id);\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, mir);\n         verifier.visit_mir(mir);\n@@ -408,6 +411,11 @@ pub struct TypeChecker<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     body_id: ast::NodeId,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n     constraints: MirTypeckRegionConstraints<'tcx>,\n+\n+    // FIXME(#45940) - True if this is a MIR shim or ADT constructor\n+    // (e.g., for a tuple struct.) In that case, the internal types of\n+    // operands and things require normalization.\n+    is_adt_constructor: bool,\n }\n \n /// A collection of region constraints that must be satisfied for the\n@@ -459,14 +467,22 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n         body_id: ast::NodeId,\n         param_env: ty::ParamEnv<'gcx>,\n+        mir_def_id: DefId,\n     ) -> Self {\n+        let def_key = infcx.tcx.def_key(mir_def_id);\n+        let is_adt_constructor = match def_key.disambiguated_data.data {\n+            DefPathData::StructCtor => true,\n+            _ => false,\n+        };\n+\n         TypeChecker {\n             infcx,\n             last_span: DUMMY_SP,\n             body_id,\n             param_env,\n             reported_errors: FxHashSet(),\n             constraints: MirTypeckRegionConstraints::default(),\n+            is_adt_constructor,\n         }\n     }\n \n@@ -1086,7 +1102,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             };\n                             let op_ty = match op {\n                                 Operand::Consume(lv) => {\n-                                    self.normalize(&lv.ty(mir, tcx), location).to_ty(tcx)\n+                                    let lv_ty = lv.ty(mir, tcx).to_ty(tcx);\n+                                    if self.is_adt_constructor {\n+                                        self.normalize(&lv_ty, location)\n+                                    } else {\n+                                        lv_ty\n+                                    }\n                                 }\n                                 Operand::Constant(c) => c.ty,\n                             };\n@@ -1178,7 +1199,7 @@ impl MirPass for TypeckMir {\n         }\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n-            let _region_constraint_sets = type_check(&infcx, id, param_env, mir);\n+            let _region_constraint_sets = type_check(&infcx, id, param_env, mir, def_id);\n \n             // For verification purposes, we just ignore the resulting\n             // region constraint sets. Not our problem. =)"}]}