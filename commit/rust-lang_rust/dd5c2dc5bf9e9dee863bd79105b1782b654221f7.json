{"sha": "dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNWMyZGM1YmY5ZTlkZWU4NjNiZDc5MTA1YjE3ODJiNjU0MjIxZjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T13:49:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T13:49:05Z"}, "message": "Move ImportId", "tree": {"sha": "85d06e13d0ba19d0e9e855ad013219ba0308e725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d06e13d0ba19d0e9e855ad013219ba0308e725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "html_url": "https://github.com/rust-lang/rust/commit/dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338ff052c2fe658d6fcf88888918b2e372129e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/338ff052c2fe658d6fcf88888918b2e372129e21", "html_url": "https://github.com/rust-lang/rust/commit/338ff052c2fe658d6fcf88888918b2e372129e21"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "07c56843a0413cde5b11598e8380b203ad07422f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "patch": "@@ -9,11 +9,11 @@ use hir_def::{\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n-    nameres::{per_ns::PerNs, raw::ImportId},\n+    nameres::per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n-    ModuleId, UnionId,\n+    ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalImportId,\n+    LocalStructFieldId, Lookup, ModuleId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -229,7 +229,7 @@ impl Module {\n \n pub struct Import {\n     pub(crate) parent: Module,\n-    pub(crate) id: ImportId,\n+    pub(crate) id: LocalImportId,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "b74038b50c54d7f8b0469c219da5f596ae0d8aea", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "patch": "@@ -99,6 +99,10 @@ impl ModuleSource {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct LocalImportId(RawId);\n+impl_arena_id!(LocalImportId);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n     pub krate: CrateId,"}, {"sha": "0b3b60a3726eb43457634b7c6187849222ed00c6", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "patch": "@@ -72,11 +72,9 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use crate::{\n     builtin_type::BuiltinType,\n     db::DefDatabase,\n-    nameres::{\n-        diagnostics::DefDiagnostic, path_resolution::ResolveMode, per_ns::PerNs, raw::ImportId,\n-    },\n+    nameres::{diagnostics::DefDiagnostic, path_resolution::ResolveMode, per_ns::PerNs},\n     path::Path,\n-    AstId, CrateModuleId, FunctionId, ImplId, ModuleDefId, ModuleId, TraitId,\n+    AstId, CrateModuleId, FunctionId, ImplId, LocalImportId, ModuleDefId, ModuleId, TraitId,\n };\n \n /// Contains all top-level defs from a macro-expanded crate\n@@ -213,7 +211,7 @@ pub struct Resolution {\n     /// None for unresolved\n     pub def: PerNs,\n     /// ident by which this is imported into local scope.\n-    pub import: Option<ImportId>,\n+    pub import: Option<LocalImportId>,\n }\n \n impl CrateDefMap {"}, {"sha": "4a671b8f3cb17bfa034be705aa3abdeac182cc6b", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "patch": "@@ -20,8 +20,8 @@ use crate::{\n     },\n     path::{Path, PathKind},\n     AdtId, AstId, AstItemDef, ConstLoc, ContainerId, CrateModuleId, EnumId, EnumVariantId,\n-    FunctionLoc, ImplId, Intern, LocationCtx, ModuleDefId, ModuleId, StaticId, StructId,\n-    StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n+    FunctionLoc, ImplId, Intern, LocalImportId, LocationCtx, ModuleDefId, ModuleId, StaticId,\n+    StructId, StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -94,8 +94,8 @@ impl MacroStackMonitor {\n struct DefCollector<'a, DB> {\n     db: &'a DB,\n     def_map: CrateDefMap,\n-    glob_imports: FxHashMap<CrateModuleId, Vec<(CrateModuleId, raw::ImportId)>>,\n-    unresolved_imports: Vec<(CrateModuleId, raw::ImportId, raw::ImportData)>,\n+    glob_imports: FxHashMap<CrateModuleId, Vec<(CrateModuleId, LocalImportId)>>,\n+    unresolved_imports: Vec<(CrateModuleId, LocalImportId, raw::ImportData)>,\n     unexpanded_macros: Vec<(CrateModuleId, AstId<ast::MacroCall>, Path)>,\n     mod_dirs: FxHashMap<CrateModuleId, ModDir>,\n \n@@ -293,7 +293,7 @@ where\n         &mut self,\n         module_id: CrateModuleId,\n         def: PerNs,\n-        import_id: raw::ImportId,\n+        import_id: LocalImportId,\n         import: &raw::ImportData,\n     ) {\n         if import.is_glob {\n@@ -388,7 +388,7 @@ where\n     fn update(\n         &mut self,\n         module_id: CrateModuleId,\n-        import: Option<raw::ImportId>,\n+        import: Option<LocalImportId>,\n         resolutions: &[(Name, Resolution)],\n     ) {\n         self.update_recursive(module_id, import, resolutions, 0)\n@@ -397,7 +397,7 @@ where\n     fn update_recursive(\n         &mut self,\n         module_id: CrateModuleId,\n-        import: Option<raw::ImportId>,\n+        import: Option<LocalImportId>,\n         resolutions: &[(Name, Resolution)],\n         depth: usize,\n     ) {"}, {"sha": "8ee6f54cdc7940009d8bf3f25f6636d3cccd99fc", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5c2dc5bf9e9dee863bd79105b1782b654221f7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=dd5c2dc5bf9e9dee863bd79105b1782b654221f7", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     attr::{Attr, Attrs},\n     db::DefDatabase,\n     path::Path,\n-    FileAstId, HirFileId, ModuleSource, Source,\n+    FileAstId, HirFileId, LocalImportId, ModuleSource, Source,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -30,7 +30,7 @@ use crate::{\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct RawItems {\n     modules: Arena<Module, ModuleData>,\n-    imports: Arena<ImportId, ImportData>,\n+    imports: Arena<LocalImportId, ImportData>,\n     defs: Arena<Def, DefData>,\n     macros: Arena<Macro, MacroData>,\n     impls: Arena<Impl, ImplData>,\n@@ -40,7 +40,7 @@ pub struct RawItems {\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImportSourceMap {\n-    map: ArenaMap<ImportId, ImportSourcePtr>,\n+    map: ArenaMap<LocalImportId, ImportSourcePtr>,\n }\n \n type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n@@ -51,11 +51,11 @@ fn to_node(ptr: ImportSourcePtr, file: &SourceFile) -> ImportSource {\n }\n \n impl ImportSourceMap {\n-    fn insert(&mut self, import: ImportId, ptr: ImportSourcePtr) {\n+    fn insert(&mut self, import: LocalImportId, ptr: ImportSourcePtr) {\n         self.map.insert(import, ptr)\n     }\n \n-    pub fn get(&self, source: &ModuleSource, import: ImportId) -> ImportSource {\n+    pub fn get(&self, source: &ModuleSource, import: LocalImportId) -> ImportSource {\n         let file = match source {\n             ModuleSource::SourceFile(file) => file.clone(),\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n@@ -106,9 +106,9 @@ impl Index<Module> for RawItems {\n     }\n }\n \n-impl Index<ImportId> for RawItems {\n+impl Index<LocalImportId> for RawItems {\n     type Output = ImportData;\n-    fn index(&self, idx: ImportId) -> &ImportData {\n+    fn index(&self, idx: LocalImportId) -> &ImportData {\n         &self.imports[idx]\n     }\n }\n@@ -143,7 +143,7 @@ pub(super) struct RawItem {\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum RawItemKind {\n     Module(Module),\n-    Import(ImportId),\n+    Import(LocalImportId),\n     Def(Def),\n     Macro(Macro),\n     Impl(Impl),\n@@ -159,10 +159,6 @@ pub(super) enum ModuleData {\n     Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct ImportId(RawId);\n-impl_arena_id!(ImportId);\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n     pub(super) path: Path,"}]}