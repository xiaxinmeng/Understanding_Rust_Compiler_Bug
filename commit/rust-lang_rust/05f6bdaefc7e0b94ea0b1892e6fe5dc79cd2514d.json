{"sha": "05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjZiZGFlZmM3ZTBiOTRlYTBiMTg5MmU2ZmU1ZGM3OWNkMjUxNGQ=", "commit": {"author": {"name": "Dan Burkert", "email": "dan@danburkert.com", "date": "2014-10-25T16:29:41Z"}, "committer": {"name": "Dan Burkert", "email": "dan@danburkert.com", "date": "2014-11-01T17:54:34Z"}, "message": "Tuple deserialization should not fail", "tree": {"sha": "0177963e73631f915356ec11b9a3a28a4464760d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0177963e73631f915356ec11b9a3a28a4464760d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "html_url": "https://github.com/rust-lang/rust/commit/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d/comments", "author": {"login": "danburkert", "id": 160242, "node_id": "MDQ6VXNlcjE2MDI0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danburkert", "html_url": "https://github.com/danburkert", "followers_url": "https://api.github.com/users/danburkert/followers", "following_url": "https://api.github.com/users/danburkert/following{/other_user}", "gists_url": "https://api.github.com/users/danburkert/gists{/gist_id}", "starred_url": "https://api.github.com/users/danburkert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danburkert/subscriptions", "organizations_url": "https://api.github.com/users/danburkert/orgs", "repos_url": "https://api.github.com/users/danburkert/repos", "events_url": "https://api.github.com/users/danburkert/events{/privacy}", "received_events_url": "https://api.github.com/users/danburkert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danburkert", "id": 160242, "node_id": "MDQ6VXNlcjE2MDI0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danburkert", "html_url": "https://github.com/danburkert", "followers_url": "https://api.github.com/users/danburkert/followers", "following_url": "https://api.github.com/users/danburkert/following{/other_user}", "gists_url": "https://api.github.com/users/danburkert/gists{/gist_id}", "starred_url": "https://api.github.com/users/danburkert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danburkert/subscriptions", "organizations_url": "https://api.github.com/users/danburkert/orgs", "repos_url": "https://api.github.com/users/danburkert/repos", "events_url": "https://api.github.com/users/danburkert/events{/privacy}", "received_events_url": "https://api.github.com/users/danburkert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca6b082c0573f9d6f6c81403ac7ea4b5b78260d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6b082c0573f9d6f6c81403ac7ea4b5b78260d6", "html_url": "https://github.com/rust-lang/rust/commit/ca6b082c0573f9d6f6c81403ac7ea4b5b78260d6"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "1dfc0d970a91c585ffd58566a3d9aedf4d3b261f", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "patch": "@@ -562,10 +562,12 @@ pub mod reader {\n                          f: |&mut Decoder<'doc>| -> DecodeResult<T>) -> DecodeResult<T> {\n             debug!(\"read_tuple()\");\n             self.read_seq(|d, len| {\n-                assert!(len == tuple_len,\n-                        \"expected tuple of length `{}`, found tuple \\\n-                         of length `{}`\", tuple_len, len);\n-                f(d)\n+                if len == tuple_len {\n+                    f(d)\n+                } else {\n+                    Err(Expected(format!(\"Expected tuple of length `{}`, \\\n+                                          found tuple of length `{}`\", tuple_len, len)))\n+                }\n             })\n         }\n "}, {"sha": "06f934c075d1aaae2e0e4ea41d7addd485b22473", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "patch": "@@ -2153,13 +2153,17 @@ impl ::Decoder<DecoderError> for Decoder {\n         Ok(value)\n     }\n \n-    fn read_tuple<T>(&mut self, tuple_len: uint, f: |&mut Decoder| -> DecodeResult<T>) -> DecodeResult<T> {\n+    fn read_tuple<T>(&mut self,\n+                     tuple_len: uint,\n+                     f: |&mut Decoder| -> DecodeResult<T>)\n+                     -> DecodeResult<T> {\n         debug!(\"read_tuple()\");\n         self.read_seq(|d, len| {\n-            assert!(len == tuple_len,\n-                    \"expected tuple of length `{}`, found tuple \\\n-                         of length `{}`\", tuple_len, len);\n-            f(d)\n+            if len == tuple_len {\n+                f(d)\n+            } else {\n+                Err(ExpectedError(format!(\"Tuple{}\", tuple_len), format!(\"Tuple{}\", len)))\n+            }\n         })\n     }\n \n@@ -2893,9 +2897,8 @@ mod tests {\n     }\n \n     #[test]\n-    #[should_fail]\n     fn test_decode_tuple_malformed_length() {\n-        let _ = super::decode::<(uint, uint)>(\"[1, 2, 3]\");\n+        assert!(super::decode::<(uint, uint)>(\"[1, 2, 3]\").is_err());\n     }\n \n     #[test]"}]}