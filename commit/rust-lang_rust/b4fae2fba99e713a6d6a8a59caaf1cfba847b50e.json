{"sha": "b4fae2fba99e713a6d6a8a59caaf1cfba847b50e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZmFlMmZiYTk5ZTcxM2E2ZDZhOGE1OWNhYWYxY2ZiYTg0N2I1MGU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-01-11T01:32:54Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-01-11T01:32:54Z"}, "message": "Implement Show for types in std::io::{buffered,util}\n\nA derived implementation would not be appropriate for the Buffered types\nsince the buffer is both huge (64k by default) and full of uninitialized\nmemory. Instead of printing the whole thing, we display how full it is.\n\nI also altered MultiWriter to make it generic over Writers instead of\ntaking Box<Writer> trait objects. Box<Writer> implements Writer so\nexisting use cases should continue to work, and this enables a more\nuseful Show implementation in applicable cases.\n\nThe change to MultiWriter may break code that uses it, but any fixes\nshould be easy.\n\n[breaking-change]", "tree": {"sha": "3e029277b399285fc863062896c1a4ed8ea0678a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e029277b399285fc863062896c1a4ed8ea0678a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e", "comment_count": 11, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e", "html_url": "https://github.com/rust-lang/rust/commit/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099b411e080d302ec0dc5f3aebe53d76c50acfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/099b411e080d302ec0dc5f3aebe53d76c50acfc7", "html_url": "https://github.com/rust-lang/rust/commit/099b411e080d302ec0dc5f3aebe53d76c50acfc7"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "36def48b88b324d633453d236b624874bf1e895d", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b4fae2fba99e713a6d6a8a59caaf1cfba847b50e", "patch": "@@ -13,6 +13,7 @@\n //! Buffering wrappers for I/O traits\n \n use cmp;\n+use fmt;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n use iter::{IteratorExt, ExactSizeIterator};\n use ops::Drop;\n@@ -51,6 +52,13 @@ pub struct BufferedReader<R> {\n     cap: uint,\n }\n \n+impl<R> fmt::Show for BufferedReader<R> where R: fmt::Show {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"BufferedReader {{ reader: {:?}, buffer: {}/{} }}\",\n+               self.inner, self.cap - self.pos, self.buf.len())\n+    }\n+}\n+\n impl<R: Reader> BufferedReader<R> {\n     /// Creates a new `BufferedReader` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: R) -> BufferedReader<R> {\n@@ -148,6 +156,13 @@ pub struct BufferedWriter<W> {\n     pos: uint\n }\n \n+impl<W> fmt::Show for BufferedWriter<W> where W: fmt::Show {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"BufferedWriter {{ writer: {:?}, buffer: {}/{} }}\",\n+               self.inner.as_ref().unwrap(), self.pos, self.buf.len())\n+    }\n+}\n+\n impl<W: Writer> BufferedWriter<W> {\n     /// Creates a new `BufferedWriter` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: W) -> BufferedWriter<W> {\n@@ -235,6 +250,13 @@ pub struct LineBufferedWriter<W> {\n     inner: BufferedWriter<W>,\n }\n \n+impl<W> fmt::Show for LineBufferedWriter<W> where W: fmt::Show {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"LineBufferedWriter {{ writer: {:?}, buffer: {}/{} }}\",\n+               self.inner.inner, self.inner.pos, self.inner.buf.len())\n+    }\n+}\n+\n impl<W: Writer> LineBufferedWriter<W> {\n     /// Creates a new `LineBufferedWriter`\n     pub fn new(inner: W) -> LineBufferedWriter<W> {\n@@ -318,6 +340,17 @@ pub struct BufferedStream<S> {\n     inner: BufferedReader<InternalBufferedWriter<S>>\n }\n \n+impl<S> fmt::Show for BufferedStream<S> where S: fmt::Show {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        let reader = &self.inner;\n+        let writer = &self.inner.inner.0;\n+        write!(fmt, \"BufferedStream {{ stream: {:?}, write_buffer: {}/{}, read_buffer: {}/{} }}\",\n+               writer.inner,\n+               writer.pos, writer.buf.len(),\n+               reader.cap - reader.pos, reader.buf.len())\n+    }\n+}\n+\n impl<S: Stream> BufferedStream<S> {\n     /// Creates a new buffered stream with explicitly listed capacities for the\n     /// reader/writer buffer."}, {"sha": "ac7fb3f9cdb4a40ef8ed65b7711d55cebf31dd1f", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fae2fba99e713a6d6a8a59caaf1cfba847b50e/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=b4fae2fba99e713a6d6a8a59caaf1cfba847b50e", "patch": "@@ -16,6 +16,7 @@ use io;\n use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n+#[derive(Show)]\n pub struct LimitReader<R> {\n     limit: uint,\n     inner: R\n@@ -77,7 +78,7 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub struct NullWriter;\n \n impl Writer for NullWriter {\n@@ -86,7 +87,7 @@ impl Writer for NullWriter {\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub struct ZeroReader;\n \n impl Reader for ZeroReader {\n@@ -107,7 +108,7 @@ impl Buffer for ZeroReader {\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub struct NullReader;\n \n impl Reader for NullReader {\n@@ -128,18 +129,19 @@ impl Buffer for NullReader {\n ///\n /// The `Writer`s are delegated to in order. If any `Writer` returns an error,\n /// that error is returned immediately and remaining `Writer`s are not called.\n-pub struct MultiWriter {\n-    writers: Vec<Box<Writer+'static>>\n+#[derive(Show)]\n+pub struct MultiWriter<W> {\n+    writers: Vec<W>\n }\n \n-impl MultiWriter {\n+impl<W> MultiWriter<W> where W: Writer {\n     /// Creates a new `MultiWriter`\n-    pub fn new(writers: Vec<Box<Writer+'static>>) -> MultiWriter {\n+    pub fn new(writers: Vec<W>) -> MultiWriter<W> {\n         MultiWriter { writers: writers }\n     }\n }\n \n-impl Writer for MultiWriter {\n+impl<W> Writer for MultiWriter<W> where W: Writer {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::IoResult<()> {\n         for writer in self.writers.iter_mut() {\n@@ -159,7 +161,7 @@ impl Writer for MultiWriter {\n \n /// A `Reader` which chains input from multiple `Reader`s, reading each to\n /// completion before moving onto the next.\n-#[derive(Clone)]\n+#[derive(Clone, Show)]\n pub struct ChainedReader<I, R> {\n     readers: I,\n     cur_reader: Option<R>,\n@@ -198,6 +200,7 @@ impl<R: Reader, I: Iterator<Item=R>> Reader for ChainedReader<I, R> {\n \n /// A `Reader` which forwards input from another `Reader`, passing it along to\n /// a `Writer` as well. Similar to the `tee(1)` command.\n+#[derive(Show)]\n pub struct TeeReader<R, W> {\n     reader: R,\n     writer: W,\n@@ -239,7 +242,7 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> io::IoResult<()> {\n }\n \n /// An adaptor converting an `Iterator<u8>` to a `Reader`.\n-#[derive(Clone)]\n+#[derive(Clone, Show)]\n pub struct IterReader<T> {\n     iter: T,\n }"}]}