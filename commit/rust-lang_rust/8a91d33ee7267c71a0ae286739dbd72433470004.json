{"sha": "8a91d33ee7267c71a0ae286739dbd72433470004", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTFkMzNlZTcyNjdjNzFhMGFlMjg2NzM5ZGJkNzI0MzM0NzAwMDQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-30T22:26:04Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-10-02T13:59:31Z"}, "message": "rustc: remove support for Gc.", "tree": {"sha": "bce3af96d144272621cfff512db148ee185a62a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce3af96d144272621cfff512db148ee185a62a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a91d33ee7267c71a0ae286739dbd72433470004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a91d33ee7267c71a0ae286739dbd72433470004", "html_url": "https://github.com/rust-lang/rust/commit/8a91d33ee7267c71a0ae286739dbd72433470004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a91d33ee7267c71a0ae286739dbd72433470004/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1a57e479c13804e1cda5658f482e840c3a1cd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a57e479c13804e1cda5658f482e840c3a1cd79", "html_url": "https://github.com/rust-lang/rust/commit/d1a57e479c13804e1cda5658f482e840c3a1cd79"}], "stats": {"total": 620, "additions": 55, "deletions": 565}, "files": [{"sha": "213e8b44813a05caff2dc3aacb2b9434cd1642e3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -412,26 +412,16 @@ impl LintPass for CTypes {\n     }\n }\n \n-declare_lint!(MANAGED_HEAP_MEMORY, Allow,\n-              \"use of managed (@ type) heap memory\")\n-\n declare_lint!(OWNED_HEAP_MEMORY, Allow,\n               \"use of owned (Box type) heap memory\")\n \n-declare_lint!(HEAP_MEMORY, Allow,\n-              \"use of any (Box type or @ type) heap memory\")\n-\n pub struct HeapMemory;\n \n impl HeapMemory {\n     fn check_heap_type(&self, cx: &Context, span: Span, ty: ty::t) {\n-        let mut n_box = 0i;\n         let mut n_uniq = 0i;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match ty::get(t).sty {\n-                ty::ty_box(_) => {\n-                    n_box += 1;\n-                }\n                 ty::ty_uniq(_) |\n                 ty::ty_closure(box ty::ClosureTy {\n                     store: ty::UniqTraitStore,\n@@ -449,21 +439,13 @@ impl HeapMemory {\n             let s = ty_to_string(cx.tcx, ty);\n             let m = format!(\"type uses owned (Box type) pointers: {}\", s);\n             cx.span_lint(OWNED_HEAP_MEMORY, span, m.as_slice());\n-            cx.span_lint(HEAP_MEMORY, span, m.as_slice());\n-        }\n-\n-        if n_box > 0 {\n-            let s = ty_to_string(cx.tcx, ty);\n-            let m = format!(\"type uses managed (@ type) pointers: {}\", s);\n-            cx.span_lint(MANAGED_HEAP_MEMORY, span, m.as_slice());\n-            cx.span_lint(HEAP_MEMORY, span, m.as_slice());\n         }\n     }\n }\n \n impl LintPass for HeapMemory {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(MANAGED_HEAP_MEMORY, OWNED_HEAP_MEMORY, HEAP_MEMORY)\n+        lint_array!(OWNED_HEAP_MEMORY)\n     }\n \n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {"}, {"sha": "a07518cf3f2d3ae7538540695d02591230eb09be", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -397,7 +397,6 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n         assert_eq!(next(st), '|');\n         return ty::mk_param(st.tcx, space, index, did);\n       }\n-      '@' => return ty::mk_box(st.tcx, parse_ty(st, |x,y| conv(x,y))),\n       '~' => return ty::mk_uniq(st.tcx, parse_ty(st, |x,y| conv(x,y))),\n       '*' => return ty::mk_ptr(st.tcx, parse_mt(st, |x,y| conv(x,y))),\n       '&' => {"}, {"sha": "e3d8d0e53757dc0aaa81d7287cbc228c3713c9f2", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -244,7 +244,6 @@ fn enc_sty(w: &mut SeekableMemWriter, cx: &ctxt, st: &ty::sty) {\n             for t in ts.iter() { enc_ty(w, cx, *t); }\n             mywrite!(w, \"]\");\n         }\n-        ty::ty_box(typ) => { mywrite!(w, \"@\"); enc_ty(w, cx, typ); }\n         ty::ty_uniq(typ) => { mywrite!(w, \"~\"); enc_ty(w, cx, typ); }\n         ty::ty_ptr(mt) => { mywrite!(w, \"*\"); enc_mt(w, cx, mt); }\n         ty::ty_rptr(r, mt) => {"}, {"sha": "e114eb88705bf72a88b2b5184a8117739ae6be7f", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -815,11 +815,6 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         return;\n                     }\n \n-                    mc::cat_deref(_, _, mc::GcPtr) => {\n-                        assert_eq!(cmt.mutbl, mc::McImmutable);\n-                        return;\n-                    }\n-\n                     mc::cat_rvalue(..) |\n                     mc::cat_static_item |\n                     mc::cat_deref(_, _, mc::UnsafePtr(..)) |"}, {"sha": "1ae512a244c0f298e73e9fa0a6a7f6c76d1b6da1", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -132,7 +132,6 @@ fn check_and_get_illegal_move_origin(bccx: &BorrowckCtxt,\n     match cmt.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n         mc::cat_deref(_, _, mc::Implicit(..)) |\n-        mc::cat_deref(_, _, mc::GcPtr) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_upvar(..) | mc::cat_static_item |\n         mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Many, .. }) => {"}, {"sha": "8ec58fe0eeedc7f359dd6310309ec6e49214f4f2", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -82,8 +82,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n \n             mc::cat_downcast(ref base) |\n             mc::cat_deref(ref base, _, mc::OwnedPtr) |     // L-Deref-Send\n-            mc::cat_interior(ref base, _) |                // L-Field\n-            mc::cat_deref(ref base, _, mc::GcPtr) => {\n+            mc::cat_interior(ref base, _) => {             // L-Field\n                 self.check(base, discr_scope)\n             }\n \n@@ -185,7 +184,6 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             }\n             mc::cat_downcast(ref cmt) |\n             mc::cat_deref(ref cmt, _, mc::OwnedPtr) |\n-            mc::cat_deref(ref cmt, _, mc::GcPtr) |\n             mc::cat_interior(ref cmt, _) |\n             mc::cat_discr(ref cmt, _) => {\n                 self.scope(cmt)"}, {"sha": "1b18d07f5905370b3db2d9d274382ce4ada561a8", "filename": "src/librustc/middle/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -114,7 +114,6 @@ fn report_cannot_move_out_of(bccx: &BorrowckCtxt, move_from: mc::cmt) {\n     match move_from.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n         mc::cat_deref(_, _, mc::Implicit(..)) |\n-        mc::cat_deref(_, _, mc::GcPtr) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_upvar(..) | mc::cat_static_item |\n         mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Many, .. }) => {"}, {"sha": "067a73fcc9b7ea8e66a5bc9016629519e893d01d", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -101,16 +101,13 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 self.extend(result, cmt.mutbl, LpInterior(i))\n             }\n \n-            mc::cat_deref(cmt_base, _, pk @ mc::OwnedPtr) |\n-            mc::cat_deref(cmt_base, _, pk @ mc::GcPtr) => {\n+            mc::cat_deref(cmt_base, _, pk @ mc::OwnedPtr) => {\n                 // R-Deref-Send-Pointer\n                 //\n                 // When we borrow the interior of an owned pointer, we\n                 // cannot permit the base to be mutated, because that\n                 // would cause the unique pointer to be freed.\n                 //\n-                // For a managed pointer, the rules are basically the\n-                // same, because this could be the last ref.\n                 // Eventually we should make these non-special and\n                 // just rely on Deref<T> implementation.\n                 let result = self.restrict(cmt_base);"}, {"sha": "234afc7ae7a834a2891763ac4cabeeff1c914e6c", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -730,11 +730,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     span,\n                     format!(\"{} in a static location\", prefix).as_slice());\n             }\n-            mc::AliasableManaged => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    format!(\"{} in a `Gc` pointer\", prefix).as_slice());\n-            }\n             mc::AliasableBorrowed => {\n                 self.tcx.sess.span_err(\n                     span,"}, {"sha": "90d75b9554ba351dde9b01e2706f3a4c17c60428", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -440,11 +440,6 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             }\n         }\n \n-        ty::ty_box(_) => {\n-            assert_eq!(pats_len, 1);\n-            PatBox(pats.nth(0).unwrap())\n-        }\n-\n         ty::ty_vec(_, Some(len)) => {\n             assert_eq!(pats_len, len);\n             PatVec(pats.collect(), None, vec![])\n@@ -681,7 +676,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n pub fn constructor_arity(cx: &MatchCheckCtxt, ctor: &Constructor, ty: ty::t) -> uint {\n     match ty::get(ty).sty {\n         ty::ty_tup(ref fs) => fs.len(),\n-        ty::ty_box(_) | ty::ty_uniq(_) => 1u,\n+        ty::ty_uniq(_) => 1u,\n         ty::ty_rptr(_, ty::mt { ty: ty, .. }) => match ty::get(ty).sty {\n             ty::ty_vec(_, None) => match *ctor {\n                 Slice(length) => length,"}, {"sha": "de291595cccfba2d01d37270f57bd6a7bc84edfa", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -28,8 +28,8 @@ fn type_size_is_affected_by_type_parameters(tcx: &ty::ctxt, typ: ty::t)\n     let mut result = false;\n     ty::maybe_walk_ty(typ, |typ| {\n         match ty::get(typ).sty {\n-            ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_ptr(_) |\n-            ty::ty_rptr(..) | ty::ty_bare_fn(..) | ty::ty_closure(..) => {\n+            ty::ty_uniq(_) | ty::ty_ptr(_) | ty::ty_rptr(..) |\n+            ty::ty_bare_fn(..) | ty::ty_closure(..) => {\n                 false\n             }\n             ty::ty_param(_) => {"}, {"sha": "3c9ebd86b941e9fa5892fef66d0f2a9737e1695b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -279,8 +279,6 @@ lets_do_this! {\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n-    MallocFnLangItem,                \"malloc\",                  malloc_fn;\n-    FreeFnLangItem,                  \"free\",                    free_fn;\n     StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n \n     StartFnLangItem,                 \"start\",                   start_fn;\n@@ -293,9 +291,7 @@ lets_do_this! {\n \n     EhPersonalityLangItem,           \"eh_personality\",          eh_personality;\n \n-    ManagedHeapLangItem,             \"managed_heap\",            managed_heap;\n     ExchangeHeapLangItem,            \"exchange_heap\",           exchange_heap;\n-    GcLangItem,                      \"gc\",                      gc;\n     OwnedBoxLangItem,                \"owned_box\",               owned_box;\n \n     CovariantTypeItem,               \"covariant_type\",          covariant_type;"}, {"sha": "273360c927963c1068e62e4cdcb320a8f4365341", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -104,7 +104,6 @@ pub struct CopiedUpvar {\n #[deriving(Clone, PartialEq, Eq, Hash)]\n pub enum PointerKind {\n     OwnedPtr,\n-    GcPtr,\n     BorrowedPtr(ty::BorrowKind, ty::Region),\n     Implicit(ty::BorrowKind, ty::Region),     // Implicit deref of a borrowed ptr.\n     UnsafePtr(ast::Mutability)\n@@ -191,10 +190,6 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n             Some(deref_ptr(BorrowedPtr(ty::ImmBorrow, r)))\n         }\n \n-        ty::ty_box(..) => {\n-            Some(deref_ptr(GcPtr))\n-        }\n-\n         ty::ty_ptr(ref mt) => {\n             Some(deref_ptr(UnsafePtr(mt.mutbl)))\n         }\n@@ -302,9 +297,6 @@ impl MutabilityCategory {\n             BorrowedPtr(borrow_kind, _) | Implicit(borrow_kind, _) => {\n                 MutabilityCategory::from_borrow_kind(borrow_kind)\n             }\n-            GcPtr => {\n-                McImmutable\n-            }\n             UnsafePtr(m) => {\n                 MutabilityCategory::from_mutbl(m)\n             }\n@@ -1200,7 +1192,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                           Implicit(..) => {\n                             \"dereference (dereference is implicit, due to indexing)\".to_string()\n                           }\n-                          OwnedPtr | GcPtr => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n+                          OwnedPtr => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n                           _ => format!(\"dereference of `{}`-pointer\", ptr_sigil(pk))\n                       }\n                   }\n@@ -1237,7 +1229,6 @@ pub enum InteriorSafety {\n }\n \n pub enum AliasableReason {\n-    AliasableManaged,\n     AliasableBorrowed,\n     AliasableOther,\n     AliasableStatic(InteriorSafety),\n@@ -1256,7 +1247,6 @@ impl cmt_ {\n             cat_copied_upvar(..) |\n             cat_local(..) |\n             cat_deref(_, _, UnsafePtr(..)) |\n-            cat_deref(_, _, GcPtr(..)) |\n             cat_deref(_, _, BorrowedPtr(..)) |\n             cat_deref(_, _, Implicit(..)) |\n             cat_upvar(..) => {\n@@ -1320,10 +1310,6 @@ impl cmt_ {\n                 }\n             }\n \n-            cat_deref(_, _, GcPtr) => {\n-                Some(AliasableManaged)\n-            }\n-\n             cat_deref(_, _, BorrowedPtr(ty::ImmBorrow, _)) |\n             cat_deref(_, _, Implicit(ty::ImmBorrow, _)) => {\n                 Some(AliasableBorrowed)\n@@ -1371,7 +1357,6 @@ impl Repr for categorization {\n pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n     match ptr {\n         OwnedPtr => \"Box\",\n-        GcPtr => \"Gc\",\n         BorrowedPtr(ty::ImmBorrow, _) |\n         Implicit(ty::ImmBorrow, _) => \"&\",\n         BorrowedPtr(ty::MutBorrow, _) |"}, {"sha": "080f9ff5bc7ab22e1ab2ed79d69d40e71bef2f50", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -104,11 +104,6 @@ pub fn ty_is_local(tcx: &ty::ctxt,\n             krate == Some(ast::LOCAL_CRATE) || ty_is_local(tcx, t)\n         }\n \n-        ty::ty_box(t) => {\n-            let krate = tcx.lang_items.gc().map(|d| d.krate);\n-            krate == Some(ast::LOCAL_CRATE) || ty_is_local(tcx, t)\n-        }\n-\n         ty::ty_vec(t, _) |\n         ty::ty_ptr(ty::mt { ty: t, .. }) |\n         ty::ty_rptr(_, ty::mt { ty: t, .. }) => {"}, {"sha": "b86fabccf93de222f7ab68c0bfb97283fccea77d", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -713,23 +713,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ok(self, Always)\n             }\n \n-            ty::ty_box(_) => {\n-                match bound {\n-                    ty::BoundSync |\n-                    ty::BoundSend |\n-                    ty::BoundCopy => {\n-                        // Managed data is not copyable, sendable, nor\n-                        // synchronized, regardless of referent.\n-                        ok(self, Never)\n-                    }\n-\n-                    ty::BoundSized => {\n-                        // But it is sized, regardless of referent.\n-                        ok(self, Always)\n-                    }\n-                }\n-            }\n-\n             ty::ty_uniq(referent_ty) => {  // Box<T>\n                 match bound {\n                     ty::BoundCopy => {"}, {"sha": "506b12de084678f77e1bf5af7a7613b06d910d3d", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -321,9 +321,6 @@ impl Case {\n                     _ => return Some(ThinPointer(i))\n                 },\n \n-                // Gc<T> is just a pointer\n-                ty::ty_box(..) => return Some(ThinPointer(i)),\n-\n                 // Functions are just pointers\n                 ty::ty_bare_fn(..) => return Some(ThinPointer(i)),\n "}, {"sha": "f65827753aa20da5afac614634d015a0228ad1f5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -397,36 +397,6 @@ pub fn malloc_raw_dyn_proc<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: ty::t) -> Resu\n     Result::new(bcx, llbox)\n }\n \n-\n-pub fn malloc_raw_dyn_managed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                          t: ty::t,\n-                                          alloc_fn: LangItem,\n-                                          size: ValueRef)\n-                                          -> Result<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"malloc_raw_dyn_managed\");\n-    let ccx = bcx.ccx();\n-\n-    let langcall = require_alloc_fn(bcx, t, alloc_fn);\n-\n-    // Grab the TypeRef type of box_ptr_ty.\n-    let box_ptr_ty = ty::mk_box(bcx.tcx(), t);\n-    let llty = type_of(ccx, box_ptr_ty);\n-    let llalign = C_uint(ccx, type_of::align_of(ccx, box_ptr_ty) as uint);\n-\n-    // Allocate space:\n-    let drop_glue = glue::get_drop_glue(ccx, t);\n-    let r = callee::trans_lang_call(\n-        bcx,\n-        langcall,\n-        [\n-            PointerCast(bcx, drop_glue, Type::glue_fn(ccx, Type::i8p(ccx)).ptr_to()),\n-            size,\n-            llalign\n-        ],\n-        None);\n-    Result::new(r.bcx, PointerCast(r.bcx, r.val, llty))\n-}\n-\n // Type descriptor and type glue stuff\n \n pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> Rc<tydesc_info> {"}, {"sha": "20fd0b0eb3d8f66728528969806f107bb1fc0e50", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -960,7 +960,6 @@ impl Cleanup for DropValue {\n }\n \n pub enum Heap {\n-    HeapManaged,\n     HeapExchange\n }\n \n@@ -986,9 +985,6 @@ impl Cleanup for FreeValue {\n         apply_debug_loc(bcx.fcx, debug_loc);\n \n         match self.heap {\n-            HeapManaged => {\n-                glue::trans_free(bcx, self.ptr)\n-            }\n             HeapExchange => {\n                 glue::trans_exchange_free_ty(bcx, self.ptr, self.content_ty)\n             }\n@@ -1019,9 +1015,6 @@ impl Cleanup for FreeSlice {\n         apply_debug_loc(bcx.fcx, debug_loc);\n \n         match self.heap {\n-            HeapManaged => {\n-                glue::trans_free(bcx, self.ptr)\n-            }\n             HeapExchange => {\n                 glue::trans_exchange_free_dyn(bcx, self.ptr, self.size, self.align)\n             }"}, {"sha": "7daee22e6146168a8bbef37904a1fc3d21f34fac", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -71,7 +71,7 @@ pub fn type_is_immediate(ccx: &CrateContext, ty: ty::t) -> bool {\n     use middle::trans::type_of::sizing_type_of;\n \n     let tcx = ccx.tcx();\n-    let simple = ty::type_is_scalar(ty) || ty::type_is_boxed(ty) ||\n+    let simple = ty::type_is_scalar(ty) ||\n         ty::type_is_unique(ty) || ty::type_is_region_ptr(ty) ||\n         type_is_newtype_immediate(ccx, ty) || ty::type_is_bot(ty) ||\n         ty::type_is_simd(tcx, ty);"}, {"sha": "260bde0f07f5d55eea35a4ad550275d6b15889a4", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -20,7 +20,6 @@ use middle::trans::common::*;\n use middle::trans::cleanup;\n use middle::trans::cleanup::CleanupMethods;\n use middle::trans::expr;\n-use middle::trans::glue;\n use middle::trans::tvec;\n use middle::trans::type_of;\n use middle::ty;\n@@ -240,14 +239,9 @@ impl KindOps for Lvalue {\n          */\n \n         if ty::type_needs_drop(bcx.tcx(), ty) {\n-            if ty::type_moves_by_default(bcx.tcx(), ty) {\n-                // cancel cleanup of affine values by zeroing out\n-                let () = zero_mem(bcx, val, ty);\n-                bcx\n-            } else {\n-                // incr. refcount for @T or newtype'd @T\n-                glue::take_ty(bcx, val, ty)\n-            }\n+            // cancel cleanup of affine values by zeroing out\n+            let () = zero_mem(bcx, val, ty);\n+            bcx\n         } else {\n             bcx\n         }\n@@ -567,15 +561,15 @@ impl<K:KindOps> Datum<K> {\n          * is moved).\n          */\n \n-        self.shallow_copy(bcx, dst);\n+        self.shallow_copy_raw(bcx, dst);\n \n         self.kind.post_store(bcx, self.val, self.ty)\n     }\n \n-    fn shallow_copy<'blk, 'tcx>(&self,\n-                                bcx: Block<'blk, 'tcx>,\n-                                dst: ValueRef)\n-                                -> Block<'blk, 'tcx> {\n+    fn shallow_copy_raw<'blk, 'tcx>(&self,\n+                                    bcx: Block<'blk, 'tcx>,\n+                                    dst: ValueRef)\n+                                    -> Block<'blk, 'tcx> {\n         /*!\n          * Helper function that performs a shallow copy of this value\n          * into `dst`, which should be a pointer to a memory location\n@@ -584,10 +578,9 @@ impl<K:KindOps> Datum<K> {\n          *\n          * This function is private to datums because it leaves memory\n          * in an unstable state, where the source value has been\n-         * copied but not zeroed. Public methods are `store_to` (if\n-         * you no longer need the source value) or\n-         * `shallow_copy_and_take` (if you wish the source value to\n-         * remain valid).\n+         * copied but not zeroed. Public methods are `store_to`\n+         * (if you no longer need the source value) or `shallow_copy`\n+         * (if you wish the source value to remain valid).\n          */\n \n         let _icx = push_ctxt(\"copy_to_no_check\");\n@@ -605,22 +598,19 @@ impl<K:KindOps> Datum<K> {\n         return bcx;\n     }\n \n-    pub fn shallow_copy_and_take<'blk, 'tcx>(&self,\n-                                             bcx: Block<'blk, 'tcx>,\n-                                             dst: ValueRef)\n-                                             -> Block<'blk, 'tcx> {\n+    pub fn shallow_copy<'blk, 'tcx>(&self,\n+                                    bcx: Block<'blk, 'tcx>,\n+                                    dst: ValueRef)\n+                                    -> Block<'blk, 'tcx> {\n         /*!\n-         * Copies the value into a new location and runs any necessary\n-         * take glue on the new location. This function always\n+         * Copies the value into a new location. This function always\n          * preserves the existing datum as a valid value. Therefore,\n          * it does not consume `self` and, also, cannot be applied to\n          * affine values (since they must never be duplicated).\n          */\n \n         assert!(!ty::type_moves_by_default(bcx.tcx(), self.ty));\n-        let mut bcx = bcx;\n-        bcx = self.shallow_copy(bcx, dst);\n-        glue::take_ty(bcx, dst, self.ty)\n+        self.shallow_copy_raw(bcx, dst)\n     }\n \n     #[allow(dead_code)] // useful for debugging"}, {"sha": "a29fd7f6ceb7a99912a8cc925ff7c306f72b8ac5", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 125, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -373,12 +373,6 @@ impl TypeMap {\n                     unique_type_id.push_str(component_type_id.as_slice());\n                 }\n             },\n-            ty::ty_box(inner_type) => {\n-                unique_type_id.push_char('@');\n-                let inner_type_id = self.get_unique_type_id_of_type(cx, inner_type);\n-                let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n-                unique_type_id.push_str(inner_type_id.as_slice());\n-            },\n             ty::ty_uniq(inner_type) => {\n                 unique_type_id.push_char('~');\n                 let inner_type_id = self.get_unique_type_id_of_type(cx, inner_type);\n@@ -596,18 +590,6 @@ impl TypeMap {\n         let interner_key = self.unique_id_interner.intern(Rc::new(enum_variant_type_id));\n         UniqueTypeId(interner_key)\n     }\n-\n-    fn get_unique_type_id_of_gc_box(&mut self,\n-                                    cx: &CrateContext,\n-                                    element_type: ty::t)\n-                                 -> UniqueTypeId {\n-        let element_type_id = self.get_unique_type_id_of_type(cx, element_type);\n-        let gc_box_type_id = format!(\"{{GC_BOX<{}>}}\",\n-                                     self.get_unique_type_id_as_string(element_type_id)\n-                                         .as_slice());\n-        let interner_key = self.unique_id_interner.intern(Rc::new(gc_box_type_id));\n-        UniqueTypeId(interner_key)\n-    }\n }\n \n // Returns from the enclosing function if the type metadata with the given\n@@ -2646,105 +2628,6 @@ fn create_struct_stub(cx: &CrateContext,\n     return metadata_stub;\n }\n \n-fn at_box_metadata(cx: &CrateContext,\n-                   at_pointer_type: ty::t,\n-                   content_type: ty::t,\n-                   unique_type_id: UniqueTypeId)\n-                -> MetadataCreationResult {\n-    let content_type_metadata = type_metadata(cx, content_type, codemap::DUMMY_SP);\n-\n-    return_if_metadata_created_in_meantime!(cx, unique_type_id);\n-\n-    let content_type_name = compute_debuginfo_type_name(cx, content_type, true);\n-    let content_type_name = content_type_name.as_slice();\n-    let content_llvm_type = type_of::type_of(cx, content_type);\n-\n-    let box_type_name = format!(\"GcBox<{}>\", content_type_name);\n-    let box_llvm_type = Type::at_box(cx, content_llvm_type);\n-    let member_llvm_types = box_llvm_type.field_types();\n-    assert!(box_layout_is_correct(cx,\n-                                  member_llvm_types.as_slice(),\n-                                  content_llvm_type));\n-\n-    let int_type = ty::mk_int();\n-    let nil_pointer_type = ty::mk_nil_ptr(cx.tcx());\n-    let nil_pointer_type_metadata = type_metadata(cx,\n-                                                  nil_pointer_type,\n-                                                  codemap::DUMMY_SP);\n-    let member_descriptions = [\n-        MemberDescription {\n-            name: \"refcnt\".to_string(),\n-            llvm_type: *member_llvm_types.get(0),\n-            type_metadata: type_metadata(cx, int_type, codemap::DUMMY_SP),\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"drop_glue\".to_string(),\n-            llvm_type: *member_llvm_types.get(1),\n-            type_metadata: nil_pointer_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"prev\".to_string(),\n-            llvm_type: *member_llvm_types.get(2),\n-            type_metadata: nil_pointer_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"next\".to_string(),\n-            llvm_type: *member_llvm_types.get(3),\n-            type_metadata: nil_pointer_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        },\n-        MemberDescription {\n-            name: \"val\".to_string(),\n-            llvm_type: *member_llvm_types.get(4),\n-            type_metadata: content_type_metadata,\n-            offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL,\n-        }\n-    ];\n-\n-    let gc_box_unique_id = debug_context(cx).type_map\n-                                            .borrow_mut()\n-                                            .get_unique_type_id_of_gc_box(cx, content_type);\n-\n-    let gc_box_metadata = composite_type_metadata(\n-        cx,\n-        box_llvm_type,\n-        box_type_name.as_slice(),\n-        gc_box_unique_id,\n-        member_descriptions,\n-        UNKNOWN_SCOPE_METADATA,\n-        UNKNOWN_FILE_METADATA,\n-        codemap::DUMMY_SP);\n-\n-    let gc_pointer_metadata = pointer_type_metadata(cx,\n-                                                    at_pointer_type,\n-                                                    gc_box_metadata);\n-\n-    return MetadataCreationResult::new(gc_pointer_metadata, false);\n-\n-    // Unfortunately, we cannot assert anything but the correct types here---and\n-    // not whether the 'next' and 'prev' pointers are in the correct order.\n-    fn box_layout_is_correct(cx: &CrateContext,\n-                             member_llvm_types: &[Type],\n-                             content_llvm_type: Type)\n-                          -> bool {\n-        member_llvm_types.len() == 5 &&\n-        member_llvm_types[0] == cx.int_type() &&\n-        member_llvm_types[1] == Type::generic_glue_fn(cx).ptr_to() &&\n-        member_llvm_types[2] == Type::i8(cx).ptr_to() &&\n-        member_llvm_types[3] == Type::i8(cx).ptr_to() &&\n-        member_llvm_types[4] == content_llvm_type\n-    }\n-}\n-\n-\n fn fixed_vec_metadata(cx: &CrateContext,\n                       unique_type_id: UniqueTypeId,\n                       element_type: ty::t,\n@@ -2968,9 +2851,6 @@ fn type_metadata(cx: &CrateContext,\n         ty::ty_enum(def_id, _) => {\n             prepare_enum_metadata(cx, t, def_id, unique_type_id, usage_site_span).finalize(cx)\n         }\n-        ty::ty_box(pointee_type) => {\n-            at_box_metadata(cx, t, pointee_type, unique_type_id)\n-        }\n         ty::ty_vec(typ, Some(len)) => {\n             fixed_vec_metadata(cx, unique_type_id, typ, len, usage_site_span)\n         }\n@@ -3702,7 +3582,7 @@ fn populate_scope_map(cx: &CrateContext,\n             ast::ExprInlineAsm(ast::InlineAsm { inputs: ref inputs,\n                                                 outputs: ref outputs,\n                                                 .. }) => {\n-                // inputs, outputs: ~[(String, Gc<expr>)]\n+                // inputs, outputs: Vec<(String, P<Expr>)>\n                 for &(_, ref exp) in inputs.iter() {\n                     walk_expr(cx, &**exp, scope_stack, scope_map);\n                 }\n@@ -3777,10 +3657,6 @@ fn push_debuginfo_type_name(cx: &CrateContext,\n             push_debuginfo_type_name(cx, inner_type, true, output);\n             output.push_char('>');\n         },\n-        ty::ty_box(inner_type) => {\n-            output.push_char('@');\n-            push_debuginfo_type_name(cx, inner_type, true, output);\n-        },\n         ty::ty_ptr(ty::mt { ty: inner_type, mutbl } ) => {\n             output.push_char('*');\n             match mutbl {"}, {"sha": "d6df0d88a769ffde6ea60bfef002905f3bcf2920", "filename": "src/librustc/middle/trans/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -65,7 +65,7 @@ Some of the datum methods, however, are designed to work only on\n copyable values such as ints or pointers. Those methods may borrow the\n datum (`&self`) rather than consume it, but they always include\n assertions on the type of the value represented to check that this\n-makes sense. An example is `shallow_copy_and_take()`, which duplicates\n+makes sense. An example is `shallow_copy()`, which duplicates\n a datum value.\n \n Translating an expression always yields a `Datum<Expr>` result, but"}, {"sha": "cd4ad85d0942ca4ec26e95af368b34bb77bb8c40", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -38,7 +38,6 @@ use llvm;\n use llvm::{ValueRef};\n use metadata::csearch;\n use middle::def;\n-use middle::lang_items::MallocFnLangItem;\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::subst::Subst;\n@@ -624,18 +623,15 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             DatumBlock::new(bcx, scratch.to_expr_datum())\n         }\n         ast::ExprBox(_, ref contents) => {\n-            // Special case for `Box<T>` and `Gc<T>`\n+            // Special case for `Box<T>`\n             let box_ty = expr_ty(bcx, expr);\n             let contents_ty = expr_ty(bcx, &**contents);\n             match ty::get(box_ty).sty {\n                 ty::ty_uniq(..) => {\n                     trans_uniq_expr(bcx, box_ty, &**contents, contents_ty)\n                 }\n-                ty::ty_box(..) => {\n-                    trans_managed_expr(bcx, box_ty, &**contents, contents_ty)\n-                }\n                 _ => bcx.sess().span_bug(expr.span,\n-                                         \"expected unique or managed box\")\n+                                         \"expected unique box\")\n             }\n \n         }\n@@ -1572,26 +1568,6 @@ fn trans_uniq_expr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     immediate_rvalue_bcx(bcx, val, box_ty).to_expr_datumblock()\n }\n \n-fn trans_managed_expr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                  box_ty: ty::t,\n-                                  contents: &ast::Expr,\n-                                  contents_ty: ty::t)\n-                                  -> DatumBlock<'blk, 'tcx, Expr> {\n-    let _icx = push_ctxt(\"trans_managed_expr\");\n-    let fcx = bcx.fcx;\n-    let ty = type_of::type_of(bcx.ccx(), contents_ty);\n-    let Result {bcx, val: bx} = malloc_raw_dyn_managed(bcx, contents_ty, MallocFnLangItem,\n-                                                        llsize_of(bcx.ccx(), ty));\n-    let body = GEPi(bcx, bx, [0u, abi::box_field_body]);\n-\n-    let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n-    fcx.schedule_free_value(cleanup::CustomScope(custom_cleanup_scope),\n-                            bx, cleanup::HeapManaged, contents_ty);\n-    let bcx = trans_into(bcx, contents, SaveIn(body));\n-    fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n-    immediate_rvalue_bcx(bcx, bx, box_ty).to_expr_datumblock()\n-}\n-\n fn trans_addr_of<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              expr: &ast::Expr,\n                              subexpr: &ast::Expr)\n@@ -1924,10 +1900,6 @@ pub fn cast_type_kind(tcx: &ty::ctxt, t: ty::t) -> cast_kind {\n }\n \n fn cast_is_noop(t_in: ty::t, t_out: ty::t) -> bool {\n-    if ty::type_is_boxed(t_in) || ty::type_is_boxed(t_out) {\n-        return false;\n-    }\n-\n     match (ty::deref(t_in, true), ty::deref(t_out, true)) {\n         (Some(ty::mt{ ty: t_in, .. }), Some(ty::mt{ ty: t_out, .. })) => {\n             t_in == t_out\n@@ -2160,15 +2132,6 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        ty::ty_box(content_ty) => {\n-            let datum = unpack_datum!(\n-                bcx, datum.to_lvalue_datum(bcx, \"deref\", expr.id));\n-            let llptrref = datum.to_llref();\n-            let llptr = Load(bcx, llptrref);\n-            let llbody = GEPi(bcx, llptr, [0u, abi::box_field_body]);\n-            DatumBlock::new(bcx, Datum::new(llbody, content_ty, LvalueExpr))\n-        }\n-\n         ty::ty_ptr(ty::mt { ty: content_ty, .. }) |\n         ty::ty_rptr(_, ty::mt { ty: content_ty, .. }) => {\n             if ty::type_is_sized(bcx.tcx(), content_ty) {"}, {"sha": "33a46c0ba36af729bf352683754d9034b7c53158", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -17,7 +17,7 @@ use back::abi;\n use back::link::*;\n use llvm::{ValueRef, True, get_param};\n use llvm;\n-use middle::lang_items::{FreeFnLangItem, ExchangeFreeFnLangItem};\n+use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst;\n use middle::subst::Subst;\n use middle::trans::adt;\n@@ -46,15 +46,6 @@ use libc::c_uint;\n use syntax::ast;\n use syntax::parse::token;\n \n-pub fn trans_free<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef)\n-                              -> Block<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"trans_free\");\n-    callee::trans_lang_call(cx,\n-        langcall(cx, None, \"\", FreeFnLangItem),\n-        [PointerCast(cx, v, Type::i8p(cx.ccx()))],\n-        Some(expr::Ignore)).bcx\n-}\n-\n pub fn trans_exchange_free_dyn<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef,\n                                            size: ValueRef, align: ValueRef)\n                                            -> Block<'blk, 'tcx> {\n@@ -87,20 +78,6 @@ pub fn trans_exchange_free_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ptr: ValueRef,\n     }\n }\n \n-pub fn take_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v: ValueRef, t: ty::t)\n-                           -> Block<'blk, 'tcx> {\n-    // NB: v is an *alias* of type t here, not a direct value.\n-    let _icx = push_ctxt(\"take_ty\");\n-    match ty::get(t).sty {\n-        ty::ty_box(_) => incr_refcnt_of_boxed(bcx, v),\n-        _ if ty::type_is_structural(t)\n-          && ty::type_needs_drop(bcx.tcx(), t) => {\n-            iter_structural_ty(bcx, v, t, take_ty)\n-        }\n-        _ => bcx\n-    }\n-}\n-\n pub fn get_drop_glue_type(ccx: &CrateContext, t: ty::t) -> ty::t {\n     let tcx = ccx.tcx();\n     // Even if there is no dtor for t, there might be one deeper down and we\n@@ -446,9 +423,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: ty::t)\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     let _icx = push_ctxt(\"make_drop_glue\");\n     match ty::get(t).sty {\n-        ty::ty_box(body_ty) => {\n-            decr_refcnt_maybe_free(bcx, v0, body_ty)\n-        }\n         ty::ty_uniq(content_ty) => {\n             match ty::get(content_ty).sty {\n                 ty::ty_vec(ty, None) => {\n@@ -568,48 +542,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: ty::t)\n     }\n }\n \n-fn decr_refcnt_maybe_free<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                      box_ptr_ptr: ValueRef,\n-                                      t: ty::t) -> Block<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"decr_refcnt_maybe_free\");\n-    let fcx = bcx.fcx;\n-    let ccx = bcx.ccx();\n-\n-    let decr_bcx = fcx.new_temp_block(\"decr\");\n-    let free_bcx = fcx.new_temp_block(\"free\");\n-    let next_bcx = fcx.new_temp_block(\"next\");\n-\n-    let box_ptr = Load(bcx, box_ptr_ptr);\n-    let llnotnull = IsNotNull(bcx, box_ptr);\n-    CondBr(bcx, llnotnull, decr_bcx.llbb, next_bcx.llbb);\n-\n-    let rc_ptr = GEPi(decr_bcx, box_ptr, [0u, abi::box_field_refcnt]);\n-    let rc = Sub(decr_bcx, Load(decr_bcx, rc_ptr), C_int(ccx, 1));\n-    Store(decr_bcx, rc, rc_ptr);\n-    CondBr(decr_bcx, IsNull(decr_bcx, rc), free_bcx.llbb, next_bcx.llbb);\n-\n-    let v = Load(free_bcx, box_ptr_ptr);\n-    let body = GEPi(free_bcx, v, [0u, abi::box_field_body]);\n-    let free_bcx = drop_ty(free_bcx, body, t, None);\n-    let free_bcx = trans_free(free_bcx, v);\n-    Br(free_bcx, next_bcx.llbb);\n-\n-    next_bcx\n-}\n-\n-fn incr_refcnt_of_boxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                    box_ptr_ptr: ValueRef) -> Block<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"incr_refcnt_of_boxed\");\n-    let ccx = bcx.ccx();\n-    let box_ptr = Load(bcx, box_ptr_ptr);\n-    let rc_ptr = GEPi(bcx, box_ptr, [0u, abi::box_field_refcnt]);\n-    let rc = Load(bcx, rc_ptr);\n-    let rc = Add(bcx, rc, C_int(ccx, 1));\n-    Store(bcx, rc, rc_ptr);\n-    bcx\n-}\n-\n-\n // Generates the declaration for (but doesn't emit) a type descriptor.\n pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> tydesc_info {\n     // If emit_tydescs already ran, then we shouldn't be creating any new"}, {"sha": "f004bea23c7a02d276b420db4d45926b92447b94", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -169,14 +169,6 @@ impl<'a, 'blk, 'tcx> Reflector<'a, 'blk, 'tcx> {\n               extra.push(self.c_tydesc(ty));\n               self.visit(\"evec_fixed\", extra.as_slice())\n           }\n-          // Should remove mt from box and uniq.\n-          ty::ty_box(typ) => {\n-              let extra = self.c_mt(&ty::mt {\n-                  ty: typ,\n-                  mutbl: ast::MutImmutable,\n-              });\n-              self.visit(\"box\", extra.as_slice())\n-          }\n           ty::ty_ptr(ref mt) => {\n               match ty::get(mt.ty).sty {\n                   ty::ty_vec(ty, None) => {"}, {"sha": "fac0ef2014ec66501499dd3c895630c6a0ad8134", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -325,7 +325,7 @@ pub fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n                     let bcx = iter_vec_loop(bcx, lldest, vt,\n                                   C_uint(bcx.ccx(), count), |set_bcx, lleltptr, _| {\n-                        elem.shallow_copy_and_take(set_bcx, lleltptr)\n+                        elem.shallow_copy(set_bcx, lleltptr)\n                     });\n \n                     elem.add_clean_if_rvalue(bcx, element.id);"}, {"sha": "d41cd7ed9e5d4aa2b141f9c45069ce85be196cf4", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -174,7 +174,6 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         ty::ty_uint(t) => Type::uint_from_ty(cx, t),\n         ty::ty_float(t) => Type::float_from_ty(cx, t),\n \n-        ty::ty_box(..) => Type::i8p(cx),\n         ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty, ..}) | ty::ty_ptr(ty::mt{ty, ..}) => {\n             if ty::type_is_sized(cx.tcx(), ty) {\n                 Type::i8p(cx)\n@@ -299,9 +298,6 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n         let name = llvm_type_name(cx, an_unboxed_closure, did, []);\n         adt::incomplete_type_of(cx, &*repr, name.as_slice())\n       }\n-      ty::ty_box(typ) => {\n-          Type::at_box(cx, type_of(cx, typ)).ptr_to()\n-      }\n \n       ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty, ..}) | ty::ty_ptr(ty::mt{ty, ..}) => {\n           match ty::get(ty).sty {"}, {"sha": "edbdf427c0bc6166d8135f1717c142cb61671dd7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 58, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -940,7 +940,6 @@ pub enum sty {\n     /// the `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\n     /// well.`\n     ty_enum(DefId, Substs),\n-    ty_box(t),\n     ty_uniq(t),\n     ty_str,\n     ty_vec(t, Option<uint>), // Second field is length.\n@@ -1621,7 +1620,7 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n           flags |= sflags(substs);\n           flags |= flags_for_bounds(bounds);\n       }\n-      &ty_box(tt) | &ty_uniq(tt) | &ty_vec(tt, _) | &ty_open(tt) => {\n+      &ty_uniq(tt) | &ty_vec(tt, _) | &ty_open(tt) => {\n         flags |= get(tt).flags\n       }\n       &ty_ptr(ref m) => {\n@@ -1776,8 +1775,6 @@ pub fn mk_enum(cx: &ctxt, did: ast::DefId, substs: Substs) -> t {\n     mk_t(cx, ty_enum(did, substs))\n }\n \n-pub fn mk_box(cx: &ctxt, ty: t) -> t { mk_t(cx, ty_box(ty)) }\n-\n pub fn mk_uniq(cx: &ctxt, ty: t) -> t { mk_t(cx, ty_uniq(ty)) }\n \n pub fn mk_ptr(cx: &ctxt, tm: mt) -> t { mk_t(cx, ty_ptr(tm)) }\n@@ -1901,7 +1898,7 @@ pub fn maybe_walk_ty(ty: t, f: |t| -> bool) {\n     match get(ty).sty {\n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) | ty_uint(_) | ty_float(_) |\n         ty_str | ty_infer(_) | ty_param(_) | ty_unboxed_closure(_, _) | ty_err => {}\n-        ty_box(ty) | ty_uniq(ty) | ty_vec(ty, _) | ty_open(ty) => maybe_walk_ty(ty, f),\n+        ty_uniq(ty) | ty_vec(ty, _) | ty_open(ty) => maybe_walk_ty(ty, f),\n         ty_ptr(ref tm) | ty_rptr(_, ref tm) => {\n             maybe_walk_ty(tm.ty, f);\n         }\n@@ -2014,7 +2011,7 @@ pub fn type_is_vec(ty: t) -> bool {\n     match get(ty).sty {\n         ty_vec(..) => true,\n         ty_ptr(mt{ty: t, ..}) | ty_rptr(_, mt{ty: t, ..}) |\n-        ty_box(t) | ty_uniq(t) => match get(t).sty {\n+        ty_uniq(t) => match get(t).sty {\n             ty_vec(_, None) => true,\n             _ => false\n         },\n@@ -2067,13 +2064,6 @@ pub fn simd_size(cx: &ctxt, ty: t) -> uint {\n     }\n }\n \n-pub fn type_is_boxed(ty: t) -> bool {\n-    match get(ty).sty {\n-      ty_box(_) => true,\n-      _ => false\n-    }\n-}\n-\n pub fn type_is_region_ptr(ty: t) -> bool {\n     match get(ty).sty {\n         ty_rptr(..) => true,\n@@ -2144,29 +2134,22 @@ pub fn type_needs_unwind_cleanup(cx: &ctxt, ty: t) -> bool {\n \n     let mut tycache = HashSet::new();\n     let needs_unwind_cleanup =\n-        type_needs_unwind_cleanup_(cx, ty, &mut tycache, false);\n+        type_needs_unwind_cleanup_(cx, ty, &mut tycache);\n     cx.needs_unwind_cleanup_cache.borrow_mut().insert(ty, needs_unwind_cleanup);\n-    return needs_unwind_cleanup;\n+    needs_unwind_cleanup\n }\n \n fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n-                              tycache: &mut HashSet<t>,\n-                              encountered_box: bool) -> bool {\n+                              tycache: &mut HashSet<t>) -> bool {\n \n     // Prevent infinite recursion\n     if !tycache.insert(ty) {\n         return false;\n     }\n \n-    let mut encountered_box = encountered_box;\n     let mut needs_unwind_cleanup = false;\n     maybe_walk_ty(ty, |ty| {\n-        let old_encountered_box = encountered_box;\n         let result = match get(ty).sty {\n-          ty_box(_) => {\n-            encountered_box = true;\n-            true\n-          }\n           ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n           ty_tup(_) | ty_ptr(_) => {\n             true\n@@ -2176,33 +2159,21 @@ fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n                 for aty in v.args.iter() {\n                     let t = aty.subst(cx, substs);\n                     needs_unwind_cleanup |=\n-                        type_needs_unwind_cleanup_(cx, t, tycache,\n-                                                   encountered_box);\n+                        type_needs_unwind_cleanup_(cx, t, tycache);\n                 }\n             }\n             !needs_unwind_cleanup\n           }\n-          ty_uniq(_) => {\n-            // Once we're inside a box, the annihilator will find\n-            // it and destroy it.\n-            if !encountered_box {\n-                needs_unwind_cleanup = true;\n-                false\n-            } else {\n-                true\n-            }\n-          }\n           _ => {\n             needs_unwind_cleanup = true;\n             false\n           }\n         };\n \n-        encountered_box = old_encountered_box;\n         result\n     });\n \n-    return needs_unwind_cleanup;\n+    needs_unwind_cleanup\n }\n \n /**\n@@ -2460,10 +2431,6 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 closure_contents(cx, &**c) | TC::ReachesFfiUnsafe\n             }\n \n-            ty_box(typ) => {\n-                tc_ty(cx, typ, cache).managed_pointer() | TC::ReachesFfiUnsafe\n-            }\n-\n             ty_uniq(typ) => {\n                 TC::ReachesFfiUnsafe | match get(typ).sty {\n                     ty_str => TC::OwnsOwned,\n@@ -2782,7 +2749,7 @@ pub fn is_instantiable(cx: &ctxt, r_ty: t) -> bool {\n             ty_vec(_, None) => {\n                 false\n             }\n-            ty_box(typ) | ty_uniq(typ) | ty_open(typ) => {\n+            ty_uniq(typ) | ty_open(typ) => {\n                 type_requires(cx, seen, r_ty, typ)\n             }\n             ty_rptr(_, ref mt) => {\n@@ -3092,7 +3059,7 @@ pub fn type_is_c_like_enum(cx: &ctxt, ty: t) -> bool {\n // Some types---notably unsafe ptrs---can only be dereferenced explicitly.\n pub fn deref(t: t, explicit: bool) -> Option<mt> {\n     match get(t).sty {\n-        ty_box(ty) | ty_uniq(ty) => {\n+        ty_uniq(ty) => {\n             Some(mt {\n                 ty: ty,\n                 mutbl: ast::MutImmutable,\n@@ -3106,9 +3073,7 @@ pub fn deref(t: t, explicit: bool) -> Option<mt> {\n \n pub fn deref_or_dont(t: t) -> t {\n     match get(t).sty {\n-        ty_box(ty) | ty_uniq(ty) => {\n-            ty\n-        },\n+        ty_uniq(ty) => ty,\n         ty_rptr(_, mt) | ty_ptr(mt) => mt.ty,\n         _ => t\n     }\n@@ -3124,7 +3089,7 @@ pub fn close_type(cx: &ctxt, t: t) -> t {\n \n pub fn type_content(t: t) -> t {\n     match get(t).sty {\n-        ty_box(ty) | ty_uniq(ty) => ty,\n+        ty_uniq(ty) => ty,\n         ty_rptr(_, mt) |ty_ptr(mt) => mt.ty,\n         _ => t\n     }\n@@ -3695,14 +3660,13 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         }\n \n         ast::ExprBox(ref place, _) => {\n-            // Special case `Box<T>`/`Gc<T>` for now:\n+            // Special case `Box<T>` for now:\n             let definition = match tcx.def_map.borrow().find(&place.id) {\n                 Some(&def) => def,\n                 None => fail!(\"no def for place\"),\n             };\n             let def_id = definition.def_id();\n-            if tcx.lang_items.exchange_heap() == Some(def_id) ||\n-               tcx.lang_items.managed_heap() == Some(def_id) {\n+            if tcx.lang_items.exchange_heap() == Some(def_id) {\n                 RvalueDatumExpr\n             } else {\n                 RvalueDpsExpr\n@@ -3753,7 +3717,6 @@ pub fn ty_sort_string(cx: &ctxt, t: t) -> String {\n         }\n \n         ty_enum(id, _) => format!(\"enum {}\", item_path_str(cx, id)),\n-        ty_box(_) => \"Gc-ptr\".to_string(),\n         ty_uniq(_) => \"box\".to_string(),\n         ty_vec(_, Some(_)) => \"array\".to_string(),\n         ty_vec(_, None) => \"unsized array\".to_string(),\n@@ -5223,19 +5186,15 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n                 byte!(8);\n                 did(&mut state, d);\n             }\n-            ty_box(_) => {\n-                byte!(9);\n-            }\n             ty_uniq(_) => {\n-                byte!(10);\n+                byte!(9);\n             }\n             ty_vec(_, Some(n)) => {\n-                byte!(11);\n+                byte!(10);\n                 n.hash(&mut state);\n             }\n             ty_vec(_, None) => {\n                 byte!(11);\n-                0u8.hash(&mut state);\n             }\n             ty_ptr(m) => {\n                 byte!(12);\n@@ -5586,7 +5545,6 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             ty_int(_) |\n             ty_uint(_) |\n             ty_float(_) |\n-            ty_box(_) |\n             ty_uniq(_) |\n             ty_str |\n             ty_vec(_, _) |"}, {"sha": "44420ddd7f31f709ed03411a3eac3dd8b83c8068", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -458,9 +458,6 @@ pub fn super_fold_mt<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n pub fn super_fold_sty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n                                                  sty: &ty::sty) -> ty::sty {\n     match *sty {\n-        ty::ty_box(typ) => {\n-            ty::ty_box(typ.fold_with(this))\n-        }\n         ty::ty_uniq(typ) => {\n             ty::ty_uniq(typ.fold_with(this))\n         }"}, {"sha": "4d21090dd2c2aa14baa1b7d145b9881d101ee388", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -559,44 +559,6 @@ pub fn ast_ty_to_builtin_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                               \"not enough type parameters supplied to `Box<T>`\");\n                     Some(ty::mk_err())\n                 }\n-                def::DefTy(did, _) | def::DefStruct(did)\n-                        if Some(did) == this.tcx().lang_items.gc() => {\n-                    if path.segments\n-                           .iter()\n-                           .flat_map(|s| s.types.iter())\n-                           .count() > 1 {\n-                        span_err!(this.tcx().sess, path.span, E0048,\n-                                  \"`Gc` has only one type parameter\");\n-                    }\n-\n-                    for inner_ast_type in path.segments\n-                                              .iter()\n-                                              .flat_map(|s| s.types.iter()) {\n-                        return Some(mk_pointer(this,\n-                                               rscope,\n-                                               ast::MutImmutable,\n-                                               &**inner_ast_type,\n-                                               Box,\n-                                               |typ| {\n-                            match ty::get(typ).sty {\n-                                ty::ty_str => {\n-                                    span_err!(this.tcx().sess, path.span, E0114,\n-                                              \"`Gc<str>` is not a type\");\n-                                    ty::mk_err()\n-                                }\n-                                ty::ty_vec(_, None) => {\n-                                    span_err!(this.tcx().sess, path.span, E0115,\n-                                              \"`Gc<[T]>` is not a type\");\n-                                    ty::mk_err()\n-                                }\n-                                _ => ty::mk_box(this.tcx(), typ),\n-                            }\n-                        }))\n-                    }\n-                    this.tcx().sess.span_bug(path.span,\n-                                             \"not enough type parameters \\\n-                                              supplied to `Gc<T>`\")\n-                }\n                 _ => None\n             }\n         }\n@@ -606,15 +568,13 @@ pub fn ast_ty_to_builtin_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n \n #[deriving(Show)]\n enum PointerTy {\n-    Box,\n     RPtr(ty::Region),\n     Uniq\n }\n \n impl PointerTy {\n     fn default_region(&self) -> ty::Region {\n         match *self {\n-            Box => ty::ReStatic,\n             Uniq => ty::ReStatic,\n             RPtr(r) => r,\n         }\n@@ -702,14 +662,6 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                        r,\n                                        ty::mt {mutbl: a_seq_mutbl, ty: tr});\n                 }\n-                _ => {\n-                    tcx.sess.span_err(\n-                        a_seq_ty.span,\n-                        \"~trait or &trait are the only supported \\\n-                         forms of casting-to-trait\");\n-                    return ty::mk_err();\n-                }\n-\n             }\n         }\n         ast::TyPath(ref path, ref opt_bounds, id) => {\n@@ -726,11 +678,6 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                         RPtr(r) => {\n                             return ty::mk_str_slice(tcx, r, ast::MutImmutable);\n                         }\n-                        _ => {\n-                            tcx.sess\n-                               .span_err(path.span,\n-                                         \"managed strings are not supported\")\n-                        }\n                     }\n                 }\n                 Some(&def::DefTrait(trait_def_id)) => {\n@@ -767,13 +714,6 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                         RPtr(r) => {\n                             return ty::mk_rptr(tcx, r, ty::mt{mutbl: a_seq_mutbl, ty: tr});\n                         }\n-                        _ => {\n-                            tcx.sess.span_err(\n-                                path.span,\n-                                \"~trait or &trait are the only supported \\\n-                                 forms of casting-to-trait\");\n-                            return ty::mk_err();\n-                        }\n                     };\n                 }\n                 _ => {}"}, {"sha": "8711f4de512e6d7cc9d08d0b752c8914e5a61894", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -1094,7 +1094,7 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n \n         let tcx = self.tcx();\n         match ty::get(self_ty).sty {\n-            ty_bare_fn(..) | ty_box(..) | ty_uniq(..) | ty_rptr(..) |\n+            ty_bare_fn(..) | ty_uniq(..) | ty_rptr(..) |\n             ty_infer(IntVar(_)) |\n             ty_infer(FloatVar(_)) |\n             ty_param(..) | ty_nil | ty_bot | ty_bool |"}, {"sha": "194c2c35c889702943122995113f5a9bc704980f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -3820,12 +3820,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                   if tcx.lang_items.exchange_heap() == Some(def_id) {\n                       fcx.write_ty(id, ty::mk_uniq(tcx, referent_ty));\n                       checked = true\n-                  } else if tcx.lang_items.managed_heap() == Some(def_id) {\n-                      fcx.register_region_obligation(infer::Managed(expr.span),\n-                                                     referent_ty,\n-                                                     ty::ReStatic);\n-                      fcx.write_ty(id, ty::mk_box(tcx, referent_ty));\n-                      checked = true\n                   }\n               }\n               _ => {}"}, {"sha": "4d19bc16a3e2c0d20d6cb28339c0282a11f13528", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -1466,7 +1466,6 @@ fn link_region(rcx: &Rcx,\n \n             mc::cat_discr(cmt_base, _) |\n             mc::cat_downcast(cmt_base) |\n-            mc::cat_deref(cmt_base, _, mc::GcPtr(..)) |\n             mc::cat_deref(cmt_base, _, mc::OwnedPtr) |\n             mc::cat_interior(cmt_base, _) => {\n                 // Borrowing interior or owned data requires the base\n@@ -1699,7 +1698,6 @@ fn adjust_upvar_borrow_kind_for_mut(rcx: &Rcx,\n             }\n \n             mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n-            mc::cat_deref(_, _, mc::GcPtr) |\n             mc::cat_static_item |\n             mc::cat_rvalue(_) |\n             mc::cat_copied_upvar(_) |\n@@ -1750,7 +1748,6 @@ fn adjust_upvar_borrow_kind_for_unique(rcx: &Rcx, cmt: mc::cmt) {\n             }\n \n             mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n-            mc::cat_deref(_, _, mc::GcPtr) |\n             mc::cat_static_item |\n             mc::cat_rvalue(_) |\n             mc::cat_copied_upvar(_) |"}, {"sha": "5d75d590a09f9bead511e75e0b59da8f8172c3e7", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -129,7 +129,6 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n \n             ty::ty_vec(t, _) |\n             ty::ty_ptr(ty::mt { ty: t, .. }) |\n-            ty::ty_box(t) |\n             ty::ty_uniq(t) => {\n                 self.accumulate_from_ty(t)\n             }"}, {"sha": "1d765c6c7c6c2d58b3c5734c44601919e87442a7", "filename": "src/librustc/middle/typeck/check/vtable2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -95,7 +95,7 @@ pub fn check_object_cast(fcx: &FnCtxt,\n         }\n     }\n \n-    // Because we currently give unsound lifetimes to the \"ty_box\", I\n+    // Because we currently give unsound lifetimes to the \"t_box\", I\n     // could have written &'static ty::TyTrait here, but it seems\n     // gratuitously unsafe.\n     fn object_trait<'a>(t: &'a ty::t) -> &'a ty::TyTrait {"}, {"sha": "f6ac0e1666ca92915399d913e8878ee4dac57398", "filename": "src/librustc/middle/typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -23,7 +23,7 @@ use middle::subst::{Substs};\n use middle::ty::get;\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{TypeTraitItemId, lookup_item_type};\n-use middle::ty::{t, ty_bool, ty_char, ty_bot, ty_box, ty_enum, ty_err};\n+use middle::ty::{t, ty_bool, ty_char, ty_bot, ty_enum, ty_err};\n use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_nil, ty_open};\n use middle::ty::{ty_param, Polytype, ty_ptr};\n use middle::ty::{ty_rptr, ty_struct, ty_trait, ty_tup};\n@@ -84,8 +84,8 @@ fn get_base_type(inference_context: &InferCtxt,\n \n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(..) | ty_uint(..) | ty_float(..) |\n         ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_closure(..) | ty_tup(..) |\n-        ty_infer(..) | ty_param(..) | ty_err | ty_open(..) |\n-        ty_box(_) | ty_uniq(_) | ty_ptr(_) | ty_rptr(_, _) => {\n+        ty_infer(..) | ty_param(..) | ty_err | ty_open(..) | ty_uniq(_) |\n+        ty_ptr(_) | ty_rptr(_, _) => {\n             debug!(\"(getting base type) no base type; found {:?}\",\n                    get(original_type).sty);\n             None"}, {"sha": "a0c190c5c817b0541230ace1dc4f9866b2d771d9", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -258,7 +258,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let r_borrow = self.get_ref().infcx.next_region_var(coercion);\n \n         let inner_ty = match *sty_a {\n-            ty::ty_box(_) | ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n+            ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n             ty::ty_rptr(_, mt_a) => mt_a.ty,\n             _ => {\n                 return self.subtype(a, b);"}, {"sha": "a742cf45059a4784749179446afdb311c61dd741", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -495,10 +495,6 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n           Ok(ty::mk_unboxed_closure(tcx, a_id, region))\n       }\n \n-      (&ty::ty_box(a_inner), &ty::ty_box(b_inner)) => {\n-        this.tys(a_inner, b_inner).and_then(|typ| Ok(ty::mk_box(tcx, typ)))\n-      }\n-\n       (&ty::ty_uniq(a_inner), &ty::ty_uniq(b_inner)) => {\n             let typ = try!(this.tys(a_inner, b_inner));\n             check_ptr_to_unsized(this, a, b, a_inner, b_inner, ty::mk_uniq(tcx, typ))"}, {"sha": "8ff5b3c9024931d285a6bd255dafa2cc537fc757", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -776,11 +776,6 @@ impl<'a, 'tcx> ErrorReporting for InferCtxt<'a, 'tcx> {\n                     sup,\n                     \"\");\n             }\n-            infer::Managed(span) => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    format!(\"cannot put borrowed references into managed memory\").as_slice());\n-            }\n         }\n     }\n \n@@ -1612,11 +1607,6 @@ impl<'a, 'tcx> ErrorReportingHelpers for InferCtxt<'a, 'tcx> {\n                              does not outlive the data it points at\",\n                             self.ty_to_string(ty)).as_slice());\n             }\n-            infer::Managed(span) => {\n-                self.tcx.sess.span_note(\n-                    span,\n-                    \"...so that the value can be stored in managed memory.\");\n-            }\n             infer::RelateParamBound(span, param_ty, t) => {\n                 self.tcx.sess.span_note(\n                     span,"}, {"sha": "44bda134909bb61f4d2d1cd631dcae9909affe09", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -216,9 +216,6 @@ pub enum SubregionOrigin {\n \n     // An auto-borrow that does not enclose the expr where it occurs\n     AutoBorrow(Span),\n-\n-    // Managed data cannot contain borrowed pointers.\n-    Managed(Span),\n }\n \n /// Reasons to create a region inference variable\n@@ -1029,7 +1026,6 @@ impl SubregionOrigin {\n             CallReturn(a) => a,\n             AddrOf(a) => a,\n             AutoBorrow(a) => a,\n-            Managed(a) => a,\n         }\n     }\n }\n@@ -1102,7 +1098,6 @@ impl Repr for SubregionOrigin {\n             CallReturn(a) => format!(\"CallReturn({})\", a.repr(tcx)),\n             AddrOf(a) => format!(\"AddrOf({})\", a.repr(tcx)),\n             AutoBorrow(a) => format!(\"AutoBorrow({})\", a.repr(tcx)),\n-            Managed(a) => format!(\"Managed({})\", a.repr(tcx)),\n         }\n     }\n }"}, {"sha": "54ece395be94c1f17f6688e1f03066916fa88c85", "filename": "src/librustc/middle/typeck/infer/skolemize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fskolemize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fskolemize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fskolemize.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -143,7 +143,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeSkolemizer<'a, 'tcx> {\n             ty::ty_uint(..) |\n             ty::ty_float(..) |\n             ty::ty_enum(..) |\n-            ty::ty_box(..) |\n             ty::ty_uniq(..) |\n             ty::ty_str |\n             ty::ty_err |"}, {"sha": "9317ba2c7fa93dd99f920e3b66940c718bef4175", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -742,7 +742,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(mt, variance);\n             }\n \n-            ty::ty_uniq(typ) | ty::ty_box(typ) | ty::ty_vec(typ, _) | ty::ty_open(typ) => {\n+            ty::ty_uniq(typ) | ty::ty_vec(typ, _) | ty::ty_open(typ) => {\n                 self.add_constraints_from_ty(typ, variance);\n             }\n "}, {"sha": "18cf805bccba0d607c78feeb234c780b1f773e87", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a91d33ee7267c71a0ae286739dbd72433470004/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8a91d33ee7267c71a0ae286739dbd72433470004", "patch": "@@ -17,7 +17,7 @@ use middle::ty::{ReEarlyBound, BrFresh, ctxt};\n use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region, ReEmpty};\n use middle::ty::{ReSkolemized, ReVar};\n use middle::ty::{mt, t, ParamTy};\n-use middle::ty::{ty_bool, ty_char, ty_bot, ty_box, ty_struct, ty_enum};\n+use middle::ty::{ty_bool, ty_char, ty_bot, ty_struct, ty_enum};\n use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn, ty_closure};\n use middle::ty::{ty_nil, ty_param, ty_ptr, ty_rptr, ty_tup, ty_open};\n use middle::ty::{ty_unboxed_closure};\n@@ -375,7 +375,6 @@ pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n       ty_int(t) => ast_util::int_ty_to_string(t, None).to_string(),\n       ty_uint(t) => ast_util::uint_ty_to_string(t, None).to_string(),\n       ty_float(t) => ast_util::float_ty_to_string(t).to_string(),\n-      ty_box(typ) => format!(\"Gc<{}>\", ty_to_string(cx, typ)),\n       ty_uniq(typ) => format!(\"Box<{}>\", ty_to_string(cx, typ)),\n       ty_ptr(ref tm) => {\n           format!(\"*{} {}\", match tm.mutbl {"}]}