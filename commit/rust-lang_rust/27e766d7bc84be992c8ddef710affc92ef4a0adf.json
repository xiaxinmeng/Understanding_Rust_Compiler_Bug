{"sha": "27e766d7bc84be992c8ddef710affc92ef4a0adf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZTc2NmQ3YmM4NGJlOTkyYzhkZGVmNzEwYWZmYzkyZWY0YTBhZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-19T12:12:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-19T12:12:51Z"}, "message": "Auto merge of #34898 - sanxiyn:rollup, r=sanxiyn\n\nRollup of 5 pull requests\n\n- Successful merges: #34807, #34853, #34875, #34884, #34889\n- Failed merges:", "tree": {"sha": "f345cf9cdd68dfc339f34e09b7dd3229d1c7c825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f345cf9cdd68dfc339f34e09b7dd3229d1c7c825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e766d7bc84be992c8ddef710affc92ef4a0adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e766d7bc84be992c8ddef710affc92ef4a0adf", "html_url": "https://github.com/rust-lang/rust/commit/27e766d7bc84be992c8ddef710affc92ef4a0adf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e766d7bc84be992c8ddef710affc92ef4a0adf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92400cf8dcf411ce7e70ab2960639977d46d5b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/92400cf8dcf411ce7e70ab2960639977d46d5b01", "html_url": "https://github.com/rust-lang/rust/commit/92400cf8dcf411ce7e70ab2960639977d46d5b01"}, {"sha": "88b37b6d9cf8cbe12550c0ac5399e9cf08674ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b37b6d9cf8cbe12550c0ac5399e9cf08674ca9", "html_url": "https://github.com/rust-lang/rust/commit/88b37b6d9cf8cbe12550c0ac5399e9cf08674ca9"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "62e196a7ccdf3a4772db6e8ba86c5808241a6e2f", "filename": "src/doc/book/inline-assembly.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Fdoc%2Fbook%2Finline-assembly.md", "raw_url": "https://github.com/rust-lang/rust/raw/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Fdoc%2Fbook%2Finline-assembly.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Finline-assembly.md?ref=27e766d7bc84be992c8ddef710affc92ef4a0adf", "patch": "@@ -60,6 +60,8 @@ asm!(\"xor %eax, %eax\"\n     : \"eax\"\n    );\n # } }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n ```\n \n Whitespace also doesn't matter:\n@@ -70,6 +72,8 @@ Whitespace also doesn't matter:\n # fn main() { unsafe {\n asm!(\"xor %eax, %eax\" ::: \"eax\");\n # } }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n ```\n \n ## Operands\n@@ -129,6 +133,8 @@ stay valid.\n // Put the value 0x200 in eax\n asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n # } }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n ```\n \n Input and output registers need not be listed since that information\n@@ -164,6 +170,8 @@ unsafe {\n }\n println!(\"eax is currently {}\", result);\n # }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n ```\n \n ## More Information"}, {"sha": "8ba5c6ffbf2ebd2c13c5f43c4690849031d9ba0e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=27e766d7bc84be992c8ddef710affc92ef4a0adf", "patch": "@@ -701,6 +701,12 @@ impl String {\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal datastructures.\n     ///\n+    /// The ownership of `ptr` is effectively transferred to the\n+    /// `String` which may then deallocate, reallocate or change the\n+    /// contents of memory pointed to by the pointer at will. Ensure\n+    /// that nothing else uses the pointer after calling this\n+    /// function.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "518b94b5031b436f8f2372d86a2006fb83cc1af0", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=27e766d7bc84be992c8ddef710affc92ef4a0adf", "patch": "@@ -342,12 +342,18 @@ impl<T> Vec<T> {\n     ///\n     /// * `ptr` needs to have been previously allocated via `String`/`Vec<T>`\n     ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `length` needs to be the length that less than or equal to `capacity`.\n+    /// * `length` needs to be less than or equal to `capacity`.\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal datastructures.\n     ///\n+    /// The ownership of `ptr` is effectively transferred to the\n+    /// `Vec<T>` which may then deallocate, reallocate or change the\n+    /// contents of memory pointed to by the pointer at will. Ensure\n+    /// that nothing else uses the pointer after calling this\n+    /// function.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -479,18 +485,45 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Shorten a vector to be `len` elements long, dropping excess elements.\n+    /// Shortens the vector, keeping the first `len` elements and dropping\n+    /// the rest.\n     ///\n     /// If `len` is greater than the vector's current length, this has no\n     /// effect.\n     ///\n+    /// The [`drain`] method can emulate `truncate`, but causes the excess\n+    /// elements to be returned instead of dropped.\n+    ///\n     /// # Examples\n     ///\n+    /// Truncating a five element vector to two elements:\n+    ///\n     /// ```\n     /// let mut vec = vec![1, 2, 3, 4, 5];\n     /// vec.truncate(2);\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n+    ///\n+    /// No truncation occurs when `len` is greater than the vector's current\n+    /// length:\n+    ///\n+    /// ```\n+    /// let mut vec = vec![1, 2, 3];\n+    /// vec.truncate(8);\n+    /// assert_eq!(vec, [1, 2, 3]);\n+    /// ```\n+    ///\n+    /// Truncating when `len == 0` is equivalent to calling the [`clear`]\n+    /// method.\n+    ///\n+    /// ```\n+    /// let mut vec = vec![1, 2, 3];\n+    /// vec.truncate(0);\n+    /// assert_eq!(vec, []);\n+    /// ```\n+    ///\n+    /// [`clear`]: #method.clear\n+    /// [`drain`]: #method.drain\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, len: usize) {\n         unsafe {"}, {"sha": "d8a11581c3b69be0de75868e938add9a8d135a20", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=27e766d7bc84be992c8ddef710affc92ef4a0adf", "patch": "@@ -902,6 +902,8 @@ macro_rules! make_mut_slice {\n \n /// Immutable slice iterator\n ///\n+/// This struct is created by the [`iter`] method on [slices].\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -915,6 +917,9 @@ macro_rules! make_mut_slice {\n ///     println!(\"{}\", element);\n /// }\n /// ```\n+///\n+/// [`iter`]: ../../std/primitive.slice.html#method.iter\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ptr: *const T,\n@@ -993,6 +998,8 @@ impl<'a, T> Clone for Iter<'a, T> {\n \n /// Mutable slice iterator.\n ///\n+/// This struct is created by the [`iter_mut`] method on [slices].\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -1010,6 +1017,9 @@ impl<'a, T> Clone for Iter<'a, T> {\n /// // We now have \"[2, 3, 4]\":\n /// println!(\"{:?}\", slice);\n /// ```\n+///\n+/// [`iter_mut`]: ../../std/primitive.slice.html#method.iter_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ptr: *mut T,"}, {"sha": "c9ca1a963a42a5a9d38c40ed335c51bf0409e0e0", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=27e766d7bc84be992c8ddef710affc92ef4a0adf", "patch": "@@ -195,7 +195,7 @@ fn write_basic_block(tcx: TyCtxt,\n              ALIGN,\n              comment(tcx, data.terminator().source_info))?;\n \n-    writeln!(w, \"{}}}\\n\", INDENT)\n+    writeln!(w, \"{}}}\", INDENT)\n }\n \n fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String {"}, {"sha": "2419625cbd3748f8e3f690e39c38072b61e5a5e7", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e766d7bc84be992c8ddef710affc92ef4a0adf/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=27e766d7bc84be992c8ddef710affc92ef4a0adf", "patch": "@@ -11,6 +11,8 @@\n // ignore-tidy-linelength\n // ignore-lldb\n // ignore-android: FIXME(#24958)\n+// ignore-arm: FIXME(#24958)\n+// ignore-aarch64: FIXME(#24958)\n \n // compile-flags:-g\n "}]}