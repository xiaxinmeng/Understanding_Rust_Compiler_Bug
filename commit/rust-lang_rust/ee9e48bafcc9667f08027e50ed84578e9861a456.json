{"sha": "ee9e48bafcc9667f08027e50ed84578e9861a456", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOWU0OGJhZmNjOTY2N2YwODAyN2U1MGVkODQ1NzhlOTg2MWE0NTY=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-09-01T17:50:01Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-09-01T17:50:01Z"}, "message": "Make methods unstable const under `const_ipv4`", "tree": {"sha": "22414cb3ab76e0d49028550b95e26a129b2b0477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22414cb3ab76e0d49028550b95e26a129b2b0477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee9e48bafcc9667f08027e50ed84578e9861a456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9e48bafcc9667f08027e50ed84578e9861a456", "html_url": "https://github.com/rust-lang/rust/commit/ee9e48bafcc9667f08027e50ed84578e9861a456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee9e48bafcc9667f08027e50ed84578e9861a456/comments", "author": null, "committer": null, "parents": [{"sha": "fbb367333190128015d35c0211877d71796f8deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb367333190128015d35c0211877d71796f8deb", "html_url": "https://github.com/rust-lang/rust/commit/fbb367333190128015d35c0211877d71796f8deb"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "c330e87e0b84c20330f30c26048580d6967458fd", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee9e48bafcc9667f08027e50ed84578e9861a456/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9e48bafcc9667f08027e50ed84578e9861a456/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=ee9e48bafcc9667f08027e50ed84578e9861a456", "patch": "@@ -239,6 +239,7 @@\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_transmute)]\n #![feature(const_raw_ptr_deref)]\n+#![feature(const_ipv4)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n #![feature(custom_test_frameworks)]"}, {"sha": "ecaef11ef5a569121f75b863285b6c7244197485", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee9e48bafcc9667f08027e50ed84578e9861a456/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9e48bafcc9667f08027e50ed84578e9861a456/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=ee9e48bafcc9667f08027e50ed84578e9861a456", "patch": "@@ -361,7 +361,7 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// assert_eq!(addr.octets(), [127, 0, 0, 1]);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn octets(&self) -> [u8; 4] {\n         // This returns the order we want because s_addr is stored in big-endian.\n@@ -405,7 +405,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_loopback(), true);\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_loopback(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub const fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n@@ -435,7 +435,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(192, 168, 0, 2).is_private(), true);\n     /// assert_eq!(Ipv4Addr::new(192, 169, 0, 2).is_private(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub const fn is_private(&self) -> bool {\n         match self.octets() {\n@@ -462,7 +462,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(169, 254, 10, 65).is_link_local(), true);\n     /// assert_eq!(Ipv4Addr::new(16, 89, 10, 65).is_link_local(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub const fn is_link_local(&self) -> bool {\n         match self.octets() {\n@@ -577,7 +577,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(100, 127, 255, 255).is_shared(), true);\n     /// assert_eq!(Ipv4Addr::new(100, 128, 0, 0).is_shared(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n     }\n@@ -610,7 +610,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(192, 0, 1, 0).is_ietf_protocol_assignment(), false);\n     /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     pub const fn is_ietf_protocol_assignment(&self) -> bool {\n         self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n     }\n@@ -634,7 +634,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(198, 19, 255, 255).is_benchmarking(), true);\n     /// assert_eq!(Ipv4Addr::new(198, 20, 0, 0).is_benchmarking(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n     }\n@@ -688,7 +688,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_multicast(), true);\n     /// assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_multicast(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub const fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n@@ -735,7 +735,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_documentation(), true);\n     /// assert_eq!(Ipv4Addr::new(193, 34, 17, 19).is_documentation(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub const fn is_documentation(&self) -> bool {\n         match self.octets() {"}]}