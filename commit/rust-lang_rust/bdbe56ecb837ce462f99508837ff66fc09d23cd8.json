{"sha": "bdbe56ecb837ce462f99508837ff66fc09d23cd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYmU1NmVjYjgzN2NlNDYyZjk5NTA4ODM3ZmY2NmZjMDlkMjNjZDg=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-04T18:32:07Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-06T17:00:43Z"}, "message": "BTreeMap first/last: simplify implementations", "tree": {"sha": "ec20c936090b59c305bedeff0482b9687906a447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec20c936090b59c305bedeff0482b9687906a447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdbe56ecb837ce462f99508837ff66fc09d23cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbe56ecb837ce462f99508837ff66fc09d23cd8", "html_url": "https://github.com/rust-lang/rust/commit/bdbe56ecb837ce462f99508837ff66fc09d23cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdbe56ecb837ce462f99508837ff66fc09d23cd8/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af89eb5e5beda2c1de0c0c031694892a51e8db07", "url": "https://api.github.com/repos/rust-lang/rust/commits/af89eb5e5beda2c1de0c0c031694892a51e8db07", "html_url": "https://github.com/rust-lang/rust/commit/af89eb5e5beda2c1de0c0c031694892a51e8db07"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "c782fb4f6a9bbe67b955ea93b8982a1412793e5e", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bdbe56ecb837ce462f99508837ff66fc09d23cd8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbe56ecb837ce462f99508837ff66fc09d23cd8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=bdbe56ecb837ce462f99508837ff66fc09d23cd8", "patch": "@@ -653,11 +653,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(map.first_key_value(), Some((&1, &\"b\")));\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n-    pub fn first_key_value<T: ?Sized>(&self) -> Option<(&K, &V)>\n-    where\n-        T: Ord,\n-        K: Borrow<T>,\n-    {\n+    pub fn first_key_value(&self) -> Option<(&K, &V)> {\n         let front = self.root.as_ref()?.as_ref().first_leaf_edge();\n         front.right_kv().ok().map(Handle::into_kv)\n     }\n@@ -682,21 +678,14 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// }\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n-    pub fn first_entry<T: ?Sized>(&mut self) -> Option<OccupiedEntry<'_, K, V>>\n-    where\n-        T: Ord,\n-        K: Borrow<T>,\n-    {\n+    pub fn first_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> {\n         let front = self.root.as_mut()?.as_mut().first_leaf_edge();\n-        if let Ok(kv) = front.right_kv() {\n-            Some(OccupiedEntry {\n-                handle: kv.forget_node_type(),\n-                length: &mut self.length,\n-                _marker: PhantomData,\n-            })\n-        } else {\n-            None\n-        }\n+        let kv = front.right_kv().ok()?;\n+        Some(OccupiedEntry {\n+            handle: kv.forget_node_type(),\n+            length: &mut self.length,\n+            _marker: PhantomData,\n+        })\n     }\n \n     /// Returns the last key-value pair in the map.\n@@ -716,11 +705,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(map.last_key_value(), Some((&2, &\"a\")));\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n-    pub fn last_key_value<T: ?Sized>(&self) -> Option<(&K, &V)>\n-    where\n-        T: Ord,\n-        K: Borrow<T>,\n-    {\n+    pub fn last_key_value(&self) -> Option<(&K, &V)> {\n         let back = self.root.as_ref()?.as_ref().last_leaf_edge();\n         back.left_kv().ok().map(Handle::into_kv)\n     }\n@@ -745,21 +730,14 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// }\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n-    pub fn last_entry<T: ?Sized>(&mut self) -> Option<OccupiedEntry<'_, K, V>>\n-    where\n-        T: Ord,\n-        K: Borrow<T>,\n-    {\n+    pub fn last_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> {\n         let back = self.root.as_mut()?.as_mut().last_leaf_edge();\n-        if let Ok(kv) = back.left_kv() {\n-            Some(OccupiedEntry {\n-                handle: kv.forget_node_type(),\n-                length: &mut self.length,\n-                _marker: PhantomData,\n-            })\n-        } else {\n-            None\n-        }\n+        let kv = back.left_kv().ok()?;\n+        Some(OccupiedEntry {\n+            handle: kv.forget_node_type(),\n+            length: &mut self.length,\n+            _marker: PhantomData,\n+        })\n     }\n \n     /// Returns `true` if the map contains a value for the specified key."}]}