{"sha": "90b196129b85b5b2ae795e9bd621b95d7bec17b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYjE5NjEyOWI4NWI1YjJhZTc5NWU5YmQ2MjFiOTVkN2JlYzE3YjQ=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-13T21:57:06Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-13T21:57:06Z"}, "message": "Improve Step::forward/backward for optimization\n\nThe previous definition did not optimize down to a single add operation,\nbut this version does appear to.", "tree": {"sha": "102abf015a402230dcb1be921869e5c9ddf87775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/102abf015a402230dcb1be921869e5c9ddf87775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b196129b85b5b2ae795e9bd621b95d7bec17b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b196129b85b5b2ae795e9bd621b95d7bec17b4", "html_url": "https://github.com/rust-lang/rust/commit/90b196129b85b5b2ae795e9bd621b95d7bec17b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b196129b85b5b2ae795e9bd621b95d7bec17b4/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef616b1dc1b3e0aa846fd8325ab8dde94de12d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef616b1dc1b3e0aa846fd8325ab8dde94de12d5", "html_url": "https://github.com/rust-lang/rust/commit/cef616b1dc1b3e0aa846fd8325ab8dde94de12d5"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "7a08d6d1ff37130cb8790aaa50047d4fc360521f", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90b196129b85b5b2ae795e9bd621b95d7bec17b4/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b196129b85b5b2ae795e9bd621b95d7bec17b4/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=90b196129b85b5b2ae795e9bd621b95d7bec17b4", "patch": "@@ -202,26 +202,24 @@ macro_rules! step_identical_methods {\n \n         #[inline]\n         fn forward(start: Self, n: usize) -> Self {\n-            match Self::forward_checked(start, n) {\n-                Some(result) => result,\n-                None => {\n-                    let result = Add::add(start, n as Self);\n-                    // add one modular cycle to ensure overflow occurs\n-                    Add::add(Add::add(result as $u, $u::MAX), 1) as Self\n-                }\n+            // In debug builds, trigger a panic on overflow.\n+            // This should optimize completely out in release builds.\n+            if Self::forward_checked(start, n).is_none() {\n+                let _ = Add::add(Self::MAX, 1);\n             }\n+            // Do wrapping math to allow e.g. `Step::forward(-128u8, 255)`.\n+            start.wrapping_add(n as Self) as Self\n         }\n \n         #[inline]\n         fn backward(start: Self, n: usize) -> Self {\n-            match Self::backward_checked(start, n) {\n-                Some(result) => result,\n-                None => {\n-                    let result = Sub::sub(start, n as Self);\n-                    // sub one modular cycle to ensure overflow occurs\n-                    Sub::sub(Sub::sub(result as $u, $u::MAX), 1) as Self\n-                }\n+            // In debug builds, trigger a panic on overflow.\n+            // This should optimize completely out in release builds.\n+            if Self::backward_checked(start, n).is_none() {\n+                let _ = Sub::sub(Self::MIN, 1);\n             }\n+            // Do wrapping math to allow e.g. `Step::backward(127u8, 255)`.\n+            start.wrapping_sub(n as Self) as Self\n         }\n     };\n }"}]}