{"sha": "6af4bf7a8d27e653d2e6316172fe140871054d27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjRiZjdhOGQyN2U2NTNkMmU2MzE2MTcyZmUxNDA4NzEwNTRkMjc=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T15:50:38Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T16:37:40Z"}, "message": "Configuration plumbing for cargo watcher", "tree": {"sha": "b1a3eed872b7659eb5400e5f2e117a0d008052f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1a3eed872b7659eb5400e5f2e117a0d008052f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af4bf7a8d27e653d2e6316172fe140871054d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af4bf7a8d27e653d2e6316172fe140871054d27", "html_url": "https://github.com/rust-lang/rust/commit/6af4bf7a8d27e653d2e6316172fe140871054d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af4bf7a8d27e653d2e6316172fe140871054d27/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a1ec723ce2ea3fa78ae468830f0a77e5658307", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a1ec723ce2ea3fa78ae468830f0a77e5658307", "html_url": "https://github.com/rust-lang/rust/commit/41a1ec723ce2ea3fa78ae468830f0a77e5658307"}], "stats": {"total": 167, "additions": 83, "deletions": 84}, "files": [{"sha": "f98b4f69cd34e974180d163a4b0ebac927c79ba5", "filename": "crates/ra_lsp_server/src/cargo_check.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs?ref=6af4bf7a8d27e653d2e6316172fe140871054d27", "patch": "@@ -1,3 +1,4 @@\n+use crate::world::Options;\n use cargo_metadata::{\n     diagnostic::{\n         Applicability, Diagnostic as RustDiagnostic, DiagnosticLevel, DiagnosticSpan,\n@@ -30,14 +31,17 @@ pub struct CheckWatcher {\n }\n \n impl CheckWatcher {\n-    pub fn new(workspace_root: PathBuf) -> CheckWatcher {\n+    pub fn new(options: &Options, workspace_root: PathBuf) -> CheckWatcher {\n+        let check_command = options.cargo_check_command.clone();\n+        let check_args = options.cargo_check_args.clone();\n         let shared = Arc::new(RwLock::new(CheckWatcherSharedState::new()));\n \n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let shared_ = shared.clone();\n         let handle = std::thread::spawn(move || {\n-            let mut check = CheckWatcherState::new(shared_, workspace_root);\n+            let mut check =\n+                CheckWatcherState::new(check_command, check_args, workspace_root, shared_);\n             check.run(&task_send, &cmd_recv);\n         });\n \n@@ -50,6 +54,8 @@ impl CheckWatcher {\n }\n \n pub struct CheckWatcherState {\n+    check_command: Option<String>,\n+    check_args: Vec<String>,\n     workspace_root: PathBuf,\n     running: bool,\n     watcher: WatchThread,\n@@ -134,11 +140,21 @@ pub enum CheckCommand {\n \n impl CheckWatcherState {\n     pub fn new(\n-        shared: Arc<RwLock<CheckWatcherSharedState>>,\n+        check_command: Option<String>,\n+        check_args: Vec<String>,\n         workspace_root: PathBuf,\n+        shared: Arc<RwLock<CheckWatcherSharedState>>,\n     ) -> CheckWatcherState {\n-        let watcher = WatchThread::new(&workspace_root);\n-        CheckWatcherState { workspace_root, running: false, watcher, last_update_req: None, shared }\n+        let watcher = WatchThread::new(check_command.as_ref(), &check_args, &workspace_root);\n+        CheckWatcherState {\n+            check_command,\n+            check_args,\n+            workspace_root,\n+            running: false,\n+            watcher,\n+            last_update_req: None,\n+            shared,\n+        }\n     }\n \n     pub fn run(&mut self, task_send: &Sender<CheckTask>, cmd_recv: &Receiver<CheckCommand>) {\n@@ -163,7 +179,11 @@ impl CheckWatcherState {\n                 self.shared.write().clear(task_send);\n \n                 self.watcher.cancel();\n-                self.watcher = WatchThread::new(&self.workspace_root);\n+                self.watcher = WatchThread::new(\n+                    self.check_command.as_ref(),\n+                    &self.check_args,\n+                    &self.workspace_root,\n+                );\n             }\n         }\n     }\n@@ -229,13 +249,25 @@ struct WatchThread {\n }\n \n impl WatchThread {\n-    fn new(workspace_root: &PathBuf) -> WatchThread {\n-        let manifest_path = format!(\"{}/Cargo.toml\", workspace_root.to_string_lossy());\n+    fn new(\n+        check_command: Option<&String>,\n+        check_args: &[String],\n+        workspace_root: &PathBuf,\n+    ) -> WatchThread {\n+        let check_command = check_command.cloned().unwrap_or(\"check\".to_string());\n+        let mut args: Vec<String> = vec![\n+            check_command,\n+            \"--message-format=json\".to_string(),\n+            \"--manifest-path\".to_string(),\n+            format!(\"{}/Cargo.toml\", workspace_root.to_string_lossy()),\n+        ];\n+        args.extend(check_args.iter().cloned());\n+\n         let (message_send, message_recv) = unbounded();\n         let (cancel_send, cancel_recv) = unbounded();\n         std::thread::spawn(move || {\n             let mut command = Command::new(\"cargo\")\n-                .args(&[\"check\", \"--message-format=json\", \"--manifest-path\", &manifest_path])\n+                .args(&args)\n                 .stdout(Stdio::piped())\n                 .stderr(Stdio::null())\n                 .spawn()"}, {"sha": "621f2238c51ad39ba5933c91876c3c5d885c5b8e", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=6af4bf7a8d27e653d2e6316172fe140871054d27", "patch": "@@ -32,6 +32,10 @@ pub struct ServerConfig {\n \n     pub max_inlay_hint_length: Option<usize>,\n \n+    pub cargo_check_enable: bool,\n+    pub cargo_check_command: Option<String>,\n+    pub cargo_check_args: Vec<String>,\n+\n     /// For internal usage to make integrated tests faster.\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n     pub with_sysroot: bool,\n@@ -51,6 +55,9 @@ impl Default for ServerConfig {\n             use_client_watching: false,\n             lru_capacity: None,\n             max_inlay_hint_length: None,\n+            cargo_check_enable: true,\n+            cargo_check_command: None,\n+            cargo_check_args: vec![],\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),\n             cargo_features: Default::default(),"}, {"sha": "1f6175699a0eb63a4ae33099d1f58d470cb3cc2a", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=6af4bf7a8d27e653d2e6316172fe140871054d27", "patch": "@@ -127,6 +127,9 @@ pub fn main_loop(\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n                 max_inlay_hint_length: config.max_inlay_hint_length,\n+                cargo_check_enable: config.cargo_check_enable,\n+                cargo_check_command: config.cargo_check_command,\n+                cargo_check_args: config.cargo_check_args,\n             }\n         };\n "}, {"sha": "235eb199d01ef7c76f0d40608d0c0a7aad256ceb", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af4bf7a8d27e653d2e6316172fe140871054d27/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=6af4bf7a8d27e653d2e6316172fe140871054d27", "patch": "@@ -35,6 +35,9 @@ pub struct Options {\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n     pub max_inlay_hint_length: Option<usize>,\n+    pub cargo_check_enable: bool,\n+    pub cargo_check_command: Option<String>,\n+    pub cargo_check_args: Vec<String>,\n }\n \n /// `WorldState` is the primary mutable state of the language server\n@@ -131,7 +134,7 @@ impl WorldState {\n         change.set_crate_graph(crate_graph);\n \n         // FIXME: Figure out the multi-workspace situation\n-        let check_watcher = CheckWatcher::new(folder_roots.first().cloned().unwrap());\n+        let check_watcher = CheckWatcher::new(&options, folder_roots.first().cloned().unwrap());\n \n         let mut analysis_host = AnalysisHost::new(lru_capacity, feature_flags);\n         analysis_host.apply_change(change);"}, {"sha": "5f4123397b2e068c8d0e3b257c789ef6d7dd32be", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6af4bf7a8d27e653d2e6316172fe140871054d27/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/6af4bf7a8d27e653d2e6316172fe140871054d27/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=6af4bf7a8d27e653d2e6316172fe140871054d27", "patch": "@@ -188,20 +188,10 @@\n                     \"default\": \"ra_lsp_server\",\n                     \"description\": \"Path to ra_lsp_server executable\"\n                 },\n-                \"rust-analyzer.enableCargoWatchOnStartup\": {\n-                    \"type\": \"string\",\n-                    \"default\": \"ask\",\n-                    \"enum\": [\n-                        \"ask\",\n-                        \"enabled\",\n-                        \"disabled\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Asks each time whether to run `cargo watch`\",\n-                        \"`cargo watch` is always started\",\n-                        \"Don't start `cargo watch`\"\n-                    ],\n-                    \"description\": \"Whether to run `cargo watch` on startup\"\n+                \"rust-analyzer.enableCargoCheck\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Run `cargo check` for diagnostics on save\"\n                 },\n                 \"rust-analyzer.excludeGlobs\": {\n                     \"type\": \"array\",\n@@ -213,25 +203,15 @@\n                     \"default\": true,\n                     \"description\": \"client provided file watching instead of notify watching.\"\n                 },\n-                \"rust-analyzer.cargo-watch.arguments\": {\n-                    \"type\": \"string\",\n-                    \"description\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n-                    \"default\": \"\"\n-                },\n-                \"rust-analyzer.cargo-watch.command\": {\n-                    \"type\": \"string\",\n-                    \"description\": \"`cargo-watch` command. (e.g: `clippy` will run as `cargo watch -x clippy` )\",\n-                    \"default\": \"check\"\n-                },\n-                \"rust-analyzer.cargo-watch.ignore\": {\n+                \"rust-analyzer.cargo-check.arguments\": {\n                     \"type\": \"array\",\n-                    \"description\": \"A list of patterns for cargo-watch to ignore (will be passed as `--ignore`)\",\n+                    \"description\": \"`cargo-check` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo check --features=\\\"shumway,pdf\\\"` )\",\n                     \"default\": []\n                 },\n-                \"rust-analyzer.cargo-watch.allTargets\": {\n-                    \"type\": \"boolean\",\n-                    \"description\": \"Check all targets and tests (will be passed as `--all-targets`)\",\n-                    \"default\": true\n+                \"rust-analyzer.cargo-check.command\": {\n+                    \"type\": \"string\",\n+                    \"description\": \"`cargo-check` command. (e.g: `clippy` will run as `cargo clippy` )\",\n+                    \"default\": \"check\"\n                 },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\","}, {"sha": "96532e2c9d541abb70fccf1f0e6d35f3c6ac79da", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 15, "deletions": 44, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6af4bf7a8d27e653d2e6316172fe140871054d27/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6af4bf7a8d27e653d2e6316172fe140871054d27/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=6af4bf7a8d27e653d2e6316172fe140871054d27", "patch": "@@ -4,16 +4,10 @@ import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n-export type CargoWatchStartupOptions = 'ask' | 'enabled' | 'disabled';\n-export type CargoWatchTraceOptions = 'off' | 'error' | 'verbose';\n-\n-export interface CargoWatchOptions {\n-    enableOnStartup: CargoWatchStartupOptions;\n-    arguments: string;\n-    command: string;\n-    trace: CargoWatchTraceOptions;\n-    ignore: string[];\n-    allTargets: boolean;\n+export interface CargoCheckOptions {\n+    enabled: boolean;\n+    arguments: string[];\n+    command: null | string;\n }\n \n export interface CargoFeatures {\n@@ -35,13 +29,10 @@ export class Config {\n     public featureFlags = {};\n     // for internal use\n     public withSysroot: null | boolean = null;\n-    public cargoWatchOptions: CargoWatchOptions = {\n-        enableOnStartup: 'ask',\n-        trace: 'off',\n-        arguments: '',\n-        command: '',\n-        ignore: [],\n-        allTargets: true,\n+    public cargoCheckOptions: CargoCheckOptions = {\n+        enabled: true,\n+        arguments: [],\n+        command: null,\n     };\n     public cargoFeatures: CargoFeatures = {\n         noDefaultFeatures: false,\n@@ -100,47 +91,27 @@ export class Config {\n                 RA_LSP_DEBUG || (config.get('raLspServerPath') as string);\n         }\n \n-        if (config.has('enableCargoWatchOnStartup')) {\n-            this.cargoWatchOptions.enableOnStartup = config.get<\n-                CargoWatchStartupOptions\n-            >('enableCargoWatchOnStartup', 'ask');\n-        }\n-\n-        if (config.has('trace.cargo-watch')) {\n-            this.cargoWatchOptions.trace = config.get<CargoWatchTraceOptions>(\n-                'trace.cargo-watch',\n-                'off',\n+        if (config.has('enableCargoCheck')) {\n+            this.cargoCheckOptions.enabled = config.get<boolean>(\n+                'enableCargoCheck',\n+                true,\n             );\n         }\n \n         if (config.has('cargo-watch.arguments')) {\n-            this.cargoWatchOptions.arguments = config.get<string>(\n+            this.cargoCheckOptions.arguments = config.get<string[]>(\n                 'cargo-watch.arguments',\n-                '',\n+                [],\n             );\n         }\n \n         if (config.has('cargo-watch.command')) {\n-            this.cargoWatchOptions.command = config.get<string>(\n+            this.cargoCheckOptions.command = config.get<string>(\n                 'cargo-watch.command',\n                 '',\n             );\n         }\n \n-        if (config.has('cargo-watch.ignore')) {\n-            this.cargoWatchOptions.ignore = config.get<string[]>(\n-                'cargo-watch.ignore',\n-                [],\n-            );\n-        }\n-\n-        if (config.has('cargo-watch.allTargets')) {\n-            this.cargoWatchOptions.allTargets = config.get<boolean>(\n-                'cargo-watch.allTargets',\n-                true,\n-            );\n-        }\n-\n         if (config.has('lruCapacity')) {\n             this.lruCapacity = config.get('lruCapacity') as number;\n         }"}, {"sha": "409d3b4b7382049b9cfeab999bbbc082cbd7f9a0", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af4bf7a8d27e653d2e6316172fe140871054d27/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6af4bf7a8d27e653d2e6316172fe140871054d27/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=6af4bf7a8d27e653d2e6316172fe140871054d27", "patch": "@@ -55,6 +55,9 @@ export class Server {\n                 publishDecorations: true,\n                 lruCapacity: Server.config.lruCapacity,\n                 maxInlayHintLength: Server.config.maxInlayHintLength,\n+                cargoCheckEnable: Server.config.cargoCheckOptions.enabled,\n+                cargoCheckCommand: Server.config.cargoCheckOptions.command,\n+                cargoCheckArgs: Server.config.cargoCheckOptions.arguments,\n                 excludeGlobs: Server.config.excludeGlobs,\n                 useClientWatching: Server.config.useClientWatching,\n                 featureFlags: Server.config.featureFlags,"}]}