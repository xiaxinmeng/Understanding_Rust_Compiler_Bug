{"sha": "067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2N2YxYjcwMzBlNDg2NDBkNDlkYzNmYmRmMWE3ZGE1YzQwYzc3YjA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-30T20:56:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T20:56:56Z"}, "message": "Rollup merge of #80491 - RalfJung:dangling-of-val, r=oli-obk\n\nMiri: make size/align_of_val work for dangling raw ptrs\n\nThis is needed for https://github.com/rust-lang/rust/issues/80365#issuecomment-752128105.\n\nr? `@oli-obk`", "tree": {"sha": "5eae7b22ddc6aaa32388cbe164d96871bcd4a0bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eae7b22ddc6aaa32388cbe164d96871bcd4a0bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7OmYCRBK7hj4Ov3rIwAAdHIIAEyZXX2+z9GOV0gkuC/9iUWU\n1y/D9ssDd0U0ae4SPXv1OFCwSQCYB6Kj2C2BBdqHo3DjaHGmWwg5QmZlIesPRSXw\nAsggp0Gj8DeIyDxy8lrgp+3tySRI4JiOXukiohTLvMGTMxnP0iimYK8JZKXuYPio\nhO5EyQIpoBGGG7fQ7AQ5WX3yfGF/2MbgMjRQXEbtf9yPSrUJzuVzFOK00cpVsMRu\nMgwLxbAIimOt1iLmOZm46ZaiQL46yb0L5zE9R+XIIwEfYwoxN/3LaYMrTrDNf335\n9oT9iyXyCKaYcbiJlG0rk7m6FNiYGHVBfGD/mOfGd1S+HQkd4ZL2r1g/isOnJVs=\n=wb1u\n-----END PGP SIGNATURE-----\n", "payload": "tree 5eae7b22ddc6aaa32388cbe164d96871bcd4a0bc\nparent 3d93dfdf6e46d8c685d82b1b57234a20e81ca539\nparent f76bae924438fbf4a885fd8827d43499ab5d1f68\nauthor Mara Bos <m-ou.se@m-ou.se> 1609361816 +0000\ncommitter GitHub <noreply@github.com> 1609361816 +0000\n\nRollup merge of #80491 - RalfJung:dangling-of-val, r=oli-obk\n\nMiri: make size/align_of_val work for dangling raw ptrs\n\nThis is needed for https://github.com/rust-lang/rust/issues/80365#issuecomment-752128105.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "html_url": "https://github.com/rust-lang/rust/commit/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d93dfdf6e46d8c685d82b1b57234a20e81ca539", "html_url": "https://github.com/rust-lang/rust/commit/3d93dfdf6e46d8c685d82b1b57234a20e81ca539"}, {"sha": "f76bae924438fbf4a885fd8827d43499ab5d1f68", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76bae924438fbf4a885fd8827d43499ab5d1f68", "html_url": "https://github.com/rust-lang/rust/commit/f76bae924438fbf4a885fd8827d43499ab5d1f68"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "58858c09f44ef0079afd6c30465995a7e1a07631", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "patch": "@@ -141,9 +141,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             sym::min_align_of_val | sym::size_of_val => {\n-                let place = self.deref_operand(args[0])?;\n+                // Avoid `deref_operand` -- this is not a deref, the ptr does not have to be\n+                // dereferencable!\n+                let place = self.ref_to_mplace(self.read_immediate(args[0])?)?;\n                 let (size, align) = self\n-                    .size_and_align_of(place.meta, place.layout)?\n+                    .size_and_align_of_mplace(place)?\n                     .ok_or_else(|| err_unsup_format!(\"`extern type` does not have known layout\"))?;\n \n                 let result = match intrinsic_name {"}, {"sha": "423d1270ac8652709ecfe67f1474c65f7439a421", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "patch": "@@ -391,7 +391,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         }\n         // Make sure this is dereferenceable and all.\n         let size_and_align = try_validation!(\n-            self.ecx.size_and_align_of(place.meta, place.layout),\n+            self.ecx.size_and_align_of_mplace(place),\n             self.path,\n             err_ub!(InvalidMeta(msg)) => { \"invalid {} metadata: {}\", kind, msg },\n         );"}, {"sha": "22e44a3c4090459a44d9c49230a4ae5706ade726", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "patch": "@@ -379,7 +379,8 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n-pub unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n+#[rustc_const_unstable(feature = \"const_size_of_val_raw\", issue = \"46571\")]\n+pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n     intrinsics::size_of_val(val)\n }\n \n@@ -510,7 +511,8 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n-pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n+#[rustc_const_unstable(feature = \"const_align_of_val_raw\", issue = \"46571\")]\n+pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n     intrinsics::min_align_of_val(val)\n }\n "}, {"sha": "5c0d7d94d64f1bf061f4e5ca3e0c22309e957c32", "filename": "src/test/ui/consts/const-size_of_val-align_of_val.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067f1b7030e48640d49dc3fbdf1a7da5c40c77b0/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs?ref=067f1b7030e48640d49dc3fbdf1a7da5c40c77b0", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(const_size_of_val, const_align_of_val)]\n+#![feature(const_size_of_val_raw, const_align_of_val_raw, layout_for_ptr)]\n \n use std::mem;\n \n@@ -32,6 +33,9 @@ const ALIGN_OF_UGH: usize = mem::align_of_val(&UGH);\n \n const SIZE_OF_SLICE: usize = mem::size_of_val(\"foobar\".as_bytes());\n \n+const SIZE_OF_DANGLING: usize = unsafe { mem::size_of_val_raw(0x100 as *const i32) };\n+const ALIGN_OF_DANGLING: usize = unsafe { mem::align_of_val_raw(0x100 as *const i16) };\n+\n fn main() {\n     assert_eq!(SIZE_OF_FOO, mem::size_of::<Foo>());\n     assert_eq!(SIZE_OF_BAR, mem::size_of::<Bar>());\n@@ -41,5 +45,8 @@ fn main() {\n     assert_eq!(ALIGN_OF_BAR, mem::align_of::<Bar>());\n     assert_eq!(ALIGN_OF_UGH, mem::align_of::<Ugh>());\n \n+    assert_eq!(SIZE_OF_DANGLING, mem::size_of::<i32>());\n+    assert_eq!(ALIGN_OF_DANGLING, mem::align_of::<i16>());\n+\n     assert_eq!(SIZE_OF_SLICE, \"foobar\".len());\n }"}]}