{"sha": "8af134e03188507f12e8280eb2b27f3811cba68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjEzNGUwMzE4ODUwN2YxMmU4MjgwZWIyYjI3ZjM4MTFjYmE2OGY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-02-09T14:49:38Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-02-09T21:25:10Z"}, "message": "rustc_mir: insert a dummy access to places being matched on, when building MIR.", "tree": {"sha": "45ee6b5662ca3d76d776965192610c0b363a1c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45ee6b5662ca3d76d776965192610c0b363a1c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af134e03188507f12e8280eb2b27f3811cba68f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af134e03188507f12e8280eb2b27f3811cba68f", "html_url": "https://github.com/rust-lang/rust/commit/8af134e03188507f12e8280eb2b27f3811cba68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af134e03188507f12e8280eb2b27f3811cba68f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa66dbe01758740fe1e716771db9fdfe9a2e07b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa66dbe01758740fe1e716771db9fdfe9a2e07b", "html_url": "https://github.com/rust-lang/rust/commit/4aa66dbe01758740fe1e716771db9fdfe9a2e07b"}], "stats": {"total": 223, "additions": 152, "deletions": 71}, "files": [{"sha": "6b0b5b0ab9e8806af8ecb3f055260a2703bcae40", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -38,6 +38,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                       -> BlockAnd<()> {\n         let discriminant_place = unpack!(block = self.as_place(block, discriminant));\n \n+        // Matching on a `discriminant_place` with an uninhabited type doesn't\n+        // generate any memory reads by itself, and so if the place \"expression\"\n+        // contains unsafe operations like raw pointer dereferences or union\n+        // field projections, we wouldn't know to require an `unsafe` block\n+        // around a `match` equivalent to `std::intrinsics::unreachable()`.\n+        // See issue #47412 for this hole being discovered in the wild.\n+        //\n+        // HACK(eddyb) Work around the above issue by adding a dummy inspection\n+        // of `discriminant_place`, specifically by applying `Rvalue::Discriminant`\n+        // (which will work regardless of type) and storing the result in a temp.\n+        let dummy_source_info = self.source_info(span);\n+        let dummy_access = Rvalue::Discriminant(discriminant_place.clone());\n+        let dummy_ty = dummy_access.ty(&self.local_decls, self.hir.tcx());\n+        let dummy_temp = self.temp(dummy_ty, dummy_source_info.span);\n+        self.cfg.push_assign(block, dummy_source_info, &dummy_temp, dummy_access);\n+\n         let mut arm_blocks = ArmBlocks {\n             blocks: arms.iter()\n                         .map(|_| self.cfg.start_new_block())"}, {"sha": "1d08b8074658288f8a432c367dc1658eac41a391", "filename": "src/test/compile-fail/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -72,7 +72,7 @@ fn main() {\n     {\n         let mut e = Baz::X(2);\n         let _e0 = e.x();\n-        match e {\n+        match e { //[mir]~ ERROR cannot use `e` because it was mutably borrowed\n             Baz::X(value) => value\n             //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n             //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed\n@@ -110,7 +110,7 @@ fn main() {\n     {\n         let mut e = Box::new(Baz::X(3));\n         let _e0 = e.x();\n-        match *e {\n+        match *e { //[mir]~ ERROR cannot use `*e` because it was mutably borrowed\n             Baz::X(value) => value\n             //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n             //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed\n@@ -127,25 +127,25 @@ fn main() {\n     {\n         let mut v = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         let _v = &mut v;\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[x, _, .., _, _] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[_, x, .., _, _] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[_, _, .., x, _] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[_, _, .., _, x] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n@@ -156,25 +156,25 @@ fn main() {\n     {\n         let mut v = &[1, 2, 3, 4, 5];\n         let _v = &mut v;\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[x..] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[_, x..] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[x.., _] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[_, x.., _] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                 //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n@@ -187,7 +187,7 @@ fn main() {\n \n         let mut e = E::A(3);\n         let _e = &mut e;\n-        match e {\n+        match e { //[mir]~ ERROR cannot use `e` because it was mutably borrowed\n             E::A(ref ax) =>\n                 //[ast]~^ ERROR cannot borrow `e.0` as immutable because `e` is also borrowed as mutable\n                 //[mir]~^^ ERROR cannot borrow `e.0` as immutable because it is also borrowed as mutable\n@@ -205,14 +205,14 @@ fn main() {\n         struct S { x: F, y: (u32, u32), };\n         let mut s = S { x: F { x: 1, y: 2}, y: (999, 998) };\n         let _s = &mut s;\n-        match s {\n+        match s { //[mir]~ ERROR cannot use `s` because it was mutably borrowed\n             S  { y: (ref y0, _), .. } =>\n                 //[ast]~^ ERROR cannot borrow `s.y.0` as immutable because `s` is also borrowed as mutable\n                 //[mir]~^^ ERROR cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n                 println!(\"y0: {:?}\", y0),\n             _ => panic!(\"other case\"),\n         }\n-        match s {\n+        match s { //[mir]~ ERROR cannot use `s` because it was mutably borrowed\n             S  { x: F { y: ref x0, .. }, .. } =>\n                 //[ast]~^ ERROR cannot borrow `s.x.y` as immutable because `s` is also borrowed as mutable\n                 //[mir]~^^ ERROR cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n@@ -263,7 +263,7 @@ fn main() {\n         struct F {x: u32, y: u32};\n         let mut v = &[F{x: 1, y: 2}, F{x: 3, y: 4}];\n         let _v = &mut v;\n-        match v {\n+        match v { //[mir]~ ERROR cannot use `v` because it was mutably borrowed\n             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n             //[mir]~^ ERROR cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n             // No errors in AST"}, {"sha": "3e57ac0ca1910a11996afa2a0b04ca796e2456a3", "filename": "src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -19,7 +19,7 @@ enum Foo {\n fn match_enum() {\n     let mut foo = Foo::B;\n     let p = &mut foo;\n-    let _ = match foo {\n+    let _ = match foo { //[mir]~ ERROR [E0503]\n         Foo::B => 1, //[mir]~ ERROR [E0503]\n         _ => 2,\n         Foo::A(x) => x //[ast]~ ERROR [E0503]\n@@ -31,7 +31,7 @@ fn match_enum() {\n fn main() {\n     let mut x = 1;\n     let _x = &mut x;\n-    let _ = match x {\n+    let _ = match x { //[mir]~ ERROR [E0503]\n         x => x + 1, //[ast]~ ERROR [E0503]\n                     //[mir]~^ ERROR [E0503]\n         y => y + 2, //[ast]~ ERROR [E0503]"}, {"sha": "7481befcb7952c91dc17b0e8de7d604216993dca", "filename": "src/test/compile-fail/issue-47412.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fcompile-fail%2Fissue-47412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fcompile-fail%2Fissue-47412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-47412.rs?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Copy, Clone)]\n+enum Void {}\n+\n+// Tests that we detect unsafe places (specifically, union fields and\n+// raw pointer dereferences), even when they're matched on while having\n+// an uninhabited type (equivalent to `std::intrinsics::unreachable()`).\n+\n+fn union_field() {\n+    union Union { unit: (), void: Void }\n+    let u = Union { unit: () };\n+    match u.void {}\n+    //~^ ERROR access to union field requires unsafe function or block\n+}\n+\n+fn raw_ptr_deref() {\n+    let ptr = std::ptr::null::<Void>();\n+    match *ptr {}\n+    //~^ ERROR dereference of raw pointer requires unsafe function or block\n+}\n+\n+fn main() {}"}, {"sha": "ba1b54d59f69a4a0860b05c193c59ecfc2d238aa", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 55, "deletions": 52, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -53,17 +53,18 @@ fn main() {\n //  bb0: {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n-//      _5 = discriminant(_2);\n-//      switchInt(move _5) -> [0isize: bb6, 1isize: bb4, otherwise: bb8];\n+//      _3 = discriminant(_2);\n+//      _6 = discriminant(_2);\n+//      switchInt(move _6) -> [0isize: bb6, 1isize: bb4, otherwise: bb8];\n //  }\n //  bb1: {\n //      resume;\n //  }\n //  bb2: {  // arm1\n-//      StorageLive(_7);\n-//      _7 = _3;\n-//      _1 = (const 1i32, move _7);\n-//      StorageDead(_7);\n+//      StorageLive(_8);\n+//      _8 = _4;\n+//      _1 = (const 1i32, move _8);\n+//      StorageDead(_8);\n //      goto -> bb13;\n //  }\n //  bb3: { // binding3(empty) and arm3\n@@ -86,24 +87,24 @@ fn main() {\n //      unreachable;\n //  }\n //  bb9: { // binding1 and guard\n-//      StorageLive(_3);\n-//      _3 = ((_2 as Some).0: i32);\n-//      StorageLive(_6);\n-//      _6 = const guard() -> [return: bb10, unwind: bb1];\n+//      StorageLive(_4);\n+//      _4 = ((_2 as Some).0: i32);\n+//      StorageLive(_7);\n+//      _7 = const guard() -> [return: bb10, unwind: bb1];\n //  }\n //  bb10: { // end of guard\n-//      switchInt(move _6) -> [0u8: bb11, otherwise: bb2];\n+//      switchInt(move _7) -> [0u8: bb11, otherwise: bb2];\n //  }\n //  bb11: { // to pre_binding2\n //      falseEdges -> [real: bb5, imaginary: bb5];\n //  }\n //  bb12: { // bindingNoLandingPads.before.mir2 and arm2\n-//      StorageLive(_4);\n-//      _4 = ((_2 as Some).0: i32);\n-//      StorageLive(_8);\n-//      _8 = _4;\n-//      _1 = (const 2i32, move _8);\n-//      StorageDead(_8);\n+//      StorageLive(_5);\n+//      _5 = ((_2 as Some).0: i32);\n+//      StorageLive(_9);\n+//      _9 = _5;\n+//      _1 = (const 2i32, move _9);\n+//      StorageDead(_9);\n //      goto -> bb13;\n //  }\n //  bb13: {\n@@ -116,17 +117,18 @@ fn main() {\n //  bb0: {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n-//      _5 = discriminant(_2);\n-//      switchInt(move _5) -> [0isize: bb5, 1isize: bb4, otherwise: bb8];\n+//      _3 = discriminant(_2);\n+//      _6 = discriminant(_2);\n+//      switchInt(move _6) -> [0isize: bb5, 1isize: bb4, otherwise: bb8];\n //  }\n //  bb1: {\n //      resume;\n //  }\n //  bb2: { // arm1\n-//      StorageLive(_7);\n-//      _7 = _3;\n-//      _1 = (const 1i32, move _7);\n-//      StorageDead(_7);\n+//      StorageLive(_8);\n+//      _8 = _4;\n+//      _1 = (const 1i32, move _8);\n+//      StorageDead(_8);\n //      goto -> bb13;\n //  }\n //  bb3: { // binding3(empty) and arm3\n@@ -149,24 +151,24 @@ fn main() {\n //      unreachable;\n //  }\n //  bb9: { // binding1 and guard\n-//      StorageLive(_3);\n-//      _3 = ((_2 as Some).0: i32);\n-//      StorageLive(_6);\n-//      _6 = const guard() -> [return: bb10, unwind: bb1];\n+//      StorageLive(_4);\n+//      _4 = ((_2 as Some).0: i32);\n+//      StorageLive(_7);\n+//      _7 = const guard() -> [return: bb10, unwind: bb1];\n //  }\n //  bb10: { // end of guard\n-//      switchInt(move _6) -> [0u8: bb11, otherwise: bb2];\n+//      switchInt(move _7) -> [0u8: bb11, otherwise: bb2];\n //  }\n //  bb11: { // to pre_binding2\n //      falseEdges -> [real: bb6, imaginary: bb5];\n //  }\n //  bb12: { // binding2 and arm2\n-//      StorageLive(_4);\n-//      _4 = ((_2 as Some).0: i32);\n-//      StorageLive(_8);\n-//      _8 = _4;\n-//      _1 = (const 2i32, move _8);\n-//      StorageDead(_8);\n+//      StorageLive(_5);\n+//      _5 = ((_2 as Some).0: i32);\n+//      StorageLive(_9);\n+//      _9 = _5;\n+//      _1 = (const 2i32, move _9);\n+//      StorageDead(_9);\n //      goto -> bb13;\n //  }\n //  bb13: {\n@@ -179,8 +181,9 @@ fn main() {\n // bb0: {\n //     ...\n //     _2 = std::option::Option<i32>::Some(const 1i32,);\n-//     _7 = discriminant(_2);\n-//     switchInt(move _7) -> [1isize: bb4, otherwise: bb5];\n+//     _3 = discriminant(_2);\n+//     _8 = discriminant(_2);\n+//     switchInt(move _8) -> [1isize: bb4, otherwise: bb5];\n // }\n // bb1: {\n //     resume;\n@@ -210,41 +213,41 @@ fn main() {\n //     unreachable;\n // }\n // bb9: { // binding1: Some(w) if guard()\n-//     StorageLive(_3);\n-//     _3 = ((_2 as Some).0: i32);\n-//     StorageLive(_8);\n-//     _8 = const guard() -> [return: bb10, unwind: bb1];\n+//     StorageLive(_4);\n+//     _4 = ((_2 as Some).0: i32);\n+//     StorageLive(_9);\n+//     _9 = const guard() -> [return: bb10, unwind: bb1];\n // }\n // bb10: { //end of guard\n-//    switchInt(move _8) -> [0u8: bb11, otherwise: bb2];\n+//    switchInt(move _9) -> [0u8: bb11, otherwise: bb2];\n // }\n // bb11: { // to pre_binding2\n //     falseEdges -> [real: bb5, imaginary: bb5];\n // }\n // bb12: { // binding2 & arm2\n-//     StorageLive(_4);\n-//     _4 = _2;\n+//     StorageLive(_5);\n+//     _5 = _2;\n //     _1 = const 2i32;\n //     goto -> bb17;\n // }\n // bb13: { // binding3: Some(y) if guard2(y)\n-//     StorageLive(_5);\n-//     _5 = ((_2 as Some).0: i32);\n-//     StorageLive(_10);\n+//     StorageLive(_6);\n+//     _6 = ((_2 as Some).0: i32);\n //     StorageLive(_11);\n-//     _11 = _5;\n-//     _10 = const guard2(move _11) -> [return: bb14, unwind: bb1];\n+//     StorageLive(_12);\n+//     _12 = _6;\n+//     _11 = const guard2(move _12) -> [return: bb14, unwind: bb1];\n // }\n // bb14: { // end of guard2\n-//     StorageDead(_11);\n-//     switchInt(move _10) -> [0u8: bb15, otherwise: bb3];\n+//     StorageDead(_12);\n+//     switchInt(move _11) -> [0u8: bb15, otherwise: bb3];\n // }\n // bb15: { // to pre_binding4\n //     falseEdges -> [real: bb7, imaginary: bb7];\n // }\n // bb16: { // binding4 & arm4\n-//     StorageLive(_6);\n-//     _6 = _2;\n+//     StorageLive(_7);\n+//     _7 = _2;\n //     _1 = const 4i32;\n //     goto -> bb17;\n // }"}, {"sha": "f7c33691ad072aca5e2762e21da8588b806205f5", "filename": "src/test/ui/borrowck/issue-41962.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -18,6 +18,7 @@ pub fn main(){\n         //~^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n         //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n+        //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n         //~| ERROR use of moved value: `maybe.0` (Mir) [E0382]\n         }\n     }"}, {"sha": "13305fd96562615f40bc8f231f0c703b6e6d839d", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -16,6 +16,23 @@ error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast)\n    |\n    = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n+error[E0382]: use of moved value: `maybe` (Mir)\n+  --> $DIR/issue-41962.rs:17:9\n+   |\n+17 |           if let Some(thing) = maybe {\n+   |           ^           ----- value moved here\n+   |  _________|\n+   | |\n+18 | |         //~^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n+19 | |         //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n+20 | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n+21 | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n+22 | |         //~| ERROR use of moved value: `maybe.0` (Mir) [E0382]\n+23 | |         }\n+   | |_________^ value used here after move\n+   |\n+   = note: move occurs because `maybe` has type `std::option::Option<std::vec::Vec<bool>>`, which does not implement the `Copy` trait\n+\n error[E0382]: use of moved value: `maybe` (Mir)\n   --> $DIR/issue-41962.rs:17:16\n    |\n@@ -35,5 +52,5 @@ error[E0382]: use of moved value: `maybe.0` (Mir)\n    |\n    = note: move occurs because `maybe.0` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "4b95bbd5a052b5bdd99f9c73d092f38a179bd95a", "filename": "src/test/ui/nll/borrowed-match-issue-45045.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     let mut e = Xyz::A;\n     let f = &mut e;\n     let g = f;\n-    match e {\n+    match e { //~ cannot use `e` because it was mutably borrowed [E0503]\n         Xyz::A => println!(\"a\"),\n         //~^ cannot use `e` because it was mutably borrowed [E0503]\n         Xyz::B => println!(\"b\"),"}, {"sha": "f5271b99c4be30c15d7bf2e5ca55da2b8e533ee9", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8af134e03188507f12e8280eb2b27f3811cba68f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=8af134e03188507f12e8280eb2b27f3811cba68f", "patch": "@@ -1,3 +1,16 @@\n+error[E0503]: cannot use `e` because it was mutably borrowed\n+  --> $DIR/borrowed-match-issue-45045.rs:24:5\n+   |\n+22 |       let f = &mut e;\n+   |               ------ borrow of `e` occurs here\n+23 |       let g = f;\n+24 | /     match e { //~ cannot use `e` because it was mutably borrowed [E0503]\n+25 | |         Xyz::A => println!(\"a\"),\n+26 | |         //~^ cannot use `e` because it was mutably borrowed [E0503]\n+27 | |         Xyz::B => println!(\"b\"),\n+28 | |     };\n+   | |_____^ use of borrowed `e`\n+\n error[E0503]: cannot use `e` because it was mutably borrowed\n   --> $DIR/borrowed-match-issue-45045.rs:25:9\n    |\n@@ -7,5 +20,5 @@ error[E0503]: cannot use `e` because it was mutably borrowed\n 25 |         Xyz::A => println!(\"a\"),\n    |         ^^^^^^ use of borrowed `e`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}