{"sha": "2d57b25f6b3803ec505ba4909302bebb2cad4afd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNTdiMjVmNmIzODAzZWM1MDViYTQ5MDkzMDJiZWJiMmNhZDRhZmQ=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T00:28:20Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T01:22:27Z"}, "message": "Added a stress test mode to pfib.", "tree": {"sha": "fda2cc33c692b7aad8e29fee23c9ae2a4d5ac4e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda2cc33c692b7aad8e29fee23c9ae2a4d5ac4e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d57b25f6b3803ec505ba4909302bebb2cad4afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d57b25f6b3803ec505ba4909302bebb2cad4afd", "html_url": "https://github.com/rust-lang/rust/commit/2d57b25f6b3803ec505ba4909302bebb2cad4afd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d57b25f6b3803ec505ba4909302bebb2cad4afd/comments", "author": null, "committer": null, "parents": [{"sha": "f6e37f659cd3a262c727f79792fc85df648fbe35", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e37f659cd3a262c727f79792fc85df648fbe35", "html_url": "https://github.com/rust-lang/rust/commit/f6e37f659cd3a262c727f79792fc85df648fbe35"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "c10695139807b70690ca7d805ded8e4a62a14ba5", "filename": "src/test/bench/task-perf/pfib.rs", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2d57b25f6b3803ec505ba4909302bebb2cad4afd/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d57b25f6b3803ec505ba4909302bebb2cad4afd/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs?ref=2d57b25f6b3803ec505ba4909302bebb2cad4afd", "patch": "@@ -17,6 +17,8 @@ import std::time;\n import std::str;\n import std::int::range;\n import std::io;\n+import std::getopts;\n+import std::task;\n \n fn recv[T](&port[T] p) -> T {\n     let T x;\n@@ -33,7 +35,7 @@ fn fib(int n) -> int {\n             c <| 1;\n         }\n         else {\n-            let port[int] p = port();\n+            auto p = port();\n       \n             auto t1 = spawn pfib(chan(p), n - 1);\n             auto t2 = spawn pfib(chan(p), n - 2);\n@@ -42,11 +44,48 @@ fn fib(int n) -> int {\n         }\n     }\n \n-    let port[int] p = port();\n+    auto p = port();\n     auto t = spawn pfib(chan(p), n);\n     ret recv(p);\n }\n \n+type config = rec(bool stress);\n+\n+fn parse_opts(vec[str] argv) -> config {\n+    auto opts = [getopts::optflag(\"stress\")];\n+\n+    auto opt_args = vec::slice(argv, 1u, vec::len(argv));\n+\n+    alt(getopts::getopts(opt_args, opts)) {\n+        case(getopts::success(?m)) {\n+            ret rec(stress = getopts::opt_present(m, \"stress\"))\n+        }\n+        case(getopts::failure(_)) {\n+            fail;\n+        }\n+    }\n+}\n+\n+fn stress_task(int id) {\n+    auto i = 0;\n+    while(true) {\n+        auto n = 15;\n+        assert(fib(n) == fib(n));\n+        i += 1;\n+        log_err #fmt(\"%d: Completed %d iterations\", id, i);\n+    }\n+}\n+\n+fn stress(int num_tasks) {\n+    auto tasks = [];\n+    for each(int i in range(0, num_tasks)) {\n+        tasks += [spawn stress_task(i)];\n+    }\n+    for each(int i in range(0, num_tasks)) {\n+        task::join(tasks.(i));\n+    }    \n+}\n+\n fn main(vec[str] argv) {\n     if(vec::len(argv) == 1u) {\n         assert (fib(8) == 21);\n@@ -56,24 +95,29 @@ fn main(vec[str] argv) {\n     }\n     else {\n         // Interactive mode! Wooo!!!!\n+        auto opts = parse_opts(argv);\n \n-        auto max = uint::parse_buf(str::bytes(argv.(1)), 10u) as int;\n+        if(opts.stress) {\n+            stress(2);\n+        }\n+        else {\n+            auto max = uint::parse_buf(str::bytes(argv.(1)), 10u) as int;\n \n-        auto num_trials = 10;\n+            auto num_trials = 10;\n \n-        auto out = io::stdout();\n+            auto out = io::stdout();\n \n-        for each(int n in range(1, max + 1)) {\n-            for each(int i in range(0, num_trials)) {\n-                auto start = time::precise_time_ns();\n-                auto fibn = fib(n);\n-                auto stop = time::precise_time_ns();\n+            for each(int n in range(1, max + 1)) {\n+                for each(int i in range(0, num_trials)) {\n+                    auto start = time::precise_time_ns();\n+                    auto fibn = fib(n);\n+                    auto stop = time::precise_time_ns();\n \n-                auto elapsed = (stop - start) as int;\n+                    auto elapsed = (stop - start) as int;\n             \n-                out.write_line(#fmt(\"%d\\t%d\\t%d\", n, fibn, elapsed));\n+                    out.write_line(#fmt(\"%d\\t%d\\t%d\", n, fibn, elapsed));\n+                }\n             }\n         }\n-\n     }\n }"}]}