{"sha": "6801bc8f552ce740deb60212903ba43de197689c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MDFiYzhmNTUyY2U3NDBkZWI2MDIxMjkwM2JhNDNkZTE5NzY4OWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-20T02:15:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-26T16:20:59Z"}, "message": "libsyntax: Remove the old-style borrowed closure type syntax from the\nlanguage.", "tree": {"sha": "78a1648fe19ea8b24fe0eae4472411d531d834ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78a1648fe19ea8b24fe0eae4472411d531d834ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6801bc8f552ce740deb60212903ba43de197689c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6801bc8f552ce740deb60212903ba43de197689c", "html_url": "https://github.com/rust-lang/rust/commit/6801bc8f552ce740deb60212903ba43de197689c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6801bc8f552ce740deb60212903ba43de197689c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e610573ba285619c9a59d8c1468624b6428492c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e610573ba285619c9a59d8c1468624b6428492c", "html_url": "https://github.com/rust-lang/rust/commit/9e610573ba285619c9a59d8c1468624b6428492c"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "9c8fdafe9ad106acb26fa1fc05c70dd1871c6a68", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -301,8 +301,8 @@ pub fn is_test(config: &config, testfile: &Path) -> bool {\n     return valid;\n }\n \n-pub fn make_test(config: &config, testfile: &Path,\n-                 f: &fn()->test::TestFn) -> test::TestDescAndFn {\n+pub fn make_test(config: &config, testfile: &Path, f: || -> test::TestFn)\n+                 -> test::TestDescAndFn {\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testfile),"}, {"sha": "f722f873d5e675eb2b6c3ad5dab2fa45ebc6db80", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -102,7 +102,7 @@ pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n     !val\n }\n \n-fn iter_header(testfile: &Path, it: &fn(&str) -> bool) -> bool {\n+fn iter_header(testfile: &Path, it: |&str| -> bool) -> bool {\n     use std::io::buffered::BufferedReader;\n     use std::io::File;\n "}, {"sha": "7104a506fccc5df3c76b5da272c0d9a029f33427", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -730,9 +730,12 @@ fn compose_and_run(config: &config, testfile: &Path,\n                           prog, args, procenv, input);\n }\n \n-fn make_compile_args(config: &config, props: &TestProps, extras: ~[~str],\n-                     xform: &fn(&config, (&Path)) -> Path,\n-                     testfile: &Path) -> ProcArgs {\n+fn make_compile_args(config: &config,\n+                     props: &TestProps,\n+                     extras: ~[~str],\n+                     xform: |&config, &Path| -> Path,\n+                     testfile: &Path)\n+                     -> ProcArgs {\n     let xform_file = xform(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let mut args = ~[testfile.as_str().unwrap().to_owned(),"}, {"sha": "e90d320e72321297fb04edfbc39a42ed130c3242", "filename": "src/librustuv/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faddrinfo.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -120,7 +120,7 @@ impl Drop for Addrinfo {\n     }\n }\n \n-fn each_ai_flag(_f: &fn(c_int, ai::Flag)) {\n+fn each_ai_flag(_f: |c_int, ai::Flag|) {\n     /* XXX: do we really want to support these?\n     unsafe {\n         f(uvll::rust_AI_ADDRCONFIG(), ai::AddrConfig);"}, {"sha": "a94ae695eb7438cdd731e4c54e119e89b479fea7", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -294,7 +294,7 @@ impl Drop for FsRequest {\n     }\n }\n \n-fn execute(f: &fn(*uvll::uv_fs_t, uvll::uv_fs_cb) -> c_int)\n+fn execute(f: |*uvll::uv_fs_t, uvll::uv_fs_cb| -> c_int)\n     -> Result<FsRequest, UvError>\n {\n     let mut req = FsRequest {\n@@ -326,9 +326,8 @@ fn execute(f: &fn(*uvll::uv_fs_t, uvll::uv_fs_cb) -> c_int)\n     }\n }\n \n-fn execute_nop(f: &fn(*uvll::uv_fs_t, uvll::uv_fs_cb) -> c_int)\n-    -> Result<(), UvError>\n-{\n+fn execute_nop(f: |*uvll::uv_fs_t, uvll::uv_fs_cb| -> c_int)\n+    -> Result<(), UvError> {\n     execute(f).map(|_| {})\n }\n "}, {"sha": "4690a347f1143810a4a46b064b2551800969f71b", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -196,7 +196,7 @@ impl Drop for ForbidUnwind {\n     }\n }\n \n-fn wait_until_woken_after(slot: *mut Option<BlockedTask>, f: &fn()) {\n+fn wait_until_woken_after(slot: *mut Option<BlockedTask>, f: ||) {\n     let _f = ForbidUnwind::new(\"wait_until_woken_after\");\n     unsafe {\n         assert!((*slot).is_none());"}, {"sha": "0e90e01c46affa4221b590c8b7df7d5754ae505e", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -34,7 +34,7 @@ use uvll::sockaddr;\n /// Generic functions related to dealing with sockaddr things\n ////////////////////////////////////////////////////////////////////////////////\n \n-fn socket_addr_as_sockaddr<T>(addr: SocketAddr, f: &fn(*sockaddr) -> T) -> T {\n+fn socket_addr_as_sockaddr<T>(addr: SocketAddr, f: |*sockaddr| -> T) -> T {\n     let malloc = match addr.ip {\n         Ipv4Addr(*) => uvll::rust_malloc_ip4_addr,\n         Ipv6Addr(*) => uvll::rust_malloc_ip6_addr,"}, {"sha": "1ab84210face725d626e4195b3abaf1cdbe65f21", "filename": "src/librustuv/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fprocess.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -148,7 +148,7 @@ unsafe fn set_stdio(dst: *uvll::uv_stdio_container_t,\n }\n \n /// Converts the program and arguments to the argv array expected by libuv\n-fn with_argv<T>(prog: &str, args: &[~str], f: &fn(**libc::c_char) -> T) -> T {\n+fn with_argv<T>(prog: &str, args: &[~str], f: |**libc::c_char| -> T) -> T {\n     // First, allocation space to put all the C-strings (we need to have\n     // ownership of them somewhere\n     let mut c_strs = vec::with_capacity(args.len() + 1);\n@@ -167,7 +167,7 @@ fn with_argv<T>(prog: &str, args: &[~str], f: &fn(**libc::c_char) -> T) -> T {\n }\n \n /// Converts the environment to the env array expected by libuv\n-fn with_env<T>(env: Option<&[(~str, ~str)]>, f: &fn(**libc::c_char) -> T) -> T {\n+fn with_env<T>(env: Option<&[(~str, ~str)]>, f: |**libc::c_char| -> T) -> T {\n     let env = match env {\n         Some(s) => s,\n         None => { return f(ptr::null()); }"}, {"sha": "fbf81a6f3a0946f45fbc99f4c7df4ddcaf61f980", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -161,7 +161,7 @@ impl EventLoop for UvEventLoop {\n         ~AsyncWatcher::new(self.uvio.uv_loop(), f) as ~RemoteCallback\n     }\n \n-    fn io<'a>(&'a mut self, f: &fn(&'a mut IoFactory)) {\n+    fn io<'a>(&'a mut self, f: |&'a mut IoFactory|) {\n         f(&mut self.uvio as &mut IoFactory)\n     }\n }"}, {"sha": "8e291ca6705f3619a888bad331af527fe1287cb2", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -43,6 +43,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteStructWildcard,\n     ObsoleteVecDotDotWildcard,\n     ObsoleteBoxedClosure,\n+    ObsoleteClosureType,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -134,6 +135,11 @@ impl ParserObsoleteMethods for Parser {\n                 \"managed closures have been removed and owned closures are \\\n                  now written `proc()`\"\n             ),\n+            ObsoleteClosureType => (\n+                \"closure type\",\n+                \"closures are now written `|A| -> B` rather than `&fn(A) -> \\\n+                 B`.\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "5db26dd99dda68adc29f9d39ef23e7639872481d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -1286,7 +1286,7 @@ impl Parser {\n                 return self.parse_ty_closure(Some(sigil), Some(lifetime));\n             }\n \n-            token::IDENT(*) if sigil == ast::BorrowedSigil => {\n+            token::IDENT(*) => {\n                 if self.token_is_old_style_closure_keyword() {\n                     self.obsolete(*self.last_span, ObsoleteBoxedClosure);\n                     return self.parse_ty_closure(Some(sigil), None);\n@@ -1311,6 +1311,7 @@ impl Parser {\n         let opt_lifetime = self.parse_opt_lifetime();\n \n         if self.token_is_old_style_closure_keyword() {\n+            self.obsolete(*self.last_span, ObsoleteClosureType);\n             return self.parse_ty_closure(Some(BorrowedSigil), opt_lifetime);\n         }\n "}, {"sha": "e5898b33e7785305cbe929256dd8a0f3884d14ea", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct X {\n-    field: &'static fn:Send(),\n+    field: 'static ||:Send,\n }\n \n-fn foo(blk: &'static fn:()) -> X {\n+fn foo(blk: 'static ||:) -> X {\n     return X { field: blk }; //~ ERROR expected bounds `Send` but found no bounds\n }\n "}, {"sha": "9cc69228c56f5e83a303f6e5b5c1c08af60260d6", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -16,7 +16,7 @@ extern mod extra;\n use extra::arc;\n use std::util;\n \n-fn foo(blk: &once fn()) {\n+fn foo(blk: once ||) {\n     blk();\n     blk(); //~ ERROR use of moved value\n }"}, {"sha": "3a0afd70e3e7186eaaea56d515daf43286a34bbc", "filename": "src/test/compile-fail/once-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -10,8 +10,8 @@\n \n #[feature(once_fns)];\n fn main() {\n-    let f: &once fn() = ||();\n+    let f: once || = ||();\n     let g: || = f;  //~ ERROR mismatched types\n     let h: || = ||();\n-    let i: &once fn() = h;  // ok\n+    let i: once || = h;  // ok\n }"}, {"sha": "645948f1426253053afa2cb964c7dc9db19941bb", "filename": "src/test/run-pass/once-move-out-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6801bc8f552ce740deb60212903ba43de197689c/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs?ref=6801bc8f552ce740deb60212903ba43de197689c", "patch": "@@ -17,7 +17,7 @@ extern mod extra;\n use extra::arc;\n use std::util;\n \n-fn foo(blk: &once fn()) {\n+fn foo(blk: once ||) {\n     blk();\n }\n "}]}