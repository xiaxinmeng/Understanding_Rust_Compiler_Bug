{"sha": "ecd6229f72538216f27d27ef4710624e974b9e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDYyMjlmNzI1MzgyMTZmMjdkMjdlZjQ3MTA2MjRlOTc0YjllNzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T21:31:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T21:31:24Z"}, "message": "Rollup merge of #65135 - GuillaumeGomez:add-error-code-check, r=Mark-Simulacrum\n\nAdd check for missing tests for error codes\n\nFixes #64811.\n\nr? @Mark-Simulacrum", "tree": {"sha": "d05bafd2e4cb0da4e801ffbe84bc4ad1ca9c662a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05bafd2e4cb0da4e801ffbe84bc4ad1ca9c662a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd6229f72538216f27d27ef4710624e974b9e79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnQAsCRBK7hj4Ov3rIwAAdHIIABWC/AXkx0POTcWYGXuDM3mt\nC7FSH+9NQbmObF+uWlS7A9M2cZ60iWA2ZXDO5ByhpI2zraNMeI3Mw5A3v+DwEE6b\nyNTPZ7TGZwyoIR8+Zgjls0IqpMl+SUAvALOzsIJinzTDFYSC4Dwmp1yz6u8M7VlJ\nxX/6rhoBqWQNG6K9bHIUEbpkW330RIPsqln1+Cdt1CJ5h3TheVbHNUAdYN+V7zJd\nvXQZ+9fVSL8NDWgwSWTuS/wTkD+bYCJw9BJNVlGXFsufp3PRwOIuACUYAgAMI705\nUY/oMVpJX7X9Y1xM0V6TNmYpO5uV0m/FIg17Yo+aBrevlvH+4KaWtiyaxZ7WxB4=\n=kNqN\n-----END PGP SIGNATURE-----\n", "payload": "tree d05bafd2e4cb0da4e801ffbe84bc4ad1ca9c662a\nparent 9b989ea298dff9ba1091a54a25fcce51c529471d\nparent 7a8415894febab8eb0e796b26a87458aa9b54345\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570570284 +0200\ncommitter GitHub <noreply@github.com> 1570570284 +0200\n\nRollup merge of #65135 - GuillaumeGomez:add-error-code-check, r=Mark-Simulacrum\n\nAdd check for missing tests for error codes\n\nFixes #64811.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd6229f72538216f27d27ef4710624e974b9e79", "html_url": "https://github.com/rust-lang/rust/commit/ecd6229f72538216f27d27ef4710624e974b9e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd6229f72538216f27d27ef4710624e974b9e79/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b989ea298dff9ba1091a54a25fcce51c529471d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b989ea298dff9ba1091a54a25fcce51c529471d", "html_url": "https://github.com/rust-lang/rust/commit/9b989ea298dff9ba1091a54a25fcce51c529471d"}, {"sha": "7a8415894febab8eb0e796b26a87458aa9b54345", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8415894febab8eb0e796b26a87458aa9b54345", "html_url": "https://github.com/rust-lang/rust/commit/7a8415894febab8eb0e796b26a87458aa9b54345"}], "stats": {"total": 241, "additions": 205, "deletions": 36}, "files": [{"sha": "0c9760b3c0f4031dfd449fcdeeed4126ab6f0dab", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -466,7 +466,6 @@ fn main() {\n ```\n \"##,\n \n-\n E0139: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n \n@@ -1562,7 +1561,9 @@ fn transmute_lifetime<'a, T>(t: &'a (T,)) -> &'a T {\n \"##,\n \n E0496: r##\"\n-A lifetime name is shadowing another lifetime name. Erroneous code example:\n+A lifetime name is shadowing another lifetime name.\n+\n+Erroneous code example:\n \n ```compile_fail,E0496\n struct Foo<'a> {\n@@ -1594,8 +1595,11 @@ fn main() {\n \"##,\n \n E0497: r##\"\n-A stability attribute was used outside of the standard library. Erroneous code\n-example:\n+#### Note: this error code is no longer emitted by the compiler.\n+\n+A stability attribute was used outside of the standard library.\n+\n+Erroneous code example:\n \n ```compile_fail\n #[stable] // error: stability attributes may not be used outside of the\n@@ -2125,7 +2129,7 @@ rejected in your own crates.\n //  E0272, // on_unimplemented #0\n //  E0273, // on_unimplemented #1\n //  E0274, // on_unimplemented #2\n-    E0278, // requirement is not satisfied\n+//  E0278, // requirement is not satisfied\n     E0279, // requirement is not satisfied\n     E0280, // requirement is not satisfied\n //  E0285, // overflow evaluation builtin bounds\n@@ -2165,10 +2169,10 @@ rejected in your own crates.\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n     E0697, // closures cannot be static\n-    E0707, // multiple elided lifetimes used in arguments of `async fn`\n+//  E0707, // multiple elided lifetimes used in arguments of `async fn`\n     E0708, // `async` non-`move` closures with parameters are not currently\n            // supported\n-    E0709, // multiple different lifetimes used in arguments of `async fn`\n+//  E0709, // multiple different lifetimes used in arguments of `async fn`\n     E0710, // an unknown tool name found in scoped lint\n     E0711, // a feature has been declared with conflicting stability attributes\n //  E0702, // replaced with a generic attribute input check"}, {"sha": "2edc8fadf45684dae76eb1bce80429c4b97e548a", "filename": "src/librustc_lint/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_lint%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_lint%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ferror_codes.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -1,4 +1,4 @@\n syntax::register_diagnostics! {\n ;\n-    E0721, // `await` keyword\n+//  E0721, // `await` keyword\n }"}, {"sha": "77853ff1fe80aa2681de8a1df8056101400e1f20", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -953,7 +953,7 @@ https://doc.rust-lang.org/std/cell/\n \"##,\n \n E0388: r##\"\n-E0388 was removed and is no longer issued.\n+#### Note: this error code is no longer emitted by the compiler.\n \"##,\n \n E0389: r##\""}, {"sha": "e460e9813b3ee01c547eb5d093f12acdc23ebe86", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -1,12 +1,15 @@\n syntax::register_diagnostics! {\n-/*\n E0014: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Constants can only be initialized by a constant value or, in a future\n version of Rust, a call to a const function. This error indicates the use\n of a path (like a::b, or x) denoting something other than one of these\n-allowed items. Erroneous code xample:\n+allowed items.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```\n const FOO: i32 = { let x = 0; x }; // 'x' isn't a constant nor a function!\n ```\n \n@@ -18,10 +21,10 @@ const FOO: i32 = { const X : i32 = 0; X };\n const FOO2: i32 = { 0 }; // but brackets are useless here\n ```\n \"##,\n-*/\n \n E0130: r##\"\n You declared a pattern as an argument in a foreign function declaration.\n+\n Erroneous code example:\n \n ```compile_fail\n@@ -57,6 +60,20 @@ extern {\n E0136: r##\"\n A binary can only have one entry point, and by default that entry point is the\n function `main()`. If there are multiple such functions, please rename one.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0136\n+fn main() {\n+    // ...\n+}\n+\n+// ...\n+\n+fn main() { // error!\n+    // ...\n+}\n+```\n \"##,\n \n E0137: r##\""}, {"sha": "03afb547d3a226a54faa166b91bf8673bb20b2ad", "filename": "src/librustc_privacy/error_codes.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_privacy%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_privacy%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Ferror_codes.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -1,8 +1,9 @@\n syntax::register_diagnostics! {\n \n E0445: r##\"\n-A private trait was used on a public type parameter bound. Erroneous code\n-examples:\n+A private trait was used on a public type parameter bound.\n+\n+Erroneous code examples:\n \n ```compile_fail,E0445\n #![deny(private_in_public)]\n@@ -32,7 +33,9 @@ pub fn foo<T: Foo> (t: T) {} // ok!\n \"##,\n \n E0446: r##\"\n-A private type was used in a public type signature. Erroneous code example:\n+A private type was used in a public type signature.\n+\n+Erroneous code example:\n \n ```compile_fail,E0446\n #![deny(private_in_public)]\n@@ -65,7 +68,9 @@ mod Foo {\n E0447: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n \n-The `pub` keyword was used inside a function. Erroneous code example:\n+The `pub` keyword was used inside a function.\n+\n+Erroneous code example:\n \n ```\n fn foo() {\n@@ -79,7 +84,11 @@ is invalid.\n \"##,\n \n E0448: r##\"\n-The `pub` keyword was used inside a public enum. Erroneous code example:\n+#### Note: this error code is no longer emitted by the compiler.\n+\n+The `pub` keyword was used inside a public enum.\n+\n+Erroneous code example:\n \n ```compile_fail\n pub enum Foo {\n@@ -106,7 +115,9 @@ pub enum Foo {\n \"##,\n \n E0451: r##\"\n-A struct constructor with private fields was invoked. Erroneous code example:\n+A struct constructor with private fields was invoked.\n+\n+Erroneous code example:\n \n ```compile_fail,E0451\n mod Bar {"}, {"sha": "8bd899ae4d5cef0ca85b69bb8b40e8e690a47028", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -1873,13 +1873,14 @@ This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n differs from the behavior for `&T`, which is always `Copy`).\n \"##,\n \n-/*\n E0205: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An attempt to implement the `Copy` trait for an enum failed because one of the\n variants does not implement `Copy`. To fix this, you must implement `Copy` for\n the mentioned variant. Note that this may not be possible, as in the example of\n \n-```compile_fail,E0205\n+```compile_fail,E0204\n enum Foo {\n     Bar(Vec<u32>),\n     Baz,\n@@ -1892,7 +1893,7 @@ This fails because `Vec<T>` does not implement `Copy` for any `T`.\n \n Here's another example that will fail:\n \n-```compile_fail,E0205\n+```compile_fail,E0204\n #[derive(Copy)]\n enum Foo<'a> {\n     Bar(&'a mut bool),\n@@ -1903,7 +1904,6 @@ enum Foo<'a> {\n This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n differs from the behavior for `&T`, which is always `Copy`).\n \"##,\n-*/\n \n E0206: r##\"\n You can only implement `Copy` for a struct or enum. Both of the following\n@@ -2126,8 +2126,9 @@ For information on the design of the orphan rules, see [RFC 1023].\n [RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n \"##,\n \n-/*\n E0211: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n You used a function or type which doesn't fit the requirements for where it was\n used. Erroneous code examples:\n \n@@ -2174,7 +2175,7 @@ extern \"rust-intrinsic\" {\n }\n ```\n \n-The second case example is a bit particular : the main function must always\n+The second case example is a bit particular: the main function must always\n have this definition:\n \n ```compile_fail\n@@ -2206,7 +2207,6 @@ impl Foo {\n }\n ```\n \"##,\n-     */\n \n E0220: r##\"\n You used an associated type which isn't defined in the trait.\n@@ -2727,14 +2727,9 @@ impl<T, U> CoerceUnsized<MyType<U>> for MyType<T>\n [`CoerceUnsized`]: https://doc.rust-lang.org/std/ops/trait.CoerceUnsized.html\n \"##,\n \n-/*\n-// Associated consts can now be accessed through generic type parameters, and\n-// this error is no longer emitted.\n-//\n-// FIXME: consider whether to leave it in the error index, or remove it entirely\n-//        as associated consts is not stabilized yet.\n-\n E0329: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An attempt was made to access an associated constant through either a generic\n type parameter or `Self`. This is not supported yet. An example causing this\n error is shown below:\n@@ -2765,12 +2760,15 @@ trait Foo {\n \n struct MyStruct;\n \n+impl Foo for MyStruct {\n+    const BAR: f64 = 0f64;\n+}\n+\n fn get_bar_good() -> f64 {\n     <MyStruct as Foo>::BAR\n }\n ```\n \"##,\n-*/\n \n E0366: r##\"\n An attempt was made to implement `Drop` on a concrete specialization of a\n@@ -4973,7 +4971,7 @@ and the pin is required to keep it in the same place in memory.\n            // between structures with the same definition\n //  E0558, // replaced with a generic attribute input check\n //  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n-    E0564, // only named lifetimes are allowed in `impl Trait`,\n+//  E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n     E0587, // type has conflicting packed and align representation hints\n     E0588, // packed type cannot transitively contain a `[repr(align)]` type\n@@ -4986,7 +4984,7 @@ and the pin is required to keep it in the same place in memory.\n     E0634, // type has conflicting packed representaton hints\n     E0640, // infer outlives requirements\n     E0641, // cannot cast to/from a pointer with an unknown kind\n-    E0645, // trait aliases not finished\n+//  E0645, // trait aliases not finished\n     E0719, // duplicate values for associated type binding\n     E0722, // Malformed `#[optimize]` attribute\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions"}, {"sha": "159baff184d1be900e530cef616243c79c6d6063", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -0,0 +1,137 @@\n+//! Checks that all error codes have at least one test to prevent having error\n+//! codes that are silently not thrown by the compiler anymore.\n+\n+use std::collections::HashMap;\n+use std::ffi::OsStr;\n+use std::path::Path;\n+\n+// A few of those error codes can't be tested but all the others can and *should* be tested!\n+const WHITELIST: &[&str] = &[\n+    \"E0183\",\n+    \"E0227\",\n+    \"E0279\",\n+    \"E0280\",\n+    \"E0311\",\n+    \"E0313\",\n+    \"E0314\",\n+    \"E0315\",\n+    \"E0377\",\n+    \"E0456\",\n+    \"E0461\",\n+    \"E0462\",\n+    \"E0464\",\n+    \"E0465\",\n+    \"E0472\",\n+    \"E0473\",\n+    \"E0474\",\n+    \"E0475\",\n+    \"E0476\",\n+    \"E0479\",\n+    \"E0480\",\n+    \"E0481\",\n+    \"E0482\",\n+    \"E0483\",\n+    \"E0484\",\n+    \"E0485\",\n+    \"E0486\",\n+    \"E0487\",\n+    \"E0488\",\n+    \"E0489\",\n+    \"E0514\",\n+    \"E0519\",\n+    \"E0523\",\n+    \"E0526\",\n+    \"E0554\",\n+    \"E0570\",\n+    \"E0629\",\n+    \"E0630\",\n+    \"E0640\",\n+    \"E0717\",\n+    \"E0727\",\n+    \"E0729\",\n+];\n+\n+fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>) {\n+    let mut reached_no_explanation = false;\n+    let mut last_error_code = None;\n+\n+    for line in f.lines() {\n+        let s = line.trim();\n+        if s.starts_with('E') && s.ends_with(\": r##\\\"\") {\n+            if let Some(err_code) = s.splitn(2, ':').next() {\n+                let err_code = err_code.to_owned();\n+                last_error_code = Some(err_code.clone());\n+                if !error_codes.contains_key(&err_code) {\n+                    error_codes.insert(err_code, false);\n+                }\n+            }\n+        } else if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n+            if let Some(err_code) = s.splitn(2, 'E').skip(1).next() {\n+                if let Some(err_code) = err_code.splitn(2, ',').next() {\n+                    let nb = error_codes.entry(format!(\"E{}\", err_code)).or_insert(false);\n+                    *nb = true;\n+                }\n+            }\n+        } else if s == \";\" {\n+            reached_no_explanation = true;\n+        } else if reached_no_explanation && s.starts_with('E') {\n+            if let Some(err_code) = s.splitn(2, ',').next() {\n+                let err_code = err_code.to_owned();\n+                if !error_codes.contains_key(&err_code) { // this check should *never* fail!\n+                    error_codes.insert(err_code, false);\n+                }\n+            }\n+        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n+            if let Some(last) = last_error_code {\n+                error_codes.get_mut(&last).map(|x| *x = true);\n+            }\n+            last_error_code = None;\n+        }\n+    }\n+}\n+\n+fn extract_error_codes_from_tests(f: &str, error_codes: &mut HashMap<String, bool>) {\n+    for line in f.lines() {\n+        let s = line.trim();\n+        if s.starts_with(\"error[E\") || s.starts_with(\"warning[E\") {\n+            if let Some(err_code) = s.splitn(2, ']').next() {\n+                if let Some(err_code) = err_code.splitn(2, '[').skip(1).next() {\n+                    let nb = error_codes.entry(err_code.to_owned()).or_insert(false);\n+                    *nb = true;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    println!(\"Checking which error codes lack tests...\");\n+    let mut error_codes: HashMap<String, bool> = HashMap::new();\n+    super::walk(path,\n+                &mut |path| super::filter_dirs(path),\n+                &mut |entry, contents| {\n+        let file_name = entry.file_name();\n+        if file_name == \"error_codes.rs\" {\n+            extract_error_codes(contents, &mut error_codes);\n+        } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n+            extract_error_codes_from_tests(contents, &mut error_codes);\n+        }\n+    });\n+    println!(\"Found {} error codes\", error_codes.len());\n+\n+    let mut errors = Vec::new();\n+    for (err_code, nb) in &error_codes {\n+        if !*nb && !WHITELIST.contains(&err_code.as_str()) {\n+            errors.push(format!(\"Error code {} needs to have at least one UI test!\", err_code));\n+        }\n+    }\n+    errors.sort();\n+    for err in &errors {\n+        eprintln!(\"{}\", err);\n+    }\n+    println!(\"Found {} error codes with no tests\", errors.len());\n+    if !errors.is_empty() {\n+        *bad = true;\n+    }\n+    println!(\"Done!\");\n+}"}, {"sha": "eb93eb297479d03e37bc7fb15babcad4fb5c294b", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -41,6 +41,7 @@ pub mod extdeps;\n pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;\n+pub mod error_codes_check;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = ["}, {"sha": "e08c23c01fe2d337ef332352433716d0ceab0d8d", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd6229f72538216f27d27ef4710624e974b9e79/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=ecd6229f72538216f27d27ef4710624e974b9e79", "patch": "@@ -35,6 +35,7 @@ fn main() {\n     deps::check_whitelist(&path, &cargo, &mut bad);\n     extdeps::check(&path, &mut bad);\n     ui_tests::check(&path, &mut bad);\n+    error_codes_check::check(&path, &mut bad);\n \n     if bad {\n         eprintln!(\"some tidy checks failed\");"}]}