{"sha": "5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMmEyYTFjYWExYTEyYTVjNDQ1ZmNjOTllMmRlZTQyZTVhNWYzZDc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-05T21:12:39Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-19T00:21:16Z"}, "message": "Add explanations and suggestions to `irrefutable_let_patterns` lint", "tree": {"sha": "29e1de6b2a08f595a3bbc550e0c0915caed7524e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e1de6b2a08f595a3bbc550e0c0915caed7524e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "html_url": "https://github.com/rust-lang/rust/commit/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0148b971c921a0831fbf3357e5936eec724e3566", "url": "https://api.github.com/repos/rust-lang/rust/commits/0148b971c921a0831fbf3357e5936eec724e3566", "html_url": "https://github.com/rust-lang/rust/commit/0148b971c921a0831fbf3357e5936eec724e3566"}], "stats": {"total": 102, "additions": 83, "deletions": 19}, "files": [{"sha": "686d09dd7fcb4478e53fcc98ec42d404f1f81059", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -1814,14 +1814,12 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `irrefutable_let_patterns` lint detects detects [irrefutable\n-    /// patterns] in [`if let`] and [`while let`] statements.\n-    ///\n-    ///\n+    /// The `irrefutable_let_patterns` lint detects [irrefutable patterns]\n+    /// in [`if let`]s, [`while let`]s, and `if let` guards.\n     ///\n     /// ### Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// if let _ = 123 {\n     ///     println!(\"always runs!\");\n     /// }"}, {"sha": "fdecbb9478808f9323233fff3147754d3aba2dce", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -366,14 +366,31 @@ fn unreachable_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, catchall: Option<\n }\n \n fn irrefutable_let_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, source: hir::MatchSource) {\n-    tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, id, span, |lint| {\n-        let msg = match source {\n-            hir::MatchSource::IfLetDesugar { .. } => \"irrefutable `if let` pattern\",\n-            hir::MatchSource::WhileLetDesugar => \"irrefutable `while let` pattern\",\n-            hir::MatchSource::IfLetGuardDesugar => \"irrefutable `if let` guard\",\n-            _ => bug!(),\n-        };\n-        lint.build(msg).emit()\n+    tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, id, span, |lint| match source {\n+        hir::MatchSource::IfLetDesugar { .. } => {\n+            let mut diag = lint.build(\"irrefutable `if let` pattern\");\n+            diag.note(\"this pattern will always match, so the `if let` is useless\");\n+            diag.help(\"consider replacing the `if let` with a `let`\");\n+            diag.emit()\n+        }\n+        hir::MatchSource::WhileLetDesugar => {\n+            let mut diag = lint.build(\"irrefutable `while let` pattern\");\n+            diag.note(\"this pattern will always match, so the loop will never exit\");\n+            diag.help(\"consider instead using a `loop { ... }` with a `let` inside it\");\n+            diag.emit()\n+        }\n+        hir::MatchSource::IfLetGuardDesugar => {\n+            let mut diag = lint.build(\"irrefutable `if let` guard pattern\");\n+            diag.note(\"this pattern will always match, so the guard is useless\");\n+            diag.help(\"consider removing the guard and adding a `let` inside the match arm\");\n+            diag.emit()\n+        }\n+        _ => {\n+            bug!(\n+                \"expected `if let`, `while let`, or `if let` guard HIR match source, found {:?}\",\n+                source,\n+            )\n+        }\n     });\n }\n \n@@ -387,7 +404,7 @@ fn check_if_let_guard<'p, 'tcx>(\n     report_arm_reachability(&cx, &report, hir::MatchSource::IfLetGuardDesugar);\n \n     if report.non_exhaustiveness_witnesses.is_empty() {\n-        // The match is exhaustive, i.e. the if let pattern is irrefutable.\n+        // The match is exhaustive, i.e. the `if let` pattern is irrefutable.\n         irrefutable_let_pattern(cx.tcx, pat.span, pat_id, hir::MatchSource::IfLetGuardDesugar)\n     }\n }"}, {"sha": "8586dfd91863cb13a605cad3d3946e814559a043", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-single-variant-diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -17,6 +17,8 @@ LL | |         }\n    | |_________^\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n \n error[E0382]: use of moved value: `c`\n   --> $DIR/closure-origin-single-variant-diagnostics.rs:25:13"}, {"sha": "c64c9093ee54a9771cfe7c94efafac2e0aef766d", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -10,6 +10,8 @@ LL | |     });\n    | |_______- in this macro invocation\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern\n@@ -23,6 +25,8 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n    |\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern\n@@ -32,6 +36,9 @@ LL | /     if let a = 1 {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     }\n    | |_____^\n+   |\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n \n warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:30:5\n@@ -44,6 +51,9 @@ LL | |     } else {\n LL | |         println!(\"else in irrefutable `if let`\");\n LL | |     }\n    | |_____^\n+   |\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n \n warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:40:12\n@@ -53,6 +63,9 @@ LL |       } else if let a = 1 {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     }\n    | |_____^\n+   |\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n \n warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:46:12\n@@ -62,6 +75,9 @@ LL |       } else if let a = 1 {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     }\n    | |_____^\n+   |\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n \n warning: 6 warnings emitted\n "}, {"sha": "7549eae7016b56844c89fde92fffafb06de1d8a8", "filename": "src/test/ui/pattern/usefulness/deny-irrefutable-let-patterns.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -1,3 +1,6 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n #![deny(irrefutable_let_patterns)]\n \n fn main() {\n@@ -6,4 +9,9 @@ fn main() {\n     while let _ = 5 { //~ ERROR irrefutable `while let` pattern\n         break;\n     }\n+\n+    match 5 {\n+        _ if let _ = 2 => {} //~ ERROR irrefutable `if let` guard pattern\n+        _ => {}\n+    }\n }"}, {"sha": "d6926ee12eeaa6673bbe8aec2e9fd51e5cb43e2d", "filename": "src/test/ui/pattern/usefulness/deny-irrefutable-let-patterns.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -1,22 +1,36 @@\n error: irrefutable `if let` pattern\n-  --> $DIR/deny-irrefutable-let-patterns.rs:4:5\n+  --> $DIR/deny-irrefutable-let-patterns.rs:7:5\n    |\n LL |     if let _ = 5 {}\n    |     ^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/deny-irrefutable-let-patterns.rs:1:9\n+  --> $DIR/deny-irrefutable-let-patterns.rs:4:9\n    |\n LL | #![deny(irrefutable_let_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this pattern will always match, so the `if let` is useless\n+   = help: consider replacing the `if let` with a `let`\n \n error: irrefutable `while let` pattern\n-  --> $DIR/deny-irrefutable-let-patterns.rs:6:5\n+  --> $DIR/deny-irrefutable-let-patterns.rs:9:5\n    |\n LL | /     while let _ = 5 {\n LL | |         break;\n LL | |     }\n    | |_____^\n+   |\n+   = note: this pattern will always match, so the loop will never exit\n+   = help: consider instead using a `loop { ... }` with a `let` inside it\n+\n+error: irrefutable `if let` guard pattern\n+  --> $DIR/deny-irrefutable-let-patterns.rs:14:18\n+   |\n+LL |         _ if let _ = 2 => {}\n+   |                  ^\n+   |\n+   = note: this pattern will always match, so the guard is useless\n+   = help: consider removing the guard and adding a `let` inside the match arm\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "c7627f1c3c50c1c6c100d381cbb8a47c656a0926", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -1,4 +1,4 @@\n-error: irrefutable `if let` guard\n+error: irrefutable `if let` guard pattern\n   --> $DIR/warns.rs:7:24\n    |\n LL |         Some(x) if let () = x => {}\n@@ -9,6 +9,8 @@ note: the lint level is defined here\n    |\n LL | #[deny(irrefutable_let_patterns)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this pattern will always match, so the guard is useless\n+   = help: consider removing the guard and adding a `let` inside the match arm\n \n error: unreachable pattern\n   --> $DIR/warns.rs:16:25"}, {"sha": "04e77bf9470a29d38d78dc9490ca081fa8932784", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=5d2a2a1caa1a12a5c445fcc99e2dee42e5a5f3d7", "patch": "@@ -10,6 +10,8 @@ LL | |     });\n    | |_______- in this macro invocation\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this pattern will always match, so the loop will never exit\n+   = help: consider instead using a `loop { ... }` with a `let` inside it\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `while let` pattern\n@@ -23,6 +25,8 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n    |\n+   = note: this pattern will always match, so the loop will never exit\n+   = help: consider instead using a `loop { ... }` with a `let` inside it\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `while let` pattern\n@@ -33,6 +37,9 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |         break;\n LL | |     }\n    | |_____^\n+   |\n+   = note: this pattern will always match, so the loop will never exit\n+   = help: consider instead using a `loop { ... }` with a `let` inside it\n \n warning: 3 warnings emitted\n "}]}