{"sha": "36812b9d7bd42c6469d857c434a63c921b70bdca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ODEyYjlkN2JkNDJjNjQ2OWQ4NTdjNDM0YTYzYzkyMWI3MGJkY2E=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-29T18:39:03Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-29T18:39:03Z"}, "message": "Fix review comments", "tree": {"sha": "d990255b6041036f7d3894a6311dc640268b128a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d990255b6041036f7d3894a6311dc640268b128a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36812b9d7bd42c6469d857c434a63c921b70bdca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36812b9d7bd42c6469d857c434a63c921b70bdca", "html_url": "https://github.com/rust-lang/rust/commit/36812b9d7bd42c6469d857c434a63c921b70bdca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36812b9d7bd42c6469d857c434a63c921b70bdca/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0076de12a1e77515c99b08ee74d0af37b250f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0076de12a1e77515c99b08ee74d0af37b250f8", "html_url": "https://github.com/rust-lang/rust/commit/dc0076de12a1e77515c99b08ee74d0af37b250f8"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "d35963e9568bb68742c4592577803ad6d0ec0e8d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/36812b9d7bd42c6469d857c434a63c921b70bdca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36812b9d7bd42c6469d857c434a63c921b70bdca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=36812b9d7bd42c6469d857c434a63c921b70bdca", "patch": "@@ -208,8 +208,8 @@ pub fn main_loop(\n         )\n     };\n \n-    loop_state.roots_to_scan = world_state.vfs.read().n_roots();\n-    loop_state.roots_total = loop_state.roots_to_scan;\n+    loop_state.roots_total = world_state.vfs.read().n_roots();\n+    loop_state.roots_scanned = 0;\n \n     let pool = ThreadPool::default();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n@@ -337,8 +337,8 @@ struct LoopState {\n     pending_libraries: Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>,\n     workspace_loaded: bool,\n \n-    roots_scanned_progress: Option<usize>,\n-    roots_to_scan: usize,\n+    roots_progress_reported: Option<usize>,\n+    roots_scanned: usize,\n     roots_total: usize,\n }\n \n@@ -383,7 +383,7 @@ fn loop_turn(\n             world_state.add_lib(lib);\n             world_state.maybe_collect_garbage();\n             loop_state.in_flight_libraries -= 1;\n-            loop_state.roots_to_scan -= 1;\n+            loop_state.roots_scanned += 1;\n         }\n         Event::CheckWatcher(task) => on_check_task(task, world_state, task_sender)?,\n         Event::Msg(msg) => match msg {\n@@ -415,7 +415,7 @@ fn loop_turn(\n     };\n \n     let mut state_changed = false;\n-    if let Some(changes) = world_state.process_changes(&mut loop_state.roots_to_scan) {\n+    if let Some(changes) = world_state.process_changes(&mut loop_state.roots_scanned) {\n         state_changed = true;\n         loop_state.pending_libraries.extend(changes);\n     }\n@@ -438,7 +438,7 @@ fn loop_turn(\n         && world_state.feature_flags.get(\"notifications.workspace-loaded\");\n \n     if !loop_state.workspace_loaded\n-        && loop_state.roots_to_scan == 0\n+        && loop_state.roots_scanned == loop_state.roots_total\n         && loop_state.pending_libraries.is_empty()\n         && loop_state.in_flight_libraries == 0\n     {\n@@ -719,11 +719,11 @@ fn on_diagnostic_task(task: DiagnosticTask, msg_sender: &Sender<Message>, state:\n \n fn send_startup_progress(sender: &Sender<Message>, loop_state: &mut LoopState) {\n     let total: usize = loop_state.roots_total;\n-    let prev_progress = loop_state.roots_scanned_progress;\n-    let progress = total - loop_state.roots_to_scan;\n-    loop_state.roots_scanned_progress = Some(progress);\n+    let prev = loop_state.roots_progress_reported;\n+    let progress = loop_state.roots_scanned;\n+    loop_state.roots_progress_reported = Some(progress);\n \n-    match (prev_progress, loop_state.workspace_loaded) {\n+    match (prev, loop_state.workspace_loaded) {\n         (None, false) => {\n             let work_done_progress_create = request_new::<req::WorkDoneProgressCreate>(\n                 loop_state.next_request_id(),"}, {"sha": "5680397ed828f68af88c6856575646eaec458e65", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36812b9d7bd42c6469d857c434a63c921b70bdca/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36812b9d7bd42c6469d857c434a63c921b70bdca/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=36812b9d7bd42c6469d857c434a63c921b70bdca", "patch": "@@ -203,7 +203,7 @@ impl WorldState {\n     /// FIXME: better API here\n     pub fn process_changes(\n         &mut self,\n-        roots_to_scan: &mut usize,\n+        roots_scanned: &mut usize,\n     ) -> Option<Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>> {\n         let changes = self.vfs.write().commit_changes();\n         if changes.is_empty() {\n@@ -217,7 +217,7 @@ impl WorldState {\n                     let root_path = self.vfs.read().root2path(root);\n                     let is_local = self.roots.iter().any(|r| root_path.starts_with(r));\n                     if is_local {\n-                        *roots_to_scan -= 1;\n+                        *roots_scanned += 1;\n                         for (file, path, text) in files {\n                             change.add_file(SourceRootId(root.0), FileId(file.0), path, text);\n                         }"}]}