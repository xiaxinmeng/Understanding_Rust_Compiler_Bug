{"sha": "6aefaf22c758b76703ed850bcf817dda127a5d67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZWZhZjIyYzc1OGI3NjcwM2VkODUwYmNmODE3ZGRhMTI3YTVkNjc=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-26T23:48:00Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-26T23:48:00Z"}, "message": "typo-fixing and name-changes", "tree": {"sha": "2f7a4f52f90d48e2463480a4f68e04ee80902b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7a4f52f90d48e2463480a4f68e04ee80902b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aefaf22c758b76703ed850bcf817dda127a5d67", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aefaf22c758b76703ed850bcf817dda127a5d67", "html_url": "https://github.com/rust-lang/rust/commit/6aefaf22c758b76703ed850bcf817dda127a5d67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aefaf22c758b76703ed850bcf817dda127a5d67/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b6057538b9bb81bb71db632344ed0312e57f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b6057538b9bb81bb71db632344ed0312e57f5f", "html_url": "https://github.com/rust-lang/rust/commit/08b6057538b9bb81bb71db632344ed0312e57f5f"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "0eaf6849b7eb7dc868d2e87f66c858a2cdaca2b2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6aefaf22c758b76703ed850bcf817dda127a5d67/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aefaf22c758b76703ed850bcf817dda127a5d67/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6aefaf22c758b76703ed850bcf817dda127a5d67", "patch": "@@ -414,8 +414,8 @@ pub fn get_exprs_from_tts(cx: ext_ctxt, tts: ~[ast::token_tree])\n // a transformer env is either a base map or a map on top\n // of another chain.\n pub enum MapChain<K,V> {\n-    TEC_Base(~LinearMap<K,@V>),\n-    TEC_Cons(~LinearMap<K,@V>,@mut MapChain<K,V>)\n+    BaseMapChain(~LinearMap<K,@V>),\n+    ConsMapChain(~LinearMap<K,@V>,@mut MapChain<K,V>)\n }\n \n \n@@ -424,12 +424,12 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n \n     // Constructor. I don't think we need a zero-arg one.\n     static fn new(+init: ~LinearMap<K,@V>) -> @mut MapChain<K,V> {\n-        @mut TEC_Base(init)\n+        @mut BaseMapChain(init)\n     }\n \n     // add a new frame to the environment (functionally)\n     fn push_frame (@mut self) -> @mut MapChain<K,V> {\n-        @mut TEC_Cons(~LinearMap::new() ,self)\n+        @mut ConsMapChain(~LinearMap::new() ,self)\n     }\n \n // no need for pop, it'll just be functional.\n@@ -440,8 +440,8 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n     // lack of flow sensitivity.\n     fn get_map(&self) -> &self/LinearMap<K,@V> {\n         match *self {\n-            TEC_Base (~ref map) => map,\n-            TEC_Cons (~ref map,_) => map\n+            BaseMapChain (~ref map) => map,\n+            ConsMapChain (~ref map,_) => map\n         }\n     }\n \n@@ -450,8 +450,8 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n \n     pure fn contains_key (&self, key: &K) -> bool {\n         match *self {\n-            TEC_Base (ref map) => map.contains_key(key),\n-            TEC_Cons (ref map,ref rest) =>\n+            BaseMapChain (ref map) => map.contains_key(key),\n+            ConsMapChain (ref map,ref rest) =>\n             (map.contains_key(key)\n              || rest.contains_key(key))\n         }\n@@ -473,8 +473,8 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n         match self.get_map().find (key) {\n             Some(ref v) => Some(**v),\n             None => match *self {\n-                TEC_Base (_) => None,\n-                TEC_Cons (_,ref rest) => rest.find(key)\n+                BaseMapChain (_) => None,\n+                ConsMapChain (_,ref rest) => rest.find(key)\n             }\n         }\n     }\n@@ -483,8 +483,8 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n     fn insert (&mut self, +key: K, +ext: @V) -> bool {\n         // can't abstract over get_map because of flow sensitivity...\n         match *self {\n-            TEC_Base (~ref mut map) => map.insert(key, ext),\n-            TEC_Cons (~ref mut map,_) => map.insert(key,ext)\n+            BaseMapChain (~ref mut map) => map.insert(key, ext),\n+            ConsMapChain (~ref mut map,_) => map.insert(key,ext)\n         }\n     }\n "}, {"sha": "9a3e8da2b814570e3bc8bc714eba8c62db37ed04", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6aefaf22c758b76703ed850bcf817dda127a5d67/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aefaf22c758b76703ed850bcf817dda127a5d67/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6aefaf22c758b76703ed850bcf817dda127a5d67", "patch": "@@ -195,7 +195,7 @@ fn contains_macro_escape (attrs: &[ast::attribute]) -> bool{\n macro_rules! without_macro_scoping(\n     ($extsexpr:expr,$exp:expr) =>\n     ({\n-        // only evaluaate this once:\n+        // only evaluate this once:\n         let exts = $extsexpr;\n         // capture the existing binding:\n         let existingBlockBinding =\n@@ -421,8 +421,6 @@ pub fn core_macros() -> ~str {\n }\";\n }\n \n-// could cfg just be a borrowed pointer here?\n-\n pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n                     cfg: ast::crate_cfg, c: @crate) -> @crate {\n     // adding *another* layer of indirection here so that the block"}]}