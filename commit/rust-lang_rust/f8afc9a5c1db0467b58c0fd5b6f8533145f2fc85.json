{"sha": "f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YWZjOWE1YzFkYjA0NjdiNThjMGZkNWI2Zjg1MzMxNDVmMmZjODU=", "commit": {"author": {"name": "Birunthan Mohanathas", "email": "birunthan@mohanathas.com", "date": "2014-02-03T18:02:47Z"}, "committer": {"name": "Birunthan Mohanathas", "email": "birunthan@mohanathas.com", "date": "2014-02-04T04:44:02Z"}, "message": "extra: Move uuid to libuuid\ncc #8784", "tree": {"sha": "d6ad73a6e836031a09fac1681ce99fd4374b654c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ad73a6e836031a09fac1681ce99fd4374b654c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "html_url": "https://github.com/rust-lang/rust/commit/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/comments", "author": {"login": "poiru", "id": 1319028, "node_id": "MDQ6VXNlcjEzMTkwMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1319028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poiru", "html_url": "https://github.com/poiru", "followers_url": "https://api.github.com/users/poiru/followers", "following_url": "https://api.github.com/users/poiru/following{/other_user}", "gists_url": "https://api.github.com/users/poiru/gists{/gist_id}", "starred_url": "https://api.github.com/users/poiru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poiru/subscriptions", "organizations_url": "https://api.github.com/users/poiru/orgs", "repos_url": "https://api.github.com/users/poiru/repos", "events_url": "https://api.github.com/users/poiru/events{/privacy}", "received_events_url": "https://api.github.com/users/poiru/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poiru", "id": 1319028, "node_id": "MDQ6VXNlcjEzMTkwMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1319028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poiru", "html_url": "https://github.com/poiru", "followers_url": "https://api.github.com/users/poiru/followers", "following_url": "https://api.github.com/users/poiru/following{/other_user}", "gists_url": "https://api.github.com/users/poiru/gists{/gist_id}", "starred_url": "https://api.github.com/users/poiru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poiru/subscriptions", "organizations_url": "https://api.github.com/users/poiru/orgs", "repos_url": "https://api.github.com/users/poiru/repos", "events_url": "https://api.github.com/users/poiru/events{/privacy}", "received_events_url": "https://api.github.com/users/poiru/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1395ea58866ede7f52864ab36b8052f88d20bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1395ea58866ede7f52864ab36b8052f88d20bc4", "html_url": "https://github.com/rust-lang/rust/commit/c1395ea58866ede7f52864ab36b8052f88d20bc4"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "e02e4fb8706e822d4b7ee0981223a7f7c29bccc6", "filename": "mk/crates.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "patch": "@@ -49,7 +49,7 @@\n # automatically generated for all stage/host/target combinations.\n ################################################################################\n \n-TARGET_CRATES := std extra green rustuv native flate arena glob term semver\n+TARGET_CRATES := std extra green rustuv native flate arena glob term semver uuid\n HOST_CRATES := syntax rustc rustdoc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n@@ -67,6 +67,7 @@ DEPS_arena := std extra\n DEPS_glob := std\n DEPS_term := std\n DEPS_semver := std\n+DEPS_uuid := std extra\n \n TOOL_DEPS_compiletest := extra green rustuv\n TOOL_DEPS_rustdoc := rustdoc green rustuv"}, {"sha": "9915d67bfcad330ded7eec4a6fbc38a7f7106b15", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "patch": "@@ -42,6 +42,7 @@ li {list-style-type: none; }\n * [The `glob` file path matching library](glob/index.html)\n * [The `semver` version collation library](semver/index.html)\n * [The `term` terminal-handling library](term/index.html)\n+* [The UUID library](uuid/index.html)\n \n # Tooling\n "}, {"sha": "96413f827291bdf228822ab4ee5fe2be3ab4c19f", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "patch": "@@ -84,8 +84,6 @@ pub mod rational;\n pub mod complex;\n pub mod stats;\n pub mod hex;\n-pub mod uuid;\n-\n \n #[cfg(unicode)]\n mod unicode;"}, {"sha": "60e69af324e1a9cc967044cc00ac3f7674ec9a8a", "filename": "src/libuuid/lib.rs", "status": "renamed", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=f8afc9a5c1db0467b58c0fd5b6f8533145f2fc85", "patch": "@@ -29,8 +29,7 @@ unlikely.\n To create a new random (V4) UUID and print it out in hexadecimal form:\n \n ```rust\n-extern mod extra;\n-use extra::uuid::Uuid;\n+use uuid::Uuid;\n \n fn main() {\n     let uuid1 = Uuid::new_v4();\n@@ -55,6 +54,13 @@ Examples of string representations:\n \n */\n \n+#[crate_id = \"uuid#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+\n+extern mod extra;\n+\n use std::str;\n use std::vec;\n use std::num::FromStrRadix;\n@@ -67,7 +73,7 @@ use std::cmp::Eq;\n use std::cast::{transmute,transmute_copy};\n use std::to_bytes::{IterBytes, Cb};\n \n-use serialize::{Encoder, Encodable, Decoder, Decodable};\n+use extra::serialize::{Encoder, Encodable, Decoder, Decodable};\n \n /// A 128-bit (16 byte) buffer containing the ID\n pub type UuidBytes = [u8, ..16];\n@@ -510,7 +516,9 @@ impl rand::Rand for Uuid {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n+    use super::{Uuid, VariantMicrosoft, VariantNCS, VariantRFC4122,\n+                Version1Mac, Version2Dce, Version3Md5, Version4Random,\n+                Version5Sha1};\n     use std::str;\n     use std::rand;\n     use std::io::MemWriter;\n@@ -575,6 +583,8 @@ mod test {\n \n     #[test]\n     fn test_parse_uuid_v4() {\n+        use super::{ErrorInvalidCharacter, ErrorInvalidGroups,\n+                    ErrorInvalidGroupLength, ErrorInvalidLength};\n \n         // Invalid\n         assert!(Uuid::parse_string(\"\").is_err());\n@@ -774,8 +784,8 @@ mod test {\n \n     #[test]\n     fn test_serialize_round_trip() {\n-        use ebml;\n-        use serialize::{Encodable, Decodable};\n+        use extra::ebml;\n+        use extra::serialize::{Encodable, Decodable};\n \n         let u = Uuid::new_v4();\n         let mut wr = MemWriter::new();\n@@ -799,8 +809,8 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use super::*;\n-    use test::BenchHarness;\n+    use super::Uuid;\n+    use extra::test::BenchHarness;\n \n     #[bench]\n     pub fn create_uuids(bh: &mut BenchHarness) {", "previous_filename": "src/libextra/uuid.rs"}]}