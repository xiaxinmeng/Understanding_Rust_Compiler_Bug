{"sha": "4dbdfb493357427a0f94ce09badef581f5d62bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYmRmYjQ5MzM1NzQyN2EwZjk0Y2UwOWJhZGVmNTgxZjVkNjJiYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-07T11:36:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-07T11:36:57Z"}, "message": "Auto merge of #30202 - oli-obk:fix/const_index_feature_gate, r=Aatch\n\nsee https://github.com/rust-lang/rust/issues/29947#issuecomment-161781257\n\nI also added some missing tests", "tree": {"sha": "18cc48159fad29fd2eaac7bf4a7c2ea4a56b507e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18cc48159fad29fd2eaac7bf4a7c2ea4a56b507e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbdfb493357427a0f94ce09badef581f5d62bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbdfb493357427a0f94ce09badef581f5d62bbd", "html_url": "https://github.com/rust-lang/rust/commit/4dbdfb493357427a0f94ce09badef581f5d62bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbdfb493357427a0f94ce09badef581f5d62bbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b77f67d1942620d550f0067c92d781c623aef58", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b77f67d1942620d550f0067c92d781c623aef58", "html_url": "https://github.com/rust-lang/rust/commit/7b77f67d1942620d550f0067c92d781c623aef58"}, {"sha": "baa8ce7efdb84022809644c0bd5fed8ef476829e", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa8ce7efdb84022809644c0bd5fed8ef476829e", "html_url": "https://github.com/rust-lang/rust/commit/baa8ce7efdb84022809644c0bd5fed8ef476829e"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "69d8dfc361328e10440e8c8e93212e2cedec3e7f", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=4dbdfb493357427a0f94ce09badef581f5d62bbd", "patch": "@@ -25,7 +25,8 @@\n // by borrowck::gather_loans\n \n use middle::ty::cast::{CastKind};\n-use middle::const_eval;\n+use middle::const_eval::{self, ConstEvalErr};\n+use middle::const_eval::ErrKind::IndexOpFeatureGated;\n use middle::const_eval::EvalHint::ExprTypeChecked;\n use middle::def;\n use middle::def_id::DefId;\n@@ -477,6 +478,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                             match const_eval::eval_const_expr_partial(\n                                     self.tcx, ex, ExprTypeChecked, None) {\n                                 Ok(_) => {}\n+                                Err(ConstEvalErr { kind: IndexOpFeatureGated, ..}) => {},\n                                 Err(msg) => {\n                                     self.tcx.sess.add_lint(::lint::builtin::CONST_ERR, ex.id,\n                                                            msg.span,"}, {"sha": "ed412463b99e12c613bfbad38ed3732f73fbd468", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=4dbdfb493357427a0f94ce09badef581f5d62bbd", "patch": "@@ -434,6 +434,8 @@ pub enum ErrKind {\n \n     MiscBinaryOp,\n     MiscCatchAll,\n+\n+    IndexOpFeatureGated,\n }\n \n impl ConstEvalErr {\n@@ -483,6 +485,7 @@ impl ConstEvalErr {\n \n             MiscBinaryOp => \"bad operands for binary\".into_cow(),\n             MiscCatchAll => \"unsupported constant expr\".into_cow(),\n+            IndexOpFeatureGated => \"the index operation on const values is unstable\".into_cow(),\n         }\n     }\n }\n@@ -1119,15 +1122,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       hir::ExprStruct(..) => Struct(e.id),\n       hir::ExprIndex(ref arr, ref idx) => {\n         if !tcx.sess.features.borrow().const_indexing {\n-            tcx.sess.span_err(\n-                e.span,\n-                \"const indexing is an unstable feature\");\n-            fileline_help!(\n-                tcx.sess,\n-                e.span,\n-                \"in Nightly builds, add `#![feature(const_indexing)]` to the crate \\\n-                 attributes to enable\");\n-            signal!(e, NonConstPath)\n+            signal!(e, IndexOpFeatureGated);\n         }\n         let arr_hint = if let ExprTypeChecked = ty_hint {\n             ExprTypeChecked"}, {"sha": "09822e46cc1abddae32cc258e101ce57e5c27989", "filename": "src/test/compile-fail/const-index-feature-gate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Ftest%2Fcompile-fail%2Fconst-index-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Ftest%2Fcompile-fail%2Fconst-index-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-index-feature-gate.rs?ref=4dbdfb493357427a0f94ce09badef581f5d62bbd", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const ARR: [usize; 1] = [2];\n+const ARR2: [i32; ARR[0]] = [5, 6]; //~ ERROR unstable\n+\n+fn main() {\n+}"}, {"sha": "ce1406e80100ba104b3bde74cae3ba635964a176", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=4dbdfb493357427a0f94ce09badef581f5d62bbd", "patch": "@@ -11,7 +11,7 @@\n #![deny(exceeding_bitshifts)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n-#![feature(num_bits_bytes)]\n+#![feature(num_bits_bytes, const_indexing)]\n \n fn main() {\n       let n = 1u8 << 7;\n@@ -62,4 +62,7 @@ fn main() {\n \n \n       let n = 1i8<<(1isize+-1);\n+\n+      let n = 1i64 >> [63][0];\n+      let n = 1i64 >> [64][0]; //~ ERROR: bitshift exceeds the type's number of bits\n }"}, {"sha": "ae27b76c747e62f39df12a148f0dc3d3f073c18c", "filename": "src/test/run-pass/check_const-feature-gated.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Ftest%2Frun-pass%2Fcheck_const-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbdfb493357427a0f94ce09badef581f5d62bbd/src%2Ftest%2Frun-pass%2Fcheck_const-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck_const-feature-gated.rs?ref=4dbdfb493357427a0f94ce09badef581f5d62bbd", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const ARR: [usize; 1] = [2];\n+\n+fn main() {\n+    let _ = 5 << ARR[0];\n+}"}]}