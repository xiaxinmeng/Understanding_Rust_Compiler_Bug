{"sha": "6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDhlZDJkNjUwNGQxN2JkZDBjNDk0YjVmYmU0ODQxYjFkMjEwNTc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-12-18T15:39:06Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-10T09:19:39Z"}, "message": "self-profile: Fix issue with handling query blocking.", "tree": {"sha": "80a1d6a197c39beb8d2dcbadcf290e89d300ca72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80a1d6a197c39beb8d2dcbadcf290e89d300ca72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "html_url": "https://github.com/rust-lang/rust/commit/6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6848ed2d6504d17bdd0c494b5fbe4841b1d21057/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ead417a6c2c6befff26f05393a4c213bf4a66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ead417a6c2c6befff26f05393a4c213bf4a66c", "html_url": "https://github.com/rust-lang/rust/commit/b8ead417a6c2c6befff26f05393a4c213bf4a66c"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "33f2a5e3ffa75364151787c4ca507684553b81a1", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6848ed2d6504d17bdd0c494b5fbe4841b1d21057/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6848ed2d6504d17bdd0c494b5fbe4841b1d21057/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "patch": "@@ -13,6 +13,8 @@ use errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::cold_path;\n use rustc_data_structures::fx::{FxHashMap, FxHasher};\n+#[cfg(parallel_compiler)]\n+use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_data_structures::thin_vec::ThinVec;\n@@ -82,6 +84,19 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n     /// for some compile-time benchmarks.\n     #[inline(always)]\n     pub(super) fn try_get(tcx: TyCtxt<'tcx>, span: Span, key: &Q::Key) -> TryGetJob<'a, 'tcx, Q> {\n+        // Handling the `query_blocked_prof_timer` is a bit weird because of the\n+        // control flow in this function: Blocking is implemented by\n+        // awaiting a running job and, once that is done, entering the loop below\n+        // again from the top. In that second iteration we will hit the\n+        // cache which provides us with the information we need for\n+        // finishing the \"query-blocked\" event.\n+        //\n+        // We thus allocate `query_blocked_prof_timer` outside the loop,\n+        // initialize it during the first iteration and finish it during the\n+        // second iteration.\n+        #[cfg(parallel_compiler)]\n+        let mut query_blocked_prof_timer: Option<TimingGuard<'_>> = None;\n+\n         let cache = Q::query_cache(tcx);\n         loop {\n             // We compute the key's hash once and then use it for both the\n@@ -95,7 +110,17 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             if let Some((_, value)) =\n                 lock.results.raw_entry().from_key_hashed_nocheck(key_hash, key)\n             {\n-                tcx.prof.query_cache_hit(value.index.into());\n+                if unlikely!(tcx.prof.enabled()) {\n+                    tcx.prof.query_cache_hit(value.index.into());\n+\n+                    #[cfg(parallel_compiler)]\n+                    {\n+                        if let Some(prof_timer) = query_blocked_prof_timer.take() {\n+                            prof_timer.finish_with_query_invocation_id(value.index.into());\n+                        }\n+                    }\n+                }\n+\n                 let result = (value.value.clone(), value.index);\n                 #[cfg(debug_assertions)]\n                 {\n@@ -104,9 +129,6 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                 return TryGetJob::JobCompleted(result);\n             }\n \n-            #[cfg(parallel_compiler)]\n-            let query_blocked_prof_timer;\n-\n             let job = match lock.active.entry((*key).clone()) {\n                 Entry::Occupied(entry) => {\n                     match *entry.get() {\n@@ -116,7 +138,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                             // self-profiler.\n                             #[cfg(parallel_compiler)]\n                             {\n-                                query_blocked_prof_timer = tcx.prof.query_blocked(Q::NAME);\n+                                query_blocked_prof_timer = Some(tcx.prof.query_blocked());\n                             }\n \n                             job.clone()\n@@ -153,11 +175,6 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             {\n                 let result = job.r#await(tcx, span);\n \n-                // This `drop()` is not strictly necessary as the binding\n-                // would go out of scope anyway. But it's good to have an\n-                // explicit marker of how far the measurement goes.\n-                drop(query_blocked_prof_timer);\n-\n                 if let Err(cycle) = result {\n                     return TryGetJob::Cycle(Q::handle_cycle_error(tcx, cycle));\n                 }"}, {"sha": "ff280ffeb7882b4c44596a82d61d0320fb785dbe", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6848ed2d6504d17bdd0c494b5fbe4841b1d21057/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6848ed2d6504d17bdd0c494b5fbe4841b1d21057/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "patch": "@@ -1,4 +1,3 @@\n-\n use crate::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use crate::hir::map::definitions::DefPathData;\n use crate::ty::context::TyCtxt;"}, {"sha": "7774cb86c5c91266ad8da8cff4b8e487d6d336d8", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6848ed2d6504d17bdd0c494b5fbe4841b1d21057/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6848ed2d6504d17bdd0c494b5fbe4841b1d21057/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "patch": "@@ -339,6 +339,7 @@ impl SelfProfilerRef {\n         }\n     }\n \n+    #[inline]\n     pub fn enabled(&self) -> bool {\n         self.profiler.is_some()\n     }"}]}