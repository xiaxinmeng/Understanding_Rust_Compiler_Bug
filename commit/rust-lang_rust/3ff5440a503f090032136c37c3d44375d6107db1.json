{"sha": "3ff5440a503f090032136c37c3d44375d6107db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZjU0NDBhNTAzZjA5MDAzMjEzNmMzN2MzZDQ0Mzc1ZDYxMDdkYjE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T18:47:29Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T18:47:29Z"}, "message": "Add MacroItems and MacroStmts in grammer.ron", "tree": {"sha": "6da9635a94f8fe11c74eb06ceec89cf215dbe78c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da9635a94f8fe11c74eb06ceec89cf215dbe78c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ff5440a503f090032136c37c3d44375d6107db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff5440a503f090032136c37c3d44375d6107db1", "html_url": "https://github.com/rust-lang/rust/commit/3ff5440a503f090032136c37c3d44375d6107db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ff5440a503f090032136c37c3d44375d6107db1/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403cd78baee7e9c2410d04ca0304575e7bbab16d", "url": "https://api.github.com/repos/rust-lang/rust/commits/403cd78baee7e9c2410d04ca0304575e7bbab16d", "html_url": "https://github.com/rust-lang/rust/commit/403cd78baee7e9c2410d04ca0304575e7bbab16d"}], "stats": {"total": 140, "additions": 132, "deletions": 8}, "files": [{"sha": "4cfa1f95537ea17b0a819dda09dd2498222c971e", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=3ff5440a503f090032136c37c3d44375d6107db1", "patch": "@@ -37,9 +37,15 @@ pub enum ExpandError {\n     NoMatchingRule,\n     UnexpectedToken,\n     BindingError(String),\n+    ConversionError,\n }\n \n-pub use crate::syntax_bridge::{ast_to_token_tree, token_tree_to_ast_item_list, syntax_node_to_token_tree};\n+pub use crate::syntax_bridge::{\n+    ast_to_token_tree,\n+    token_tree_to_ast_item_list,\n+    syntax_node_to_token_tree,\n+    token_tree_to_macro_items,\n+};\n \n /// This struct contains AST for a single `macro_rules` definition. What might\n /// be very confusing is that AST has almost exactly the same shape as\n@@ -192,21 +198,21 @@ impl_froms!(TokenTree: Leaf, Subtree);\n     pub(crate) fn expand_to_syntax(\n         rules: &MacroRules,\n         invocation: &str,\n-    ) -> ra_syntax::TreeArc<ast::SourceFile> {\n+    ) -> ra_syntax::TreeArc<ast::MacroItems> {\n         let expanded = expand(rules, invocation);\n-        token_tree_to_ast_item_list(&expanded)\n+        token_tree_to_macro_items(&expanded)\n     }\n \n     pub(crate) fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n         let expanded = expand(rules, invocation);\n         assert_eq!(expanded.to_string(), expansion);\n \n-        let tree = token_tree_to_ast_item_list(&expanded);\n+        let tree = token_tree_to_macro_items(&expanded);\n \n         // Eat all white space by parse it back and forth\n         let expansion = ast::SourceFile::parse(expansion);\n         let expansion = syntax_node_to_token_tree(expansion.syntax()).unwrap().0;\n-        let file = token_tree_to_ast_item_list(&expansion);\n+        let file = token_tree_to_macro_items(&expansion);\n \n         assert_eq!(tree.syntax().debug_dump().trim(), file.syntax().debug_dump().trim());\n     }\n@@ -346,11 +352,11 @@ impl_froms!(TokenTree: Leaf, Subtree);\n             \",\n         );\n         let expansion = expand(&rules, \"structs!(Foo, Bar)\");\n-        let tree = token_tree_to_ast_item_list(&expansion);\n+        let tree = token_tree_to_macro_items(&expansion);\n         assert_eq!(\n             tree.syntax().debug_dump().trim(),\n             r#\"\n-SOURCE_FILE@[0; 40)\n+MACRO_ITEMS@[0; 40)\n   STRUCT_DEF@[0; 20)\n     STRUCT_KW@[0; 6) \"struct\"\n     NAME@[6; 9)\n@@ -527,7 +533,7 @@ SOURCE_FILE@[0; 40)\n \n         assert_eq!(\n             expand_to_syntax(&rules, \"foo! { 1 + 1  }\").syntax().debug_dump().trim(),\n-            r#\"SOURCE_FILE@[0; 15)\n+            r#\"MACRO_ITEMS@[0; 15)\n   FN_DEF@[0; 15)\n     FN_KW@[0; 2) \"fn\"\n     NAME@[2; 5)"}, {"sha": "19e09be80ed68b04986b486a02b20364244c620d", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=3ff5440a503f090032136c37c3d44375d6107db1", "patch": "@@ -30,6 +30,29 @@ pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, Toke\n     Some((tt, token_map))\n }\n \n+// The following items are what `rustc` macro can be parsed into :\n+// link: https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libsyntax/ext/expand.rs#L141\n+// * Expr(P<ast::Expr>)\n+// * Pat(P<ast::Pat>)\n+// * Ty(P<ast::Ty>)\n+// * Stmts(SmallVec<[ast::Stmt; 1]>)\n+// * Items(SmallVec<[P<ast::Item>; 1]>)\n+//\n+// * TraitItems(SmallVec<[ast::TraitItem; 1]>)\n+// * ImplItems(SmallVec<[ast::ImplItem; 1]>)\n+// * ForeignItems(SmallVec<[ast::ForeignItem; 1]>\n+//\n+//\n+\n+/// Parses the token tree (result of macro expansion) as a sequence of items\n+pub fn token_tree_to_macro_items(tt: &tt::Subtree) -> TreeArc<ast::MacroItems> {\n+    let token_source = SubtreeTokenSource::new(tt);\n+    let mut tree_sink = TtTreeSink::new(token_source.querier());\n+    ra_parser::parse_macro_items(&token_source, &mut tree_sink);\n+    let syntax = tree_sink.inner.finish();\n+    ast::MacroItems::cast(&syntax).unwrap().to_owned()\n+}\n+\n /// Parses the token tree (result of macro expansion) as a sequence of items\n pub fn token_tree_to_ast_item_list(tt: &tt::Subtree) -> TreeArc<ast::SourceFile> {\n     let token_source = SubtreeTokenSource::new(tt);"}, {"sha": "1adc27b80f09e251bb11fc219ecfb4d8b32edb20", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=3ff5440a503f090032136c37c3d44375d6107db1", "patch": "@@ -49,6 +49,12 @@ pub(crate) fn root(p: &mut Parser) {\n     m.complete(p, SOURCE_FILE);\n }\n \n+pub(crate) fn macro_items(p: &mut Parser) {\n+    let m = p.start();\n+    items::mod_contents(p, false);\n+    m.complete(p, MACRO_ITEMS);\n+}\n+\n pub(crate) fn path(p: &mut Parser) {\n     paths::type_path(p);\n }"}, {"sha": "d6bcc4d8cd657af2e5098b3465ffc8ba30c345ec", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=3ff5440a503f090032136c37c3d44375d6107db1", "patch": "@@ -98,6 +98,10 @@ pub fn parse_item(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink)\n     parse_from_tokens(token_source, tree_sink, grammar::item);\n }\n \n+pub fn parse_macro_items(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink) {\n+    parse_from_tokens(token_source, tree_sink, grammar::macro_items);\n+}\n+\n /// A parsing function for a specific braced-block.\n pub struct Reparser(fn(&mut parser::Parser));\n "}, {"sha": "6f984aea16f4b03cbd2d3cd858e97c6e049669f8", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=3ff5440a503f090032136c37c3d44375d6107db1", "patch": "@@ -233,6 +233,8 @@ pub enum SyntaxKind {\n     ARG_LIST,\n     TYPE_BOUND,\n     TYPE_BOUND_LIST,\n+    MACRO_ITEMS,\n+    MACRO_STMTS,\n     // Technical kind so that we can cast from u16 safely\n     #[doc(hidden)]\n     __LAST,\n@@ -592,6 +594,8 @@ impl SyntaxKind {\n             ARG_LIST => &SyntaxInfo { name: \"ARG_LIST\" },\n             TYPE_BOUND => &SyntaxInfo { name: \"TYPE_BOUND\" },\n             TYPE_BOUND_LIST => &SyntaxInfo { name: \"TYPE_BOUND_LIST\" },\n+            MACRO_ITEMS => &SyntaxInfo { name: \"MACRO_ITEMS\" },\n+            MACRO_STMTS => &SyntaxInfo { name: \"MACRO_STMTS\" },\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n             __LAST => &SyntaxInfo { name: \"__LAST\" },"}, {"sha": "17de4f058081d13a74478a158ace4d49bc800399", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=3ff5440a503f090032136c37c3d44375d6107db1", "patch": "@@ -1770,6 +1770,72 @@ impl MacroCall {\n     }\n }\n \n+// MacroItems\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct MacroItems {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for MacroItems {\n+    type Repr = rowan::SyntaxNode;\n+}\n+\n+impl AstNode for MacroItems {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            MACRO_ITEMS => Some(MacroItems::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MacroItems {\n+    type Owned = TreeArc<MacroItems>;\n+    fn to_owned(&self) -> TreeArc<MacroItems> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl ast::ModuleItemOwner for MacroItems {}\n+impl ast::FnDefOwner for MacroItems {}\n+impl MacroItems {}\n+\n+// MacroStmts\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct MacroStmts {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for MacroStmts {\n+    type Repr = rowan::SyntaxNode;\n+}\n+\n+impl AstNode for MacroStmts {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            MACRO_STMTS => Some(MacroStmts::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MacroStmts {\n+    type Owned = TreeArc<MacroStmts>;\n+    fn to_owned(&self) -> TreeArc<MacroStmts> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl MacroStmts {\n+    pub fn statements(&self) -> impl Iterator<Item = &Stmt> {\n+        super::children(self)\n+    }\n+\n+    pub fn expr(&self) -> Option<&Expr> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // MatchArm\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]"}, {"sha": "663e3a2f9ec02602571d09b3c6951356540ce1b0", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5440a503f090032136c37c3d44375d6107db1/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=3ff5440a503f090032136c37c3d44375d6107db1", "patch": "@@ -247,6 +247,10 @@ Grammar(\n         \"ARG_LIST\",\n         \"TYPE_BOUND\",\n         \"TYPE_BOUND_LIST\",\n+\n+        // macro related\n+        \"MACRO_ITEMS\",\n+        \"MACRO_STMTS\",\n     ],\n     ast: {\n         \"SourceFile\": (\n@@ -668,5 +672,16 @@ Grammar(\n         \"TypeArg\": (options: [\"TypeRef\"]),\n         \"AssocTypeArg\": (options: [\"NameRef\", \"TypeRef\"]),\n         \"LifetimeArg\": (),\n+\n+        \"MacroItems\": (\n+            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],            \n+        ),\n+\n+        \"MacroStmts\" : (\n+            options: [ \"Expr\" ],\n+            collections: [\n+                [\"statements\", \"Stmt\"],\n+            ],\n+        )\n     },\n )"}]}