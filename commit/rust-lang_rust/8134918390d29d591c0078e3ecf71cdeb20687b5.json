{"sha": "8134918390d29d591c0078e3ecf71cdeb20687b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzQ5MTgzOTBkMjlkNTkxYzAwNzhlM2VjZjcxY2RlYjIwNjg3YjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-19T09:50:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-19T10:29:49Z"}, "message": "don't use NOTE in tests", "tree": {"sha": "d9c7e8b3b6228445db781ea2f8eeaec3ce99ebcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c7e8b3b6228445db781ea2f8eeaec3ce99ebcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8134918390d29d591c0078e3ecf71cdeb20687b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8134918390d29d591c0078e3ecf71cdeb20687b5", "html_url": "https://github.com/rust-lang/rust/commit/8134918390d29d591c0078e3ecf71cdeb20687b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8134918390d29d591c0078e3ecf71cdeb20687b5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069b661a10773bf5f9753ccf556fd101f6b492d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/069b661a10773bf5f9753ccf556fd101f6b492d6", "html_url": "https://github.com/rust-lang/rust/commit/069b661a10773bf5f9753ccf556fd101f6b492d6"}], "stats": {"total": 110, "additions": 37, "deletions": 73}, "files": [{"sha": "1e2178811ea3ab5babedceeb0b7b7f4ad63adc84", "filename": "tests/compile-fail-fullmir/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -9,7 +9,6 @@ fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n-        let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error\n-        //~^ NOTE dangling pointer was dereferenced\n+        let _z = *(x.as_ptr() as *mut u8); //~ ERROR dangling pointer was dereferenced\n     }\n }"}, {"sha": "4faaa359df6244fe57a8d6c00301d735f0dfbafe", "filename": "tests/compile-fail/alignment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falignment.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -5,8 +5,7 @@ fn main() {\n     let x_ptr: *mut u8 = &mut x[0];\n     let y_ptr = x_ptr as *mut u64;\n     unsafe {\n-        *y_ptr = 42; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to access memory with alignment 1, but alignment\n+        *y_ptr = 42; //~ ERROR tried to access memory with alignment 1, but alignment\n     }\n     panic!(\"unreachable in miri\");\n }"}, {"sha": "3026124e1f9aff69ac8e4b5f5777f7bd019b3bf1", "filename": "tests/compile-fail/assume.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassume.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -5,7 +5,6 @@ fn main() {\n     unsafe {\n         std::intrinsics::assume(x < 10);\n         std::intrinsics::assume(x > 1);\n-        std::intrinsics::assume(x > 42); //~ ERROR constant evaluation error\n-    //~^ NOTE `assume` argument was false\n+        std::intrinsics::assume(x > 42); //~ `assume` argument was false\n     }\n }"}, {"sha": "a30c054ab5d0486fd57255dd86bebc03a2918c25", "filename": "tests/compile-fail/bitop-beyond-alignment.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -28,11 +28,10 @@ fn mk_rec() -> Rec {\n fn is_u64_aligned(u: &Tag<u64>) -> bool {\n     let p: usize = unsafe { mem::transmute(u) };\n     let u64_align = std::mem::align_of::<u64>();\n-    return (p & (u64_align + 1)) == 0; //~ ERROR constant evaluation error\n-    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n+    return (p & (u64_align + 1)) == 0; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n }\n \n pub fn main() {\n     let x = mk_rec();\n-    assert!(is_u64_aligned(&x.t)); //~ NOTE inside call to `is_u64_aligned\n+    assert!(is_u64_aligned(&x.t));\n }"}, {"sha": "c3b1fa595888519c45cea7f3e62858138482be85", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -7,6 +7,5 @@ fn main() {\n         std::mem::transmute::<&usize, &fn(i32)>(&b)\n     };\n \n-    (*g)(42) //~ ERROR constant evaluation error\n-    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n+    (*g)(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "1971ce1557e7957e3cf6a40608f0690721204c8a", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -6,6 +6,5 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR constant evaluation error\n-    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n+    g(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "e8072077305730ef3a7a17ee09760c533ee0290f", "filename": "tests/compile-fail/dangling_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -3,7 +3,6 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { *p }; //~ ERROR constant evaluation error\n-    //~^ NOTE dangling pointer was dereferenced\n+    let x = unsafe { *p }; //~ ERROR dangling pointer was dereferenced\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "181a41ce3b23e2b44d0fb6740fca8d8fcafba879", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -11,6 +11,5 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 1 / 0; //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to divide by zero\n+    let _n = 1 / 0; //~ ERROR attempt to divide by zero\n }"}, {"sha": "d859e9072e3246f2a9692bd3c95c491f64ab4f0a", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -7,7 +7,6 @@ fn main() {\n     let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n-        f() //~ ERROR constant evaluation error\n-        //~^ NOTE tried to treat a memory pointer as a function pointer\n+        f() //~ ERROR tried to treat a memory pointer as a function pointer\n     }\n }"}, {"sha": "cccb21790d6505eda4c4dada728c57c10f1cbd2b", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -10,6 +10,5 @@ fn main() {\n     let y : *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n     let x : fn() = unsafe { mem::transmute(y) };\n-    x(); //~ ERROR constant evaluation error\n-    //~^ NOTE tried to use a function pointer after offsetting it\n+    x(); //~ ERROR tried to use a function pointer after offsetting it\n }"}, {"sha": "27c74e8dc87ee27b640f5c03c35e0bb6019d52a0", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -2,7 +2,6 @@\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n-    *y = 42;  //~ ERROR constant evaluation error\n-    //~^ NOTE tried to modify constant memory\n+    *y = 42;  //~ ERROR tried to modify constant memory\n     assert_eq!(*x, 42);\n }"}, {"sha": "634488489b539a0d2f911f0f243e769353ba8cf6", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -7,8 +7,7 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !)  //~ ERROR constant evaluation error\n-        //~^ NOTE entered unreachable code\n+        *(y as *const _ as *const !)  //~ ERROR entered unreachable code\n     };\n     f(x)\n }"}, {"sha": "5620b6559cfde40a7d0abf7decd1c584951c0f3a", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -8,8 +8,7 @@\n enum Void {}\n \n fn f(v: Void) -> ! {\n-    match v {} //~ ERROR constant evaluation error\n-    //~^ NOTE entered unreachable code\n+    match v {} //~ ERROR  entered unreachable code\n }\n \n fn main() {"}, {"sha": "1ab2d9714779273262c2d666111ec4d25ec0546d", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error\n-    //~^ NOTE which has size 2\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "1ab2d9714779273262c2d666111ec4d25ec0546d", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error\n-    //~^ NOTE outside bounds of allocation\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "8c70c9c7df7ddfd5c3192ec81bca0480227be8f0", "filename": "tests/compile-fail/overflowing-lsh-neg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -12,6 +12,5 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 2i64 << -1; //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to shift left with overflow\n+    let _n = 2i64 << -1; //~ ERROR attempt to shift left with overflow\n }"}, {"sha": "7b7486343c3358de3531561e1a999ff4d78c33fe", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -12,6 +12,5 @@\n \n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n-    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to shift right with overflow\n+    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR attempt to shift right with overflow\n }"}, {"sha": "355cbd86988883983f695193223923fafce6e549", "filename": "tests/compile-fail/overflowing-rsh.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -11,6 +11,5 @@\n #![allow(exceeding_bitshifts)]\n \n fn main() {\n-    let _n = 1i64 >> 64; //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to shift right with overflow\n+    let _n = 1i64 >> 64; //~ ERROR attempt to shift right with overflow\n }"}, {"sha": "5c0d5b463d51f4502a318537d3e17f5bf6a61b67", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -6,7 +6,6 @@ fn main() {\n         // \"attempted to interpret some raw bytes as a pointer address\" instead of\n         // \"attempted to read undefined bytes\"\n     }\n-    let x = *p; //~ ERROR constant evaluation error\n-    //~^ NOTE attempted to read undefined bytes\n+    let x = *p; //~ ERROR attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "5df8c4782c7f88fcc2e00b102d38d5d836c6871b", "filename": "tests/compile-fail/pointer_byte_read_2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -3,6 +3,5 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _ = unsafe { *z }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access part of a pointer value as raw bytes\n+    let _ = unsafe { *z }; //~ ERROR tried to access part of a pointer value as raw bytes\n }"}, {"sha": "124f84de5bf45b6186719f3e39f204bde9051e64", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -1,8 +1,7 @@\n fn main() {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    if x < y { //~ ERROR constant evaluation error\n-    //~^ NOTE attempted to do invalid arithmetic on pointers\n+    if x < y { //~ ERROR attempted to do invalid arithmetic on pointers\n         unreachable!()\n     }\n }"}, {"sha": "576f0c333d189d3992177c9750a03c8054552389", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -2,8 +2,7 @@ fn main() {\n     let x = &1;\n     // Casting down to u8 and back up to a pointer loses too much precision; this must not work.\n     let x = x as *const i32;\n-    let x = x as u8; //~ ERROR constant evaluation error\n-    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n+    let x = x as u8; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n     let x = x as *const i32;\n     let _ = unsafe { *x };\n }"}, {"sha": "049dfca340ed986b13e7a9e593165e75eedb52e0", "filename": "tests/compile-fail/reading_half_a_pointer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -24,7 +24,6 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to access part of a pointer value as raw bytes\n+        let _x = *d_alias; //~ ERROR tried to access part of a pointer value as raw bytes\n     }\n }"}, {"sha": "14a2afc33f7fec26f376d0699e05707dcdd757ee", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -15,6 +15,5 @@ fn main() {\n         y: 99,\n     };\n     let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n+    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "304ab6c6b7409310c42d3c906135fb1d4445ebce", "filename": "tests/compile-fail/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -3,8 +3,7 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     unsafe {\n-        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to modify constant memory\n+        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR tried to modify constant memory\n         assert_eq!(X, 6);\n     }\n }"}, {"sha": "01c3b9bb2d8da9395e11fc07d601ce1d40beaad9", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -7,7 +7,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let s = \"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR tried to modify constant memory\n     }\n }"}, {"sha": "ff09aad1bd5643e6da5e108cd89a065660b0d24c", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -4,7 +4,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let bs = b\"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR tried to modify constant memory\n     }\n }"}, {"sha": "acc6098af7ee04a2c638d71b23fab120e9e91d78", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -16,6 +16,5 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n-    if v == 0 {} //~ ERROR constant evaluation error\n-    //~^ NOTE attempted to read undefined bytes\n+    if v == 0 {} //~ ERROR attempted to read undefined bytes\n }"}, {"sha": "e1f916910d732f52d066e7e0e69ac35e1a425644", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -10,6 +10,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], [u8; 8]>(&[1u8])\n     };\n-    let _ = bad[0] + bad[bad.len()-1]; //~ ERROR constant evaluation error\n-    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n+    let _ = bad[0] + bad[bad.len()-1]; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "3121a139d9204878d352c79417a57eba36c13d18", "filename": "tests/compile-fail/transmute_fat2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat2.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -7,6 +7,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<u64, &[u8]>(42)\n     };\n-    bad[0]; //~ ERROR constant evaluation error\n-    //~^ NOTE index out of bounds: the len is 0 but the index is 0\n+    bad[0]; //~ ERROR index out of bounds: the len is 0 but the index is 0\n }"}, {"sha": "88285dc69f3176b9e2ea6d27a1283fbf9b611af4", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -2,6 +2,5 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const u32;\n     // This must fail because alignment is violated\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "7541079def2c0dc0ac8f079ed050b6840ae74998", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -3,6 +3,5 @@ fn main() {\n     let x = x as *const _ as *const *const u8;\n     // This must fail because alignment is violated.  Test specifically for loading pointers, which have special code\n     // in miri's memory.\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 2, but alignment\n+    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment\n }"}, {"sha": "1b9b55c6be1f2eb73c004289e8105d6e4c2a141f", "filename": "tests/compile-fail/unaligned_ptr_cast_zst.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -2,6 +2,5 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated.  Test specifically for loading ZST.\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "1f092936148e0bd0aefaefb0b2e0d78d13a1f40c", "filename": "tests/compile-fail/undefined_byte_read.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fundefined_byte_read.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -4,7 +4,6 @@\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };\n-    let x = undef + 1; //~ ERROR: error\n-    //~^ NOTE attempted to read undefined bytes\n+    let x = undef + 1; //~ ERROR attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "8eec9737546b308a3c92d7a0b97f0821952c8552", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR constant evaluation error\n-    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n+    let x = unsafe { *p }; //~ ERROR a memory access tried to interpret some bytes as a pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "2b179dcc8a452d63740c27ae34db991a6b4a2501", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134918390d29d591c0078e3ecf71cdeb20687b5/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=8134918390d29d591c0078e3ecf71cdeb20687b5", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n+    let _ = unsafe { *x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n }"}]}