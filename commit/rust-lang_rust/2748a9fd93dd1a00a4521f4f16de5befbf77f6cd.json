{"sha": "2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NDhhOWZkOTNkZDFhMDBhNDUyMWY0ZjE2ZGU1YmVmYmY3N2Y2Y2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-08T17:31:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-08T17:31:35Z"}, "message": "Auto merge of #65209 - Centril:rollup-tzc0j87, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #64404 (Add long error explanation for E0495)\n - #64918 (Add long error explanation for E0551)\n - #65102 (Disable stack probe when thread sanitizer is enabled)\n - #65120 (Correctly estimate the required space for string in `StyledBuffer::prepend`)\n - #65145 (When suggesting assoc function with type params, include turbofish)\n - #65162 (Remove loaded_from_cache map from DepGraph)\n - #65176 (Remove query-related macros)\n - #65179 (Add long error explanation for E0567)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d889f76e88e1ab000a0b64d9337868d8deeeccb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d889f76e88e1ab000a0b64d9337868d8deeeccb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "html_url": "https://github.com/rust-lang/rust/commit/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa9554d77960627cb2c983470bceacfeeb486b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa9554d77960627cb2c983470bceacfeeb486b0", "html_url": "https://github.com/rust-lang/rust/commit/3fa9554d77960627cb2c983470bceacfeeb486b0"}, {"sha": "3246ab2427494abb59ecf3718f4dec83a0de406e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3246ab2427494abb59ecf3718f4dec83a0de406e", "html_url": "https://github.com/rust-lang/rust/commit/3246ab2427494abb59ecf3718f4dec83a0de406e"}], "stats": {"total": 357, "additions": 266, "deletions": 91}, "files": [{"sha": "08c456547cec34ee06fb039277b737f057a537cd", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -75,9 +75,6 @@ struct DepGraphData {\n     previous_work_products: FxHashMap<WorkProductId, WorkProduct>,\n \n     dep_node_debug: Lock<FxHashMap<DepNode, String>>,\n-\n-    // Used for testing, only populated when -Zquery-dep-graph is specified.\n-    loaded_from_cache: Lock<FxHashMap<DepNodeIndex, bool>>,\n }\n \n pub fn hash_result<R>(hcx: &mut StableHashingContext<'_>, result: &R) -> Option<Fingerprint>\n@@ -104,7 +101,6 @@ impl DepGraph {\n                 emitting_diagnostics_cond_var: Condvar::new(),\n                 previous: prev_graph,\n                 colors: DepNodeColorMap::new(prev_graph_node_count),\n-                loaded_from_cache: Default::default(),\n             })),\n         }\n     }\n@@ -874,25 +870,6 @@ impl DepGraph {\n             }\n         }\n     }\n-\n-    pub fn mark_loaded_from_cache(&self, dep_node_index: DepNodeIndex, state: bool) {\n-        debug!(\"mark_loaded_from_cache({:?}, {})\",\n-               self.data.as_ref().unwrap().current.borrow().data[dep_node_index].node,\n-               state);\n-\n-        self.data\n-            .as_ref()\n-            .unwrap()\n-            .loaded_from_cache\n-            .borrow_mut()\n-            .insert(dep_node_index, state);\n-    }\n-\n-    pub fn was_loaded_from_cache(&self, dep_node: &DepNode) -> Option<bool> {\n-        let data = self.data.as_ref().unwrap();\n-        let dep_node_index = data.current.borrow().node_to_node_index[dep_node];\n-        data.loaded_from_cache.borrow().get(&dep_node_index).cloned()\n-    }\n }\n \n /// A \"work product\" is an intermediate result that we save into the"}, {"sha": "4cee132ecaedf9ed23ece9e8dc720f3277932b88", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -1520,6 +1520,47 @@ where\n ```\n \"##,\n \n+E0495: r##\"\n+A lifetime cannot be determined in the given situation.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0495\n+fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n+    match (&t,) { // error!\n+        ((u,),) => u,\n+    }\n+}\n+\n+let y = Box::new((42,));\n+let x = transmute_lifetime(&y);\n+```\n+\n+In this code, you have two ways to solve this issue:\n+ 1. Enforce that `'a` lives at least as long as `'b`.\n+ 2. Use the same lifetime requirement for both input and output values.\n+\n+So for the first solution, you can do it by replacing `'a` with `'a: 'b`:\n+\n+```\n+fn transmute_lifetime<'a: 'b, 'b, T>(t: &'a (T,)) -> &'b T {\n+    match (&t,) { // ok!\n+        ((u,),) => u,\n+    }\n+}\n+```\n+\n+In the second you can do it by simply removing `'b` so they both use `'a`:\n+\n+```\n+fn transmute_lifetime<'a, T>(t: &'a (T,)) -> &'a T {\n+    match (&t,) { // ok!\n+        ((u,),) => u,\n+    }\n+}\n+```\n+\"##,\n+\n E0496: r##\"\n A lifetime name is shadowing another lifetime name. Erroneous code example:\n \n@@ -2116,8 +2157,6 @@ rejected in your own crates.\n     E0488, // lifetime of variable does not enclose its declaration\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n-    E0495, // cannot infer an appropriate lifetime due to conflicting\n-           // requirements\n     E0623, // lifetime mismatch where both parameters are anonymous regions\n     E0628, // generators cannot have explicit parameters\n     E0631, // type mismatch in closure arguments"}, {"sha": "58133539d9ac359e846b7d7a273ff9d1a0bb9fc1", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 40, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -489,10 +489,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.incremental_verify_ich::<Q>(&result, dep_node, dep_node_index);\n         }\n \n-        if unlikely!(self.sess.opts.debugging_opts.query_dep_graph) {\n-            self.dep_graph.mark_loaded_from_cache(dep_node_index, true);\n-        }\n-\n         result\n     }\n \n@@ -570,10 +566,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         drop(prof_timer);\n         profq_msg!(self, ProfileQueriesMsg::ProviderEnd);\n \n-        if unlikely!(self.sess.opts.debugging_opts.query_dep_graph) {\n-            self.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n-        }\n-\n         if unlikely!(!diagnostics.is_empty()) {\n             if dep_node.kind != crate::dep_graph::DepKind::Null {\n                 self.queries.on_disk_cache\n@@ -1191,37 +1183,6 @@ pub fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool {\n         return false\n     }\n \n-    macro_rules! def_id {\n-        () => {\n-            if let Some(def_id) = dep_node.extract_def_id(tcx) {\n-                def_id\n-            } else {\n-                // Return from the whole function.\n-                return false\n-            }\n-        }\n-    };\n-\n-    macro_rules! krate {\n-        () => { (def_id!()).krate }\n-    };\n-\n-    macro_rules! force_ex {\n-        ($tcx:expr, $query:ident, $key:expr) => {\n-            {\n-                $tcx.force_query::<crate::ty::query::queries::$query<'_>>(\n-                    $key,\n-                    DUMMY_SP,\n-                    *dep_node\n-                );\n-            }\n-        }\n-    };\n-\n-    macro_rules! force {\n-        ($query:ident, $key:expr) => { force_ex!(tcx, $query, $key) }\n-    };\n-\n     rustc_dep_node_force!([dep_node, tcx]\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already.\n@@ -1240,7 +1201,19 @@ pub fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool {\n             bug!(\"force_from_dep_node: encountered {:?}\", dep_node)\n         }\n \n-        DepKind::Analysis => { force!(analysis, krate!()); }\n+        DepKind::Analysis => {\n+            let def_id = if let Some(def_id) = dep_node.extract_def_id(tcx) {\n+                def_id\n+            } else {\n+                // Return from the whole function.\n+                return false\n+            };\n+            tcx.force_query::<crate::ty::query::queries::analysis<'_>>(\n+                def_id.krate,\n+                DUMMY_SP,\n+                *dep_node\n+            );\n+        }\n     );\n \n     true"}, {"sha": "a0bef5b78156586ee195df67e5d807d698bd5002", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -96,10 +96,12 @@ pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     }\n \n     // Currently stack probes seem somewhat incompatible with the address\n-    // sanitizer. With asan we're already protected from stack overflow anyway\n-    // so we don't really need stack probes regardless.\n-    if let Some(Sanitizer::Address) = cx.sess().opts.debugging_opts.sanitizer {\n-        return\n+    // sanitizer and thread sanitizer. With asan we're already protected from\n+    // stack overflow anyway so we don't really need stack probes regardless.\n+    match cx.sess().opts.debugging_opts.sanitizer {\n+        Some(Sanitizer::Address) |\n+        Some(Sanitizer::Thread) => return,\n+        _ => {},\n     }\n \n     // probestack doesn't play nice either with `-C profile-generate`."}, {"sha": "b12ab9e4576025c8efb7d17777df90fe7e94458b", "filename": "src/librustc_errors/styled_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_errors%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_errors%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fstyled_buffer.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -111,7 +111,7 @@ impl StyledBuffer {\n \n     pub fn prepend(&mut self, line: usize, string: &str, style: Style) {\n         self.ensure_lines(line);\n-        let string_len = string.len();\n+        let string_len = string.chars().count();\n \n         // Push the old content over to make room for new content\n         for _ in 0..string_len {"}, {"sha": "139e1b554cf90a2597a6ec606404b8034b3ceba0", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -495,7 +495,11 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 dep_node_force_stream.extend(quote! {\n                     DepKind::#name => {\n                         if let Some(key) = RecoverKey::recover($tcx, $dep_node) {\n-                            force_ex!($tcx, #name, key);\n+                            $tcx.force_query::<crate::ty::query::queries::#name<'_>>(\n+                                key,\n+                                DUMMY_SP,\n+                                *$dep_node\n+                            );\n                         } else {\n                             return false;\n                         }"}, {"sha": "fbd06c34800df75a4ee5d1e8a883eae62d18a1b8", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -314,6 +314,34 @@ type A3 = fn(i16); // ok!\n ```\n \"##,\n \n+E0567: r##\"\n+Generics have been used on an auto trait.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0567\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Generic<T> {} // error!\n+\n+fn main() {}\n+```\n+\n+Since an auto trait is implemented on all existing types, the\n+compiler would not be able to infer the types of the trait's generic\n+parameters.\n+\n+To fix this issue, just remove the generics:\n+\n+```\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Generic {} // ok!\n+\n+fn main() {}\n+```\n+\"##,\n+\n E0571: r##\"\n A `break` statement with an argument appeared in a non-`loop` loop.\n \n@@ -531,7 +559,6 @@ Switch to the Rust 2018 edition to use `async fn`.\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n-    E0567, // auto traits can not have generic parameters\n     E0568, // auto traits can not have super traits\n     E0666, // nested `impl Trait` is illegal\n     E0667, // `impl Trait` in projections"}, {"sha": "b4b84b61fd6277ab8d771dc495d303fd0d8baa69", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -461,16 +461,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(span, \"this is an associated function, not a method\");\n                 }\n                 if static_sources.len() == 1 {\n+                    let ty_str = if let Some(CandidateSource::ImplSource(\n+                        impl_did,\n+                    )) = static_sources.get(0) {\n+                        // When the \"method\" is resolved through dereferencing, we really want the\n+                        // original type that has the associated function for accurate suggestions.\n+                        // (#61411)\n+                        let ty = self.impl_self_ty(span, *impl_did).ty;\n+                        match (&ty.peel_refs().kind, &actual.peel_refs().kind) {\n+                            (ty::Adt(def, _), ty::Adt(def_actual, _)) if def == def_actual => {\n+                                // Use `actual` as it will have more `substs` filled in.\n+                                self.ty_to_value_string(actual.peel_refs())\n+                            }\n+                            _ => self.ty_to_value_string(ty.peel_refs()),\n+                        }\n+                    } else {\n+                        self.ty_to_value_string(actual.peel_refs())\n+                    };\n                     if let SelfSource::MethodCall(expr) = source {\n-                        err.span_suggestion(expr.span.to(span),\n-                                            \"use associated function syntax instead\",\n-                                            format!(\"{}::{}\",\n-                                                    self.ty_to_string(actual),\n-                                                    item_name),\n-                                            Applicability::MachineApplicable);\n+                        err.span_suggestion(\n+                            expr.span.to(span),\n+                            \"use associated function syntax instead\",\n+                            format!(\"{}::{}\", ty_str, item_name),\n+                            Applicability::MachineApplicable,\n+                        );\n                     } else {\n-                        err.help(&format!(\"try with `{}::{}`\",\n-                                          self.ty_to_string(actual), item_name));\n+                        err.help(&format!(\n+                            \"try with `{}::{}`\",\n+                            ty_str,\n+                            item_name,\n+                        ));\n                     }\n \n                     report_candidates(span, &mut err, static_sources);\n@@ -586,6 +606,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    /// Print out the type for use in value namespace.\n+    fn ty_to_value_string(&self, ty: Ty<'tcx>) -> String {\n+        match ty.kind {\n+            ty::Adt(def, substs) => format!(\"{}\", ty::Instance::new(def.did, substs)),\n+            _ => self.ty_to_string(ty),\n+        }\n+    }\n+\n     fn suggest_use_candidates(&self,\n                               err: &mut DiagnosticBuilder<'_>,\n                               mut msg: String,"}, {"sha": "fc3f095856a800a68916338ddb8891dca9f12a2b", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -163,6 +163,25 @@ fn the_banished() {} // ok!\n ```\n \"##,\n \n+E0551: r##\"\n+An invalid meta-item was used inside an attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0551\n+#[deprecated(note)] // error!\n+fn i_am_deprecated() {}\n+```\n+\n+Meta items are the key-value pairs inside of an attribute. To fix this issue,\n+you need to give a value to the `note` key. Example:\n+\n+```\n+#[deprecated(note = \"because\")] // ok!\n+fn i_am_deprecated() {}\n+```\n+\"##,\n+\n E0552: r##\"\n A unrecognized representation attribute was used.\n \n@@ -473,7 +492,6 @@ features in the `-Z allow_features` flag.\n     // rustc_deprecated attribute must be paired with either stable or unstable\n     // attribute\n     E0549,\n-    E0551, // incorrect meta item\n     E0553, // multiple rustc_const_unstable attributes\n //  E0555, // replaced with a generic attribute input check\n     E0584, // file for module `..` found at both .. and .."}, {"sha": "4309373f123f9d3e6c4164bdafc927cd55166b11", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -23,3 +23,4 @@ LL |    bar(foo, x)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "b8b1a979c363a95a38a258a73e55ee6504a025f5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -19,3 +19,4 @@ LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "d797f30a2fc8cb2885482c8ac3ab96806bd08978", "filename": "src/test/ui/auto-trait-validation.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-trait-validation.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -18,4 +18,5 @@ LL | auto trait MyTrait { fn foo() {} }\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0380`.\n+Some errors have detailed explanations: E0380, E0567.\n+For more information about an error, try `rustc --explain E0380`."}, {"sha": "3d552f88ba6673e20c342ba43d0e31975deab487", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -209,4 +209,5 @@ LL | | }\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0495.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "57143d68105540f9edf7576c568e963589ec6c2e", "filename": "src/test/ui/deprecation/deprecation-sanity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -54,5 +54,5 @@ LL | #[deprecated(since = \"a\", since = \"b\", note = \"c\")]\n \n error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0538, E0541, E0550, E0565.\n+Some errors have detailed explanations: E0538, E0541, E0550, E0551, E0565.\n For more information about an error, try `rustc --explain E0538`."}, {"sha": "feca7f10b706b22890178427631abd62ee72cbff", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -27,3 +27,4 @@ LL |     invoke(&x, |a, b| if a > b { a } else { b });\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "af120fa977caab609bc9f01448575654d91dbbc7", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -19,3 +19,4 @@ LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "c1ec536ef43620da3c5a26a89b8caec29d222714", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -18,3 +18,4 @@ LL | |     }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "a80ebaf8dd29d81892e5a9b789eb88a3f90f6dd3", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -22,3 +22,4 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "4dee83d6eefe37ef0379d4b42d13f8ba74c1f7d0", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -32,3 +32,4 @@ LL |         x\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "a047893a168a487f182f79b309aa3addfd51506b", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -27,3 +27,4 @@ LL | trait T<'a> {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "28a1be59840a1fd79a16cb1f62c152ec91ddaee2", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -28,3 +28,4 @@ LL | trait Foo<'a> {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "dd895985c1430acb2c3e6a7a8da35646285feda2", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -94,4 +94,5 @@ LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0495.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "b98bc572a397c6c87cbf8b6ed148beb919fe5b1f", "filename": "src/test/ui/issues/issue-3707.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -5,7 +5,7 @@ LL |         self.boom();\n    |         -----^^^^\n    |         |    |\n    |         |    this is an associated function, not a method\n-   |         help: use associated function syntax instead: `&Obj::boom`\n+   |         help: use associated function syntax instead: `Obj::boom`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `Obj`"}, {"sha": "8d74b8ecb881e772c23a5124b6d9cca7b72916f3", "filename": "src/test/ui/issues/issue-52213.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -25,3 +25,4 @@ LL |         ((u,),) => u,\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "7cf597d3a98f81b5d2c1c2448a4504b53478b1f1", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -42,3 +42,4 @@ LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "e00e6f36f1af41d1ac4c34e056e20aa2202b5f93", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -27,3 +27,4 @@ LL | impl Foo<'_> {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "77a372d9cf5589778676ec2b2669c1a3dd17e209", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -20,3 +20,4 @@ LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "746517417520a5909ca590a015cd85222a5ee281", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -50,3 +50,4 @@ LL | impl<'a> FromTuple<'a> for C<'a> {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "f5657f9e4eada21c131b76e2671b990824502cbc", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -21,3 +21,4 @@ LL |     <Foo<'a>>::C\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "f7db4038b8af43cff1f9e2b16e5dc4afa828817a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -21,3 +21,4 @@ LL |     T::C\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "217e8504aa3c94ed62a49fa1af415f33e944c999", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -50,3 +50,4 @@ LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "cc8d150d04cc513a90f8dc67a9b89bffd630b64f", "filename": "src/test/ui/regions/region-object-lifetime-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -27,3 +27,4 @@ LL |     x.borrowed()\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "23fd4d03628d9aa8c959baae4813d6ebd233f5e4", "filename": "src/test/ui/regions/region-object-lifetime-4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -27,3 +27,4 @@ LL |     x.borrowed()\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "3ccb8866ca44b1bcc1d1774b31918d2e8a927814", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -48,4 +48,5 @@ LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+Some errors have detailed explanations: E0495, E0621.\n+For more information about an error, try `rustc --explain E0495`."}, {"sha": "a0b8b6b51e5a1b36572ad8567ad4cbfd94ce81b7", "filename": "src/test/ui/regions/regions-addr-of-self.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -26,3 +26,4 @@ LL |         let p: &'static mut usize = &mut self.cats_chased;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "ac5e5e9aabc5bfa41e98ed87d428c99ec2ec8b50", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -23,3 +23,4 @@ LL |             let p: &'static mut usize = &mut self.food;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "d01e991103923eda4f18b6600ab12d5a8fd461d2", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -46,3 +46,4 @@ LL | impl<'a,'b> Foo<'b> for &'a i64 {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "33a4ea01ce2e570161afde26fa16ecf1f4407221", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -21,3 +21,4 @@ LL | impl<'a> Foo for &'a i32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "7af608d2c801d422970cd76b52f1039c35ad3b4a", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -21,3 +21,4 @@ LL |     box B(&*v) as Box<dyn X>\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "ef47db18d392c06261b22c43748c310a56a1a300", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -21,3 +21,4 @@ LL |     box B(&*v) as Box<dyn X>\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "6f7466a8b0edd14f46346995e09777715d9d3698", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -25,3 +25,4 @@ LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait +\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "4d00783d180b6aeb7371c5ee6ea27459725d71ed", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -23,3 +23,4 @@ LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "b93dd0d4c57c9e06785409bd9e8e4adf359ca715", "filename": "src/test/ui/regions/regions-escape-method.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -25,3 +25,4 @@ LL |     s.f(|p| p)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "a6b165e2d444474e563ff45d1f7b5a95e3320295", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -25,3 +25,4 @@ LL |     with(|o| o)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "676e96a038b43fbed2e3124e269e4bdd2f01a410", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -30,3 +30,4 @@ LL | |         }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "1d6dbdb2c7b57f3de79825376cb789249ffde81f", "filename": "src/test/ui/regions/regions-infer-call-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -27,3 +27,4 @@ LL |     let z = with(|y| { select(x, y) });\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "bc3c06d7ff3b3242af945d07deddbcca92a4edf5", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -57,4 +57,5 @@ LL | fn nested<'x>(x: &'x isize) {\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0312`.\n+Some errors have detailed explanations: E0312, E0495.\n+For more information about an error, try `rustc --explain E0312`."}, {"sha": "c44edf1f03bc3e74a937d3ba069e72be26cc73ab", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -23,3 +23,4 @@ LL | fn bar<'a, 'b>()\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "72e47cea094c58899ad984ee586e06659437603d", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -25,3 +25,4 @@ LL |     with(|o| o)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "ce0c429ccb24713e86ea583cc416979d2282dee4", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -25,3 +25,4 @@ LL |     with(|o| o)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "be441bc48082ed16a97865d3c625d1c8696987cc", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -27,3 +27,4 @@ LL |         let y = f();\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "d88be05cb87e62aafe6422166f7a8373fa3e497b", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -61,5 +61,5 @@ LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dum\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0478.\n+Some errors have detailed explanations: E0308, E0478, E0495.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "16d27c9d961eefb8333c7aed62b393212828b743", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -111,5 +111,5 @@ LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0308, E0366, E0367.\n+Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "5480adb31015a360e0b26cd35b8434a1105360f5", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish-through-deref.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -0,0 +1,13 @@\n+use std::cell::RefCell;\n+\n+struct HasAssocMethod;\n+\n+impl HasAssocMethod {\n+    fn hello() {}\n+}\n+fn main() {\n+    let shared_state = RefCell::new(HasAssocMethod);\n+    let state = shared_state.borrow_mut();\n+    state.hello();\n+    //~^ ERROR no method named `hello` found for type `std::cell::RefMut<'_, HasAssocMethod>`\n+}"}, {"sha": "a1c0126146e73278a2f3942db88d02ef1a1cde84", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish-through-deref.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -0,0 +1,19 @@\n+error[E0599]: no method named `hello` found for type `std::cell::RefMut<'_, HasAssocMethod>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish-through-deref.rs:11:11\n+   |\n+LL |     state.hello();\n+   |     ------^^^^^\n+   |     |     |\n+   |     |     this is an associated function, not a method\n+   |     help: use associated function syntax instead: `HasAssocMethod::hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `HasAssocMethod`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish-through-deref.rs:6:5\n+   |\n+LL |     fn hello() {}\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "ef4b38de9473272d78c489e6349319622673832e", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -0,0 +1,11 @@\n+struct GenericAssocMethod<T>(T);\n+\n+impl<T> GenericAssocMethod<T> {\n+    fn default_hello() {}\n+}\n+\n+fn main() {\n+    let x = GenericAssocMethod(33i32);\n+    x.default_hello();\n+    //~^ ERROR no method named `default_hello` found for type `GenericAssocMethod<i32>`\n+}"}, {"sha": "8cfa7de08bb38f163ecc4c47a1e86280b2aa6fa4", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -0,0 +1,22 @@\n+error[E0599]: no method named `default_hello` found for type `GenericAssocMethod<i32>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:9:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | -------------------------------- method `default_hello` not found for this\n+...\n+LL |     x.default_hello();\n+   |     --^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<_>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n+   |\n+LL |     fn default_hello() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "4c63d6097758ebdf3d6cacc62d7eca4eedc65967", "filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -20,3 +20,4 @@ LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "d0475bf08c38d2bb8fe602ac25f40ae2e1af2b4b", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -24,3 +24,4 @@ LL |     Box::new(items.iter())\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "da4e8ebf9c05c0e1a80d1beb81ecc9844e44d41e", "filename": "src/test/ui/wf/wf-static-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr?ref=2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "patch": "@@ -105,5 +105,5 @@ LL |     <IndirectEvil>::static_evil(b)\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0312, E0478.\n+Some errors have detailed explanations: E0312, E0478, E0495.\n For more information about an error, try `rustc --explain E0312`."}]}