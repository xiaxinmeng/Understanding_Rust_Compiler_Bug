{"sha": "f5cde97aaeb00b8422abb0ade0e5c103252c54a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Y2RlOTdhYWViMDBiODQyMmFiYjBhZGUwZTVjMTAzMjUyYzU0YTA=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2021-03-01T19:41:22Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2021-03-01T19:41:22Z"}, "message": "Apply edits", "tree": {"sha": "e005052bb27a4154825a75a2fc236011d217718d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e005052bb27a4154825a75a2fc236011d217718d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5cde97aaeb00b8422abb0ade0e5c103252c54a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5cde97aaeb00b8422abb0ade0e5c103252c54a0", "html_url": "https://github.com/rust-lang/rust/commit/f5cde97aaeb00b8422abb0ade0e5c103252c54a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5cde97aaeb00b8422abb0ade0e5c103252c54a0/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eecba4dbf8e18ddb9f7f906af468e35a11d28a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eecba4dbf8e18ddb9f7f906af468e35a11d28a4", "html_url": "https://github.com/rust-lang/rust/commit/9eecba4dbf8e18ddb9f7f906af468e35a11d28a4"}], "stats": {"total": 105, "additions": 54, "deletions": 51}, "files": [{"sha": "cdc45fc42c286feb2817a570ff8f539fc0007a67", "filename": "crates/ide_assists/src/handlers/convert_comment_block.rs", "status": "modified", "additions": 54, "deletions": 51, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f5cde97aaeb00b8422abb0ade0e5c103252c54a0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cde97aaeb00b8422abb0ade0e5c103252c54a0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs?ref=f5cde97aaeb00b8422abb0ade0e5c103252c54a0", "patch": "@@ -1,8 +1,14 @@\n-use ast::{Comment, CommentShape};\n use itertools::Itertools;\n use std::convert::identity;\n use syntax::{\n-    ast::{self, edit::IndentLevel, CommentKind, Whitespace},\n+    ast::{\n+        self,\n+        edit::IndentLevel,\n+        Comment, CommentKind,\n+        CommentPlacement::{Inner, Outer},\n+        CommentShape::{self, Block, Line},\n+        Whitespace,\n+    },\n     AstToken, Direction, SyntaxElement, TextRange,\n };\n \n@@ -42,34 +48,37 @@ pub(crate) fn convert_comment_block(acc: &mut Assists, ctx: &AssistContext) -> O\n }\n \n fn block_to_line(acc: &mut Assists, comment: ast::Comment) -> Option<()> {\n-    let indentation = IndentLevel::from_token(comment.syntax());\n-    let line_prefix =\n-        comment_kind_prefix(CommentKind { shape: CommentShape::Line, ..comment.kind() });\n-\n-    let text = comment.text();\n-    let text = &text[comment.prefix().len()..(text.len() - \"*/\".len())].trim();\n-\n-    let lines = text.lines().peekable();\n-\n-    let indent_spaces = indentation.to_string();\n-    let output = lines\n-        .map(|l| l.trim_start_matches(&indent_spaces))\n-        .map(|l| {\n-            // Don't introduce trailing whitespace\n-            if l.is_empty() {\n-                line_prefix.to_string()\n-            } else {\n-                format!(\"{} {}\", line_prefix, l.trim_start_matches(&indent_spaces))\n-            }\n-        })\n-        .join(&format!(\"\\n{}\", indent_spaces));\n-\n     let target = comment.syntax().text_range();\n+\n     acc.add(\n         AssistId(\"block_to_line\", AssistKind::RefactorRewrite),\n         \"Replace block comment with line comments\",\n         target,\n-        |edit| edit.replace(target, output),\n+        |edit| {\n+            let indentation = IndentLevel::from_token(comment.syntax());\n+            let line_prefix =\n+                comment_kind_prefix(CommentKind { shape: CommentShape::Line, ..comment.kind() });\n+\n+            let text = comment.text();\n+            let text = &text[comment.prefix().len()..(text.len() - \"*/\".len())].trim();\n+\n+            let lines = text.lines().peekable();\n+\n+            let indent_spaces = indentation.to_string();\n+            let output = lines\n+                .map(|l| l.trim_start_matches(&indent_spaces))\n+                .map(|l| {\n+                    // Don't introduce trailing whitespace\n+                    if l.is_empty() {\n+                        line_prefix.to_string()\n+                    } else {\n+                        format!(\"{} {}\", line_prefix, l.trim_start_matches(&indent_spaces))\n+                    }\n+                })\n+                .join(&format!(\"\\n{}\", indent_spaces));\n+\n+            edit.replace(target, output)\n+        },\n     )\n }\n \n@@ -83,24 +92,27 @@ fn line_to_block(acc: &mut Assists, comment: ast::Comment) -> Option<()> {\n         comments.last().unwrap().syntax().text_range().end(),\n     );\n \n-    // We pick a single indentation level for the whole block comment based on the\n-    // comment where the assist was invoked. This will be prepended to the\n-    // contents of each line comment when they're put into the block comment.\n-    let indentation = IndentLevel::from_token(&comment.syntax());\n-\n-    let block_comment_body =\n-        comments.into_iter().map(|c| line_comment_text(indentation, c)).join(\"\\n\");\n-\n-    let block_prefix =\n-        comment_kind_prefix(CommentKind { shape: CommentShape::Block, ..comment.kind() });\n-\n-    let output = format!(\"{}\\n{}\\n{}*/\", block_prefix, block_comment_body, indentation.to_string());\n-\n     acc.add(\n         AssistId(\"line_to_block\", AssistKind::RefactorRewrite),\n         \"Replace line comments with a single block comment\",\n         target,\n-        |edit| edit.replace(target, output),\n+        |edit| {\n+            // We pick a single indentation level for the whole block comment based on the\n+            // comment where the assist was invoked. This will be prepended to the\n+            // contents of each line comment when they're put into the block comment.\n+            let indentation = IndentLevel::from_token(&comment.syntax());\n+\n+            let block_comment_body =\n+                comments.into_iter().map(|c| line_comment_text(indentation, c)).join(\"\\n\");\n+\n+            let block_prefix =\n+                comment_kind_prefix(CommentKind { shape: CommentShape::Block, ..comment.kind() });\n+\n+            let output =\n+                format!(\"{}\\n{}\\n{}*/\", block_prefix, block_comment_body, indentation.to_string());\n+\n+            edit.replace(target, output)\n+        },\n     )\n }\n \n@@ -160,27 +172,18 @@ fn relevant_line_comments(comment: &ast::Comment) -> Vec<Comment> {\n //\n // But since such comments aren't idiomatic we're okay with this.\n fn line_comment_text(indentation: IndentLevel, comm: ast::Comment) -> String {\n-    let contents = trim_one(comm.text().strip_prefix(comm.prefix()).unwrap()).to_owned();\n+    let contents_without_prefix = comm.text().strip_prefix(comm.prefix()).unwrap();\n+    let contents = contents_without_prefix.strip_prefix(' ').unwrap_or(contents_without_prefix);\n \n     // Don't add the indentation if the line is empty\n     if contents.is_empty() {\n-        contents\n+        contents.to_owned()\n     } else {\n         indentation.to_string() + &contents\n     }\n }\n \n-fn trim_one(text: &str) -> &str {\n-    if text.starts_with(' ') {\n-        &text[1..]\n-    } else {\n-        text\n-    }\n-}\n-\n fn comment_kind_prefix(ck: ast::CommentKind) -> &'static str {\n-    use ast::CommentPlacement::{Inner, Outer};\n-    use ast::CommentShape::{Block, Line};\n     match (ck.shape, ck.doc) {\n         (Line, Some(Inner)) => \"//!\",\n         (Line, Some(Outer)) => \"///\","}]}