{"sha": "09fc1af9d80ecb71c82367b6569461e645a3a946", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZmMxYWY5ZDgwZWNiNzFjODIzNjdiNjU2OTQ2MWU2NDVhM2E5NDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-07T03:12:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-07T03:12:28Z"}, "message": "Auto merge of #37506 - jseyfried:improve_shadowing_checks, r=nrc\n\nmacros: improve shadowing checks\n\nThis PR improves macro-expanded shadowing checks to work with out-of-(pre)order expansion.\n\nOut-of-order expansion became possible in #37084, so this technically a [breaking-change] for nightly.\nThe regression test from this PR is an example of code that would break.\n\nr? @nrc", "tree": {"sha": "c18e0dd416bf427f927c345d8c6bf62982298ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18e0dd416bf427f927c345d8c6bf62982298ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09fc1af9d80ecb71c82367b6569461e645a3a946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09fc1af9d80ecb71c82367b6569461e645a3a946", "html_url": "https://github.com/rust-lang/rust/commit/09fc1af9d80ecb71c82367b6569461e645a3a946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09fc1af9d80ecb71c82367b6569461e645a3a946/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2b57d3e443378c6b7855b4886e3a1fb92d8fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2b57d3e443378c6b7855b4886e3a1fb92d8fe6", "html_url": "https://github.com/rust-lang/rust/commit/8e2b57d3e443378c6b7855b4886e3a1fb92d8fe6"}, {"sha": "1e6c275b1c685454b357d9ec5357a45de333963e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6c275b1c685454b357d9ec5357a45de333963e", "html_url": "https://github.com/rust-lang/rust/commit/1e6c275b1c685454b357d9ec5357a45de333963e"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "e7d83a64e03eb97b03530a896346574442e093f9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=09fc1af9d80ecb71c82367b6569461e645a3a946", "patch": "@@ -1067,7 +1067,7 @@ pub struct Resolver<'a> {\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n     ambiguity_errors: Vec<AmbiguityError<'a>>,\n-    disallowed_shadowing: Vec<(Name, Span, LegacyScope<'a>)>,\n+    disallowed_shadowing: Vec<&'a LegacyBinding<'a>>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n@@ -1077,6 +1077,7 @@ pub struct Resolver<'a> {\n     crate_loader: &'a mut CrateLoader,\n     macro_names: FnvHashSet<Name>,\n     builtin_macros: FnvHashMap<Name, Rc<SyntaxExtension>>,\n+    lexical_macro_resolutions: Vec<(Name, LegacyScope<'a>)>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FnvHashMap<Mark, &'a InvocationData<'a>>,\n@@ -1267,6 +1268,7 @@ impl<'a> Resolver<'a> {\n             crate_loader: crate_loader,\n             macro_names: FnvHashSet(),\n             builtin_macros: FnvHashMap(),\n+            lexical_macro_resolutions: Vec::new(),\n             invocations: invocations,\n         }\n     }\n@@ -3363,12 +3365,16 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn report_shadowing_errors(&mut self) {\n+        for (name, scope) in replace(&mut self.lexical_macro_resolutions, Vec::new()) {\n+            self.resolve_macro_name(scope, name);\n+        }\n+\n         let mut reported_errors = FnvHashSet();\n-        for (name, span, scope) in replace(&mut self.disallowed_shadowing, Vec::new()) {\n-            if self.resolve_macro_name(scope, name, false).is_some() &&\n-               reported_errors.insert((name, span)) {\n-                let msg = format!(\"`{}` is already in scope\", name);\n-                self.session.struct_span_err(span, &msg)\n+        for binding in replace(&mut self.disallowed_shadowing, Vec::new()) {\n+            if self.resolve_macro_name(binding.parent, binding.name).is_some() &&\n+               reported_errors.insert((binding.name, binding.span)) {\n+                let msg = format!(\"`{}` is already in scope\", binding.name);\n+                self.session.struct_span_err(binding.span, &msg)\n                     .note(\"macro-expanded `macro_rules!`s may not shadow \\\n                            existing macros (see RFC 1560)\")\n                     .emit();"}, {"sha": "e3078a42f65388d5953b01d15cfcf4970a61c0d0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=09fc1af9d80ecb71c82367b6569461e645a3a946", "patch": "@@ -73,10 +73,10 @@ impl<'a> LegacyScope<'a> {\n }\n \n pub struct LegacyBinding<'a> {\n-    parent: LegacyScope<'a>,\n-    name: ast::Name,\n+    pub parent: LegacyScope<'a>,\n+    pub name: ast::Name,\n     ext: Rc<SyntaxExtension>,\n-    span: Span,\n+    pub span: Span,\n }\n \n impl<'a> base::Resolver for Resolver<'a> {\n@@ -171,7 +171,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         if let LegacyScope::Expansion(parent) = invocation.legacy_scope.get() {\n             invocation.legacy_scope.set(LegacyScope::simplify_expansion(parent));\n         }\n-        self.resolve_macro_name(invocation.legacy_scope.get(), name, true).ok_or_else(|| {\n+        self.resolve_macro_name(invocation.legacy_scope.get(), name).ok_or_else(|| {\n             if force {\n                 let msg = format!(\"macro undefined: '{}!'\", name);\n                 let mut err = self.session.struct_span_err(path.span, &msg);\n@@ -186,17 +186,18 @@ impl<'a> base::Resolver for Resolver<'a> {\n }\n \n impl<'a> Resolver<'a> {\n-    pub fn resolve_macro_name(&mut self,\n-                              mut scope: LegacyScope<'a>,\n-                              name: ast::Name,\n-                              record_used: bool)\n+    pub fn resolve_macro_name(&mut self, mut scope: LegacyScope<'a>, name: ast::Name)\n                               -> Option<Rc<SyntaxExtension>> {\n+        let mut possible_time_travel = None;\n         let mut relative_depth: u32 = 0;\n         loop {\n             scope = match scope {\n                 LegacyScope::Empty => break,\n                 LegacyScope::Expansion(invocation) => {\n                     if let LegacyScope::Empty = invocation.expansion.get() {\n+                        if possible_time_travel.is_none() {\n+                            possible_time_travel = Some(scope);\n+                        }\n                         invocation.legacy_scope.get()\n                     } else {\n                         relative_depth += 1;\n@@ -209,8 +210,11 @@ impl<'a> Resolver<'a> {\n                 }\n                 LegacyScope::Binding(binding) => {\n                     if binding.name == name {\n-                        if record_used && relative_depth > 0 {\n-                            self.disallowed_shadowing.push((name, binding.span, binding.parent));\n+                        if let Some(scope) = possible_time_travel {\n+                            // Check for disallowed shadowing later\n+                            self.lexical_macro_resolutions.push((name, scope));\n+                        } else if relative_depth > 0 {\n+                            self.disallowed_shadowing.push(binding);\n                         }\n                         return Some(binding.ext.clone());\n                     }\n@@ -219,6 +223,9 @@ impl<'a> Resolver<'a> {\n             };\n         }\n \n+        if let Some(scope) = possible_time_travel {\n+            self.lexical_macro_resolutions.push((name, scope));\n+        }\n         self.builtin_macros.get(&name).cloned()\n     }\n "}, {"sha": "6b6b14a896b299efde61fa1a3f05415e51ff3857", "filename": "src/test/compile-fail/auxiliary/define_macro.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdefine_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdefine_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdefine_macro.rs?ref=09fc1af9d80ecb71c82367b6569461e645a3a946", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! define_macro {\n+    ($i:ident) => {\n+        macro_rules! $i { () => {} }\n+    }\n+}"}, {"sha": "1fafaf85112be1e3c4ae42601e0a46a2743192b6", "filename": "src/test/compile-fail/out-of-order-shadowing.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Ftest%2Fcompile-fail%2Fout-of-order-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09fc1af9d80ecb71c82367b6569461e645a3a946/src%2Ftest%2Fcompile-fail%2Fout-of-order-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fout-of-order-shadowing.rs?ref=09fc1af9d80ecb71c82367b6569461e645a3a946", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:define_macro.rs\n+// error-pattern: `bar` is already in scope\n+\n+macro_rules! bar { () => {} }\n+define_macro!(bar);\n+bar!();\n+\n+macro_rules! m { () => { #[macro_use] extern crate define_macro; } }\n+m!();\n+\n+fn main() {}"}]}