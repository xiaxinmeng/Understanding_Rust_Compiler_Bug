{"sha": "26602ddff475ef75ed94803b05217a761a7f5523", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NjAyZGRmZjQ3NWVmNzVlZDk0ODAzYjA1MjE3YTc2MWE3ZjU1MjM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-08T08:59:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-08T08:59:02Z"}, "message": "Merge pull request #3336 from HMPerson1/clone_on_copy_deref\n\nFix `clone_on_copy` not detecting derefs sometimes", "tree": {"sha": "809c2df0af6f5350243c00bb54127e5cf57425de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/809c2df0af6f5350243c00bb54127e5cf57425de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26602ddff475ef75ed94803b05217a761a7f5523", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcC4fWCRBK7hj4Ov3rIwAAdHIIALGfnjOOpk7tf+POfUfRdN4P\nkgP0eeJYpt/Jplc3mtaZ8gM6hTYkSuwW1/3j9pcP3db9Q1YBICAJ5XdpQbVvEUTO\n3oTxDb55HrvXfYGmr1/XCze9KeABn4wt9h2/dBbRgJ5c3C9VkW5XRoCDhTQ9U+aO\nfzfuxpjq4swwVbTnw5clO5oqmHO2RBq7cVURtHClzzuVaKC7DTPEzM3Q2kFzaUdE\nIIBnTMpxJnTsMShl1LZ4X2gNrp/tYyN+SOGjcHJvBkxXtHKS+9WZZjU0hTEs79n+\nqLmUTJUf9ClWJ/mqic5qHpTe/UK2fokdk8+fvucuryhwOl2qH/VKjsj3HHQuAA0=\n=Xryb\n-----END PGP SIGNATURE-----\n", "payload": "tree 809c2df0af6f5350243c00bb54127e5cf57425de\nparent 4884c2fc2ef2b5ae14a83ad1b41644553089be07\nparent 2a9dec681fe8a7bd1985790fc70f671975c68da0\nauthor Philipp Hansch <dev@phansch.net> 1544259542 +0100\ncommitter GitHub <noreply@github.com> 1544259542 +0100\n\nMerge pull request #3336 from HMPerson1/clone_on_copy_deref\n\nFix `clone_on_copy` not detecting derefs sometimes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26602ddff475ef75ed94803b05217a761a7f5523", "html_url": "https://github.com/rust-lang/rust/commit/26602ddff475ef75ed94803b05217a761a7f5523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26602ddff475ef75ed94803b05217a761a7f5523/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4884c2fc2ef2b5ae14a83ad1b41644553089be07", "url": "https://api.github.com/repos/rust-lang/rust/commits/4884c2fc2ef2b5ae14a83ad1b41644553089be07", "html_url": "https://github.com/rust-lang/rust/commit/4884c2fc2ef2b5ae14a83ad1b41644553089be07"}, {"sha": "2a9dec681fe8a7bd1985790fc70f671975c68da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9dec681fe8a7bd1985790fc70f671975c68da0", "html_url": "https://github.com/rust-lang/rust/commit/2a9dec681fe8a7bd1985790fc70f671975c68da0"}], "stats": {"total": 114, "additions": 87, "deletions": 27}, "files": [{"sha": "b5c31bf5dbdb04af45dbe74a662666632b70ef65", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26602ddff475ef75ed94803b05217a761a7f5523/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26602ddff475ef75ed94803b05217a761a7f5523/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=26602ddff475ef75ed94803b05217a761a7f5523", "patch": "@@ -1332,7 +1332,8 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n     if is_copy(cx, ty) {\n         let snip;\n         if let Some(snippet) = sugg::Sugg::hir_opt(cx, arg) {\n-            if let ty::Ref(..) = cx.tables.expr_ty(arg).sty {\n+            // x.clone() might have dereferenced x, possibly through Deref impls\n+            if cx.tables.expr_ty(arg) != ty {\n                 let parent = cx.tcx.hir.get_parent_node(expr.id);\n                 match cx.tcx.hir.get(parent) {\n                     hir::Node::Expr(parent) => match parent.node {\n@@ -1354,7 +1355,18 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                     },\n                     _ => {},\n                 }\n-                snip = Some((\"try dereferencing it\", format!(\"{}\", snippet.deref())));\n+\n+                let deref_count = cx.tables.expr_adjustments(arg).iter()\n+                    .filter(|adj| {\n+                        if let ty::adjustment::Adjust::Deref(_) = adj.kind {\n+                            true\n+                        } else {\n+                            false\n+                        }\n+                    })\n+                    .count();\n+                let derefs: String = iter::repeat('*').take(deref_count).collect();\n+                snip = Some((\"try dereferencing it\", format!(\"{}{}\", derefs, snippet)));\n             } else {\n                 snip = Some((\"try removing the `clone` call\", format!(\"{}\", snippet)));\n             }"}, {"sha": "28cad1d881fd9e0d2db98aacb4d66486e1014aba", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/26602ddff475ef75ed94803b05217a761a7f5523/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26602ddff475ef75ed94803b05217a761a7f5523/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=26602ddff475ef75ed94803b05217a761a7f5523", "patch": "@@ -13,6 +13,7 @@\n #![warn(clippy::clone_on_ref_ptr)]\n #![allow(unused)]\n \n+use std::cell::RefCell;\n use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::rc::{self, Rc};\n@@ -30,6 +31,9 @@ fn clone_on_copy() {\n     vec![1].clone(); // ok, not a Copy type\n     Some(vec![1]).clone(); // ok, not a Copy type\n     (&42).clone();\n+\n+    let rc = RefCell::new(0);\n+    rc.borrow().clone();\n }\n \n fn clone_on_ref_ptr() {\n@@ -75,3 +79,35 @@ fn iter_clone_collect() {\n     let v3 : HashSet<isize> = v.iter().cloned().collect();\n     let v4 : VecDeque<isize> = v.iter().cloned().collect();\n }\n+\n+mod many_derefs {\n+    struct A;\n+    struct B;\n+    struct C;\n+    struct D;\n+    #[derive(Copy, Clone)]\n+    struct E;\n+\n+    macro_rules! impl_deref {\n+        ($src:ident, $dst:ident) => {\n+            impl std::ops::Deref for $src {\n+                type Target = $dst;\n+                fn deref(&self) -> &Self::Target { &$dst }\n+            }\n+        }\n+    }\n+\n+    impl_deref!(A, B);\n+    impl_deref!(B, C);\n+    impl_deref!(C, D);\n+    impl std::ops::Deref for D {\n+        type Target = &'static E;\n+        fn deref(&self) -> &Self::Target { &&E }\n+    }\n+\n+    fn go1() {\n+        let a = A;\n+        let _: E = a.clone();\n+        let _: E = *****a;\n+    }\n+}"}, {"sha": "5dcd5cae4633b04a29781aeead7d4e5d78319c2c", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/26602ddff475ef75ed94803b05217a761a7f5523/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26602ddff475ef75ed94803b05217a761a7f5523/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=26602ddff475ef75ed94803b05217a761a7f5523", "patch": "@@ -1,84 +1,96 @@\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:28:5\n+  --> $DIR/unnecessary_clone.rs:29:5\n    |\n-28 |     42.clone();\n+29 |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:32:5\n+  --> $DIR/unnecessary_clone.rs:33:5\n    |\n-32 |     (&42).clone();\n+33 |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:36:5\n+   |\n+36 |     rc.borrow().clone();\n+   |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n+\n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:42:5\n+  --> $DIR/unnecessary_clone.rs:46:5\n    |\n-42 |     rc.clone();\n+46 |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:45:5\n+  --> $DIR/unnecessary_clone.rs:49:5\n    |\n-45 |     arc.clone();\n+49 |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:48:5\n+  --> $DIR/unnecessary_clone.rs:52:5\n    |\n-48 |     rcweak.clone();\n+52 |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:51:5\n+  --> $DIR/unnecessary_clone.rs:55:5\n    |\n-51 |     arc_weak.clone();\n+55 |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:55:29\n+  --> $DIR/unnecessary_clone.rs:59:29\n    |\n-55 |     let _: Arc<SomeTrait> = x.clone();\n+59 |     let _: Arc<SomeTrait> = x.clone();\n    |                             ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:59:5\n+  --> $DIR/unnecessary_clone.rs:63:5\n    |\n-59 |     t.clone();\n+63 |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:61:5\n+  --> $DIR/unnecessary_clone.rs:65:5\n    |\n-61 |     Some(t).clone();\n+65 |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:67:22\n+  --> $DIR/unnecessary_clone.rs:71:22\n    |\n-67 |     let z: &Vec<_> = y.clone();\n+71 |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n    = note: #[deny(clippy::clone_double_ref)] on by default\n help: try dereferencing it\n    |\n-67 |     let z: &Vec<_> = &(*y).clone();\n+71 |     let z: &Vec<_> = &(*y).clone();\n    |                      ^^^^^^^^^^^^^\n help: or try being explicit about what type to clone\n    |\n-67 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n+71 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:74:27\n+  --> $DIR/unnecessary_clone.rs:78:27\n    |\n-74 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+78 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 11 previous errors\n+error: using `clone` on a `Copy` type\n+   --> $DIR/unnecessary_clone.rs:110:20\n+    |\n+110 |         let _: E = a.clone();\n+    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n+\n+error: aborting due to 13 previous errors\n "}]}