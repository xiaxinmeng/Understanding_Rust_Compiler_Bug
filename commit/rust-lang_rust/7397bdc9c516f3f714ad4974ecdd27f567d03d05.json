{"sha": "7397bdc9c516f3f714ad4974ecdd27f567d03d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOTdiZGM5YzUxNmYzZjcxNGFkNDk3NGVjZGQyN2Y1NjdkMDNkMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-21T14:37:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-21T14:37:53Z"}, "message": "Auto merge of #24620 - pczarn:model-lexer-issues, r=cmr\n\nFixes #15679\r\nFixes #15878\r\nFixes #15882\r\nCloses #15883", "tree": {"sha": "c5edaad9913aa0f093c8f4f090e2c6305cfa1f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5edaad9913aa0f093c8f4f090e2c6305cfa1f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7397bdc9c516f3f714ad4974ecdd27f567d03d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7397bdc9c516f3f714ad4974ecdd27f567d03d05", "html_url": "https://github.com/rust-lang/rust/commit/7397bdc9c516f3f714ad4974ecdd27f567d03d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7397bdc9c516f3f714ad4974ecdd27f567d03d05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77acda1c8ee75f9eb923ddd811ee591951b2d43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/77acda1c8ee75f9eb923ddd811ee591951b2d43f", "html_url": "https://github.com/rust-lang/rust/commit/77acda1c8ee75f9eb923ddd811ee591951b2d43f"}, {"sha": "13bc8afa4b56e8d7b012f35a35a11087739abf15", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bc8afa4b56e8d7b012f35a35a11087739abf15", "html_url": "https://github.com/rust-lang/rust/commit/13bc8afa4b56e8d7b012f35a35a11087739abf15"}], "stats": {"total": 1161, "additions": 982, "deletions": 179}, "files": [{"sha": "6e0cf17a88040beac190bd0e4293442d1b3f1623", "filename": "src/grammar/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FREADME.md?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -12,7 +12,7 @@ javac *.java\n rustc -O verify.rs\n for file in ../*/**.rs; do\n     echo $file;\n-    grun RustLexer tokens -tokens < $file | ./verify $file RustLexer.tokens || break\n+    grun RustLexer tokens -tokens < \"$file\" | ./verify \"$file\" RustLexer.tokens || break\n done\n ```\n "}, {"sha": "3d8f3aeb28fa7cbcf60fc1b0f515f15b6b37d245", "filename": "src/grammar/RustLexer.g4", "status": "modified", "additions": 49, "deletions": 71, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -1,5 +1,12 @@\n lexer grammar RustLexer;\n \n+@lexer::members {\n+  public boolean is_at(int pos) {\n+    return _input.index() == pos;\n+  }\n+}\n+\n+\n tokens {\n     EQ, LT, LE, EQEQ, NE, GE, GT, ANDAND, OROR, NOT, TILDE, PLUT,\n     MINUS, STAR, SLASH, PERCENT, CARET, AND, OR, SHL, SHR, BINOP,\n@@ -8,14 +15,10 @@ tokens {\n     LBRACE, RBRACE, POUND, DOLLAR, UNDERSCORE, LIT_CHAR,\n     LIT_INTEGER, LIT_FLOAT, LIT_STR, LIT_STR_RAW, LIT_BINARY,\n     LIT_BINARY_RAW, IDENT, LIFETIME, WHITESPACE, DOC_COMMENT,\n-    COMMENT\n+    COMMENT, SHEBANG\n }\n \n-/* Note: due to antlr limitations, we can't represent XID_start and\n- * XID_continue properly. ASCII-only substitute. */\n-\n-fragment XID_start : [_a-zA-Z] ;\n-fragment XID_continue : [_a-zA-Z0-9] ;\n+import xidstart , xidcontinue;\n \n \n /* Expression-operator symbols */\n@@ -90,94 +93,63 @@ fragment CHAR_ESCAPE\n   | [xX] HEXIT HEXIT\n   | 'u' HEXIT HEXIT HEXIT HEXIT\n   | 'U' HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT\n+  | 'u{' HEXIT '}'\n+  | 'u{' HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT '}'\n   ;\n \n fragment SUFFIX\n   : IDENT\n   ;\n \n+fragment INTEGER_SUFFIX\n+  : { _input.LA(1) != 'e' && _input.LA(1) != 'E' }? SUFFIX\n+  ;\n+\n LIT_CHAR\n-  : '\\'' ( '\\\\' CHAR_ESCAPE | ~[\\\\'\\n\\t\\r] ) '\\'' SUFFIX?\n+  : '\\'' ( '\\\\' CHAR_ESCAPE\n+         | ~[\\\\'\\n\\t\\r]\n+         | '\\ud800' .. '\\udbff' '\\udc00' .. '\\udfff'\n+         )\n+    '\\'' SUFFIX?\n   ;\n \n LIT_BYTE\n-  : 'b\\'' ( '\\\\' ( [xX] HEXIT HEXIT | [nrt\\\\'\"0] ) | ~[\\\\'\\n\\t\\r] ) '\\'' SUFFIX?\n+  : 'b\\'' ( '\\\\' ( [xX] HEXIT HEXIT\n+                 | [nrt\\\\'\"0] )\n+          | ~[\\\\'\\n\\t\\r] '\\udc00'..'\\udfff'?\n+          )\n+    '\\'' SUFFIX?\n   ;\n \n LIT_INTEGER\n-  : [0-9][0-9_]* SUFFIX?\n-  | '0b' [01][01_]* SUFFIX?\n-  | '0o' [0-7][0-7_]* SUFFIX?\n-  | '0x' [0-9a-fA-F][0-9a-fA-F_]* SUFFIX?\n+\n+  : [0-9][0-9_]* INTEGER_SUFFIX?\n+  | '0b' [01_]+ INTEGER_SUFFIX?\n+  | '0o' [0-7_]+ INTEGER_SUFFIX?\n+  | '0x' [0-9a-fA-F_]+ INTEGER_SUFFIX?\n   ;\n \n LIT_FLOAT\n   : [0-9][0-9_]* ('.' {\n-        /* dot followed by another dot is a range, no float */\n+        /* dot followed by another dot is a range, not a float */\n         _input.LA(1) != '.' &&\n-        /* dot followed by an identifier is an integer with a function call, no float */\n+        /* dot followed by an identifier is an integer with a function call, not a float */\n         _input.LA(1) != '_' &&\n-        _input.LA(1) != 'a' &&\n-        _input.LA(1) != 'b' &&\n-        _input.LA(1) != 'c' &&\n-        _input.LA(1) != 'd' &&\n-        _input.LA(1) != 'e' &&\n-        _input.LA(1) != 'f' &&\n-        _input.LA(1) != 'g' &&\n-        _input.LA(1) != 'h' &&\n-        _input.LA(1) != 'i' &&\n-        _input.LA(1) != 'j' &&\n-        _input.LA(1) != 'k' &&\n-        _input.LA(1) != 'l' &&\n-        _input.LA(1) != 'm' &&\n-        _input.LA(1) != 'n' &&\n-        _input.LA(1) != 'o' &&\n-        _input.LA(1) != 'p' &&\n-        _input.LA(1) != 'q' &&\n-        _input.LA(1) != 'r' &&\n-        _input.LA(1) != 's' &&\n-        _input.LA(1) != 't' &&\n-        _input.LA(1) != 'u' &&\n-        _input.LA(1) != 'v' &&\n-        _input.LA(1) != 'w' &&\n-        _input.LA(1) != 'x' &&\n-        _input.LA(1) != 'y' &&\n-        _input.LA(1) != 'z' &&\n-        _input.LA(1) != 'A' &&\n-        _input.LA(1) != 'B' &&\n-        _input.LA(1) != 'C' &&\n-        _input.LA(1) != 'D' &&\n-        _input.LA(1) != 'E' &&\n-        _input.LA(1) != 'F' &&\n-        _input.LA(1) != 'G' &&\n-        _input.LA(1) != 'H' &&\n-        _input.LA(1) != 'I' &&\n-        _input.LA(1) != 'J' &&\n-        _input.LA(1) != 'K' &&\n-        _input.LA(1) != 'L' &&\n-        _input.LA(1) != 'M' &&\n-        _input.LA(1) != 'N' &&\n-        _input.LA(1) != 'O' &&\n-        _input.LA(1) != 'P' &&\n-        _input.LA(1) != 'Q' &&\n-        _input.LA(1) != 'R' &&\n-        _input.LA(1) != 'S' &&\n-        _input.LA(1) != 'T' &&\n-        _input.LA(1) != 'U' &&\n-        _input.LA(1) != 'V' &&\n-        _input.LA(1) != 'W' &&\n-        _input.LA(1) != 'X' &&\n-        _input.LA(1) != 'Y' &&\n-        _input.LA(1) != 'Z'\n+        !(_input.LA(1) >= 'a' && _input.LA(1) <= 'z') &&\n+        !(_input.LA(1) >= 'A' && _input.LA(1) <= 'Z')\n   }? | ('.' [0-9][0-9_]*)? ([eE] [-+]? [0-9][0-9_]*)? SUFFIX?)\n   ;\n \n LIT_STR\n   : '\"' ('\\\\\\n' | '\\\\\\r\\n' | '\\\\' CHAR_ESCAPE | .)*? '\"' SUFFIX?\n   ;\n \n-LIT_BINARY : 'b' LIT_STR SUFFIX?;\n-LIT_BINARY_RAW : 'rb' LIT_STR_RAW SUFFIX?;\n+LIT_BINARY : 'b' LIT_STR ;\n+LIT_BINARY_RAW : 'b' LIT_STR_RAW ;\n \n /* this is a bit messy */\n \n@@ -197,21 +169,27 @@ LIT_STR_RAW\n \n QUESTION : '?';\n \n-IDENT : XID_start XID_continue* ;\n+IDENT : XID_Start XID_Continue* ;\n \n fragment QUESTION_IDENTIFIER : QUESTION? IDENT;\n \n LIFETIME : '\\'' IDENT ;\n \n WHITESPACE : [ \\r\\n\\t]+ ;\n \n-UNDOC_COMMENT     : '////' ~[\\r\\n]* -> type(COMMENT) ;\n+UNDOC_COMMENT     : '////' ~[\\n]* -> type(COMMENT) ;\n YESDOC_COMMENT    : '///' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n OUTER_DOC_COMMENT : '//!' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n-LINE_COMMENT      : '//' ~[\\r\\n]* -> type(COMMENT) ;\n+LINE_COMMENT      : '//' ( ~[/\\n] ~[\\n]* )? -> type(COMMENT) ;\n \n DOC_BLOCK_COMMENT\n   : ('/**' ~[*] | '/*!') (DOC_BLOCK_COMMENT | .)*? '*/' -> type(DOC_COMMENT)\n   ;\n \n BLOCK_COMMENT : '/*' (BLOCK_COMMENT | .)*? '*/' -> type(COMMENT) ;\n+\n+/* these appear at the beginning of a file */\n+\n+SHEBANG : '#!' { is_at(2) && _input.LA(1) != '[' }? ~[\\r\\n]* -> type(SHEBANG) ;\n+\n+UTF8_BOM : '\\ufeff' { is_at(1) }? -> skip ;"}, {"sha": "560b6b72471e186c8f31dd421b60b95d94fd76ef", "filename": "src/grammar/check.sh", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -18,13 +18,13 @@ failed=0\n skipped=0\n \n check() {\n-    grep --silent \"// ignore-lexer-test\" $1;\n+    grep --silent \"// ignore-lexer-test\" \"$1\";\n \n     # if it's *not* found...\n     if [ $? -eq 1 ]; then\n         cd $2 # This `cd` is so java will pick up RustLexer.class. I couldn't\n-        # figure out how to wrangle the CLASSPATH, just adding build/grammr didn't\n-        # seem to have anny effect.\n+        # figure out how to wrangle the CLASSPATH, just adding build/grammar\n+        # didn't seem to have any effect.\n         if $3 RustLexer tokens -tokens < $1 | $4 $1 $5; then\n             echo \"pass: $1\"\n             passed=`expr $passed + 1`\n@@ -39,7 +39,7 @@ check() {\n }\n \n for file in $(find $1 -iname '*.rs' ! -path '*/test/compile-fail*'); do\n-    check $file $2 $3 $4 $5\n+    check \"$file\" $2 $3 $4 $5\n done\n \n printf \"\\ntest result: \""}, {"sha": "dec797747c270a67353294b1251ac5c45082b039", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 76, "deletions": 28, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(plugin)]\n+#![feature(plugin, rustc_private, str_char, collections)]\n \n extern crate syntax;\n extern crate rustc;\n@@ -17,14 +17,19 @@ extern crate rustc;\n extern crate log;\n \n use std::collections::HashMap;\n-use std::io::File;\n+use std::env;\n+use std::fs::File;\n+use std::io::{BufRead, Read};\n+use std::path::Path;\n \n use syntax::parse;\n use syntax::parse::lexer;\n use rustc::session::{self, config};\n \n use syntax::ast;\n use syntax::ast::Name;\n+use syntax::codemap;\n+use syntax::codemap::Pos;\n use syntax::parse::token;\n use syntax::parse::lexer::TokenAndSpan;\n \n@@ -105,6 +110,7 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"LIT_BINARY\"        => token::Literal(token::Binary(Name(0)), None),\n             \"LIT_BINARY_RAW\"    => token::Literal(token::BinaryRaw(Name(0), 0), None),\n             \"QUESTION\"          => token::Question,\n+            \"SHEBANG\"           => token::Shebang(Name(0)),\n             _                   => continue,\n         };\n \n@@ -163,23 +169,26 @@ fn count(lit: &str) -> usize {\n     lit.chars().take_while(|c| *c == '#').count()\n }\n \n-fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>) -> TokenAndSpan {\n+fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_pairs_pos: &[usize],\n+                     has_bom: bool)\n+                     -> TokenAndSpan {\n     // old regex:\n     // \\[@(?P<seq>\\d+),(?P<start>\\d+):(?P<end>\\d+)='(?P<content>.+?)',<(?P<toknum>-?\\d+)>,\\d+:\\d+]\n-    let start = s.find_str(\"[@\").unwrap();\n-    let comma = start + s[start..].find_str(\",\").unwrap();\n-    let colon = comma + s[comma..].find_str(\":\").unwrap();\n-    let content_start = colon + s[colon..].find_str(\"='\").unwrap();\n-    let content_end = content_start + s[content_start..].find_str(\"',<\").unwrap();\n-    let toknum_end = content_end + s[content_end..].find_str(\">,\").unwrap();\n+    let start = s.find(\"[@\").unwrap();\n+    let comma = start + s[start..].find(\",\").unwrap();\n+    let colon = comma + s[comma..].find(\":\").unwrap();\n+    let content_start = colon + s[colon..].find(\"='\").unwrap();\n+    // Use rfind instead of find, because we don't want to stop at the content\n+    let content_end = content_start + s[content_start..].rfind(\"',<\").unwrap();\n+    let toknum_end = content_end + s[content_end..].find(\">,\").unwrap();\n \n     let start = &s[comma + 1 .. colon];\n     let end = &s[colon + 1 .. content_start];\n     let content = &s[content_start + 2 .. content_end];\n     let toknum = &s[content_end + 3 .. toknum_end];\n \n-    let proto_tok = tokens.get(toknum).expect(format!(\"didn't find token {:?} in the map\",\n-                                                              toknum));\n+    let not_found = format!(\"didn't find token {:?} in the map\", toknum);\n+    let proto_tok = tokens.get(toknum).expect(&not_found[..]);\n \n     let nm = parse::token::intern(content);\n \n@@ -205,17 +214,25 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>) -> TokenAn\n         ref t => t.clone()\n     };\n \n-    let offset = if real_tok == token::Eof\n- {\n+    let start_offset = if real_tok == token::Eof {\n         1\n     } else {\n         0\n     };\n \n-    let sp = syntax::codemap::Span {\n-        lo: syntax::codemap::BytePos(start.parse::<u32>().unwrap() - offset),\n-        hi: syntax::codemap::BytePos(end.parse::<u32>().unwrap() + 1),\n-        expn_id: syntax::codemap::NO_EXPANSION\n+    let offset = if has_bom { 1 } else { 0 };\n+\n+    let mut lo = start.parse::<u32>().unwrap() - start_offset - offset;\n+    let mut hi = end.parse::<u32>().unwrap() + 1 - offset;\n+\n+    // Adjust the span: For each surrogate pair already encountered, subtract one position.\n+    lo -= surrogate_pairs_pos.binary_search(&(lo as usize)).unwrap_or_else(|x| x) as u32;\n+    hi -= surrogate_pairs_pos.binary_search(&(hi as usize)).unwrap_or_else(|x| x) as u32;\n+\n+    let sp = codemap::Span {\n+        lo: codemap::BytePos(lo),\n+        hi: codemap::BytePos(hi),\n+        expn_id: codemap::NO_EXPANSION\n     };\n \n     TokenAndSpan {\n@@ -234,39 +251,70 @@ fn tok_cmp(a: &token::Token, b: &token::Token) -> bool {\n     }\n }\n \n+fn span_cmp(antlr_sp: codemap::Span, rust_sp: codemap::Span, cm: &codemap::CodeMap) -> bool {\n+    antlr_sp.expn_id == rust_sp.expn_id &&\n+        antlr_sp.lo.to_usize() == cm.bytepos_to_file_charpos(rust_sp.lo).to_usize() &&\n+        antlr_sp.hi.to_usize() == cm.bytepos_to_file_charpos(rust_sp.hi).to_usize()\n+}\n+\n fn main() {\n     fn next(r: &mut lexer::StringReader) -> TokenAndSpan {\n         use syntax::parse::lexer::Reader;\n         r.next_token()\n     }\n \n-    let args = std::os::args();\n+    let mut args = env::args().skip(1);\n+    let filename = args.next().unwrap();\n+    if filename.find(\"parse-fail\").is_some() {\n+        return;\n+    }\n+\n+    // Rust's lexer\n+    let mut code = String::new();\n+    File::open(&Path::new(&filename)).unwrap().read_to_string(&mut code).unwrap();\n \n-    let mut token_file = File::open(&Path::new(args[2]));\n-    let token_map = parse_token_list(token_file.read_to_string().unwrap());\n+    let surrogate_pairs_pos: Vec<usize> = code.chars().enumerate()\n+                                                     .filter(|&(_, c)| c as usize > 0xFFFF)\n+                                                     .map(|(n, _)| n)\n+                                                     .enumerate()\n+                                                     .map(|(x, n)| x + n)\n+                                                     .collect();\n \n-    let mut stdin = std::io::stdin();\n-    let mut lock = stdin.lock();\n-    let lines = lock.lines();\n-    let mut antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n-                                                                   &token_map));\n+    let has_bom = code.starts_with(\"\\u{feff}\");\n+\n+    debug!(\"Pairs: {:?}\", surrogate_pairs_pos);\n \n-    let code = File::open(&Path::new(args[1])).unwrap().read_to_string().unwrap();\n     let options = config::basic_options();\n     let session = session::build_session(options, None,\n                                          syntax::diagnostics::registry::Registry::new(&[]));\n     let filemap = parse::string_to_filemap(&session.parse_sess,\n                                            code,\n                                            String::from_str(\"<n/a>\"));\n     let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n+    let ref cm = lexer.span_diagnostic.cm;\n+\n+    // ANTLR\n+    let mut token_file = File::open(&Path::new(&args.next().unwrap())).unwrap();\n+    let mut token_list = String::new();\n+    token_file.read_to_string(&mut token_list).unwrap();\n+    let token_map = parse_token_list(&token_list[..]);\n+\n+    let stdin = std::io::stdin();\n+    let lock = stdin.lock();\n+    let lines = lock.lines();\n+    let antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n+                                                       &token_map,\n+                                                       &surrogate_pairs_pos[..],\n+                                                       has_bom));\n \n     for antlr_tok in antlr_tokens {\n         let rustc_tok = next(&mut lexer);\n         if rustc_tok.tok == token::Eof && antlr_tok.tok == token::Eof {\n             continue\n         }\n \n-        assert!(rustc_tok.sp == antlr_tok.sp, \"{:?} and {:?} have different spans\", rustc_tok,\n+        assert!(span_cmp(antlr_tok.sp, rustc_tok.sp, cm), \"{:?} and {:?} have different spans\",\n+                rustc_tok,\n                 antlr_tok);\n \n         macro_rules! matches {\n@@ -282,7 +330,7 @@ fn main() {\n                         }\n                         _ => panic!(\"{:?} is not {:?}\", antlr_tok, rustc_tok)\n                     },)*\n-                    ref c => assert!(c == &antlr_tok.tok, \"{:?} is not {:?}\", rustc_tok, antlr_tok)\n+                    ref c => assert!(c == &antlr_tok.tok, \"{:?} is not {:?}\", antlr_tok, rustc_tok)\n                 }\n             )\n         }"}, {"sha": "f3a1a3b40f99a382f17d8246b0f03c96eb7f49c3", "filename": "src/grammar/xidcontinue.g4", "status": "added", "additions": 473, "deletions": 0, "changes": 473, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fxidcontinue.g4", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fxidcontinue.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fxidcontinue.g4?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -0,0 +1,473 @@\n+lexer grammar Xidcontinue;\n+\n+fragment XID_Continue:\n+      '\\u0030' .. '\\u0039'\n+    | '\\u0041' .. '\\u005a'\n+    | '\\u005f'\n+    | '\\u0061' .. '\\u007a'\n+    | '\\u00aa'\n+    | '\\u00b5'\n+    | '\\u00b7'\n+    | '\\u00ba'\n+    | '\\u00c0' .. '\\u00d6'\n+    | '\\u00d8' .. '\\u00f6'\n+    | '\\u00f8' .. '\\u0236'\n+    | '\\u0250' .. '\\u02c1'\n+    | '\\u02c6' .. '\\u02d1'\n+    | '\\u02e0' .. '\\u02e4'\n+    | '\\u02ee'\n+    | '\\u0300' .. '\\u0357'\n+    | '\\u035d' .. '\\u036f'\n+    | '\\u0386'\n+    | '\\u0388' .. '\\u038a'\n+    | '\\u038c'\n+    | '\\u038e' .. '\\u03a1'\n+    | '\\u03a3' .. '\\u03ce'\n+    | '\\u03d0' .. '\\u03f5'\n+    | '\\u03f7' .. '\\u03fb'\n+    | '\\u0400' .. '\\u0481'\n+    | '\\u0483' .. '\\u0486'\n+    | '\\u048a' .. '\\u04ce'\n+    | '\\u04d0' .. '\\u04f5'\n+    | '\\u04f8' .. '\\u04f9'\n+    | '\\u0500' .. '\\u050f'\n+    | '\\u0531' .. '\\u0556'\n+    | '\\u0559'\n+    | '\\u0561' .. '\\u0587'\n+    | '\\u0591' .. '\\u05a1'\n+    | '\\u05a3' .. '\\u05b9'\n+    | '\\u05bb' .. '\\u05bd'\n+    | '\\u05bf'\n+    | '\\u05c1' .. '\\u05c2'\n+    | '\\u05c4'\n+    | '\\u05d0' .. '\\u05ea'\n+    | '\\u05f0' .. '\\u05f2'\n+    | '\\u0610' .. '\\u0615'\n+    | '\\u0621' .. '\\u063a'\n+    | '\\u0640' .. '\\u0658'\n+    | '\\u0660' .. '\\u0669'\n+    | '\\u066e' .. '\\u06d3'\n+    | '\\u06d5' .. '\\u06dc'\n+    | '\\u06df' .. '\\u06e8'\n+    | '\\u06ea' .. '\\u06fc'\n+    | '\\u06ff'\n+    | '\\u0710' .. '\\u074a'\n+    | '\\u074d' .. '\\u074f'\n+    | '\\u0780' .. '\\u07b1'\n+    | '\\u0901' .. '\\u0939'\n+    | '\\u093c' .. '\\u094d'\n+    | '\\u0950' .. '\\u0954'\n+    | '\\u0958' .. '\\u0963'\n+    | '\\u0966' .. '\\u096f'\n+    | '\\u0981' .. '\\u0983'\n+    | '\\u0985' .. '\\u098c'\n+    | '\\u098f' .. '\\u0990'\n+    | '\\u0993' .. '\\u09a8'\n+    | '\\u09aa' .. '\\u09b0'\n+    | '\\u09b2'\n+    | '\\u09b6' .. '\\u09b9'\n+    | '\\u09bc' .. '\\u09c4'\n+    | '\\u09c7' .. '\\u09c8'\n+    | '\\u09cb' .. '\\u09cd'\n+    | '\\u09d7'\n+    | '\\u09dc' .. '\\u09dd'\n+    | '\\u09df' .. '\\u09e3'\n+    | '\\u09e6' .. '\\u09f1'\n+    | '\\u0a01' .. '\\u0a03'\n+    | '\\u0a05' .. '\\u0a0a'\n+    | '\\u0a0f' .. '\\u0a10'\n+    | '\\u0a13' .. '\\u0a28'\n+    | '\\u0a2a' .. '\\u0a30'\n+    | '\\u0a32' .. '\\u0a33'\n+    | '\\u0a35' .. '\\u0a36'\n+    | '\\u0a38' .. '\\u0a39'\n+    | '\\u0a3c'\n+    | '\\u0a3e' .. '\\u0a42'\n+    | '\\u0a47' .. '\\u0a48'\n+    | '\\u0a4b' .. '\\u0a4d'\n+    | '\\u0a59' .. '\\u0a5c'\n+    | '\\u0a5e'\n+    | '\\u0a66' .. '\\u0a74'\n+    | '\\u0a81' .. '\\u0a83'\n+    | '\\u0a85' .. '\\u0a8d'\n+    | '\\u0a8f' .. '\\u0a91'\n+    | '\\u0a93' .. '\\u0aa8'\n+    | '\\u0aaa' .. '\\u0ab0'\n+    | '\\u0ab2' .. '\\u0ab3'\n+    | '\\u0ab5' .. '\\u0ab9'\n+    | '\\u0abc' .. '\\u0ac5'\n+    | '\\u0ac7' .. '\\u0ac9'\n+    | '\\u0acb' .. '\\u0acd'\n+    | '\\u0ad0'\n+    | '\\u0ae0' .. '\\u0ae3'\n+    | '\\u0ae6' .. '\\u0aef'\n+    | '\\u0b01' .. '\\u0b03'\n+    | '\\u0b05' .. '\\u0b0c'\n+    | '\\u0b0f' .. '\\u0b10'\n+    | '\\u0b13' .. '\\u0b28'\n+    | '\\u0b2a' .. '\\u0b30'\n+    | '\\u0b32' .. '\\u0b33'\n+    | '\\u0b35' .. '\\u0b39'\n+    | '\\u0b3c' .. '\\u0b43'\n+    | '\\u0b47' .. '\\u0b48'\n+    | '\\u0b4b' .. '\\u0b4d'\n+    | '\\u0b56' .. '\\u0b57'\n+    | '\\u0b5c' .. '\\u0b5d'\n+    | '\\u0b5f' .. '\\u0b61'\n+    | '\\u0b66' .. '\\u0b6f'\n+    | '\\u0b71'\n+    | '\\u0b82' .. '\\u0b83'\n+    | '\\u0b85' .. '\\u0b8a'\n+    | '\\u0b8e' .. '\\u0b90'\n+    | '\\u0b92' .. '\\u0b95'\n+    | '\\u0b99' .. '\\u0b9a'\n+    | '\\u0b9c'\n+    | '\\u0b9e' .. '\\u0b9f'\n+    | '\\u0ba3' .. '\\u0ba4'\n+    | '\\u0ba8' .. '\\u0baa'\n+    | '\\u0bae' .. '\\u0bb5'\n+    | '\\u0bb7' .. '\\u0bb9'\n+    | '\\u0bbe' .. '\\u0bc2'\n+    | '\\u0bc6' .. '\\u0bc8'\n+    | '\\u0bca' .. '\\u0bcd'\n+    | '\\u0bd7'\n+    | '\\u0be7' .. '\\u0bef'\n+    | '\\u0c01' .. '\\u0c03'\n+    | '\\u0c05' .. '\\u0c0c'\n+    | '\\u0c0e' .. '\\u0c10'\n+    | '\\u0c12' .. '\\u0c28'\n+    | '\\u0c2a' .. '\\u0c33'\n+    | '\\u0c35' .. '\\u0c39'\n+    | '\\u0c3e' .. '\\u0c44'\n+    | '\\u0c46' .. '\\u0c48'\n+    | '\\u0c4a' .. '\\u0c4d'\n+    | '\\u0c55' .. '\\u0c56'\n+    | '\\u0c60' .. '\\u0c61'\n+    | '\\u0c66' .. '\\u0c6f'\n+    | '\\u0c82' .. '\\u0c83'\n+    | '\\u0c85' .. '\\u0c8c'\n+    | '\\u0c8e' .. '\\u0c90'\n+    | '\\u0c92' .. '\\u0ca8'\n+    | '\\u0caa' .. '\\u0cb3'\n+    | '\\u0cb5' .. '\\u0cb9'\n+    | '\\u0cbc' .. '\\u0cc4'\n+    | '\\u0cc6' .. '\\u0cc8'\n+    | '\\u0cca' .. '\\u0ccd'\n+    | '\\u0cd5' .. '\\u0cd6'\n+    | '\\u0cde'\n+    | '\\u0ce0' .. '\\u0ce1'\n+    | '\\u0ce6' .. '\\u0cef'\n+    | '\\u0d02' .. '\\u0d03'\n+    | '\\u0d05' .. '\\u0d0c'\n+    | '\\u0d0e' .. '\\u0d10'\n+    | '\\u0d12' .. '\\u0d28'\n+    | '\\u0d2a' .. '\\u0d39'\n+    | '\\u0d3e' .. '\\u0d43'\n+    | '\\u0d46' .. '\\u0d48'\n+    | '\\u0d4a' .. '\\u0d4d'\n+    | '\\u0d57'\n+    | '\\u0d60' .. '\\u0d61'\n+    | '\\u0d66' .. '\\u0d6f'\n+    | '\\u0d82' .. '\\u0d83'\n+    | '\\u0d85' .. '\\u0d96'\n+    | '\\u0d9a' .. '\\u0db1'\n+    | '\\u0db3' .. '\\u0dbb'\n+    | '\\u0dbd'\n+    | '\\u0dc0' .. '\\u0dc6'\n+    | '\\u0dca'\n+    | '\\u0dcf' .. '\\u0dd4'\n+    | '\\u0dd6'\n+    | '\\u0dd8' .. '\\u0ddf'\n+    | '\\u0df2' .. '\\u0df3'\n+    | '\\u0e01' .. '\\u0e3a'\n+    | '\\u0e40' .. '\\u0e4e'\n+    | '\\u0e50' .. '\\u0e59'\n+    | '\\u0e81' .. '\\u0e82'\n+    | '\\u0e84'\n+    | '\\u0e87' .. '\\u0e88'\n+    | '\\u0e8a'\n+    | '\\u0e8d'\n+    | '\\u0e94' .. '\\u0e97'\n+    | '\\u0e99' .. '\\u0e9f'\n+    | '\\u0ea1' .. '\\u0ea3'\n+    | '\\u0ea5'\n+    | '\\u0ea7'\n+    | '\\u0eaa' .. '\\u0eab'\n+    | '\\u0ead' .. '\\u0eb9'\n+    | '\\u0ebb' .. '\\u0ebd'\n+    | '\\u0ec0' .. '\\u0ec4'\n+    | '\\u0ec6'\n+    | '\\u0ec8' .. '\\u0ecd'\n+    | '\\u0ed0' .. '\\u0ed9'\n+    | '\\u0edc' .. '\\u0edd'\n+    | '\\u0f00'\n+    | '\\u0f18' .. '\\u0f19'\n+    | '\\u0f20' .. '\\u0f29'\n+    | '\\u0f35'\n+    | '\\u0f37'\n+    | '\\u0f39'\n+    | '\\u0f3e' .. '\\u0f47'\n+    | '\\u0f49' .. '\\u0f6a'\n+    | '\\u0f71' .. '\\u0f84'\n+    | '\\u0f86' .. '\\u0f8b'\n+    | '\\u0f90' .. '\\u0f97'\n+    | '\\u0f99' .. '\\u0fbc'\n+    | '\\u0fc6'\n+    | '\\u1000' .. '\\u1021'\n+    | '\\u1023' .. '\\u1027'\n+    | '\\u1029' .. '\\u102a'\n+    | '\\u102c' .. '\\u1032'\n+    | '\\u1036' .. '\\u1039'\n+    | '\\u1040' .. '\\u1049'\n+    | '\\u1050' .. '\\u1059'\n+    | '\\u10a0' .. '\\u10c5'\n+    | '\\u10d0' .. '\\u10f8'\n+    | '\\u1100' .. '\\u1159'\n+    | '\\u115f' .. '\\u11a2'\n+    | '\\u11a8' .. '\\u11f9'\n+    | '\\u1200' .. '\\u1206'\n+    | '\\u1208' .. '\\u1246'\n+    | '\\u1248'\n+    | '\\u124a' .. '\\u124d'\n+    | '\\u1250' .. '\\u1256'\n+    | '\\u1258'\n+    | '\\u125a' .. '\\u125d'\n+    | '\\u1260' .. '\\u1286'\n+    | '\\u1288'\n+    | '\\u128a' .. '\\u128d'\n+    | '\\u1290' .. '\\u12ae'\n+    | '\\u12b0'\n+    | '\\u12b2' .. '\\u12b5'\n+    | '\\u12b8' .. '\\u12be'\n+    | '\\u12c0'\n+    | '\\u12c2' .. '\\u12c5'\n+    | '\\u12c8' .. '\\u12ce'\n+    | '\\u12d0' .. '\\u12d6'\n+    | '\\u12d8' .. '\\u12ee'\n+    | '\\u12f0' .. '\\u130e'\n+    | '\\u1310'\n+    | '\\u1312' .. '\\u1315'\n+    | '\\u1318' .. '\\u131e'\n+    | '\\u1320' .. '\\u1346'\n+    | '\\u1348' .. '\\u135a'\n+    | '\\u1369' .. '\\u1371'\n+    | '\\u13a0' .. '\\u13f4'\n+    | '\\u1401' .. '\\u166c'\n+    | '\\u166f' .. '\\u1676'\n+    | '\\u1681' .. '\\u169a'\n+    | '\\u16a0' .. '\\u16ea'\n+    | '\\u16ee' .. '\\u16f0'\n+    | '\\u1700' .. '\\u170c'\n+    | '\\u170e' .. '\\u1714'\n+    | '\\u1720' .. '\\u1734'\n+    | '\\u1740' .. '\\u1753'\n+    | '\\u1760' .. '\\u176c'\n+    | '\\u176e' .. '\\u1770'\n+    | '\\u1772' .. '\\u1773'\n+    | '\\u1780' .. '\\u17b3'\n+    | '\\u17b6' .. '\\u17d3'\n+    | '\\u17d7'\n+    | '\\u17dc' .. '\\u17dd'\n+    | '\\u17e0' .. '\\u17e9'\n+    | '\\u180b' .. '\\u180d'\n+    | '\\u1810' .. '\\u1819'\n+    | '\\u1820' .. '\\u1877'\n+    | '\\u1880' .. '\\u18a9'\n+    | '\\u1900' .. '\\u191c'\n+    | '\\u1920' .. '\\u192b'\n+    | '\\u1930' .. '\\u193b'\n+    | '\\u1946' .. '\\u196d'\n+    | '\\u1970' .. '\\u1974'\n+    | '\\u1d00' .. '\\u1d6b'\n+    | '\\u1e00' .. '\\u1e9b'\n+    | '\\u1ea0' .. '\\u1ef9'\n+    | '\\u1f00' .. '\\u1f15'\n+    | '\\u1f18' .. '\\u1f1d'\n+    | '\\u1f20' .. '\\u1f45'\n+    | '\\u1f48' .. '\\u1f4d'\n+    | '\\u1f50' .. '\\u1f57'\n+    | '\\u1f59'\n+    | '\\u1f5b'\n+    | '\\u1f5d'\n+    | '\\u1f5f' .. '\\u1f7d'\n+    | '\\u1f80' .. '\\u1fb4'\n+    | '\\u1fb6' .. '\\u1fbc'\n+    | '\\u1fbe'\n+    | '\\u1fc2' .. '\\u1fc4'\n+    | '\\u1fc6' .. '\\u1fcc'\n+    | '\\u1fd0' .. '\\u1fd3'\n+    | '\\u1fd6' .. '\\u1fdb'\n+    | '\\u1fe0' .. '\\u1fec'\n+    | '\\u1ff2' .. '\\u1ff4'\n+    | '\\u1ff6' .. '\\u1ffc'\n+    | '\\u203f' .. '\\u2040'\n+    | '\\u2054'\n+    | '\\u2071'\n+    | '\\u207f'\n+    | '\\u20d0' .. '\\u20dc'\n+    | '\\u20e1'\n+    | '\\u20e5' .. '\\u20ea'\n+    | '\\u2102'\n+    | '\\u2107'\n+    | '\\u210a' .. '\\u2113'\n+    | '\\u2115'\n+    | '\\u2118' .. '\\u211d'\n+    | '\\u2124'\n+    | '\\u2126'\n+    | '\\u2128'\n+    | '\\u212a' .. '\\u2131'\n+    | '\\u2133' .. '\\u2139'\n+    | '\\u213d' .. '\\u213f'\n+    | '\\u2145' .. '\\u2149'\n+    | '\\u2160' .. '\\u2183'\n+    | '\\u3005' .. '\\u3007'\n+    | '\\u3021' .. '\\u302f'\n+    | '\\u3031' .. '\\u3035'\n+    | '\\u3038' .. '\\u303c'\n+    | '\\u3041' .. '\\u3096'\n+    | '\\u3099' .. '\\u309a'\n+    | '\\u309d' .. '\\u309f'\n+    | '\\u30a1' .. '\\u30ff'\n+    | '\\u3105' .. '\\u312c'\n+    | '\\u3131' .. '\\u318e'\n+    | '\\u31a0' .. '\\u31b7'\n+    | '\\u31f0' .. '\\u31ff'\n+    | '\\u3400' .. '\\u4db5'\n+    | '\\u4e00' .. '\\u9fa5'\n+    | '\\ua000' .. '\\ua48c'\n+    | '\\uac00' .. '\\ud7a3'\n+    | '\\uf900' .. '\\ufa2d'\n+    | '\\ufa30' .. '\\ufa6a'\n+    | '\\ufb00' .. '\\ufb06'\n+    | '\\ufb13' .. '\\ufb17'\n+    | '\\ufb1d' .. '\\ufb28'\n+    | '\\ufb2a' .. '\\ufb36'\n+    | '\\ufb38' .. '\\ufb3c'\n+    | '\\ufb3e'\n+    | '\\ufb40' .. '\\ufb41'\n+    | '\\ufb43' .. '\\ufb44'\n+    | '\\ufb46' .. '\\ufbb1'\n+    | '\\ufbd3' .. '\\ufc5d'\n+    | '\\ufc64' .. '\\ufd3d'\n+    | '\\ufd50' .. '\\ufd8f'\n+    | '\\ufd92' .. '\\ufdc7'\n+    | '\\ufdf0' .. '\\ufdf9'\n+    | '\\ufe00' .. '\\ufe0f'\n+    | '\\ufe20' .. '\\ufe23'\n+    | '\\ufe33' .. '\\ufe34'\n+    | '\\ufe4d' .. '\\ufe4f'\n+    | '\\ufe71'\n+    | '\\ufe73'\n+    | '\\ufe77'\n+    | '\\ufe79'\n+    | '\\ufe7b'\n+    | '\\ufe7d'\n+    | '\\ufe7f' .. '\\ufefc'\n+    | '\\uff10' .. '\\uff19'\n+    | '\\uff21' .. '\\uff3a'\n+    | '\\uff3f'\n+    | '\\uff41' .. '\\uff5a'\n+    | '\\uff65' .. '\\uffbe'\n+    | '\\uffc2' .. '\\uffc7'\n+    | '\\uffca' .. '\\uffcf'\n+    | '\\uffd2' .. '\\uffd7'\n+    | '\\uffda' .. '\\uffdc'\n+    | '\\ud800' '\\udc00' .. '\\udc0a'\n+    | '\\ud800' '\\udc0d' .. '\\udc25'\n+    | '\\ud800' '\\udc28' .. '\\udc39'\n+    | '\\ud800' '\\udc3c' .. '\\udc3c'\n+    | '\\ud800' '\\udc3f' .. '\\udc4c'\n+    | '\\ud800' '\\udc50' .. '\\udc5c'\n+    | '\\ud800' '\\udc80' .. '\\udcf9'\n+    | '\\ud800' '\\udf00' .. '\\udf1d'\n+    | '\\ud800' '\\udf30' .. '\\udf49'\n+    | '\\ud800' '\\udf80' .. '\\udf9c'\n+    | '\\ud801' '\\ue000' .. '\\ue09c'\n+    | '\\ud801' '\\ue0a0' .. '\\ue0a8'\n+    | '\\ud802' '\\ue400' .. '\\ue404'\n+    | '\\ud802' '\\u0808'\n+    | '\\ud802' '\\ue40a' .. '\\ue434'\n+    | '\\ud802' '\\ue437' .. '\\ue437'\n+    | '\\ud802' '\\u083c'\n+    | '\\ud802' '\\u083f'\n+    | '\\ud834' '\\uad65' .. '\\uad68'\n+    | '\\ud834' '\\uad6d' .. '\\uad71'\n+    | '\\ud834' '\\uad7b' .. '\\uad81'\n+    | '\\ud834' '\\uad85' .. '\\uad8a'\n+    | '\\ud834' '\\uadaa' .. '\\uadac'\n+    | '\\ud835' '\\ub000' .. '\\ub053'\n+    | '\\ud835' '\\ub056' .. '\\ub09b'\n+    | '\\ud835' '\\ub09e' .. '\\ub09e'\n+    | '\\ud835' '\\ud4a2'\n+    | '\\ud835' '\\ub0a5' .. '\\ub0a5'\n+    | '\\ud835' '\\ub0a9' .. '\\ub0ab'\n+    | '\\ud835' '\\ub0ae' .. '\\ub0b8'\n+    | '\\ud835' '\\ud4bb'\n+    | '\\ud835' '\\ub0bd' .. '\\ub0c2'\n+    | '\\ud835' '\\ub0c5' .. '\\ub104'\n+    | '\\ud835' '\\ub107' .. '\\ub109'\n+    | '\\ud835' '\\ub10d' .. '\\ub113'\n+    | '\\ud835' '\\ub116' .. '\\ub11b'\n+    | '\\ud835' '\\ub11e' .. '\\ub138'\n+    | '\\ud835' '\\ub13b' .. '\\ub13d'\n+    | '\\ud835' '\\ub140' .. '\\ub143'\n+    | '\\ud835' '\\ud546'\n+    | '\\ud835' '\\ub14a' .. '\\ub14f'\n+    | '\\ud835' '\\ub152' .. '\\ub2a2'\n+    | '\\ud835' '\\ub2a8' .. '\\ub2bf'\n+    | '\\ud835' '\\ub2c2' .. '\\ub2d9'\n+    | '\\ud835' '\\ub2dc' .. '\\ub2f9'\n+    | '\\ud835' '\\ub2fc' .. '\\ub313'\n+    | '\\ud835' '\\ub316' .. '\\ub333'\n+    | '\\ud835' '\\ub336' .. '\\ub34d'\n+    | '\\ud835' '\\ub350' .. '\\ub36d'\n+    | '\\ud835' '\\ub370' .. '\\ub387'\n+    | '\\ud835' '\\ub38a' .. '\\ub3a7'\n+    | '\\ud835' '\\ub3aa' .. '\\ub3c1'\n+    | '\\ud835' '\\ub3c4' .. '\\ub3c8'\n+    | '\\ud835' '\\ub3ce' .. '\\ub3fe'\n+    | '\\ud840' '\\udc00' .. '\\udffe'\n+    | '\\ud841' '\\ue000' .. '\\ue3fe'\n+    | '\\ud842' '\\ue400' .. '\\ue7fe'\n+    | '\\ud843' '\\ue800' .. '\\uebfe'\n+    | '\\ud844' '\\uec00' .. '\\ueffe'\n+    | '\\ud845' '\\uf000' .. '\\uf3fe'\n+    | '\\ud846' '\\uf400' .. '\\uf7fe'\n+    | '\\ud847' '\\uf800' .. '\\ufbfe'\n+    | '\\ud848' '\\ufc00' .. '\\ufffe'\n+    | '\\ud849' '\\u0000' .. '\\u03fe'\n+    | '\\ud84a' '\\u0400' .. '\\u07fe'\n+    | '\\ud84b' '\\u0800' .. '\\u0bfe'\n+    | '\\ud84c' '\\u0c00' .. '\\u0ffe'\n+    | '\\ud84d' '\\u1000' .. '\\u13fe'\n+    | '\\ud84e' '\\u1400' .. '\\u17fe'\n+    | '\\ud84f' '\\u1800' .. '\\u1bfe'\n+    | '\\ud850' '\\u1c00' .. '\\u1ffe'\n+    | '\\ud851' '\\u2000' .. '\\u23fe'\n+    | '\\ud852' '\\u2400' .. '\\u27fe'\n+    | '\\ud853' '\\u2800' .. '\\u2bfe'\n+    | '\\ud854' '\\u2c00' .. '\\u2ffe'\n+    | '\\ud855' '\\u3000' .. '\\u33fe'\n+    | '\\ud856' '\\u3400' .. '\\u37fe'\n+    | '\\ud857' '\\u3800' .. '\\u3bfe'\n+    | '\\ud858' '\\u3c00' .. '\\u3ffe'\n+    | '\\ud859' '\\u4000' .. '\\u43fe'\n+    | '\\ud85a' '\\u4400' .. '\\u47fe'\n+    | '\\ud85b' '\\u4800' .. '\\u4bfe'\n+    | '\\ud85c' '\\u4c00' .. '\\u4ffe'\n+    | '\\ud85d' '\\u5000' .. '\\u53fe'\n+    | '\\ud85e' '\\u5400' .. '\\u57fe'\n+    | '\\ud85f' '\\u5800' .. '\\u5bfe'\n+    | '\\ud860' '\\u5c00' .. '\\u5ffe'\n+    | '\\ud861' '\\u6000' .. '\\u63fe'\n+    | '\\ud862' '\\u6400' .. '\\u67fe'\n+    | '\\ud863' '\\u6800' .. '\\u6bfe'\n+    | '\\ud864' '\\u6c00' .. '\\u6ffe'\n+    | '\\ud865' '\\u7000' .. '\\u73fe'\n+    | '\\ud866' '\\u7400' .. '\\u77fe'\n+    | '\\ud867' '\\u7800' .. '\\u7bfe'\n+    | '\\ud868' '\\u7c00' .. '\\u7ffe'\n+    | '\\ud869' '\\u8000' .. '\\u82d5'\n+    | '\\ud87e' '\\ud400' .. '\\ud61c'\n+    | '\\udb40' '\\udd00' .. '\\uddee'\n+    ;"}, {"sha": "53fb50f4584d2d65eee0b77d8f9f090cc47abeed", "filename": "src/grammar/xidstart.g4", "status": "added", "additions": 379, "deletions": 0, "changes": 379, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fxidstart.g4", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Fgrammar%2Fxidstart.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fxidstart.g4?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -0,0 +1,379 @@\n+lexer grammar Xidstart;\n+\n+fragment XID_Start :\n+      '\\u0041' .. '\\u005a'\n+    | '_'\n+    | '\\u0061' .. '\\u007a'\n+    | '\\u00aa'\n+    | '\\u00b5'\n+    | '\\u00ba'\n+    | '\\u00c0' .. '\\u00d6'\n+    | '\\u00d8' .. '\\u00f6'\n+    | '\\u00f8' .. '\\u0236'\n+    | '\\u0250' .. '\\u02c1'\n+    | '\\u02c6' .. '\\u02d1'\n+    | '\\u02e0' .. '\\u02e4'\n+    | '\\u02ee'\n+    | '\\u0386'\n+    | '\\u0388' .. '\\u038a'\n+    | '\\u038c'\n+    | '\\u038e' .. '\\u03a1'\n+    | '\\u03a3' .. '\\u03ce'\n+    | '\\u03d0' .. '\\u03f5'\n+    | '\\u03f7' .. '\\u03fb'\n+    | '\\u0400' .. '\\u0481'\n+    | '\\u048a' .. '\\u04ce'\n+    | '\\u04d0' .. '\\u04f5'\n+    | '\\u04f8' .. '\\u04f9'\n+    | '\\u0500' .. '\\u050f'\n+    | '\\u0531' .. '\\u0556'\n+    | '\\u0559'\n+    | '\\u0561' .. '\\u0587'\n+    | '\\u05d0' .. '\\u05ea'\n+    | '\\u05f0' .. '\\u05f2'\n+    | '\\u0621' .. '\\u063a'\n+    | '\\u0640' .. '\\u064a'\n+    | '\\u066e' .. '\\u066f'\n+    | '\\u0671' .. '\\u06d3'\n+    | '\\u06d5'\n+    | '\\u06e5' .. '\\u06e6'\n+    | '\\u06ee' .. '\\u06ef'\n+    | '\\u06fa' .. '\\u06fc'\n+    | '\\u06ff'\n+    | '\\u0710'\n+    | '\\u0712' .. '\\u072f'\n+    | '\\u074d' .. '\\u074f'\n+    | '\\u0780' .. '\\u07a5'\n+    | '\\u07b1'\n+    | '\\u0904' .. '\\u0939'\n+    | '\\u093d'\n+    | '\\u0950'\n+    | '\\u0958' .. '\\u0961'\n+    | '\\u0985' .. '\\u098c'\n+    | '\\u098f' .. '\\u0990'\n+    | '\\u0993' .. '\\u09a8'\n+    | '\\u09aa' .. '\\u09b0'\n+    | '\\u09b2'\n+    | '\\u09b6' .. '\\u09b9'\n+    | '\\u09bd'\n+    | '\\u09dc' .. '\\u09dd'\n+    | '\\u09df' .. '\\u09e1'\n+    | '\\u09f0' .. '\\u09f1'\n+    | '\\u0a05' .. '\\u0a0a'\n+    | '\\u0a0f' .. '\\u0a10'\n+    | '\\u0a13' .. '\\u0a28'\n+    | '\\u0a2a' .. '\\u0a30'\n+    | '\\u0a32' .. '\\u0a33'\n+    | '\\u0a35' .. '\\u0a36'\n+    | '\\u0a38' .. '\\u0a39'\n+    | '\\u0a59' .. '\\u0a5c'\n+    | '\\u0a5e'\n+    | '\\u0a72' .. '\\u0a74'\n+    | '\\u0a85' .. '\\u0a8d'\n+    | '\\u0a8f' .. '\\u0a91'\n+    | '\\u0a93' .. '\\u0aa8'\n+    | '\\u0aaa' .. '\\u0ab0'\n+    | '\\u0ab2' .. '\\u0ab3'\n+    | '\\u0ab5' .. '\\u0ab9'\n+    | '\\u0abd'\n+    | '\\u0ad0'\n+    | '\\u0ae0' .. '\\u0ae1'\n+    | '\\u0b05' .. '\\u0b0c'\n+    | '\\u0b0f' .. '\\u0b10'\n+    | '\\u0b13' .. '\\u0b28'\n+    | '\\u0b2a' .. '\\u0b30'\n+    | '\\u0b32' .. '\\u0b33'\n+    | '\\u0b35' .. '\\u0b39'\n+    | '\\u0b3d'\n+    | '\\u0b5c' .. '\\u0b5d'\n+    | '\\u0b5f' .. '\\u0b61'\n+    | '\\u0b71'\n+    | '\\u0b83'\n+    | '\\u0b85' .. '\\u0b8a'\n+    | '\\u0b8e' .. '\\u0b90'\n+    | '\\u0b92' .. '\\u0b95'\n+    | '\\u0b99' .. '\\u0b9a'\n+    | '\\u0b9c'\n+    | '\\u0b9e' .. '\\u0b9f'\n+    | '\\u0ba3' .. '\\u0ba4'\n+    | '\\u0ba8' .. '\\u0baa'\n+    | '\\u0bae' .. '\\u0bb5'\n+    | '\\u0bb7' .. '\\u0bb9'\n+    | '\\u0c05' .. '\\u0c0c'\n+    | '\\u0c0e' .. '\\u0c10'\n+    | '\\u0c12' .. '\\u0c28'\n+    | '\\u0c2a' .. '\\u0c33'\n+    | '\\u0c35' .. '\\u0c39'\n+    | '\\u0c60' .. '\\u0c61'\n+    | '\\u0c85' .. '\\u0c8c'\n+    | '\\u0c8e' .. '\\u0c90'\n+    | '\\u0c92' .. '\\u0ca8'\n+    | '\\u0caa' .. '\\u0cb3'\n+    | '\\u0cb5' .. '\\u0cb9'\n+    | '\\u0cbd'\n+    | '\\u0cde'\n+    | '\\u0ce0' .. '\\u0ce1'\n+    | '\\u0d05' .. '\\u0d0c'\n+    | '\\u0d0e' .. '\\u0d10'\n+    | '\\u0d12' .. '\\u0d28'\n+    | '\\u0d2a' .. '\\u0d39'\n+    | '\\u0d60' .. '\\u0d61'\n+    | '\\u0d85' .. '\\u0d96'\n+    | '\\u0d9a' .. '\\u0db1'\n+    | '\\u0db3' .. '\\u0dbb'\n+    | '\\u0dbd'\n+    | '\\u0dc0' .. '\\u0dc6'\n+    | '\\u0e01' .. '\\u0e30'\n+    | '\\u0e32'\n+    | '\\u0e40' .. '\\u0e46'\n+    | '\\u0e81' .. '\\u0e82'\n+    | '\\u0e84'\n+    | '\\u0e87' .. '\\u0e88'\n+    | '\\u0e8a'\n+    | '\\u0e8d'\n+    | '\\u0e94' .. '\\u0e97'\n+    | '\\u0e99' .. '\\u0e9f'\n+    | '\\u0ea1' .. '\\u0ea3'\n+    | '\\u0ea5'\n+    | '\\u0ea7'\n+    | '\\u0eaa' .. '\\u0eab'\n+    | '\\u0ead' .. '\\u0eb0'\n+    | '\\u0eb2'\n+    | '\\u0ebd'\n+    | '\\u0ec0' .. '\\u0ec4'\n+    | '\\u0ec6'\n+    | '\\u0edc' .. '\\u0edd'\n+    | '\\u0f00'\n+    | '\\u0f40' .. '\\u0f47'\n+    | '\\u0f49' .. '\\u0f6a'\n+    | '\\u0f88' .. '\\u0f8b'\n+    | '\\u1000' .. '\\u1021'\n+    | '\\u1023' .. '\\u1027'\n+    | '\\u1029' .. '\\u102a'\n+    | '\\u1050' .. '\\u1055'\n+    | '\\u10a0' .. '\\u10c5'\n+    | '\\u10d0' .. '\\u10f8'\n+    | '\\u1100' .. '\\u1159'\n+    | '\\u115f' .. '\\u11a2'\n+    | '\\u11a8' .. '\\u11f9'\n+    | '\\u1200' .. '\\u1206'\n+    | '\\u1208' .. '\\u1246'\n+    | '\\u1248'\n+    | '\\u124a' .. '\\u124d'\n+    | '\\u1250' .. '\\u1256'\n+    | '\\u1258'\n+    | '\\u125a' .. '\\u125d'\n+    | '\\u1260' .. '\\u1286'\n+    | '\\u1288'\n+    | '\\u128a' .. '\\u128d'\n+    | '\\u1290' .. '\\u12ae'\n+    | '\\u12b0'\n+    | '\\u12b2' .. '\\u12b5'\n+    | '\\u12b8' .. '\\u12be'\n+    | '\\u12c0'\n+    | '\\u12c2' .. '\\u12c5'\n+    | '\\u12c8' .. '\\u12ce'\n+    | '\\u12d0' .. '\\u12d6'\n+    | '\\u12d8' .. '\\u12ee'\n+    | '\\u12f0' .. '\\u130e'\n+    | '\\u1310'\n+    | '\\u1312' .. '\\u1315'\n+    | '\\u1318' .. '\\u131e'\n+    | '\\u1320' .. '\\u1346'\n+    | '\\u1348' .. '\\u135a'\n+    | '\\u13a0' .. '\\u13f4'\n+    | '\\u1401' .. '\\u166c'\n+    | '\\u166f' .. '\\u1676'\n+    | '\\u1681' .. '\\u169a'\n+    | '\\u16a0' .. '\\u16ea'\n+    | '\\u16ee' .. '\\u16f0'\n+    | '\\u1700' .. '\\u170c'\n+    | '\\u170e' .. '\\u1711'\n+    | '\\u1720' .. '\\u1731'\n+    | '\\u1740' .. '\\u1751'\n+    | '\\u1760' .. '\\u176c'\n+    | '\\u176e' .. '\\u1770'\n+    | '\\u1780' .. '\\u17b3'\n+    | '\\u17d7'\n+    | '\\u17dc'\n+    | '\\u1820' .. '\\u1877'\n+    | '\\u1880' .. '\\u18a8'\n+    | '\\u1900' .. '\\u191c'\n+    | '\\u1950' .. '\\u196d'\n+    | '\\u1970' .. '\\u1974'\n+    | '\\u1d00' .. '\\u1d6b'\n+    | '\\u1e00' .. '\\u1e9b'\n+    | '\\u1ea0' .. '\\u1ef9'\n+    | '\\u1f00' .. '\\u1f15'\n+    | '\\u1f18' .. '\\u1f1d'\n+    | '\\u1f20' .. '\\u1f45'\n+    | '\\u1f48' .. '\\u1f4d'\n+    | '\\u1f50' .. '\\u1f57'\n+    | '\\u1f59'\n+    | '\\u1f5b'\n+    | '\\u1f5d'\n+    | '\\u1f5f' .. '\\u1f7d'\n+    | '\\u1f80' .. '\\u1fb4'\n+    | '\\u1fb6' .. '\\u1fbc'\n+    | '\\u1fbe'\n+    | '\\u1fc2' .. '\\u1fc4'\n+    | '\\u1fc6' .. '\\u1fcc'\n+    | '\\u1fd0' .. '\\u1fd3'\n+    | '\\u1fd6' .. '\\u1fdb'\n+    | '\\u1fe0' .. '\\u1fec'\n+    | '\\u1ff2' .. '\\u1ff4'\n+    | '\\u1ff6' .. '\\u1ffc'\n+    | '\\u2071'\n+    | '\\u207f'\n+    | '\\u2102'\n+    | '\\u2107'\n+    | '\\u210a' .. '\\u2113'\n+    | '\\u2115'\n+    | '\\u2118' .. '\\u211d'\n+    | '\\u2124'\n+    | '\\u2126'\n+    | '\\u2128'\n+    | '\\u212a' .. '\\u2131'\n+    | '\\u2133' .. '\\u2139'\n+    | '\\u213d' .. '\\u213f'\n+    | '\\u2145' .. '\\u2149'\n+    | '\\u2160' .. '\\u2183'\n+    | '\\u3005' .. '\\u3007'\n+    | '\\u3021' .. '\\u3029'\n+    | '\\u3031' .. '\\u3035'\n+    | '\\u3038' .. '\\u303c'\n+    | '\\u3041' .. '\\u3096'\n+    | '\\u309d' .. '\\u309f'\n+    | '\\u30a1' .. '\\u30fa'\n+    | '\\u30fc' .. '\\u30ff'\n+    | '\\u3105' .. '\\u312c'\n+    | '\\u3131' .. '\\u318e'\n+    | '\\u31a0' .. '\\u31b7'\n+    | '\\u31f0' .. '\\u31ff'\n+    | '\\u3400' .. '\\u4db5'\n+    | '\\u4e00' .. '\\u9fa5'\n+    | '\\ua000' .. '\\ua48c'\n+    | '\\uac00' .. '\\ud7a3'\n+    | '\\uf900' .. '\\ufa2d'\n+    | '\\ufa30' .. '\\ufa6a'\n+    | '\\ufb00' .. '\\ufb06'\n+    | '\\ufb13' .. '\\ufb17'\n+    | '\\ufb1d'\n+    | '\\ufb1f' .. '\\ufb28'\n+    | '\\ufb2a' .. '\\ufb36'\n+    | '\\ufb38' .. '\\ufb3c'\n+    | '\\ufb3e'\n+    | '\\ufb40' .. '\\ufb41'\n+    | '\\ufb43' .. '\\ufb44'\n+    | '\\ufb46' .. '\\ufbb1'\n+    | '\\ufbd3' .. '\\ufc5d'\n+    | '\\ufc64' .. '\\ufd3d'\n+    | '\\ufd50' .. '\\ufd8f'\n+    | '\\ufd92' .. '\\ufdc7'\n+    | '\\ufdf0' .. '\\ufdf9'\n+    | '\\ufe71'\n+    | '\\ufe73'\n+    | '\\ufe77'\n+    | '\\ufe79'\n+    | '\\ufe7b'\n+    | '\\ufe7d'\n+    | '\\ufe7f' .. '\\ufefc'\n+    | '\\uff21' .. '\\uff3a'\n+    | '\\uff41' .. '\\uff5a'\n+    | '\\uff66' .. '\\uff9d'\n+    | '\\uffa0' .. '\\uffbe'\n+    | '\\uffc2' .. '\\uffc7'\n+    | '\\uffca' .. '\\uffcf'\n+    | '\\uffd2' .. '\\uffd7'\n+    | '\\uffda' .. '\\uffdc'\n+    | '\\ud800' '\\udc00' .. '\\udc0a'\n+    | '\\ud800' '\\udc0d' .. '\\udc25'\n+    | '\\ud800' '\\udc28' .. '\\udc39'\n+    | '\\ud800' '\\udc3c' .. '\\udc3c'\n+    | '\\ud800' '\\udc3f' .. '\\udc4c'\n+    | '\\ud800' '\\udc50' .. '\\udc5c'\n+    | '\\ud800' '\\udc80' .. '\\udcf9'\n+    | '\\ud800' '\\udf00' .. '\\udf1d'\n+    | '\\ud800' '\\udf30' .. '\\udf49'\n+    | '\\ud800' '\\udf80' .. '\\udf9c'\n+    | '\\ud801' '\\ue000' .. '\\ue09c'\n+    | '\\ud802' '\\ue400' .. '\\ue404'\n+    | '\\ud802' '\\u0808'\n+    | '\\ud802' '\\ue40a' .. '\\ue434'\n+    | '\\ud802' '\\ue437' .. '\\ue437'\n+    | '\\ud802' '\\u083c'\n+    | '\\ud802' '\\u083f'\n+    | '\\ud835' '\\ub000' .. '\\ub053'\n+    | '\\ud835' '\\ub056' .. '\\ub09b'\n+    | '\\ud835' '\\ub09e' .. '\\ub09e'\n+    | '\\ud835' '\\ud4a2'\n+    | '\\ud835' '\\ub0a5' .. '\\ub0a5'\n+    | '\\ud835' '\\ub0a9' .. '\\ub0ab'\n+    | '\\ud835' '\\ub0ae' .. '\\ub0b8'\n+    | '\\ud835' '\\ud4bb'\n+    | '\\ud835' '\\ub0bd' .. '\\ub0c2'\n+    | '\\ud835' '\\ub0c5' .. '\\ub104'\n+    | '\\ud835' '\\ub107' .. '\\ub109'\n+    | '\\ud835' '\\ub10d' .. '\\ub113'\n+    | '\\ud835' '\\ub116' .. '\\ub11b'\n+    | '\\ud835' '\\ub11e' .. '\\ub138'\n+    | '\\ud835' '\\ub13b' .. '\\ub13d'\n+    | '\\ud835' '\\ub140' .. '\\ub143'\n+    | '\\ud835' '\\ud546'\n+    | '\\ud835' '\\ub14a' .. '\\ub14f'\n+    | '\\ud835' '\\ub152' .. '\\ub2a2'\n+    | '\\ud835' '\\ub2a8' .. '\\ub2bf'\n+    | '\\ud835' '\\ub2c2' .. '\\ub2d9'\n+    | '\\ud835' '\\ub2dc' .. '\\ub2f9'\n+    | '\\ud835' '\\ub2fc' .. '\\ub313'\n+    | '\\ud835' '\\ub316' .. '\\ub333'\n+    | '\\ud835' '\\ub336' .. '\\ub34d'\n+    | '\\ud835' '\\ub350' .. '\\ub36d'\n+    | '\\ud835' '\\ub370' .. '\\ub387'\n+    | '\\ud835' '\\ub38a' .. '\\ub3a7'\n+    | '\\ud835' '\\ub3aa' .. '\\ub3c1'\n+    | '\\ud835' '\\ub3c4' .. '\\ub3c8'\n+    | '\\ud840' '\\udc00' .. '\\udffe'\n+    | '\\ud841' '\\ue000' .. '\\ue3fe'\n+    | '\\ud842' '\\ue400' .. '\\ue7fe'\n+    | '\\ud843' '\\ue800' .. '\\uebfe'\n+    | '\\ud844' '\\uec00' .. '\\ueffe'\n+    | '\\ud845' '\\uf000' .. '\\uf3fe'\n+    | '\\ud846' '\\uf400' .. '\\uf7fe'\n+    | '\\ud847' '\\uf800' .. '\\ufbfe'\n+    | '\\ud848' '\\ufc00' .. '\\ufffe'\n+    | '\\ud849' '\\u0000' .. '\\u03fe'\n+    | '\\ud84a' '\\u0400' .. '\\u07fe'\n+    | '\\ud84b' '\\u0800' .. '\\u0bfe'\n+    | '\\ud84c' '\\u0c00' .. '\\u0ffe'\n+    | '\\ud84d' '\\u1000' .. '\\u13fe'\n+    | '\\ud84e' '\\u1400' .. '\\u17fe'\n+    | '\\ud84f' '\\u1800' .. '\\u1bfe'\n+    | '\\ud850' '\\u1c00' .. '\\u1ffe'\n+    | '\\ud851' '\\u2000' .. '\\u23fe'\n+    | '\\ud852' '\\u2400' .. '\\u27fe'\n+    | '\\ud853' '\\u2800' .. '\\u2bfe'\n+    | '\\ud854' '\\u2c00' .. '\\u2ffe'\n+    | '\\ud855' '\\u3000' .. '\\u33fe'\n+    | '\\ud856' '\\u3400' .. '\\u37fe'\n+    | '\\ud857' '\\u3800' .. '\\u3bfe'\n+    | '\\ud858' '\\u3c00' .. '\\u3ffe'\n+    | '\\ud859' '\\u4000' .. '\\u43fe'\n+    | '\\ud85a' '\\u4400' .. '\\u47fe'\n+    | '\\ud85b' '\\u4800' .. '\\u4bfe'\n+    | '\\ud85c' '\\u4c00' .. '\\u4ffe'\n+    | '\\ud85d' '\\u5000' .. '\\u53fe'\n+    | '\\ud85e' '\\u5400' .. '\\u57fe'\n+    | '\\ud85f' '\\u5800' .. '\\u5bfe'\n+    | '\\ud860' '\\u5c00' .. '\\u5ffe'\n+    | '\\ud861' '\\u6000' .. '\\u63fe'\n+    | '\\ud862' '\\u6400' .. '\\u67fe'\n+    | '\\ud863' '\\u6800' .. '\\u6bfe'\n+    | '\\ud864' '\\u6c00' .. '\\u6ffe'\n+    | '\\ud865' '\\u7000' .. '\\u73fe'\n+    | '\\ud866' '\\u7400' .. '\\u77fe'\n+    | '\\ud867' '\\u7800' .. '\\u7bfe'\n+    | '\\ud868' '\\u7c00' .. '\\u7ffe'\n+    | '\\ud869' '\\u8000' .. '\\u82d5'\n+    | '\\ud87e' '\\ud400' .. '\\ud61c'\n+    ;"}, {"sha": "80942754c7bf0c3c74ade3523bf04b93541522c0", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Utilities for formatting and printing strings\n //!"}, {"sha": "266cda9a2379dae9f07162624f08bdff00d8c73d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Unicode string manipulation (the `str` type).\n //!"}, {"sha": "85f8a9caaaa4f37347851d83b07ddacf46976fa2", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! An owned, growable string that enforces that its contents are valid UTF-8.\n "}, {"sha": "65f790d5d432ea7a3d6efd5aa9adaa57aee1eb48", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n //! An implementation of SipHash 2-4.\n "}, {"sha": "bcfdcfcd5e62db954c63609b0d3a8884774941aa", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Numeric traits and functions for the built-in numeric types.\n "}, {"sha": "9c3ab0011871d2fdb30a8b48ec011afb19ce7cf0", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! String manipulation\n //!"}, {"sha": "b73807aa317588a7500309bc87b2d8912990875a", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n #[test]\n fn test_is_lowercase() {"}, {"sha": "197199e743f5767603a7f73fe876937964e004d1", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15677\n \n //! Simple getopt alternative.\n //!"}, {"sha": "f37093c6db85bf20a19ad67f428284177f7b575d", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! The Gamma and derived distributions.\n "}, {"sha": "c63c586b6a90100ab1a8801cb3b7cce6210e8961", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Unicode-intensive string manipulations.\n //!"}, {"sha": "87f1dca2caed0dc2213431326320011cde866981", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Hex binary-to-text encoding\n "}, {"sha": "ccc56960b02ce111877e9fe6c689988770ef548b", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Operations on ASCII strings and characters\n "}, {"sha": "a5bbbee790a217e6aa976ab87d1369895c7763b9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n use self::Entry::*;\n use self::SearchResult::*;"}, {"sha": "82109900bf2aff93557742a931c610b2667108eb", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n use borrow::Borrow;\n use clone::Clone;"}, {"sha": "65ebf8515e696bee56fafa19a4c9d942e10938c9", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n use self::BucketState::*;\n "}, {"sha": "67cac42c35ec2d0a5ee22cad0fbdae38b1366442", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n //! Buffering wrappers for I/O traits\n "}, {"sha": "ce1da4742d1dffe0c5c042d6dc627f7bb8713f16", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n #![allow(missing_docs)]\n #![allow(deprecated)]"}, {"sha": "31e970a9550c4316a74a3fc3f1a3aad25d0eb3e1", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15677\n \n use io::prelude::*;\n "}, {"sha": "dfdaa47d8b925a66af0a8b3c7227d9b5242800e2", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! The CodeMap tracks all the source code used within a single crate, mapping\n //! from integer byte positions to the original source code location. Each bit"}, {"sha": "58df4038403a69b9a118176a535ea6a4ef09c5f6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! This is an Earley-like parser, without support for in-grammar nonterminals,\n //! only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "19f83c7817c7c384d2c3853ddfdcda82d6188d19", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-lexer-test FIXME #15679\n // Microbenchmarks for various functions in std and extra\n \n #![feature(rand, collections, std_misc)]"}, {"sha": "8048f3dde96826bc36b9fe17b1a24b5e551336e2", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -16,7 +16,6 @@\n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n // no-pretty-expanded FIXME #15189\n-// ignore-lexer-test FIXME #15679\n \n #![feature(std_misc)]\n "}, {"sha": "530c499f5fdbda7f8e4ccd9e921f2a6de0ffedbc", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -10,7 +10,6 @@\n \n // Multi-language Perlin noise benchmark.\n // See https://github.com/nsf/pnoise for timings and alternative implementations.\n-// ignore-lexer-test FIXME #15679\n \n #![feature(rand, core)]\n "}, {"sha": "8594c35f8dd1b1fbdb569c7e5f26ab8d174dd527", "filename": "src/test/compile-fail/utf8_idents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n fn foo<\n     '\u03b2, //~ ERROR non-ascii idents are not fully supported"}, {"sha": "2dc7e8f952549dad342370cc4bc12997134000ea", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -14,7 +14,6 @@\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp\n-// ignore-lexer-test FIXME #15679\n fn f() {\n     fn nested() {\n         /*"}, {"sha": "6f4a95e7c9b00443d6ae5148312cff9782e537a6", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -14,7 +14,6 @@\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp\n-// ignore-lexer-test FIXME #15679\n fn f() {\n     fn nested() {\n         /*"}, {"sha": "9f7b98a57fcec74d44ce0ad11879c3d6851af041", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n \n static FOO: u8 = b'\\xF0';"}, {"sha": "0d45a5d52124d08694b21de408fff8083040b3e3", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n // Tests that we can call a function bounded over a supertrait from"}, {"sha": "7ae1347f2c7cd4d7e48d26800f7540d9d4ae27e0", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // no-pretty-expanded unnecessary unsafe block generated\n-// ignore-lexer-test FIXME #15679\n \n #![deny(warnings)]\n #![allow(unused_must_use)]"}, {"sha": "7bab2ddfed06bbc429c95063ed1ab68cb2d9eb8b", "filename": "src/test/run-pass/issue-12582.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12582.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n pub fn main() {\n     let x = 1;"}, {"sha": "14987484711792ea44275d6236af8894a8a334a2", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n // Tests that match expression handles overlapped literal and range\n // properly in the presence of guard function."}, {"sha": "0df89c72424b46ee484e3e0fb04772865fa12547", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n #![feature(unsafe_destructor, std_misc)]\n "}, {"sha": "ed9b8066104f565ee7b9351520d0cebc0602bd80", "filename": "src/test/run-pass/issue-3683.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3683.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n trait Foo {"}, {"sha": "a565460c42e28333fad057b931ed6d27ecc14fc0", "filename": "src/test/run-pass/issue-4759-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n trait U { fn f(self); }\n impl U for isize { fn f(self) {} }\n pub fn main() { 4.f(); }"}, {"sha": "5e2e4df95b3261b0970eca1acb83baaac18bb876", "filename": "src/test/run-pass/issue-5280.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5280.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n type FontTableTag = u32;\n "}, {"sha": "dd00fab50203b8e94c8483d1cc3e194f1577d1e0", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n trait Fooable {\n     fn yes(self);"}, {"sha": "5c8db524cc2edeec729b4efb9949333bace83422", "filename": "src/test/run-pass/lexer-crlf-line-endings-string-literal-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -16,7 +16,6 @@\n // this directory should enforce it.\r\n \r\n // ignore-pretty\r\n-// ignore-lexer-test FIXME #15882\r\n \r\n /// Doc comment that ends in CRLF\r\n pub fn foo() {}\r"}, {"sha": "6e65cb2afd4ff38c59063c1235c9276a4589690e", "filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n \n #![forbid(non_camel_case_types)]"}, {"sha": "0b2e19d6c7930e0186119eae50540d328a26ae72", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n pub fn main() {\n     match 5_usize {"}, {"sha": "0475dd10fdef9ff6b8d8f6b75e265d795afebdf3", "filename": "src/test/run-pass/multibyte.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultibyte.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n // Test that multibyte characters don't crash the compiler\n pub fn main() {"}, {"sha": "9ee824d4185851b4477dadb969fae7a857ff2bb8", "filename": "src/test/run-pass/raw-str.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fraw-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fraw-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fraw-str.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05"}, {"sha": "15ab21bbc8da7bcdbdbd14d70de513214f469294", "filename": "src/test/run-pass/shebang.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fshebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fshebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshebang.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -11,6 +11,5 @@\n \n // ignore-pretty: `expand` adds some preludes before shebang\n //\n-// ignore-lexer-test FIXME #15878\n \n pub fn main() { println!(\"Hello World\"); }"}, {"sha": "109287a83b16a88e93ced69fd83047aac5ad4188", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n #[derive(Copy, Clone)]\n pub struct Quad { a: u64, b: u64, c: u64, d: u64 }"}, {"sha": "a29e0e932c07d329fe6969b303a0e37c389db35e", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n \n trait to_str {"}, {"sha": "cfd812400947e5e637b4986731c020aa81a64665", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n pub trait Clone2 {\n     /// Returns a copy of the value. The contents of owned pointers"}, {"sha": "36b0eb527b64251f5b8fb82bd6f95580691e3f9e", "filename": "src/test/run-pass/traits-default-method-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n trait Cat {"}, {"sha": "a2e7f54bba65203bcbc97ce9be1498f67a4862df", "filename": "src/test/run-pass/traits-default-method-trivial.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n trait Cat {"}, {"sha": "26f7b767988d240581d7bcb39cf838c352b06de7", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -10,8 +10,6 @@\n \n // Test syntax checks for `?Sized` syntax.\n \n-// pretty-expanded FIXME #23616\n-\n use std::marker::PhantomData;\n \n trait T1  { }"}, {"sha": "1cce98ae6b7258ed3efa814a353b6ff53125dd35", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "c3052a928d6d6764348cf56beb3d2d5f15b41a8f", "filename": "src/test/run-pass/utf8-bom.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8-bom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8-bom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8-bom.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n // This file has utf-8 BOM, it should be compiled normally without error.\n "}, {"sha": "4782edf4e129aba11f829344b153207a8346a947", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n // no-pretty-expanded FIXME #15189\n \n pub fn main() {"}, {"sha": "36b64551ef28f679f1144c3bfd52d7dc54c52f8d", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n #![feature(collections, core, str_char)]\n "}, {"sha": "559afcd164148998bbdbd1f4ef955ef9d474c834", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7397bdc9c516f3f714ad4974ecdd27f567d03d05/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=7397bdc9c516f3f714ad4974ecdd27f567d03d05", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n #![feature(non_ascii_idents)]\n "}]}