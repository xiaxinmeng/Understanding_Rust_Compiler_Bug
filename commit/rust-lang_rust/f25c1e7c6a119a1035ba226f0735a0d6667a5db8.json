{"sha": "f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNWMxZTdjNmExMTlhMTAzNWJhMjI2ZjA3MzVhMGQ2NjY3YTVkYjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T19:59:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T19:59:25Z"}, "message": "Merge #8356\n\n8356: Align more methods to Chalk r=flodiebold a=flodiebold\n\nRelated to #8313.\r\n\r\nMove some inherent methods that don't exist in Chalk to an extension trait, remove some others.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "0f666c5b917de8a0f2ebf5fba185500d153036f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f666c5b917de8a0f2ebf5fba185500d153036f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga2wdCRBK7hj4Ov3rIwAAdHIIAD+D/dRiq+j/vkswIHmUe9nL\npXzzJDs/kpk31Lhvt0QzZiRtnnWool2MM4RgvW9sEl2FKnXqNaavx4WvskePOlUl\n3kNTw6kCHUyZUYPE9RTMuu4+7ESh2ZltsvKXcbW1nXNmuaSVBNUz7hS/bGveRnh6\nwJcZ4PAWe934Kpj9NfO/IRpBKyN6ahW91mdWLoKa5aPWRbJfLOxAfLiwmQdgNhBl\nGIkiBHVhEiGbES0wkZ8fKcpnMG2hIzIhW/uKJCE+fHVws0xqLHRG9L352+Nn6jBy\nE1GJcYvG/2OWX8CDh+A7tFdRTgo8VAKMbHj4+UMHB+z8fu6dtpAstPyNs31/WgA=\n=42f6\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f666c5b917de8a0f2ebf5fba185500d153036f3\nparent 8c96a7d81e29061537d78b5670a3474cb136422d\nparent b67148daea86d85d211c4243f22635d6ac7e1983\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617652765 +0000\ncommitter GitHub <noreply@github.com> 1617652765 +0000\n\nMerge #8356\n\n8356: Align more methods to Chalk r=flodiebold a=flodiebold\n\nRelated to #8313.\r\n\r\nMove some inherent methods that don't exist in Chalk to an extension trait, remove some others.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "html_url": "https://github.com/rust-lang/rust/commit/f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c96a7d81e29061537d78b5670a3474cb136422d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c96a7d81e29061537d78b5670a3474cb136422d", "html_url": "https://github.com/rust-lang/rust/commit/8c96a7d81e29061537d78b5670a3474cb136422d"}, {"sha": "b67148daea86d85d211c4243f22635d6ac7e1983", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67148daea86d85d211c4243f22635d6ac7e1983", "html_url": "https://github.com/rust-lang/rust/commit/b67148daea86d85d211c4243f22635d6ac7e1983"}], "stats": {"total": 220, "additions": 108, "deletions": 112}, "files": [{"sha": "db4ebada4a00dee1f9a1c813787888299b581e9e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -55,6 +55,7 @@ use hir_ty::{\n     autoderef, could_unify,\n     method_resolution::{self, TyFingerprint},\n     primitive::UintTy,\n+    subst_prefix,\n     traits::FnTrait,\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n     DebruijnIndex, InEnvironment, Interner, QuantifiedWhereClause, Scalar, Solution,\n@@ -1503,7 +1504,7 @@ impl TypeParam {\n         let krate = self.id.parent.module(db.upcast()).krate();\n         let ty = params.get(local_idx)?.clone();\n         let subst = TyBuilder::type_params_subst(db, self.id.parent);\n-        let ty = ty.substitute(&Interner, &subst.prefix(local_idx));\n+        let ty = ty.substitute(&Interner, &subst_prefix(&subst, local_idx));\n         Some(Type::new_with_resolver_inner(db, krate, &resolver, ty))\n     }\n }"}, {"sha": "c5890e24dfcb1e95c7d7bbe7e15b4d0231fdb0c6", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -13,7 +13,7 @@ use log::{info, warn};\n \n use crate::{\n     db::HirDatabase, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex,\n-    InEnvironment, Interner, Solution, Ty, TyBuilder, TyKind,\n+    InEnvironment, Interner, ProjectionTyExt, Solution, Ty, TyBuilder, TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;"}, {"sha": "0f4cb43e9236e5858fcd905d101eb2da424a9a9a", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -1,6 +1,11 @@\n //! Various extensions traits for Chalk types.\n \n-use crate::{Interner, Ty, TyKind};\n+use hir_def::{AssocContainerId, Lookup, TraitId};\n+\n+use crate::{\n+    db::HirDatabase, from_assoc_type_id, to_chalk_trait_id, Interner, ProjectionTy, TraitRef, Ty,\n+    TyKind,\n+};\n \n pub trait TyExt {\n     fn is_unit(&self) -> bool;\n@@ -11,3 +16,24 @@ impl TyExt for Ty {\n         matches!(self.kind(&Interner), TyKind::Tuple(0, _))\n     }\n }\n+\n+pub trait ProjectionTyExt {\n+    fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef;\n+    fn trait_(&self, db: &dyn HirDatabase) -> TraitId;\n+}\n+\n+impl ProjectionTyExt for ProjectionTy {\n+    fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef {\n+        TraitRef {\n+            trait_id: to_chalk_trait_id(self.trait_(db)),\n+            substitution: self.substitution.clone(),\n+        }\n+    }\n+\n+    fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n+        match from_assoc_type_id(self.associated_ty_id).lookup(db.upcast()).container {\n+            AssocContainerId::TraitId(it) => it,\n+            _ => panic!(\"projection ty without parent trait\"),\n+        }\n+    }\n+}"}, {"sha": "4ef8024d0ab1da385c2657a275e75896d0650f30", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -19,10 +19,11 @@ use hir_expand::name::Name;\n \n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx,\n-    lt_from_placeholder_idx, primitive, to_assoc_type_id, traits::chalk::from_chalk,\n+    lt_from_placeholder_idx, primitive, subst_prefix, to_assoc_type_id, traits::chalk::from_chalk,\n     utils::generics, AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, DomainGoal, GenericArg,\n     ImplTraitId, Interner, Lifetime, LifetimeData, LifetimeOutlives, Mutability, OpaqueTy,\n-    ProjectionTy, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind, WhereClause,\n+    ProjectionTy, ProjectionTyExt, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind,\n+    WhereClause,\n };\n \n pub struct HirFormatter<'a> {\n@@ -483,9 +484,11 @@ impl HirDisplay for Ty {\n                                             default_from = i + 1;\n                                         }\n                                         (_, Some(default_parameter)) => {\n-                                            let actual_default = default_parameter\n-                                                .clone()\n-                                                .substitute(&Interner, &parameters.prefix(i));\n+                                            let actual_default =\n+                                                default_parameter.clone().substitute(\n+                                                    &Interner,\n+                                                    &subst_prefix(parameters, i),\n+                                                );\n                                             if parameter.assert_ty_ref(&Interner) != &actual_default\n                                             {\n                                                 default_from = i + 1;"}, {"sha": "185a2dfc3978f1fb8854471cb322bf97c2ac5cf0", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -22,8 +22,8 @@ use crate::{\n     to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, InEnvironment, Interner, Rawness, Scalar,\n-    Substitution, TraitRef, Ty, TyBuilder, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, InEnvironment, Interner, ProjectionTyExt,\n+    Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind,\n };\n \n use super::{\n@@ -180,7 +180,8 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.infer_expr(*body, &Expectation::none());\n                 let impl_trait_id = crate::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, *body);\n                 let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n-                TyKind::OpaqueType(opaque_ty_id, Substitution::single(inner_ty)).intern(&Interner)\n+                TyKind::OpaqueType(opaque_ty_id, Substitution::from1(&Interner, inner_ty))\n+                    .intern(&Interner)\n             }\n             Expr::Loop { body, label } => {\n                 self.breakables.push(BreakableContext {\n@@ -266,7 +267,8 @@ impl<'a> InferenceContext<'a> {\n                 .intern(&Interner);\n                 let closure_id = self.db.intern_closure((self.owner, tgt_expr)).into();\n                 let closure_ty =\n-                    TyKind::Closure(closure_id, Substitution::single(sig_ty)).intern(&Interner);\n+                    TyKind::Closure(closure_id, Substitution::from1(&Interner, sig_ty))\n+                        .intern(&Interner);\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to\n@@ -962,8 +964,10 @@ impl<'a> InferenceContext<'a> {\n                     if let AssocContainerId::TraitId(trait_) = f.lookup(self.db.upcast()).container\n                     {\n                         // construct a TraitRef\n-                        let substs =\n-                            parameters.prefix(generics(self.db.upcast(), trait_.into()).len());\n+                        let substs = crate::subst_prefix(\n+                            &*parameters,\n+                            generics(self.db.upcast(), trait_.into()).len(),\n+                        );\n                         self.push_obligation(\n                             TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs }\n                                 .cast(&Interner),"}, {"sha": "f74b22b583ff8352c8356752bd70b6f69c13214a", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 79, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -31,7 +31,6 @@ mod test_db;\n use std::sync::Arc;\n \n use itertools::Itertools;\n-use smallvec::SmallVec;\n \n use base_db::salsa;\n use hir_def::{\n@@ -43,22 +42,20 @@ use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::TyBuilder;\n-pub use chalk_ext::TyExt;\n+pub use chalk_ext::{ProjectionTyExt, TyExt};\n pub use infer::{could_unify, InferenceResult, InferenceVar};\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n-pub use traits::TraitEnvironment;\n+pub use traits::{chalk::Interner, TraitEnvironment};\n pub use types::*;\n pub use walk::TypeWalk;\n \n pub use chalk_ir::{\n     cast::Cast, AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind,\n };\n \n-pub use crate::traits::chalk::Interner;\n-\n pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub type FnDefId = chalk_ir::FnDefId<Interner>;\n@@ -76,69 +73,23 @@ pub type LifetimeOutlives = chalk_ir::LifetimeOutlives<Interner>;\n \n pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n \n-impl ProjectionTy {\n-    pub fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef {\n-        TraitRef {\n-            trait_id: to_chalk_trait_id(self.trait_(db)),\n-            substitution: self.substitution.clone(),\n-        }\n-    }\n-\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.interned()[0].assert_ty_ref(interner)\n-    }\n-\n-    fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n-        match from_assoc_type_id(self.associated_ty_id).lookup(db.upcast()).container {\n-            AssocContainerId::TraitId(it) => it,\n-            _ => panic!(\"projection ty without parent trait\"),\n-        }\n-    }\n-}\n-\n pub type FnSig = chalk_ir::FnSig<Interner>;\n \n-impl Substitution {\n-    pub fn single(ty: Ty) -> Substitution {\n-        Substitution::intern({\n-            let mut v = SmallVec::new();\n-            v.push(ty.cast(&Interner));\n-            v\n-        })\n-    }\n-\n-    pub fn prefix(&self, n: usize) -> Substitution {\n-        Substitution::intern(self.interned()[..std::cmp::min(self.len(&Interner), n)].into())\n-    }\n-\n-    pub fn suffix(&self, n: usize) -> Substitution {\n-        Substitution::intern(\n-            self.interned()[self.len(&Interner) - std::cmp::min(self.len(&Interner), n)..].into(),\n-        )\n-    }\n+// FIXME: get rid of this\n+pub fn subst_prefix(s: &Substitution, n: usize) -> Substitution {\n+    Substitution::intern(s.interned()[..std::cmp::min(s.len(&Interner), n)].into())\n }\n \n /// Return an index of a parameter in the generic type parameter list by it's id.\n pub fn param_idx(db: &dyn HirDatabase, id: TypeParamId) -> Option<usize> {\n     generics(db.upcast(), id.parent).param_idx(id)\n }\n \n-impl<T> Binders<T> {\n-    pub fn wrap_empty(value: T) -> Self\n-    where\n-        T: TypeWalk,\n-    {\n-        Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n-    }\n-}\n-\n-impl<T: TypeWalk> Binders<T> {\n-    /// Substitutes all variables.\n-    pub fn substitute(self, interner: &Interner, subst: &Substitution) -> T {\n-        let (value, binders) = self.into_value_and_skipped_binders();\n-        assert_eq!(subst.len(interner), binders.len(interner));\n-        value.subst_bound_vars(subst)\n-    }\n+pub fn wrap_empty_binders<T>(value: T) -> Binders<T>\n+where\n+    T: TypeWalk,\n+{\n+    Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n }\n \n pub fn make_only_type_binders<T>(num_vars: usize, value: T) -> Binders<T> {\n@@ -153,31 +104,11 @@ pub fn make_only_type_binders<T>(num_vars: usize, value: T) -> Binders<T> {\n }\n \n impl TraitRef {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n-    }\n-\n     pub fn hir_trait_id(&self) -> TraitId {\n         from_chalk_trait_id(self.trait_id)\n     }\n }\n \n-impl WhereClause {\n-    pub fn is_implemented(&self) -> bool {\n-        matches!(self, WhereClause::Implemented(_))\n-    }\n-\n-    pub fn trait_ref(&self, db: &dyn HirDatabase) -> Option<TraitRef> {\n-        match self {\n-            WhereClause::Implemented(tr) => Some(tr.clone()),\n-            WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(proj), .. }) => {\n-                Some(proj.trait_ref(db))\n-            }\n-            WhereClause::AliasEq(_) => None,\n-        }\n-    }\n-}\n-\n impl<T> Canonical<T> {\n     pub fn new(value: T, kinds: impl IntoIterator<Item = TyVariableKind>) -> Self {\n         let kinds = kinds.into_iter().map(|tk| {"}, {"sha": "6cef8095f143d0a82a4c9d1b47e7178cb6555a68", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -384,7 +384,9 @@ impl<'a> TyLoweringContext<'a> {\n                             1,\n                             QuantifiedWhereClauses::from_iter(\n                                 &Interner,\n-                                Some(Binders::wrap_empty(WhereClause::Implemented(trait_ref))),\n+                                Some(crate::wrap_empty_binders(WhereClause::Implemented(\n+                                    trait_ref,\n+                                ))),\n                             ),\n                         ),\n                     };\n@@ -720,7 +722,7 @@ impl<'a> TyLoweringContext<'a> {\n         let trait_ref = match bound {\n             TypeBound::Path(path) => {\n                 bindings = self.lower_trait_ref_from_path(path, Some(self_ty));\n-                bindings.clone().map(WhereClause::Implemented).map(|b| Binders::wrap_empty(b))\n+                bindings.clone().map(WhereClause::Implemented).map(|b| crate::wrap_empty_binders(b))\n             }\n             TypeBound::Lifetime(_) => None,\n             TypeBound::Error => None,\n@@ -767,7 +769,7 @@ impl<'a> TyLoweringContext<'a> {\n                     let ty = self.lower_ty(type_ref);\n                     let alias_eq =\n                         AliasEq { alias: AliasTy::Projection(projection_ty.clone()), ty };\n-                    preds.push(Binders::wrap_empty(WhereClause::AliasEq(alias_eq)));\n+                    preds.push(crate::wrap_empty_binders(WhereClause::AliasEq(alias_eq)));\n                 }\n                 for bound in &binding.bounds {\n                     preds.extend(self.lower_type_bound("}, {"sha": "d6de844a89404b18fb924688a7af94acdd680405", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -709,8 +709,9 @@ pub(crate) fn inherent_impl_substs(\n ) -> Option<Substitution> {\n     // we create a var for each type parameter of the impl; we need to keep in\n     // mind here that `self_ty` might have vars of its own\n+    let self_ty_vars = self_ty.binders.len(&Interner);\n     let vars = TyBuilder::subst_for_def(db, impl_id)\n-        .fill_with_bound_vars(DebruijnIndex::INNERMOST, self_ty.binders.len(&Interner))\n+        .fill_with_bound_vars(DebruijnIndex::INNERMOST, self_ty_vars)\n         .build();\n     let self_ty_with_vars = db.impl_self_ty(impl_id).substitute(&Interner, &vars);\n     let mut kinds = self_ty.binders.interned().to_vec();\n@@ -725,14 +726,15 @@ pub(crate) fn inherent_impl_substs(\n         binders: CanonicalVarKinds::from_iter(&Interner, kinds),\n         value: (self_ty_with_vars, self_ty.value.clone()),\n     };\n-    let substs = super::infer::unify(&tys);\n+    let substs = super::infer::unify(&tys)?;\n     // We only want the substs for the vars we added, not the ones from self_ty.\n     // Also, if any of the vars we added are still in there, we replace them by\n     // Unknown. I think this can only really happen if self_ty contained\n     // Unknown, and in that case we want the result to contain Unknown in those\n     // places again.\n-    substs\n-        .map(|s| fallback_bound_vars(s.suffix(vars.len(&Interner)), self_ty.binders.len(&Interner)))\n+    let suffix =\n+        Substitution::from_iter(&Interner, substs.iter(&Interner).cloned().skip(self_ty_vars));\n+    Some(fallback_bound_vars(suffix, self_ty_vars))\n }\n \n /// This replaces any 'free' Bound vars in `s` (i.e. those with indices past"}, {"sha": "5a8b5cd861c3b21788653cf345d1aa925e67e52c", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -220,7 +220,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     let impl_bound = WhereClause::Implemented(TraitRef {\n                         trait_id: to_chalk_trait_id(future_trait),\n                         // Self type as the first parameter.\n-                        substitution: Substitution::single(\n+                        substitution: Substitution::from1(\n+                            &Interner,\n                             TyKind::BoundVar(BoundVar {\n                                 debruijn: DebruijnIndex::INNERMOST,\n                                 index: 0,\n@@ -232,7 +233,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                         alias: AliasTy::Projection(ProjectionTy {\n                             associated_ty_id: to_assoc_type_id(future_output),\n                             // Self type as the first parameter.\n-                            substitution: Substitution::single(\n+                            substitution: Substitution::from1(\n+                                &Interner,\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n                                     .intern(&Interner),\n                             ),\n@@ -244,8 +246,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     let bound = OpaqueTyDatumBound {\n                         bounds: make_binders(\n                             vec![\n-                                wrap_in_empty_binders(impl_bound).to_chalk(self.db),\n-                                wrap_in_empty_binders(proj_bound).to_chalk(self.db),\n+                                crate::wrap_empty_binders(impl_bound).to_chalk(self.db),\n+                                crate::wrap_empty_binders(proj_bound).to_chalk(self.db),\n                             ],\n                             1,\n                         ),\n@@ -721,7 +723,3 @@ impl From<crate::db::InternedClosureId> for chalk_ir::ClosureId<Interner> {\n         chalk_ir::ClosureId(id.as_intern_id())\n     }\n }\n-\n-fn wrap_in_empty_binders<T: crate::TypeWalk>(value: T) -> crate::Binders<T> {\n-    crate::Binders::wrap_empty(value)\n-}"}, {"sha": "9f10b889f84371281548a4daac731beaa73a5a83", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -10,9 +10,9 @@ use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId, Canonical, DomainGoal, FnPointer,\n-    GenericArg, InEnvironment, OpaqueTy, ProjectionTy, QuantifiedWhereClause, Scalar, Substitution,\n-    TraitRef, Ty, TypeWalk, WhereClause,\n+    chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId,\n+    Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy,\n+    QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n use super::interner::*;"}, {"sha": "4a626d5e719d4c85e90043dd02da69c59ddb3673", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c1e7c6a119a1035ba226f0735a0d6667a5db8/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "patch": "@@ -4,7 +4,7 @@\n use std::sync::Arc;\n \n use chalk_ir::{\n-    cast::{CastTo, Caster},\n+    cast::{Cast, CastTo, Caster},\n     BoundVar, Mutability, Scalar, TyVariableKind,\n };\n use smallvec::SmallVec;\n@@ -29,6 +29,12 @@ pub struct ProjectionTy {\n     pub substitution: Substitution,\n }\n \n+impl ProjectionTy {\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.interned()[0].assert_ty_ref(interner)\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct DynTy {\n     /// The unknown self type.\n@@ -272,6 +278,14 @@ impl Substitution {\n         self.0.iter()\n     }\n \n+    pub fn from1(_interner: &Interner, ty: Ty) -> Substitution {\n+        Substitution::intern({\n+            let mut v = SmallVec::new();\n+            v.push(ty.cast(&Interner));\n+            v\n+        })\n+    }\n+\n     pub fn from_iter(\n         interner: &Interner,\n         elements: impl IntoIterator<Item = impl CastTo<GenericArg>>,\n@@ -346,6 +360,15 @@ impl<T: Clone> Binders<&T> {\n     }\n }\n \n+impl<T: TypeWalk> Binders<T> {\n+    /// Substitutes all variables.\n+    pub fn substitute(self, interner: &Interner, subst: &Substitution) -> T {\n+        let (value, binders) = self.into_value_and_skipped_binders();\n+        assert_eq!(subst.len(interner), binders.len(interner));\n+        value.subst_bound_vars(subst)\n+    }\n+}\n+\n impl<T: std::fmt::Debug> std::fmt::Debug for Binders<T> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n         let Binders { ref binders, ref value } = *self;\n@@ -361,6 +384,12 @@ pub struct TraitRef {\n     pub substitution: Substitution,\n }\n \n+impl TraitRef {\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n+    }\n+}\n+\n /// Like `generics::WherePredicate`, but with resolved types: A condition on the\n /// parameters of a generic item.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}]}