{"sha": "2a5029ed6d161d3067f0579705596e1f2a75ef23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTAyOWVkNmQxNjFkMzA2N2YwNTc5NzA1NTk2ZTFmMmE3NWVmMjM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-19T07:31:23Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-19T07:31:23Z"}, "message": "Update MIR passes to match rustc.", "tree": {"sha": "95013a1d2521852ba6923f1958b9671aaa15896a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95013a1d2521852ba6923f1958b9671aaa15896a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a5029ed6d161d3067f0579705596e1f2a75ef23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5029ed6d161d3067f0579705596e1f2a75ef23", "html_url": "https://github.com/rust-lang/rust/commit/2a5029ed6d161d3067f0579705596e1f2a75ef23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a5029ed6d161d3067f0579705596e1f2a75ef23/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "html_url": "https://github.com/rust-lang/rust/commit/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "cc3d02d8ce297308f3be71c794d3dc43e2122e77", "filename": "src/eval_context.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a5029ed6d161d3067f0579705596e1f2a75ef23/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5029ed6d161d3067f0579705596e1f2a75ef23/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=2a5029ed6d161d3067f0579705596e1f2a75ef23", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                     let operand_ty = self.operand_ty(operand);\n                                     assert_eq!(self.type_size(operand_ty)?, Some(0));\n                                 }\n-                                self.write_primval(dest, PrimVal::from_i64(0), dest_ty)?;\n+                                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n                             }\n                         } else {\n                             bug!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n@@ -1423,11 +1423,21 @@ pub fn run_mir_passes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     passes.push_pass(Box::new(::rustc_mir::transform::no_landing_pads::NoLandingPads));\n     passes.push_pass(Box::new(::rustc_mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\")));\n \n+    // From here on out, regions are gone.\n     passes.push_pass(Box::new(::rustc_mir::transform::erase_regions::EraseRegions));\n \n+    passes.push_pass(Box::new(::rustc_mir::transform::add_call_guards::AddCallGuards));\n     passes.push_pass(Box::new(::rustc_borrowck::ElaborateDrops));\n     passes.push_pass(Box::new(::rustc_mir::transform::no_landing_pads::NoLandingPads));\n     passes.push_pass(Box::new(::rustc_mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\")));\n+\n+    // No lifetime analysis based on borrowing can be done from here on out.\n+    passes.push_pass(Box::new(::rustc_mir::transform::instcombine::InstCombine::new()));\n+    passes.push_pass(Box::new(::rustc_mir::transform::deaggregator::Deaggregator));\n+    passes.push_pass(Box::new(::rustc_mir::transform::copy_prop::CopyPropagation));\n+\n+    passes.push_pass(Box::new(::rustc_mir::transform::simplify::SimplifyLocals));\n+    passes.push_pass(Box::new(::rustc_mir::transform::add_call_guards::AddCallGuards));\n     passes.push_pass(Box::new(::rustc_mir::transform::dump_mir::Marker(\"PreMiri\")));\n \n     passes.run_passes(tcx);"}, {"sha": "966fb65c3cd14c9d6ac49d97952b82043031935c", "filename": "src/lvalue.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a5029ed6d161d3067f0579705596e1f2a75ef23/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5029ed6d161d3067f0579705596e1f2a75ef23/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=2a5029ed6d161d3067f0579705596e1f2a75ef23", "patch": "@@ -1,5 +1,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n+use rustc::ty::layout::Size;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -196,7 +197,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     RawNullablePointer { .. } => {\n-                        assert_eq!(field.index(), 0);\n+                        assert_eq!(field, 0);\n                         return Ok(base);\n                     }\n \n@@ -206,6 +207,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     UntaggedUnion { .. } => return Ok(base),\n \n+                    Vector { element, count } => {\n+                        let field = field as u64;\n+                        assert!(field < count);\n+                        let elem_size = element.size(&self.tcx.data_layout).bytes();\n+                        Size::from_bytes(field * elem_size)\n+                    }\n+\n                     _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n                 };\n "}, {"sha": "527df96a18bfde53da74d0a6882c609c9806ff15", "filename": "src/step.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a5029ed6d161d3067f0579705596e1f2a75ef23/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5029ed6d161d3067f0579705596e1f2a75ef23/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=2a5029ed6d161d3067f0579705596e1f2a75ef23", "patch": "@@ -8,6 +8,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir;\n+use rustc::ty::layout::Layout;\n use rustc::ty::{subst, self};\n \n use error::{EvalResult, EvalError};\n@@ -85,7 +86,34 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc::mir::StatementKind::*;\n         match stmt.kind {\n             Assign(ref lvalue, ref rvalue) => self.eval_rvalue_into_lvalue(rvalue, lvalue)?,\n-            SetDiscriminant { .. } => unimplemented!(),\n+\n+            SetDiscriminant { ref lvalue, variant_index } => {\n+                let dest = self.eval_lvalue(lvalue)?;\n+                let dest_ty = self.lvalue_ty(lvalue);\n+                let dest_layout = self.type_layout(dest_ty)?;\n+\n+                match *dest_layout {\n+                    Layout::General { discr, ref variants, .. } => {\n+                        let discr_size = discr.size().bytes();\n+                        let discr_offset = variants[variant_index].offsets[0].bytes();\n+\n+                        // FIXME(solson)\n+                        let dest = self.force_allocation(dest)?;\n+                        let discr_dest = (dest.to_ptr()).offset(discr_offset);\n+\n+                        self.memory.write_uint(discr_dest, variant_index as u64, discr_size)?;\n+                    }\n+\n+                    Layout::RawNullablePointer { nndiscr, .. } => {\n+                        use value::PrimVal;\n+                        if variant_index as u64 != nndiscr {\n+                            self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                        }\n+                    }\n+\n+                    _ => bug!(\"SetDiscriminant on {} represented as {:#?}\", dest_ty, dest_layout),\n+                }\n+            }\n \n             // Miri can safely ignore these. Only translation needs it.\n             StorageLive(_) |"}]}