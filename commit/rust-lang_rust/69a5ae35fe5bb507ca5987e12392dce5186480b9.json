{"sha": "69a5ae35fe5bb507ca5987e12392dce5186480b9", "node_id": "C_kwDOAAsO6NoAKDY5YTVhZTM1ZmU1YmI1MDdjYTU5ODdlMTIzOTJkY2U1MTg2NDgwYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-15T13:19:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-15T13:19:25Z"}, "message": "Auto merge of #95841 - ChrisDenton:pipe-server, r=m-ou-se\n\nWindows: Use a pipe relay for chaining pipes\n\nFixes #95759\n\nThis fixes the issue by chaining pipes synchronously and manually pumping messages between them. It's not ideal but it has the advantage of not costing anything if pipes are not chained (\"don't pay for what you don't use\") and it also avoids breaking existing code that rely on our end of the pipe being asynchronous (which includes rustc's own testing framework).\n\nLibraries can avoid needing this by using their own pipes to chain commands.", "tree": {"sha": "38bfe5c22bb7bd1e29a01a5f0d353cc9e40608f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bfe5c22bb7bd1e29a01a5f0d353cc9e40608f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a5ae35fe5bb507ca5987e12392dce5186480b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a5ae35fe5bb507ca5987e12392dce5186480b9", "html_url": "https://github.com/rust-lang/rust/commit/69a5ae35fe5bb507ca5987e12392dce5186480b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a5ae35fe5bb507ca5987e12392dce5186480b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7575f9670f3c837def3d186ae09366c75c7632e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7575f9670f3c837def3d186ae09366c75c7632e", "html_url": "https://github.com/rust-lang/rust/commit/e7575f9670f3c837def3d186ae09366c75c7632e"}, {"sha": "90130549f4d82e5d269b40542ee21866a8d4dcc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/90130549f4d82e5d269b40542ee21866a8d4dcc2", "html_url": "https://github.com/rust-lang/rust/commit/90130549f4d82e5d269b40542ee21866a8d4dcc2"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "013c776c476c361dce272d3e28a205534cae4656", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/69a5ae35fe5bb507ca5987e12392dce5186480b9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a5ae35fe5bb507ca5987e12392dce5186480b9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=69a5ae35fe5bb507ca5987e12392dce5186480b9", "patch": "@@ -165,6 +165,46 @@ pub fn anon_pipe(ours_readable: bool, their_handle_inheritable: bool) -> io::Res\n     }\n }\n \n+/// Takes an asynchronous source pipe and returns a synchronous pipe suitable\n+/// for sending to a child process.\n+///\n+/// This is achieved by creating a new set of pipes and spawning a thread that\n+/// relays messages between the source and the synchronous pipe.\n+pub fn spawn_pipe_relay(\n+    source: &AnonPipe,\n+    ours_readable: bool,\n+    their_handle_inheritable: bool,\n+) -> io::Result<AnonPipe> {\n+    // We need this handle to live for the lifetime of the thread spawned below.\n+    let source = source.duplicate()?;\n+\n+    // create a new pair of anon pipes.\n+    let Pipes { theirs, ours } = anon_pipe(ours_readable, their_handle_inheritable)?;\n+\n+    // Spawn a thread that passes messages from one pipe to the other.\n+    // Any errors will simply cause the thread to exit.\n+    let (reader, writer) = if ours_readable { (ours, source) } else { (source, ours) };\n+    crate::thread::spawn(move || {\n+        let mut buf = [0_u8; 4096];\n+        'reader: while let Ok(len) = reader.read(&mut buf) {\n+            if len == 0 {\n+                break;\n+            }\n+            let mut start = 0;\n+            while let Ok(written) = writer.write(&buf[start..len]) {\n+                start += written;\n+                if start == len {\n+                    continue 'reader;\n+                }\n+            }\n+            break;\n+        }\n+    });\n+\n+    // Return the pipe that should be sent to the child process.\n+    Ok(theirs)\n+}\n+\n fn random_number() -> usize {\n     static N: AtomicUsize = AtomicUsize::new(0);\n     loop {\n@@ -192,6 +232,9 @@ impl AnonPipe {\n     pub fn into_handle(self) -> Handle {\n         self.inner\n     }\n+    fn duplicate(&self) -> io::Result<Self> {\n+        self.inner.duplicate(0, false, c::DUPLICATE_SAME_ACCESS).map(|inner| AnonPipe { inner })\n+    }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         let result = unsafe {"}, {"sha": "a0c0f5dc3ec2cf499741a2d990a163c64c93fae5", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69a5ae35fe5bb507ca5987e12392dce5186480b9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a5ae35fe5bb507ca5987e12392dce5186480b9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=69a5ae35fe5bb507ca5987e12392dce5186480b9", "patch": "@@ -172,6 +172,7 @@ pub enum Stdio {\n     Inherit,\n     Null,\n     MakePipe,\n+    Pipe(AnonPipe),\n     Handle(Handle),\n }\n \n@@ -528,6 +529,11 @@ impl Stdio {\n                 Ok(pipes.theirs.into_handle())\n             }\n \n+            Stdio::Pipe(ref source) => {\n+                let ours_readable = stdio_id != c::STD_INPUT_HANDLE;\n+                pipe::spawn_pipe_relay(source, ours_readable, true).map(AnonPipe::into_handle)\n+            }\n+\n             Stdio::Handle(ref handle) => handle.duplicate(0, true, c::DUPLICATE_SAME_ACCESS),\n \n             // Open up a reference to NUL with appropriate read/write\n@@ -552,7 +558,7 @@ impl Stdio {\n \n impl From<AnonPipe> for Stdio {\n     fn from(pipe: AnonPipe) -> Stdio {\n-        Stdio::Handle(pipe.into_handle())\n+        Stdio::Pipe(pipe)\n     }\n }\n "}]}