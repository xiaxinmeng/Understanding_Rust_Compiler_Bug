{"sha": "cf255c6dc1a9c41bf8e98865d85f8577ce8d2056", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjU1YzZkYzFhOWM0MWJmOGU5ODg2NWQ4NWY4NTc3Y2U4ZDIwNTY=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-04T17:34:50Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-12T19:20:56Z"}, "message": "Use new preferred consts in int docs", "tree": {"sha": "45240b4627ba663575722de5e344ba4b4ac8e10a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45240b4627ba663575722de5e344ba4b4ac8e10a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056", "html_url": "https://github.com/rust-lang/rust/commit/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd71fbe8d51dc291f87fdb6beb12e174a304bd0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd71fbe8d51dc291f87fdb6beb12e174a304bd0c", "html_url": "https://github.com/rust-lang/rust/commit/fd71fbe8d51dc291f87fdb6beb12e174a304bd0c"}], "stats": {"total": 48, "additions": 13, "deletions": 35}, "files": [{"sha": "782d1103000be8cdd543575e0a5fc6a804735ef8", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cf255c6dc1a9c41bf8e98865d85f8577ce8d2056", "patch": "@@ -805,8 +805,7 @@ assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".checked_rem(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\",\n@@ -836,8 +835,6 @@ if `rhs == 0` or the division results in overflow.\n Basic usage:\n \n ```\n-use std::\", stringify!($SelfT), \";\n-\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n@@ -864,8 +861,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".checked_neg(), Some(-5));\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n@@ -936,8 +932,7 @@ $EndFeature, \"\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!((-5\", stringify!($SelfT), \").checked_abs(), Some(5));\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n@@ -1115,8 +1110,7 @@ numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(10\", stringify!($SelfT), \".saturating_mul(12), 120);\n assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_mul(10), \", stringify!($SelfT), \"::MAX);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($SelfT), \"::MIN);\",\n@@ -1148,8 +1142,7 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!((-4\", stringify!($SelfT), \").saturating_pow(3), -64);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT), \"::MIN);\",\n@@ -1536,8 +1529,7 @@ occur. If an overflow would have occurred then the wrapped value is returned.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($SelfT),\n \"::MIN, true));\", $EndFeature, \"\n@@ -1564,8 +1556,7 @@ would occur. If an overflow would have occurred then the wrapped value is return\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_sub(2), (3, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($SelfT),\n \"::MAX, true));\", $EndFeature, \"\n@@ -1622,8 +1613,7 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_div(2), (2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div(-1), (\", stringify!($SelfT),\n \"::MIN, true));\",\n@@ -1658,8 +1648,6 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-use std::\", stringify!($SelfT), \";\n-\n assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringify!($SelfT),\n \"::MIN, true));\n@@ -1693,8 +1681,7 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_rem(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem(-1), (0, true));\",\n $EndFeature, \"\n@@ -1729,8 +1716,6 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-use std::\", stringify!($SelfT), \";\n-\n assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n@@ -1761,8 +1746,6 @@ minimum value will be returned again and `true` will be returned for an overflow\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n assert_eq!(2\", stringify!($SelfT), \".overflowing_neg(), (-2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($SelfT),\n \"::MIN, true));\", $EndFeature, \"\n@@ -3187,8 +3170,7 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(2\", stringify!($SelfT), \".saturating_mul(10), 20);\n assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($SelfT),\n \"::MAX);\", $EndFeature, \"\n@@ -3215,8 +3197,7 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(4\", stringify!($SelfT), \".saturating_pow(3), 64);\n assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\",\n $EndFeature, \"\n@@ -3553,8 +3534,7 @@ have occurred then the wrapped value is returned.\n Basic usage\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndFeature, \"\n ```\"),\n@@ -3581,8 +3561,7 @@ have occurred then the wrapped value is returned.\n Basic usage\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_sub(2), (3, false));\n assert_eq!(0\", stringify!($SelfT), \".overflowing_sub(1), (\", stringify!($SelfT), \"::MAX, true));\",\n $EndFeature, \"\n@@ -4868,7 +4847,6 @@ impl usize {\n ///\n /// ```\n /// use std::num::FpCategory;\n-/// use std::f32;\n ///\n /// let num = 12.4_f32;\n /// let inf = f32::INFINITY;"}]}