{"sha": "f12e772b83c3ff6a099a66920f73fa145e21b0f3", "node_id": "C_kwDOAAsO6NoAKGYxMmU3NzJiODNjM2ZmNmEwOTlhNjY5MjBmNzNmYTE0NWUyMWIwZjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-25T16:45:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-28T17:32:35Z"}, "message": "Rename At::normalize to At::query_normalize", "tree": {"sha": "e0af5e44df5d0b91a7b86d61c475294272cd86f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0af5e44df5d0b91a7b86d61c475294272cd86f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f12e772b83c3ff6a099a66920f73fa145e21b0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f12e772b83c3ff6a099a66920f73fa145e21b0f3", "html_url": "https://github.com/rust-lang/rust/commit/f12e772b83c3ff6a099a66920f73fa145e21b0f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f12e772b83c3ff6a099a66920f73fa145e21b0f3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a09420ac48658cad726e0a6997687ceac4151e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a09420ac48658cad726e0a6997687ceac4151e3", "html_url": "https://github.com/rust-lang/rust/commit/8a09420ac48658cad726e0a6997687ceac4151e3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "809f107404ddf2b2457b5aab2e06e98ed2b39956", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f12e772b83c3ff6a099a66920f73fa145e21b0f3", "patch": "@@ -1933,7 +1933,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let infcx = self.tcx.infer_ctxt().build();\n             infcx\n                 .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n-                .normalize(candidate)\n+                .query_normalize(candidate)\n                 .map_or(candidate, |normalized| normalized.value)\n         };\n "}, {"sha": "1d529990652225991150c4c1be1bb1b60c4cfcda", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=f12e772b83c3ff6a099a66920f73fa145e21b0f3", "patch": "@@ -23,7 +23,7 @@ use super::NoSolution;\n pub use rustc_middle::traits::query::NormalizationResult;\n \n pub trait AtExt<'tcx> {\n-    fn normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n+    fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n         T: TypeFoldable<'tcx>;\n }\n@@ -42,7 +42,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n     /// normalizing, but for now should be used only when we actually\n     /// know that normalization will succeed, since error reporting\n     /// and other details are still \"under development\".\n-    fn normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n+    fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n         T: TypeFoldable<'tcx>,\n     {"}, {"sha": "87f9862017fc5c91dd24c764d9620a53f98fd5f5", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=f12e772b83c3ff6a099a66920f73fa145e21b0f3", "patch": "@@ -100,7 +100,7 @@ fn dropck_outlives<'tcx>(\n             // to push them onto the stack to be expanded.\n             for ty in constraints.dtorck_types.drain(..) {\n                 let Normalized { value: ty, obligations } =\n-                    ocx.infcx.at(&cause, param_env).normalize(ty)?;\n+                    ocx.infcx.at(&cause, param_env).query_normalize(ty)?;\n                 ocx.register_obligations(obligations);\n \n                 debug!(\"dropck_outlives: ty from dtorck_types = {:?}\", ty);"}, {"sha": "0309e2ba92c2737a02179c39e3f7ba4137f80736", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=f12e772b83c3ff6a099a66920f73fa145e21b0f3", "patch": "@@ -29,7 +29,7 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n     let ParamEnvAnd { param_env, value } = goal;\n     let infcx = tcx.infer_ctxt().build();\n     let cause = ObligationCause::dummy();\n-    match infcx.at(&cause, param_env).normalize(value) {\n+    match infcx.at(&cause, param_env).query_normalize(value) {\n         Ok(Normalized { value: normalized_value, obligations: normalized_obligations }) => {\n             // We don't care about the `obligations`; they are\n             // always only region relations, and we are about to"}, {"sha": "8ffa89023c6cb3ae7c39fdce8c506a10104eeddb", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12e772b83c3ff6a099a66920f73fa145e21b0f3/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=f12e772b83c3ff6a099a66920f73fa145e21b0f3", "patch": "@@ -137,7 +137,7 @@ where\n {\n     let (param_env, Normalize { value }) = key.into_parts();\n     let Normalized { value, obligations } =\n-        ocx.infcx.at(&ObligationCause::dummy(), param_env).normalize(value)?;\n+        ocx.infcx.at(&ObligationCause::dummy(), param_env).query_normalize(value)?;\n     ocx.register_obligations(obligations);\n     Ok(value)\n }"}, {"sha": "9d572e2291e5ce999b460eeee4cb2e57d261c9ca", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f12e772b83c3ff6a099a66920f73fa145e21b0f3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f12e772b83c3ff6a099a66920f73fa145e21b0f3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f12e772b83c3ff6a099a66920f73fa145e21b0f3", "patch": "@@ -1588,7 +1588,7 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>>\n     let infcx = cx.tcx.infer_ctxt().build();\n     let normalized = infcx\n         .at(&ObligationCause::dummy(), cx.param_env)\n-        .normalize(ty)\n+        .query_normalize(ty)\n         .map(|resolved| infcx.resolve_vars_if_possible(resolved.value));\n     match normalized {\n         Ok(normalized_value) => {"}]}