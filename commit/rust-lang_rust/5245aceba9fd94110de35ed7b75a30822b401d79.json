{"sha": "5245aceba9fd94110de35ed7b75a30822b401d79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNDVhY2ViYTlmZDk0MTEwZGUzNWVkN2I3NWEzMDgyMmI0MDFkNzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-29T03:57:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-29T03:57:18Z"}, "message": "test: Fix benchmarks. rs=rustbot", "tree": {"sha": "866ddda5ee665206457764b7173ce64faf475967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866ddda5ee665206457764b7173ce64faf475967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5245aceba9fd94110de35ed7b75a30822b401d79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5245aceba9fd94110de35ed7b75a30822b401d79", "html_url": "https://github.com/rust-lang/rust/commit/5245aceba9fd94110de35ed7b75a30822b401d79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5245aceba9fd94110de35ed7b75a30822b401d79/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd8692e9d6a78b115d44f805c972839e80af79b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8692e9d6a78b115d44f805c972839e80af79b", "html_url": "https://github.com/rust-lang/rust/commit/5bd8692e9d6a78b115d44f805c972839e80af79b"}], "stats": {"total": 99, "additions": 47, "deletions": 52}, "files": [{"sha": "83ca9fd06c9eda3004f5713311bf1f1812cac567", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=5245aceba9fd94110de35ed7b75a30822b401d79", "patch": "@@ -16,9 +16,9 @@\n \n extern mod std;\n use std::map;\n-use mutable::Mut;\n-use send_map::linear::*;\n-use io::WriterUtil;\n+use core::mutable::Mut;\n+use core::send_map::linear::*;\n+use core::io::WriterUtil;\n \n struct Results {\n     sequential_ints: float,\n@@ -185,4 +185,4 @@ fn main() {\n             rng, num_keys, &mut results);\n         write_results(\"libstd::map::hashmap\", &results);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "45fec9edeb96de9ea04de0536b3afbdfa637d845", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=5245aceba9fd94110de35ed7b75a30822b401d79", "patch": "@@ -25,9 +25,9 @@ use std::map::HashMap;\n use std::deque;\n use std::deque::Deque;\n use std::par;\n-use io::WriterUtil;\n-use oldcomm::*;\n-use int::abs;\n+use core::io::WriterUtil;\n+use core::oldcomm::*;\n+use core::int::abs;\n \n type node_id = i64;\n type graph = ~[~[node_id]];"}, {"sha": "43b20ed2db41bbd5b59d13fb334807250e173c82", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=5245aceba9fd94110de35ed7b75a30822b401d79", "patch": "@@ -14,7 +14,8 @@\n // that things will look really good once we get that lock out of the\n // message path.\n \n-use oldcomm::*;\n+use core::oldcomm::*;\n+use core::oldcomm;\n \n extern mod std;\n use std::time;"}, {"sha": "1c0a70c32a2de0339916e46374224dfb5f4e0fee", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=5245aceba9fd94110de35ed7b75a30822b401d79", "patch": "@@ -13,6 +13,8 @@\n \n extern mod std;\n \n+use core::os;\n+\n // Using sqrt from the standard library is way slower than using libc\n // directly even though std just calls libc, I guess it must be\n // because the the indirection through another dynamic linker\n@@ -45,9 +47,9 @@ fn main() {\n }\n \n mod NBodySystem {\n-    #[legacy_exports];\n+    use Body;\n \n-    fn make() -> ~[Body::props] {\n+    pub fn make() -> ~[Body::props] {\n         let mut bodies: ~[Body::props] =\n             ~[Body::sun(),\n               Body::jupiter(),\n@@ -74,8 +76,7 @@ mod NBodySystem {\n         return bodies;\n     }\n \n-    fn advance(bodies: &mut [Body::props], dt: float) {\n-\n+    pub fn advance(bodies: &mut [Body::props], dt: float) {\n         let mut i = 0;\n         while i < 5 {\n             let mut j = i + 1;\n@@ -95,16 +96,16 @@ mod NBodySystem {\n         }\n     }\n \n-    fn advance_one(bi: &mut Body::props,\n-                   bj: &mut Body::props,\n-                   dt: float) unsafe {\n+    pub fn advance_one(bi: &mut Body::props,\n+                       bj: &mut Body::props,\n+                       dt: float) unsafe {\n         let dx = bi.x - bj.x;\n         let dy = bi.y - bj.y;\n         let dz = bi.z - bj.z;\n \n         let dSquared = dx * dx + dy * dy + dz * dz;\n \n-        let distance = libc::sqrt(dSquared);\n+        let distance = ::libc::sqrt(dSquared);\n         let mag = dt / (dSquared * distance);\n \n         bi.vx -= dx * bj.mass * mag;\n@@ -116,13 +117,13 @@ mod NBodySystem {\n         bj.vz += dz * bi.mass * mag;\n     }\n \n-    fn move_(b: &mut Body::props, dt: float) {\n+    pub fn move_(b: &mut Body::props, dt: float) {\n         b.x += dt * b.vx;\n         b.y += dt * b.vy;\n         b.z += dt * b.vz;\n     }\n \n-    fn energy(bodies: &[Body::props]) -> float unsafe {\n+    pub fn energy(bodies: &[Body::props]) -> float unsafe {\n         let mut dx;\n         let mut dy;\n         let mut dz;\n@@ -142,7 +143,7 @@ mod NBodySystem {\n                 dy = bodies[i].y - bodies[j].y;\n                 dz = bodies[i].z - bodies[j].z;\n \n-                distance = libc::sqrt(dx * dx + dy * dy + dz * dz);\n+                distance = ::libc::sqrt(dx * dx + dy * dy + dz * dz);\n                 e -= bodies[i].mass * bodies[j].mass / distance;\n \n                 j += 1;\n@@ -156,14 +157,14 @@ mod NBodySystem {\n }\n \n mod Body {\n-    #[legacy_exports];\n+    use Body;\n \n-    const PI: float = 3.141592653589793;\n-    const SOLAR_MASS: float = 39.478417604357432;\n+    pub const PI: float = 3.141592653589793;\n+    pub const SOLAR_MASS: float = 39.478417604357432;\n     // was 4 * PI * PI originally\n-    const DAYS_PER_YEAR: float = 365.24;\n+    pub const DAYS_PER_YEAR: float = 365.24;\n \n-    type props =\n+    pub type props =\n         {mut x: float,\n          mut y: float,\n          mut z: float,\n@@ -172,7 +173,7 @@ mod Body {\n          mut vz: float,\n          mass: float};\n \n-    fn jupiter() -> Body::props {\n+    pub fn jupiter() -> Body::props {\n         return {mut x: 4.84143144246472090e+00,\n              mut y: -1.16032004402742839e+00,\n              mut z: -1.03622044471123109e-01,\n@@ -182,7 +183,7 @@ mod Body {\n              mass: 9.54791938424326609e-04 * SOLAR_MASS};\n     }\n \n-    fn saturn() -> Body::props {\n+    pub fn saturn() -> Body::props {\n         return {mut x: 8.34336671824457987e+00,\n              mut y: 4.12479856412430479e+00,\n              mut z: -4.03523417114321381e-01,\n@@ -192,7 +193,7 @@ mod Body {\n              mass: 2.85885980666130812e-04 * SOLAR_MASS};\n     }\n \n-    fn uranus() -> Body::props {\n+    pub fn uranus() -> Body::props {\n         return {mut x: 1.28943695621391310e+01,\n              mut y: -1.51111514016986312e+01,\n              mut z: -2.23307578892655734e-01,\n@@ -202,7 +203,7 @@ mod Body {\n              mass: 4.36624404335156298e-05 * SOLAR_MASS};\n     }\n \n-    fn neptune() -> Body::props {\n+    pub fn neptune() -> Body::props {\n         return {mut x: 1.53796971148509165e+01,\n              mut y: -2.59193146099879641e+01,\n              mut z: 1.79258772950371181e-01,\n@@ -212,7 +213,7 @@ mod Body {\n              mass: 5.15138902046611451e-05 * SOLAR_MASS};\n     }\n \n-    fn sun() -> Body::props {\n+    pub fn sun() -> Body::props {\n         return {mut x: 0.0,\n              mut y: 0.0,\n              mut z: 0.0,\n@@ -222,7 +223,7 @@ mod Body {\n              mass: SOLAR_MASS};\n     }\n \n-    fn offset_momentum(props: &mut Body::props,\n+    pub fn offset_momentum(props: &mut Body::props,\n                        px: float, py: float, pz: float) {\n         props.vx = -px / SOLAR_MASS;\n         props.vy = -py / SOLAR_MASS;"}, {"sha": "e24979a4e060be78dc009e4b9a445f8e7255a4dd", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5245aceba9fd94110de35ed7b75a30822b401d79/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=5245aceba9fd94110de35ed7b75a30822b401d79", "patch": "@@ -22,22 +22,20 @@\n \n extern mod std;\n \n-use option = option;\n-use option::Some;\n-use option::None;\n+use core::option;\n use std::map;\n use std::map::HashMap;\n-use hash::Hash;\n-use io::{ReaderUtil, WriterUtil};\n+use core::hash::Hash;\n+use core::io::{ReaderUtil, WriterUtil};\n \n use std::time;\n \n-use oldcomm::Chan;\n-use oldcomm::Port;\n-use oldcomm::recv;\n-use oldcomm::send;\n-use cmp::Eq;\n-use to_bytes::IterBytes;\n+use core::oldcomm::Chan;\n+use core::oldcomm::Port;\n+use core::oldcomm::recv;\n+use core::oldcomm::send;\n+use core::cmp::Eq;\n+use core::to_bytes::IterBytes;\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n@@ -117,20 +115,15 @@ fn box<T>(+x: T) -> box<T> {\n }\n \n mod map_reduce {\n-    #[legacy_exports];\n-    export putter;\n-    export getter;\n-    export mapper;\n-    export reducer;\n-    export map_reduce;\n+    use std::map;\n \n-    type putter<K: Owned, V: Owned> = fn(&K, V);\n+    pub type putter<K: Owned, V: Owned> = fn(&K, V);\n \n-    type mapper<K1: Owned, K2: Owned, V: Owned> = fn~(K1, putter<K2, V>);\n+    pub type mapper<K1: Owned, K2: Owned, V: Owned> = fn~(K1, putter<K2, V>);\n \n-    type getter<V: Owned> = fn() -> Option<V>;\n+    pub type getter<V: Owned> = fn() -> Option<V>;\n \n-    type reducer<K: Copy Owned, V: Copy Owned> = fn~(&K, getter<V>);\n+    pub type reducer<K: Copy Owned, V: Copy Owned> = fn~(&K, getter<V>);\n \n     enum ctrl_proto<K: Copy Owned, V: Copy Owned> {\n         find_reducer(K, Chan<Chan<reduce_proto<V>>>),\n@@ -245,7 +238,7 @@ mod map_reduce {\n         (*reduce)(&key, || get(p, &mut ref_count, &mut is_done) );\n     }\n \n-    fn map_reduce<K1: Copy Owned, K2: Hash IterBytes Eq Const Copy Owned, V: Copy Owned>(\n+    pub fn map_reduce<K1: Copy Owned, K2: Hash IterBytes Eq Const Copy Owned, V: Copy Owned>(\n         map: mapper<K1, K2, V>,\n         reduce: reducer<K2, V>,\n         inputs: ~[K1])"}]}