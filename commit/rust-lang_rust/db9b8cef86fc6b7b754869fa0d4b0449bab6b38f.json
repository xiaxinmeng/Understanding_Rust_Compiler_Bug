{"sha": "db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "node_id": "C_kwDOAAsO6NoAKGRiOWI4Y2VmODZmYzZiN2I3NTQ4NjlmYTBkNGIwNDQ5YmFiNmIzOGY", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-10-23T15:57:49Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-12-10T19:21:25Z"}, "message": "update tests", "tree": {"sha": "562b096f9fe748a785a78e8002adab1522cdd28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/562b096f9fe748a785a78e8002adab1522cdd28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "html_url": "https://github.com/rust-lang/rust/commit/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "html_url": "https://github.com/rust-lang/rust/commit/69d2d735bc3f7bff7c42542691283d8a5f1a60f8"}], "stats": {"total": 263, "additions": 48, "deletions": 215}, "files": [{"sha": "5cdd43cd782c46d8f1b020029064d2f030d80053", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(generic_const_exprs, adt_const_params, const_generics_defaults)]\n+#![feature(generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n // regression test for #77650\n struct C<T, const N: core::num::NonZeroUsize>([T; N.get()])"}, {"sha": "8035f826775ef5e806d6f6751595b8e04a025102", "filename": "src/test/rustdoc/const-generics/const-generic-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"foo\"]\n-#![feature(const_generics_defaults)]\n \n // @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n //      'pub struct Foo<const M: usize = 10_usize, const N: usize = M, T = i32>(_);'"}, {"sha": "afd9ed1a7235dbe956c06f227801c52a1a3e8f05", "filename": "src/test/ui/const-generics/argument_order.min.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -1,30 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:4:28\n-   |\n-LL | struct Bad<const N: usize, T> {\n-   |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n-\n-error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:10:32\n-   |\n-LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n-\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:10:36\n-   |\n-LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-   |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n-\n-error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:18:23\n-   |\n-LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n-   |                       ^^^^^^^\n-   |\n-   = note: lifetime arguments must be provided before type arguments\n-   = help: reorder the arguments: lifetimes, then types, then consts: `<'a, 'b, T, U, N, M>`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0747`."}, {"sha": "196d9b8a1e210df32588f4489f6f3cca73a8b517", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,15 +1,10 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-\n struct Bad<const N: usize, T> {\n-    //[min]~^ ERROR type parameters must be declared prior to const parameters\n     arr: [u8; { N }],\n     another: T,\n }\n \n struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n     //~^ ERROR lifetime parameters must be declared prior\n-    //[min]~^^ ERROR type parameters must be declared prior to const parameters\n     a: &'a T,\n     b: &'b U,\n }"}, {"sha": "6b33dffb434e7e351f23effe938fe1f308aaf1cc", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:10:32\n+  --> $DIR/argument_order.rs:6:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:18:23\n+  --> $DIR/argument_order.rs:13:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^", "previous_filename": "src/test/ui/const-generics/argument_order.full.stderr"}, {"sha": "4e12f7a8c6e6966d75d26f447f4953d70fea520a", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -3,9 +3,6 @@ error[E0747]: constant provided when a type was expected\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^\n-   |\n-   = note: type arguments must be provided before constant arguments\n-   = help: reorder the arguments: types, then consts: `<T, N>`\n \n error: aborting due to previous error\n "}, {"sha": "f439cd9d69fcce59abc7d74fe362a65f87f269c6", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:5:21\n-   |\n-LL | fn bar<const X: u8, 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: u8>`\n-\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:9:21\n-   |\n-LL | fn foo<const X: u8, T>(_: &T) {}\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: u8>`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "da06aca308e18bcb5a76822e9eb32fdb5e704698", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,12 +1,7 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn bar<const X: u8, 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n }\n \n fn foo<const X: u8, T>(_: &T) {}\n-//[min]~^ ERROR type parameters must be declared prior to const parameters\n \n fn main() {}"}, {"sha": "607d20c4a25f2654cd8a3e75739bc9f5821e0436", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:5:21\n+  --> $DIR/const-param-before-other-params.rs:1:21\n    |\n LL | fn bar<const X: u8, 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const X: u8>`", "previous_filename": "src/test/ui/const-generics/const-param-before-other-params.full.stderr"}, {"sha": "eed982534c206ce15c9d9f42e0babb45517269b5", "filename": "src/test/ui/const-generics/defaults/auxiliary/const_defaulty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n pub struct Defaulted<const N: usize=3>;\n impl Defaulted {\n     pub fn new() -> Self {"}, {"sha": "b836cfeaedbb774a5e04546ae73b15bab3e240a3", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:7:47\n+  --> $DIR/complex-generic-default-expr.rs:6:47\n    |\n LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    |                                               ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:10:62\n+  --> $DIR/complex-generic-default-expr.rs:9:62\n    |\n LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n    |                                                              ^ cannot perform const operation using `T`"}, {"sha": "7f50d4c9f299b2b562e041db510cd1aec2992c61", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,8 +1,7 @@\n // revisions: full min\n //[full] check-pass\n #![cfg_attr(full, feature(generic_const_exprs))]\n-#![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n //[min]~^ ERROR generic parameters may not be used in const operations"}, {"sha": "aebc5975a5a5d72d4fde0074671c4e1321cd8cc8", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,12 +1,8 @@\n-// [full] run-pass\n-// revisions: full min\n+// run-pass\n // Checks a complicated usage of unordered params\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-#![cfg_attr(full, allow(incomplete_features))]\n #![allow(dead_code)]\n \n struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n-    //[min]~^ ERROR type parameters must be declared prior to const parameters\n     args: &'a [&'a [T; M]; N],\n     specifier: A,\n }"}, {"sha": "65cb0eb14a37d1eedbea1d61534731ab04c60c06", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n-\n pub struct ConstDefault<const N: usize = 3>;\n \n impl<const N: usize> ConstDefault<N> {"}, {"sha": "c1c955d8758ad2fff37f843993ae9d79318e68f6", "filename": "src/test/ui/const-generics/defaults/const-param-as-default-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n struct Foo<const N: usize, const M: usize = N>([u8; N], [u8; M]);\n \n fn foo<const N: usize>() -> Foo<N> {"}, {"sha": "5f0cafe2ef1799290c449bb6bc43b0792b7014bb", "filename": "src/test/ui/const-generics/defaults/const-param-in-ty-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n struct Foo<const N: usize, T = [u8; N]>(T);\n \n impl<const N: usize> Foo<N> {"}, {"sha": "7a9f5732f7fa21f15511c272cb46a57a659e4efb", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(staged_api)]\n-#![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n // FIXME(const_generics_defaults): It seems like we aren't testing the right thing here,\n // I would assume that we want the attributes to apply to the const parameter defaults"}, {"sha": "45275e6092059a0f6ad53e577d552371b5a06cbd", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Struct<const N: usize = { Self; 10 }>;\n //~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n "}, {"sha": "72d7001fdf1b06bcc5956172a2ef0569b4d29ade", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,17 +1,17 @@\n error[E0735]: generic parameters cannot use `Self` in their defaults\n-  --> $DIR/default-const-param-cannot-reference-self.rs:3:34\n+  --> $DIR/default-const-param-cannot-reference-self.rs:1:34\n    |\n LL | struct Struct<const N: usize = { Self; 10 }>;\n    |                                  ^^^^ `Self` in generic parameter default\n \n error[E0735]: generic parameters cannot use `Self` in their defaults\n-  --> $DIR/default-const-param-cannot-reference-self.rs:6:30\n+  --> $DIR/default-const-param-cannot-reference-self.rs:4:30\n    |\n LL | enum Enum<const N: usize = { Self; 10 }> { }\n    |                              ^^^^ `Self` in generic parameter default\n \n error[E0735]: generic parameters cannot use `Self` in their defaults\n-  --> $DIR/default-const-param-cannot-reference-self.rs:9:32\n+  --> $DIR/default-const-param-cannot-reference-self.rs:7:32\n    |\n LL | union Union<const N: usize = { Self; 10 }> { not_empty: () }\n    |                                ^^^^ `Self` in generic parameter default"}, {"sha": "9ce46aa09dee6fa6e8f0d82a759cc3ee5d847884", "filename": "src/test/ui/const-generics/defaults/default-on-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Foo<const N: usize>;\n \n impl<const N: usize = 1> Foo<N> {}"}, {"sha": "ddfc0ead8ad8c2fe1c9990ef318dcd3ff7c90526", "filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:5:12\n+  --> $DIR/default-on-impl.rs:3:12\n    |\n LL | impl<const N: usize = 1> Foo<N> {}\n    |            ^"}, {"sha": "41a52c7eb0d8336bdbe038e256e76949cd3d48f7", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_generics_defaults)]\n struct Foo<const N: u8 = { 255 + 1 }>;\n //~^ ERROR evaluation of constant value failed\n fn main() {}"}, {"sha": "e8ebddade5c16792aafd5fd4983b1d73b690550f", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/default-param-wf-concrete.rs:2:28\n+  --> $DIR/default-param-wf-concrete.rs:1:28\n    |\n LL | struct Foo<const N: u8 = { 255 + 1 }>;\n    |                            ^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow"}, {"sha": "cd533b57bc31fe4a8a393847d8df3661cd7e18f1", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n // test that defaulted const params are not used to help type inference\n \n struct Foo<const N: u32 = 2>;"}, {"sha": "1551e81ea7577a270f3e6fa602e192049909bf7a", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed for `Foo<{_: u32}>`\n-  --> $DIR/doesnt_infer.rs:13:15\n+  --> $DIR/doesnt_infer.rs:11:15\n    |\n LL |     let foo = Foo::foo();\n    |         ---   ^^^^^^^^ cannot infer the value of const parameter `N`"}, {"sha": "25ec523cb5489e213c6fb392c281491563f68d9e", "filename": "src/test/ui/const-generics/defaults/external.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,7 +1,5 @@\n // aux-build:const_defaulty.rs\n // check-pass\n-#![feature(const_generics_defaults)]\n-\n extern crate const_defaulty;\n use const_defaulty::Defaulted;\n "}, {"sha": "ede3d873bdcf6b5d8ad2d9f82150da9b2ccdc57a", "filename": "src/test/ui/const-generics/defaults/forward-declared.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Foo<const N: usize = M, const M: usize = 10>;\n //~^ ERROR generic parameters with a default cannot use forward declared identifiers\n "}, {"sha": "4856c7a1fd2d82a90c4221be4cb4619816faafcf", "filename": "src/test/ui/const-generics/defaults/forward-declared.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,23 +1,23 @@\n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:3:29\n+  --> $DIR/forward-declared.rs:1:29\n    |\n LL | struct Foo<const N: usize = M, const M: usize = 10>;\n    |                             ^ defaulted generic parameters cannot be forward declared\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:6:27\n+  --> $DIR/forward-declared.rs:4:27\n    |\n LL | enum Bar<const N: usize = M, const M: usize = 10> {}\n    |                           ^ defaulted generic parameters cannot be forward declared\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:9:30\n+  --> $DIR/forward-declared.rs:7:30\n    |\n LL | struct Foo2<const N: usize = N>;\n    |                              ^ defaulted generic parameters cannot be forward declared\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/forward-declared.rs:12:28\n+  --> $DIR/forward-declared.rs:10:28\n    |\n LL | enum Bar2<const N: usize = N> {}\n    |                            ^ defaulted generic parameters cannot be forward declared"}, {"sha": "f082bd8d2e9ff5b9c2826f5f01b8f819c920ef8a", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-concrete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "777865d1cb6a1051a84e24f1804d9126e342c887", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-mismatched-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "8fe43feb78ac80f758a4815c611bdf306da4e6c2", "filename": "src/test/ui/const-generics/defaults/generic-expr-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "725cc36b428c7a48fb08995836b435bb50e60136", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:5:28\n-   |\n-LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n-\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:8:37\n-   |\n-LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "578938db4c43e8affbaff63a08d19f97b42ad69f", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,4 @@\n // Checks that lifetimes cannot be interspersed between consts and types.\n-// revisions: full min\n-#![feature(const_generics_defaults)]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters"}, {"sha": "e27976deb2b569dddb1eb316cf2011be19aab22f", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:5:28\n+  --> $DIR/intermixed-lifetime.rs:3:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:8:37\n+  --> $DIR/intermixed-lifetime.rs:6:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`", "previous_filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr"}, {"sha": "fce4ec4edda080c5d67e7acc4db3163c3028ea65", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n pub struct Example<const N: usize=13>;\n pub struct Example2<T=u32, const N: usize=13>(T);\n pub struct Example3<const N: usize=13, T=u32>(T);"}, {"sha": "369768191951b264300500becc2b57c36ea96eee", "filename": "src/test/ui/const-generics/defaults/mismatch.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:9:28\n+  --> $DIR/mismatch.rs:7:28\n    |\n LL |     let e: Example::<13> = ();\n    |            -------------   ^^ expected struct `Example`, found `()`\n@@ -10,7 +10,7 @@ LL |     let e: Example::<13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:12:34\n+  --> $DIR/mismatch.rs:10:34\n    |\n LL |     let e: Example2::<u32, 13> = ();\n    |            -------------------   ^^ expected struct `Example2`, found `()`\n@@ -21,7 +21,7 @@ LL |     let e: Example2::<u32, 13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:15:34\n+  --> $DIR/mismatch.rs:13:34\n    |\n LL |     let e: Example3::<13, u32> = ();\n    |            -------------------   ^^ expected struct `Example3`, found `()`\n@@ -32,7 +32,7 @@ LL |     let e: Example3::<13, u32> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:18:28\n+  --> $DIR/mismatch.rs:16:28\n    |\n LL |     let e: Example3::<7> = ();\n    |            -------------   ^^ expected struct `Example3`, found `()`\n@@ -43,7 +43,7 @@ LL |     let e: Example3::<7> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:21:28\n+  --> $DIR/mismatch.rs:19:28\n    |\n LL |     let e: Example4::<7> = ();\n    |            -------------   ^^ expected struct `Example4`, found `()`"}, {"sha": "158fa2ec1c8ffd614d2ef21c3b2cfe17471068e2", "filename": "src/test/ui/const-generics/defaults/needs-feature.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -1,8 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/needs-feature.rs:7:26\n-   |\n-LL | struct A<const N: usize, T=u32>(T);\n-   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T = u32, const N: usize>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "9ba8184e058518a21501c2ffa7451b0a63d90a76", "filename": "src/test/ui/const-generics/defaults/needs-feature.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -1,12 +0,0 @@\n-//[full] run-pass\n-// Verifies that having generic parameters after constants is not permitted without the\n-// `const_generics_defaults` feature.\n-// revisions: min full\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-\n-struct A<const N: usize, T=u32>(T);\n-//[min]~^ ERROR type parameters must be declared prior\n-\n-fn main() {\n-    let _: A<3> = A(0);\n-}"}, {"sha": "da087ffc3c4affe767d476286be9ad2d58a0e0c9", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_generics_defaults)]\n struct Foo<const M: usize = 10, 'a>(&'a u32);\n //~^ Error lifetime parameters must be declared prior to const parameters\n "}, {"sha": "55f5a53538537da232de7f21f503592d9e841c16", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/param-order-err-pretty-prints-default.rs:2:33\n+  --> $DIR/param-order-err-pretty-prints-default.rs:1:33\n    |\n LL | struct Foo<const M: usize = 10, 'a>(&'a u32);\n    |           ----------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const M: usize = 10>`"}, {"sha": "e202d4e86a2852ee6b300e6ece24e4dd56e1c2bc", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -3,7 +3,6 @@\n // compile-flags: -Z unpretty=expanded\n \n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n \n trait Foo<const KIND: bool = true> {}\n "}, {"sha": "99fe9d2e4b3c3ae5d23506972f52d4a228fabb95", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -5,7 +5,6 @@\n // compile-flags: -Z unpretty=expanded\n \n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;\n #[macro_use]"}, {"sha": "118da2723acfb7b3e8041dc354e88f44e4782949", "filename": "src/test/ui/const-generics/defaults/repr-c-issue-82792.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(const_generics_defaults)]\n-\n #[repr(C)]\n pub struct Loaf<T: Sized, const N: usize = 1> {\n     head: [T; N],"}, {"sha": "dde8eea45257f12c1f8456c3cd7c7f8d57d38cf9", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n-\n struct Uwu<const N: u32 = 1, const M: u32 = N>;\n \n trait Trait {}"}, {"sha": "308c121a94111ad86386d09611be0325e5fede06", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Uwu<const N: u32 = 1, const M: u32 = N>;\n \n trait Trait {}"}, {"sha": "8c8bfdc0e4847a82fb8c79c164ff78af1ed60cc8", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:8:14\n+  --> $DIR/rp_impl_trait_fail.rs:6:14\n    |\n LL | fn rawr() -> impl Trait {\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n@@ -8,7 +8,7 @@ LL | fn rawr() -> impl Trait {\n              <Uwu<N> as Trait>\n \n error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:19:26\n+  --> $DIR/rp_impl_trait_fail.rs:17:26\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n@@ -17,7 +17,7 @@ LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n              <u32 as Traitor<N, 2_u8>>\n \n error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:24:13\n+  --> $DIR/rp_impl_trait_fail.rs:22:13\n    |\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`"}, {"sha": "6a782d2238c7c29f195989a007752296c4b039af", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // Checks that type param defaults are allowed after const params.\n-#![feature(const_generics_defaults)]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {"}, {"sha": "750e40313fb5aff6e01f254f242ae0b9dcd779a1", "filename": "src/test/ui/const-generics/defaults/trait_objects.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n-\n trait Trait<const N: u8 = 12> {\n     fn uwu(&self) -> u8 {\n         N"}, {"sha": "7ba12d02b6e77150ccac9b00cc5004a02db6f24b", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n trait Trait<const N: u8 = 12> {\n     fn uwu(&self) -> u8 {\n         N"}, {"sha": "13d03c2d42d3166077168e8616fb92007fbbcf72", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u32: Trait` is not satisfied\n-  --> $DIR/trait_objects_fail.rs:28:9\n+  --> $DIR/trait_objects_fail.rs:26:9\n    |\n LL |     foo(&10_u32);\n    |     --- ^^^^^^^ the trait `Trait` is not implemented for `u32`\n@@ -11,7 +11,7 @@ LL |     foo(&10_u32);\n    = note: required for the cast to the object type `dyn Trait`\n \n error[E0277]: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n-  --> $DIR/trait_objects_fail.rs:30:9\n+  --> $DIR/trait_objects_fail.rs:28:9\n    |\n LL |     bar(&true);\n    |     --- ^^^^^ the trait `Traitor<{_: u8}, {_: u8}>` is not implemented for `bool`"}, {"sha": "405664dedc70117110933ef60a6208ae3a7a3445", "filename": "src/test/ui/const-generics/defaults/type-default-const-param-name.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,4 @@\n // check-pass\n-#![feature(const_generics_defaults)]\n-\n struct N;\n \n struct Foo<const N: usize = 1, T = N>(T);"}, {"sha": "d366040ba3ea65e7783c70f257089532c4129881", "filename": "src/test/ui/const-generics/defaults/wfness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n //~^ error: evaluation of constant value failed\n "}, {"sha": "facf0ae19f734a53601be1a8d88e848aae0a0fb1", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/wfness.rs:3:33\n+  --> $DIR/wfness.rs:1:33\n    |\n LL | struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n    |                                 ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n \n error[E0277]: the trait bound `(): Trait<2_u8>` is not satisfied\n-  --> $DIR/wfness.rs:8:47\n+  --> $DIR/wfness.rs:6:47\n    |\n LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n    |                                               ^^^^^^^^ the trait `Trait<2_u8>` is not implemented for `()`\n@@ -14,15 +14,15 @@ LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n              <() as Trait<3_u8>>\n \n error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n-  --> $DIR/wfness.rs:16:13\n+  --> $DIR/wfness.rs:14:13\n    |\n LL | fn foo() -> DependentDefaultWfness {\n    |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<1_u8>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<3_u8>>\n note: required by a bound in `WhereClause`\n-  --> $DIR/wfness.rs:8:47\n+  --> $DIR/wfness.rs:6:47\n    |\n LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n    |                                               ^^^^^^^^ required by this bound in `WhereClause`"}, {"sha": "d53d56f41e6666c3f7c9086589f14fde957ce23e", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_generics_defaults)]\n-\n struct A<T = u32, const N: usize> {\n     //~^ ERROR generic parameters with a default must be trailing\n     arg: T,"}, {"sha": "4d2628d034f3515ec22d78c0ed7beb6cb30a1b1e", "filename": "src/test/ui/const-generics/defaults/wrong-order.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,11 +1,11 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:3:10\n+  --> $DIR/wrong-order.rs:1:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n \n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:8:18\n+  --> $DIR/wrong-order.rs:6:18\n    |\n LL | struct Foo<const N: u8 = 3, T>(T);\n    |                  ^"}, {"sha": "9580f8a7fbc55c50b7119f91a8c5b55f11bbb240", "filename": "src/test/ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n struct Bar<const N: usize>(Foo<N, 3>);"}, {"sha": "cb6d05349db97230dd9ab557f9fd1b090e653205", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(adt_const_params, const_generics_defaults)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "eafafb8a27455a55765cbd818e58ac710f5c7314", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,5 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n-#![allow(incomplete_features, dead_code)]\n+#![allow(dead_code)]\n \n struct Both<const N: usize=3, T> {\n //~^ ERROR: generic parameters with a default must be"}, {"sha": "0d5a393cb7bfb900c54f2662cda6c6e662d01275", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/const_default_first.rs:5:19\n+  --> $DIR/const_default_first.rs:4:19\n    |\n LL | struct Both<const N: usize=3, T> {\n    |                   ^"}, {"sha": "92d495ef6653bb9830c0138bd5622a4c1529c499", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics_defaults)]\n \n fn foo<const SIZE: usize = 5usize>() {}\n //~^ ERROR defaults for const parameters are"}, {"sha": "07dcd57dab8cbab0025959068f9f481154afa044", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,5 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default_function_param.rs:4:14\n+  --> $DIR/default_function_param.rs:3:14\n    |\n LL | fn foo<const SIZE: usize = 5usize>() {}\n    |              ^^^^"}, {"sha": "9cd5e3279ffa02debe8f7f020ad61c0ae53f3f60", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,4 +1,4 @@\n+// check-pass\n trait Foo<const KIND: bool = true> {}\n-//~^ ERROR default values for const generic parameters are experimental\n \n fn main() {}"}, {"sha": "5617b35ad013afc2510f5c87109d8886a42d57fc", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: default values for const generic parameters are experimental\n-  --> $DIR/default_trait_param.rs:1:28\n-   |\n-LL | trait Foo<const KIND: bool = true> {}\n-   |                            ^^^^^^\n-   |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fa119c59f613e4e3a425235c478dcad5437e4d86", "filename": "src/test/ui/const-generics/min_const_generics/type_and_const_defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_generics_defaults)]\n #![allow(dead_code)]\n \n struct Both<T=u32, const N: usize=3> {"}, {"sha": "a5e70f6b9e64824e57f9fcc4d4459971e9cc8e54", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -3,8 +3,6 @@ error: generic parameters with a default must be trailing\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error: generic parameters may not be used in const operations\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:5:44"}, {"sha": "f37b0b10233baac0ad1aa9d5ae9b272413bb8094", "filename": "src/test/ui/const-generics/type-after-const-ok.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,11 +1,6 @@\n-// [full] run-pass\n-// revisions: full min\n+// run-pass\n // Verifies that having generic parameters after constants is permitted\n-#![cfg_attr(full, feature(const_generics_defaults))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n #[allow(dead_code)]\n struct A<const N: usize, T>(T);\n-//[min]~^ ERROR type parameters must be declared prior to const parameters\n \n fn main() {}"}, {"sha": "ce80271d274b0ef6a5468bc0b144be2324db41af", "filename": "src/test/ui/derives/derive-macro-const-default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,4 @@\n // check-pass\n-#![feature(const_generics_defaults)]\n-\n #[derive(Clone, PartialEq, Debug)]\n struct Example<T, const N: usize = 1usize>([T; N]);\n "}, {"sha": "7e1dd77070441fa317cfeb57fc60ebca79dc71ff", "filename": "src/test/ui/generics/issue-59508-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-59508-1.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,8 +1,7 @@\n #![allow(dead_code)]\n-#![feature(const_generics_defaults)]\n \n // This test checks that generic parameter re-ordering diagnostic suggestions mention that\n-// consts come after types and lifetimes when the `const_generics_defaults` feature is enabled.\n+// consts come after types and lifetimes.\n // We cannot run rustfix on this test because of the above const generics warning.\n \n struct A;"}, {"sha": "e9b32fb7198d431bfe53b3c9742402fa30b210a6", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9b8cef86fc6b7b754869fa0d4b0449bab6b38f/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs?ref=db9b8cef86fc6b7b754869fa0d4b0449bab6b38f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(const_generics_defaults)]\n-\n struct X<const N: u8>();\n \n impl X<N> {}"}]}