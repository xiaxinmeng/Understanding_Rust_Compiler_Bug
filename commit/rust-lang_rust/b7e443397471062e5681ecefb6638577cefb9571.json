{"sha": "b7e443397471062e5681ecefb6638577cefb9571", "node_id": "C_kwDOAAsO6NoAKGI3ZTQ0MzM5NzQ3MTA2MmU1NjgxZWNlZmI2NjM4NTc3Y2VmYjk1NzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-20T04:07:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-20T04:07:04Z"}, "message": "Foreign types are trivially drop\n\n- Also rename a trivial_const_drop to match style of other functions in\n  the util module.\n- Also add a test for `const Drop` that doesn't depend on a `~const`\n  bound.\n- Also comment a bit why we remove the const bound during dropck impl\n  check.", "tree": {"sha": "3f04c86244e49b76c558c75a4d58873b18c0021c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f04c86244e49b76c558c75a4d58873b18c0021c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e443397471062e5681ecefb6638577cefb9571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e443397471062e5681ecefb6638577cefb9571", "html_url": "https://github.com/rust-lang/rust/commit/b7e443397471062e5681ecefb6638577cefb9571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e443397471062e5681ecefb6638577cefb9571/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8547f5732c003080f940a23eaf3e2e9c052934ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/8547f5732c003080f940a23eaf3e2e9c052934ae", "html_url": "https://github.com/rust-lang/rust/commit/8547f5732c003080f940a23eaf3e2e9c052934ae"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "91610b15eb9998d022dea2fd34fb886a564c7a21", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=b7e443397471062e5681ecefb6638577cefb9571", "patch": "@@ -148,7 +148,7 @@ impl Qualif for NeedsNonConstDrop {\n \n     fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n         // Avoid selecting for simple cases, such as builtin types.\n-        if ty::util::trivial_const_drop(ty) {\n+        if ty::util::is_trivially_const_drop(ty) {\n             return false;\n         }\n "}, {"sha": "96c27d649e4d1ee9e5170771af50e24ed169cb90", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=b7e443397471062e5681ecefb6638577cefb9571", "patch": "@@ -1041,7 +1041,7 @@ pub fn needs_drop_components<'tcx>(\n     }\n }\n \n-pub fn trivial_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {\n+pub fn is_trivially_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {\n     match *ty.kind() {\n         ty::Bool\n         | ty::Char\n@@ -1055,25 +1055,25 @@ pub fn trivial_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {\n         | ty::Ref(..)\n         | ty::FnDef(..)\n         | ty::FnPtr(_)\n-        | ty::Never => true,\n+        | ty::Never\n+        | ty::Foreign(_) => true,\n \n         ty::Opaque(..)\n         | ty::Dynamic(..)\n         | ty::Error(_)\n         | ty::Bound(..)\n         | ty::Param(_)\n         | ty::Placeholder(_)\n-        | ty::Foreign(_)\n         | ty::Projection(_)\n         | ty::Infer(_) => false,\n \n         // Not trivial because they have components, and instead of looking inside,\n         // we'll just perform trait selection.\n         ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(_) | ty::Adt(..) => false,\n \n-        ty::Array(ty, _) | ty::Slice(ty) => trivial_const_drop(ty),\n+        ty::Array(ty, _) | ty::Slice(ty) => is_trivially_const_drop(ty),\n \n-        ty::Tuple(tys) => tys.iter().all(|ty| trivial_const_drop(ty.expect_ty())),\n+        ty::Tuple(tys) => tys.iter().all(|ty| is_trivially_const_drop(ty.expect_ty())),\n     }\n }\n "}, {"sha": "0099fba92004245912974c0974b5ac2002dc51c6", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=b7e443397471062e5681ecefb6638577cefb9571", "patch": "@@ -932,7 +932,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Bound(..)\n             | ty::Param(_)\n             | ty::Placeholder(_)\n-            | ty::Foreign(_)\n             | ty::Projection(_) => {\n                 // We don't know if these are `~const Drop`, at least\n                 // not structurally... so don't push a candidate.\n@@ -951,6 +950,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::FnDef(..)\n             | ty::FnPtr(_)\n             | ty::Never\n+            | ty::Foreign(_)\n             | ty::Array(..)\n             | ty::Slice(_)\n             | ty::Closure(..)"}, {"sha": "3b6a4afafcfd14935252611b8e70f538f903cda0", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=b7e443397471062e5681ecefb6638577cefb9571", "patch": "@@ -1133,7 +1133,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | ty::Ref(..)\n                 | ty::FnDef(..)\n                 | ty::FnPtr(_)\n-                | ty::Never => {}\n+                | ty::Never\n+                | ty::Foreign(_) => {}\n \n                 // These types are built-in, so we can fast-track by registering\n                 // nested predicates for their constituient type(s)"}, {"sha": "89866c20b61d6ee1b17d0adc5aa3eefcb3ec95c2", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e443397471062e5681ecefb6638577cefb9571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=b7e443397471062e5681ecefb6638577cefb9571", "patch": "@@ -228,15 +228,15 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             let predicate = predicate.kind();\n             let p = p.kind();\n             match (predicate.skip_binder(), p.skip_binder()) {\n-                (ty::PredicateKind::Trait(a), ty::PredicateKind::Trait(b)) => relator\n-                    .relate(\n-                        predicate.rebind(ty::TraitPredicate {\n-                            constness: ty::BoundConstness::NotConst,\n-                            ..a\n-                        }),\n-                        p.rebind(b),\n-                    )\n-                    .is_ok(),\n+                (ty::PredicateKind::Trait(a), ty::PredicateKind::Trait(b)) => {\n+                    // Since struct predicates cannot have ~const, project the impl predicate\n+                    // onto one that ignores the constness. This is equivalent to saying that\n+                    // we match a `Trait` bound on the struct with a `Trait` or `~const Trait`\n+                    // in the impl.\n+                    let non_const_a =\n+                        ty::TraitPredicate { constness: ty::BoundConstness::NotConst, ..a };\n+                    relator.relate(predicate.rebind(non_const_a), p.rebind(b)).is_ok()\n+                }\n                 (ty::PredicateKind::Projection(a), ty::PredicateKind::Projection(b)) => {\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }"}, {"sha": "13363c506d54e573dbaed08a99f8604f85e680e6", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7e443397471062e5681ecefb6638577cefb9571/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e443397471062e5681ecefb6638577cefb9571/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=b7e443397471062e5681ecefb6638577cefb9571", "patch": "@@ -53,6 +53,10 @@ mod t {\n     impl const SomeTrait for () {\n         fn foo() {}\n     }\n+    // non-const impl\n+    impl SomeTrait for i32 {\n+        fn foo() {}\n+    }\n \n     pub struct ConstDropWithBound<T: SomeTrait>(pub core::marker::PhantomData<T>);\n \n@@ -61,6 +65,14 @@ mod t {\n             T::foo();\n         }\n     }\n+\n+    pub struct ConstDropWithNonconstBound<T: SomeTrait>(pub core::marker::PhantomData<T>);\n+\n+    impl<T: SomeTrait> const Drop for ConstDropWithNonconstBound<T> {\n+        fn drop(&mut self) {\n+            // Note: we DON'T use the `T: SomeTrait` bound\n+        }\n+    }\n }\n \n use t::*;\n@@ -78,6 +90,7 @@ implements_const_drop! {\n     &1,\n     &1 as *const i32,\n     ConstDropWithBound::<()>,\n+    ConstDropWithNonconstBound::<i32>,\n     Result::<i32, !>::Ok(1),\n }\n "}]}