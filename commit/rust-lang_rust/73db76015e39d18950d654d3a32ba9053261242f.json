{"sha": "73db76015e39d18950d654d3a32ba9053261242f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZGI3NjAxNWUzOWQxODk1MGQ2NTRkM2EzMmJhOTA1MzI2MTI0MmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T07:55:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T21:44:14Z"}, "message": "doc: Fix a bunch of broken links\n\nA few categories:\n\n* Links into compiler docs were just all removed as we're not generating\n  compiler docs.\n* Move up one more level to forcibly go to std docs to fix inlined documentation\n  across the facade crates.", "tree": {"sha": "9859fbc92103d84af425b8b8dfe26ff1205dbd51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9859fbc92103d84af425b8b8dfe26ff1205dbd51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73db76015e39d18950d654d3a32ba9053261242f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73db76015e39d18950d654d3a32ba9053261242f", "html_url": "https://github.com/rust-lang/rust/commit/73db76015e39d18950d654d3a32ba9053261242f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73db76015e39d18950d654d3a32ba9053261242f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16fefc5ead7d3338acf80f225f0f256a286345c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/16fefc5ead7d3338acf80f225f0f256a286345c5", "html_url": "https://github.com/rust-lang/rust/commit/16fefc5ead7d3338acf80f225f0f256a286345c5"}], "stats": {"total": 274, "additions": 135, "deletions": 139}, "files": [{"sha": "50350213074bf3a2cd2368db61d0d7acce5c7a23", "filename": "src/doc/book/choosing-your-guarantees.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fbook%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fbook%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fchoosing-your-guarantees.md?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -204,7 +204,7 @@ borrow checker. Generally we know that such mutations won't happen in a nested f\n to check.\n \n For large, complicated programs, it becomes useful to put some things in `RefCell`s to make things\n-simpler. For example, a lot of the maps in [the `ctxt` struct][ctxt] in the Rust compiler internals\n+simpler. For example, a lot of the maps in the `ctxt` struct in the Rust compiler internals\n are inside this wrapper. These are only modified once (during creation, which is not right after\n initialization) or a couple of times in well-separated places. However, since this struct is\n pervasively used everywhere, juggling mutable and immutable pointers would be hard (perhaps\n@@ -235,7 +235,6 @@ At runtime each borrow causes a modification/check of the refcount.\n [cell-mod]: ../std/cell/\n [cell]: ../std/cell/struct.Cell.html\n [refcell]: ../std/cell/struct.RefCell.html\n-[ctxt]: ../rustc/middle/ty/struct.ctxt.html\n \n # Synchronous types\n "}, {"sha": "1af05bfea19a210001ee73542036168f6e997fb9", "filename": "src/doc/book/compiler-plugins.md", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcompiler-plugins.md?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -8,12 +8,12 @@ extend the compiler's behavior with new syntax extensions, lint checks, etc.\n A plugin is a dynamic library crate with a designated *registrar* function that\n registers extensions with `rustc`. Other crates can load these extensions using\n the crate attribute `#![plugin(...)]`.  See the\n-[`rustc_plugin`](../rustc_plugin/index.html) documentation for more about the\n+`rustc_plugin` documentation for more about the\n mechanics of defining and loading a plugin.\n \n If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n interpreted by rustc itself.  They are provided to the plugin through the\n-`Registry`'s [`args` method](../rustc_plugin/registry/struct.Registry.html#method.args).\n+`Registry`'s `args` method.\n \n In the vast majority of cases, a plugin should *only* be used through\n `#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n@@ -30,7 +30,7 @@ of a library.\n Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n is the procedural macro. These are invoked the same way as [ordinary\n macros](macros.html), but the expansion is performed by arbitrary Rust\n-code that manipulates [syntax trees](../syntax/ast/index.html) at\n+code that manipulates syntax trees at\n compile time.\n \n Let's write a plugin\n@@ -120,19 +120,16 @@ The advantages over a simple `fn(&str) -> u32` are:\n \n In addition to procedural macros, you can define new\n [`derive`](../reference.html#derive)-like attributes and other kinds of\n-extensions.  See\n-[`Registry::register_syntax_extension`](../rustc_plugin/registry/struct.Registry.html#method.register_syntax_extension)\n-and the [`SyntaxExtension`\n-enum](https://doc.rust-lang.org/syntax/ext/base/enum.SyntaxExtension.html).  For\n-a more involved macro example, see\n+extensions.  See `Registry::register_syntax_extension` and the `SyntaxExtension`\n+enum.  For a more involved macro example, see\n [`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n \n \n ## Tips and tricks\n \n Some of the [macro debugging tips](macros.html#debugging-macro-code) are applicable.\n \n-You can use [`syntax::parse`](../syntax/parse/index.html) to turn token trees into\n+You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:\n \n ```ignore\n@@ -148,30 +145,21 @@ Looking through [`libsyntax` parser\n code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n will give you a feel for how the parsing infrastructure works.\n \n-Keep the [`Span`s](../syntax/codemap/struct.Span.html) of\n-everything you parse, for better error reporting. You can wrap\n-[`Spanned`](../syntax/codemap/struct.Spanned.html) around\n-your custom data structures.\n-\n-Calling\n-[`ExtCtxt::span_fatal`](../syntax/ext/base/struct.ExtCtxt.html#method.span_fatal)\n-will immediately abort compilation. It's better to instead call\n-[`ExtCtxt::span_err`](../syntax/ext/base/struct.ExtCtxt.html#method.span_err)\n-and return\n-[`DummyResult`](../syntax/ext/base/struct.DummyResult.html),\n-so that the compiler can continue and find further errors.\n-\n-To print syntax fragments for debugging, you can use\n-[`span_note`](../syntax/ext/base/struct.ExtCtxt.html#method.span_note) together\n-with\n-[`syntax::print::pprust::*_to_string`](https://doc.rust-lang.org/syntax/print/pprust/index.html#functions).\n-\n-The example above produced an integer literal using\n-[`AstBuilder::expr_usize`](../syntax/ext/build/trait.AstBuilder.html#tymethod.expr_usize).\n+Keep the `Span`s of everything you parse, for better error reporting. You can\n+wrap `Spanned` around your custom data structures.\n+\n+Calling `ExtCtxt::span_fatal` will immediately abort compilation. It's better to\n+instead call `ExtCtxt::span_err` and return `DummyResult` so that the compiler\n+can continue and find further errors.\n+\n+To print syntax fragments for debugging, you can use `span_note` together with\n+`syntax::print::pprust::*_to_string`.\n+\n+The example above produced an integer literal using `AstBuilder::expr_usize`.\n As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n-[quasiquote macros](../syntax/ext/quote/index.html).  They are undocumented and\n-very rough around the edges.  However, the implementation may be a good\n-starting point for an improved quasiquote as an ordinary plugin library.\n+quasiquote macros. They are undocumented and very rough around the edges.\n+However, the implementation may be a good starting point for an improved\n+quasiquote as an ordinary plugin library.\n \n \n # Lint plugins\n@@ -239,12 +227,11 @@ foo.rs:4 fn lintme() { }\n \n The components of a lint plugin are:\n \n-* one or more `declare_lint!` invocations, which define static\n-  [`Lint`](../rustc/lint/struct.Lint.html) structs;\n+* one or more `declare_lint!` invocations, which define static `Lint` structs;\n \n * a struct holding any state needed by the lint pass (here, none);\n \n-* a [`LintPass`](../rustc/lint/trait.LintPass.html)\n+* a `LintPass`\n   implementation defining how to check each syntax element. A single\n   `LintPass` may call `span_lint` for several different `Lint`s, but should\n   register them all through the `get_lints` method."}, {"sha": "742433b99ac5f56e42704782b5e4e2a6697287d5", "filename": "src/doc/guide-plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fguide-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fguide-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-plugins.md?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Compiler Plugins Guide\n \n This content has moved into\n-[the Rust Programming Language book](book/plugins.html).\n+[the Rust Programming Language book](book/compiler-plugins.html)."}, {"sha": "8d837d1a1a9165b653e8019c8333c2608d3b8584", "filename": "src/doc/style/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fstyle%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fstyle%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2FREADME.md?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -53,7 +53,7 @@ This document is broken into four parts:\n   cross-cutting topic, starting with\n   [Ownership and resources](ownership/README.md).\n \n-* **[APIs for a changing Rust](changing/README.md)**\n+* **APIs for a changing Rust**\n   discusses the forward-compatibility hazards, especially those that interact\n   with the pre-1.0 library stabilization process.\n "}, {"sha": "9b243bc72ef7125e6540151a70838c3e7fe78464", "filename": "src/doc/style/features/functions-and-methods/input.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -76,7 +76,7 @@ needs to make about its arguments.\n On the other hand, generics can make it more difficult to read and understand a\n function's signature. Aim for \"natural\" parameter types that a neither overly\n concrete nor overly abstract. See the discussion on\n-[traits](../../traits/README.md) for more guidance.\n+[traits](../traits/README.md) for more guidance.\n \n \n #### Minimizing ownership assumptions:"}, {"sha": "2106f32fafade8fdcc54320064b4353f1708aafc", "filename": "src/doc/style/style/naming/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2FREADME.md?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -101,7 +101,7 @@ The convention for a field `foo: T` is:\n   here may take `&T` or some other type, depending on the context.)\n \n Note that this convention is about getters/setters on ordinary data types, *not*\n-on [builder objects](../ownership/builders.html).\n+on [builder objects](../../ownership/builders.html).\n \n ### Escape hatches [FIXME]\n "}, {"sha": "a2ad58afc7f9d360922e802bb0bbdc5a41f8e442", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -34,8 +34,8 @@ use Bound;\n /// to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n ///\n-/// [`BTreeMap`]: ../struct.BTreeMap.html\n-/// [`Ord`]: ../../core/cmp/trait.Ord.html\n+/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`Ord`]: ../../std/cmp/trait.Ord.html\n /// [`Cell`]: ../../std/cell/struct.Cell.html\n /// [`RefCell`]: ../../std/cell/struct.RefCell.html\n #[derive(Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "cef6edf68ee8d5c11bc496f8fc257f760878210f", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -71,13 +71,21 @@ extern crate std;\n #[cfg(test)]\n extern crate test;\n \n+#[doc(no_inline)]\n pub use binary_heap::BinaryHeap;\n+#[doc(no_inline)]\n pub use btree_map::BTreeMap;\n+#[doc(no_inline)]\n pub use btree_set::BTreeSet;\n+#[doc(no_inline)]\n pub use linked_list::LinkedList;\n+#[doc(no_inline)]\n pub use enum_set::EnumSet;\n+#[doc(no_inline)]\n pub use vec_deque::VecDeque;\n+#[doc(no_inline)]\n pub use string::String;\n+#[doc(no_inline)]\n pub use vec::Vec;\n \n // Needed for the vec! macro"}, {"sha": "69a9899d82bc6b5f353abc770a48ec4f38518e66", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -78,7 +78,7 @@\n //! * Further methods that return iterators are `.split()`, `.splitn()`,\n //!   `.chunks()`, `.windows()` and more.\n //!\n-//! *[See also the slice primitive type](../primitive.slice.html).*\n+//! *[See also the slice primitive type](../../std/primitive.slice.html).*\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // Many of the usings in this module are only used in the test configuration."}, {"sha": "9798e323a6140c782c6cb8606e3686fe339d1dff", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -10,7 +10,7 @@\n \n //! Unicode string slices.\n //!\n-//! *[See also the `str` primitive type](../primitive.str.html).*\n+//! *[See also the `str` primitive type](../../std/primitive.str.html).*\n \n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "02190d11b421fe8ef50443c3f56fe985cc6aaaef", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -79,7 +79,7 @@ use boxed::Box;\n /// contents of the string. It has a close relationship with its borrowed\n /// counterpart, the primitive [`str`].\n ///\n-/// [`str`]: ../primitive.str.html\n+/// [`str`]: ../../std/primitive.str.html\n ///\n /// # Examples\n ///\n@@ -99,7 +99,7 @@ use boxed::Box;\n /// hello.push_str(\"orld!\");\n /// ```\n ///\n-/// [`char`]: ../primitive.char.html\n+/// [`char`]: ../../std/primitive.char.html\n /// [`push()`]: #method.push\n /// [`push_str()`]: #method.push_str\n ///\n@@ -131,7 +131,7 @@ use boxed::Box;\n /// println!(\"The first letter of s is {}\", s[0]); // ERROR!!!\n /// ```\n ///\n-/// [`OsString`]: ../ffi/struct.OsString.html\n+/// [`OsString`]: ../../std/ffi/struct.OsString.html\n ///\n /// Indexing is intended to be a constant-time operation, but UTF-8 encoding\n /// does not allow us to do this. Furtheremore, it's not clear what sort of\n@@ -156,8 +156,8 @@ use boxed::Box;\n /// takes_str(&s);\n /// ```\n ///\n-/// [`&str`]: ../primitive.str.html\n-/// [`Deref`]: ../ops/trait.Deref.html\n+/// [`&str`]: ../../std/primitive.str.html\n+/// [`Deref`]: ../../std/ops/trait.Deref.html\n ///\n /// This will create a [`&str`] from the `String` and pass it in. This\n /// conversion is very inexpensive, and so generally, functions will accept\n@@ -280,10 +280,10 @@ pub struct String {\n /// an analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`\n /// through the [`utf8_error()`] method.\n ///\n-/// [`Utf8Error`]: ../str/struct.Utf8Error.html\n-/// [`std::str`]: ../str/index.html\n-/// [`u8`]: ../primitive.u8.html\n-/// [`&str`]: ../primitive.str.html\n+/// [`Utf8Error`]: ../../std/str/struct.Utf8Error.html\n+/// [`std::str`]: ../../std/str/index.html\n+/// [`u8`]: ../../std/primitive.u8.html\n+/// [`&str`]: ../../std/primitive.str.html\n /// [`utf8_error()`]: #method.utf8_error\n ///\n /// # Examples\n@@ -414,9 +414,9 @@ impl String {\n     /// requires that it is valid UTF-8. `from_utf8()` checks to ensure that\n     /// the bytes are valid UTF-8, and then does the conversion.\n     ///\n-    /// [`&str`]: ../primitive.str.html\n-    /// [`u8`]: ../primitive.u8.html\n-    /// [`Vec<u8>`]: ../vec/struct.Vec.html\n+    /// [`&str`]: ../../std/primitive.str.html\n+    /// [`u8`]: ../../std/primitive.u8.html\n+    /// [`Vec<u8>`]: ../../std/vec/struct.Vec.html\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the validity check, there is an unsafe version\n@@ -431,7 +431,7 @@ impl String {\n     /// If you need a `&str` instead of a `String`, consider\n     /// [`str::from_utf8()`].\n     ///\n-    /// [`str::from_utf8()`]: ../str/fn.from_utf8.html\n+    /// [`str::from_utf8()`]: ../../std/str/fn.from_utf8.html\n     ///\n     /// # Errors\n     ///\n@@ -488,8 +488,8 @@ impl String {\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// `U+FFFD REPLACEMENT CHARACTER`, which looks like this: \ufffd\n     ///\n-    /// [`u8`]: ../primitive.u8.html\n-    /// [byteslice]: ../primitive.slice.html\n+    /// [`u8`]: ../../std/primitive.u8.html\n+    /// [byteslice]: ../../std/primitive.slice.html\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the conversion, there is an unsafe version\n@@ -504,7 +504,7 @@ impl String {\n     /// it's already valid UTF-8, we don't need a new allocation. This return\n     /// type allows us to handle both cases.\n     ///\n-    /// [`Cow<'a, str>`]: ../borrow/enum.Cow.html\n+    /// [`Cow<'a, str>`]: ../../std/borrow/enum.Cow.html\n     ///\n     /// # Examples\n     ///\n@@ -1014,7 +1014,7 @@ impl String {\n     /// Panics if `new_len` > current length, or if `new_len` does not lie on a\n     /// [`char`] boundary.\n     ///\n-    /// [`char`]: ../primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -1076,7 +1076,7 @@ impl String {\n     /// Panics if `idx` is larger than or equal to the `String`'s length,\n     /// or if it does not lie on a [`char`] boundary.\n     ///\n-    /// [`char`]: ../primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -1116,7 +1116,7 @@ impl String {\n     /// Panics if `idx` is larger than the `String`'s length, or if it does not\n     /// lie on a [`char`] boundary.\n     ///\n-    /// [`char`]: ../primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -1255,7 +1255,7 @@ impl String {\n     /// Panics if the starting point or end point do not lie on a [`char`]\n     /// boundary, or if they're out of bounds.\n     ///\n-    /// [`char`]: ../primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -1353,10 +1353,10 @@ impl FromUtf8Error {\n     /// an analogue to `FromUtf8Error`. See its documentation for more details\n     /// on using it.\n     ///\n-    /// [`Utf8Error`]: ../str/struct.Utf8Error.html\n-    /// [`std::str`]: ../str/index.html\n-    /// [`u8`]: ../primitive.u8.html\n-    /// [`&str`]: ../primitive.str.html\n+    /// [`Utf8Error`]: ../../std/str/struct.Utf8Error.html\n+    /// [`std::str`]: ../../std/str/index.html\n+    /// [`u8`]: ../../std/primitive.u8.html\n+    /// [`&str`]: ../../std/primitive.str.html\n     ///\n     /// # Examples\n     ///\n@@ -1695,9 +1695,9 @@ impl ops::DerefMut for String {\n /// [`String`] without error, this type will never actually be returned. As\n /// such, it is only here to satisfy said signature, and is useless otherwise.\n ///\n-/// [`FromStr`]: ../str/trait.FromStr.html\n+/// [`FromStr`]: ../../std/str/trait.FromStr.html\n /// [`String`]: struct.String.html\n-/// [`from_str()`]: ../str/trait.FromStr.html#tymethod.from_str\n+/// [`from_str()`]: ../../std/str/trait.FromStr.html#tymethod.from_str\n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n #[derive(Copy)]\n pub enum ParseError {}\n@@ -1749,7 +1749,7 @@ impl Eq for ParseError {}\n /// [`Display`] should be implemented instead, and you get the `ToString`\n /// implementation for free.\n ///\n-/// [`Display`]: ../fmt/trait.Display.html\n+/// [`Display`]: ../../std/fmt/trait.Display.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToString {\n     /// Converts the given value to a `String`."}, {"sha": "dfd2ba9154d53eceb71ec17fbb6ddf46c84a55f6", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -22,7 +22,7 @@\n //! Note that &Any is limited to testing whether a value is of a specified\n //! concrete type, and cannot be used to test whether a type implements a trait.\n //!\n-//! [`Box`]: ../boxed/struct.Box.html\n+//! [`Box`]: ../../std/boxed/struct.Box.html\n //!\n //! # Examples\n //!"}, {"sha": "a23b303f4bab1db9c731c5e2556f782e09889e77", "filename": "src/libcore/char.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -69,7 +69,7 @@ const MAX_THREE_B: u32 =  0x10000;\n /// Point], but only ones within a certain range. `MAX` is the highest valid\n /// code point that's a valid [Unicode Scalar Value].\n ///\n-/// [`char`]: ../primitive.char.html\n+/// [`char`]: ../../std/primitive.char.html\n /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n /// [Code Point]: http://www.unicode.org/glossary/#code_point\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -91,8 +91,8 @@ pub const MAX: char = '\\u{10ffff}';\n /// [`char`]s. `from_u32()` will return `None` if the input is not a valid value\n /// for a [`char`].\n ///\n-/// [`char`]: ../primitive.char.html\n-/// [`u32`]: ../primitive.u32.html\n+/// [`char`]: ../../std/primitive.char.html\n+/// [`u32`]: ../../std/primitive.u32.html\n /// [`as`]: ../../book/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n@@ -148,8 +148,8 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// [`char`]s. `from_u32_unchecked()` will ignore this, and blindly cast to\n /// [`char`], possibly creating an invalid one.\n ///\n-/// [`char`]: ../primitive.char.html\n-/// [`u32`]: ../primitive.u32.html\n+/// [`char`]: ../../std/primitive.char.html\n+/// [`u32`]: ../../std/primitive.u32.html\n /// [`as`]: ../../book/casting-between-types.html#as\n ///\n /// # Safety\n@@ -414,8 +414,8 @@ pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n /// This `struct` is created by the [`escape_unicode()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_unicode()`]: ../primitive.char.html#method.escape_unicode\n-/// [`char`]: ../primitive.char.html\n+/// [`escape_unicode()`]: ../../std/primitive.char.html#method.escape_unicode\n+/// [`char`]: ../../std/primitive.char.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeUnicode {\n@@ -494,8 +494,8 @@ impl Iterator for EscapeUnicode {\n /// This `struct` is created by the [`escape_default()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_default()`]: ../primitive.char.html#method.escape_default\n-/// [`char`]: ../primitive.char.html\n+/// [`escape_default()`]: ../../std/primitive.char.html#method.escape_default\n+/// [`char`]: ../../std/primitive.char.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {"}, {"sha": "06821ff94f71209228e4641ea0cedce9a0f29013", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -65,7 +65,7 @@\n //!\n //! [`Iterator`]: trait.Iterator.html\n //! [`next()`]: trait.Iterator.html#tymethod.next\n-//! [`Option`]: ../option/enum.Option.html\n+//! [`Option`]: ../../std/option/enum.Option.html\n //!\n //! # The three forms of iteration\n //!\n@@ -804,7 +804,7 @@ pub trait Iterator {\n     /// closure returns `None`, it will try again, and call the closure on the\n     /// next element, seeing if it will return `Some`.\n     ///\n-    /// [`Option<T>`]: ../option/enum.Option.html\n+    /// [`Option<T>`]: ../../std/option/enum.Option.html\n     ///\n     /// Why `filter_map()` and not just [`filter()`].[`map()`]? The key is in this\n     /// part:\n@@ -866,7 +866,7 @@ pub trait Iterator {\n     /// different sized integer, the [`zip()`] function provides similar\n     /// functionality.\n     ///\n-    /// [`usize`]: ../primitive.usize.html\n+    /// [`usize`]: ../../std/primitive.usize.html\n     /// [`zip()`]: #method.zip\n     ///\n     /// # Overflow Behavior\n@@ -875,7 +875,7 @@ pub trait Iterator {\n     /// [`usize::MAX`] elements either produces the wrong result or panics. If\n     /// debug assertions are enabled, a panic is guaranteed.\n     ///\n-    /// [`usize::MAX`]: ../usize/constant.MAX.html\n+    /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n     ///\n     /// # Panics\n     ///\n@@ -1151,7 +1151,7 @@ pub trait Iterator {\n     /// iterator and the return value from the closure, an [`Option`], is\n     /// yielded by the iterator.\n     ///\n-    /// [`Option`]: ../option/enum.Option.html\n+    /// [`Option`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n     ///\n@@ -1385,9 +1385,9 @@ pub trait Iterator {\n     /// be thought of as single `Result<Collection<T>, E>`. See the examples\n     /// below for more.\n     ///\n-    /// [`String`]: ../string/struct.String.html\n-    /// [`Result<T, E>`]: ../result/enum.Result.html\n-    /// [`char`]: ../primitive.char.html\n+    /// [`String`]: ../../std/string/struct.String.html\n+    /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// Because `collect()` is so general, it can cause problems with type\n     /// inference. As such, `collect()` is one of the few times you'll see\n@@ -1412,7 +1412,7 @@ pub trait Iterator {\n     /// Note that we needed the `: Vec<i32>` on the left-hand side. This is because\n     /// we could collect into, for example, a [`VecDeque<T>`] instead:\n     ///\n-    /// [`VecDeque<T>`]: ../collections/struct.VecDeque.html\n+    /// [`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n     ///\n     /// ```\n     /// use std::collections::VecDeque;"}, {"sha": "f923668688b8c2ef18b3266318d45bb8f14b76eb", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -206,8 +206,8 @@ macro_rules! try {\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n-/// [fmt]: fmt/index.html\n-/// [write]: io/trait.Write.html\n+/// [fmt]: ../std/fmt/index.html\n+/// [write]: ../std/io/trait.Write.html\n ///\n /// # Examples\n ///\n@@ -232,8 +232,8 @@ macro_rules! write {\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n-/// [fmt]: fmt/index.html\n-/// [write]: io/trait.Write.html\n+/// [fmt]: ../std/fmt/index.html\n+/// [write]: ../std/io/trait.Write.html\n ///\n /// # Examples\n ///"}, {"sha": "0b306c810b1954f520dfb0bb96135554c2143878", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -2179,8 +2179,8 @@ impl usize {\n /// This `enum` is used as the return type for [`f32::classify()`] and [`f64::classify()`]. See\n /// their documentation for more.\n ///\n-/// [`f32::classify()`]: ../primitive.f32.html#method.classify\n-/// [`f64::classify()`]: ../primitive.f64.html#method.classify\n+/// [`f32::classify()`]: ../../std/primitive.f32.html#method.classify\n+/// [`f64::classify()`]: ../../std/primitive.f64.html#method.classify\n #[derive(Copy, Clone, PartialEq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum FpCategory {\n@@ -2411,7 +2411,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n /// This error is used as the error type for the `from_str_radix()` functions\n /// on the primitive integer types, such as [`i8::from_str_radix()`].\n ///\n-/// [`i8::from_str_radix()`]: ../std/primitive.i8.html#method.from_str_radix\n+/// [`i8::from_str_radix()`]: ../../std/primitive.i8.html#method.from_str_radix\n #[derive(Debug, Clone, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseIntError { kind: IntErrorKind }"}, {"sha": "e59e8567d5b6273e589d1ca14644ab1ea08a40fb", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -908,6 +908,7 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n /// An internal abstraction over the splitting iterators, so that\n /// splitn, splitn_mut etc can be implemented once.\n+#[doc(hidden)]\n trait SplitIter: DoubleEndedIterator {\n     /// Mark the underlying iterator as complete, extracting the remaining\n     /// portion of the slice."}, {"sha": "4480e7095e4e6ea7db525923075001ffaebcae0e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -42,8 +42,8 @@ pub mod pattern;\n /// [`str`]'s [`parse()`] method. See [`parse()`]'s documentation for examples.\n ///\n /// [`from_str()`]: #tymethod.from_str\n-/// [`str`]: ../primitive.str.html\n-/// [`parse()`]: ../primitive.str.html#method.parse\n+/// [`str`]: ../../std/primitive.str.html\n+/// [`parse()`]: ../../std/primitive.str.html#method.parse\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait FromStr: Sized {\n     /// The associated error which can be returned from parsing.\n@@ -60,7 +60,7 @@ pub trait FromStr: Sized {\n     ///\n     /// Basic usage with [`i32`][ithirtytwo], a type that implements `FromStr`:\n     ///\n-    /// [ithirtytwo]: ../primitive.i32.html\n+    /// [ithirtytwo]: ../../std/primitive.i32.html\n     ///\n     /// ```\n     /// use std::str::FromStr;\n@@ -182,7 +182,7 @@ impl Utf8Error {\n /// If you need a `String` instead of a `&str`, consider\n /// [`String::from_utf8()`][string].\n ///\n-/// [string]: ../string/struct.String.html#method.from_utf8\n+/// [string]: ../../std/string/struct.String.html#method.from_utf8\n ///\n /// Because you can stack-allocate a `[u8; N]`, and you can take a `&[u8]` of\n /// it, this function is one way to have a stack-allocated string. There is\n@@ -322,7 +322,7 @@ Section: Iterators\n ///\n /// Created with the method [`chars()`].\n ///\n-/// [`chars()`]: ../primitive.str.html#method.chars\n+/// [`chars()`]: ../../std/primitive.str.html#method.chars\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n@@ -531,7 +531,7 @@ impl<'a> CharIndices<'a> {\n ///\n /// Created with the method [`bytes()`].\n ///\n-/// [`bytes()`]: ../primitive.str.html#method.bytes\n+/// [`bytes()`]: ../../std/primitive.str.html#method.bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Bytes<'a>(Cloned<slice::Iter<'a, u8>>);\n@@ -816,12 +816,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`split()`].\n         ///\n-        /// [`split()`]: ../primitive.str.html#method.split\n+        /// [`split()`]: ../../std/primitive.str.html#method.split\n         struct Split;\n     reverse:\n         /// Created with the method [`rsplit()`].\n         ///\n-        /// [`rsplit()`]: ../primitive.str.html#method.rsplit\n+        /// [`rsplit()`]: ../../std/primitive.str.html#method.rsplit\n         struct RSplit;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -834,12 +834,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`split_terminator()`].\n         ///\n-        /// [`split_terminator()`]: ../primitive.str.html#method.split_terminator\n+        /// [`split_terminator()`]: ../../std/primitive.str.html#method.split_terminator\n         struct SplitTerminator;\n     reverse:\n         /// Created with the method [`rsplit_terminator()`].\n         ///\n-        /// [`rsplit_terminator()`]: ../primitive.str.html#method.rsplit_terminator\n+        /// [`rsplit_terminator()`]: ../../std/primitive.str.html#method.rsplit_terminator\n         struct RSplitTerminator;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -884,12 +884,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`splitn()`].\n         ///\n-        /// [`splitn()`]: ../primitive.str.html#method.splitn\n+        /// [`splitn()`]: ../../std/primitive.str.html#method.splitn\n         struct SplitN;\n     reverse:\n         /// Created with the method [`rsplitn()`].\n         ///\n-        /// [`rsplitn()`]: ../primitive.str.html#method.rsplitn\n+        /// [`rsplitn()`]: ../../std/primitive.str.html#method.rsplitn\n         struct RSplitN;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -926,12 +926,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`match_indices()`].\n         ///\n-        /// [`match_indices()`]: ../primitive.str.html#method.match_indices\n+        /// [`match_indices()`]: ../../std/primitive.str.html#method.match_indices\n         struct MatchIndices;\n     reverse:\n         /// Created with the method [`rmatch_indices()`].\n         ///\n-        /// [`rmatch_indices()`]: ../primitive.str.html#method.rmatch_indices\n+        /// [`rmatch_indices()`]: ../../std/primitive.str.html#method.rmatch_indices\n         struct RMatchIndices;\n     stability:\n         #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n@@ -970,12 +970,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`matches()`].\n         ///\n-        /// [`matches()`]: ../primitive.str.html#method.matches\n+        /// [`matches()`]: ../../std/primitive.str.html#method.matches\n         struct Matches;\n     reverse:\n         /// Created with the method [`rmatches()`].\n         ///\n-        /// [`rmatches()`]: ../primitive.str.html#method.rmatches\n+        /// [`rmatches()`]: ../../std/primitive.str.html#method.rmatches\n         struct RMatches;\n     stability:\n         #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n@@ -986,7 +986,7 @@ generate_pattern_iterators! {\n \n /// Created with the method [`lines()`].\n ///\n-/// [`lines()`]: ../primitive.str.html#method.lines\n+/// [`lines()`]: ../../std/primitive.str.html#method.lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Lines<'a>(Map<SplitTerminator<'a, char>, LinesAnyMap>);\n@@ -1016,7 +1016,7 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n \n /// Created with the method [`lines_any()`].\n ///\n-/// [`lines_any()`]: ../primitive.str.html#method.lines_any\n+/// [`lines_any()`]: ../../std/primitive.str.html#method.lines_any\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n #[derive(Clone)]"}, {"sha": "f6b81a5dad37b36fb64a222aceb559e8287ea394", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -70,6 +70,7 @@ mod rand_impls;\n // needed by librand; this is necessary because librand doesn't\n // depend on libstd.  This will go away when librand is integrated\n // into libstd.\n+#[doc(hidden)]\n trait FloatMath : Sized {\n     fn exp(self) -> Self;\n     fn ln(self) -> Self;"}, {"sha": "5bc5c78616093912268c01c905e6660cf1414563", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -19,7 +19,7 @@\n //! [Unicode code point]: http://www.unicode.org/glossary/#code_point\n //!\n //! This module exists for technical reasons, the primary documentation for\n-//! `char` is directly on [the `char` primitive type](../primitive.char.html)\n+//! `char` is directly on [the `char` primitive type](../../std/primitive.char.html)\n //! itself.\n //!\n //! This module is the home of the iterator implementations for the iterators\n@@ -46,8 +46,8 @@ pub use tables::UNICODE_VERSION;\n /// This `struct` is created by the [`to_lowercase()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_lowercase()`]: ../primitive.char.html#method.to_lowercase\n-/// [`char`]: ../primitive.char.html\n+/// [`to_lowercase()`]: ../../std/primitive.char.html#method.to_lowercase\n+/// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToLowercase(CaseMappingIter);\n \n@@ -64,8 +64,8 @@ impl Iterator for ToLowercase {\n /// This `struct` is created by the [`to_uppercase()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_uppercase()`]: ../primitive.char.html#method.to_uppercase\n-/// [`char`]: ../primitive.char.html\n+/// [`to_uppercase()`]: ../../std/primitive.char.html#method.to_uppercase\n+/// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToUppercase(CaseMappingIter);\n \n@@ -968,6 +968,6 @@ impl<I: Iterator<Item=u16>> Iterator for DecodeUtf16<I> {\n \n /// `U+FFFD REPLACEMENT CHARACTER` (\ufffd) is used in Unicode to represent a decoding error.\n /// It can occur, for example, when giving ill-formed UTF-8 bytes to\n-/// [`String::from_utf8_lossy`](../string/struct.String.html#method.from_utf8_lossy).\n+/// [`String::from_utf8_lossy`](../../std/string/struct.String.html#method.from_utf8_lossy).\n #[unstable(feature = \"decode_utf16\", reason = \"recently added\", issue = \"27830\")]\n pub const REPLACEMENT_CHARACTER: char = '\\u{FFFD}';"}, {"sha": "3705302592432cc192e610571d8caadf4f8856a2", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -262,7 +262,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    /// [floating-point]: ../../../../../reference.html#machine-types\n+    /// [floating-point]: ../reference.html#machine-types\n     #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n                issue = \"27752\")]\n     #[inline]"}, {"sha": "446e22a20ad7d576dc8cd18cb75b06cc0a69d92d", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -206,7 +206,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    /// [floating-point]: ../../../../../reference.html#machine-types\n+    /// [floating-point]: ../reference.html#machine-types\n     #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n                issue = \"27752\")]\n     #[inline]"}, {"sha": "65ed879c4ada462bbd627c15a8ff2417c43728ce", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db76015e39d18950d654d3a32ba9053261242f/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=73db76015e39d18950d654d3a32ba9053261242f", "patch": "@@ -27,11 +27,11 @@\n /// assert!(!bool_val);\n /// ```\n ///\n-/// [`assert!`]: std/macro.assert!.html\n-/// [`if` conditionals]: ../../book/if.html\n-/// [`BitAnd`]: ../ops/trait.BitAnd.html\n-/// [`BitOr`]: ../ops/trait.BitOr.html\n-/// [`Not`]: ../ops/trait.Not.html\n+/// [`assert!`]: macro.assert!.html\n+/// [`if` conditionals]: ../book/if.html\n+/// [`BitAnd`]: ops/trait.BitAnd.html\n+/// [`BitOr`]: ops/trait.BitOr.html\n+/// [`Not`]: ops/trait.Not.html\n ///\n /// # Examples\n ///\n@@ -54,7 +54,7 @@\n /// }\n /// ```\n ///\n-/// Also, since `bool` implements the [`Copy`](../marker/trait.Copy.html) trait, we don't\n+/// Also, since `bool` implements the [`Copy`](marker/trait.Copy.html) trait, we don't\n /// have to worry about the move semantics (just like the integer and float primitives).\n mod prim_bool { }\n \n@@ -421,7 +421,7 @@ mod prim_str { }\n /// assert_eq!(tuple.2, 'c');\n /// ```\n ///\n-/// For more about tuples, see [the book](../../book/primitive-types.html#tuples).\n+/// For more about tuples, see [the book](../book/primitive-types.html#tuples).\n ///\n /// # Trait implementations\n ///\n@@ -437,14 +437,14 @@ mod prim_str { }\n /// * [`Default`]\n /// * [`Hash`]\n ///\n-/// [`Clone`]: ../clone/trait.Clone.html\n-/// [`PartialEq`]: ../cmp/trait.PartialEq.html\n-/// [`Eq`]: ../cmp/trait.Eq.html\n-/// [`PartialOrd`]: ../cmp/trait.PartialOrd.html\n-/// [`Ord`]: ../cmp/trait.Ord.html\n-/// [`Debug`]: ../fmt/trait.Debug.html\n-/// [`Default`]: ../default/trait.Default.html\n-/// [`Hash`]: ../hash/trait.Hash.html\n+/// [`Clone`]: clone/trait.Clone.html\n+/// [`PartialEq`]: cmp/trait.PartialEq.html\n+/// [`Eq`]: cmp/trait.Eq.html\n+/// [`PartialOrd`]: cmp/trait.PartialOrd.html\n+/// [`Ord`]: cmp/trait.Ord.html\n+/// [`Debug`]: fmt/trait.Debug.html\n+/// [`Default`]: default/trait.Default.html\n+/// [`Hash`]: hash/trait.Hash.html\n ///\n /// Due to a temporary restriction in Rust's type system, these traits are only\n /// implemented on tuples of arity 32 or less. In the future, this may change."}]}