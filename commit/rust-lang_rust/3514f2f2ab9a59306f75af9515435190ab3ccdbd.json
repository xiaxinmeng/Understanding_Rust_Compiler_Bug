{"sha": "3514f2f2ab9a59306f75af9515435190ab3ccdbd", "node_id": "C_kwDOAAsO6NoAKDM1MTRmMmYyYWI5YTU5MzA2Zjc1YWY5NTE1NDM1MTkwYWIzY2NkYmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T15:04:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-30T11:49:43Z"}, "message": "Render niches on hover", "tree": {"sha": "ae387f22362a8d54b607c1d605f482055a3dfca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae387f22362a8d54b607c1d605f482055a3dfca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3514f2f2ab9a59306f75af9515435190ab3ccdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3514f2f2ab9a59306f75af9515435190ab3ccdbd", "html_url": "https://github.com/rust-lang/rust/commit/3514f2f2ab9a59306f75af9515435190ab3ccdbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3514f2f2ab9a59306f75af9515435190ab3ccdbd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc8295255c5bcc293251d47590dcbfd320eaab87", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8295255c5bcc293251d47590dcbfd320eaab87", "html_url": "https://github.com/rust-lang/rust/commit/bc8295255c5bcc293251d47590dcbfd320eaab87"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "f73c4f31eeee0128bdba419e0a5debc87b0ccae1", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3514f2f2ab9a59306f75af9515435190ab3ccdbd/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514f2f2ab9a59306f75af9515435190ab3ccdbd/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3514f2f2ab9a59306f75af9515435190ab3ccdbd", "patch": "@@ -62,7 +62,7 @@ use hir_ty::{\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     display::HexifiedConst,\n-    layout::{Layout, LayoutError, RustcEnumVariantIdx, TagEncoding},\n+    layout::{LayoutError, RustcEnumVariantIdx, TagEncoding},\n     method_resolution::{self, TyFingerprint},\n     mir::{self, interpret_mir},\n     primitive::UintTy,\n@@ -133,8 +133,11 @@ pub use {\n     },\n     hir_ty::{\n         display::{ClosureStyle, HirDisplay, HirDisplayError, HirWrite},\n+        // FIXME: This just needs a HIR wrapper\n+        layout::Layout,\n         mir::MirEvalError,\n-        PointerCast, Safety,\n+        PointerCast,\n+        Safety,\n     },\n };\n \n@@ -4506,6 +4509,12 @@ impl HasCrate for Union {\n     }\n }\n \n+impl HasCrate for Enum {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n impl HasCrate for Field {\n     fn krate(&self, db: &dyn HirDatabase) -> Crate {\n         self.parent_def(db).module(db).krate()"}, {"sha": "d4c310447f2001fb679121ab3c48bd114abd59dc", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3514f2f2ab9a59306f75af9515435190ab3ccdbd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514f2f2ab9a59306f75af9515435190ab3ccdbd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=3514f2f2ab9a59306f75af9515435190ab3ccdbd", "patch": "@@ -3,8 +3,8 @@ use std::fmt::Display;\n \n use either::Either;\n use hir::{\n-    Adt, AsAssocItem, AttributeTemplate, CaptureKind, HasAttrs, HasSource, HirDisplay, Semantics,\n-    TypeInfo,\n+    db::HirDatabase, Adt, AsAssocItem, AttributeTemplate, CaptureKind, HasAttrs, HasCrate,\n+    HasSource, HirDisplay, Layout, Semantics, TypeInfo,\n };\n use ide_db::{\n     base_db::SourceDatabase,\n@@ -404,8 +404,9 @@ pub(super) fn definition(\n                     .map(|layout| format!(\", offset = {:#X}\", layout.fields.offset(id).bytes())),\n                 _ => None,\n             };\n+            let niches = niches(db, it, &layout).unwrap_or_default();\n             Some(format!(\n-                \"size = {:#X}, align = {:#X}{}\",\n+                \"size = {:#X}, align = {:#X}{}{niches}\",\n                 layout.size.bytes(),\n                 layout.align.abi.bytes(),\n                 offset.as_deref().unwrap_or_default()\n@@ -415,8 +416,9 @@ pub(super) fn definition(\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.layout(db).ok()?;\n+            let niches = niches(db, it, &layout).unwrap_or_default();\n             Some(format!(\n-                \"size = {:#X}, align = {:#X}\",\n+                \"size = {:#X}, align = {:#X}{niches}\",\n                 layout.size.bytes(),\n                 layout.align.abi.bytes()\n             ))\n@@ -437,14 +439,15 @@ pub(super) fn definition(\n                     None\n                 }\n             },\n-            |it| {\n+            |&it| {\n                 let (layout, tag_size) = it.layout(db).ok()?;\n                 let size = layout.size.bytes_usize() - tag_size;\n                 if size == 0 {\n                     // There is no value in showing layout info for fieldless variants\n                     return None;\n                 }\n-                Some(format!(\"size = {:#X}\", layout.size.bytes()))\n+                let niches = niches(db, it, &layout).unwrap_or_default();\n+                Some(format!(\"size = {:#X}{niches}\", layout.size.bytes()))\n             },\n         ),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n@@ -473,10 +476,11 @@ pub(super) fn definition(\n         Definition::TraitAlias(it) => label_and_docs(db, it),\n         Definition::TypeAlias(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.ty(db).layout(db).ok()?;\n+            let niches = niches(db, it, &layout).unwrap_or_default();\n             Some(format!(\n-                \"size = {:#X}, align = {:#X}\",\n+                \"size = {:#X}, align = {:#X}{niches}\",\n                 layout.size.bytes(),\n-                layout.align.abi.bytes()\n+                layout.align.abi.bytes(),\n             ))\n         }),\n         Definition::BuiltinType(it) => {\n@@ -513,6 +517,13 @@ pub(super) fn definition(\n     markup(docs, label, mod_path)\n }\n \n+fn niches(db: &RootDatabase, it: impl HasCrate, layout: &Layout) -> Option<String> {\n+    Some(format!(\n+        \", niches = {}\",\n+        layout.largest_niche?.available(&*db.target_data_layout(it.krate(db).into())?)\n+    ))\n+}\n+\n fn type_info(\n     sema: &Semantics<'_, RootDatabase>,\n     config: &HoverConfig,"}, {"sha": "f8b5b654546f7cf145f2579e99d28d66fc80512f", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3514f2f2ab9a59306f75af9515435190ab3ccdbd/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514f2f2ab9a59306f75af9515435190ab3ccdbd/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=3514f2f2ab9a59306f75af9515435190ab3ccdbd", "patch": "@@ -1528,7 +1528,7 @@ fn test_hover_function_pointer_show_identifiers() {\n             ```\n \n             ```rust\n-            type foo = fn(a: i32, b: i32) -> i32 // size = 0x8, align = 0x8\n+            type foo = fn(a: i32, b: i32) -> i32 // size = 0x8, align = 0x8, niches = 1\n             ```\n         \"#]],\n     );\n@@ -1546,7 +1546,7 @@ fn test_hover_function_pointer_no_identifier() {\n             ```\n \n             ```rust\n-            type foo = fn(i32, i32) -> i32 // size = 0x8, align = 0x8\n+            type foo = fn(i32, i32) -> i32 // size = 0x8, align = 0x8, niches = 1\n             ```\n         \"#]],\n     );\n@@ -1904,7 +1904,7 @@ fn test_hover_layout_of_enum() {\n             ```\n \n             ```rust\n-            enum Foo // size = 0x10, align = 0x8\n+            enum Foo // size = 0x10, align = 0x8, niches = 254\n             ```\n         \"#]],\n     );"}]}