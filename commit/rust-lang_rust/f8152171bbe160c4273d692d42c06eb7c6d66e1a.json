{"sha": "f8152171bbe160c4273d692d42c06eb7c6d66e1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTUyMTcxYmJlMTYwYzQyNzNkNjkyZDQyYzA2ZWI3YzZkNjZlMWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-02T14:19:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T14:19:45Z"}, "message": "Merge #7850\n\n7850: Don't add space when joining line to opening quote r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a3faa6f49ab16106b609766393ca5688b5c352ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3faa6f49ab16106b609766393ca5688b5c352ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8152171bbe160c4273d692d42c06eb7c6d66e1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPkmBCRBK7hj4Ov3rIwAAdHIIADLUXX+sHtz8xh3fL8uEIu7i\not8wJmsS5C5J4cNTxmcIpkBfzZSU2jnYUNN8Cx3StqUcwx8cpZI+A8gpH3QTSlwX\nozIiyZFB7eoHMDHQPHSF/rXnau+ROZVHq5QFzB1BlKI1rnZVxJLr+6aD2Rm+4MWA\nIGat+6V3zSChfbazVHEJwYg8k5TxsFjw740qamUkaEaAp23dPh8QRU/Ap3XeAlQp\nh7Z72SHEwUPNfPfLQNPj+CtDzRg3y38ApPzgJ4XkvjavPp8GOacu2RDKQuY3lGsp\npvS1J6BAdptUZlE0d85yyfnvMUpEOlxwG1YzD5ydvjSNU1nUTWtvivZzFpdw59k=\n=GkHF\n-----END PGP SIGNATURE-----\n", "payload": "tree a3faa6f49ab16106b609766393ca5688b5c352ec\nparent 8e7c42d1be34a4355766040cdc67ed040d8da6e2\nparent e2fc9411f1869fb0b8dd3893b937c4604887ee39\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614694785 +0000\ncommitter GitHub <noreply@github.com> 1614694785 +0000\n\nMerge #7850\n\n7850: Don't add space when joining line to opening quote r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8152171bbe160c4273d692d42c06eb7c6d66e1a", "html_url": "https://github.com/rust-lang/rust/commit/f8152171bbe160c4273d692d42c06eb7c6d66e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8152171bbe160c4273d692d42c06eb7c6d66e1a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7c42d1be34a4355766040cdc67ed040d8da6e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7c42d1be34a4355766040cdc67ed040d8da6e2", "html_url": "https://github.com/rust-lang/rust/commit/8e7c42d1be34a4355766040cdc67ed040d8da6e2"}, {"sha": "e2fc9411f1869fb0b8dd3893b937c4604887ee39", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fc9411f1869fb0b8dd3893b937c4604887ee39", "html_url": "https://github.com/rust-lang/rust/commit/e2fc9411f1869fb0b8dd3893b937c4604887ee39"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "7fcae13e0e57d6da76ec47e9658e8046b02cc1bc", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 62, "deletions": 12, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f8152171bbe160c4273d692d42c06eb7c6d66e1a/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8152171bbe160c4273d692d42c06eb7c6d66e1a/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=f8152171bbe160c4273d692d42c06eb7c6d66e1a", "patch": "@@ -7,6 +7,7 @@ use syntax::{\n     SyntaxKind::{self, USE_TREE, WHITESPACE},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n+use test_utils::mark;\n use text_edit::{TextEdit, TextEditBuilder};\n \n // Feature: Join Lines\n@@ -44,9 +45,9 @@ pub(crate) fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n         let text = token.text();\n         for (pos, _) in text[range].bytes().enumerate().filter(|&(_, b)| b == b'\\n') {\n             let pos: TextSize = (pos as u32).into();\n-            let off = token.text_range().start() + range.start() + pos;\n-            if !edit.invalidates_offset(off) {\n-                remove_newline(&mut edit, &token, off);\n+            let offset = token.text_range().start() + range.start() + pos;\n+            if !edit.invalidates_offset(offset) {\n+                remove_newline(&mut edit, &token, offset);\n             }\n         }\n     }\n@@ -56,14 +57,25 @@ pub(crate) fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n \n fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextSize) {\n     if token.kind() != WHITESPACE || token.text().bytes().filter(|&b| b == b'\\n').count() != 1 {\n-        // The node is either the first or the last in the file\n-        let suff = &token.text()[TextRange::new(\n-            offset - token.text_range().start() + TextSize::of('\\n'),\n-            TextSize::of(token.text()),\n-        )];\n-        let spaces = suff.bytes().take_while(|&b| b == b' ').count();\n-\n-        edit.replace(TextRange::at(offset, ((spaces + 1) as u32).into()), \" \".to_string());\n+        let mut string_open_quote = false;\n+        if let Some(string) = ast::String::cast(token.clone()) {\n+            if let Some(range) = string.open_quote_text_range() {\n+                mark::hit!(join_string_literal);\n+                string_open_quote = range.end() == offset;\n+            }\n+        }\n+\n+        let n_spaces_after_line_break = {\n+            let suff = &token.text()[TextRange::new(\n+                offset - token.text_range().start() + TextSize::of('\\n'),\n+                TextSize::of(token.text()),\n+            )];\n+            suff.bytes().take_while(|&b| b == b' ').count()\n+        };\n+\n+        let range = TextRange::at(offset, ((n_spaces_after_line_break + 1) as u32).into());\n+        let replace_with = if string_open_quote { \"\" } else { \" \" };\n+        edit.replace(range, replace_with.to_string());\n         return;\n     }\n \n@@ -194,7 +206,7 @@ fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {\n #[cfg(test)]\n mod tests {\n     use syntax::SourceFile;\n-    use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n+    use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range, mark};\n \n     use super::*;\n \n@@ -771,4 +783,42 @@ fn foo() {\n         \",\n         );\n     }\n+\n+    #[test]\n+    fn join_string_literal() {\n+        mark::check!(join_string_literal);\n+        check_join_lines(\n+            r#\"\n+fn main() {\n+    $0\"\n+hello\n+\";\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    $0\"hello\n+\";\n+}\n+\"#,\n+        );\n+\n+        check_join_lines(\n+            r#\"\n+fn main() {\n+    \"\n+$0hello\n+world\n+\";\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    \"\n+$0hello world\n+\";\n+}\n+\"#,\n+        );\n+    }\n }"}]}