{"sha": "38899d0c29135f9f89abafb3e0a32bd43bf7817c", "node_id": "C_kwDOAAsO6NoAKDM4ODk5ZDBjMjkxMzVmOWY4OWFiYWZiM2UwYTMyYmQ0M2JmNzgxN2M", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-18T22:43:20Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-27T03:15:36Z"}, "message": "replace usages of fn_sig query with bound_fn_sig", "tree": {"sha": "1966e460fe729286eb36881f5db4c226ab529732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1966e460fe729286eb36881f5db4c226ab529732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38899d0c29135f9f89abafb3e0a32bd43bf7817c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38899d0c29135f9f89abafb3e0a32bd43bf7817c", "html_url": "https://github.com/rust-lang/rust/commit/38899d0c29135f9f89abafb3e0a32bd43bf7817c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38899d0c29135f9f89abafb3e0a32bd43bf7817c/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64940f948757ffe4b0705726b497b552801a93d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64940f948757ffe4b0705726b497b552801a93d", "html_url": "https://github.com/rust-lang/rust/commit/a64940f948757ffe4b0705726b497b552801a93d"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "2a0e0857c56100419ceb3aa9dd7e789ac3057027", "filename": "clippy_lints/src/casts/as_ptr_cast_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         && let ExprKind::MethodCall(method_name, receiver, [], _) = cast_expr.peel_blocks().kind\n         && method_name.ident.name == rustc_span::sym::as_ptr\n         && let Some(as_ptr_did) = cx.typeck_results().type_dependent_def_id(cast_expr.peel_blocks().hir_id)\n-        && let as_ptr_sig = cx.tcx.fn_sig(as_ptr_did)\n+        && let as_ptr_sig = cx.tcx.bound_fn_sig(as_ptr_did).subst_identity()\n         && let Some(first_param_ty) = as_ptr_sig.skip_binder().inputs().iter().next()\n         && let ty::Ref(_, _, Mutability::Not) = first_param_ty.kind()\n         && let Some(recv) = snippet_opt(cx, receiver.span)"}, {"sha": "9c5a9f583743fa9e6bb0d6bc13a823a5af3888a6", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n             ExprKind::MethodCall(_, receiver, args, _) => {\n                 if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-                    let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n+                    let fn_sig = self.cx.tcx.bound_fn_sig(def_id).subst_identity().skip_binder();\n                     for (expr, bound) in iter::zip(std::iter::once(*receiver).chain(args.iter()), fn_sig.inputs()) {\n                         self.ty_bounds.push((*bound).into());\n                         self.visit_expr(expr);\n@@ -215,7 +215,7 @@ fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'\n     let node_ty = cx.typeck_results().node_type_opt(hir_id)?;\n     // We can't use `Ty::fn_sig` because it automatically performs substs, this may result in FNs.\n     match node_ty.kind() {\n-        ty::FnDef(def_id, _) => Some(cx.tcx.fn_sig(*def_id)),\n+        ty::FnDef(def_id, _) => Some(cx.tcx.bound_fn_sig(*def_id).subst_identity()),\n         ty::FnPtr(fn_sig) => Some(*fn_sig),\n         _ => None,\n     }"}, {"sha": "25620f45b8a986997043441b8046ff91cbae360c", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -759,7 +759,7 @@ fn walk_parents<'tcx>(\n             }) if span.ctxt() == ctxt => {\n                 let output = cx\n                     .tcx\n-                    .erase_late_bound_regions(cx.tcx.fn_sig(owner_id.to_def_id()).output());\n+                    .erase_late_bound_regions(cx.tcx.bound_fn_sig(owner_id.to_def_id()).subst_identity().output());\n                 Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n             },\n \n@@ -791,7 +791,7 @@ fn walk_parents<'tcx>(\n                         } else {\n                             let output = cx\n                                 .tcx\n-                                .erase_late_bound_regions(cx.tcx.fn_sig(cx.tcx.hir().local_def_id(owner_id)).output());\n+                                .erase_late_bound_regions(cx.tcx.bound_fn_sig(cx.tcx.hir().local_def_id(owner_id).into()).subst_identity().output());\n                             ty_auto_deref_stability(cx, output, precedence).position_for_result(cx)\n                         },\n                     )\n@@ -858,7 +858,7 @@ fn walk_parents<'tcx>(\n                             && let subs = cx\n                                 .typeck_results()\n                                 .node_substs_opt(parent.hir_id).map(|subs| &subs[1..]).unwrap_or_default()\n-                            && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n+                            && let impl_ty = if cx.tcx.bound_fn_sig(id).subst_identity().skip_binder().inputs()[0].is_ref() {\n                                 // Trait methods taking `&self`\n                                 sub_ty\n                             } else {\n@@ -879,7 +879,7 @@ fn walk_parents<'tcx>(\n                         return Some(Position::MethodReceiver);\n                     }\n                     args.iter().position(|arg| arg.hir_id == child_id).map(|i| {\n-                        let ty = cx.tcx.fn_sig(id).skip_binder().inputs()[i + 1];\n+                        let ty = cx.tcx.bound_fn_sig(id).subst_identity().skip_binder().inputs()[i + 1];\n                         // `e.hir_id == child_id` for https://github.com/rust-lang/rust-clippy/issues/9739\n                         // `method.args.is_none()` for https://github.com/rust-lang/rust-clippy/issues/9782\n                         if e.hir_id == child_id && method.args.is_none() && let ty::Param(param_ty) = ty.kind() {\n@@ -896,7 +896,7 @@ fn walk_parents<'tcx>(\n                         } else {\n                             ty_auto_deref_stability(\n                                 cx,\n-                                cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).input(i + 1)),\n+                                cx.tcx.erase_late_bound_regions(cx.tcx.bound_fn_sig(id).subst_identity().input(i + 1)),\n                                 precedence,\n                             )\n                             .position_for_arg()\n@@ -1093,7 +1093,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n     let sized_trait_def_id = cx.tcx.lang_items().sized_trait();\n \n     let Some(callee_def_id) = fn_def_id(cx, parent) else { return Position::Other(precedence) };\n-    let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+    let fn_sig = cx.tcx.bound_fn_sig(callee_def_id).subst_identity().skip_binder();\n     let substs_with_expr_ty = cx\n         .typeck_results()\n         .node_substs(if let ExprKind::Call(callee, _) = parent.kind {\n@@ -1221,7 +1221,7 @@ fn has_ref_mut_self_method(cx: &LateContext<'_>, trait_def_id: DefId) -> bool {\n         .in_definition_order()\n         .any(|assoc_item| {\n             if assoc_item.fn_has_self_parameter {\n-                let self_ty = cx.tcx.fn_sig(assoc_item.def_id).skip_binder().inputs()[0];\n+                let self_ty = cx.tcx.bound_fn_sig(assoc_item.def_id).subst_identity().skip_binder().inputs()[0];\n                 matches!(self_ty.kind(), ty::Ref(_, _, Mutability::Mut))\n             } else {\n                 false"}, {"sha": "4f0371c027c25ee44e22c2db4448e88058417b17", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -58,7 +58,7 @@ fn check_raw_ptr<'tcx>(\n                     },\n                     hir::ExprKind::MethodCall(_, recv, args, _) => {\n                         let def_id = typeck.type_dependent_def_id(e.hir_id).unwrap();\n-                        if cx.tcx.fn_sig(def_id).skip_binder().unsafety == hir::Unsafety::Unsafe {\n+                        if cx.tcx.bound_fn_sig(def_id).skip_binder().skip_binder().unsafety == hir::Unsafety::Unsafe {\n                             check_arg(cx, &raw_ptrs, recv);\n                             for arg in args {\n                                 check_arg(cx, &raw_ptrs, arg);"}, {"sha": "21de62581f1c39688b6305887ef9b8d66f9577e0", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -21,7 +21,7 @@ fn result_err_ty<'tcx>(\n ) -> Option<(&'tcx hir::Ty<'tcx>, Ty<'tcx>)> {\n     if !in_external_macro(cx.sess(), item_span)\n         && let hir::FnRetTy::Return(hir_ty) = decl.output\n-        && let ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).output())\n+        && let ty = cx.tcx.erase_late_bound_regions(cx.tcx.bound_fn_sig(id.into()).subst_identity().output())\n         && is_type_diagnostic_item(cx, ty, sym::Result)\n         && let ty::Adt(_, substs) = ty.kind()\n     {"}, {"sha": "d971684a3aa9cb7567e74b0ef9b734c005664b15", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -124,7 +124,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n         .expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n-    let self_type = cx.tcx.fn_sig(item.owner_id).input(0);\n+    let self_type = cx.tcx.bound_fn_sig(item.owner_id.to_def_id()).skip_binder().input(0);\n     let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error"}, {"sha": "131af2fd9c381c62277443641c9353a1fa7d9b2c", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n \n fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefId) {\n     if sig.decl.implicit_self.has_implicit_self() {\n-        let ret_ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(fn_id).output());\n+        let ret_ty = cx.tcx.erase_late_bound_regions(cx.tcx.bound_fn_sig(fn_id.into()).subst_identity().output());\n         let ret_ty = cx\n             .tcx\n             .try_normalize_erasing_regions(cx.param_env, ret_ty)"}, {"sha": "121d6b9f0fe7e405e8b3ab64934641aef05ed2ee", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -144,7 +144,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if let Some(local_id) = ty_id.as_local();\n             let ty_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_id);\n             if !is_lint_allowed(cx, LEN_WITHOUT_IS_EMPTY, ty_hir_id);\n-            if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.owner_id).skip_binder());\n+            if let Some(output) = parse_len_output(cx, cx.tcx.bound_fn_sig(item.owner_id.to_def_id()).subst_identity().skip_binder());\n             then {\n                 let (name, kind) = match cx.tcx.hir().find(ty_hir_id) {\n                     Some(Node::ForeignItem(x)) => (x.ident.name, \"extern type\"),\n@@ -196,7 +196,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: Symbol) -> bool {\n         item.ident.name == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && { cx.tcx.fn_sig(item.id.owner_id).inputs().skip_binder().len() == 1 }\n+                has_self && { cx.tcx.bound_fn_sig(item.id.owner_id.to_def_id()).skip_binder().inputs().skip_binder().len() == 1 }\n             } else {\n                 false\n             }\n@@ -224,7 +224,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n             .any(|i| {\n                 i.kind == ty::AssocKind::Fn\n                     && i.fn_has_self_parameter\n-                    && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n+                    && cx.tcx.bound_fn_sig(i.def_id).skip_binder().inputs().skip_binder().len() == 1\n             });\n \n         if !is_empty_method_found {\n@@ -342,7 +342,7 @@ fn check_for_is_empty<'tcx>(\n         ),\n         Some(is_empty)\n             if !(is_empty.fn_has_self_parameter\n-                && check_is_empty_sig(cx.tcx.fn_sig(is_empty.def_id).skip_binder(), self_kind, output)) =>\n+                && check_is_empty_sig(cx.tcx.bound_fn_sig(is_empty.def_id).subst_identity().skip_binder(), self_kind, output)) =>\n         {\n             (\n                 format!(\n@@ -473,7 +473,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n         if item.kind == ty::AssocKind::Fn {\n-            let sig = cx.tcx.fn_sig(item.def_id);\n+            let sig = cx.tcx.bound_fn_sig(item.def_id).skip_binder();\n             let ty = sig.skip_binder();\n             ty.inputs().len() == 1\n         } else {"}, {"sha": "3e025bc0e71607d1f9010190988045cae7a26a59", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             ExprKind::MethodCall(_, receiver, args, _) => {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n                 for (ty, expr) in iter::zip(\n-                    self.cx.tcx.fn_sig(def_id).inputs().skip_binder(),\n+                    self.cx.tcx.bound_fn_sig(def_id).subst_identity().inputs().skip_binder(),\n                     std::iter::once(receiver).chain(args.iter()),\n                 ) {\n                     self.prefer_mutable = false;"}, {"sha": "a179dd091e42126634056e3d0a30432339cd393a", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -104,7 +104,7 @@ fn is_unit_function(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n \n     if let ty::FnDef(id, _) = *ty.kind() {\n-        if let Some(fn_type) = cx.tcx.fn_sig(id).no_bound_vars() {\n+        if let Some(fn_type) = cx.tcx.bound_fn_sig(id).subst_identity().no_bound_vars() {\n             return is_unit_type(fn_type.output());\n         }\n     }"}, {"sha": "3f670ebc9178b6a3526b5d8cdd23372a044ad09a", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -70,7 +70,7 @@ pub(super) fn check<'tcx>(\n                 if let hir::ExprKind::Path(ref p) = fun.kind {\n                     match cx.qpath_res(p, fun.hir_id) {\n                         hir::def::Res::Def(hir::def::DefKind::Fn | hir::def::DefKind::AssocFn, def_id) => matches!(\n-                            cx.tcx.fn_sig(def_id).output().skip_binder().kind(),\n+                            cx.tcx.bound_fn_sig(def_id).subst_identity().output().skip_binder().kind(),\n                             ty::Ref(re, ..) if re.is_static(),\n                         ),\n                         _ => false,\n@@ -84,7 +84,7 @@ pub(super) fn check<'tcx>(\n                     .type_dependent_def_id(arg.hir_id)\n                     .map_or(false, |method_id| {\n                         matches!(\n-                            cx.tcx.fn_sig(method_id).output().skip_binder().kind(),\n+                            cx.tcx.bound_fn_sig(method_id).subst_identity().output().skip_binder().kind(),\n                             ty::Ref(re, ..) if re.is_static()\n                         )\n                     })"}, {"sha": "6002ef1340bea23e59939a53da1bf3800ac40754", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -3352,7 +3352,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n         if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {\n-            let method_sig = cx.tcx.fn_sig(impl_item.owner_id);\n+            let method_sig = cx.tcx.bound_fn_sig(impl_item.owner_id.to_def_id()).subst_identity();\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n             let first_arg_ty_opt = method_sig.inputs().iter().next().copied();\n             // if this impl block implements a trait, lint in trait definition instead"}, {"sha": "1a1715d03a7cb3d741cb7361b13cdce3cad64822", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -137,7 +137,7 @@ pub(super) fn check<'tcx>(\n /// Checks if the given method call matches the expected signature of `([&[mut]] self) -> bool`\n fn is_is_empty_sig(cx: &LateContext<'_>, call_id: HirId) -> bool {\n     cx.typeck_results().type_dependent_def_id(call_id).map_or(false, |id| {\n-        let sig = cx.tcx.fn_sig(id).skip_binder();\n+        let sig = cx.tcx.bound_fn_sig(id).subst_identity().skip_binder();\n         sig.inputs().len() == 1 && sig.output().is_bool()\n     })\n }\n@@ -165,7 +165,7 @@ fn iterates_same_ty<'tcx>(cx: &LateContext<'tcx>, iter_ty: Ty<'tcx>, collect_ty:\n fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -> bool {\n     let typeck = cx.typeck_results();\n     if let Some(id) = typeck.type_dependent_def_id(call_id)\n-        && let sig = cx.tcx.fn_sig(id)\n+        && let sig = cx.tcx.bound_fn_sig(id).subst_identity()\n         && sig.skip_binder().output().is_bool()\n         && let [_, search_ty] = *sig.skip_binder().inputs()\n         && let ty::Ref(_, search_ty, Mutability::Not) = *cx.tcx.erase_late_bound_regions(sig.rebind(search_ty)).kind()"}, {"sha": "8036e787aaecc6ecba24cf298232036f91fe1810", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -246,7 +246,7 @@ fn check_other_call_arg<'tcx>(\n     if_chain! {\n         if let Some((maybe_call, maybe_arg)) = skip_addr_of_ancestors(cx, expr);\n         if let Some((callee_def_id, _, recv, call_args)) = get_callee_substs_and_args(cx, maybe_call);\n-        let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+        let fn_sig = cx.tcx.bound_fn_sig(callee_def_id).subst_identity().skip_binder();\n         if let Some(i) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == maybe_arg.hir_id);\n         if let Some(input) = fn_sig.inputs().get(i);\n         let (input, n_refs) = peel_mid_ty_refs(*input);\n@@ -386,7 +386,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n-                    let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+                    let fn_sig = cx.tcx.bound_fn_sig(callee_def_id).subst_identity().skip_binder();\n                     if let Some(arg_index) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == expr.hir_id)\n                         && let Some(param_ty) = fn_sig.inputs().get(arg_index)\n                         && let ty::Param(ParamTy { index: param_index , ..}) = param_ty.kind()"}, {"sha": "a2868883673f5979889e8cfba6c92c8f73d8d019", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -138,7 +138,7 @@ impl MutableKeyType {\n \n     fn check_sig(&self, cx: &LateContext<'_>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n         let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.bound_fn_sig(fn_def_id.into()).subst_identity();\n         for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {\n             self.check_ty_(cx, hir_ty.span, *ty);\n         }"}, {"sha": "e3d25603a7157bda8882e00eb25bae4b099d314c", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             ctx\n         };\n \n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.bound_fn_sig(fn_def_id.into()).subst_identity();\n         let fn_sig = cx.tcx.erase_late_bound_regions(fn_sig);\n \n         for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(body.params).enumerate() {"}, {"sha": "5512109c6cbb1255f71c5fdd8e5e13c87665a051", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> PassByRefOrValue {\n             return;\n         }\n \n-        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let fn_sig = cx.tcx.bound_fn_sig(def_id.into()).subst_identity();\n         let fn_body = cx.enclosing_body.map(|id| cx.tcx.hir().body(id));\n \n         // Gather all the lifetimes found in the output type which may affect whether"}, {"sha": "0a2d35015f57318d5b862dc35c61f3affa929dd3", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             check_mut_from_ref(cx, sig, None);\n             for arg in check_fn_args(\n                 cx,\n-                cx.tcx.fn_sig(item.owner_id).skip_binder().inputs(),\n+                cx.tcx.bound_fn_sig(item.owner_id.to_def_id()).subst_identity().skip_binder().inputs(),\n                 sig.decl.inputs,\n                 &[],\n             )\n@@ -217,7 +217,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n \n         check_mut_from_ref(cx, sig, Some(body));\n         let decl = sig.decl;\n-        let sig = cx.tcx.fn_sig(item_id).skip_binder();\n+        let sig = cx.tcx.bound_fn_sig(item_id.to_def_id()).subst_identity().skip_binder();\n         let lint_args: Vec<_> = check_fn_args(cx, sig.inputs(), decl.inputs, body.params)\n             .filter(|arg| !is_trait_item || arg.mutability() == Mutability::Not)\n             .collect();\n@@ -624,7 +624,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             return;\n                         };\n \n-                        match *self.cx.tcx.fn_sig(id).skip_binder().inputs()[i].peel_refs().kind() {\n+                        match *self.cx.tcx.bound_fn_sig(id).subst_identity().skip_binder().inputs()[i].peel_refs().kind() {\n                             ty::Dynamic(preds, _, _) if !matches_preds(self.cx, args.deref_ty.ty(self.cx), preds) => {\n                                 set_skip_flag();\n                             },"}, {"sha": "f3c5033060433a7d77f1ad97d79bc4744ac3ceb3", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -287,7 +287,8 @@ fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>)\n         if let Some(def_id) = fn_def_id(cx, e)\n             && cx\n                 .tcx\n-                .fn_sig(def_id)\n+                .bound_fn_sig(def_id)\n+                .subst_identity()\n                 .skip_binder()\n                 .output()\n                 .walk()"}, {"sha": "5df26d8b0a38ce9d7b8d80bc3fb96cf533c6ea21", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -76,7 +76,7 @@ fn get_projection_pred<'tcx>(\n fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Vec<(usize, String)> {\n     let mut args_to_check = Vec::new();\n     if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let fn_sig = cx.tcx.bound_fn_sig(def_id).subst_identity();\n         let generics = cx.tcx.predicates_of(def_id);\n         let fn_mut_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().fn_mut_trait());\n         let ord_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.get_diagnostic_item(sym::Ord));"}, {"sha": "681e59a1575d4c2115dc4245e76a3d8aad6da28d", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -156,7 +156,7 @@ fn needs_inferred_result_ty(\n         },\n         _ => return false,\n     };\n-    let sig = cx.tcx.fn_sig(id).skip_binder();\n+    let sig = cx.tcx.bound_fn_sig(id).subst_identity().skip_binder();\n     if let ty::Param(output_ty) = *sig.output().kind() {\n         let args: Vec<&Expr<'_>> = if let Some(receiver) = receiver {\n             std::iter::once(receiver).chain(args.iter()).collect()"}, {"sha": "09324fd92943cae08c2bc964d8ffa9438a5f537d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     .associated_item(impl_item.owner_id)\n                     .trait_item_def_id\n                     .expect(\"impl method matches a trait method\");\n-                let trait_method_sig = cx.tcx.fn_sig(trait_method);\n+                let trait_method_sig = cx.tcx.bound_fn_sig(trait_method).subst_identity();\n                 let trait_method_sig = cx.tcx.erase_late_bound_regions(trait_method_sig);\n \n                 // `impl_inputs_outputs` is an iterator over the types (`hir::Ty`) declared in the"}, {"sha": "38588e32dbfe9cfac23c3a6d818876ff1767ff88", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -79,7 +79,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n             && subs.types().all(|x| matches!(x.peel_refs().kind(), ty::Param(_)))\n         {\n             // Limit the function to either `(self) -> bool` or `(&self) -> bool`\n-            match &**cx.tcx.fn_sig(fn_id).skip_binder().inputs_and_output {\n+            match &**cx.tcx.bound_fn_sig(fn_id).subst_identity().skip_binder().inputs_and_output {\n                 [arg, res] if !arg.is_mutable_ptr() && arg.peel_refs() == ty && res.is_bool() => NoChange,\n                 _ => Lazy,\n             }"}, {"sha": "ccc5f3503d2f58c9b063947680153b3e7157772c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -1379,7 +1379,7 @@ pub fn get_enclosing_loop_or_multi_call_closure<'tcx>(\n                                     .chain(args.iter())\n                                     .position(|arg| arg.hir_id == id)?;\n                                 let id = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n-                                let ty = cx.tcx.fn_sig(id).skip_binder().inputs()[i];\n+                                let ty = cx.tcx.bound_fn_sig(id).subst_identity().skip_binder().inputs()[i];\n                                 ty_is_fn_once_param(cx.tcx, ty, cx.tcx.param_env(id).caller_bounds()).then_some(())\n                             },\n                             _ => None,\n@@ -1580,14 +1580,14 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n /// Convenience function to get the return type of a function.\n pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx> {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n-    let ret_ty = cx.tcx.fn_sig(fn_def_id).output();\n+    let ret_ty = cx.tcx.bound_fn_sig(fn_def_id.into()).subst_identity().output();\n     cx.tcx.erase_late_bound_regions(ret_ty)\n }\n \n /// Convenience function to get the nth argument type of a function.\n pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId, nth: usize) -> Ty<'tcx> {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n-    let arg = cx.tcx.fn_sig(fn_def_id).input(nth);\n+    let arg = cx.tcx.bound_fn_sig(fn_def_id.into()).subst_identity().input(nth);\n     cx.tcx.erase_late_bound_regions(arg)\n }\n "}, {"sha": "1552e343582ee2b03a8dd62562b184df676c77f1", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -55,7 +55,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n     // impl trait is gone in MIR, so check the return type manually\n     check_ty(\n         tcx,\n-        tcx.fn_sig(def_id).output().skip_binder(),\n+        tcx.bound_fn_sig(def_id).subst_identity().output().skip_binder(),\n         body.local_decls.iter().next().unwrap().source_info.span,\n     )?;\n "}, {"sha": "d6a698bbeaa8ab9f322d77a27c7463f9b29d241e", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -885,7 +885,7 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n                     .cx\n                     .typeck_results()\n                     .type_dependent_def_id(parent_expr.hir_id)\n-                    .map(|did| self.cx.tcx.fn_sig(did).skip_binder())\n+                    .map(|did| self.cx.tcx.bound_fn_sig(did).subst_identity().skip_binder())\n                 {\n                     std::iter::once(receiver)\n                         .chain(call_args.iter())"}, {"sha": "14fc2c1001704f4059833a01e333355d8b24d99b", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -628,7 +628,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n /// If the expression is function like, get the signature for it.\n pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnSig<'tcx>> {\n     if let Res::Def(DefKind::Fn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::AssocFn, id) = path_res(cx, expr) {\n-        Some(ExprFnSig::Sig(cx.tcx.fn_sig(id), Some(id)))\n+        Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst_identity(), Some(id)))\n     } else {\n         ty_sig(cx, cx.typeck_results().expr_ty_adjusted(expr).peel_refs())\n     }"}, {"sha": "1680a40206a3a854e8ace00de2b2d3bd8a52ab6f", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38899d0c29135f9f89abafb3e0a32bd43bf7817c/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=38899d0c29135f9f89abafb3e0a32bd43bf7817c", "patch": "@@ -392,12 +392,12 @@ pub fn is_expr_unsafe<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n                         .cx\n                         .typeck_results()\n                         .type_dependent_def_id(e.hir_id)\n-                        .map_or(false, |id| self.cx.tcx.fn_sig(id).unsafety() == Unsafety::Unsafe) =>\n+                        .map_or(false, |id| self.cx.tcx.bound_fn_sig(id).skip_binder().unsafety() == Unsafety::Unsafe) =>\n                 {\n                     self.is_unsafe = true;\n                 },\n                 ExprKind::Call(func, _) => match *self.cx.typeck_results().expr_ty(func).peel_refs().kind() {\n-                    ty::FnDef(id, _) if self.cx.tcx.fn_sig(id).unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n+                    ty::FnDef(id, _) if self.cx.tcx.bound_fn_sig(id).skip_binder().unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n                     ty::FnPtr(sig) if sig.unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n                     _ => walk_expr(self, e),\n                 },"}]}