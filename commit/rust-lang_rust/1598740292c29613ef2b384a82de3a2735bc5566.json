{"sha": "1598740292c29613ef2b384a82de3a2735bc5566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTg3NDAyOTJjMjk2MTNlZjJiMzg0YTgyZGUzYTI3MzViYzU1NjY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-13T19:25:45Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:19:06Z"}, "message": "Reuse existing element rendering", "tree": {"sha": "bc2451b9fe6cf7943fcbcaaa762c9591c0bad9c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc2451b9fe6cf7943fcbcaaa762c9591c0bad9c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1598740292c29613ef2b384a82de3a2735bc5566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1598740292c29613ef2b384a82de3a2735bc5566", "html_url": "https://github.com/rust-lang/rust/commit/1598740292c29613ef2b384a82de3a2735bc5566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1598740292c29613ef2b384a82de3a2735bc5566/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8edd003aa447bd2da10fd81b24f582deacdc11", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8edd003aa447bd2da10fd81b24f582deacdc11", "html_url": "https://github.com/rust-lang/rust/commit/4c8edd003aa447bd2da10fd81b24f582deacdc11"}], "stats": {"total": 162, "additions": 74, "deletions": 88}, "files": [{"sha": "ef0fc27ba803f75db8f0b74a818086d28dd21f2a", "filename": "crates/completion/src/completions/magic.rs", "status": "modified", "additions": 34, "deletions": 48, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs?ref=1598740292c29613ef2b384a82de3a2735bc5566", "patch": "@@ -2,12 +2,14 @@\n \n use assists::utils::{insert_use, mod_path_to_ast, ImportScope};\n use either::Either;\n-use hir::{db::HirDatabase, MacroDef, ModuleDef};\n+use hir::ScopeDef;\n use ide_db::imports_locator;\n use syntax::{algo, AstNode};\n-use text_edit::TextEdit;\n \n-use crate::{context::CompletionContext, item::CompletionKind, CompletionItem, CompletionItemKind};\n+use crate::{\n+    context::CompletionContext,\n+    render::{render_resolution, RenderContext},\n+};\n \n use super::Completions;\n \n@@ -25,65 +27,49 @@ pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) ->\n     let possible_imports =\n         imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name)\n             .filter_map(|import_candidate| {\n-                let use_path = match import_candidate {\n-                    Either::Left(module_def) => current_module.find_use_path(ctx.db, module_def),\n-                    Either::Right(macro_def) => current_module.find_use_path(ctx.db, macro_def),\n-                }?;\n-                Some((use_path, additional_completion(ctx.db, import_candidate)))\n+                Some(match import_candidate {\n+                    Either::Left(module_def) => (\n+                        current_module.find_use_path(ctx.db, module_def)?,\n+                        ScopeDef::ModuleDef(module_def),\n+                    ),\n+                    Either::Right(macro_def) => (\n+                        current_module.find_use_path(ctx.db, macro_def)?,\n+                        ScopeDef::MacroDef(macro_def),\n+                    ),\n+                })\n             })\n-            .filter_map(|(mod_path, additional_completion)| {\n-                let mut builder = TextEdit::builder();\n+            .filter_map(|(mod_path, definition)| {\n+                let mut resolution_with_missing_import = render_resolution(\n+                    RenderContext::new(ctx),\n+                    mod_path.segments.last()?.to_string(),\n+                    &definition,\n+                )?;\n \n-                let correct_qualifier = format!(\n-                    \"{}{}\",\n-                    mod_path.segments.last()?,\n-                    additional_completion.unwrap_or_default()\n-                );\n-                builder.replace(anchor.syntax().text_range(), correct_qualifier);\n+                let mut text_edits =\n+                    resolution_with_missing_import.text_edit().to_owned().into_builder();\n \n                 let rewriter =\n                     insert_use(&import_scope, mod_path_to_ast(&mod_path), ctx.config.merge);\n                 let old_ast = rewriter.rewrite_root()?;\n-                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut builder);\n-\n-                let completion_item: CompletionItem = CompletionItem::new(\n-                    CompletionKind::Magic,\n-                    ctx.source_range(),\n-                    mod_path.to_string(),\n-                )\n-                .kind(CompletionItemKind::Struct)\n-                .text_edit(builder.finish())\n-                .into();\n-                Some(completion_item)\n+                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n+\n+                resolution_with_missing_import.update_text_edit(text_edits.finish());\n+\n+                Some(resolution_with_missing_import)\n             });\n-    acc.add_all(possible_imports);\n \n+    acc.add_all(possible_imports);\n     Some(())\n }\n \n-fn additional_completion(\n-    db: &dyn HirDatabase,\n-    import_candidate: Either<ModuleDef, MacroDef>,\n-) -> Option<String> {\n-    match import_candidate {\n-        Either::Left(ModuleDef::Function(_)) => Some(\"()\".to_string()),\n-        Either::Right(macro_def) => {\n-            let (left_brace, right_brace) =\n-                crate::render::macro_::guess_macro_braces(db, macro_def);\n-            Some(format!(\"!{}{}\", left_brace, right_brace))\n-        }\n-        _ => None,\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::test_utils::check_edit;\n \n     #[test]\n     fn function_magic_completion() {\n         check_edit(\n-            \"dep::io::stdin\",\n+            \"stdin\",\n             r#\"\n //- /lib.rs crate:dep\n pub mod io {\n@@ -99,7 +85,7 @@ fn main() {\n use dep::io::stdin;\n \n fn main() {\n-    stdin()\n+    stdin()$0\n }\n \"#,\n         );\n@@ -108,7 +94,7 @@ fn main() {\n     #[test]\n     fn macro_magic_completion() {\n         check_edit(\n-            \"dep::macro_with_curlies\",\n+            \"macro_with_curlies!\",\n             r#\"\n //- /lib.rs crate:dep\n /// Please call me as macro_with_curlies! {}\n@@ -126,7 +112,7 @@ fn main() {\n use dep::macro_with_curlies;\n \n fn main() {\n-    macro_with_curlies! {}\n+    macro_with_curlies! {$0}\n }\n \"#,\n         );\n@@ -135,7 +121,7 @@ fn main() {\n     #[test]\n     fn case_insensitive_magic_completion_works() {\n         check_edit(\n-            \"dep::some_module::ThirdStruct\",\n+            \"ThirdStruct\",\n             r#\"\n //- /lib.rs crate:dep\n pub struct FirstStruct;"}, {"sha": "53a12a763d3ef2a7c48622ddef4201963cacaa25", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=1598740292c29613ef2b384a82de3a2735bc5566", "patch": "@@ -218,6 +218,10 @@ impl CompletionItem {\n         &self.text_edit\n     }\n \n+    pub fn update_text_edit(&mut self, new_text_edit: TextEdit) {\n+        self.text_edit = new_text_edit;\n+    }\n+\n     /// Short one-line additional information, like a type\n     pub fn detail(&self) -> Option<&str> {\n         self.detail.as_deref()"}, {"sha": "96be59cc336aeda40e1b3865b6ce8a0c60c691a9", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=1598740292c29613ef2b384a82de3a2735bc5566", "patch": "@@ -1,6 +1,6 @@\n //! Renderer for macro invocations.\n \n-use hir::{db::HirDatabase, Documentation, HasAttrs, HasSource};\n+use hir::{Documentation, HasSource};\n use syntax::display::macro_label;\n use test_utils::mark;\n \n@@ -27,48 +27,12 @@ struct MacroRender<'a> {\n     ket: &'static str,\n }\n \n-pub fn guess_macro_braces(\n-    db: &dyn HirDatabase,\n-    macro_: hir::MacroDef,\n-) -> (&'static str, &'static str) {\n-    let macro_name = match macro_.name(db) {\n-        Some(name) => name.to_string(),\n-        None => return (\"(\", \")\"),\n-    };\n-    let macro_docs = macro_.docs(db);\n-    let macro_docs = macro_docs.as_ref().map(Documentation::as_str).unwrap_or(\"\");\n-\n-    let mut votes = [0, 0, 0];\n-    for (idx, s) in macro_docs.match_indices(&macro_name) {\n-        let (before, after) = (&macro_docs[..idx], &macro_docs[idx + s.len()..]);\n-        // Ensure to match the full word\n-        if after.starts_with('!')\n-            && !before.ends_with(|c: char| c == '_' || c.is_ascii_alphanumeric())\n-        {\n-            // It may have spaces before the braces like `foo! {}`\n-            match after[1..].chars().find(|&c| !c.is_whitespace()) {\n-                Some('{') => votes[0] += 1,\n-                Some('[') => votes[1] += 1,\n-                Some('(') => votes[2] += 1,\n-                _ => {}\n-            }\n-        }\n-    }\n-\n-    // Insert a space before `{}`.\n-    // We prefer the last one when some votes equal.\n-    let (_vote, (bra, ket)) = votes\n-        .iter()\n-        .zip(&[(\" {\", \"}\"), (\"[\", \"]\"), (\"(\", \")\")])\n-        .max_by_key(|&(&vote, _)| vote)\n-        .unwrap();\n-    (*bra, *ket)\n-}\n-\n impl<'a> MacroRender<'a> {\n     fn new(ctx: RenderContext<'a>, name: String, macro_: hir::MacroDef) -> MacroRender<'a> {\n         let docs = ctx.docs(macro_);\n-        let (bra, ket) = guess_macro_braces(ctx.db(), macro_);\n+        let docs_str = docs.as_ref().map_or(\"\", |s| s.as_str());\n+        let (bra, ket) = guess_macro_braces(&name, docs_str);\n+\n         MacroRender { ctx, name, macro_, docs, bra, ket }\n     }\n \n@@ -133,6 +97,34 @@ impl<'a> MacroRender<'a> {\n     }\n }\n \n+fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static str) {\n+    let mut votes = [0, 0, 0];\n+    for (idx, s) in docs.match_indices(&macro_name) {\n+        let (before, after) = (&docs[..idx], &docs[idx + s.len()..]);\n+        // Ensure to match the full word\n+        if after.starts_with('!')\n+            && !before.ends_with(|c: char| c == '_' || c.is_ascii_alphanumeric())\n+        {\n+            // It may have spaces before the braces like `foo! {}`\n+            match after[1..].chars().find(|&c| !c.is_whitespace()) {\n+                Some('{') => votes[0] += 1,\n+                Some('[') => votes[1] += 1,\n+                Some('(') => votes[2] += 1,\n+                _ => {}\n+            }\n+        }\n+    }\n+\n+    // Insert a space before `{}`.\n+    // We prefer the last one when some votes equal.\n+    let (_vote, (bra, ket)) = votes\n+        .iter()\n+        .zip(&[(\" {\", \"}\"), (\"[\", \"]\"), (\"(\", \")\")])\n+        .max_by_key(|&(&vote, _)| vote)\n+        .unwrap();\n+    (*bra, *ket)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use test_utils::mark;"}, {"sha": "9eef7a8906713b4d06748580216306a128108f1e", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1598740292c29613ef2b384a82de3a2735bc5566/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=1598740292c29613ef2b384a82de3a2735bc5566", "patch": "@@ -48,6 +48,10 @@ impl TextEdit {\n         TextEditBuilder::default()\n     }\n \n+    pub fn into_builder(self) -> TextEditBuilder {\n+        TextEditBuilder { indels: self.indels }\n+    }\n+\n     pub fn insert(offset: TextSize, text: String) -> TextEdit {\n         let mut builder = TextEdit::builder();\n         builder.insert(offset, text);"}]}