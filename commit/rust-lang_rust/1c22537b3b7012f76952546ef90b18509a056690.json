{"sha": "1c22537b3b7012f76952546ef90b18509a056690", "node_id": "C_kwDOAAsO6NoAKDFjMjI1MzdiM2I3MDEyZjc2OTUyNTQ2ZWY5MGIxODUwOWEwNTY2OTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-15T20:23:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-15T20:23:15Z"}, "message": "Auto merge of #12005 - Veykril:hir-ty-simplify, r=Veykril\n\ninternal: Remove frequent `Arc<Body>` clones in type checking\n\nbors r+", "tree": {"sha": "9139f19803494054c5c216e72055bc2e3c7ec394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9139f19803494054c5c216e72055bc2e3c7ec394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c22537b3b7012f76952546ef90b18509a056690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c22537b3b7012f76952546ef90b18509a056690", "html_url": "https://github.com/rust-lang/rust/commit/1c22537b3b7012f76952546ef90b18509a056690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c22537b3b7012f76952546ef90b18509a056690/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10284a10c07065d72bdaac1ed3059ad80df8318", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10284a10c07065d72bdaac1ed3059ad80df8318", "html_url": "https://github.com/rust-lang/rust/commit/e10284a10c07065d72bdaac1ed3059ad80df8318"}, {"sha": "e5bf60fee2de60a85076aaffd71df249a8ac41cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5bf60fee2de60a85076aaffd71df249a8ac41cb", "html_url": "https://github.com/rust-lang/rust/commit/e5bf60fee2de60a85076aaffd71df249a8ac41cb"}], "stats": {"total": 167, "additions": 86, "deletions": 81}, "files": [{"sha": "1892e30a425bec677dbd92168a6fb9dc5f77d703", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 68, "deletions": 62, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/1c22537b3b7012f76952546ef90b18509a056690/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c22537b3b7012f76952546ef90b18509a056690/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=1c22537b3b7012f76952546ef90b18509a056690", "patch": "@@ -59,7 +59,8 @@ mod closure;\n pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n     let _p = profile::span(\"infer_query\");\n     let resolver = def.resolver(db.upcast());\n-    let mut ctx = InferenceContext::new(db, def, resolver);\n+    let body = db.body(def);\n+    let mut ctx = InferenceContext::new(db, def, &body, resolver);\n \n     match def {\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n@@ -360,7 +361,7 @@ impl Index<PatId> for InferenceResult {\n pub(crate) struct InferenceContext<'a> {\n     pub(crate) db: &'a dyn HirDatabase,\n     pub(crate) owner: DefWithBodyId,\n-    pub(crate) body: Arc<Body>,\n+    pub(crate) body: &'a Body,\n     pub(crate) resolver: Resolver,\n     table: unify::InferenceTable<'a>,\n     trait_env: Arc<TraitEnvironment>,\n@@ -394,7 +395,12 @@ fn find_breakable<'c>(\n }\n \n impl<'a> InferenceContext<'a> {\n-    fn new(db: &'a dyn HirDatabase, owner: DefWithBodyId, resolver: Resolver) -> Self {\n+    fn new(\n+        db: &'a dyn HirDatabase,\n+        owner: DefWithBodyId,\n+        body: &'a Body,\n+        resolver: Resolver,\n+    ) -> Self {\n         let krate = owner.module(db.upcast()).krate();\n         let trait_env = owner\n             .as_generic_def_id()\n@@ -406,46 +412,76 @@ impl<'a> InferenceContext<'a> {\n             return_ty: TyKind::Error.intern(Interner), // set in collect_fn_signature\n             db,\n             owner,\n-            body: db.body(owner),\n+            body,\n             resolver,\n             diverges: Diverges::Maybe,\n             breakables: Vec::new(),\n         }\n     }\n \n-    fn err_ty(&self) -> Ty {\n-        self.result.standard_types.unknown.clone()\n-    }\n+    fn resolve_all(self) -> InferenceResult {\n+        let InferenceContext { mut table, mut result, .. } = self;\n \n-    fn resolve_all(mut self) -> InferenceResult {\n         // FIXME resolve obligations as well (use Guidance if necessary)\n-        self.table.resolve_obligations_as_possible();\n+        table.resolve_obligations_as_possible();\n \n         // make sure diverging type variables are marked as such\n-        self.table.propagate_diverging_flag();\n-        let mut result = std::mem::take(&mut self.result);\n+        table.propagate_diverging_flag();\n         for ty in result.type_of_expr.values_mut() {\n-            *ty = self.table.resolve_completely(ty.clone());\n+            *ty = table.resolve_completely(ty.clone());\n         }\n         for ty in result.type_of_pat.values_mut() {\n-            *ty = self.table.resolve_completely(ty.clone());\n+            *ty = table.resolve_completely(ty.clone());\n         }\n         for mismatch in result.type_mismatches.values_mut() {\n-            mismatch.expected = self.table.resolve_completely(mismatch.expected.clone());\n-            mismatch.actual = self.table.resolve_completely(mismatch.actual.clone());\n+            mismatch.expected = table.resolve_completely(mismatch.expected.clone());\n+            mismatch.actual = table.resolve_completely(mismatch.actual.clone());\n         }\n         for (_, subst) in result.method_resolutions.values_mut() {\n-            *subst = self.table.resolve_completely(subst.clone());\n+            *subst = table.resolve_completely(subst.clone());\n         }\n         for adjustment in result.expr_adjustments.values_mut().flatten() {\n-            adjustment.target = self.table.resolve_completely(adjustment.target.clone());\n+            adjustment.target = table.resolve_completely(adjustment.target.clone());\n         }\n         for adjustment in result.pat_adjustments.values_mut().flatten() {\n-            adjustment.target = self.table.resolve_completely(adjustment.target.clone());\n+            adjustment.target = table.resolve_completely(adjustment.target.clone());\n         }\n         result\n     }\n \n+    fn collect_const(&mut self, data: &ConstData) {\n+        self.return_ty = self.make_ty(&data.type_ref);\n+    }\n+\n+    fn collect_static(&mut self, data: &StaticData) {\n+        self.return_ty = self.make_ty(&data.type_ref);\n+    }\n+\n+    fn collect_fn(&mut self, data: &FunctionData) {\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n+            .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n+        let param_tys =\n+            data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n+        for (ty, pat) in param_tys.into_iter().zip(self.body.params.iter()) {\n+            let ty = self.insert_type_vars(ty);\n+            let ty = self.normalize_associated_types_in(ty);\n+\n+            self.infer_pat(*pat, &ty, BindingMode::default());\n+        }\n+        let error_ty = &TypeRef::Error;\n+        let return_ty = if data.has_async_kw() {\n+            data.async_ret_type.as_deref().unwrap_or(error_ty)\n+        } else {\n+            &*data.ret_type\n+        };\n+        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n+        self.return_ty = return_ty;\n+    }\n+\n+    fn infer_body(&mut self) {\n+        self.infer_expr_coerce(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n+    }\n+\n     fn write_expr_ty(&mut self, expr: ExprId, ty: Ty) {\n         self.result.type_of_expr.insert(expr, ty);\n     }\n@@ -491,6 +527,10 @@ impl<'a> InferenceContext<'a> {\n         self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Disallowed)\n     }\n \n+    fn err_ty(&self) -> Ty {\n+        self.result.standard_types.unknown.clone()\n+    }\n+\n     /// Replaces ConstScalar::Unknown by a new type var, so we can maybe still infer it.\n     fn insert_const_vars_shallow(&mut self, c: Const) -> Const {\n         let data = c.data(Interner);\n@@ -544,6 +584,16 @@ impl<'a> InferenceContext<'a> {\n         self.table.unify(ty1, ty2)\n     }\n \n+    /// Recurses through the given type, normalizing associated types mentioned\n+    /// in it by replacing them by type variables and registering obligations to\n+    /// resolve later. This should be done once for every type we get from some\n+    /// type annotation (e.g. from a let type annotation, field type or function\n+    /// call). `make_ty` handles this already, but e.g. for field types we need\n+    /// to do it as well.\n+    fn normalize_associated_types_in(&mut self, ty: Ty) -> Ty {\n+        self.table.normalize_associated_types_in(ty)\n+    }\n+\n     fn resolve_ty_shallow(&mut self, ty: &Ty) -> Ty {\n         self.resolve_obligations_as_possible();\n         self.table.resolve_ty_shallow(ty)\n@@ -586,16 +636,6 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    /// Recurses through the given type, normalizing associated types mentioned\n-    /// in it by replacing them by type variables and registering obligations to\n-    /// resolve later. This should be done once for every type we get from some\n-    /// type annotation (e.g. from a let type annotation, field type or function\n-    /// call). `make_ty` handles this already, but e.g. for field types we need\n-    /// to do it as well.\n-    fn normalize_associated_types_in(&mut self, ty: Ty) -> Ty {\n-        self.table.normalize_associated_types_in(ty)\n-    }\n-\n     fn resolve_variant(&mut self, path: Option<&Path>, value_ns: bool) -> (Ty, Option<VariantId>) {\n         let path = match path {\n             Some(path) => path,\n@@ -727,40 +767,6 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    fn collect_const(&mut self, data: &ConstData) {\n-        self.return_ty = self.make_ty(&data.type_ref);\n-    }\n-\n-    fn collect_static(&mut self, data: &StaticData) {\n-        self.return_ty = self.make_ty(&data.type_ref);\n-    }\n-\n-    fn collect_fn(&mut self, data: &FunctionData) {\n-        let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n-            .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n-        let param_tys =\n-            data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n-        for (ty, pat) in param_tys.into_iter().zip(body.params.iter()) {\n-            let ty = self.insert_type_vars(ty);\n-            let ty = self.normalize_associated_types_in(ty);\n-\n-            self.infer_pat(*pat, &ty, BindingMode::default());\n-        }\n-        let error_ty = &TypeRef::Error;\n-        let return_ty = if data.has_async_kw() {\n-            data.async_ret_type.as_deref().unwrap_or(error_ty)\n-        } else {\n-            &*data.ret_type\n-        };\n-        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n-        self.return_ty = return_ty;\n-    }\n-\n-    fn infer_body(&mut self) {\n-        self.infer_expr_coerce(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n-    }\n-\n     fn resolve_lang_item(&self, name: Name) -> Option<LangItemTarget> {\n         let krate = self.resolver.krate();\n         self.db.lang_item(krate, name.to_smol_str())"}, {"sha": "fef02e63b70bb4bf9716530f838b45204830b919", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c22537b3b7012f76952546ef90b18509a056690/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c22537b3b7012f76952546ef90b18509a056690/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=1c22537b3b7012f76952546ef90b18509a056690", "patch": "@@ -4,7 +4,6 @@ use std::{\n     collections::hash_map::Entry,\n     iter::{repeat, repeat_with},\n     mem,\n-    sync::Arc,\n };\n \n use chalk_ir::{\n@@ -80,8 +79,7 @@ impl<'a> InferenceContext<'a> {\n     fn infer_expr_inner(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {\n         self.db.unwind_if_cancelled();\n \n-        let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        let ty = match &body[tgt_expr] {\n+        let ty = match &self.body[tgt_expr] {\n             Expr::Missing => self.err_ty(),\n             &Expr::If { condition, then_branch, else_branch } => {\n                 self.infer_expr(\n@@ -560,17 +558,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 .intern(Interner)\n             }\n-            Expr::Box { expr } => {\n-                let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n-                if let Some(box_) = self.resolve_boxed_box() {\n-                    TyBuilder::adt(self.db, box_)\n-                        .push(inner_ty)\n-                        .fill_with_defaults(self.db, || self.table.new_type_var())\n-                        .build()\n-                } else {\n-                    self.err_ty()\n-                }\n-            }\n+            &Expr::Box { expr } => self.infer_expr_box(expr),\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 let inner_ty = self.resolve_ty_shallow(&inner_ty);\n@@ -798,6 +786,18 @@ impl<'a> InferenceContext<'a> {\n         ty\n     }\n \n+    fn infer_expr_box(&mut self, inner_expr: ExprId) -> chalk_ir::Ty<Interner> {\n+        let inner_ty = self.infer_expr_inner(inner_expr, &Expectation::none());\n+        if let Some(box_) = self.resolve_boxed_box() {\n+            TyBuilder::adt(self.db, box_)\n+                .push(inner_ty)\n+                .fill_with_defaults(self.db, || self.table.new_type_var())\n+                .build()\n+        } else {\n+            self.err_ty()\n+        }\n+    }\n+\n     fn infer_overloadable_binop(\n         &mut self,\n         lhs: ExprId,"}, {"sha": "600b82ca41406e3cfa055b2bcb662133d09d39d0", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c22537b3b7012f76952546ef90b18509a056690/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c22537b3b7012f76952546ef90b18509a056690/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=1c22537b3b7012f76952546ef90b18509a056690", "patch": "@@ -1,6 +1,6 @@\n //! Type inference for patterns.\n \n-use std::{iter::repeat, sync::Arc};\n+use std::iter::repeat;\n \n use chalk_ir::Mutability;\n use hir_def::{\n@@ -100,10 +100,9 @@ impl<'a> InferenceContext<'a> {\n         expected: &Ty,\n         mut default_bm: BindingMode,\n     ) -> Ty {\n-        let body = Arc::clone(&self.body); // avoid borrow checker problem\n         let mut expected = self.resolve_ty_shallow(expected);\n \n-        if is_non_ref_pat(&body, pat) {\n+        if is_non_ref_pat(&self.body, pat) {\n             let mut pat_adjustments = Vec::new();\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n                 pat_adjustments.push(Adjustment {\n@@ -122,7 +121,7 @@ impl<'a> InferenceContext<'a> {\n                 pat_adjustments.shrink_to_fit();\n                 self.result.pat_adjustments.insert(pat, pat_adjustments);\n             }\n-        } else if let Pat::Ref { .. } = &body[pat] {\n+        } else if let Pat::Ref { .. } = &self.body[pat] {\n             cov_mark::hit!(match_ergonomics_ref);\n             // When you encounter a `&pat` pattern, reset to Move.\n             // This is so that `w` is by value: `let (_, &w) = &(1, &2);`\n@@ -133,7 +132,7 @@ impl<'a> InferenceContext<'a> {\n         let default_bm = default_bm;\n         let expected = expected;\n \n-        let ty = match &body[pat] {\n+        let ty = match &self.body[pat] {\n             Pat::Tuple { args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n                     Some(parameters) => &*parameters.as_slice(Interner),"}]}