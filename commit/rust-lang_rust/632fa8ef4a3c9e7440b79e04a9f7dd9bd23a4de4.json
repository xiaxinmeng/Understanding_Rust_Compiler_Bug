{"sha": "632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMmZhOGVmNGEzYzllNzQ0MGI3OWUwNGE5ZjdkZDliZDIzYTRkZTQ=", "commit": {"author": {"name": "Kevin Mehall", "email": "km@kevinmehall.net", "date": "2021-03-06T16:36:22Z"}, "committer": {"name": "Kevin Mehall", "email": "km@kevinmehall.net", "date": "2021-03-06T16:48:08Z"}, "message": "Fix TokenStream::from_str for input consisting of a single Group\n\nTokenStream holds a `tt::Subtree` but assumes its `delimiter` is always\n`None`. In particular, the iterator implementation iterates over the\ninner `token_trees` and ignores the `delimiter`.\n\nHowever, `TokenStream::from_str` violated this assumption when the input\nconsists of a single Group by producing a Subtree with an outer\ndelimiter, which was ignored as seen by a procedural macro.\n\nIn this case, wrap an extra level of Subtree around it.\n\nFixes #7810\nFixes #7875", "tree": {"sha": "61dfaffb6b23173f53a7796dc6dfa80b50ef8726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61dfaffb6b23173f53a7796dc6dfa80b50ef8726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4", "html_url": "https://github.com/rust-lang/rust/commit/632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4/comments", "author": {"login": "kevinmehall", "id": 119951, "node_id": "MDQ6VXNlcjExOTk1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmehall", "html_url": "https://github.com/kevinmehall", "followers_url": "https://api.github.com/users/kevinmehall/followers", "following_url": "https://api.github.com/users/kevinmehall/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmehall/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmehall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmehall/subscriptions", "organizations_url": "https://api.github.com/users/kevinmehall/orgs", "repos_url": "https://api.github.com/users/kevinmehall/repos", "events_url": "https://api.github.com/users/kevinmehall/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmehall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevinmehall", "id": 119951, "node_id": "MDQ6VXNlcjExOTk1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmehall", "html_url": "https://github.com/kevinmehall", "followers_url": "https://api.github.com/users/kevinmehall/followers", "following_url": "https://api.github.com/users/kevinmehall/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmehall/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmehall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmehall/subscriptions", "organizations_url": "https://api.github.com/users/kevinmehall/orgs", "repos_url": "https://api.github.com/users/kevinmehall/repos", "events_url": "https://api.github.com/users/kevinmehall/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmehall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750d3cb84678b23a55092f2e4726e48ead37a9ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/750d3cb84678b23a55092f2e4726e48ead37a9ff", "html_url": "https://github.com/rust-lang/rust/commit/750d3cb84678b23a55092f2e4726e48ead37a9ff"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "f02b0af603d3d01571c5880e25a3f41a5e7f503b", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=632fa8ef4a3c9e7440b79e04a9f7dd9bd23a4de4", "patch": "@@ -34,7 +34,16 @@ impl TokenStream {\n     }\n \n     pub fn with_subtree(subtree: tt::Subtree) -> Self {\n-        TokenStream { subtree }\n+        if subtree.delimiter.is_some() {\n+            TokenStream {\n+                subtree: tt::Subtree {\n+                    token_trees: vec![TokenTree::Subtree(subtree)],\n+                    delimiter: None,\n+                },\n+            }\n+        } else {\n+            TokenStream { subtree }\n+        }\n     }\n \n     pub fn is_empty(&self) -> bool {\n@@ -185,7 +194,7 @@ pub mod token_stream {\n                 mbe::parse_to_token_tree(src).ok_or(\"Failed to parse from mbe\")?;\n \n             let subtree = subtree_replace_token_ids_with_unspecified(subtree);\n-            Ok(TokenStream { subtree })\n+            Ok(TokenStream::with_subtree(subtree))\n         }\n     }\n \n@@ -779,4 +788,27 @@ mod tests {\n \n         assert_eq!(s.to_string(), \"struct T {}\");\n     }\n+\n+    #[test]\n+    fn test_rustc_server_from_str() {\n+        use std::str::FromStr;\n+        let subtree_paren_a = tt::TokenTree::Subtree(tt::Subtree {\n+            delimiter: Some(tt::Delimiter {\n+                id: tt::TokenId::unspecified(),\n+                kind: tt::DelimiterKind::Parenthesis,\n+            }),\n+            token_trees: vec![tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n+                text: \"a\".into(),\n+                id: tt::TokenId::unspecified(),\n+            }))],\n+        });\n+\n+        let t1 = TokenStream::from_str(\"(a)\").unwrap();\n+        assert_eq!(t1.subtree.token_trees.len(), 1);\n+        assert_eq!(t1.subtree.token_trees[0], subtree_paren_a);\n+\n+        let t2 = TokenStream::from_str(\"(a);\").unwrap();\n+        assert_eq!(t2.subtree.token_trees.len(), 2);\n+        assert_eq!(t2.subtree.token_trees[0], subtree_paren_a);\n+    }\n }"}]}