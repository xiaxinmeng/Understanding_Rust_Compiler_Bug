{"sha": "80d1f14e7d54291773bf208e30c1ff4555f2178d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZDFmMTRlN2Q1NDI5MTc3M2JmMjA4ZTMwYzFmZjQ1NTVmMjE3OGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T00:45:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T15:55:37Z"}, "message": "Implement the basic rules of RFC 599, but do not yet support custom types.", "tree": {"sha": "617612255fb1cc0e4fc5ad8b17832c43647a7a4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/617612255fb1cc0e4fc5ad8b17832c43647a7a4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80d1f14e7d54291773bf208e30c1ff4555f2178d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80d1f14e7d54291773bf208e30c1ff4555f2178d", "html_url": "https://github.com/rust-lang/rust/commit/80d1f14e7d54291773bf208e30c1ff4555f2178d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80d1f14e7d54291773bf208e30c1ff4555f2178d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c6a23c9e4676964ea2dd0b2523cc2ae696da4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c6a23c9e4676964ea2dd0b2523cc2ae696da4b", "html_url": "https://github.com/rust-lang/rust/commit/f5c6a23c9e4676964ea2dd0b2523cc2ae696da4b"}], "stats": {"total": 283, "additions": 275, "deletions": 8}, "files": [{"sha": "754ca6439710ea4b84afb0ebf05e5a29267504ac", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -56,7 +56,7 @@ use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::traits;\n use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n-             ShiftedRscope, BindingRscope};\n+             ObjectLifetimeDefaultRscope, ShiftedRscope, BindingRscope};\n use TypeAndSubsts;\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n use util::nodemap::DefIdMap;\n@@ -1084,7 +1084,11 @@ pub fn ast_ty_to_ty<'tcx>(\n             ast::TyRptr(ref region, ref mt) => {\n                 let r = opt_ast_region_to_region(this, rscope, ast_ty.span, region);\n                 debug!(\"ty_rptr r={}\", r.repr(this.tcx()));\n-                let t = ast_ty_to_ty(this, rscope, &*mt.ty);\n+                let rscope1 =\n+                    &ObjectLifetimeDefaultRscope::new(\n+                        rscope,\n+                        Some(ty::ObjectLifetimeDefault::Specific(r)));\n+                let t = ast_ty_to_ty(this, rscope1, &*mt.ty);\n                 ty::mk_rptr(tcx, tcx.mk_region(r), ty::mt {ty: t, mutbl: mt.mutbl})\n             }\n             ast::TyTup(ref fields) => {"}, {"sha": "4c1fd7ea8544634129f9873ee8c24725df851169", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -1891,6 +1891,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n     fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n+        // TODO. RFC #599 specifies that object lifetime defaults take\n+        // precedence over other defaults. *However,* within a fn\n+        // body, we typically use inference to allow users to elide\n+        // lifetimes whenever they like, and then just infer it to\n+        // whatever it must be. So I interpret that as applying only\n+        // to fn sigs.\n         Some(self.infcx().next_region_var(infer::MiscVariable(span)))\n     }\n "}, {"sha": "b591209a6383a8685ff78d550650c43c1cf55001", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -45,7 +45,7 @@ pub struct ExplicitRscope;\n \n impl RegionScope for ExplicitRscope {\n     fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n-        None\n+        Some(ty::ReStatic)\n     }\n \n     fn anon_regions(&self,\n@@ -67,7 +67,7 @@ impl UnelidableRscope {\n \n impl RegionScope for UnelidableRscope {\n     fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n-        None\n+        Some(ty::ReStatic)\n     }\n \n     fn anon_regions(&self,\n@@ -95,7 +95,10 @@ impl ElidableRscope {\n \n impl RegionScope for ElidableRscope {\n     fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n-        Some(self.default)\n+        // Per RFC #599, object-lifetimes default to 'static unless\n+        // overridden by context, and this takes precedence over\n+        // lifetime elision.\n+        Some(ty::ReStatic)\n     }\n \n     fn anon_regions(&self,\n@@ -128,9 +131,11 @@ impl BindingRscope {\n }\n \n impl RegionScope for BindingRscope {\n-    fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region>\n-    {\n-        Some(self.next_region())\n+    fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n+        // Per RFC #599, object-lifetimes default to 'static unless\n+        // overridden by context, and this takes precedence over the\n+        // binding defaults.\n+        Some(ty::ReStatic)\n     }\n \n     fn anon_regions(&self,\n@@ -142,6 +147,42 @@ impl RegionScope for BindingRscope {\n     }\n }\n \n+/// A scope which overrides the default object lifetime but has no other effect.\n+pub struct ObjectLifetimeDefaultRscope<'r> {\n+    base_scope: &'r (RegionScope+'r),\n+    default: Option<ty::ObjectLifetimeDefault>,\n+}\n+\n+impl<'r> ObjectLifetimeDefaultRscope<'r> {\n+    pub fn new(base_scope: &'r (RegionScope+'r),\n+               default: Option<ty::ObjectLifetimeDefault>)\n+               -> ObjectLifetimeDefaultRscope<'r>\n+    {\n+        ObjectLifetimeDefaultRscope {\n+            base_scope: base_scope,\n+            default: default,\n+        }\n+    }\n+}\n+\n+impl<'r> RegionScope for ObjectLifetimeDefaultRscope<'r> {\n+    fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n+        match self.default {\n+            None => self.base_scope.object_lifetime_default(span),\n+            Some(ty::ObjectLifetimeDefault::Ambiguous) => None,\n+            Some(ty::ObjectLifetimeDefault::Specific(r)) => Some(r),\n+        }\n+    }\n+\n+    fn anon_regions(&self,\n+                    span: Span,\n+                    count: uint)\n+                    -> Result<Vec<ty::Region>, Option<Vec<(String, uint)>>>\n+    {\n+        self.base_scope.anon_regions(span, count)\n+    }\n+}\n+\n /// A scope which simply shifts the Debruijn index of other scopes\n /// to account for binding levels.\n pub struct ShiftedRscope<'r> {"}, {"sha": "c385a0195b6b20868b36a53180df2fdd9ca79c1b", "filename": "src/test/run-pass/object-lifetime-default-default-to-static.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `Box<Test>` is equivalent to `Box<Test+'static>`, both in\n+// fields and fn arguments.\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct SomeStruct {\n+    t: Box<Test>,\n+    u: Box<Test+'static>,\n+}\n+\n+fn a(t: Box<Test>, mut ss: SomeStruct) {\n+    ss.t = t;\n+}\n+\n+fn b(t: Box<Test+'static>, mut ss: SomeStruct) {\n+    ss.t = t;\n+}\n+\n+fn c(t: Box<Test>, mut ss: SomeStruct) {\n+    ss.u = t;\n+}\n+\n+fn d(t: Box<Test+'static>, mut ss: SomeStruct) {\n+    ss.u = t;\n+}\n+\n+fn main() {\n+}"}, {"sha": "825800e1d4447e1fd9daf28db8ad0c47610612e0", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-box.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime from the enclosing `&` is \"inherited\"\n+// through the `Box` struct.\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    t: &'a Box<Test>,\n+    u: &'a Box<Test+'a>,\n+}\n+\n+fn a<'a>(t: &'a Box<Test>, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn b<'a>(t: &'a Box<Test>, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn c<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn d<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn main() {\n+}"}, {"sha": "0f34d945c8fb9976e7dc7884a48ed166b43a1815", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-mut.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime of the enclosing `&` is used for the object\n+// lifetime bound.\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    t: &'a mut Test,\n+    u: &'a mut (Test+'a),\n+}\n+\n+fn a<'a>(t: &'a mut Test, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn b<'a>(t: &'a mut Test, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn c<'a>(t: &'a mut (Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn d<'a>(t: &'a mut (Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+\n+fn main() {\n+}"}, {"sha": "9d5dac536f10ade4c0e41136cfc8d56876e737a5", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-struct.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-struct.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime from the enclosing `&` is \"inherited\"\n+// through the `MyBox` struct.\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    t: &'a MyBox<Test>,\n+    u: &'a MyBox<Test+'a>,\n+}\n+\n+struct MyBox<T:?Sized> {\n+    b: Box<T>\n+}\n+\n+fn a<'a>(t: &'a MyBox<Test>, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn b<'a>(t: &'a MyBox<Test>, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn c<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn d<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn main() {\n+}"}, {"sha": "b7a28a5c524156764809cf9a2443635e46d4e837", "filename": "src/test/run-pass/object-lifetime-default-from-rptr.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d1f14e7d54291773bf208e30c1ff4555f2178d/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs?ref=80d1f14e7d54291773bf208e30c1ff4555f2178d", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime of the enclosing `&` is used for the object\n+// lifetime bound.\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    t: &'a Test,\n+    u: &'a (Test+'a),\n+}\n+\n+fn a<'a>(t: &'a Test, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn b<'a>(t: &'a Test, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn c<'a>(t: &'a (Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn d<'a>(t: &'a (Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+\n+fn main() {\n+}"}]}