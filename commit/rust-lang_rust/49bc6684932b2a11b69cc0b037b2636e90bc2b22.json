{"sha": "49bc6684932b2a11b69cc0b037b2636e90bc2b22", "node_id": "C_kwDOAAsO6NoAKDQ5YmM2Njg0OTMyYjJhMTFiNjljYzBiMDM3YjI2MzZlOTBiYzJiMjI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-09-28T04:07:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-28T04:07:16Z"}, "message": "Rollup merge of #100747 - MatthewPeterKelly:mpk/add-long-error-message-for-E0311, r=MatthewPeterKelly\n\nAdd long description and test for E0311\n\nAdds a long description and unit test for the E0311 compiler error.\n\nFixes one line-item in https://github.com/rust-lang/rust/issues/61137.", "tree": {"sha": "7266ac43c2513666ec314ccaaf42057734624dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7266ac43c2513666ec314ccaaf42057734624dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49bc6684932b2a11b69cc0b037b2636e90bc2b22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjM8h0CRBK7hj4Ov3rIwAAA1EIABnUaSAYO5yGxbtslKlyVkwO\n4ItIb1lOf4p81OtSgNl6bF4QI6FvSnRkPisij3dgemj1sFPJGglm8moDfb8T2pTj\nLwB69F7LfWZ54t8r+XceRate8CMSKal6mgPDxqkZ69DW04Ilzx6Z+I+sGK2nXkdY\nP9evACAZDFAYTIhHryZ9KmU0P6Irow3SFq4zOa8mu78izpIShvuyNcNrKoLVJVT5\nkrcoaeNyaVsLD2UvMgA+j+eNcUv5CpERi27pws6P0OG9sRZACp1Z4lyslo0BOQ1m\nq+Lt5oBT53LDiCgft2FFsIOE+6AZP31GunRxoiX74aImX+xBvim2VR27jFw6Y7U=\n=4mkR\n-----END PGP SIGNATURE-----\n", "payload": "tree 7266ac43c2513666ec314ccaaf42057734624dbb\nparent 90c34fafcfa1d00ae25a165dc006e688761a5776\nparent c0d32fd2cc4eafe4f621490e7c44b7af04d1f2be\nauthor Yuki Okushi <jtitor@2k36.org> 1664338036 +0900\ncommitter GitHub <noreply@github.com> 1664338036 +0900\n\nRollup merge of #100747 - MatthewPeterKelly:mpk/add-long-error-message-for-E0311, r=MatthewPeterKelly\n\nAdd long description and test for E0311\n\nAdds a long description and unit test for the E0311 compiler error.\n\nFixes one line-item in https://github.com/rust-lang/rust/issues/61137.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49bc6684932b2a11b69cc0b037b2636e90bc2b22", "html_url": "https://github.com/rust-lang/rust/commit/49bc6684932b2a11b69cc0b037b2636e90bc2b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49bc6684932b2a11b69cc0b037b2636e90bc2b22/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c34fafcfa1d00ae25a165dc006e688761a5776", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c34fafcfa1d00ae25a165dc006e688761a5776", "html_url": "https://github.com/rust-lang/rust/commit/90c34fafcfa1d00ae25a165dc006e688761a5776"}, {"sha": "c0d32fd2cc4eafe4f621490e7c44b7af04d1f2be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d32fd2cc4eafe4f621490e7c44b7af04d1f2be", "html_url": "https://github.com/rust-lang/rust/commit/c0d32fd2cc4eafe4f621490e7c44b7af04d1f2be"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "1e86d159668ffe5d6b1bca194df8bb1a359c6d18", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49bc6684932b2a11b69cc0b037b2636e90bc2b22/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49bc6684932b2a11b69cc0b037b2636e90bc2b22/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=49bc6684932b2a11b69cc0b037b2636e90bc2b22", "patch": "@@ -159,6 +159,7 @@ E0307: include_str!(\"./error_codes/E0307.md\"),\n E0308: include_str!(\"./error_codes/E0308.md\"),\n E0309: include_str!(\"./error_codes/E0309.md\"),\n E0310: include_str!(\"./error_codes/E0310.md\"),\n+E0311: include_str!(\"./error_codes/E0311.md\"),\n E0312: include_str!(\"./error_codes/E0312.md\"),\n E0316: include_str!(\"./error_codes/E0316.md\"),\n E0317: include_str!(\"./error_codes/E0317.md\"),\n@@ -568,7 +569,6 @@ E0790: include_str!(\"./error_codes/E0790.md\"),\n //  E0300, // unexpanded macro\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n-    E0311, // thing may not live long enough\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured\n            // variable\n //  E0314, // closure outlives stack frame"}, {"sha": "08159d3f469ac8bad44d7385ffa0ab41b3e710ad", "filename": "compiler/rustc_error_codes/src/error_codes/E0311.md", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/49bc6684932b2a11b69cc0b037b2636e90bc2b22/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "raw_url": "https://github.com/rust-lang/rust/raw/49bc6684932b2a11b69cc0b037b2636e90bc2b22/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md?ref=49bc6684932b2a11b69cc0b037b2636e90bc2b22", "patch": "@@ -0,0 +1,42 @@\n+This error occurs when there is an unsatisfied outlives bound involving an\n+elided region and a generic type parameter or associated type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0311\n+fn no_restriction<T>(x: &()) -> &() {\n+    with_restriction::<T>(x)\n+}\n+\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n+}\n+```\n+\n+Why doesn't this code compile? It helps to look at the lifetime bounds that are\n+automatically added by the compiler. For more details see the documentation for\n+[lifetime elision]( https://doc.rust-lang.org/reference/lifetime-elision.html).\n+\n+The compiler elides the lifetime of `x` and the return type to some arbitrary\n+lifetime `'anon` in `no_restriction()`. The only information available to the\n+compiler is that `'anon` is valid for the duration of the function. When\n+calling `with_restriction()`, the compiler requires the completely unrelated\n+type parameter `T` to outlive `'anon` because of the `T: 'a` bound in\n+`with_restriction()`. This causes an error because `T` is not required to\n+outlive `'anon` in `no_restriction()`.\n+\n+If `no_restriction()` were to use `&T` instead of `&()` as an argument, the\n+compiler would have added an implied bound, causing this to compile.\n+\n+This error can be resolved by explicitly naming the elided lifetime for `x` and\n+then explicily requiring that the generic parameter `T` outlives that lifetime:\n+\n+```\n+fn no_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    with_restriction::<T>(x)\n+}\n+\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n+}\n+```"}, {"sha": "566b518b4331dec8dec96379f1a10649698193eb", "filename": "src/test/ui/error-codes/E0311.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs?ref=49bc6684932b2a11b69cc0b037b2636e90bc2b22", "patch": "@@ -0,0 +1,9 @@\n+fn no_restriction<T>(x: &()) -> &() {\n+    with_restriction::<T>(x) //~ ERROR E0311\n+}\n+\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "9873b5ae6ff1330a100c37313270ec46b0b41b12", "filename": "src/test/ui/error-codes/E0311.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr?ref=49bc6684932b2a11b69cc0b037b2636e90bc2b22", "patch": "@@ -0,0 +1,24 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/E0311.rs:2:5\n+   |\n+LL |     with_restriction::<T>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/E0311.rs:1:25\n+   |\n+LL | fn no_restriction<T>(x: &()) -> &() {\n+   |                         ^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/E0311.rs:2:5\n+   |\n+LL |     with_restriction::<T>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn no_restriction<'a, T: 'a>(x: &()) -> &() {\n+   |                   +++  ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "31fd8a4d633e9135d8d6c2cce59bc49ff755593c", "filename": "src/test/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr?ref=49bc6684932b2a11b69cc0b037b2636e90bc2b22", "patch": "@@ -21,3 +21,4 @@ LL | fn no_restriction<'a, T: 'a>(x: &()) -> &() {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "872263fd7311b5ce87cc693f01b7d684cafc4018", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=49bc6684932b2a11b69cc0b037b2636e90bc2b22", "patch": "@@ -27,3 +27,4 @@ LL | fn func<'a, T: Test + 'a>(foo: &Foo, t: T) {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "171f4b333db4e231452fcf7054d297a37ceb92e7", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49bc6684932b2a11b69cc0b037b2636e90bc2b22/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=49bc6684932b2a11b69cc0b037b2636e90bc2b22", "patch": "@@ -164,5 +164,5 @@ LL |     G: Get<T> + 'a,\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0261, E0309, E0621, E0700.\n+Some errors have detailed explanations: E0261, E0309, E0311, E0621, E0700.\n For more information about an error, try `rustc --explain E0261`."}]}