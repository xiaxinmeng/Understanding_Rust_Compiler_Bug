{"sha": "ffe87f63eada242a94a762c4304b9fe059310289", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZTg3ZjYzZWFkYTI0MmE5NGE3NjJjNDMwNGI5ZmUwNTkzMTAyODk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-25T15:32:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "rustfmt `error_reporting/mod.rs` and `dropck.rs`\n\nPacify the mercilous tidy.", "tree": {"sha": "b0b90ec60f53e5582e819c8034350a61c6b4bbad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b90ec60f53e5582e819c8034350a61c6b4bbad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe87f63eada242a94a762c4304b9fe059310289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe87f63eada242a94a762c4304b9fe059310289", "html_url": "https://github.com/rust-lang/rust/commit/ffe87f63eada242a94a762c4304b9fe059310289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe87f63eada242a94a762c4304b9fe059310289/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f87189dd3c08c7b8b930cfbe25266318adba293c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87189dd3c08c7b8b930cfbe25266318adba293c", "html_url": "https://github.com/rust-lang/rust/commit/f87189dd3c08c7b8b930cfbe25266318adba293c"}], "stats": {"total": 245, "additions": 138, "deletions": 107}, "files": [{"sha": "e3bbdab4fd9659db1a3b0f64fc82f2e397045684", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 69, "deletions": 63, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ffe87f63eada242a94a762c4304b9fe059310289/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe87f63eada242a94a762c4304b9fe059310289/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ffe87f63eada242a94a762c4304b9fe059310289", "patch": "@@ -55,22 +55,22 @@\n //! ported to this system, and which relies on string concatenation at the\n //! time of error detection.\n \n-use infer::{self, SuppressRegionErrors};\n-use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n-use super::region_constraints::GenericKind;\n use super::lexical_region_resolve::RegionResolutionError;\n+use super::region_constraints::GenericKind;\n+use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n+use infer::{self, SuppressRegionErrors};\n \n-use std::{cmp, fmt};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use hir;\n-use hir::Node;\n use hir::def_id::DefId;\n+use hir::Node;\n use middle::region;\n-use traits::{ObligationCause, ObligationCauseCode};\n-use ty::{self, subst::Subst, Region, Ty, TyCtxt, TypeFoldable, TyKind};\n-use ty::error::TypeError;\n+use std::{cmp, fmt};\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use traits::{ObligationCause, ObligationCauseCode};\n+use ty::error::TypeError;\n+use ty::{self, subst::Subst, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n \n mod note;\n \n@@ -152,8 +152,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             // We shouldn't encounter an error message with ReClosureBound.\n-            ty::ReCanonical(..) |\n-            ty::ReClosureBound(..) => {\n+            ty::ReCanonical(..) | ty::ReClosureBound(..) => {\n                 bug!(\"encountered unexpected ReClosureBound: {:?}\", region,);\n             }\n         };\n@@ -175,9 +174,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     fn msg_span_from_free_region(self, region: ty::Region<'tcx>) -> (String, Option<Span>) {\n         match *region {\n-            ty::ReEarlyBound(_) | ty::ReFree(_)  => {\n+            ty::ReEarlyBound(_) | ty::ReFree(_) => {\n                 self.msg_span_from_early_bound_and_free_regions(region)\n-            },\n+            }\n             ty::ReStatic => (\"the static lifetime\".to_owned(), None),\n             _ => bug!(\"{:?}\", region),\n         }\n@@ -196,25 +195,28 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             Some(Node::Item(it)) => Self::item_scope_tag(&it),\n             Some(Node::TraitItem(it)) => Self::trait_item_scope_tag(&it),\n             Some(Node::ImplItem(it)) => Self::impl_item_scope_tag(&it),\n-            _ => unreachable!()\n+            _ => unreachable!(),\n         };\n         let (prefix, span) = match *region {\n             ty::ReEarlyBound(ref br) => {\n                 let mut sp = cm.def_span(self.hir.span(node));\n-                if let Some(param) = self.hir.get_generics(scope).and_then(|generics| {\n-                    generics.get_named(&br.name)\n-                }) {\n+                if let Some(param) = self.hir\n+                    .get_generics(scope)\n+                    .and_then(|generics| generics.get_named(&br.name))\n+                {\n                     sp = param.span;\n                 }\n                 (format!(\"the lifetime {} as defined on\", br.name), sp)\n             }\n             ty::ReFree(ty::FreeRegion {\n-                bound_region: ty::BoundRegion::BrNamed(_, ref name), ..\n+                bound_region: ty::BoundRegion::BrNamed(_, ref name),\n+                ..\n             }) => {\n                 let mut sp = cm.def_span(self.hir.span(node));\n-                if let Some(param) = self.hir.get_generics(scope).and_then(|generics| {\n-                    generics.get_named(&name)\n-                }) {\n+                if let Some(param) = self.hir\n+                    .get_generics(scope)\n+                    .and_then(|generics| generics.get_named(&name))\n+                {\n                     sp = param.span;\n                 }\n                 (format!(\"the lifetime {} as defined on\", name), sp)\n@@ -277,9 +279,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str {\n         match item.node {\n             hir::ImplItemKind::Method(..) => \"method body\",\n-            hir::ImplItemKind::Const(..) |\n-            hir::ImplItemKind::Existential(..) |\n-            hir::ImplItemKind::Type(..) => \"associated item\",\n+            hir::ImplItemKind::Const(..)\n+            | hir::ImplItemKind::Existential(..)\n+            | hir::ImplItemKind::Type(..) => \"associated item\",\n         }\n     }\n \n@@ -299,7 +301,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         errors: &Vec<RegionResolutionError<'tcx>>,\n         suppress: SuppressRegionErrors,\n     ) {\n-        debug!(\"report_region_errors(): {} errors to start, suppress = {:?}\", errors.len(), suppress);\n+        debug!(\n+            \"report_region_errors(): {} errors to start, suppress = {:?}\",\n+            errors.len(),\n+            suppress\n+        );\n \n         if suppress.suppressed() {\n             return;\n@@ -473,17 +479,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     } else {\n                         err.span_label(arm_span, msg);\n                     }\n-                },\n-                hir::MatchSource::TryDesugar => { // Issue #51632\n+                }\n+                hir::MatchSource::TryDesugar => {\n+                    // Issue #51632\n                     if let Ok(try_snippet) = self.tcx.sess.source_map().span_to_snippet(arm_span) {\n                         err.span_suggestion_with_applicability(\n                             arm_span,\n                             \"try wrapping with a success variant\",\n                             format!(\"Ok({})\", try_snippet),\n-                            Applicability::MachineApplicable\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n-                },\n+                }\n                 _ => {\n                     let msg = \"match arm with an incompatible type\";\n                     if self.tcx.sess.source_map().is_multiline(arm_span) {\n@@ -632,16 +639,21 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn strip_generic_default_params(\n         &self,\n         def_id: DefId,\n-        substs: &ty::subst::Substs<'tcx>\n+        substs: &ty::subst::Substs<'tcx>,\n     ) -> &'tcx ty::subst::Substs<'tcx> {\n         let generics = self.tcx.generics_of(def_id);\n         let mut num_supplied_defaults = 0;\n-        let mut type_params = generics.params.iter().rev().filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Lifetime => None,\n-            ty::GenericParamDefKind::Type { has_default, .. } => {\n-                Some((param.def_id, has_default))\n-            }\n-        }).peekable();\n+        let mut type_params = generics\n+            .params\n+            .iter()\n+            .rev()\n+            .filter_map(|param| match param.kind {\n+                ty::GenericParamDefKind::Lifetime => None,\n+                ty::GenericParamDefKind::Type { has_default, .. } => {\n+                    Some((param.def_id, has_default))\n+                }\n+            })\n+            .peekable();\n         let has_default = {\n             let has_default = type_params.peek().map(|(_, has_default)| has_default);\n             *has_default.unwrap_or(&false)\n@@ -675,10 +687,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 | (&ty::Infer(ty::InferTy::IntVar(_)), &ty::Infer(ty::InferTy::IntVar(_)))\n                 | (&ty::Float(_), &ty::Infer(ty::InferTy::FloatVar(_)))\n                 | (&ty::Infer(ty::InferTy::FloatVar(_)), &ty::Float(_))\n-                | (\n-                    &ty::Infer(ty::InferTy::FloatVar(_)),\n-                    &ty::Infer(ty::InferTy::FloatVar(_)),\n-                ) => true,\n+                | (&ty::Infer(ty::InferTy::FloatVar(_)), &ty::Infer(ty::InferTy::FloatVar(_))) => {\n+                    true\n+                }\n                 _ => false,\n             }\n         }\n@@ -694,11 +705,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 \"&{}{}{}\",\n                 r,\n                 if r == \"\" { \"\" } else { \" \" },\n-                if mutbl == hir::MutMutable {\n-                    \"mut \"\n-                } else {\n-                    \"\"\n-                }\n+                if mutbl == hir::MutMutable { \"mut \" } else { \"\" }\n             ));\n             s.push_normal(ty.to_string());\n         }\n@@ -729,9 +736,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let common_len = cmp::min(len1, len2);\n                     let remainder1: Vec<_> = sub1.types().skip(common_len).collect();\n                     let remainder2: Vec<_> = sub2.types().skip(common_len).collect();\n-                    let common_default_params =\n-                        remainder1.iter().rev().zip(remainder2.iter().rev())\n-                                               .filter(|(a, b)| a == b).count();\n+                    let common_default_params = remainder1\n+                        .iter()\n+                        .rev()\n+                        .zip(remainder2.iter().rev())\n+                        .filter(|(a, b)| a == b)\n+                        .count();\n                     let len = sub1.len() - common_default_params;\n \n                     // Only draw `<...>` if there're lifetime/type arguments.\n@@ -857,8 +867,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             // When encountering &T != &mut T, highlight only the borrow\n-            (&ty::Ref(r1, ref_ty1, mutbl1),\n-             &ty::Ref(r2, ref_ty2, mutbl2)) if equals(&ref_ty1, &ref_ty2) => {\n+            (&ty::Ref(r1, ref_ty1, mutbl1), &ty::Ref(r2, ref_ty2, mutbl2))\n+                if equals(&ref_ty1, &ref_ty2) =>\n+            {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n                 push_ty_ref(&r1, ref_ty1, mutbl1, &mut values.0);\n                 push_ty_ref(&r2, ref_ty2, mutbl2, &mut values.1);\n@@ -1059,11 +1070,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) {\n-        self.construct_generic_bound_failure(region_scope_tree,\n-                                             span,\n-                                             origin,\n-                                             bound_kind,\n-                                             sub)\n+        self.construct_generic_bound_failure(region_scope_tree, span, origin, bound_kind, sub)\n             .emit()\n     }\n \n@@ -1074,8 +1081,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n-    ) -> DiagnosticBuilder<'a>\n-    {\n+    ) -> DiagnosticBuilder<'a> {\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n         let type_param_span = match (self.in_progress_tables, bound_kind) {\n@@ -1152,8 +1158,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let tail = if has_lifetimes { \" + \" } else { \"\" };\n                 let suggestion = format!(\"{}: {}{}\", bound_kind, sub, tail);\n                 err.span_suggestion_short_with_applicability(\n-                    sp, consider, suggestion,\n-                    Applicability::MaybeIncorrect // Issue #41966\n+                    sp,\n+                    consider,\n+                    suggestion,\n+                    Applicability::MaybeIncorrect, // Issue #41966\n                 );\n             } else {\n                 err.help(consider);\n@@ -1349,12 +1357,10 @@ impl<'tcx> ObligationCause<'tcx> {\n         match self.code {\n             CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n             MatchExpressionArm { source, .. } => Error0308(match source {\n-                hir::MatchSource::IfLetDesugar { .. } => {\n-                    \"`if let` arms have incompatible types\"\n-                },\n+                hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have incompatible types\",\n                 hir::MatchSource::TryDesugar => {\n                     \"try expression alternatives have incompatible types\"\n-                },\n+                }\n                 _ => \"match arms have incompatible types\",\n             }),\n             IfExpression => Error0308(\"if and else have incompatible types\"),"}, {"sha": "c1afc12736791e396d9f545f66a65f6ced52da48", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 69, "deletions": 44, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/ffe87f63eada242a94a762c4304b9fe059310289/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe87f63eada242a94a762c4304b9fe059310289/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=ffe87f63eada242a94a762c4304b9fe059310289", "patch": "@@ -11,12 +11,12 @@\n use check::regionck::RegionCtxt;\n \n use hir::def_id::DefId;\n-use rustc::infer::{self, InferOk, SuppressRegionErrors};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n+use rustc::infer::{self, InferOk, SuppressRegionErrors};\n use rustc::middle::region;\n+use rustc::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n use util::common::ErrorReported;\n \n use syntax::ast;\n@@ -39,32 +39,41 @@ use syntax_pos::Span;\n ///    struct/enum definition for the nominal type itself (i.e.\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n-pub fn check_drop_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 drop_impl_did: DefId)\n-                                 -> Result<(), ErrorReported> {\n+pub fn check_drop_impl<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    drop_impl_did: DefId,\n+) -> Result<(), ErrorReported> {\n     let dtor_self_type = tcx.type_of(drop_impl_did);\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.sty {\n         ty::Adt(adt_def, self_to_impl_substs) => {\n-            ensure_drop_params_and_item_params_correspond(tcx,\n-                                                          drop_impl_did,\n-                                                          dtor_self_type,\n-                                                          adt_def.did)?;\n+            ensure_drop_params_and_item_params_correspond(\n+                tcx,\n+                drop_impl_did,\n+                dtor_self_type,\n+                adt_def.did,\n+            )?;\n \n-            ensure_drop_predicates_are_implied_by_item_defn(tcx,\n-                                                            drop_impl_did,\n-                                                            &dtor_predicates,\n-                                                            adt_def.did,\n-                                                            self_to_impl_substs)\n+            ensure_drop_predicates_are_implied_by_item_defn(\n+                tcx,\n+                drop_impl_did,\n+                &dtor_predicates,\n+                adt_def.did,\n+                self_to_impl_substs,\n+            )\n         }\n         _ => {\n             // Destructors only work on nominal types.  This was\n             // already checked by coherence, but compilation may\n             // not have been terminated.\n             let span = tcx.def_span(drop_impl_did);\n-            tcx.sess.delay_span_bug(span,\n-                            &format!(\"should have been rejected by coherence check: {}\",\n-                            dtor_self_type));\n+            tcx.sess.delay_span_bug(\n+                span,\n+                &format!(\n+                    \"should have been rejected by coherence check: {}\",\n+                    dtor_self_type\n+                ),\n+            );\n             Err(ErrorReported)\n         }\n     }\n@@ -74,9 +83,8 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     drop_impl_did: DefId,\n     drop_impl_ty: Ty<'tcx>,\n-    self_type_did: DefId)\n-    -> Result<(), ErrorReported>\n-{\n+    self_type_did: DefId,\n+) -> Result<(), ErrorReported> {\n     let drop_impl_node_id = tcx.hir.as_local_node_id(drop_impl_did).unwrap();\n \n     // check that the impl type can be made to match the trait type.\n@@ -89,22 +97,29 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         let named_type = tcx.type_of(self_type_did);\n \n         let drop_impl_span = tcx.def_span(drop_impl_did);\n-        let fresh_impl_substs =\n-            infcx.fresh_substs_for_item(drop_impl_span, drop_impl_did);\n+        let fresh_impl_substs = infcx.fresh_substs_for_item(drop_impl_span, drop_impl_did);\n         let fresh_impl_self_ty = drop_impl_ty.subst(tcx, fresh_impl_substs);\n \n         let cause = &ObligationCause::misc(drop_impl_span, drop_impl_node_id);\n-        match infcx.at(cause, impl_param_env).eq(named_type, fresh_impl_self_ty) {\n+        match infcx\n+            .at(cause, impl_param_env)\n+            .eq(named_type, fresh_impl_self_ty)\n+        {\n             Ok(InferOk { obligations, .. }) => {\n                 fulfillment_cx.register_predicate_obligations(infcx, obligations);\n             }\n             Err(_) => {\n                 let item_span = tcx.def_span(self_type_did);\n-                struct_span_err!(tcx.sess, drop_impl_span, E0366,\n-                                 \"Implementations of Drop cannot be specialized\")\n-                    .span_note(item_span,\n-                               \"Use same sequence of generic type and region \\\n-                                parameters that is on the struct/enum definition\")\n+                struct_span_err!(\n+                    tcx.sess,\n+                    drop_impl_span,\n+                    E0366,\n+                    \"Implementations of Drop cannot be specialized\"\n+                ).span_note(\n+                    item_span,\n+                    \"Use same sequence of generic type and region \\\n+                     parameters that is on the struct/enum definition\",\n+                )\n                     .emit();\n                 return Err(ErrorReported);\n             }\n@@ -128,7 +143,12 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         // conservative. -nmatsakis\n         let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n \n-        infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &outlives_env, SuppressRegionErrors::default());\n+        infcx.resolve_regions_and_report_errors(\n+            drop_impl_did,\n+            &region_scope_tree,\n+            &outlives_env,\n+            SuppressRegionErrors::default(),\n+        );\n         Ok(())\n     })\n }\n@@ -140,9 +160,8 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n     drop_impl_did: DefId,\n     dtor_predicates: &ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n-    self_to_impl_substs: &Substs<'tcx>)\n-    -> Result<(), ErrorReported>\n-{\n+    self_to_impl_substs: &Substs<'tcx>,\n+) -> Result<(), ErrorReported> {\n     let mut result = Ok(());\n \n     // Here is an example, analogous to that from\n@@ -213,11 +232,17 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n \n         if !assumptions_in_impl_context.contains(&predicate) {\n             let item_span = tcx.hir.span(self_type_node_id);\n-            struct_span_err!(tcx.sess, drop_impl_span, E0367,\n-                             \"The requirement `{}` is added only by the Drop impl.\", predicate)\n-                .span_note(item_span,\n-                           \"The same requirement must be part of \\\n-                            the struct/enum definition\")\n+            struct_span_err!(\n+                tcx.sess,\n+                drop_impl_span,\n+                E0367,\n+                \"The requirement `{}` is added only by the Drop impl.\",\n+                predicate\n+            ).span_note(\n+                item_span,\n+                \"The same requirement must be part of \\\n+                 the struct/enum definition\",\n+            )\n                 .emit();\n             result = Err(ErrorReported);\n         }\n@@ -283,18 +308,18 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n     ty: Ty<'tcx>,\n     span: Span,\n     body_id: ast::NodeId,\n-    scope: region::Scope)\n-    -> Result<(), ErrorReported>\n-{\n-    debug!(\"check_safety_of_destructor_if_necessary typ: {:?} scope: {:?}\",\n-           ty, scope);\n-\n+    scope: region::Scope,\n+) -> Result<(), ErrorReported> {\n+    debug!(\n+        \"check_safety_of_destructor_if_necessary typ: {:?} scope: {:?}\",\n+        ty, scope\n+    );\n \n     let parent_scope = match rcx.region_scope_tree.opt_encl_scope(scope) {\n         Some(parent_scope) => parent_scope,\n         // If no enclosing scope, then it must be the root scope\n         // which cannot be outlived.\n-        None => return Ok(())\n+        None => return Ok(()),\n     };\n     let parent_scope = rcx.tcx.mk_region(ty::ReScope(parent_scope));\n     let origin = || infer::SubregionOrigin::SafeDestructor(span);"}]}