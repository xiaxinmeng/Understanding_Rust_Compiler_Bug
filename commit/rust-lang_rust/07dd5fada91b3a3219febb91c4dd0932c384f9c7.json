{"sha": "07dd5fada91b3a3219febb91c4dd0932c384f9c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZGQ1ZmFkYTkxYjNhMzIxOWZlYmI5MWM0ZGQwOTMyYzM4NGY5Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T21:41:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T21:41:56Z"}, "message": "Auto merge of #5511 - alex-700:fix-redundant-pattern-matching, r=flip1995\n\nFix redundant_pattern_matching lint\n\nfixes #5504\n\nchangelog: Fix suggestion in `redundant_pattern_matching` for macros.", "tree": {"sha": "530ba8660827f514f698a67617c8eeb6f16ac94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/530ba8660827f514f698a67617c8eeb6f16ac94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07dd5fada91b3a3219febb91c4dd0932c384f9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07dd5fada91b3a3219febb91c4dd0932c384f9c7", "html_url": "https://github.com/rust-lang/rust/commit/07dd5fada91b3a3219febb91c4dd0932c384f9c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07dd5fada91b3a3219febb91c4dd0932c384f9c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44eb953adc210a20d0e2770ac310ebed66097846", "url": "https://api.github.com/repos/rust-lang/rust/commits/44eb953adc210a20d0e2770ac310ebed66097846", "html_url": "https://github.com/rust-lang/rust/commit/44eb953adc210a20d0e2770ac310ebed66097846"}, {"sha": "69fe6b4c9824c1469b5540302d95d980ff54659e", "url": "https://api.github.com/repos/rust-lang/rust/commits/69fe6b4c9824c1469b5540302d95d980ff54659e", "html_url": "https://github.com/rust-lang/rust/commit/69fe6b4c9824c1469b5540302d95d980ff54659e"}], "stats": {"total": 187, "additions": 141, "deletions": 46}, "files": [{"sha": "7ee298e9833f2ffd17b9ca83ab3fbcc2db051d3d", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07dd5fada91b3a3219febb91c4dd0932c384f9c7/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07dd5fada91b3a3219febb91c4dd0932c384f9c7/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=07dd5fada91b3a3219febb91c4dd0932c384f9c7", "patch": "@@ -103,14 +103,21 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n         arms[0].pat.span,\n         &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n         |diag| {\n-            // in the case of WhileLetDesugar expr.span == op.span incorrectly.\n-            // this is a workaround to restore true value of expr.span\n-            let expr_span = expr.span.to(arms[1].span);\n-            let span = expr_span.until(op.span.shrink_to_hi());\n+            // while let ... = ... { ... }\n+            // ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+            let expr_span = expr.span;\n+\n+            // while let ... = ... { ... }\n+            //                 ^^^\n+            let op_span = op.span.source_callsite();\n+\n+            // while let ... = ... { ... }\n+            // ^^^^^^^^^^^^^^^^^^^\n+            let span = expr_span.until(op_span.shrink_to_hi());\n             diag.span_suggestion(\n                 span,\n                 \"try this\",\n-                format!(\"{} {}.{}\", keyword, snippet(cx, op.span, \"_\"), good_method),\n+                format!(\"{} {}.{}\", keyword, snippet(cx, op_span, \"_\"), good_method),\n                 Applicability::MachineApplicable, // snippet\n             );\n         },"}, {"sha": "fc8cb0e747c73e157e3c17306a2491352c208bf3", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/07dd5fada91b3a3219febb91c4dd0932c384f9c7/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07dd5fada91b3a3219febb91c4dd0932c384f9c7/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=07dd5fada91b3a3219febb91c4dd0932c384f9c7", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool)]\n+#![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n \n fn main() {\n     if Ok::<i32, i32>(42).is_ok() {}\n@@ -62,12 +62,31 @@ fn main() {\n \n     let _ = if Ok::<usize, ()>(4).is_ok() { true } else { false };\n \n-    let _ = does_something();\n-    let _ = returns_unit();\n-\n     let opt = Some(false);\n     let x = if opt.is_some() { true } else { false };\n     takes_bool(x);\n+\n+    issue5504();\n+\n+    let _ = if gen_opt().is_some() {\n+        1\n+    } else if gen_opt().is_none() {\n+        2\n+    } else if gen_res().is_ok() {\n+        3\n+    } else if gen_res().is_err() {\n+        4\n+    } else {\n+        5\n+    };\n+}\n+\n+fn gen_opt() -> Option<()> {\n+    None\n+}\n+\n+fn gen_res() -> Result<(), ()> {\n+    Ok(())\n }\n \n fn takes_bool(_: bool) {}\n@@ -76,18 +95,25 @@ fn foo() {}\n \n fn bar() {}\n \n-fn does_something() -> bool {\n-    if Ok::<i32, i32>(4).is_ok() {\n-        true\n-    } else {\n-        false\n-    }\n+macro_rules! m {\n+    () => {\n+        Some(42u32)\n+    };\n }\n \n-fn returns_unit() {\n-    if Ok::<i32, i32>(4).is_ok() {\n-        true\n-    } else {\n-        false\n-    };\n+fn issue5504() {\n+    fn result_opt() -> Result<Option<i32>, i32> {\n+        Err(42)\n+    }\n+\n+    fn try_result_opt() -> Result<i32, i32> {\n+        while r#try!(result_opt()).is_some() {}\n+        if r#try!(result_opt()).is_some() {}\n+        Ok(42)\n+    }\n+\n+    try_result_opt();\n+\n+    if m!().is_some() {}\n+    while m!().is_some() {}\n }"}, {"sha": "51912dade035677a5372aa97b871eb3aa2f1b62e", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/07dd5fada91b3a3219febb91c4dd0932c384f9c7/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07dd5fada91b3a3219febb91c4dd0932c384f9c7/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=07dd5fada91b3a3219febb91c4dd0932c384f9c7", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool)]\n+#![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n \n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n@@ -83,12 +83,31 @@ fn main() {\n \n     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n \n-    let _ = does_something();\n-    let _ = returns_unit();\n-\n     let opt = Some(false);\n     let x = if let Some(_) = opt { true } else { false };\n     takes_bool(x);\n+\n+    issue5504();\n+\n+    let _ = if let Some(_) = gen_opt() {\n+        1\n+    } else if let None = gen_opt() {\n+        2\n+    } else if let Ok(_) = gen_res() {\n+        3\n+    } else if let Err(_) = gen_res() {\n+        4\n+    } else {\n+        5\n+    };\n+}\n+\n+fn gen_opt() -> Option<()> {\n+    None\n+}\n+\n+fn gen_res() -> Result<(), ()> {\n+    Ok(())\n }\n \n fn takes_bool(_: bool) {}\n@@ -97,18 +116,25 @@ fn foo() {}\n \n fn bar() {}\n \n-fn does_something() -> bool {\n-    if let Ok(_) = Ok::<i32, i32>(4) {\n-        true\n-    } else {\n-        false\n-    }\n+macro_rules! m {\n+    () => {\n+        Some(42u32)\n+    };\n }\n \n-fn returns_unit() {\n-    if let Ok(_) = Ok::<i32, i32>(4) {\n-        true\n-    } else {\n-        false\n-    };\n+fn issue5504() {\n+    fn result_opt() -> Result<Option<i32>, i32> {\n+        Err(42)\n+    }\n+\n+    fn try_result_opt() -> Result<i32, i32> {\n+        while let Some(_) = r#try!(result_opt()) {}\n+        if let Some(_) = r#try!(result_opt()) {}\n+        Ok(42)\n+    }\n+\n+    try_result_opt();\n+\n+    if let Some(_) = m!() {}\n+    while let Some(_) = m!() {}\n }"}, {"sha": "b58deb7954efe06b90c8516d1b4d52c614b901db", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/07dd5fada91b3a3219febb91c4dd0932c384f9c7/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07dd5fada91b3a3219febb91c4dd0932c384f9c7/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=07dd5fada91b3a3219febb91c4dd0932c384f9c7", "patch": "@@ -137,22 +137,58 @@ LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:90:20\n+  --> $DIR/redundant_pattern_matching.rs:87:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:101:12\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:92:20\n+   |\n+LL |     let _ = if let Some(_) = gen_opt() {\n+   |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:94:19\n    |\n-LL |     if let Ok(_) = Ok::<i32, i32>(4) {\n-   |     -------^^^^^-------------------- help: try this: `if Ok::<i32, i32>(4).is_ok()`\n+LL |     } else if let None = gen_opt() {\n+   |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:109:12\n+  --> $DIR/redundant_pattern_matching.rs:96:19\n+   |\n+LL |     } else if let Ok(_) = gen_res() {\n+   |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:98:19\n+   |\n+LL |     } else if let Err(_) = gen_res() {\n+   |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:131:19\n+   |\n+LL |         while let Some(_) = r#try!(result_opt()) {}\n+   |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:132:16\n+   |\n+LL |         if let Some(_) = r#try!(result_opt()) {}\n+   |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:138:12\n+   |\n+LL |     if let Some(_) = m!() {}\n+   |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:139:15\n    |\n-LL |     if let Ok(_) = Ok::<i32, i32>(4) {\n-   |     -------^^^^^-------------------- help: try this: `if Ok::<i32, i32>(4).is_ok()`\n+LL |     while let Some(_) = m!() {}\n+   |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 28 previous errors\n "}]}