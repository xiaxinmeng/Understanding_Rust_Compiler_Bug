{"sha": "60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTcwYmUxZmQ2N2IxOWNmY2RiYmM1M2Y1ZTg3ZWJjYmYwYjYxYmY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-28T15:39:52Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T20:12:46Z"}, "message": "Distinguish RPIT from other impl trait", "tree": {"sha": "09bd4eaefa2103735747c23016178dd920d82643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09bd4eaefa2103735747c23016178dd920d82643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "html_url": "https://github.com/rust-lang/rust/commit/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af0952961520d44088107d000b78eb3a698edba", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af0952961520d44088107d000b78eb3a698edba", "html_url": "https://github.com/rust-lang/rust/commit/4af0952961520d44088107d000b78eb3a698edba"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "7a45782cd45b188603d4056fcb8846451b88956e", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "patch": "@@ -502,6 +502,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // Otherwise, generate the label we'll use in the error message.\n             hir::OpaqueTyOrigin::TypeAlias => \"impl Trait\",\n             hir::OpaqueTyOrigin::FnReturn => \"impl Trait\",\n+            hir::OpaqueTyOrigin::Misc => \"impl Trait\",\n         };\n         let msg = format!(\"ambiguous lifetime bound in `{}`\", context_name);\n         let mut err = self.tcx.sess.struct_span_err(span, &msg);"}, {"sha": "426659fd92452371b2e54a4cc8a0d6c9a48c5dd7", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "patch": "@@ -272,7 +272,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let ty = self.lower_ty(\n                     t,\n                     if self.sess.features_untracked().impl_trait_in_bindings {\n-                        ImplTraitContext::OpaqueTy(None)\n+                        ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc)\n                     } else {\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                     },\n@@ -283,7 +283,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let ty = self.lower_ty(\n                     t,\n                     if self.sess.features_untracked().impl_trait_in_bindings {\n-                        ImplTraitContext::OpaqueTy(None)\n+                        ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc)\n                     } else {\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                     },\n@@ -327,8 +327,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 Some(bounds) => {\n                     let ty = hir::OpaqueTy {\n-                        generics: self.lower_generics(generics, ImplTraitContext::OpaqueTy(None)),\n-                        bounds: self.lower_param_bounds(bounds, ImplTraitContext::OpaqueTy(None)),\n+                        generics: self.lower_generics(\n+                            generics,\n+                            ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc),\n+                        ),\n+                        bounds: self.lower_param_bounds(\n+                            bounds,\n+                            ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc),\n+                        ),\n                         impl_trait_fn: None,\n                         origin: hir::OpaqueTyOrigin::TypeAlias,\n                     };"}, {"sha": "b600869fdf626e10512b20dfcf6d9463a2639793", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "patch": "@@ -222,7 +222,7 @@ enum ImplTraitContext<'b, 'a> {\n     /// We optionally store a `DefId` for the parent item here so we can look up necessary\n     /// information later. It is `None` when no information about the context should be stored\n     /// (e.g., for consts and statics).\n-    OpaqueTy(Option<DefId> /* fn def-ID */),\n+    OpaqueTy(Option<DefId> /* fn def-ID */, hir::OpaqueTyOrigin),\n \n     /// `impl Trait` is not accepted in this position.\n     Disallowed(ImplTraitPosition),\n@@ -248,7 +248,7 @@ impl<'a> ImplTraitContext<'_, 'a> {\n         use self::ImplTraitContext::*;\n         match self {\n             Universal(params) => Universal(params),\n-            OpaqueTy(fn_def_id) => OpaqueTy(*fn_def_id),\n+            OpaqueTy(fn_def_id, origin) => OpaqueTy(*fn_def_id, *origin),\n             Disallowed(pos) => Disallowed(*pos),\n         }\n     }\n@@ -1010,7 +1010,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo() -> impl Iterator<Item = impl Debug>\n-                    ImplTraitContext::OpaqueTy(_) => (true, itctx),\n+                    ImplTraitContext::OpaqueTy(..) => (true, itctx),\n \n                     // We are in the argument position, but within a dyn type:\n                     //\n@@ -1019,7 +1019,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal(_) if self.is_in_dyn_type => (true, itctx),\n+                    ImplTraitContext::Universal(..) if self.is_in_dyn_type => (true, itctx),\n \n                     // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n                     // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n@@ -1028,7 +1028,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n                     ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => {\n-                        (true, ImplTraitContext::OpaqueTy(None))\n+                        (true, ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc))\n                     }\n \n                     // We are in the parameter position, but not within a dyn type:\n@@ -1269,8 +1269,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TyKind::ImplTrait(def_node_id, ref bounds) => {\n                 let span = t.span;\n                 match itctx {\n-                    ImplTraitContext::OpaqueTy(fn_def_id) => {\n-                        self.lower_opaque_impl_trait(span, fn_def_id, def_node_id, |this| {\n+                    ImplTraitContext::OpaqueTy(fn_def_id, origin) => {\n+                        self.lower_opaque_impl_trait(span, fn_def_id, origin, def_node_id, |this| {\n                             this.lower_param_bounds(bounds, itctx)\n                         })\n                     }\n@@ -1349,6 +1349,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         span: Span,\n         fn_def_id: Option<DefId>,\n+        origin: hir::OpaqueTyOrigin,\n         opaque_ty_node_id: NodeId,\n         lower_bounds: impl FnOnce(&mut Self) -> hir::GenericBounds<'hir>,\n     ) -> hir::TyKind<'hir> {\n@@ -1390,7 +1391,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 },\n                 bounds: hir_bounds,\n                 impl_trait_fn: fn_def_id,\n-                origin: hir::OpaqueTyOrigin::FnReturn,\n+                origin,\n             };\n \n             trace!(\"lower_opaque_impl_trait: {:#?}\", opaque_ty_def_index);\n@@ -1622,7 +1623,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.lower_ty(\n                 t,\n                 if self.sess.features_untracked().impl_trait_in_bindings {\n-                    ImplTraitContext::OpaqueTy(Some(parent_def_id))\n+                    ImplTraitContext::OpaqueTy(Some(parent_def_id), hir::OpaqueTyOrigin::Misc)\n                 } else {\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                 },\n@@ -1723,9 +1724,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             match decl.output {\n                 FunctionRetTy::Ty(ref ty) => match in_band_ty_params {\n-                    Some((def_id, _)) if impl_trait_return_allow => hir::FunctionRetTy::Return(\n-                        self.lower_ty(ty, ImplTraitContext::OpaqueTy(Some(def_id))),\n-                    ),\n+                    Some((def_id, _)) if impl_trait_return_allow => {\n+                        hir::FunctionRetTy::Return(self.lower_ty(\n+                            ty,\n+                            ImplTraitContext::OpaqueTy(Some(def_id), hir::OpaqueTyOrigin::FnReturn),\n+                        ))\n+                    }\n                     _ => hir::FunctionRetTy::Return(\n                         self.lower_ty(ty, ImplTraitContext::disallowed()),\n                     ),\n@@ -1957,7 +1961,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::GenericBound<'hir> {\n         // Compute the `T` in `Future<Output = T>` from the return type.\n         let output_ty = match output {\n-            FunctionRetTy::Ty(ty) => self.lower_ty(ty, ImplTraitContext::OpaqueTy(Some(fn_def_id))),\n+            FunctionRetTy::Ty(ty) => self.lower_ty(\n+                ty,\n+                ImplTraitContext::OpaqueTy(Some(fn_def_id), hir::OpaqueTyOrigin::FnReturn),\n+            ),\n             FunctionRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };\n \n@@ -2102,9 +2109,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n \n                 let kind = hir::GenericParamKind::Type {\n-                    default: default\n-                        .as_ref()\n-                        .map(|x| self.lower_ty(x, ImplTraitContext::OpaqueTy(None))),\n+                    default: default.as_ref().map(|x| {\n+                        self.lower_ty(\n+                            x,\n+                            ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc),\n+                        )\n+                    }),\n                     synthetic: param\n                         .attrs\n                         .iter()"}, {"sha": "07a2c48225349d9c5c21c563a6a7e6c561d359d5", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=60970be1fd67b19cfcdbbc53f5e87ebcbf0b61bf", "patch": "@@ -1990,6 +1990,8 @@ pub enum OpaqueTyOrigin {\n     FnReturn,\n     /// `async fn`\n     AsyncFn,\n+    /// Impl trait in bindings, consts, statics, bounds.\n+    Misc,\n }\n \n /// The various kinds of types recognized by the compiler."}]}