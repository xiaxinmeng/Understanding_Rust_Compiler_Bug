{"sha": "984eab57f708e62c09b3d708033fe620130b5f39", "node_id": "C_kwDOAAsO6NoAKDk4NGVhYjU3ZjcwOGU2MmMwOWIzZDcwODAzM2ZlNjIwMTMwYjVmMzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-15T14:04:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-15T14:04:24Z"}, "message": "Auto merge of #105746 - matthiaskrgr:rollup-sz3grbv, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #104592 (Ensure async trait impls are async (or otherwise return an opaque type))\n - #105623 (Fix `-Z print-type-sizes` for generators with discriminant field ordered first)\n - #105627 (Auto traits in `dyn Trait + Auto` are suggestable)\n - #105633 (Make `report_projection_error` more `Term` agnostic)\n - #105683 (Various cleanups to dest prop)\n - #105692 (Add regression test for #104678)\n - #105707 (rustdoc: remove unnecessary CSS `kbd { cursor: default }`)\n - #105715 (Do not mention long types in E0599 label)\n - #105722 (more clippy::complexity fixes)\n - #105724 (rustdoc: remove no-op CSS `.scrape-example .src-line-numbers { margin: 0 }`)\n - #105730 (rustdoc: remove no-op CSS `.item-info:before { color }`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "381679131dcbd6c775ef13a2829c75649f9e4c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/381679131dcbd6c775ef13a2829c75649f9e4c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984eab57f708e62c09b3d708033fe620130b5f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984eab57f708e62c09b3d708033fe620130b5f39", "html_url": "https://github.com/rust-lang/rust/commit/984eab57f708e62c09b3d708033fe620130b5f39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984eab57f708e62c09b3d708033fe620130b5f39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397b66e77b279de5006facf87979f9ecff5c7f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/397b66e77b279de5006facf87979f9ecff5c7f87", "html_url": "https://github.com/rust-lang/rust/commit/397b66e77b279de5006facf87979f9ecff5c7f87"}, {"sha": "2650b7bd348b4671bf8b1f215a4fc740ca17b722", "url": "https://api.github.com/repos/rust-lang/rust/commits/2650b7bd348b4671bf8b1f215a4fc740ca17b722", "html_url": "https://github.com/rust-lang/rust/commit/2650b7bd348b4671bf8b1f215a4fc740ca17b722"}], "stats": {"total": 834, "additions": 509, "deletions": 325}, "files": [{"sha": "f933b9b161ca91f56bfb0db9e3f39eaae37e4d54", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -2466,20 +2466,14 @@ pub enum ModKind {\n     Unloaded,\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug)]\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, Default)]\n pub struct ModSpans {\n     /// `inner_span` covers the body of the module; for a file module, its the whole file.\n     /// For an inline module, its the span inside the `{ ... }`, not including the curly braces.\n     pub inner_span: Span,\n     pub inject_use_span: Span,\n }\n \n-impl Default for ModSpans {\n-    fn default() -> ModSpans {\n-        ModSpans { inner_span: Default::default(), inject_use_span: Default::default() }\n-    }\n-}\n-\n /// Foreign module declaration.\n ///\n /// E.g., `extern { .. }` or `extern \"C\" { .. }`."}, {"sha": "05f059c89d5cd0fea01ea73e00e8d8419b4b3c9e", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -126,13 +126,13 @@ impl<K: Ord, V> SortedMap<K, V> {\n     /// Iterate over the keys, sorted\n     #[inline]\n     pub fn keys(&self) -> impl Iterator<Item = &K> + ExactSizeIterator + DoubleEndedIterator {\n-        self.data.iter().map(|&(ref k, _)| k)\n+        self.data.iter().map(|(k, _)| k)\n     }\n \n     /// Iterate over values, sorted by key\n     #[inline]\n     pub fn values(&self) -> impl Iterator<Item = &V> + ExactSizeIterator + DoubleEndedIterator {\n-        self.data.iter().map(|&(_, ref v)| v)\n+        self.data.iter().map(|(_, v)| v)\n     }\n \n     #[inline]\n@@ -222,7 +222,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n         K: Borrow<Q>,\n         Q: Ord + ?Sized,\n     {\n-        self.data.binary_search_by(|&(ref x, _)| x.borrow().cmp(key))\n+        self.data.binary_search_by(|(x, _)| x.borrow().cmp(key))\n     }\n \n     #[inline]\n@@ -300,7 +300,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> Self {\n         let mut data: Vec<(K, V)> = iter.into_iter().collect();\n \n-        data.sort_unstable_by(|&(ref k1, _), &(ref k2, _)| k1.cmp(k2));\n+        data.sort_unstable_by(|(k1, _), (k2, _)| k1.cmp(k2));\n         data.dedup_by(|&mut (ref k1, _), &mut (ref k2, _)| k1.cmp(k2) == Ordering::Equal);\n \n         SortedMap { data }"}, {"sha": "26cdf8a58f3fb5e975342ef93f2237c095a2932d", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -20,6 +20,10 @@ hir_analysis_lifetimes_or_bounds_mismatch_on_trait =\n     .where_label = this `where` clause might not match the one in the trait\n     .bounds_label = this bound might be missing in the impl\n \n+hir_analysis_async_trait_impl_should_be_async =\n+    method `{$method_name}` should be async because the method from the trait is async\n+    .trait_item_label = required because the trait method is async\n+\n hir_analysis_drop_impl_on_wrong_item =\n     the `Drop` trait may only be implemented for local structs, enums, and unions\n     .label = must be a struct, enum, or union in the current crate"}, {"sha": "e2a0e436fd5e2677a9524066380a034907ef59b0", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -2313,7 +2313,7 @@ impl FileWithAnnotatedLines {\n         }\n \n         // Find overlapping multiline annotations, put them at different depths\n-        multiline_annotations.sort_by_key(|&(_, ref ml)| (ml.line_start, usize::MAX - ml.line_end));\n+        multiline_annotations.sort_by_key(|(_, ml)| (ml.line_start, usize::MAX - ml.line_end));\n         for (_, ann) in multiline_annotations.clone() {\n             for (_, a) in multiline_annotations.iter_mut() {\n                 // Move all other multiline annotations overlapping with this one"}, {"sha": "518b5ec10f8906122c4ab9fb26cc19e80231bf8a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -324,7 +324,7 @@ impl CodeSuggestion {\n                         // Account for the difference between the width of the current code and the\n                         // snippet being suggested, so that the *later* suggestions are correctly\n                         // aligned on the screen.\n-                        acc += len as isize - (cur_hi.col.0 - cur_lo.col.0) as isize;\n+                        acc += len - (cur_hi.col.0 - cur_lo.col.0) as isize;\n                     }\n                     prev_hi = cur_hi;\n                     prev_line = sf.get_line(prev_hi.line - 1);"}, {"sha": "6b9ce9a4599e2ce45ddd8e8479ec41f32d73d6b7", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -67,6 +67,10 @@ pub(crate) fn compare_impl_method<'tcx>(\n         return;\n     }\n \n+    if let Err(_) = compare_asyncness(tcx, impl_m, impl_m_span, trait_m, trait_item_span) {\n+        return;\n+    }\n+\n     if let Err(_) = compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n     {\n         return;\n@@ -323,6 +327,34 @@ fn compare_predicate_entailment<'tcx>(\n     Ok(())\n }\n \n+fn compare_asyncness<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    impl_m: &ty::AssocItem,\n+    impl_m_span: Span,\n+    trait_m: &ty::AssocItem,\n+    trait_item_span: Option<Span>,\n+) -> Result<(), ErrorGuaranteed> {\n+    if tcx.asyncness(trait_m.def_id) == hir::IsAsync::Async {\n+        match tcx.fn_sig(impl_m.def_id).skip_binder().output().kind() {\n+            ty::Alias(ty::Opaque, ..) => {\n+                // allow both `async fn foo()` and `fn foo() -> impl Future`\n+            }\n+            ty::Error(rustc_errors::ErrorGuaranteed { .. }) => {\n+                // We don't know if it's ok, but at least it's already an error.\n+            }\n+            _ => {\n+                return Err(tcx.sess.emit_err(crate::errors::AsyncTraitImplShouldBeAsync {\n+                    span: impl_m_span,\n+                    method_name: trait_m.name,\n+                    trait_item_span,\n+                }));\n+            }\n+        };\n+    }\n+\n+    Ok(())\n+}\n+\n #[instrument(skip(tcx), level = \"debug\", ret)]\n pub fn collect_trait_impl_trait_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "d383fcacb3a9c914ce0b862daf1386e8b52c453e", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -51,6 +51,17 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n     pub ident: Ident,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_async_trait_impl_should_be_async)]\n+pub struct AsyncTraitImplShouldBeAsync {\n+    #[primary_span]\n+    // #[label]\n+    pub span: Span,\n+    #[label(trait_item_label)]\n+    pub trait_item_span: Option<Span>,\n+    pub method_name: Symbol,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_drop_impl_on_wrong_item, code = \"E0120\")]\n pub struct DropImplOnWrongItem {"}, {"sha": "29a6902ccb0772591f896c431ec61e9d45ce37e1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1757,7 +1757,6 @@ impl<'a> State<'a> {\n                 self.print_qpath(qpath, true);\n                 self.popen();\n                 if let Some(ddpos) = ddpos.as_opt_usize() {\n-                    let ddpos = ddpos as usize;\n                     self.commasep(Inconsistent, &elts[..ddpos], |s, p| s.print_pat(p));\n                     if ddpos != 0 {\n                         self.word_space(\",\");"}, {"sha": "5c0d5f32f0fd0c47e4d298af105e6a8dbd1ffa85", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -893,7 +893,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n                     } else {\n-                        err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n+                        let ty_str = if ty_str.len() > 50 {\n+                            String::new()\n+                        } else {\n+                            format!(\"on `{ty_str}` \")\n+                        };\n+                        err.span_label(span, format!(\n+                            \"{item_kind} cannot be called {ty_str}due to unsatisfied trait bounds\"\n+                        ));\n                     }\n                 };\n "}, {"sha": "13f06fe747349d8084b9b53d1a303c75f9b0278b", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -192,7 +192,7 @@ impl Mismatch {\n         let crate_name = std::env::var(\"CARGO_CRATE_NAME\").ok()?;\n \n         // If we're not in a \"rustc_\" crate, bail.\n-        let Some((\"rustc\", slug_prefix)) = crate_name.split_once(\"_\") else { return None };\n+        let Some((\"rustc\", slug_prefix)) = crate_name.split_once('_') else { return None };\n \n         let slug_name = slug.segments.first()?.ident.to_string();\n         if !slug_name.starts_with(slug_prefix) {"}, {"sha": "8c22df7395f1052669ad14f2e36cc7e187bf4b23", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -3,8 +3,8 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, ExistentialPredicate, InferConst,\n-    InferTy, Opaque, PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque,\n+    PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -469,17 +469,6 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 }\n             }\n \n-            Dynamic(dty, _, _) => {\n-                for pred in *dty {\n-                    match pred.skip_binder() {\n-                        ExistentialPredicate::Trait(_) | ExistentialPredicate::Projection(_) => {\n-                            // Okay\n-                        }\n-                        _ => return ControlFlow::Break(()),\n-                    }\n-                }\n-            }\n-\n             Param(param) => {\n                 // FIXME: It would be nice to make this not use string manipulation,\n                 // but it's pretty hard to do this, since `ty::ParamTy` is missing"}, {"sha": "3e45319431cec0e9de6816ed78310c892d09d461", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 88, "deletions": 83, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -132,15 +132,12 @@ use std::collections::hash_map::{Entry, OccupiedEntry};\n use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::{dump_mir, PassWhere};\n use rustc_middle::mir::{\n     traversal, BasicBlock, Body, InlineAsmOperand, Local, LocalKind, Location, Operand, Place,\n     Rvalue, Statement, StatementKind, TerminatorKind,\n };\n-use rustc_middle::mir::{\n-    visit::{MutVisitor, PlaceContext, Visitor},\n-    ProjectionElem,\n-};\n use rustc_middle::ty::TyCtxt;\n use rustc_mir_dataflow::impls::MaybeLiveLocals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n@@ -359,40 +356,45 @@ struct FilterInformation<'a, 'body, 'alloc, 'tcx> {\n // through these methods, and not directly.\n impl<'alloc> Candidates<'alloc> {\n     /// Just `Vec::retain`, but the condition is inverted and we add debugging output\n-    fn vec_remove_debug(\n+    fn vec_filter_candidates(\n         src: Local,\n         v: &mut Vec<Local>,\n-        mut f: impl FnMut(Local) -> bool,\n+        mut f: impl FnMut(Local) -> CandidateFilter,\n         at: Location,\n     ) {\n         v.retain(|dest| {\n             let remove = f(*dest);\n-            if remove {\n+            if remove == CandidateFilter::Remove {\n                 trace!(\"eliminating {:?} => {:?} due to conflict at {:?}\", src, dest, at);\n             }\n-            !remove\n+            remove == CandidateFilter::Keep\n         });\n     }\n \n-    /// `vec_remove_debug` but for an `Entry`\n-    fn entry_remove(\n+    /// `vec_filter_candidates` but for an `Entry`\n+    fn entry_filter_candidates(\n         mut entry: OccupiedEntry<'_, Local, Vec<Local>>,\n         p: Local,\n-        f: impl FnMut(Local) -> bool,\n+        f: impl FnMut(Local) -> CandidateFilter,\n         at: Location,\n     ) {\n         let candidates = entry.get_mut();\n-        Self::vec_remove_debug(p, candidates, f, at);\n+        Self::vec_filter_candidates(p, candidates, f, at);\n         if candidates.len() == 0 {\n             entry.remove();\n         }\n     }\n \n-    /// Removes all candidates `(p, q)` or `(q, p)` where `p` is the indicated local and `f(q)` is true.\n-    fn remove_candidates_if(&mut self, p: Local, mut f: impl FnMut(Local) -> bool, at: Location) {\n+    /// For all candidates `(p, q)` or `(q, p)` removes the candidate if `f(q)` says to do so\n+    fn filter_candidates_by(\n+        &mut self,\n+        p: Local,\n+        mut f: impl FnMut(Local) -> CandidateFilter,\n+        at: Location,\n+    ) {\n         // Cover the cases where `p` appears as a `src`\n         if let Entry::Occupied(entry) = self.c.entry(p) {\n-            Self::entry_remove(entry, p, &mut f, at);\n+            Self::entry_filter_candidates(entry, p, &mut f, at);\n         }\n         // And the cases where `p` appears as a `dest`\n         let Some(srcs) = self.reverse.get_mut(&p) else {\n@@ -401,18 +403,31 @@ impl<'alloc> Candidates<'alloc> {\n         // We use `retain` here to remove the elements from the reverse set if we've removed the\n         // matching candidate in the forward set.\n         srcs.retain(|src| {\n-            if !f(*src) {\n+            if f(*src) == CandidateFilter::Keep {\n                 return true;\n             }\n             let Entry::Occupied(entry) = self.c.entry(*src) else {\n                 return false;\n             };\n-            Self::entry_remove(entry, *src, |dest| dest == p, at);\n+            Self::entry_filter_candidates(\n+                entry,\n+                *src,\n+                |dest| {\n+                    if dest == p { CandidateFilter::Remove } else { CandidateFilter::Keep }\n+                },\n+                at,\n+            );\n             false\n         });\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq)]\n+enum CandidateFilter {\n+    Keep,\n+    Remove,\n+}\n+\n impl<'a, 'body, 'alloc, 'tcx> FilterInformation<'a, 'body, 'alloc, 'tcx> {\n     /// Filters the set of candidates to remove those that conflict.\n     ///\n@@ -460,7 +475,7 @@ impl<'a, 'body, 'alloc, 'tcx> FilterInformation<'a, 'body, 'alloc, 'tcx> {\n             for (i, statement) in data.statements.iter().enumerate().rev() {\n                 self.at = Location { block, statement_index: i };\n                 self.live.seek_after_primary_effect(self.at);\n-                self.get_statement_write_info(&statement.kind);\n+                self.write_info.for_statement(&statement.kind, self.body);\n                 self.apply_conflicts();\n             }\n         }\n@@ -469,80 +484,59 @@ impl<'a, 'body, 'alloc, 'tcx> FilterInformation<'a, 'body, 'alloc, 'tcx> {\n     fn apply_conflicts(&mut self) {\n         let writes = &self.write_info.writes;\n         for p in writes {\n-            self.candidates.remove_candidates_if(\n+            let other_skip = self.write_info.skip_pair.and_then(|(a, b)| {\n+                if a == *p {\n+                    Some(b)\n+                } else if b == *p {\n+                    Some(a)\n+                } else {\n+                    None\n+                }\n+            });\n+            self.candidates.filter_candidates_by(\n                 *p,\n-                // It is possible that a local may be live for less than the\n-                // duration of a statement This happens in the case of function\n-                // calls or inline asm. Because of this, we also mark locals as\n-                // conflicting when both of them are written to in the same\n-                // statement.\n-                |q| self.live.contains(q) || writes.contains(&q),\n+                |q| {\n+                    if Some(q) == other_skip {\n+                        return CandidateFilter::Keep;\n+                    }\n+                    // It is possible that a local may be live for less than the\n+                    // duration of a statement This happens in the case of function\n+                    // calls or inline asm. Because of this, we also mark locals as\n+                    // conflicting when both of them are written to in the same\n+                    // statement.\n+                    if self.live.contains(q) || writes.contains(&q) {\n+                        CandidateFilter::Remove\n+                    } else {\n+                        CandidateFilter::Keep\n+                    }\n+                },\n                 self.at,\n             );\n         }\n     }\n-\n-    /// Gets the write info for the `statement`.\n-    fn get_statement_write_info(&mut self, statement: &StatementKind<'tcx>) {\n-        self.write_info.writes.clear();\n-        match statement {\n-            StatementKind::Assign(box (lhs, rhs)) => match rhs {\n-                Rvalue::Use(op) => {\n-                    if !lhs.is_indirect() {\n-                        self.get_assign_use_write_info(*lhs, op);\n-                        return;\n-                    }\n-                }\n-                _ => (),\n-            },\n-            _ => (),\n-        }\n-\n-        self.write_info.for_statement(statement);\n-    }\n-\n-    fn get_assign_use_write_info(&mut self, lhs: Place<'tcx>, rhs: &Operand<'tcx>) {\n-        // We register the writes for the operand unconditionally\n-        self.write_info.add_operand(rhs);\n-        // However, we cannot do the same thing for the `lhs` as that would always block the\n-        // optimization. Instead, we consider removing candidates manually.\n-        let Some(rhs) = rhs.place() else {\n-            self.write_info.add_place(lhs);\n-            return;\n-        };\n-        // Find out which candidate pair we should skip, if any\n-        let Some((src, dest)) = places_to_candidate_pair(lhs, rhs, self.body) else {\n-            self.write_info.add_place(lhs);\n-            return;\n-        };\n-        self.candidates.remove_candidates_if(\n-            lhs.local,\n-            |other| {\n-                // Check if this is the candidate pair that should not be removed\n-                if (lhs.local == src && other == dest) || (lhs.local == dest && other == src) {\n-                    return false;\n-                }\n-                // Otherwise, do the \"standard\" thing\n-                self.live.contains(other)\n-            },\n-            self.at,\n-        )\n-    }\n }\n \n /// Describes where a statement/terminator writes to\n #[derive(Default, Debug)]\n struct WriteInfo {\n     writes: Vec<Local>,\n+    /// If this pair of locals is a candidate pair, completely skip processing it during this\n+    /// statement. All other candidates are unaffected.\n+    skip_pair: Option<(Local, Local)>,\n }\n \n impl WriteInfo {\n-    fn for_statement<'tcx>(&mut self, statement: &StatementKind<'tcx>) {\n+    fn for_statement<'tcx>(&mut self, statement: &StatementKind<'tcx>, body: &Body<'tcx>) {\n+        self.reset();\n         match statement {\n             StatementKind::Assign(box (lhs, rhs)) => {\n                 self.add_place(*lhs);\n                 match rhs {\n-                    Rvalue::Use(op) | Rvalue::Repeat(op, _) => {\n+                    Rvalue::Use(op) => {\n+                        self.add_operand(op);\n+                        self.consider_skipping_for_assign_use(*lhs, op, body);\n+                    }\n+                    Rvalue::Repeat(op, _) => {\n                         self.add_operand(op);\n                     }\n                     Rvalue::Cast(_, op, _)\n@@ -586,8 +580,22 @@ impl WriteInfo {\n         }\n     }\n \n+    fn consider_skipping_for_assign_use<'tcx>(\n+        &mut self,\n+        lhs: Place<'tcx>,\n+        rhs: &Operand<'tcx>,\n+        body: &Body<'tcx>,\n+    ) {\n+        let Some(rhs) = rhs.place() else {\n+            return\n+        };\n+        if let Some(pair) = places_to_candidate_pair(lhs, rhs, body) {\n+            self.skip_pair = Some(pair);\n+        }\n+    }\n+\n     fn for_terminator<'tcx>(&mut self, terminator: &TerminatorKind<'tcx>) {\n-        self.writes.clear();\n+        self.reset();\n         match terminator {\n             TerminatorKind::SwitchInt { discr: op, .. }\n             | TerminatorKind::Assert { cond: op, .. } => {\n@@ -657,15 +665,16 @@ impl WriteInfo {\n             Operand::Copy(_) | Operand::Constant(_) => (),\n         }\n     }\n+\n+    fn reset(&mut self) {\n+        self.writes.clear();\n+        self.skip_pair = None;\n+    }\n }\n \n /////////////////////////////////////////////////////\n // Candidate accumulation\n \n-fn is_constant<'tcx>(place: Place<'tcx>) -> bool {\n-    place.projection.iter().all(|p| !matches!(p, ProjectionElem::Deref | ProjectionElem::Index(_)))\n-}\n-\n /// If the pair of places is being considered for merging, returns the candidate which would be\n /// merged in order to accomplish this.\n ///\n@@ -741,10 +750,6 @@ impl<'tcx> Visitor<'tcx> for FindAssignments<'_, '_, 'tcx> {\n             Rvalue::Use(Operand::Copy(rhs) | Operand::Move(rhs)),\n         )) = &statement.kind\n         {\n-            if !is_constant(*lhs) || !is_constant(*rhs) {\n-                return;\n-            }\n-\n             let Some((src, dest)) = places_to_candidate_pair(*lhs, *rhs, self.body) else {\n                 return;\n             };"}, {"sha": "3bafd3730bd79d2db4cb31d95bda50d7e756a492", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -875,18 +875,12 @@ pub struct PacRet {\n     pub key: PAuthKey,\n }\n \n-#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+#[derive(Clone, Copy, Hash, Debug, PartialEq, Default)]\n pub struct BranchProtection {\n     pub bti: bool,\n     pub pac_ret: Option<PacRet>,\n }\n \n-impl Default for BranchProtection {\n-    fn default() -> Self {\n-        BranchProtection { bti: false, pac_ret: None }\n-    }\n-}\n-\n pub const fn default_lib_output() -> CrateType {\n     CrateType::Rlib\n }\n@@ -1875,7 +1869,7 @@ fn parse_opt_level(\n         .into_iter()\n         .flat_map(|(i, s)| {\n             // NB: This can match a string without `=`.\n-            if let Some(\"opt-level\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+            if let Some(\"opt-level\") = s.split('=').next() { Some(i) } else { None }\n         })\n         .max();\n     if max_o > max_c {\n@@ -1912,7 +1906,7 @@ fn select_debuginfo(\n         .into_iter()\n         .flat_map(|(i, s)| {\n             // NB: This can match a string without `=`.\n-            if let Some(\"debuginfo\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+            if let Some(\"debuginfo\") = s.split('=').next() { Some(i) } else { None }\n         })\n         .max();\n     if max_g > max_c {"}, {"sha": "26cd54210d0bbb9c33134c7876269f4f7a336006", "filename": "compiler/rustc_span/src/analyze_source_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -175,7 +175,7 @@ cfg_if::cfg_if! {\n             // There might still be a tail left to analyze\n             let tail_start = chunk_count * CHUNK_SIZE + intra_chunk_offset;\n             if tail_start < src.len() {\n-                analyze_source_file_generic(&src[tail_start as usize ..],\n+                analyze_source_file_generic(&src[tail_start ..],\n                                         src.len() - tail_start,\n                                         output_offset + BytePos::from_usize(tail_start),\n                                         lines,\n@@ -219,7 +219,7 @@ fn analyze_source_file_generic(\n     while i < scan_len {\n         let byte = unsafe {\n             // We verified that i < scan_len <= src.len()\n-            *src_bytes.get_unchecked(i as usize)\n+            *src_bytes.get_unchecked(i)\n         };\n \n         // How much to advance in order to get to the next UTF-8 char in the"}, {"sha": "5525eb5331c2776c82374222c7a47b32d7744573", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1381,7 +1381,7 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n                     4 => {\n                         raw_diffs = Vec::with_capacity(bytes_per_diff * num_diffs);\n                         for diff in diff_iter {\n-                            raw_diffs.extend_from_slice(&(diff.0 as u32).to_le_bytes());\n+                            raw_diffs.extend_from_slice(&(diff.0).to_le_bytes());\n                         }\n                     }\n                     _ => unreachable!(),"}, {"sha": "fb3e4a6c083f82d69661213a16bc4f538045f5ff", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -941,7 +941,7 @@ impl SourceMap {\n     /// Otherwise, the span reached to limit is returned.\n     pub fn span_look_ahead(&self, span: Span, expect: Option<&str>, limit: Option<usize>) -> Span {\n         let mut sp = span;\n-        for _ in 0..limit.unwrap_or(100 as usize) {\n+        for _ in 0..limit.unwrap_or(100_usize) {\n             sp = self.next_point(sp);\n             if let Ok(ref snippet) = self.span_to_snippet(sp) {\n                 if expect.map_or(false, |es| snippet == es) {"}, {"sha": "44644c4733e8726b33c886394631744352af4a04", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -81,7 +81,7 @@ fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n         _ => os.into(),\n     };\n \n-    let platform_version: StaticCow<str> = match os.as_ref() {\n+    let platform_version: StaticCow<str> = match os {\n         \"ios\" => ios_lld_platform_version(),\n         \"tvos\" => tvos_lld_platform_version(),\n         \"watchos\" => watchos_lld_platform_version(),"}, {"sha": "34934379c7e84a468abfe4995612c6bbb80aa579", "filename": "compiler/rustc_target/src/spec/powerpc64_ibm_aix.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -5,12 +5,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(\n         LinkerFlavor::Unix(Cc::No),\n-        &[\n-            \"-b64\".into(),\n-            \"-bpT:0x100000000\".into(),\n-            \"-bpD:0x110000000\".into(),\n-            \"-bcdtors:all:0:s\".into(),\n-        ],\n+        &[\"-b64\", \"-bpT:0x100000000\", \"-bpD:0x110000000\", \"-bcdtors:all:0:s\"],\n     );\n \n     Target {"}, {"sha": "3c5e36123ecf56ac325a8a4badbf1922bc8990d9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1636,17 +1636,30 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n                     bound_predicate.rebind(data),\n                 );\n-                let normalized_ty = ocx.normalize(\n-                    &obligation.cause,\n-                    obligation.param_env,\n-                    self.tcx.mk_projection(data.projection_ty.def_id, data.projection_ty.substs),\n-                );\n+                let unnormalized_term = match data.term.unpack() {\n+                    ty::TermKind::Ty(_) => self\n+                        .tcx\n+                        .mk_projection(data.projection_ty.def_id, data.projection_ty.substs)\n+                        .into(),\n+                    ty::TermKind::Const(ct) => self\n+                        .tcx\n+                        .mk_const(\n+                            ty::UnevaluatedConst {\n+                                def: ty::WithOptConstParam::unknown(data.projection_ty.def_id),\n+                                substs: data.projection_ty.substs,\n+                            },\n+                            ct.ty(),\n+                        )\n+                        .into(),\n+                };\n+                let normalized_term =\n+                    ocx.normalize(&obligation.cause, obligation.param_env, unnormalized_term);\n \n                 debug!(?obligation.cause, ?obligation.param_env);\n \n-                debug!(?normalized_ty, data.ty = ?data.term);\n+                debug!(?normalized_term, data.ty = ?data.term);\n \n-                let is_normalized_ty_expected = !matches!(\n+                let is_normalized_term_expected = !matches!(\n                     obligation.cause.code().peel_derives(),\n                     ObligationCauseCode::ItemObligation(_)\n                         | ObligationCauseCode::BindingObligation(_, _)\n@@ -1655,7 +1668,6 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                let expected_ty = data.term.ty().unwrap_or_else(|| self.tcx.ty_error());\n \n                 // constrain inference variables a bit more to nested obligations from normalize so\n                 // we can have more helpful errors.\n@@ -1664,11 +1676,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if let Err(new_err) = ocx.eq_exp(\n                     &obligation.cause,\n                     obligation.param_env,\n-                    is_normalized_ty_expected,\n-                    normalized_ty,\n-                    expected_ty,\n+                    is_normalized_term_expected,\n+                    normalized_term,\n+                    data.term,\n                 ) {\n-                    (Some((data, is_normalized_ty_expected, normalized_ty, expected_ty)), new_err)\n+                    (Some((data, is_normalized_term_expected, normalized_term, data.term)), new_err)\n                 } else {\n                     (None, error.err)\n                 }\n@@ -1677,12 +1689,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             };\n \n             let msg = values\n-                .and_then(|(predicate, _, normalized_ty, expected_ty)| {\n-                    self.maybe_detailed_projection_msg(\n-                        predicate,\n-                        normalized_ty.into(),\n-                        expected_ty.into(),\n-                    )\n+                .and_then(|(predicate, _, normalized_term, expected_term)| {\n+                    self.maybe_detailed_projection_msg(predicate, normalized_term, expected_term)\n                 })\n                 .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n             let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");"}, {"sha": "c761a4dbe4500bfbc78b9576bbfabb873a4de662", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -919,7 +919,7 @@ fn variant_info_for_generator<'tcx>(\n     def_id: DefId,\n     substs: ty::SubstsRef<'tcx>,\n ) -> (Vec<VariantInfo>, Option<Size>) {\n-    let Variants::Multiple { tag, ref tag_encoding, .. } = layout.variants else {\n+    let Variants::Multiple { tag, ref tag_encoding, tag_field, .. } = layout.variants else {\n         return (vec![], None);\n     };\n \n@@ -975,12 +975,28 @@ fn variant_info_for_generator<'tcx>(\n             if variant_size == Size::ZERO {\n                 variant_size = upvars_size;\n             }\n-            // We need to add the discriminant size back into min_size, since it is subtracted\n-            // later during printing.\n-            variant_size += match tag_encoding {\n-                TagEncoding::Direct => tag.size(cx),\n-                _ => Size::ZERO,\n-            };\n+\n+            // This `if` deserves some explanation.\n+            //\n+            // The layout code has a choice of where to place the discriminant of this generator.\n+            // If the discriminant of the generator is placed early in the layout (before the\n+            // variant's own fields), then it'll implicitly be counted towards the size of the\n+            // variant, since we use the maximum offset to calculate size.\n+            //    (side-note: I know this is a bit problematic given upvars placement, etc).\n+            //\n+            // This is important, since the layout printing code always subtracts this discriminant\n+            // size from the variant size if the struct is \"enum\"-like, so failing to account for it\n+            // will either lead to numerical underflow, or an underreported variant size...\n+            //\n+            // However, if the discriminant is placed past the end of the variant, then we need\n+            // to factor in the size of the discriminant manually. This really should be refactored\n+            // better, but this \"works\" for now.\n+            if layout.fields.offset(tag_field) >= variant_size {\n+                variant_size += match tag_encoding {\n+                    TagEncoding::Direct => tag.size(cx),\n+                    _ => Size::ZERO,\n+                };\n+            }\n \n             VariantInfo {\n                 name: Some(Symbol::intern(&ty::GeneratorSubsts::variant_name(variant_idx))),"}, {"sha": "f30ae82d7cdd2b4fd4d596c0e207f016efa4aada", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -250,9 +250,9 @@ impl<I: Interner> Clone for TyKind<I> {\n         match self {\n             Bool => Bool,\n             Char => Char,\n-            Int(i) => Int(i.clone()),\n-            Uint(u) => Uint(u.clone()),\n-            Float(f) => Float(f.clone()),\n+            Int(i) => Int(*i),\n+            Uint(u) => Uint(*u),\n+            Float(f) => Float(*f),\n             Adt(d, s) => Adt(d.clone(), s.clone()),\n             Foreign(d) => Foreign(d.clone()),\n             Str => Str,\n@@ -262,15 +262,15 @@ impl<I: Interner> Clone for TyKind<I> {\n             Ref(r, t, m) => Ref(r.clone(), t.clone(), m.clone()),\n             FnDef(d, s) => FnDef(d.clone(), s.clone()),\n             FnPtr(s) => FnPtr(s.clone()),\n-            Dynamic(p, r, repr) => Dynamic(p.clone(), r.clone(), repr.clone()),\n+            Dynamic(p, r, repr) => Dynamic(p.clone(), r.clone(), *repr),\n             Closure(d, s) => Closure(d.clone(), s.clone()),\n             Generator(d, s, m) => Generator(d.clone(), s.clone(), m.clone()),\n             GeneratorWitness(g) => GeneratorWitness(g.clone()),\n             Never => Never,\n             Tuple(t) => Tuple(t.clone()),\n             Alias(k, p) => Alias(*k, p.clone()),\n             Param(p) => Param(p.clone()),\n-            Bound(d, b) => Bound(d.clone(), b.clone()),\n+            Bound(d, b) => Bound(*d, b.clone()),\n             Placeholder(p) => Placeholder(p.clone()),\n             Infer(t) => Infer(t.clone()),\n             Error(e) => Error(e.clone()),\n@@ -936,7 +936,7 @@ impl<I: Interner> Clone for RegionKind<I> {\n     fn clone(&self) -> Self {\n         match self {\n             ReEarlyBound(r) => ReEarlyBound(r.clone()),\n-            ReLateBound(d, r) => ReLateBound(d.clone(), r.clone()),\n+            ReLateBound(d, r) => ReLateBound(*d, r.clone()),\n             ReFree(r) => ReFree(r.clone()),\n             ReStatic => ReStatic,\n             ReVar(r) => ReVar(r.clone()),"}, {"sha": "bc1e15b359371be7ae9f83b3861b9bbeaef94697", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1396,7 +1396,6 @@ kbd {\n \tvertical-align: middle;\n \tborder: solid 1px var(--border-color);\n \tborder-radius: 3px;\n-\tcursor: default;\n \tcolor: var(--kbd--color);\n \tbackground-color: var(--kbd-background);\n \tbox-shadow: inset 0 -1px 0 var(--kbd-box-shadow-color);\n@@ -1970,7 +1969,6 @@ in storage.js\n }\n \n .scraped-example .code-wrapper .src-line-numbers {\n-\tmargin: 0;\n \tpadding: 14px 0;\n }\n "}, {"sha": "a4097c456135dad24cd093f23ad34e489de489a9", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -150,8 +150,6 @@ pre, .rustdoc.source .example-wrap {\n \tcolor: #c5c5c5;\n }\n \n-.content .item-info::before { color: #ccc; }\n-\n .sidebar h2 a,\n .sidebar h3 a {\n \tcolor: white;"}, {"sha": "a11aba12e0ac77a739f3cc0144373e451917b489", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -85,8 +85,6 @@\n \t--table-alt-row-background-color: #2A2A2A;\n }\n \n-.content .item-info::before { color: #ccc; }\n-\n body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }"}, {"sha": "f697724468fb3c647794acfdc31fad0ea2c978fa", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -82,8 +82,6 @@\n \t--table-alt-row-background-color: #F5F5F5;\n }\n \n-.content .item-info::before { color: #ccc; }\n-\n body.source .example-wrap pre.rust a {\n \tbackground: #eee;\n }"}, {"sha": "80203901ed3c4c5c4678d48cd7a3461e4a3f1ca5", "filename": "src/test/rustdoc-gui/help-page.goml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -27,7 +27,6 @@ define-function: (\n             \"color\": |color|,\n             \"background-color\": |background|,\n             \"box-shadow\": |box_shadow| + \" 0px -1px 0px 0px inset\",\n-            \"cursor\": \"default\",\n         }, ALL)),\n     ],\n )"}, {"sha": "d765bc4f74d332c71bf301de9a4e849e477282a9", "filename": "src/test/ui/argument-suggestions/display-is-suggestable.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,8 @@\n+use std::fmt::Display;\n+\n+fn foo(x: &(dyn Display + Send)) {}\n+\n+fn main() {\n+    foo();\n+    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+}"}, {"sha": "edd72b53eb3b6a8e11a3b668ba1c3a1fdc55d890", "filename": "src/test/ui/argument-suggestions/display-is-suggestable.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/display-is-suggestable.rs:6:5\n+   |\n+LL |     foo();\n+   |     ^^^-- an argument of type `&dyn std::fmt::Display + Send` is missing\n+   |\n+note: function defined here\n+  --> $DIR/display-is-suggestable.rs:3:4\n+   |\n+LL | fn foo(x: &(dyn Display + Send)) {}\n+   |    ^^^ ------------------------\n+help: provide the argument\n+   |\n+LL |     foo(/* &dyn std::fmt::Display + Send */);\n+   |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "0f1ec9ad0522fd60f5ac0dc26cbc74bd4cbc6b80", "filename": "src/test/ui/associated-type-bounds/const-projection-err.gce.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.gce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.gce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.gce.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-projection-err.rs:4:26\n+   |\n+LL | #![cfg_attr(gce, feature(generic_const_exprs))]\n+   |                          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0271]: type mismatch resolving `<T as TraitWAssocConst>::A == 1`\n+  --> $DIR/const-projection-err.rs:14:11\n+   |\n+LL |     foo::<T>();\n+   |           ^ expected `0`, found `1`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/const-projection-err.rs:11:28\n+   |\n+LL | fn foo<T: TraitWAssocConst<A = 1>>() {}\n+   |                            ^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "bead85630016b7514897e3faecfc31a20b7456cf", "filename": "src/test/ui/associated-type-bounds/const-projection-err.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,18 @@\n+// revisions: stock gce\n+\n+#![feature(associated_const_equality)]\n+#![cfg_attr(gce, feature(generic_const_exprs))]\n+//[gce]~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+trait TraitWAssocConst {\n+    const A: usize;\n+}\n+\n+fn foo<T: TraitWAssocConst<A = 1>>() {}\n+\n+fn bar<T: TraitWAssocConst<A = 0>>() {\n+    foo::<T>();\n+    //~^ ERROR type mismatch resolving `<T as TraitWAssocConst>::A == 1`\n+}\n+\n+fn main() {}"}, {"sha": "bf0824259a5a71ec6c29bbfad5914bb37e92fe8c", "filename": "src/test/ui/associated-type-bounds/const-projection-err.stock.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fconst-projection-err.stock.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,17 @@\n+error[E0271]: type mismatch resolving `<T as TraitWAssocConst>::A == 1`\n+  --> $DIR/const-projection-err.rs:14:11\n+   |\n+LL |     foo::<T>();\n+   |           ^ expected `1`, found `<T as TraitWAssocConst>::A`\n+   |\n+   = note: expected constant `1`\n+              found constant `<T as TraitWAssocConst>::A`\n+note: required by a bound in `foo`\n+  --> $DIR/const-projection-err.rs:11:28\n+   |\n+LL | fn foo<T: TraitWAssocConst<A = 1>>() {}\n+   |                            ^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "1b1b3cffd58f3d81f2eccfd6d53a374a64c272aa", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // edition: 2021\n \n #![feature(async_fn_in_trait)]\n@@ -13,11 +12,9 @@ trait MyTrait {\n }\n \n impl MyTrait for i32 {\n-    // This will break once a PR that implements #102745 is merged\n     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n-        Box::pin(async {\n-            *self\n-        })\n+        //~^ ERROR method `foo` should be async\n+        Box::pin(async { *self })\n     }\n }\n "}, {"sha": "60fa534a64f02d54a45e716ef9e637ea569f44c6", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-boxed.rs:15:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "81e1e59a36249ba28010a87152fdbaac480ae7ca", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-extra.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::Poll;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+#[derive(Clone)]\n+struct MyFuture(i32);\n+\n+impl Future for MyFuture {\n+    type Output = i32;\n+    fn poll(\n+        self: Pin<&mut Self>,\n+        _: &mut std::task::Context<'_>,\n+    ) -> Poll<<Self as Future>::Output> {\n+        Poll::Ready(self.0)\n+    }\n+}\n+\n+impl MyTrait for i32 {\n+    // FIXME: this should eventually require `#[refine]` to compile, because it also provides\n+    // `Clone`.\n+    fn foo(&self) -> impl Future<Output = i32> + Clone {\n+        MyFuture(*self)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "71473e7455fd6018968ce29f15090b1603bce6ae", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-manual.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,29 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::task::Poll;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+struct MyFuture;\n+impl Future for MyFuture {\n+    type Output = i32;\n+    fn poll(self: std::pin::Pin<&mut Self>, _: &mut std::task::Context<'_>) -> Poll<Self::Output> {\n+        Poll::Ready(0)\n+    }\n+}\n+\n+impl MyTrait for u32 {\n+    fn foo(&self) -> MyFuture {\n+        //~^ ERROR method `foo` should be async\n+        MyFuture\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "567a36a86d1911fca824523bf7c30065b25d3246", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-manual.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-manual.rs:23:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> MyFuture {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fb92ec786746f9cb9ba3c18b0c9a239da183fa1e", "filename": "src/test/ui/async-await/in-trait/async-example-desugared.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -12,11 +12,8 @@ trait MyTrait {\n }\n \n impl MyTrait for i32 {\n-    // This will break once a PR that implements #102745 is merged\n     fn foo(&self) -> impl Future<Output = i32> + '_ {\n-        async {\n-            *self\n-        }\n+        async { *self }\n     }\n }\n "}, {"sha": "9598d53bce8b2ec02cd2f6e91086eb8560b90595", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -9,7 +9,7 @@ trait MyTrait {\n \n impl MyTrait for i32 {\n     fn foo(&self) -> i32 {\n-        //~^ ERROR: `i32` is not a future [E0277]\n+        //~^ ERROR: method `foo` should be async\n         *self\n     }\n }"}, {"sha": "579801d0f3975cf89a8bbe03eae3dd7f9837fadc", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,17 +1,11 @@\n-error[E0277]: `i32` is not a future\n-  --> $DIR/fn-not-async-err.rs:11:22\n-   |\n-LL |     fn foo(&self) -> i32 {\n-   |                      ^^^ `i32` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `i32`\n-   = note: i32 must be a future or must implement `IntoFuture` to be awaited\n-note: required by a bound in `MyTrait::foo::{opaque#0}`\n-  --> $DIR/fn-not-async-err.rs:7:28\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/fn-not-async-err.rs:11:5\n    |\n LL |     async fn foo(&self) -> i32;\n-   |                            ^^^ required by this bound in `MyTrait::foo::{opaque#0}`\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "2c4ed5535801e95db3c17300b6784db11b3fbeb4", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -12,9 +12,7 @@ trait MyTrait {\n impl MyTrait for i32 {\n     fn foo(&self) -> impl Future<Output = i32> {\n         //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n-        async {\n-            *self\n-        }\n+        async { *self }\n     }\n }\n "}, {"sha": "e396df4e5d119ce7c236d3fa82731525858e7bb9", "filename": "src/test/ui/async-await/in-trait/issue-104678.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,31 @@\n+// edition:2021\n+// check-pass\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+pub trait Pool {\n+    type Conn;\n+\n+    async fn async_callback<'a, F: FnOnce(&'a Self::Conn) -> Fut, Fut: Future<Output = ()>>(\n+        &'a self,\n+        callback: F,\n+    ) -> ();\n+}\n+\n+pub struct PoolImpl;\n+pub struct ConnImpl;\n+\n+impl Pool for PoolImpl {\n+    type Conn = ConnImpl;\n+\n+    async fn async_callback<'a, F: FnOnce(&'a Self::Conn) -> Fut, Fut: Future<Output = ()>>(\n+        &'a self,\n+        _callback: F,\n+    ) -> () {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d1d76916b263905045a0d398206cff93e75040ef", "filename": "src/test/ui/higher-rank-trait-bounds/issue-30786.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -8,7 +8,7 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n       `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>: Stream`\n@@ -29,7 +29,7 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n       `&'a mut &Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`"}, {"sha": "30c380152a5e6b88cf871a26dd82e1cf55f3403c", "filename": "src/test/ui/issues/issue-105330.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -55,8 +55,10 @@ error[E0271]: type mismatch resolving `<Demo as TraitWAssocConst>::A == 32`\n   --> $DIR/issue-105330.rs:12:11\n    |\n LL |     foo::<Demo>()();\n-   |           ^^^^ types differ\n+   |           ^^^^ expected `32`, found `<Demo as TraitWAssocConst>::A`\n    |\n+   = note: expected constant `32`\n+              found constant `<Demo as TraitWAssocConst>::A`\n note: required by a bound in `foo`\n   --> $DIR/issue-105330.rs:11:28\n    |\n@@ -89,8 +91,10 @@ error[E0271]: type mismatch resolving `<Demo as TraitWAssocConst>::A == 32`\n   --> $DIR/issue-105330.rs:19:11\n    |\n LL |     foo::<Demo>();\n-   |           ^^^^ types differ\n+   |           ^^^^ expected `32`, found `<Demo as TraitWAssocConst>::A`\n    |\n+   = note: expected constant `32`\n+              found constant `<Demo as TraitWAssocConst>::A`\n note: required by a bound in `foo`\n   --> $DIR/issue-105330.rs:11:28\n    |"}, {"sha": "a32359c2b9f79d726039dbb259a003d047b06ba1", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -13,7 +13,7 @@ error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std:\n   --> $DIR/issue-31173.rs:12:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>` due to unsatisfied trait bounds\n+   |          ^^^^^^^ method cannot be called due to unsatisfied trait bounds\n   --> $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n    = note: doesn't satisfy `<_ as Iterator>::Item = &_`"}, {"sha": "3151bc76891e48abce961ee826b43498ab63d703", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -17,7 +17,7 @@ error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<\n   --> $DIR/issue-36053-2.rs:7:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                       ---------       ^^^^^ method cannot be called on `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>` due to unsatisfied trait bounds\n+   |                                       ---------       ^^^^^ method cannot be called due to unsatisfied trait bounds\n    |                                       |\n    |                                       doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: FnMut<(&&str,)>`"}, {"sha": "1598b0696913b6e18dc59a2ed556a3505b3f9367", "filename": "src/test/ui/print_type_sizes/async.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,19 +1,11 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type lib\n // edition:2021\n // build-pass\n // ignore-pass\n \n-#![feature(start)]\n-\n async fn wait() {}\n \n-async fn test(arg: [u8; 8192]) {\n+pub async fn test(arg: [u8; 8192]) {\n     wait().await;\n     drop(arg);\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _ = test([0; 8192]);\n-    0\n-}"}, {"sha": "6e47bb4930dc5306e8666c1e8fb7d407706398bc", "filename": "src/test/ui/print_type_sizes/async.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.stdout?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[async fn body@$DIR/async.rs:10:32: 13:2]`: 16386 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:8:36: 11:2]`: 16386 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Suspend0`: 16385 bytes\n print-type-size         field `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n@@ -16,14 +16,14 @@ print-type-size type: `std::mem::MaybeUninit<[u8; 8192]>`: 8192 bytes, alignment\n print-type-size     variant `MaybeUninit`: 8192 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 8192 bytes\n-print-type-size type: `[async fn body@$DIR/async.rs:8:17: 8:19]`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:6:17: 6:19]`: 1 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes\n-print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 1 bytes\n-print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     variant `MaybeUninit`: 1 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 1 bytes"}, {"sha": "d1cd36274ef3e88970904b45708405415f0fa959", "filename": "src/test/ui/print_type_sizes/generator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,8 +1,8 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n \n-#![feature(start, generators, generator_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n \n@@ -13,8 +13,6 @@ fn generator<const C: usize>(array: [u8; C]) -> impl Generator<Yield = (), Retur\n     }\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn foo() {\n     let _ = generator([0; 8192]);\n-    0\n }"}, {"sha": "1a85fe95bb6f771679ae01786c1bd89c56a2ab6f", "filename": "src/test/ui/print_type_sizes/generator_discr_placement.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Z print-type-sizes --crate-type lib\n+// build-pass\n+// ignore-pass\n+\n+// Tests a generator that has its discriminant as the *final* field.\n+\n+// Avoid emitting panic handlers, like the rest of these tests...\n+#![feature(generators)]\n+\n+pub fn foo() {\n+    let a = || {\n+        {\n+            let w: i32 = 4;\n+            yield;\n+            drop(w);\n+        }\n+        {\n+            let z: i32 = 7;\n+            yield;\n+            drop(z);\n+        }\n+    };\n+}"}, {"sha": "7f8f4ccae7c14c6fbe752324f214fc2eced33820", "filename": "src/test/ui/print_type_sizes/generator_discr_placement.stdout", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -0,0 +1,11 @@\n+print-type-size type: `[generator@$DIR/generator_discr_placement.rs:11:13: 11:15]`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Suspend0`: 7 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.w`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Suspend1`: 7 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.z`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Unresumed`: 0 bytes\n+print-type-size     variant `Returned`: 0 bytes\n+print-type-size     variant `Panicked`: 0 bytes"}, {"sha": "05097087d5a811e1c07a8e36bb50b755aa0941e6", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -8,24 +8,6 @@\n // monomorphized, in the MIR of the original function in which they\n // occur, to have their size reported.\n \n-#![feature(start)]\n-\n-// In an ad-hoc attempt to avoid the injection of unwinding code\n-// (which clutters the output of `-Z print-type-sizes` with types from\n-// `unwind::libunwind`):\n-//\n-//   * I am not using Default to build values because that seems to\n-//     cause the injection of unwinding code. (Instead I just make `fn new`\n-//     methods.)\n-//\n-//   * Pair derive Copy to ensure that we don't inject\n-//     unwinding code into generic uses of Pair when T itself is also\n-//     Copy.\n-//\n-//     (I suspect this reflect some naivety within the rust compiler\n-//      itself; it should be checking for drop glue, i.e., a destructor\n-//      somewhere in the monomorphized types. It should not matter whether\n-//      the type is Copy.)\n #[derive(Copy, Clone)]\n pub struct Pair<T> {\n     _car: T,\n@@ -61,11 +43,9 @@ pub fn f1<T:Copy>(x: T) {\n         Pair::new(FiftyBytes::new(), FiftyBytes::new());\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn start() {\n     let _b: Pair<u8> = Pair::new(0, 0);\n     let _s: Pair<SevenBytes> = Pair::new(SevenBytes::new(), SevenBytes::new());\n     let ref _z: ZeroSized = ZeroSized;\n     f1::<SevenBytes>(SevenBytes::new());\n-    0\n }"}, {"sha": "9159038924719f288091a30166a4a362b2a7fc07", "filename": "src/test/ui/print_type_sizes/multiple_types.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,23 +1,13 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This file illustrates that when multiple structural types occur in\n // a function, every one of them is included in the output.\n \n-#![feature(start)]\n-\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n pub enum Enum {\n     Small(SevenBytes),\n     Large(FiftyBytes),\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _e: Enum;\n-    let _f: FiftyBytes;\n-    let _s: SevenBytes;\n-    0\n-}"}, {"sha": "5e620f248b65d35b1dd4243686249b7cb44aac46", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -14,7 +14,6 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n-#![feature(start)]\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -56,7 +55,7 @@ pub struct NestedNonZero {\n \n impl Default for NestedNonZero {\n     fn default() -> Self {\n-        NestedNonZero { pre: 0, val: NonZeroU32::new(1).unwrap(), post: 0 }\n+        NestedNonZero { pre: 0, val: unsafe { NonZeroU32::new_unchecked(1) }, post: 0 }\n     }\n }\n \n@@ -76,8 +75,7 @@ pub union Union2<A: Copy, B: Copy> {\n     b: B,\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _x: MyOption<NonZeroU32> = Default::default();\n     let _y: EmbeddedDiscr = Default::default();\n     let _z: MyOption<IndirectNonZero> = Default::default();\n@@ -96,6 +94,4 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     // ...even when theoretically possible.\n     let _j: MyOption<Union1<NonZeroU32>> = Default::default();\n     let _k: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n-\n-    0\n }"}, {"sha": "2ec5d9e64bfbfbad3de1496e7cdf2773002d6194", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -8,16 +8,12 @@\n // (even if multiple functions), it is only printed once in the\n // print-type-sizes output.\n \n-#![feature(start)]\n-\n pub struct SevenBytes([u8; 7]);\n \n pub fn f1() {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n-    0\n }"}, {"sha": "5ddfe4bf4dbb0a9bfaed5ac3a2a0a95547de2da9", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -13,11 +13,10 @@\n // padding and overall computed sizes can be quite different.\n \n #![allow(dead_code)]\n-#![feature(start)]\n \n #[derive(Default)]\n #[repr(packed)]\n-struct Packed1 {\n+pub struct Packed1 {\n     a: u8,\n     b: u8,\n     g: i32,\n@@ -28,7 +27,7 @@ struct Packed1 {\n \n #[derive(Default)]\n #[repr(packed(2))]\n-struct Packed2 {\n+pub struct Packed2 {\n     a: u8,\n     b: u8,\n     g: i32,\n@@ -40,7 +39,7 @@ struct Packed2 {\n #[derive(Default)]\n #[repr(packed(2))]\n #[repr(C)]\n-struct Packed2C {\n+pub struct Packed2C {\n     a: u8,\n     b: u8,\n     g: i32,\n@@ -50,20 +49,11 @@ struct Packed2C {\n }\n \n #[derive(Default)]\n-struct Padded {\n+pub struct Padded {\n     a: u8,\n     b: u8,\n     g: i32,\n     c: u8,\n     h: i16,\n     d: u8,\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _c: Packed1 = Default::default();\n-    let _d: Packed2 = Default::default();\n-    let _e: Packed2C = Default::default();\n-    let _f: Padded = Default::default();\n-    0\n-}"}, {"sha": "f41c677dc6c08ff7bd0a0b61c489b677fbd89b2c", "filename": "src/test/ui/print_type_sizes/padding.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This file illustrates how padding is handled: alignment\n@@ -9,7 +9,6 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n-#![feature(start)]\n #![allow(dead_code)]\n \n struct S {\n@@ -27,8 +26,3 @@ enum E2 {\n     A(i8, i32),\n     B(S),\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    0\n-}"}, {"sha": "0bd11ebc958433a3369b7addf8a8d2213be792d2", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -11,7 +11,7 @@\n // It avoids using u64/i64 because on some targets that is only 4-byte\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n-#![feature(start)]\n+\n #![allow(dead_code)]\n \n #[repr(align(16))]\n@@ -24,15 +24,9 @@ enum E {\n }\n \n #[derive(Default)]\n-struct S {\n+pub struct S {\n     a: i32,\n     b: i32,\n     c: A,\n     d: i8,\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _s: S = Default::default();\n-    0\n-}"}, {"sha": "6b103776a30d3c6c700a85cf3a242f4661edc8ee", "filename": "src/test/ui/print_type_sizes/repr_int_c.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,10 +1,9 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This test makes sure that the tag is not grown for `repr(C)` or `repr(u8)`\n // variants (see https://github.com/rust-lang/rust/issues/50098 for the original bug).\n \n-#![feature(start)]\n #![allow(dead_code)]\n \n #[repr(C, u8)]\n@@ -18,8 +17,3 @@ enum Repru8 {\n     A(u16),\n     B,\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    0\n-}"}, {"sha": "86fab7b500af08030a7acca69d30b776a5724a3a", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,14 +1,12 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects.\n \n #![feature(never_type)]\n-#![feature(start)]\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _x: Option<!> = None;\n     let _y: Result<u32, !> = Ok(42);\n     let _z: Result<!, !> = loop {};"}, {"sha": "5a3020520265db95a15f4857f10cfa2f0655e1ba", "filename": "src/test/ui/print_type_sizes/variants.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This file illustrates two things:\n@@ -9,18 +9,10 @@\n // 2. For an enum, the print-type-sizes output will also include the\n //    size of each variant.\n \n-#![feature(start)]\n-\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n pub enum Enum {\n     Small(SevenBytes),\n     Large(FiftyBytes),\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _e: Enum;\n-    0\n-}"}, {"sha": "09415824d5df00835f9cda3dabbd4f5b9c4bc467", "filename": "src/test/ui/print_type_sizes/zero-sized-fields.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984eab57f708e62c09b3d708033fe620130b5f39/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs?ref=984eab57f708e62c09b3d708033fe620130b5f39", "patch": "@@ -1,12 +1,10 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n \n // At one point, zero-sized fields such as those in this file were causing\n // incorrect output from `-Z print-type-sizes`.\n \n-#![feature(start)]\n-\n struct S1 {\n     x: u32,\n     y: u32,\n@@ -28,8 +26,7 @@ struct S5<TagW, TagZ> {\n     tagz: TagZ,\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _s1: S1 = S1 { x: 0, y: 0, tag: () };\n \n     let _s5: S5<(), Empty> = S5 {\n@@ -43,5 +40,4 @@ fn start(_: isize, _: *const *const u8) -> isize {\n         z: 4,\n         tagz: Empty {},\n     };\n-    0\n }"}]}