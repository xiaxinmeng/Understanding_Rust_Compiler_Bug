{"sha": "efd1438770ae371406327304cb6ad4501db256ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDE0Mzg3NzBhZTM3MTQwNjMyNzMwNGNiNmFkNDUwMWRiMjU2YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T22:22:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T22:22:55Z"}, "message": "auto merge of #7373 : thestinger/rust/iterator, r=huonw", "tree": {"sha": "9c1d80895844e59aeb5b1092c46b6e60a8de62f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1d80895844e59aeb5b1092c46b6e60a8de62f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd1438770ae371406327304cb6ad4501db256ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd1438770ae371406327304cb6ad4501db256ae", "html_url": "https://github.com/rust-lang/rust/commit/efd1438770ae371406327304cb6ad4501db256ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd1438770ae371406327304cb6ad4501db256ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4967bd0508a4d04797e0fff49517b7abbc086b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/4967bd0508a4d04797e0fff49517b7abbc086b74", "html_url": "https://github.com/rust-lang/rust/commit/4967bd0508a4d04797e0fff49517b7abbc086b74"}, {"sha": "e44e33dfa999f4e3ce0b1811bc2ccdd5907b4a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/e44e33dfa999f4e3ce0b1811bc2ccdd5907b4a42", "html_url": "https://github.com/rust-lang/rust/commit/e44e33dfa999f4e3ce0b1811bc2ccdd5907b4a42"}], "stats": {"total": 641, "additions": 259, "deletions": 382}, "files": [{"sha": "9e54622688b04b9db66cc295c8e8075f3b39d1c1", "filename": "doc/tutorial.md", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -1552,13 +1552,6 @@ fn each(v: &[int], op: &fn(v: &int)) {\n }\n ~~~~\n \n-As an aside, the reason we pass in a *pointer* to an integer rather\n-than the integer itself is that this is how the actual `each()`\n-function for vectors works. `vec::each` though is a\n-[generic](#generics) function, so must be efficient to use for all\n-types. Passing the elements by pointer avoids copying potentially\n-large objects.\n-\n As a caller, if we use a closure to provide the final operator\n argument, we can write it in a way that has a pleasant, block-like\n structure.\n@@ -1616,6 +1609,9 @@ To enable `debug!` logging, set the RUST_LOG environment variable to the name of\n \n ## For loops\n \n+> ***Note:*** The closure-based protocol used `for` loop is on the way out. The `for` loop will\n+> use iterator objects in the future instead.\n+\n The most common way to express iteration in Rust is with a `for`\n loop. Like `do`, `for` is a nice syntax for describing control flow\n with closures.  Additionally, within a `for` loop, `break`, `loop`,\n@@ -1640,7 +1636,16 @@ fn each(v: &[int], op: &fn(v: &int) -> bool) -> bool {\n And using this function to iterate over a vector:\n \n ~~~~\n-# use each = std::vec::each;\n+# fn each(v: &[int], op: &fn(v: &int) -> bool) -> bool {\n+#    let mut n = 0;\n+#    while n < v.len() {\n+#        if !op(&v[n]) {\n+#            return false;\n+#        }\n+#        n += 1;\n+#    }\n+#    return true;\n+# }\n each([2, 4, 8, 5, 16], |n| {\n     if *n % 2 != 0 {\n         println(\"found odd number!\");\n@@ -1656,7 +1661,16 @@ out of the loop, you just write `break`. To skip ahead\n to the next iteration, write `loop`.\n \n ~~~~\n-# use each = std::vec::each;\n+# fn each(v: &[int], op: &fn(v: &int) -> bool) -> bool {\n+#    let mut n = 0;\n+#    while n < v.len() {\n+#        if !op(&v[n]) {\n+#            return false;\n+#        }\n+#        n += 1;\n+#    }\n+#    return true;\n+# }\n for each([2, 4, 8, 5, 16]) |n| {\n     if *n % 2 != 0 {\n         println(\"found odd number!\");\n@@ -1671,7 +1685,16 @@ normally allowed in closures, in a block that appears as the body of a\n the enclosing function, not just the loop body.\n \n ~~~~\n-# use each = std::vec::each;\n+# fn each(v: &[int], op: &fn(v: &int) -> bool) -> bool {\n+#    let mut n = 0;\n+#    while n < v.len() {\n+#        if !op(&v[n]) {\n+#            return false;\n+#        }\n+#        n += 1;\n+#    }\n+#    return true;\n+# }\n fn contains(v: &[int], elt: int) -> bool {\n     for each(v) |x| {\n         if (*x == elt) { return true; }\n@@ -1686,7 +1709,16 @@ In these situations it can be convenient to lean on Rust's\n argument patterns to bind `x` to the actual value, not the pointer.\n \n ~~~~\n-# use each = std::vec::each;\n+# fn each(v: &[int], op: &fn(v: &int) -> bool) -> bool {\n+#    let mut n = 0;\n+#    while n < v.len() {\n+#        if !op(&v[n]) {\n+#            return false;\n+#        }\n+#        n += 1;\n+#    }\n+#    return true;\n+# }\n # fn contains(v: &[int], elt: int) -> bool {\n     for each(v) |&x| {\n         if (x == elt) { return true; }\n@@ -1841,10 +1873,9 @@ vector consisting of the result of applying `function` to each element\n of `vector`:\n \n ~~~~\n-# use std::vec;\n fn map<T, U>(vector: &[T], function: &fn(v: &T) -> U) -> ~[U] {\n     let mut accumulator = ~[];\n-    for vec::each(vector) |element| {\n+    for vector.iter().advance |element| {\n         accumulator.push(function(element));\n     }\n     return accumulator;"}, {"sha": "3e2f484ee53d4e1007129afceb381de14b66a316", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -529,7 +529,7 @@ fn compose_and_run_compiler(\n     let extra_link_args = ~[~\"-L\",\n                             aux_output_dir_name(config, testfile).to_str()];\n \n-    for vec::each(props.aux_builds) |rel_ab| {\n+    for props.aux_builds.iter().advance |rel_ab| {\n         let abs_ab = config.aux_base.push_rel(&Path(*rel_ab));\n         let aux_args =\n             make_compile_args(config, props, ~[~\"--lib\"] + extra_link_args,"}, {"sha": "c5fe07f21875b8cd2810be57d561bbbd1466fe78", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -521,6 +521,7 @@ mod tests {\n     use core::cell::Cell;\n     use core::comm;\n     use core::task;\n+    use core::uint;\n \n     #[test]\n     fn manually_share_arc() {\n@@ -790,18 +791,20 @@ mod tests {\n                 }\n                 assert_eq!(*state, 42);\n                 *state = 31337;\n+                // FIXME: #7372: hits type inference bug with iterators\n                 // send to other readers\n-                for vec::each(reader_convos) |x| {\n-                    match *x {\n+                for uint::range(0, reader_convos.len()) |i| {\n+                    match reader_convos[i] {\n                         (ref rc, _) => rc.send(()),\n                     }\n                 }\n             }\n             let read_mode = arc.downgrade(write_mode);\n             do (&read_mode).read |state| {\n+                // FIXME: #7372: hits type inference bug with iterators\n                 // complete handshake with other readers\n-                for vec::each(reader_convos) |x| {\n-                    match *x {\n+                for uint::range(0, reader_convos.len()) |i| {\n+                    match reader_convos[i] {\n                         (_, ref rp) => rp.recv(),\n                     }\n                 }"}, {"sha": "9c416550eb787be896de787f23370c7af21577fc", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -418,10 +418,11 @@ pub fn opts_str(mm: &Matches, names: &[~str]) -> ~str {\n  */\n pub fn opt_strs(mm: &Matches, nm: &str) -> ~[~str] {\n     let mut acc: ~[~str] = ~[];\n-    for vec::each(opt_vals(mm, nm)) |v| {\n+    let r = opt_vals(mm, nm);\n+    for r.iter().advance |v| {\n         match *v { Val(ref s) => acc.push(copy *s), _ => () }\n     }\n-    return acc;\n+    acc\n }\n \n /// Returns the string argument supplied to a matching option or none"}, {"sha": "15553b035f65e7dadcae1c5c464b7992c15874cb", "filename": "src/libextra/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -1123,7 +1123,7 @@ impl Eq for Json {\n                     &Object(ref d1) => {\n                         if d0.len() == d1.len() {\n                             let mut equal = true;\n-                            for d0.each |k, v0| {\n+                            for d0.iter().advance |(k, v0)| {\n                                 match d1.find(k) {\n                                     Some(v1) if v0 == v1 => { },\n                                     _ => { equal = false; break }\n@@ -1186,12 +1186,12 @@ impl Ord for Json {\n                         let mut d1_flat = ~[];\n \n                         // FIXME #4430: this is horribly inefficient...\n-                        for d0.each |k, v| {\n+                        for d0.iter().advance |(k, v)| {\n                              d0_flat.push((@copy *k, @copy *v));\n                         }\n                         d0_flat.qsort();\n \n-                        for d1.each |k, v| {\n+                        for d1.iter().advance |(k, v)| {\n                             d1_flat.push((@copy *k, @copy *v));\n                         }\n                         d1_flat.qsort();\n@@ -1326,7 +1326,7 @@ impl<A:ToJson> ToJson for ~[A] {\n impl<A:ToJson + Copy> ToJson for HashMap<~str, A> {\n     fn to_json(&self) -> Json {\n         let mut d = HashMap::new();\n-        for self.each |key, value| {\n+        for self.iter().advance |(key, value)| {\n             d.insert(copy *key, value.to_json());\n         }\n         Object(~d)"}, {"sha": "5d3d31fdec47eb623ad7c0bac2644b111f8b6b77", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -207,7 +207,7 @@ pub fn encode_form_urlencoded(m: &HashMap<~str, ~[~str]>) -> ~str {\n     let mut out = ~\"\";\n     let mut first = true;\n \n-    for m.each |key, values| {\n+    for m.iter().advance |(key, values)| {\n         let key = encode_plus(*key);\n \n         for values.iter().advance |value| {"}, {"sha": "345b217871cc51b28ddd84fa1aa9d36dfd4a51d3", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -710,7 +710,7 @@ impl<\n     fn encode(&self, e: &mut E) {\n         do e.emit_map(self.len()) |e| {\n             let mut i = 0;\n-            for self.each |key, val| {\n+            for self.iter().advance |(key, val)| {\n                 e.emit_map_elt_key(i, |e| key.encode(e));\n                 e.emit_map_elt_val(i, |e| val.encode(e));\n                 i += 1;\n@@ -744,7 +744,7 @@ impl<\n     fn encode(&self, s: &mut S) {\n         do s.emit_seq(self.len()) |s| {\n             let mut i = 0;\n-            for self.each |e| {\n+            for self.iter().advance |e| {\n                 s.emit_seq_elt(i, |s| e.encode(s));\n                 i += 1;\n             }"}, {"sha": "1d163922955d0f0baa23eddcfe7e190bf28b9f9c", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -56,38 +56,6 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs in order\n-    fn each<'a>(&'a self, it: &fn(&uint, &'a V) -> bool) -> bool {\n-        for uint::range(0, self.v.len()) |i| {\n-            match self.v[i] {\n-              Some(ref elt) => if !it(&i, elt) { return false; },\n-              None => ()\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /// Visit all keys in order\n-    fn each_key(&self, blk: &fn(key: &uint) -> bool) -> bool {\n-        self.each(|k, _| blk(k))\n-    }\n-\n-    /// Visit all values in order\n-    fn each_value<'a>(&'a self, blk: &fn(value: &'a V) -> bool) -> bool {\n-        self.each(|_, v| blk(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, it: &fn(&uint, &mut V) -> bool) -> bool {\n-        for uint::range(0, self.v.len()) |i| {\n-            match self.v[i] {\n-              Some(ref mut elt) => if !it(&i, elt) { return false; },\n-              None => ()\n-            }\n-        }\n-        return true;\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, key: &uint) -> Option<&'a V> {\n         if *key < self.v.len() {\n@@ -156,6 +124,38 @@ impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap\n     pub fn new() -> SmallIntMap<V> { SmallIntMap{v: ~[]} }\n \n+    /// Visit all key-value pairs in order\n+    pub fn each<'a>(&'a self, it: &fn(&uint, &'a V) -> bool) -> bool {\n+        for uint::range(0, self.v.len()) |i| {\n+            match self.v[i] {\n+              Some(ref elt) => if !it(&i, elt) { return false; },\n+              None => ()\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /// Visit all keys in order\n+    pub fn each_key(&self, blk: &fn(key: &uint) -> bool) -> bool {\n+        self.each(|k, _| blk(k))\n+    }\n+\n+    /// Visit all values in order\n+    pub fn each_value<'a>(&'a self, blk: &fn(value: &'a V) -> bool) -> bool {\n+        self.each(|_, v| blk(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    pub fn mutate_values(&mut self, it: &fn(&uint, &mut V) -> bool) -> bool {\n+        for uint::range(0, self.v.len()) |i| {\n+            match self.v[i] {\n+              Some(ref mut elt) => if !it(&i, elt) { return false; },\n+              None => ()\n+            }\n+        }\n+        return true;\n+    }\n+\n     /// Visit all key-value pairs in reverse order\n     pub fn each_reverse<'a>(&'a self, it: &fn(uint, &'a V) -> bool) -> bool {\n         for uint::range_rev(self.v.len(), 0) |i| {"}, {"sha": "5cb52a7b9dfb40632c125793bf76b874e4a25e2c", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -1094,7 +1094,8 @@ mod tests {\n         };\n         assert!(result.is_err());\n         // child task must have finished by the time try returns\n-        for vec::each(p.recv()) |p| { p.recv(); } // wait on all its siblings\n+        let r = p.recv();\n+        for r.iter().advance |p| { p.recv(); } // wait on all its siblings\n         do m.lock_cond |cond| {\n             let woken = cond.broadcast();\n             assert_eq!(woken, 0);"}, {"sha": "fd83fd199167403f4e0bf9976534caf17f8d31cb", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -107,26 +107,6 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs in order\n-    fn each<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n-        each(&self.root, f)\n-    }\n-\n-    /// Visit all keys in order\n-    fn each_key(&self, f: &fn(&K) -> bool) -> bool {\n-        self.each(|k, _| f(k))\n-    }\n-\n-    /// Visit all values in order\n-    fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool {\n-        self.each(|_, v| f(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool) -> bool {\n-        mutate_values(&mut self.root, f)\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, key: &K) -> Option<&'a V> {\n         let mut current: &'a Option<~TreeNode<K, V>> = &self.root;\n@@ -184,6 +164,26 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     pub fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n+    /// Visit all key-value pairs in order\n+    pub fn each<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n+        each(&self.root, f)\n+    }\n+\n+    /// Visit all keys in order\n+    pub fn each_key(&self, f: &fn(&K) -> bool) -> bool {\n+        self.each(|k, _| f(k))\n+    }\n+\n+    /// Visit all values in order\n+    pub fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool {\n+        self.each(|_, v| f(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    pub fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool) -> bool {\n+        mutate_values(&mut self.root, f)\n+    }\n+\n     /// Visit all key-value pairs in reverse order\n     pub fn each_reverse<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n         each_reverse(&self.root, f)"}, {"sha": "a014293f0630d2d5566cb11a6ac24ca7d54f834c", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -146,7 +146,7 @@ impl WorkMap {\n impl<S:Encoder> Encodable<S> for WorkMap {\n     fn encode(&self, s: &mut S) {\n         let mut d = ~[];\n-        for self.each |k, v| {\n+        for self.iter().advance |(k, v)| {\n             d.push((copy *k, copy *v))\n         }\n         sort::tim_sort(d);\n@@ -320,7 +320,7 @@ impl TPrep for Prep {\n     }\n \n     fn all_fresh(&self, cat: &str, map: &WorkMap) -> bool {\n-        for map.each |k, v| {\n+        for map.iter().advance |(k, v)| {\n             if ! self.is_fresh(cat, k.kind, k.name, *v) {\n                 return false;\n             }"}, {"sha": "b0a955fef8f7f70d88200a6249cf1b4b8d194f51", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -86,7 +86,7 @@ pub fn have_crate_data(cstore: &CStore, cnum: ast::crate_num) -> bool {\n \n pub fn iter_crate_data(cstore: &CStore,\n                        i: &fn(ast::crate_num, @crate_metadata)) {\n-    for cstore.metas.each |&k, &v| {\n+    for cstore.metas.iter().advance |(&k, &v)| {\n         i(k, v);\n     }\n }"}, {"sha": "9c28da10e40d5abcd58cd8aeeef39c8474ecc4c3", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -731,8 +731,8 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     }\n \n     let mut combined_ty_params = opt_vec::Empty;\n-    for owner_generics.ty_params.each |x| { combined_ty_params.push(copy *x) }\n-    for method_generics.ty_params.each |x| { combined_ty_params.push(copy *x) }\n+    for owner_generics.ty_params.iter().advance |x| { combined_ty_params.push(copy *x) }\n+    for method_generics.ty_params.iter().advance |x| { combined_ty_params.push(copy *x) }\n     let len = combined_ty_params.len();\n     encode_type_param_bounds(ebml_w, ecx, &combined_ty_params);\n "}, {"sha": "b0b2a16cf89392d465d262a96fdaabe436c187bf", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -240,7 +240,8 @@ fn check_fn(\n \n     // Check kinds on free variables:\n     do with_appropriate_checker(cx, fn_id) |chk| {\n-        for vec::each(*freevars::get_freevars(cx.tcx, fn_id)) |fv| {\n+        let r = freevars::get_freevars(cx.tcx, fn_id);\n+        for r.iter().advance |fv| {\n             chk(cx, *fv);\n         }\n     }"}, {"sha": "9d4064e99bdb109021a33182b8904daf08c4fbec", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -436,7 +436,7 @@ impl LanguageItemCollector {\n     }\n \n     pub fn check_completeness(&self) {\n-        for self.item_refs.each |&key, &item_ref| {\n+        for self.item_refs.iter().advance |(&key, &item_ref)| {\n             match self.items.items[item_ref] {\n                 None => {\n                     self.session.err(fmt!(\"no item found for `%s`\", key));"}, {"sha": "6da10b7c2774953784d88a2c6fd7044d4cc324ff", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -361,7 +361,7 @@ impl Context {\n     }\n \n     fn lint_to_str(&self, lint: lint) -> &'static str {\n-        for self.dict.each |k, v| {\n+        for self.dict.iter().advance |(k, v)| {\n             if v.lint == lint {\n                 return *k;\n             }\n@@ -742,7 +742,8 @@ fn check_item_ctypes(cx: &Context, it: @ast::item) {\n \n     fn check_foreign_fn(cx: &Context, decl: &ast::fn_decl) {\n         let tys = vec::map(decl.inputs, |a| a.ty );\n-        for vec::each(vec::append_one(tys, decl.output)) |ty| {\n+        let r = vec::append_one(tys, decl.output);\n+        for r.iter().advance |ty| {\n             check_ty(cx, *ty);\n         }\n     }\n@@ -1171,7 +1172,7 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n \n     // If we missed any lints added to the session, then there's a bug somewhere\n     // in the iteration code.\n-    for tcx.sess.lints.each |_, v| {\n+    for tcx.sess.lints.iter().advance |(_, v)| {\n         for v.iter().advance |t| {\n             match *t {\n                 (lint, span, ref msg) =>"}, {"sha": "7d3e895a0edd595ef16f7e37450c50fe11182558", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -948,7 +948,7 @@ pub fn determine_rp_in_crate(sess: Session,\n     debug!(\"%s\", {\n         debug!(\"Region variance results:\");\n         let region_paramd_items = cx.region_paramd_items;\n-        for region_paramd_items.each |&key, &value| {\n+        for region_paramd_items.iter().advance |(&key, &value)| {\n             debug!(\"item %? (%s) is parameterized with variance %?\",\n                    key,\n                    ast_map::node_id_to_str(ast_map, key,"}, {"sha": "a8626ca89aa898a15a089f539b4e4605ecacbf97", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -1400,7 +1400,7 @@ impl Resolver {\n                 }\n \n                 let def_id = local_def(item.id);\n-                for method_names.each |name, _| {\n+                for method_names.iter().advance |(name, _)| {\n                     if !self.method_map.contains_key(name) {\n                         self.method_map.insert(*name, HashSet::new());\n                     }\n@@ -1718,7 +1718,7 @@ impl Resolver {\n                       interned_method_names.insert(method_name);\n                   }\n               }\n-              for interned_method_names.each |name| {\n+              for interned_method_names.iter().advance |name| {\n                   if !self.method_map.contains_key(name) {\n                       self.method_map.insert(*name, HashSet::new());\n                   }\n@@ -2484,8 +2484,8 @@ impl Resolver {\n         assert_eq!(containing_module.glob_count, 0);\n \n         // Add all resolved imports from the containing module.\n-        for containing_module.import_resolutions.each\n-                |ident, target_import_resolution| {\n+        for containing_module.import_resolutions.iter().advance\n+                |(ident, target_import_resolution)| {\n \n             debug!(\"(resolving glob import) writing module resolution \\\n                     %? into `%s`\",\n@@ -2569,13 +2569,13 @@ impl Resolver {\n         };\n \n         // Add all children from the containing module.\n-        for containing_module.children.each |&ident, name_bindings| {\n+        for containing_module.children.iter().advance |(&ident, name_bindings)| {\n             merge_import_resolution(ident, *name_bindings);\n         }\n \n         // Add external module children from the containing module.\n-        for containing_module.external_module_children.each\n-                |&ident, module| {\n+        for containing_module.external_module_children.iter().advance\n+                |(&ident, module)| {\n             let name_bindings =\n                 @mut Resolver::create_name_bindings_from_module(*module);\n             merge_import_resolution(ident, name_bindings);\n@@ -3265,7 +3265,7 @@ impl Resolver {\n     pub fn add_exports_for_module(@mut self,\n                                   exports2: &mut ~[Export2],\n                                   module_: @mut Module) {\n-        for module_.children.each |ident, namebindings| {\n+        for module_.children.iter().advance |(ident, namebindings)| {\n             debug!(\"(computing exports) maybe export '%s'\",\n                    self.session.str_of(*ident));\n             self.add_exports_of_namebindings(&mut *exports2,\n@@ -3280,7 +3280,7 @@ impl Resolver {\n                                              false);\n         }\n \n-        for module_.import_resolutions.each |ident, importresolution| {\n+        for module_.import_resolutions.iter().advance |(ident, importresolution)| {\n             if importresolution.privacy != Public {\n                 debug!(\"(computing exports) not reexporting private `%s`\",\n                        self.session.str_of(*ident));\n@@ -3848,8 +3848,8 @@ impl Resolver {\n     pub fn resolve_type_parameters(@mut self,\n                                    type_parameters: &OptVec<TyParam>,\n                                    visitor: ResolveVisitor) {\n-        for type_parameters.each |type_parameter| {\n-            for type_parameter.bounds.each |bound| {\n+        for type_parameters.iter().advance |type_parameter| {\n+            for type_parameter.bounds.iter().advance |bound| {\n                 self.resolve_type_parameter_bound(bound, visitor);\n             }\n         }\n@@ -4053,7 +4053,7 @@ impl Resolver {\n         for arm.pats.iter().enumerate().advance |(i, p)| {\n             let map_i = self.binding_mode_map(*p);\n \n-            for map_0.each |&key, &binding_0| {\n+            for map_0.iter().advance |(&key, &binding_0)| {\n                 match map_i.find(&key) {\n                   None => {\n                     self.session.span_err(\n@@ -4074,7 +4074,7 @@ impl Resolver {\n                 }\n             }\n \n-            for map_i.each |&key, &binding| {\n+            for map_i.iter().advance |(&key, &binding)| {\n                 if !map_0.contains_key(&key) {\n                     self.session.span_err(\n                         binding.span,\n@@ -4195,13 +4195,13 @@ impl Resolver {\n                     }\n                 }\n \n-                for bounds.each |bound| {\n+                for bounds.iter().advance |bound| {\n                     self.resolve_type_parameter_bound(bound, visitor);\n                 }\n             }\n \n             ty_closure(c) => {\n-                for c.bounds.each |bound| {\n+                for c.bounds.iter().advance |bound| {\n                     self.resolve_type_parameter_bound(bound, visitor);\n                 }\n                 visit_ty(ty, ((), visitor));\n@@ -5369,7 +5369,7 @@ impl Resolver {\n         }\n \n         debug!(\"Import resolutions:\");\n-        for module_.import_resolutions.each |name, import_resolution| {\n+        for module_.import_resolutions.iter().advance |(name, import_resolution)| {\n             let value_repr;\n             match import_resolution.target_for_namespace(ValueNS) {\n                 None => { value_repr = ~\"\"; }"}, {"sha": "63b39b8fe763e443d54e6c6457963eeab65cf745", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -1673,7 +1673,7 @@ pub fn trans_match_inner(scope_cx: block,\n \n     let mut arm_datas = ~[];\n     let mut matches = ~[];\n-    for vec::each(arms) |arm| {\n+    for arms.iter().advance |arm| {\n         let body = scope_block(bcx, arm.body.info(), \"case_body\");\n         let bindings_map = create_bindings_map(bcx, arm.pats[0]);\n         let arm_data = @ArmData {bodycx: body,"}, {"sha": "5bf0e596ca05185920ed59fa4a2777da63019056", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -2945,7 +2945,7 @@ pub fn trans_crate(sess: session::Session,\n     }\n \n     if ccx.sess.count_llvm_insns() {\n-        for ccx.stats.llvm_insns.each |&k, &v| {\n+        for ccx.stats.llvm_insns.iter().advance |(&k, &v)| {\n             io::println(fmt!(\"%-7u %s\", v, k));\n         }\n     }"}, {"sha": "cb475550638433690a95e0674dc6ce04bbd618fd", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -704,11 +704,11 @@ pub fn trans_args(cx: block,\n     // now that all arguments have been successfully built, we can revoke any\n     // temporary cleanups, as they are only needed if argument construction\n     // should fail (for example, cleanup of copy mode args).\n-    for vec::each(temp_cleanups) |c| {\n+    for temp_cleanups.iter().advance |c| {\n         revoke_clean(bcx, *c)\n     }\n \n-    return bcx;\n+    bcx\n }\n \n pub enum AutorefArg {"}, {"sha": "8cd776c99d697eb9c3f549d9378787b93aa446a4", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -213,7 +213,8 @@ pub fn type_needs_inner(cx: Context,\n               ty::ty_enum(did, ref substs) => {\n                 if list::find(enums_seen, |id| *id == did).is_none() {\n                     let seen = @Cons(did, enums_seen);\n-                    for vec::each(*ty::enum_variants(cx.ccx.tcx, did)) |v| {\n+                    let r = ty::enum_variants(cx.ccx.tcx, did);\n+                    for r.iter().advance |v| {\n                         for v.args.iter().advance |aty| {\n                             let t = ty::subst(cx.ccx.tcx, &(*substs), *aty);\n                             type_needs_inner(cx, use_, t, seen);"}, {"sha": "5e6574850f1b8ca1aa94617b37ca6d8a73887e39", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -752,7 +752,7 @@ fn conv_builtin_bounds(tcx: ty::ctxt,\n     //! legal.\n \n     let mut builtin_bounds = ty::EmptyBuiltinBounds();\n-    for ast_bounds.each |ast_bound| {\n+    for ast_bounds.iter().advance |ast_bound| {\n         match *ast_bound {\n             ast::TraitTyParamBound(b) => {\n                 match lookup_def_tcx(tcx, b.path.span, b.ref_id) {"}, {"sha": "7812a0ed0ebacaf0c9a1e6257815e219db22d9bb", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -775,7 +775,7 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n                                  span: span,\n                                  generics: &ast::Generics,\n                                  thing: &'static str) {\n-    for generics.ty_params.each |ty_param| {\n+    for generics.ty_params.iter().advance |ty_param| {\n         if ty_param.bounds.len() > 0 {\n             ccx.tcx.sess.span_err(\n                 span,\n@@ -1172,7 +1172,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n             builtin_bounds: ty::EmptyBuiltinBounds(),\n             trait_bounds: ~[]\n         };\n-        for ast_bounds.each |ast_bound| {\n+        for ast_bounds.iter().advance |ast_bound| {\n             match *ast_bound {\n                 TraitTyParamBound(b) => {\n                     let ty = ty::mk_param(ccx.tcx, param_ty.idx, param_ty.def_id);"}, {"sha": "0aad161a6788faee3bb5e145dfe8e2b6922b1e64", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -1285,7 +1285,7 @@ impl RegionVarBindings {\n \n         // It would be nice to write this using map():\n         let mut edges = vec::with_capacity(num_edges);\n-        for self.constraints.each |constraint, span| {\n+        for self.constraints.iter().advance |(constraint, span)| {\n             edges.push(GraphEdge {\n                 next_edge: [uint::max_value, uint::max_value],\n                 constraint: *constraint,"}, {"sha": "dc9fc264f85dc9a1466ba3f341d992468a3d9f06", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -57,7 +57,7 @@ impl RegionParamNames {\n     }\n \n     fn has_ident(&self, ident: ast::ident) -> bool {\n-        for self.each |region_param_name| {\n+        for self.iter().advance |region_param_name| {\n             if *region_param_name == ident {\n                 return true;\n             }"}, {"sha": "ca49d143d48097b9242fce255ee1f8de23909304", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -166,7 +166,7 @@ Available lint options:\n                      padded(max_key, \"name\"), \"default\", \"meaning\"));\n     io::println(fmt!(\"    %s  %7.7s  %s\\n\",\n                      padded(max_key, \"----\"), \"-------\", \"-------\"));\n-    for lint_dict.each |k, v| {\n+    for lint_dict.iter().advance |(k, v)| {\n         let k = k.replace(\"_\", \"-\");\n         io::println(fmt!(\"    %s  %7.7s  %s\",\n                          padded(max_key, k),"}, {"sha": "f17777559deb56b5a23f580a21f0ca9803e9b712", "filename": "src/librusti/program.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -96,7 +96,7 @@ impl Program {\n \n         code.push_str(\"fn main() {\\n\");\n         // It's easy to initialize things if we don't run things...\n-        for self.local_vars.each |name, var| {\n+        for self.local_vars.iter().advance |(name, var)| {\n             let mt = var.mt();\n             code.push_str(fmt!(\"let%s %s: %s = fail!();\\n\", mt, *name, var.ty));\n             var.alter(*name, &mut code);\n@@ -149,7 +149,7 @@ impl Program {\n \n         // Using this __tls_map handle, deserialize each variable binding that\n         // we know about\n-        for self.local_vars.each |name, var| {\n+        for self.local_vars.iter().advance |(name, var)| {\n             let mt = var.mt();\n             code.push_str(fmt!(\"let%s %s: %s = {\n                 let data = __tls_map.get_copy(&~\\\"%s\\\");\n@@ -175,7 +175,7 @@ impl Program {\n \n         // After the input code is run, we can re-serialize everything back out\n         // into tls map (to be read later on by this task)\n-        for self.local_vars.each |name, var| {\n+        for self.local_vars.iter().advance |(name, var)| {\n             code.push_str(fmt!(\"{\n                 let local: %s = %s;\n                 let bytes = do ::std::io::with_bytes_writer |io| {\n@@ -237,7 +237,7 @@ impl Program {\n     /// program starts\n     pub fn set_cache(&self) {\n         let map = @mut HashMap::new();\n-        for self.local_vars.each |name, value| {\n+        for self.local_vars.iter().advance |(name, value)| {\n             map.insert(copy *name, @copy value.data);\n         }\n         unsafe {"}, {"sha": "d6f4c26715a4f6e18c656ab322d6c596c57e7d24", "filename": "src/libstd/container.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcontainer.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -34,18 +34,6 @@ pub trait Map<K, V>: Mutable {\n     /// Return true if the map contains a value for the specified key\n     fn contains_key(&self, key: &K) -> bool;\n \n-    /// Visits all keys and values\n-    fn each<'a>(&'a self, f: &fn(&K, &'a V) -> bool) -> bool;\n-\n-    /// Visit all keys\n-    fn each_key(&self, f: &fn(&K) -> bool) -> bool;\n-\n-    /// Visit all values\n-    fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool;\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool) -> bool;\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n "}, {"sha": "bfa0f2fa124d222173bf569639dfa893f355daf5", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -307,34 +307,6 @@ impl<K:Hash + Eq,V> Map<K, V> for HashMap<K, V> {\n         }\n     }\n \n-    /// Visit all key-value pairs\n-    fn each<'a>(&'a self, blk: &fn(&K, &'a V) -> bool) -> bool {\n-        self.iter().advance(|(k, v)| blk(k, v))\n-    }\n-\n-    /// Visit all keys\n-    fn each_key(&self, blk: &fn(k: &K) -> bool) -> bool {\n-        self.iter().advance(|(k, _)| blk(k))\n-    }\n-\n-    /// Visit all values\n-    fn each_value<'a>(&'a self, blk: &fn(v: &'a V) -> bool) -> bool {\n-        self.iter().advance(|(_, v)| blk(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, blk: &fn(&K, &mut V) -> bool) -> bool {\n-        for uint::range(0, self.buckets.len()) |i| {\n-            match self.buckets[i] {\n-              Some(Bucket{key: ref key, value: ref mut value, _}) => {\n-                if !blk(key, value) { return false; }\n-              }\n-              None => ()\n-            }\n-        }\n-        return true;\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, k: &K) -> Option<&'a V> {\n         match self.bucket_for_key(k) {\n@@ -516,6 +488,29 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n         }\n     }\n \n+    /// Visit all keys\n+    pub fn each_key(&self, blk: &fn(k: &K) -> bool) -> bool {\n+        self.iter().advance(|(k, _)| blk(k))\n+    }\n+\n+    /// Visit all values\n+    pub fn each_value<'a>(&'a self, blk: &fn(v: &'a V) -> bool) -> bool {\n+        self.iter().advance(|(_, v)| blk(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    pub fn mutate_values(&mut self, blk: &fn(&K, &mut V) -> bool) -> bool {\n+        for uint::range(0, self.buckets.len()) |i| {\n+            match self.buckets[i] {\n+              Some(Bucket{key: ref key, value: ref mut value, _}) => {\n+                if !blk(key, value) { return false; }\n+              }\n+              None => ()\n+            }\n+        }\n+        return true;\n+    }\n+\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// Iterator element type is (&'a K, &'a V).\n     pub fn iter<'a>(&'a self) -> HashMapIterator<'a, K, V> {\n@@ -718,12 +713,6 @@ impl<T:Hash + Eq> HashSet<T> {\n       self.map.contains_key_equiv(value)\n     }\n \n-    /// Visit all elements in arbitrary order\n-    /// FIXME: #6978: Remove when all callers are converted\n-    pub fn each(&self, f: &fn(&T) -> bool) -> bool {\n-        self.iter().advance(f)\n-    }\n-\n     /// An iterator visiting all elements in arbitrary order.\n     /// Iterator element type is &'a T.\n     pub fn iter<'a>(&'a self) -> HashSetIterator<'a, T> {"}, {"sha": "04c0dd79deda98767ef1c9c20ad976b90077ac9f", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -111,7 +111,7 @@ fn taskset_remove(tasks: &mut TaskSet, task: *rust_task) {\n     assert!(was_present);\n }\n pub fn taskset_each(tasks: &TaskSet, blk: &fn(v: *rust_task) -> bool) -> bool {\n-    tasks.each(|k| blk(*k))\n+    tasks.iter().advance(|k| blk(*k))\n }\n \n // One of these per group of linked-failure tasks."}, {"sha": "8f70c75439a016c121c31f41b6c9bacbb9a4b6e3", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -58,30 +58,6 @@ impl<T> Map<uint, T> for TrieMap<T> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs in order\n-    #[inline]\n-    fn each<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n-        self.root.each(f)\n-    }\n-\n-    /// Visit all keys in order\n-    #[inline]\n-    fn each_key(&self, f: &fn(&uint) -> bool) -> bool {\n-        self.each(|k, _| f(k))\n-    }\n-\n-    /// Visit all values in order\n-    #[inline]\n-    fn each_value<'a>(&'a self, f: &fn(&'a T) -> bool) -> bool {\n-        self.each(|_, v| f(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    #[inline]\n-    fn mutate_values(&mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n-        self.root.mutate_values(f)\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     #[inline]\n     fn find<'a>(&'a self, key: &uint) -> Option<&'a T> {\n@@ -158,6 +134,30 @@ impl<T> TrieMap<T> {\n         self.root.each_reverse(f)\n     }\n \n+    /// Visit all key-value pairs in order\n+    #[inline]\n+    pub fn each<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n+        self.root.each(f)\n+    }\n+\n+    /// Visit all keys in order\n+    #[inline]\n+    pub fn each_key(&self, f: &fn(&uint) -> bool) -> bool {\n+        self.each(|k, _| f(k))\n+    }\n+\n+    /// Visit all values in order\n+    #[inline]\n+    pub fn each_value<'a>(&'a self, f: &fn(&'a T) -> bool) -> bool {\n+        self.each(|_, v| f(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    #[inline]\n+    pub fn mutate_values(&mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n+        self.root.mutate_values(f)\n+    }\n+\n     /// Visit all keys in reverse order\n     #[inline]\n     pub fn each_key_reverse(&self, f: &fn(&uint) -> bool) -> bool {"}, {"sha": "2e18a588fae313b5f798c8e7bc0540abc789e0d2", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 7, "deletions": 115, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -444,7 +444,7 @@ pub fn partitioned<T:Copy>(v: &[T], f: &fn(&T) -> bool) -> (~[T], ~[T]) {\n     let mut lefts  = ~[];\n     let mut rights = ~[];\n \n-    for each(v) |elt| {\n+    for v.iter().advance |elt| {\n         if f(elt) {\n             lefts.push(copy *elt);\n         } else {\n@@ -850,7 +850,7 @@ pub fn grow_set<T:Copy>(v: &mut ~[T], index: uint, initval: &T, val: T) {\n /// Apply a function to each element of a vector and return the results\n pub fn map<T, U>(v: &[T], f: &fn(t: &T) -> U) -> ~[U] {\n     let mut result = with_capacity(v.len());\n-    for each(v) |elem| {\n+    for v.iter().advance |elem| {\n         result.push(f(elem));\n     }\n     result\n@@ -886,7 +886,7 @@ pub fn mapi<T, U>(v: &[T], f: &fn(uint, t: &T) -> U) -> ~[U] {\n  */\n pub fn flat_map<T, U>(v: &[T], f: &fn(t: &T) -> ~[U]) -> ~[U] {\n     let mut result = ~[];\n-    for each(v) |elem| { result.push_all_move(f(elem)); }\n+    for v.iter().advance |elem| { result.push_all_move(f(elem)); }\n     result\n }\n \n@@ -939,7 +939,7 @@ pub fn filter_mapped<T, U: Copy>(\n      */\n \n     let mut result = ~[];\n-    for each(v) |elem| {\n+    for v.iter().advance |elem| {\n         match f(elem) {\n           None => {/* no-op */ }\n           Some(result_elem) => { result.push(result_elem); }\n@@ -974,7 +974,7 @@ pub fn filter<T>(v: ~[T], f: &fn(t: &T) -> bool) -> ~[T] {\n  */\n pub fn filtered<T:Copy>(v: &[T], f: &fn(t: &T) -> bool) -> ~[T] {\n     let mut result = ~[];\n-    for each(v) |elem| {\n+    for v.iter().advance |elem| {\n         if f(elem) { result.push(copy *elem); }\n     }\n     result\n@@ -1058,7 +1058,7 @@ impl<'self, T:Copy> VectorVector<T> for &'self [&'self [T]] {\n \n /// Return true if a vector contains an element with the given value\n pub fn contains<T:Eq>(v: &[T], x: &T) -> bool {\n-    for each(v) |elt| { if *x == *elt { return true; } }\n+    for v.iter().advance |elt| { if *x == *elt { return true; } }\n     false\n }\n \n@@ -1209,7 +1209,7 @@ pub fn bsearch_elem<T:TotalOrd>(v: &[T], x: &T) -> Option<uint> {\n  */\n pub fn unzip_slice<T:Copy,U:Copy>(v: &[(T, U)]) -> (~[T], ~[U]) {\n     let mut (ts, us) = (~[], ~[]);\n-    for each(v) |p| {\n+    for v.iter().advance |p| {\n         let (t, u) = copy *p;\n         ts.push(t);\n         us.push(u);\n@@ -1347,69 +1347,6 @@ pub fn reversed<T:Copy>(v: &const [T]) -> ~[T] {\n     rs\n }\n \n-/**\n- * Iterates over a vector, yielding each element to a closure.\n- *\n- * # Arguments\n- *\n- * * `v` - A vector, to be iterated over\n- * * `f` - A closure to do the iterating. Within this closure, return true to\n- * * continue iterating, false to break.\n- *\n- * # Examples\n- *\n- * ~~~ {.rust}\n- * [1,2,3].each(|&i| {\n- *     io::println(int::str(i));\n- *     true\n- * });\n- * ~~~\n- *\n- * ~~~ {.rust}\n- * [1,2,3,4,5].each(|&i| {\n- *     if i < 4 {\n- *         io::println(int::str(i));\n- *         true\n- *     }\n- *     else {\n- *         false\n- *     }\n- * });\n- * ~~~\n- *\n- * You probably will want to use each with a `for`/`do` expression, depending\n- * on your iteration needs:\n- *\n- * ~~~ {.rust}\n- * for [1,2,3].each |&i| {\n- *     io::println(int::str(i));\n- * }\n- * ~~~\n- */\n-#[inline]\n-pub fn each<'r,T>(v: &'r [T], f: &fn(&'r T) -> bool) -> bool {\n-    //            ^^^^\n-    // NB---this CANNOT be &const [T]!  The reason\n-    // is that you are passing it to `f()` using\n-    // an immutable.\n-\n-    let mut broke = false;\n-    do as_imm_buf(v) |p, n| {\n-        let mut n = n;\n-        let mut p = p;\n-        while n > 0u {\n-            unsafe {\n-                let q = cast::copy_lifetime_vec(v, &*p);\n-                if !f(q) { break; }\n-                p = ptr::offset(p, 1u);\n-            }\n-            n -= 1u;\n-        }\n-        broke = n > 0;\n-    }\n-    return !broke;\n-}\n-\n /**\n  * Iterate over all permutations of vector `v`.\n  *\n@@ -3069,36 +3006,6 @@ mod tests {\n         assert_eq!(v, ~[1, 3, 5]);\n     }\n \n-    #[test]\n-    fn test_each_empty() {\n-        for each::<int>([]) |_v| {\n-            fail!(); // should never be executed\n-        }\n-    }\n-\n-    #[test]\n-    fn test_each_nonempty() {\n-        let mut i = 0;\n-        for each([1, 2, 3]) |v| {\n-            i += *v;\n-        }\n-        assert_eq!(i, 6);\n-    }\n-\n-    #[test]\n-    fn test_each_ret_len0() {\n-        let a0 : [int, .. 0] = [];\n-        assert_eq!(each(a0, |_p| fail!()), true);\n-    }\n-\n-    #[test]\n-    fn test_each_ret_len1() {\n-        let a1 = [17];\n-        assert_eq!(each(a1, |_p| true), true);\n-        assert_eq!(each(a1, |_p| false), false);\n-    }\n-\n-\n     #[test]\n     fn test_each_permutation() {\n         let mut results: ~[~[int]];\n@@ -3854,21 +3761,6 @@ mod tests {\n         };\n     }\n \n-    #[test]\n-    #[ignore(windows)]\n-    #[should_fail]\n-    fn test_each_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        let mut i = 0;\n-        do each(v) |_elt| {\n-            if i == 2 {\n-                fail!()\n-            }\n-            i += 0;\n-            false\n-        };\n-    }\n-\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]"}, {"sha": "a233c330b64d5cc8036df7a0d6e2c5a9fdb72cae", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -394,10 +394,10 @@ impl id_range {\n \n pub fn id_visitor<T: Copy>(vfn: @fn(node_id, T)) -> visit::vt<T> {\n     let visit_generics: @fn(&Generics, T) = |generics, t| {\n-        for generics.ty_params.each |p| {\n+        for generics.ty_params.iter().advance |p| {\n             vfn(p.id, copy t);\n         }\n-        for generics.lifetimes.each |p| {\n+        for generics.lifetimes.iter().advance |p| {\n             vfn(p.id, copy t);\n         }\n     };"}, {"sha": "83e446fa4c688f4befc53a1081f3f97bdec7b16d", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -324,11 +324,11 @@ impl<'self> TraitDef<'self> {\n \n         let mut trait_generics = self.generics.to_generics(cx, span, type_ident, generics);\n         // Copy the lifetimes\n-        for generics.lifetimes.each |l| {\n+        for generics.lifetimes.iter().advance |l| {\n             trait_generics.lifetimes.push(copy *l)\n         };\n         // Create the type parameters.\n-        for generics.ty_params.each |ty_param| {\n+        for generics.ty_params.iter().advance |ty_param| {\n             // I don't think this can be moved out of the loop, since\n             // a TyParamBound requires an ast id\n             let mut bounds = opt_vec::from("}, {"sha": "da5455d433279cf6ff83693b1b382b11da336be7", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -374,7 +374,7 @@ impl gen_init for protocol {\n     fn buffer_ty_path(&self, cx: @ExtCtxt) -> @ast::Ty {\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n         for (copy self.states).iter().advance |s| {\n-            for s.generics.ty_params.each |tp| {\n+            for s.generics.ty_params.iter().advance |tp| {\n                 match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n                   None => params.push(*tp),\n                   _ => ()\n@@ -392,7 +392,7 @@ impl gen_init for protocol {\n         let ext_cx = cx;\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n         let fields = do (copy self.states).iter().transform |s| {\n-            for s.generics.ty_params.each |tp| {\n+            for s.generics.ty_params.iter().advance |tp| {\n                 match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n                   None => params.push(*tp),\n                   _ => ()"}, {"sha": "22b1d040d42e06652e4fe86b1086079d23c501d0", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -38,13 +38,6 @@ pub fn from<T>(t: ~[T]) -> OptVec<T> {\n }\n \n impl<T> OptVec<T> {\n-    fn each(&self, blk: &fn(v: &T) -> bool) -> bool {\n-        match *self {\n-            Empty => true,\n-            Vec(ref v) => v.iter().advance(blk)\n-        }\n-    }\n-\n     fn push(&mut self, t: T) {\n         match *self {\n             Vec(ref mut v) => {"}, {"sha": "d7b5e57a57f0d4001dceeb3023d551b151c86db3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -1743,7 +1743,7 @@ pub fn print_bounds(s: @ps, bounds: @OptVec<ast::TyParamBound>) {\n     if !bounds.is_empty() {\n         word(s.s, \":\");\n         let mut first = true;\n-        for bounds.each |bound| {\n+        for bounds.iter().advance |bound| {\n             nbsp(s);\n             if first {\n                 first = false;"}, {"sha": "5e409be3e6cce72c71a3709dfa0a85e82dab7c9d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -334,7 +334,7 @@ pub fn visit_foreign_item<E: Copy>(ni: @foreign_item, (e, v): (E, vt<E>)) {\n \n pub fn visit_ty_param_bounds<E: Copy>(bounds: &OptVec<TyParamBound>,\n                                       (e, v): (E, vt<E>)) {\n-    for bounds.each |bound| {\n+    for bounds.iter().advance |bound| {\n         match *bound {\n             TraitTyParamBound(ty) => visit_trait_ref(ty, (copy e, v)),\n             RegionTyParamBound => {}\n@@ -343,7 +343,7 @@ pub fn visit_ty_param_bounds<E: Copy>(bounds: &OptVec<TyParamBound>,\n }\n \n pub fn visit_generics<E: Copy>(generics: &Generics, (e, v): (E, vt<E>)) {\n-    for generics.ty_params.each |tp| {\n+    for generics.ty_params.iter().advance |tp| {\n         visit_ty_param_bounds(tp.bounds, (copy e, v));\n     }\n }"}, {"sha": "d21888f12ec671c7c041ff60046acd7b39cf0c86", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -86,7 +86,7 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n         HashSet::new()\n     };\n \n-    for vec::each(edges) |e| {\n+    for edges.iter().advance |e| {\n         match *e {\n             (i, j) => {\n                 graph[i].insert(j);\n@@ -441,7 +441,7 @@ fn main() {\n     let stop = time::precise_time_s();\n \n     let mut total_edges = 0;\n-    vec::each(graph, |edges| { total_edges += edges.len(); true });\n+    for graph.iter().advance |edges| { total_edges += edges.len(); }\n \n     io::stdout().write_line(fmt!(\"Generated graph with %? edges in %? seconds.\",\n                                  total_edges / 2,"}, {"sha": "102f7f17065926012ce773a7d94c1bf3d46b0587", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -83,7 +83,7 @@ fn run(args: &[~str]) {\n         server(&from_parent, &to_parent);\n     }\n \n-    for vec::each(worker_results) |r| {\n+    for worker_results.iter().advance |r| {\n         r.recv();\n     }\n "}, {"sha": "b8d91bb93e2e308b0d63e1d1a3ffa0b3d8c88973", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -79,7 +79,7 @@ fn run(args: &[~str]) {\n         server(&from_parent, &to_parent);\n     }\n \n-    for vec::each(worker_results) |r| {\n+    for worker_results.iter().advance |r| {\n         r.recv();\n     }\n "}, {"sha": "96c7e4e9b375bb5656fb31fcd06328d0d3d6839a", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -188,15 +188,15 @@ fn rendezvous(nn: uint, set: ~[color]) {\n \n     // save each creature's meeting stats\n     let mut report = ~[];\n-    for vec::each(to_creature) |_to_one| {\n+    for to_creature.iter().advance |_to_one| {\n         report.push(from_creatures_log.recv());\n     }\n \n     // print each color in the set\n     io::println(show_color_list(set));\n \n     // print each creature's stats\n-    for vec::each(report) |rep| {\n+    for report.iter().advance |rep| {\n         io::println(*rep);\n     }\n "}, {"sha": "20042aa0e918aa0c827d98a7e070e954aa2a2697", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -56,7 +56,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n    let mut pairs = ~[];\n \n    // map -> [(k,%)]\n-   for mm.each |&key, &val| {\n+   for mm.iter().advance |(&key, &val)| {\n       pairs.push((key, pct(val, total)));\n    }\n "}, {"sha": "1aa05a9477de9a43dc85d09de7d499bbd5a7173a", "filename": "src/test/compile-fail/block-must-not-have-result-for.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n-\n fn main() {\n-    for vec::each(~[0]) |_i| {  //~ ERROR A for-loop body must return (), but\n+    for 2.times {  //~ ERROR A for-loop body must return (), but\n         true\n     }\n }"}, {"sha": "189a0ef9d700b341a1d530bff06188d09a8bb7b8", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n \n impl Foo {\n     pub fn foo(&mut self, fun: &fn(&int)) {\n-        for self.n.each |f| {\n+        for self.n.iter().advance |f| {\n             fun(f);\n         }\n     }"}, {"sha": "5559ba344ed17a44e61bc775f65e77413276e033", "filename": "src/test/compile-fail/issue-2151.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -8,10 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n-\n fn main() {\n-    for vec::each(fail!()) |i| {\n-        let _ = i * 2; //~ ERROR the type of this value must be known\n-   };\n+    let x = fail!();\n+    x.clone(); //~ ERROR the type of this value must be known in this context\n }"}, {"sha": "fbb6d03b220029d97947fbac672cb5bab04c429a", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -12,7 +12,7 @@ use std::vec;\n \n fn main() {\n     let a: ~[int] = ~[];\n-    vec::each(a, |_| -> bool {\n+    a.iter().advance(|_| -> bool {\n         //~^ ERROR mismatched types\n     });\n }"}, {"sha": "b65b18e1ab3af95b9009c9921c9adb97d23364fa", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -12,21 +12,19 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n-use std::vec;\n-\n trait iterable<A> {\n     fn iterate(&self, blk: &fn(x: &A) -> bool) -> bool;\n }\n \n impl<'self,A> iterable<A> for &'self [A] {\n     fn iterate(&self, f: &fn(x: &A) -> bool) -> bool {\n-        vec::each(*self, f)\n+        self.iter().advance(f)\n     }\n }\n \n impl<A> iterable<A> for ~[A] {\n     fn iterate(&self, f: &fn(x: &A) -> bool) -> bool {\n-        vec::each(*self, f)\n+        self.iter().advance(f)\n     }\n }\n "}, {"sha": "185a5a6407c7d70b9b287710b9ac02c64568603c", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n-\n pub fn main() {\n     let mut sum = 0;\n-    for vec::each(~[1, 2, 3, 4, 5]) |x| {\n+    let xs = ~[1, 2, 3, 4, 5];\n+    for xs.iter().advance |x| {\n         sum += *x;\n     }\n     assert_eq!(sum, 15);"}, {"sha": "ff5d0e9f05c657d341fdfa964689d517d77016c9", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     let v = ~[-1f, 0f, 1f, 2f, 3f];\n \n     // Statement form does not require parentheses:\n-    for vec::each(v) |i| {\n+    for v.iter().advance |i| {\n         info!(\"%?\", *i);\n     }\n "}, {"sha": "8f74e6cdc299fa3ce0feb496042026dba85ad0dc", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n-\n fn want_slice(v: &[int]) -> int {\n     let mut sum = 0;\n-    for vec::each(v) |i| { sum += *i; }\n-    return sum;\n+    for v.iter().advance |i| { sum += *i; }\n+    sum\n }\n \n fn has_mut_vec(v: ~[int]) -> int {"}, {"sha": "85c6f90a742bef6362598216db848ce5bb1192aa", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -16,7 +16,8 @@ pub fn main() {\n     assert_eq!(i, 10);\n     loop { i += 1; if i == 20 { break; } }\n     assert_eq!(i, 20);\n-    for vec::each(~[1, 2, 3, 4, 5, 6]) |x| {\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    for xs.iter().advance |x| {\n         if *x == 3 { break; } assert!((*x <= 3));\n     }\n     i = 0;\n@@ -26,7 +27,8 @@ pub fn main() {\n         i += 1; if i % 2 == 0 { loop; } assert!((i % 2 != 0));\n         if i >= 10 { break; }\n     }\n-    for vec::each(~[1, 2, 3, 4, 5, 6]) |x| {\n+    let ys = ~[1, 2, 3, 4, 5, 6];\n+    for ys.iter().advance |x| {\n         if *x % 2 == 0 { loop; }\n         assert!((*x % 2 != 0));\n     }"}, {"sha": "2805fec6fce2cda2a6afe8cec5bce4bed8c37e5c", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -61,29 +61,8 @@ impl<T> Mutable for cat<T> {\n }\n \n impl<T> Map<int, T> for cat<T> {\n-    fn each<'a>(&'a self, f: &fn(&int, &'a T) -> bool) -> bool {\n-        let mut n = int::abs(self.meows);\n-        while n > 0 {\n-            if !f(&n, &self.name) { return false; }\n-            n -= 1;\n-        }\n-        return true;\n-    }\n-\n     fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-    fn each_key(&self, f: &fn(v: &int) -> bool) -> bool {\n-        self.each(|k, _| f(k))\n-    }\n-\n-    fn each_value<'a>(&'a self, f: &fn(v: &'a T) -> bool) -> bool {\n-        self.each(|_, v| f(v))\n-    }\n-\n-    fn mutate_values(&mut self, _f: &fn(&int, &mut T) -> bool) -> bool {\n-        fail!(\"nope\")\n-    }\n-\n     fn insert(&mut self, k: int, _: T) -> bool {\n         self.meows += k;\n         true"}, {"sha": "45302363c380ce5fc5b73c03738e7b1847fb6b08", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-fast\n+// xfail-test\n+// FIXME: #7385: hits a codegen bug on OS X x86_64\n \n /*!\n  * Try to double-check that static fns have the right size (with or\n@@ -23,6 +24,6 @@ struct S<'self>(&'self fn());\n static closures: &'static [S<'static>] = &[S(f), S(f)];\n \n pub fn main() {\n-    for std::vec::each(bare_fns) |&bare_fn| { bare_fn() }\n-    for std::vec::each(closures) |&closure| { (*closure)() }\n+    for bare_fns.iter().advance |&bare_fn| { bare_fn() }\n+    for closures.iter().advance |&closure| { (*closure)() }\n }"}, {"sha": "dd1cda22e653880682b02ed92250e1257eb5563e", "filename": "src/test/run-pass/for-destruct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-destruct.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test: #3511: does not currently compile, due to rvalue issues\n+\n use std::vec;\n \n struct Pair { x: int, y: int }\n-\n pub fn main() {\n     for vec::each(~[Pair {x: 10, y: 20}, Pair {x: 30, y: 0}]) |elt| {\n         assert_eq!(elt.x + elt.y, 30);"}, {"sha": "b62475ded54fe1bb69d66ae667797ac2300921e0", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -18,7 +18,7 @@ trait sum {\n impl<'self> sum for &'self [int] {\n     fn sum(self) -> int {\n         let mut sum = 0;\n-        for vec::each(self) |e| { sum += *e; }\n+        for self.iter().advance |e| { sum += *e; }\n         return sum;\n     }\n }"}, {"sha": "dc6bdbf5c1a5c6895cfa4d67e77607437bdb46c9", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd1438770ae371406327304cb6ad4501db256ae/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=efd1438770ae371406327304cb6ad4501db256ae", "patch": "@@ -31,7 +31,10 @@ trait map<T> {\n impl<T> map<T> for ~[T] {\n     fn map<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n-        for std::vec::each(*self) |x| { r += ~[f(x)]; }\n+        // FIXME: #7355 generates bad code with Iterator\n+        for std::uint::range(0, self.len()) |i| {\n+            r += ~[f(&self[i])];\n+        }\n         r\n     }\n }"}]}