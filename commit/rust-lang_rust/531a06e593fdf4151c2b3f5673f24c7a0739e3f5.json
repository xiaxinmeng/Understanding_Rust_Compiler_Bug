{"sha": "531a06e593fdf4151c2b3f5673f24c7a0739e3f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMWEwNmU1OTNmZGY0MTUxYzJiM2Y1NjczZjI0YzdhMDczOWUzZjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-13T13:35:11Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T06:19:07Z"}, "message": "Move ATTRIBUTE_WHITELIST and CRATE_ATTRS to KNOWN_ATTRIBUTES in syntax::feature_gate", "tree": {"sha": "5f9174018478a2ee613a7831b70c3bcb4284cb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f9174018478a2ee613a7831b70c3bcb4284cb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/531a06e593fdf4151c2b3f5673f24c7a0739e3f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/531a06e593fdf4151c2b3f5673f24c7a0739e3f5", "html_url": "https://github.com/rust-lang/rust/commit/531a06e593fdf4151c2b3f5673f24c7a0739e3f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/531a06e593fdf4151c2b3f5673f24c7a0739e3f5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5db290bf6df986a6acd5ce993f278c18e55ca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5db290bf6df986a6acd5ce993f278c18e55ca37", "html_url": "https://github.com/rust-lang/rust/commit/c5db290bf6df986a6acd5ce993f278c18e55ca37"}], "stats": {"total": 128, "additions": 73, "deletions": 55}, "files": [{"sha": "b17d35abcf67c4cef973e3f4487039b6f2b6e0d8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/531a06e593fdf4151c2b3f5673f24c7a0739e3f5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a06e593fdf4151c2b3f5673f24c7a0739e3f5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=531a06e593fdf4151c2b3f5673f24c7a0739e3f5", "patch": "@@ -47,6 +47,7 @@ use syntax::{abi, ast, ast_map};\n use syntax::ast_util::is_shift_binop;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n+use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::parse::token;\n use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ast_util;\n@@ -640,67 +641,15 @@ impl LintPass for UnusedAttributes {\n     }\n \n     fn check_attribute(&mut self, cx: &Context, attr: &ast::Attribute) {\n-        static ATTRIBUTE_WHITELIST: &'static [&'static str] = &[\n-            // FIXME: #14408 whitelist docs since rustdoc looks at them\n-            \"doc\",\n-\n-            // FIXME: #14406 these are processed in trans, which happens after the\n-            // lint pass\n-            \"cold\",\n-            \"export_name\",\n-            \"inline\",\n-            \"link\",\n-            \"link_name\",\n-            \"link_section\",\n-            \"linkage\",\n-            \"no_builtins\",\n-            \"no_mangle\",\n-            \"no_split_stack\",\n-            \"no_stack_check\",\n-            \"packed\",\n-            \"static_assert\",\n-            \"thread_local\",\n-            \"no_debug\",\n-            \"omit_gdb_pretty_printer_section\",\n-            \"unsafe_no_drop_flag\",\n-\n-            // used in resolve\n-            \"prelude_import\",\n-\n-            // FIXME: #14407 these are only looked at on-demand so we can't\n-            // guarantee they'll have already been checked\n-            \"deprecated\",\n-            \"must_use\",\n-            \"stable\",\n-            \"unstable\",\n-            \"rustc_on_unimplemented\",\n-            \"rustc_error\",\n-\n-            // FIXME: #19470 this shouldn't be needed forever\n-            \"old_orphan_check\",\n-            \"old_impl_check\",\n-            \"rustc_paren_sugar\", // FIXME: #18101 temporary unboxed closure hack\n-        ];\n-\n-        static CRATE_ATTRS: &'static [&'static str] = &[\n-            \"crate_name\",\n-            \"crate_type\",\n-            \"feature\",\n-            \"no_start\",\n-            \"no_main\",\n-            \"no_std\",\n-            \"no_builtins\",\n-        ];\n-\n-        for &name in ATTRIBUTE_WHITELIST {\n-            if attr.check_name(name) {\n+        for &(ref name, ty) in KNOWN_ATTRIBUTES {\n+            if ty == AttributeType::Whitelisted && attr.check_name(name) {\n                 break;\n             }\n         }\n \n         if !attr::is_used(attr) {\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n-            if CRATE_ATTRS.contains(&&attr.name()[]) {\n+            if KNOWN_ATTRIBUTES.contains(&(&attr.name()[], AttributeType::CrateLevel)) {\n                 let msg = match attr.node.style {\n                     ast::AttrOuter => \"crate-level attribute should be an inner \\\n                                        attribute: add an exclamation mark: #![foo]\","}, {"sha": "d2eb2126f0f7f7ae3411f81484622976979d58e3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/531a06e593fdf4151c2b3f5673f24c7a0739e3f5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a06e593fdf4151c2b3f5673f24c7a0739e3f5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=531a06e593fdf4151c2b3f5673f24c7a0739e3f5", "patch": "@@ -23,6 +23,7 @@\n //! becomes stable.\n \n use self::Status::*;\n+use self::AttributeType::*;\n \n use abi::RustIntrinsic;\n use ast::NodeId;\n@@ -152,6 +153,74 @@ enum Status {\n     Accepted,\n }\n \n+// Attributes that have a special meaning to rustc or rustdoc\n+pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n+\n+    // FIXME: #14408 whitelist docs since rustdoc looks at them\n+    (\"doc\", Whitelisted),\n+\n+    // FIXME: #14406 these are processed in trans, which happens after the\n+    // lint pass\n+    (\"cold\", Whitelisted),\n+    (\"export_name\", Whitelisted),\n+    (\"inline\", Whitelisted),\n+    (\"link\", Whitelisted),\n+    (\"link_name\", Whitelisted),\n+    (\"link_section\", Whitelisted),\n+    (\"linkage\", Whitelisted),\n+    (\"no_builtins\", Whitelisted),\n+    (\"no_mangle\", Whitelisted),\n+    (\"no_split_stack\", Whitelisted),\n+    (\"no_stack_check\", Whitelisted),\n+    (\"packed\", Whitelisted),\n+    (\"static_assert\", Whitelisted),\n+    (\"thread_local\", Whitelisted),\n+    (\"no_debug\", Whitelisted),\n+    (\"omit_gdb_pretty_printer_section\", Whitelisted),\n+    (\"unsafe_no_drop_flag\", Whitelisted),\n+\n+    // used in resolve\n+    (\"prelude_import\", Whitelisted),\n+\n+    // FIXME: #14407 these are only looked at on-demand so we can't\n+    // guarantee they'll have already been checked\n+    (\"deprecated\", Whitelisted),\n+    (\"must_use\", Whitelisted),\n+    (\"stable\", Whitelisted),\n+    (\"unstable\", Whitelisted),\n+    (\"rustc_on_unimplemented\", Whitelisted),\n+    (\"rustc_error\", Whitelisted),\n+\n+    // FIXME: #19470 this shouldn't be needed forever\n+    (\"old_orphan_check\", Whitelisted),\n+    (\"old_impl_check\", Whitelisted),\n+    (\"rustc_paren_sugar\", Whitelisted), // FIXME: #18101 temporary unboxed closure hack\n+\n+    // Crate level attributes\n+    (\"crate_name\", CrateLevel),\n+    (\"crate_type\", CrateLevel),\n+    (\"feature\", CrateLevel),\n+    (\"no_start\", CrateLevel),\n+    (\"no_main\", CrateLevel),\n+    (\"no_std\", CrateLevel),\n+    (\"no_builtins\", CrateLevel),\n+];\n+\n+#[derive(PartialEq, Copy)]\n+pub enum AttributeType {\n+    /// Normal, builtin attribute that is consumed\n+    /// by the compiler before the unused_attribute check\n+    Normal,\n+\n+    /// Builtin attribute that may not be consumed by the compiler\n+    /// before the unused_attribute check. These attributes\n+    /// will be ignored by the unused_attribute lint\n+    Whitelisted,\n+\n+    /// Builtin attribute that is only allowed at the crate level\n+    CrateLevel,\n+}\n+\n /// A set of features to be used by later passes.\n pub struct Features {\n     pub unboxed_closures: bool,"}]}