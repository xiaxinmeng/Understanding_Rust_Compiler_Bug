{"sha": "6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMzIxZDczMThiOTRlZTkzZGM2MGRjODhkMWU2OGFmYTk0ZThjNGY=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-03T13:10:50Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-03T13:34:16Z"}, "message": "Move error to new file", "tree": {"sha": "959822979e426fc98b20e86f6183ace49a16656f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/959822979e426fc98b20e86f6183ace49a16656f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJeD0LZAAoJENWyu1zcMzS8zE0H/R2ygsDjdle2bxxvQ415FWTV\nIjCIId1lgYpga8VYfIT8i5oFQPaZ1JGci8FXmiKampddTlNvMQPKuDs7Gb703IU5\nnh41c0ZJQcFXJMj5dBb2uV2pbY7k/T/1HHLEniLqoIgokAvAvYZEBBbybEGo+XDV\n8M8nzNvbVL5uzqfkeq1abXOS+GxMCCA4mZ2tPqHBnUZhgYw/l7k8YkdBET+7oI0Y\ncjqEcqOkVM+if8luTz0NuBdC1z9BudfDqPWxeGxdrHCX2wy1m0Ai5aegSaYcvDpx\nzJmmAJNp13mGqGdBzTDFGOwp9j90fxFBw2vYwl4rEowUJ+Hcu/o8kQQuDmPCSF4=\n=onen\n-----END PGP SIGNATURE-----", "payload": "tree 959822979e426fc98b20e86f6183ace49a16656f\nparent 2202891221647c9c1a1c6bd47c0b0214b364803d\nauthor Wilco Kusee <wilcokusee@gmail.com> 1578057050 +0100\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1578058456 +0100\n\nMove error to new file\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "html_url": "https://github.com/rust-lang/rust/commit/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2202891221647c9c1a1c6bd47c0b0214b364803d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2202891221647c9c1a1c6bd47c0b0214b364803d", "html_url": "https://github.com/rust-lang/rust/commit/2202891221647c9c1a1c6bd47c0b0214b364803d"}], "stats": {"total": 115, "additions": 61, "deletions": 54}, "files": [{"sha": "c07c54936fddaf1a748d11b493edf83d9d2b7125", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 4, "deletions": 54, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "patch": "@@ -3,78 +3,28 @@\n mod cargo_workspace;\n mod json_project;\n mod sysroot;\n+mod workspace_error;\n \n use std::{\n-    fmt,\n     fs::File,\n     io::BufReader,\n     path::{Path, PathBuf},\n     process::Command,\n };\n \n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateId, Edition, Env, FileId, ParseEditionError};\n+use ra_db::{CrateGraph, CrateId, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n+use crate::workspace_error::WorkspaceError;\n+\n pub use crate::{\n     cargo_workspace::{CargoFeatures, CargoWorkspace, Package, Target, TargetKind},\n     json_project::JsonProject,\n     sysroot::Sysroot,\n };\n \n-#[derive(Debug)]\n-pub enum WorkspaceError {\n-    CargoMetadataFailed(cargo_metadata::Error),\n-    CargoTomlNotFound(PathBuf),\n-    NoStdLib(PathBuf),\n-    OpenWorkspaceError(std::io::Error),\n-    ParseEditionError(ParseEditionError),\n-    ReadWorkspaceError(serde_json::Error),\n-    RustcCfgError,\n-    RustcError(std::io::Error),\n-    RustcOutputError(std::string::FromUtf8Error),\n-    SysrootNotFound,\n-}\n-\n-impl fmt::Display for WorkspaceError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            Self::OpenWorkspaceError(err) | Self::RustcError(err) => write!(f, \"{}\", err),\n-            Self::ParseEditionError(err) => write!(f, \"{}\", err),\n-            Self::ReadWorkspaceError(err) => write!(f, \"{}\", err),\n-            Self::RustcOutputError(err) => write!(f, \"{}\", err),\n-            Self::CargoMetadataFailed(err) => write!(f, \"cargo metadata failed: {}\", err),\n-            Self::RustcCfgError => write!(f, \"failed to get rustc cfgs\"),\n-            Self::SysrootNotFound => write!(f, \"failed to locate sysroot\"),\n-            Self::CargoTomlNotFound(path) => {\n-                write!(f, \"can't find Cargo.toml at {}\", path.display())\n-            }\n-            Self::NoStdLib(sysroot) => write!(\n-                f,\n-                \"can't load standard library from sysroot\\n\\\n-                 {:?}\\n\\\n-                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-                sysroot,\n-            ),\n-        }\n-    }\n-}\n-\n-impl std::error::Error for WorkspaceError {}\n-\n-impl From<ParseEditionError> for WorkspaceError {\n-    fn from(err: ParseEditionError) -> Self {\n-        Self::ParseEditionError(err.into())\n-    }\n-}\n-\n-impl From<cargo_metadata::Error> for WorkspaceError {\n-    fn from(err: cargo_metadata::Error) -> Self {\n-        Self::CargoMetadataFailed(err.into())\n-    }\n-}\n-\n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`."}, {"sha": "5f7384968101eb7340266eaa30b9ba7b9b734f71", "filename": "crates/ra_project_model/src/workspace_error.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f/crates%2Fra_project_model%2Fsrc%2Fworkspace_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c321d7318b94ee93dc60dc88d1e68afa94e8c4f/crates%2Fra_project_model%2Fsrc%2Fworkspace_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fworkspace_error.rs?ref=6c321d7318b94ee93dc60dc88d1e68afa94e8c4f", "patch": "@@ -0,0 +1,57 @@\n+//! Workspace-related errors\n+\n+use std::{error::Error, fmt, io, path::PathBuf, string::FromUtf8Error};\n+\n+use ra_db::ParseEditionError;\n+\n+#[derive(Debug)]\n+pub enum WorkspaceError {\n+    CargoMetadataFailed(cargo_metadata::Error),\n+    CargoTomlNotFound(PathBuf),\n+    NoStdLib(PathBuf),\n+    OpenWorkspaceError(io::Error),\n+    ParseEditionError(ParseEditionError),\n+    ReadWorkspaceError(serde_json::Error),\n+    RustcCfgError,\n+    RustcError(io::Error),\n+    RustcOutputError(FromUtf8Error),\n+    SysrootNotFound,\n+}\n+\n+impl fmt::Display for WorkspaceError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::OpenWorkspaceError(err) | Self::RustcError(err) => write!(f, \"{}\", err),\n+            Self::ParseEditionError(err) => write!(f, \"{}\", err),\n+            Self::ReadWorkspaceError(err) => write!(f, \"{}\", err),\n+            Self::RustcOutputError(err) => write!(f, \"{}\", err),\n+            Self::CargoMetadataFailed(err) => write!(f, \"cargo metadata failed: {}\", err),\n+            Self::RustcCfgError => write!(f, \"failed to get rustc cfgs\"),\n+            Self::SysrootNotFound => write!(f, \"failed to locate sysroot\"),\n+            Self::CargoTomlNotFound(path) => {\n+                write!(f, \"can't find Cargo.toml at {}\", path.display())\n+            }\n+            Self::NoStdLib(sysroot) => write!(\n+                f,\n+                \"can't load standard library from sysroot\\n\\\n+                 {:?}\\n\\\n+                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+                sysroot,\n+            ),\n+        }\n+    }\n+}\n+\n+impl From<ParseEditionError> for WorkspaceError {\n+    fn from(err: ParseEditionError) -> Self {\n+        Self::ParseEditionError(err.into())\n+    }\n+}\n+\n+impl From<cargo_metadata::Error> for WorkspaceError {\n+    fn from(err: cargo_metadata::Error) -> Self {\n+        Self::CargoMetadataFailed(err.into())\n+    }\n+}\n+\n+impl Error for WorkspaceError {}"}]}