{"sha": "ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMzI5MmQzYmU0YjA1YTg2YTAzYzVmMDNlZWEyNGZlMjg5YTRlODE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-27T21:03:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-27T21:16:46Z"}, "message": "rust: Remove extensions' dependency on the session", "tree": {"sha": "7e8cfea4ce8699fce5b1613578e9ba592a7f9e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e8cfea4ce8699fce5b1613578e9ba592a7f9e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "html_url": "https://github.com/rust-lang/rust/commit/ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3292d3be4b05a86a03c5f03eea24fe289a4e81/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2142c5ebbb2d94addee281f7c66c02efabed7085", "url": "https://api.github.com/repos/rust-lang/rust/commits/2142c5ebbb2d94addee281f7c66c02efabed7085", "html_url": "https://github.com/rust-lang/rust/commit/2142c5ebbb2d94addee281f7c66c02efabed7085"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "c6b503a3fdf80f727beca3fa69edb80b1c4ad775", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba3292d3be4b05a86a03c5f03eea24fe289a4e81/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3292d3be4b05a86a03c5f03eea24fe289a4e81/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "patch": "@@ -121,7 +121,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n              bind front::test::modify_for_testing(sess, crate));\n     crate =\n         time(time_passes, \"expansion\",\n-             bind syntax::ext::expand::expand_crate(sess, crate));\n+             bind syntax::ext::expand::expand_crate(\n+                 sess.parse_sess, sess.opts.cfg, crate));\n \n     if upto == cu_expand { ret {crate: crate, tcx: none}; }\n "}, {"sha": "a0d4a2d288f2b7c4922162c0f92074f4afa78110", "filename": "src/rustc/syntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba3292d3be4b05a86a03c5f03eea24fe289a4e81/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3292d3be4b05a86a03c5f03eea24fe289a4e81/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs?ref=ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "patch": "@@ -45,7 +45,6 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n }\n \n iface ext_ctxt {\n-    fn session() -> driver::session::session;\n     fn codemap() -> codemap;\n     fn parse_sess() -> parser::parse_sess;\n     fn cfg() -> ast::crate_cfg;\n@@ -61,15 +60,12 @@ iface ext_ctxt {\n     fn next_id() -> ast::node_id;\n }\n \n-fn mk_ctxt(session: driver::session::session,\n-           parse_sess: parser::parse_sess,\n+fn mk_ctxt(parse_sess: parser::parse_sess,\n            cfg: ast::crate_cfg) -> ext_ctxt {\n-    type ctxt_repr = {session: driver::session::session,\n-                      parse_sess: parser::parse_sess,\n+    type ctxt_repr = {parse_sess: parser::parse_sess,\n                       cfg: ast::crate_cfg,\n                       mut backtrace: expn_info};\n     impl of ext_ctxt for ctxt_repr {\n-        fn session() -> driver::session::session { self.session }\n         fn codemap() -> codemap { self.parse_sess.cm }\n         fn parse_sess() -> parser::parse_sess { self.parse_sess }\n         fn cfg() -> ast::crate_cfg { self.cfg }\n@@ -119,7 +115,6 @@ fn mk_ctxt(session: driver::session::session,\n         }\n     }\n     let imp : ctxt_repr = {\n-        session: session,\n         parse_sess: parse_sess,\n         cfg: cfg,\n         mut backtrace: none"}, {"sha": "b16e0c0a1a039da58d6e9925c5e71e6fc9e42425", "filename": "src/rustc/syntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba3292d3be4b05a86a03c5f03eea24fe289a4e81/src%2Frustc%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3292d3be4b05a86a03c5f03eea24fe289a4e81/src%2Frustc%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fexpand.rs?ref=ba3292d3be4b05a86a03c5f03eea24fe289a4e81", "patch": "@@ -9,6 +9,7 @@ import syntax::ast::{crate, expr_, expr_mac, mac_invoc};\n import syntax::fold::*;\n import syntax::ext::base::*;\n import syntax::ext::qquote::{qq_helper};\n+import syntax::parse::parser;\n import syntax::parse::parser::parse_expr_from_source_str;\n \n \n@@ -119,10 +120,11 @@ fn core_macros() -> str {\n }\";\n }\n \n-fn expand_crate(sess: session::session, c: @crate) -> @crate {\n+fn expand_crate(parse_sess: parser::parse_sess,\n+                cfg: ast::crate_cfg, c: @crate) -> @crate {\n     let exts = syntax_expander_table();\n     let afp = default_ast_fold();\n-    let cx: ext_ctxt = mk_ctxt(sess, sess.parse_sess, sess.opts.cfg);\n+    let cx: ext_ctxt = mk_ctxt(parse_sess, cfg);\n     let f_pre =\n         {fold_expr: bind expand_expr(exts, cx, _, _, _, afp.fold_expr),\n          fold_mod: bind expand_mod_items(exts, cx, _, _, afp.fold_mod),\n@@ -131,8 +133,8 @@ fn expand_crate(sess: session::session, c: @crate) -> @crate {\n     let f = make_fold(f_pre);\n     let cm = parse_expr_from_source_str(\"<core-macros>\",\n                                         @core_macros(),\n-                                        sess.opts.cfg,\n-                                        sess.parse_sess);\n+                                        cfg,\n+                                        parse_sess);\n \n     // This is run for its side-effects on the expander env,\n     // as it registers all the core macros as expanders."}]}