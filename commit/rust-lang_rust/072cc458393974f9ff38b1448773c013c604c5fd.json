{"sha": "072cc458393974f9ff38b1448773c013c604c5fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MmNjNDU4MzkzOTc0ZjlmZjM4YjE0NDg3NzNjMDEzYzYwNGM1ZmQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-18T12:37:36Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:11:19Z"}, "message": "it works again :tada:", "tree": {"sha": "395f2cb6eabc19c310a77f8486f97ce9ef04c471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395f2cb6eabc19c310a77f8486f97ce9ef04c471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/072cc458393974f9ff38b1448773c013c604c5fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/072cc458393974f9ff38b1448773c013c604c5fd", "html_url": "https://github.com/rust-lang/rust/commit/072cc458393974f9ff38b1448773c013c604c5fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/072cc458393974f9ff38b1448773c013c604c5fd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "url": "https://api.github.com/repos/rust-lang/rust/commits/825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "html_url": "https://github.com/rust-lang/rust/commit/825cb5bdc925c4f2462c58c8aae5f7942a52a29f"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "6f454e15aad763b2043dc8035968e456a9ac0b05", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=072cc458393974f9ff38b1448773c013c604c5fd", "patch": "@@ -1051,12 +1051,17 @@ impl<'tcx> Predicate<'tcx> {\n \n     /// Returns the inner `PredicateAtom`.\n     ///\n+    /// The returned atom may contain unbound variables bound to binders skipped in this method.\n+    /// It is safe to reapply binders to the given atom.\n+    ///\n     /// Note that this method panics in case this predicate has unbound variables.\n     pub fn skip_binders(self) -> PredicateAtom<'tcx> {\n-        // TODO no_escaping_vars\n         match self.kind() {\n             &PredicateKind::ForAll(binder) => binder.skip_binder(),\n-            &ty::PredicateKind::Atom(atom) => atom,\n+            &PredicateKind::Atom(atom) => {\n+                debug_assert!(!atom.has_escaping_bound_vars());\n+                atom\n+            }\n         }\n     }\n \n@@ -1378,7 +1383,7 @@ impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n impl ToPredicate<'tcx> for PredicateAtom<'tcx> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        debug_assert!(!self.has_escaping_bound_vars(), \"excaping bound vars for {:?}\", self);\n+        debug_assert!(!self.has_escaping_bound_vars(), \"escaping bound vars for {:?}\", self);\n         tcx.mk_predicate(ty::PredicateKind::Atom(self))\n     }\n }"}, {"sha": "21b8d7101a30477c71114c19e1e6257ca8d1b36c", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=072cc458393974f9ff38b1448773c013c604c5fd", "patch": "@@ -486,11 +486,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n     type Lifted = ty::PredicateKind<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        match *self {\n-            ty::PredicateKind::ForAll(ref binder) => {\n-                tcx.lift(binder).map(ty::PredicateKind::ForAll)\n-            }\n-            ty::PredicateKind::Atom(ref atom) => tcx.lift(atom).map(ty::PredicateKind::Atom),\n+        match self {\n+            ty::PredicateKind::ForAll(binder) => tcx.lift(binder).map(ty::PredicateKind::ForAll),\n+            ty::PredicateKind::Atom(atom) => tcx.lift(atom).map(ty::PredicateKind::Atom),\n         }\n     }\n }"}, {"sha": "df8fa4d73ddf17c9f4a23bf2a193f6bdbaa50ae3", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=072cc458393974f9ff38b1448773c013c604c5fd", "patch": "@@ -897,6 +897,9 @@ impl<T> Binder<T> {\n \n     /// Wraps `value` in a binder without actually binding any currently\n     /// unbound variables.\n+    ///\n+    /// Note that this will shift all debrujin indices of escaping bound variables\n+    /// by 1 to avoid accidential captures.\n     pub fn wrap_nonbinding(tcx: TyCtxt<'tcx>, value: T) -> Binder<T>\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "349fa68a4da9914a02488692301f6eb735eb75c3", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=072cc458393974f9ff38b1448773c013c604c5fd", "patch": "@@ -1100,7 +1100,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         for obligation in super::elaborate_predicates(self.tcx, std::iter::once(cond)) {\n             if let ty::PredicateAtom::Trait(implication, _) = obligation.predicate.skip_binders() {\n                 let error = error.to_poly_trait_ref();\n-                let implication = ty::Binder::bind(implication).to_poly_trait_ref();\n+                let implication = ty::Binder::bind(implication.trait_ref);\n                 // FIXME: I'm just not taking associated types at all here.\n                 // Eventually I'll need to implement param-env-aware\n                 // `\u0393\u2081 \u22a6 \u03c6\u2081 => \u0393\u2082 \u22a6 \u03c6\u2082` logic."}, {"sha": "2b9621c9271e4bfb28f120bba1680853e4df0701", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072cc458393974f9ff38b1448773c013c604c5fd/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=072cc458393974f9ff38b1448773c013c604c5fd", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n-use rustc_infer::traits::{PolyTraitObligation, TraitEngine, TraitEngineExt as _};\n+use rustc_infer::traits::{TraitObligation, TraitEngine, TraitEngineExt as _};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::ToPredicate;\n@@ -320,41 +320,40 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n         let infcx = self.selcx.infcx();\n \n         match obligation.predicate.kind() {\n-            ty::PredicateKind::ForAll(binder) => match binder.skip_binder().kind() {\n-                ty::PredicateKind::ForAll(_) => bug!(\"unexpected forall\"),\n+            ty::PredicateKind::ForAll(binder) => match binder.skip_binder() {\n                 // Evaluation will discard candidates using the leak check.\n                 // This means we need to pass it the bound version of our\n                 // predicate.\n-                &ty::PredicateKind::Atom(atom) => match atom {\n-                    ty::PredicateAtom::Trait(trait_ref, _constness) => {\n-                        let trait_obligation = obligation.with(Binder::bind(trait_ref));\n-\n-                        self.process_trait_obligation(\n-                            obligation,\n-                            trait_obligation,\n-                            &mut pending_obligation.stalled_on,\n-                        )\n-                    }\n-                    ty::PredicateAtom::Projection(projection) => {\n-                        let project_obligation = obligation.with(Binder::bind(projection));\n+                ty::PredicateAtom::Trait(trait_ref, _constness) => {\n+                    let trait_obligation = obligation.with(Binder::bind(trait_ref));\n \n-                        self.process_projection_obligation(\n-                            project_obligation,\n-                            &mut pending_obligation.stalled_on,\n-                        )\n-                    }\n-                    ty::PredicateAtom::RegionOutlives(_)\n-                    | ty::PredicateAtom::TypeOutlives(_)\n-                    | ty::PredicateAtom::WellFormed(_)\n-                    | ty::PredicateAtom::ObjectSafe(_)\n-                    | ty::PredicateAtom::ClosureKind(..)\n-                    | ty::PredicateAtom::Subtype(_)\n-                    | ty::PredicateAtom::ConstEvaluatable(..)\n-                    | ty::PredicateAtom::ConstEquate(..) => {\n-                        let (pred, _) = infcx.replace_bound_vars_with_placeholders(binder);\n-                        ProcessResult::Changed(mk_pending(vec![obligation.with(pred)]))\n-                    }\n-                },\n+                    self.process_trait_obligation(\n+                        obligation,\n+                        trait_obligation,\n+                        &mut pending_obligation.stalled_on,\n+                    )\n+                }\n+                ty::PredicateAtom::Projection(data) => {\n+                    let project_obligation = obligation.with(Binder::bind(data));\n+\n+                    self.process_projection_obligation(\n+                        project_obligation,\n+                        &mut pending_obligation.stalled_on,\n+                    )\n+                }\n+                ty::PredicateAtom::RegionOutlives(_)\n+                | ty::PredicateAtom::TypeOutlives(_)\n+                | ty::PredicateAtom::WellFormed(_)\n+                | ty::PredicateAtom::ObjectSafe(_)\n+                | ty::PredicateAtom::ClosureKind(..)\n+                | ty::PredicateAtom::Subtype(_)\n+                | ty::PredicateAtom::ConstEvaluatable(..)\n+                | ty::PredicateAtom::ConstEquate(..) => {\n+                    let (pred, _) = infcx.replace_bound_vars_with_placeholders(binder);\n+                    ProcessResult::Changed(mk_pending(vec![\n+                        obligation.with(pred.to_predicate(self.selcx.tcx())),\n+                    ]))\n+                }\n             },\n             &ty::PredicateKind::Atom(atom) => match atom {\n                 ty::PredicateAtom::Trait(ref data, _) => {\n@@ -560,7 +559,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n     fn process_trait_obligation(\n         &mut self,\n         obligation: &PredicateObligation<'tcx>,\n-        trait_obligation: PolyTraitObligation<'tcx>,\n+        trait_obligation: TraitObligation<'tcx>,\n         stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,\n     ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {\n         let infcx = self.selcx.infcx();"}]}