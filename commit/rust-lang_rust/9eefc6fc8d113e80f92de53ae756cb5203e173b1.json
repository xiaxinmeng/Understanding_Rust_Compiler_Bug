{"sha": "9eefc6fc8d113e80f92de53ae756cb5203e173b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZWZjNmZjOGQxMTNlODBmOTJkZTUzYWU3NTZjYjUyMDNlMTczYjE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-10T09:24:23Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-10T09:31:01Z"}, "message": "Share codes when rewriting generics", "tree": {"sha": "95acf2444989f1282d49f15450f341f26d443308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95acf2444989f1282d49f15450f341f26d443308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eefc6fc8d113e80f92de53ae756cb5203e173b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eefc6fc8d113e80f92de53ae756cb5203e173b1", "html_url": "https://github.com/rust-lang/rust/commit/9eefc6fc8d113e80f92de53ae756cb5203e173b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eefc6fc8d113e80f92de53ae756cb5203e173b1/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c879d5ebd719875cf99bda55e577df07b28f6ea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c879d5ebd719875cf99bda55e577df07b28f6ea6", "html_url": "https://github.com/rust-lang/rust/commit/c879d5ebd719875cf99bda55e577df07b28f6ea6"}], "stats": {"total": 114, "additions": 72, "deletions": 42}, "files": [{"sha": "03ca6f60832567c13ab0bf879c19ff18d5a2b2be", "filename": "src/items.rs", "status": "modified", "additions": 55, "deletions": 20, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9eefc6fc8d113e80f92de53ae756cb5203e173b1/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eefc6fc8d113e80f92de53ae756cb5203e173b1/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9eefc6fc8d113e80f92de53ae756cb5203e173b1", "patch": "@@ -16,7 +16,7 @@ use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wr\n             last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n             trimmed_last_line_width, colon_spaces, mk_sp};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, list_helper,\n-            DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n+            DefinitiveListTactic, ListTactic, definitive_tactic};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n use visitor::FmtVisitor;\n@@ -2111,21 +2111,13 @@ fn rewrite_generics(context: &RewriteContext,\n         return Some(String::new());\n     }\n \n-    let offset = match context.config.generics_indent() {\n-        IndentStyle::Block => shape.indent.block_only().block_indent(context.config),\n-        // 1 = <\n-        IndentStyle::Visual => shape.indent + 1,\n-    };\n-\n-    let h_budget = try_opt!(shape.width.checked_sub(2));\n-    // FIXME: might need to insert a newline if the generics are really long.\n-\n+    let generics_shape = generics_shape_from_config(context.config, shape, 0);\n     // Strings for the generics.\n     let lt_strs = lifetimes\n         .iter()\n-        .map(|lt| lt.rewrite(context, Shape::legacy(h_budget, offset)));\n+        .map(|lt| lt.rewrite(context, generics_shape));\n     let ty_strs = tys.iter()\n-        .map(|ty_param| ty_param.rewrite(context, Shape::legacy(h_budget, offset)));\n+        .map(|ty_param| ty_param.rewrite(context, generics_shape));\n \n     // Extract comments between generics.\n     let lt_spans = lifetimes.iter().map(|l| {\n@@ -2147,21 +2139,64 @@ fn rewrite_generics(context: &RewriteContext,\n                              |&(_, ref str)| str.clone(),\n                              context.codemap.span_after(span, \"<\"),\n                              span.hi);\n-    let list_str =\n-        try_opt!(format_item_list(items, Shape::legacy(h_budget, offset), context.config));\n+    format_generics_item_list(context, items, generics_shape, generics_shape.width)\n+}\n+\n+pub fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> Shape {\n+    Shape {\n+        // 2 = `<>`\n+        width: shape.width.checked_sub(offset + 2).unwrap_or(0),\n+        ..match config.generics_indent() {\n+              IndentStyle::Visual => shape.visual_indent(1 + offset),\n+              IndentStyle::Block => shape.block().block_indent(config.tab_spaces()),\n+          }\n+    }\n+}\n+\n+pub fn format_generics_item_list<I>(context: &RewriteContext,\n+                                    items: I,\n+                                    shape: Shape,\n+                                    one_line_budget: usize)\n+                                    -> Option<String>\n+    where I: Iterator<Item = ListItem>\n+{\n+    let item_vec = items.collect::<Vec<_>>();\n+\n+    let fmt = ListFormatting {\n+        tactic: definitive_tactic(&item_vec, ListTactic::HorizontalVertical, one_line_budget),\n+        separator: \",\",\n+        trailing_separator: if context.config.generics_indent() == IndentStyle::Visual {\n+            SeparatorTactic::Never\n+        } else {\n+            context.config.trailing_comma()\n+        },\n+        shape: shape,\n+        ends_with_newline: false,\n+        config: context.config,\n+    };\n \n-    let result = if context.config.generics_indent() != IndentStyle::Visual &&\n-                    list_str.contains('\\n') {\n+    let list_str = try_opt!(write_list(&item_vec, &fmt));\n+\n+    Some(wrap_generics_with_angle_brackets(context, &list_str, shape.indent))\n+}\n+\n+pub fn wrap_generics_with_angle_brackets(context: &RewriteContext,\n+                                         list_str: &str,\n+                                         list_offset: Indent)\n+                                         -> String {\n+    if context.config.generics_indent() == IndentStyle::Block &&\n+       (list_str.contains('\\n') || list_str.ends_with(',')) {\n         format!(\"<\\n{}{}\\n{}>\",\n-                offset.to_string(context.config),\n+                list_offset.to_string(context.config),\n                 list_str,\n-                shape.indent.block_only().to_string(context.config))\n+                list_offset\n+                    .block_unindent(context.config)\n+                    .to_string(context.config))\n     } else if context.config.spaces_within_angle_brackets() {\n         format!(\"< {} >\", list_str)\n     } else {\n         format!(\"<{}>\", list_str)\n-    };\n-    Some(result)\n+    }\n }\n \n fn rewrite_trait_bounds(context: &RewriteContext,"}, {"sha": "4e74ea8213f10e4179f778aba43cd696d2ac1d9d", "filename": "src/types.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9eefc6fc8d113e80f92de53ae756cb5203e173b1/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eefc6fc8d113e80f92de53ae756cb5203e173b1/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9eefc6fc8d113e80f92de53ae756cb5203e173b1", "patch": "@@ -19,7 +19,8 @@ use syntax::symbol::keywords;\n \n use {Shape, Spanned};\n use codemap::SpanUtils;\n-use lists::{format_item_list, itemize_list, format_fn_args};\n+use items::{format_generics_item_list, generics_shape_from_config};\n+use lists::{itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple_type};\n@@ -213,31 +214,25 @@ fn rewrite_segment(path_context: PathContext,\n                     \"\"\n                 };\n \n-                // 1 for <\n-                let extra_offset = 1 + separator.len();\n-                // 1 for >\n-                // TODO bad visual indent\n-                let list_shape = try_opt!(try_opt!(shape.shrink_left(extra_offset)).sub_width(1))\n-                    .visual_indent(0);\n-\n+                let generics_shape =\n+                    generics_shape_from_config(context.config, shape, separator.len());\n                 let items = itemize_list(context.codemap,\n                                          param_list.into_iter(),\n                                          \">\",\n                                          |param| param.get_span().lo,\n                                          |param| param.get_span().hi,\n-                                         |seg| seg.rewrite(context, list_shape),\n+                                         |seg| seg.rewrite(context, generics_shape),\n                                          list_lo,\n                                          span_hi);\n-                let list_str = try_opt!(format_item_list(items, list_shape, context.config));\n+                let generics_str = try_opt!(format_generics_item_list(context,\n+                                                                      items,\n+                                                                      generics_shape,\n+                                                                      generics_shape.width));\n \n                 // Update position of last bracket.\n                 *span_lo = next_span_lo;\n \n-                if context.config.spaces_within_angle_brackets() && list_str.len() > 0 {\n-                    format!(\"{}< {} >\", separator, list_str)\n-                } else {\n-                    format!(\"{}<{}>\", separator, list_str)\n-                }\n+                format!(\"{}{}\", separator, generics_str)\n             }\n             ast::PathParameters::Parenthesized(ref data) => {\n                 let output = match data.output {"}, {"sha": "848e59c7c0ae05b1fbb3a09f50114307f0c70678", "filename": "tests/target/configs-generics_indent-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eefc6fc8d113e80f92de53ae756cb5203e173b1/tests%2Ftarget%2Fconfigs-generics_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eefc6fc8d113e80f92de53ae756cb5203e173b1/tests%2Ftarget%2Fconfigs-generics_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-generics_indent-block.rs?ref=9eefc6fc8d113e80f92de53ae756cb5203e173b1", "patch": "@@ -8,7 +8,7 @@ fn lorem<\n     Amet: Eq = usize,\n     Adipiscing: Eq = usize,\n     Consectetur: Eq = usize,\n-    Elit: Eq = usize\n+    Elit: Eq = usize,\n >(ipsum: Ipsum,\n     dolor: Dolor,\n     sit: Sit,"}, {"sha": "f0923bd1a853bf694af7d05ac0476bcc7b27328f", "filename": "tests/target/fn-custom-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9eefc6fc8d113e80f92de53ae756cb5203e173b1/tests%2Ftarget%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eefc6fc8d113e80f92de53ae756cb5203e173b1/tests%2Ftarget%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-2.rs?ref=9eefc6fc8d113e80f92de53ae756cb5203e173b1", "patch": "@@ -16,7 +16,7 @@ fn foo(\n fn bar<\n     'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n     TTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW,\n >(\n     a: Aaaaaaaaaaaaaaa,\n ) {\n@@ -51,7 +51,7 @@ impl Foo {\n     fn bar<\n         'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n         TTTTTTTTTTTTT,\n-        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW,\n     >(\n         a: Aaaaaaaaaaaaaaa,\n     ) {\n@@ -69,7 +69,7 @@ struct Foo<\n     TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUU,\n     VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n-    WWWWWWWWWWWWWWWWWWWWWWWW\n+    WWWWWWWWWWWWWWWWWWWWWWWW,\n > {\n     foo: Foo,\n }"}, {"sha": "4d26c9b695192e2b01ddb58ed78178fa248fc882", "filename": "tests/target/fn-custom-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9eefc6fc8d113e80f92de53ae756cb5203e173b1/tests%2Ftarget%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eefc6fc8d113e80f92de53ae756cb5203e173b1/tests%2Ftarget%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-3.rs?ref=9eefc6fc8d113e80f92de53ae756cb5203e173b1", "patch": "@@ -16,7 +16,7 @@ fn foo(\n fn bar<\n     'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n     TTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW,\n >(\n     a: Aaaaaaaaaaaaaaa,\n ) {\n@@ -53,7 +53,7 @@ impl Foo {\n     fn bar<\n         'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n         TTTTTTTTTTTTT,\n-        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW,\n     >(\n         a: Aaaaaaaaaaaaaaa,\n     ) {\n@@ -65,7 +65,7 @@ struct Foo<\n     TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUU,\n     VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n-    WWWWWWWWWWWWWWWWWWWWWWWW\n+    WWWWWWWWWWWWWWWWWWWWWWWW,\n > {\n     foo: Foo,\n }"}]}