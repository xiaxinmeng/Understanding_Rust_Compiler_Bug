{"sha": "8e1e0f0b5743405f3487d765cd6cbe230ddca738", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMWUwZjBiNTc0MzQwNWYzNDg3ZDc2NWNkNmNiZTIzMGRkY2E3Mzg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-01-18T19:01:58Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-01-19T22:50:14Z"}, "message": "Remove onceness & bounds - they don't do anything.", "tree": {"sha": "8351ef6b196dc2df037182c3c866e56fc3bee2d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8351ef6b196dc2df037182c3c866e56fc3bee2d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e1e0f0b5743405f3487d765cd6cbe230ddca738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e1e0f0b5743405f3487d765cd6cbe230ddca738", "html_url": "https://github.com/rust-lang/rust/commit/8e1e0f0b5743405f3487d765cd6cbe230ddca738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e1e0f0b5743405f3487d765cd6cbe230ddca738/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0eb3ccba0346db9fc8a65161006dcbaabe866f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb3ccba0346db9fc8a65161006dcbaabe866f9", "html_url": "https://github.com/rust-lang/rust/commit/e0eb3ccba0346db9fc8a65161006dcbaabe866f9"}], "stats": {"total": 83, "additions": 7, "deletions": 76}, "files": [{"sha": "861aaa36103755cd2340f01dc33c42032e03631d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -628,14 +628,6 @@ fn parse_abi_set(st: &mut PState) -> abi::Abi {\n     })\n }\n \n-fn parse_onceness(c: char) -> ast::Onceness {\n-    match c {\n-        'o' => ast::Once,\n-        'm' => ast::Many,\n-        _ => panic!(\"parse_onceness: bad onceness\")\n-    }\n-}\n-\n fn parse_closure_ty<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n                                  mut conv: F) -> ty::ClosureTy<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n@@ -648,14 +640,10 @@ fn parse_closure_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     let unsafety = parse_unsafety(next(st));\n-    let onceness = parse_onceness(next(st));\n-    let bounds = parse_existential_bounds_(st, conv);\n     let sig = parse_sig_(st, conv);\n     let abi = parse_abi_set(st);\n     ty::ClosureTy {\n         unsafety: unsafety,\n-        onceness: onceness,\n-        bounds: bounds,\n         sig: sig,\n         abi: abi,\n     }"}, {"sha": "9aead5bf4e7f8ade91c33639a1512e4736f1297a", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -318,13 +318,6 @@ fn enc_abi(w: &mut SeekableMemWriter, abi: Abi) {\n     mywrite!(w, \"]\")\n }\n \n-fn enc_onceness(w: &mut SeekableMemWriter, o: ast::Onceness) {\n-    match o {\n-        ast::Once => mywrite!(w, \"o\"),\n-        ast::Many => mywrite!(w, \"m\")\n-    }\n-}\n-\n pub fn enc_bare_fn_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                 ft: &ty::BareFnTy<'tcx>) {\n     enc_unsafety(w, ft.unsafety);\n@@ -335,8 +328,6 @@ pub fn enc_bare_fn_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n pub fn enc_closure_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                 ft: &ty::ClosureTy<'tcx>) {\n     enc_unsafety(w, ft.unsafety);\n-    enc_onceness(w, ft.onceness);\n-    enc_existential_bounds(w, cx, &ft.bounds);\n     enc_fn_sig(w, cx, &ft.sig);\n     enc_abi(w, ft.abi);\n }"}, {"sha": "6c4d49ab2746589489b3a5165f25afcb4995d236", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -1032,10 +1032,8 @@ pub struct BareFnTy<'tcx> {\n #[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ClosureTy<'tcx> {\n     pub unsafety: ast::Unsafety,\n-    pub onceness: ast::Onceness,\n-    pub bounds: ExistentialBounds<'tcx>,\n-    pub sig: PolyFnSig<'tcx>,\n     pub abi: abi::Abi,\n+    pub sig: PolyFnSig<'tcx>,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n@@ -7296,10 +7294,8 @@ impl ReferencesError for Region\n \n impl<'tcx> Repr<'tcx> for ClosureTy<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"ClosureTy({},{},{},{},{})\",\n+        format!(\"ClosureTy({},{},{})\",\n                 self.unsafety,\n-                self.onceness,\n-                self.bounds.repr(tcx),\n                 self.sig.repr(tcx),\n                 self.abi)\n     }\n@@ -7330,5 +7326,5 @@ impl<'a, 'tcx> Repr<'tcx> for ParameterEnvironment<'a, 'tcx> {\n             self.free_substs.repr(tcx),\n             self.implicit_region_bound.repr(tcx),\n             self.caller_bounds.repr(tcx))\n-        }\n     }\n+}\n\\ No newline at end of file"}, {"sha": "b4e6cff954bcc745b94aa07ce6b94f1055539b8f", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -691,8 +691,6 @@ pub fn super_fold_closure_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n     ty::ClosureTy {\n         sig: fty.sig.fold_with(this),\n         unsafety: fty.unsafety,\n-        onceness: fty.onceness,\n-        bounds: fty.bounds.fold_with(this),\n         abi: fty.abi,\n     }\n }"}, {"sha": "eeed91918cfc90c97a087b63bc453a47b382f745", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -276,7 +276,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             _ => { }\n         }\n \n-        push_sig_to_string(cx, &mut s, '(', ')', sig, \"\");\n+        push_sig_to_string(cx, &mut s, '(', ')', sig);\n \n         match opt_def_id {\n             Some(def_id) => {\n@@ -302,14 +302,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             }\n         };\n \n-        let bounds_str = cty.bounds.user_string(cx);\n-\n-        match cty.onceness {\n-            ast::Many => {}\n-            ast::Once => s.push_str(\"once \")\n-        }\n-        push_sig_to_string(cx, &mut s, '|', '|', &cty.sig,\n-                           &bounds_str[]);\n+        push_sig_to_string(cx, &mut s, '|', '|', &cty.sig);\n \n         s\n     }\n@@ -318,8 +311,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n                                 s: &mut String,\n                                 bra: char,\n                                 ket: char,\n-                                sig: &ty::PolyFnSig<'tcx>,\n-                                bounds: &str) {\n+                                sig: &ty::PolyFnSig<'tcx>) {\n         s.push(bra);\n         let strs = sig.0.inputs\n             .iter()\n@@ -331,11 +323,6 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         }\n         s.push(ket);\n \n-        if !bounds.is_empty() {\n-            s.push_str(\":\");\n-            s.push_str(bounds);\n-        }\n-\n         match sig.0.output {\n             ty::FnConverging(t) => {\n                 if !ty::type_is_nil(t) {"}, {"sha": "d6fbb44fc0a99de098aa765ab2df17d9b1a72d0e", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -551,18 +551,13 @@ impl<'tcx> TypeMap<'tcx> {\n                                               closure_ty: ty::ClosureTy<'tcx>,\n                                               unique_type_id: &mut String) {\n         let ty::ClosureTy { unsafety,\n-                            onceness,\n-                            ref bounds,\n                             ref sig,\n                             abi: _ } = closure_ty;\n+\n         if unsafety == ast::Unsafety::Unsafe {\n             unique_type_id.push_str(\"unsafe \");\n         }\n \n-        if onceness == ast::Once {\n-            unique_type_id.push_str(\"once \");\n-        }\n-\n         unique_type_id.push_str(\"|\");\n \n         let sig = ty::erase_late_bound_regions(cx.tcx(), sig);\n@@ -592,18 +587,6 @@ impl<'tcx> TypeMap<'tcx> {\n                 unique_type_id.push_str(\"!\");\n             }\n         }\n-\n-        unique_type_id.push(':');\n-\n-        for bound in bounds.builtin_bounds.iter() {\n-            match bound {\n-                ty::BoundSend => unique_type_id.push_str(\"Send\"),\n-                ty::BoundSized => unique_type_id.push_str(\"Sized\"),\n-                ty::BoundCopy => unique_type_id.push_str(\"Copy\"),\n-                ty::BoundSync => unique_type_id.push_str(\"Sync\"),\n-            };\n-            unique_type_id.push('+');\n-        }\n     }\n \n     // Get the UniqueTypeId for an enum variant. Enum variants are not really"}, {"sha": "47a28684940036b4e91fbe869918abbe9f6b950c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -1457,8 +1457,6 @@ fn determine_explicit_self_category<'a, 'tcx>(this: &AstConv<'tcx>,\n pub fn ty_of_closure<'tcx>(\n     this: &AstConv<'tcx>,\n     unsafety: ast::Unsafety,\n-    onceness: ast::Onceness,\n-    bounds: ty::ExistentialBounds<'tcx>,\n     decl: &ast::FnDecl,\n     abi: abi::Abi,\n     expected_sig: Option<ty::FnSig<'tcx>>)\n@@ -1508,8 +1506,6 @@ pub fn ty_of_closure<'tcx>(\n \n     ty::ClosureTy {\n         unsafety: unsafety,\n-        onceness: onceness,\n-        bounds: bounds,\n         abi: abi,\n         sig: ty::Binder(ty::FnSig {inputs: input_tys,\n                                    output: output_ty,"}, {"sha": "9b25910ab91ab4a13d109c9bf114d8d8e4214dbd", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1e0f0b5743405f3487d765cd6cbe230ddca738/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=8e1e0f0b5743405f3487d765cd6cbe230ddca738", "patch": "@@ -89,14 +89,6 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     let mut fn_ty = astconv::ty_of_closure(\n         fcx,\n         ast::Unsafety::Normal,\n-        ast::Many,\n-\n-        // The `RegionTraitStore` and region_existential_bounds\n-        // are lies, but we ignore them so it doesn't matter.\n-        //\n-        // FIXME(pcwalton): Refactor this API.\n-        ty::region_existential_bound(ty::ReStatic),\n-\n         decl,\n         abi::RustCall,\n         expected_sig);"}]}