{"sha": "20013de2abb95bc024f55163b1a5044cfb52a873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMDEzZGUyYWJiOTViYzAyNGY1NTE2M2IxYTUwNDRjZmI1MmE4NzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T14:15:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T14:15:20Z"}, "message": "fix typo", "tree": {"sha": "2221a4f959ad4f672e0b421e35d1a0ec3c5d799d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2221a4f959ad4f672e0b421e35d1a0ec3c5d799d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20013de2abb95bc024f55163b1a5044cfb52a873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20013de2abb95bc024f55163b1a5044cfb52a873", "html_url": "https://github.com/rust-lang/rust/commit/20013de2abb95bc024f55163b1a5044cfb52a873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20013de2abb95bc024f55163b1a5044cfb52a873/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2ba2791d57123248141a3066071180f4255b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2ba2791d57123248141a3066071180f4255b1c", "html_url": "https://github.com/rust-lang/rust/commit/cf2ba2791d57123248141a3066071180f4255b1c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "104a4d78a6e9c12508df1c4570d04a4ada7ac56e", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20013de2abb95bc024f55163b1a5044cfb52a873/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20013de2abb95bc024f55163b1a5044cfb52a873/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=20013de2abb95bc024f55163b1a5044cfb52a873", "patch": "@@ -45,9 +45,9 @@ fn add_missing_impl_members_inner(\n     let trait_def = {\n         let file_id = ctx.frange.file_id;\n         let position = FilePosition { file_id, offset: impl_node.syntax().range().start() };\n-        let analyser = hir::SourceAnalyzer::new(ctx.db, position.file_id, impl_node.syntax());\n+        let analyzer = hir::SourceAnalyzer::new(ctx.db, position.file_id, impl_node.syntax());\n \n-        resolve_target_trait_def(ctx.db, &analyser, impl_node)?\n+        resolve_target_trait_def(ctx.db, &analyzer, impl_node)?\n     };\n \n     let missing_fns: Vec<_> = {"}, {"sha": "a8495ab01961249ac8648ee0e564e48e2fa2468f", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20013de2abb95bc024f55163b1a5044cfb52a873/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20013de2abb95bc024f55163b1a5044cfb52a873/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=20013de2abb95bc024f55163b1a5044cfb52a873", "patch": "@@ -17,19 +17,19 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let calling_node = FnCallNode::with_node(syntax, position.offset)?;\n     let name_ref = calling_node.name_ref()?;\n \n-    let analyser = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax());\n     let function = match calling_node {\n         FnCallNode::CallExpr(expr) => {\n             //FIXME: apply subst\n             let (callable_def, _subst) =\n-                analyser.type_of(db, expr.expr()?.into())?.as_callable()?;\n+                analyzer.type_of(db, expr.expr()?.into())?.as_callable()?;\n             match callable_def {\n                 hir::CallableDef::Function(it) => it,\n                 //FIXME: handle other callables\n                 _ => return None,\n             }\n         }\n-        FnCallNode::MethodCallExpr(expr) => analyser.resolve_method_call(expr)?,\n+        FnCallNode::MethodCallExpr(expr) => analyzer.resolve_method_call(expr)?,\n     };\n \n     let mut call_info = CallInfo::new(db, function);"}, {"sha": "91799f8b55ae4bc3b989a4e131b690bfaf126434", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20013de2abb95bc024f55163b1a5044cfb52a873/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20013de2abb95bc024f55163b1a5044cfb52a873/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=20013de2abb95bc024f55163b1a5044cfb52a873", "patch": "@@ -60,7 +60,7 @@ fn reparse_fuzz_tests() {\n     }\n }\n \n-/// Test that Rust-analyzer can parse and validate the rust-analyser\n+/// Test that Rust-analyzer can parse and validate the rust-analyzer\n /// FIXME: Use this as a benchmark\n #[test]\n fn self_hosting_parsing() {"}]}