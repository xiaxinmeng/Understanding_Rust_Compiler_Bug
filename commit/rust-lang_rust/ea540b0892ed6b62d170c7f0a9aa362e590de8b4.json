{"sha": "ea540b0892ed6b62d170c7f0a9aa362e590de8b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNTQwYjA4OTJlZDZiNjJkMTcwYzdmMGE5YWEzNjJlNTkwZGU4YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-20T10:51:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-20T10:51:26Z"}, "message": "Auto merge of #66392 - estebank:trait-alias-ice, r=eddyb\n\nDo not ICE on trait aliases with missing obligations\n\nFix #65673.", "tree": {"sha": "d837319ab59d47cd410f04d3e2eb50f7a6abf1ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d837319ab59d47cd410f04d3e2eb50f7a6abf1ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea540b0892ed6b62d170c7f0a9aa362e590de8b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea540b0892ed6b62d170c7f0a9aa362e590de8b4", "html_url": "https://github.com/rust-lang/rust/commit/ea540b0892ed6b62d170c7f0a9aa362e590de8b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea540b0892ed6b62d170c7f0a9aa362e590de8b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "html_url": "https://github.com/rust-lang/rust/commit/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec"}, {"sha": "0ff73535ed0044c517697fa3527da3f52069dc3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff73535ed0044c517697fa3527da3f52069dc3d", "html_url": "https://github.com/rust-lang/rust/commit/0ff73535ed0044c517697fa3527da3f52069dc3d"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "a33b2e32c86585d6d499052fbc32152a60a00a33", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ea540b0892ed6b62d170c7f0a9aa362e590de8b4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea540b0892ed6b62d170c7f0a9aa362e590de8b4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ea540b0892ed6b62d170c7f0a9aa362e590de8b4", "patch": "@@ -1224,16 +1224,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         )\n     }\n \n-    /// Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n-    /// removing the dummy `Self` type (`trait_object_dummy_self`).\n-    fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)\n-                                -> ty::ExistentialTraitRef<'tcx> {\n-        if trait_ref.self_ty() != self.tcx().types.trait_object_dummy_self {\n-            bug!(\"trait_ref_to_existential called on {:?} with non-dummy Self\", trait_ref);\n-        }\n-        ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n-    }\n-\n     fn conv_object_ty_poly_trait_ref(&self,\n         span: Span,\n         trait_bounds: &[hir::PolyTraitRef],\n@@ -1415,13 +1405,30 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         debug!(\"regular_traits: {:?}\", regular_traits);\n         debug!(\"auto_traits: {:?}\", auto_traits);\n \n+        // Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n+        // removing the dummy `Self` type (`trait_object_dummy_self`).\n+        let trait_ref_to_existential = |trait_ref: ty::TraitRef<'tcx>| {\n+            if trait_ref.self_ty() != dummy_self {\n+                // FIXME: There appears to be a missing filter on top of `expand_trait_aliases`,\n+                // which picks up non-supertraits where clauses - but also, the object safety\n+                // completely ignores trait aliases, which could be object safety hazards. We\n+                // `delay_span_bug` here to avoid an ICE in stable even when the feature is\n+                // disabled. (#66420)\n+                tcx.sess.delay_span_bug(DUMMY_SP, &format!(\n+                    \"trait_ref_to_existential called on {:?} with non-dummy Self\",\n+                    trait_ref,\n+                ));\n+            }\n+            ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n+        };\n+\n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n         let existential_trait_refs = regular_traits.iter().map(|i| {\n-            i.trait_ref().map_bound(|trait_ref| self.trait_ref_to_existential(trait_ref))\n+            i.trait_ref().map_bound(|trait_ref| trait_ref_to_existential(trait_ref))\n         });\n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n-                let trait_ref = self.trait_ref_to_existential(b.projection_ty.trait_ref(tcx));\n+                let trait_ref = trait_ref_to_existential(b.projection_ty.trait_ref(tcx));\n                 ty::ExistentialProjection {\n                     ty: b.ty,\n                     item_def_id: b.projection_ty.item_def_id,"}, {"sha": "4b47bd493a5680659e3d21d99addecadad9e9760", "filename": "src/test/ui/issues/issue-65673.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea540b0892ed6b62d170c7f0a9aa362e590de8b4/src%2Ftest%2Fui%2Fissues%2Fissue-65673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea540b0892ed6b62d170c7f0a9aa362e590de8b4/src%2Ftest%2Fui%2Fissues%2Fissue-65673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.rs?ref=ea540b0892ed6b62d170c7f0a9aa362e590de8b4", "patch": "@@ -0,0 +1,12 @@\n+#![feature(trait_alias)] // Enabled to reduce stderr output, but can be triggered even if disabled.\n+trait Trait {}\n+trait WithType {\n+    type Ctx;\n+}\n+trait Alias<T> = where T: Trait;\n+\n+impl<T> WithType for T {\n+    type Ctx = dyn Alias<T>;\n+//~^ ERROR the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+}\n+fn main() {}"}, {"sha": "a556e35b6a944d902b963dab0da8105f9060abe7", "filename": "src/test/ui/issues/issue-65673.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ea540b0892ed6b62d170c7f0a9aa362e590de8b4/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea540b0892ed6b62d170c7f0a9aa362e590de8b4/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr?ref=ea540b0892ed6b62d170c7f0a9aa362e590de8b4", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+  --> $DIR/issue-65673.rs:9:5\n+   |\n+LL |     type Ctx;\n+   |          --- associated type defined here\n+...\n+LL | impl<T> WithType for T {\n+   | ---------------------- in this `impl` item\n+LL |     type Ctx = dyn Alias<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}