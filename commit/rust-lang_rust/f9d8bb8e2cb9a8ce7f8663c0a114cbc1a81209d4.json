{"sha": "f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDhiYjhlMmNiOWE4Y2U3Zjg2NjNjMGExMTRjYmMxYTgxMjA5ZDQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-21T13:43:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Simplify `fudge_inference_if_ok`", "tree": {"sha": "5555864d0f3a7d1d5aca7891336626e87680709f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5555864d0f3a7d1d5aca7891336626e87680709f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4", "html_url": "https://github.com/rust-lang/rust/commit/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac94858e32bdf7a8d00126e8d901dfd44e2df508", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac94858e32bdf7a8d00126e8d901dfd44e2df508", "html_url": "https://github.com/rust-lang/rust/commit/ac94858e32bdf7a8d00126e8d901dfd44e2df508"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "f21fb603cb599098e6f05532229a25b252f2c670", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"fudge_inference_if_ok(origin={:?})\", origin);\n \n-        let (type_vars, int_vars, float_vars, region_vars, value) = self.probe(|snapshot| {\n+        let (mut fudger, value) = self.probe(|snapshot| {\n             match f() {\n                 Ok(value) => {\n                     let value = self.resolve_type_vars_if_possible(&value);\n@@ -80,7 +80,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         &snapshot.region_constraints_snapshot,\n                     );\n \n-                    Ok((type_vars, int_vars, float_vars, region_vars, value))\n+                    let fudger = InferenceFudger {\n+                        infcx: self,\n+                        type_vars,\n+                        int_vars,\n+                        float_vars,\n+                        region_vars,\n+                        origin,\n+                    };\n+\n+                    Ok((fudger, value))\n                 }\n                 Err(e) => Err(e),\n             }\n@@ -93,32 +102,23 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // Micro-optimization: if no variables have been created, then\n         // `value` can't refer to any of them. =) So we can just return it.\n-        if type_vars.is_empty() &&\n-            int_vars.is_empty() &&\n-            float_vars.is_empty() &&\n-            region_vars.is_empty() {\n+        if fudger.type_vars.is_empty() &&\n+            fudger.int_vars.is_empty() &&\n+            fudger.float_vars.is_empty() &&\n+            fudger.region_vars.is_empty() {\n             return Ok(value);\n         }\n \n-        let mut fudger = InferenceFudger {\n-            infcx: self,\n-            type_vars: &type_vars,\n-            int_vars: &int_vars,\n-            float_vars: &float_vars,\n-            region_vars: &region_vars,\n-            origin,\n-        };\n-\n         Ok(value.fold_with(&mut fudger))\n     }\n }\n \n pub struct InferenceFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    type_vars: &'a Range<TyVid>,\n-    int_vars: &'a Range<IntVid>,\n-    float_vars: &'a Range<FloatVid>,\n-    region_vars: &'a Range<RegionVid>,\n+    type_vars: Range<TyVid>,\n+    int_vars: Range<IntVid>,\n+    float_vars: Range<FloatVid>,\n+    region_vars: Range<RegionVid>,\n     origin: &'a RegionVariableOrigin,\n }\n "}]}