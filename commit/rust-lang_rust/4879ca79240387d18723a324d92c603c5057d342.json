{"sha": "4879ca79240387d18723a324d92c603c5057d342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzljYTc5MjQwMzg3ZDE4NzIzYTMyNGQ5MmM2MDNjNTA1N2QzNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-07T15:56:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-07T15:56:43Z"}, "message": "auto merge of #15831 : rpjohnst/rust/generic-foreign-fns, r=alexcrichton\n\nThis allows for things like this:\r\n\r\n    extern \"C\" fn callback<T>(t: T) { /* ... */ }\r\n    extern \"C\" {\r\n        fn take_callback(c: extern fn(i32));\r\n    }\r\n\r\nand later:\r\n\r\n    take_callback(callback::<i32>);\r\n\r\nCloses #12502.", "tree": {"sha": "adfdb1b0630901cdfa95bf70bdce4134dc63cb02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfdb1b0630901cdfa95bf70bdce4134dc63cb02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4879ca79240387d18723a324d92c603c5057d342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4879ca79240387d18723a324d92c603c5057d342", "html_url": "https://github.com/rust-lang/rust/commit/4879ca79240387d18723a324d92c603c5057d342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4879ca79240387d18723a324d92c603c5057d342/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a02304a44bc9d1939b847b824006fcde99ec9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a02304a44bc9d1939b847b824006fcde99ec9e6", "html_url": "https://github.com/rust-lang/rust/commit/8a02304a44bc9d1939b847b824006fcde99ec9e6"}, {"sha": "f7aadee14ef4c0cf67771664de8d95eac0023de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7aadee14ef4c0cf67771664de8d95eac0023de8", "html_url": "https://github.com/rust-lang/rust/commit/f7aadee14ef4c0cf67771664de8d95eac0023de8"}], "stats": {"total": 319, "additions": 256, "deletions": 63}, "files": [{"sha": "9b31d3a1b6460f7fe55a7266268568f0479dfee2", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -1755,7 +1755,8 @@ fn encode_reachable_extern_fns(ecx: &EncodeContext, rbml_w: &mut Encoder) {\n         match ecx.tcx.map.find(*id) {\n             Some(ast_map::NodeItem(i)) => {\n                 match i.node {\n-                    ast::ItemFn(_, _, abi, _, _) if abi != abi::Rust => {\n+                    ast::ItemFn(_, _, abi, ref generics, _)\n+                                if abi != abi::Rust && !generics.is_type_parameterized() => {\n                         rbml_w.wr_tagged_u32(tag_reachable_extern_fn_id, *id);\n                     }\n                     _ => {}"}, {"sha": "7237ebeb151ae0170bec7769b1fa98a99aeb0c52", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -171,7 +171,7 @@ impl<'a> Drop for StatRecorder<'a> {\n }\n \n // only use this for foreign function ABIs and glue, use `decl_rust_fn` for Rust functions\n-fn decl_fn(ccx: &CrateContext, name: &str, cc: llvm::CallConv,\n+pub fn decl_fn(ccx: &CrateContext, name: &str, cc: llvm::CallConv,\n            ty: Type, output: ty::t) -> ValueRef {\n \n     let llfn: ValueRef = name.with_c_str(|buf| {\n@@ -1922,20 +1922,27 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n     let _icx = push_ctxt(\"trans_item\");\n     match item.node {\n       ast::ItemFn(ref decl, _fn_style, abi, ref generics, ref body) => {\n-        if abi != Rust {\n-            let llfndecl = get_item_val(ccx, item.id);\n-            foreign::trans_rust_fn_with_foreign_abi(\n-                ccx, &**decl, &**body, item.attrs.as_slice(), llfndecl, item.id);\n-        } else if !generics.is_type_parameterized() {\n+        if !generics.is_type_parameterized() {\n             let llfn = get_item_val(ccx, item.id);\n-            trans_fn(ccx,\n-                     &**decl,\n-                     &**body,\n-                     llfn,\n-                     &param_substs::empty(),\n-                     item.id,\n-                     item.attrs.as_slice(),\n-                     TranslateItems);\n+            if abi != Rust {\n+                foreign::trans_rust_fn_with_foreign_abi(ccx,\n+                                                        &**decl,\n+                                                        &**body,\n+                                                        item.attrs.as_slice(),\n+                                                        llfn,\n+                                                        &param_substs::empty(),\n+                                                        item.id,\n+                                                        None);\n+            } else {\n+                trans_fn(ccx,\n+                         &**decl,\n+                         &**body,\n+                         llfn,\n+                         &param_substs::empty(),\n+                         item.id,\n+                         item.attrs.as_slice(),\n+                         TranslateItems);\n+            }\n         } else {\n             // Be sure to travel more than just one layer deep to catch nested\n             // items in blocks and such."}, {"sha": "93e357205484882469235feb5616aa8391fb20e5", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -24,6 +24,7 @@ use middle::trans::type_of::*;\n use middle::trans::type_of;\n use middle::ty::FnSig;\n use middle::ty;\n+use middle::subst::Subst;\n use std::cmp;\n use libc::c_uint;\n use syntax::abi::{Cdecl, Aapcs, C, Win64, Abi};\n@@ -525,6 +526,26 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) {\n // inline the one into the other. Of course we could just generate the\n // correct code in the first place, but this is much simpler.\n \n+pub fn decl_rust_fn_with_foreign_abi(ccx: &CrateContext,\n+                                     t: ty::t,\n+                                     name: &str)\n+                                     -> ValueRef {\n+    let tys = foreign_types_for_fn_ty(ccx, t);\n+    let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n+    let cconv = match ty::get(t).sty {\n+        ty::ty_bare_fn(ref fn_ty) => {\n+            let c = llvm_calling_convention(ccx, fn_ty.abi);\n+            c.unwrap_or(llvm::CCallConv)\n+        }\n+        _ => fail!(\"expected bare fn in decl_rust_fn_with_foreign_abi\")\n+    };\n+    let llfn = base::decl_fn(ccx, name, cconv, llfn_ty, ty::mk_nil());\n+    add_argument_attributes(&tys, llfn);\n+    debug!(\"decl_rust_fn_with_foreign_abi(llfn_ty={}, llfn={})\",\n+           ccx.tn.type_to_string(llfn_ty), ccx.tn.val_to_string(llfn));\n+    llfn\n+}\n+\n pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                                          sp: Span,\n                                          sym: String,\n@@ -554,31 +575,39 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                                       body: &ast::Block,\n                                       attrs: &[ast::Attribute],\n                                       llwrapfn: ValueRef,\n-                                      id: ast::NodeId) {\n+                                      param_substs: &param_substs,\n+                                      id: ast::NodeId,\n+                                      hash: Option<&str>) {\n     let _icx = push_ctxt(\"foreign::build_foreign_fn\");\n-    let tys = foreign_types_for_id(ccx, id);\n+\n+    let fnty = ty::node_id_to_type(ccx.tcx(), id);\n+    let mty = fnty.subst(ccx.tcx(), &param_substs.substs);\n+    let tys = foreign_types_for_fn_ty(ccx, mty);\n \n     unsafe { // unsafe because we call LLVM operations\n         // Build up the Rust function (`foo0` above).\n-        let llrustfn = build_rust_fn(ccx, decl, body, attrs, id);\n+        let llrustfn = build_rust_fn(ccx, decl, body, param_substs, attrs, id, hash);\n \n         // Build up the foreign wrapper (`foo` above).\n-        return build_wrap_fn(ccx, llrustfn, llwrapfn, &tys, id);\n+        return build_wrap_fn(ccx, llrustfn, llwrapfn, &tys, mty);\n     }\n \n     fn build_rust_fn(ccx: &CrateContext,\n                      decl: &ast::FnDecl,\n                      body: &ast::Block,\n+                     param_substs: &param_substs,\n                      attrs: &[ast::Attribute],\n-                     id: ast::NodeId)\n+                     id: ast::NodeId,\n+                     hash: Option<&str>)\n                      -> ValueRef {\n         let _icx = push_ctxt(\"foreign::foreign::build_rust_fn\");\n         let tcx = ccx.tcx();\n-        let t = ty::node_id_to_type(tcx, id);\n+        let t = ty::node_id_to_type(tcx, id).subst(\n+            ccx.tcx(), &param_substs.substs);\n \n         let ps = ccx.tcx.map.with_path(id, |path| {\n             let abi = Some(ast_map::PathName(special_idents::clownshoe_abi.name));\n-            link::mangle(path.chain(abi.move_iter()), None)\n+            link::mangle(path.chain(abi.move_iter()), hash)\n         });\n \n         // Compute the type that the function would have if it were just a\n@@ -601,22 +630,19 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n         let llfn = base::decl_internal_rust_fn(ccx, t, ps.as_slice());\n         base::set_llvm_fn_attrs(attrs, llfn);\n-        base::trans_fn(ccx, decl, body, llfn, &param_substs::empty(), id, [],\n-                       TranslateItems);\n+        base::trans_fn(ccx, decl, body, llfn, param_substs, id, [], TranslateItems);\n         llfn\n     }\n \n     unsafe fn build_wrap_fn(ccx: &CrateContext,\n                             llrustfn: ValueRef,\n                             llwrapfn: ValueRef,\n                             tys: &ForeignTypes,\n-                            id: ast::NodeId) {\n+                            t: ty::t) {\n         let _icx = push_ctxt(\n             \"foreign::trans_rust_fn_with_foreign_abi::build_wrap_fn\");\n         let tcx = ccx.tcx();\n \n-        let t = ty::node_id_to_type(tcx, id);\n-\n         debug!(\"build_wrap_fn(llrustfn={}, llwrapfn={}, t={})\",\n                ccx.tn.val_to_string(llrustfn),\n                ccx.tn.val_to_string(llwrapfn),"}, {"sha": "97f0f1beeace6d2b0076ad10e08bf8af32a08211", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,6 +18,7 @@ use middle::trans::base::{trans_enum_variant, push_ctxt, get_item_val};\n use middle::trans::base::{trans_fn, decl_internal_rust_fn};\n use middle::trans::base;\n use middle::trans::common::*;\n+use middle::trans::foreign;\n use middle::ty;\n use middle::typeck;\n use util::ppaux::Repr;\n@@ -123,19 +124,29 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         monomorphizing.insert(fn_id, depth + 1);\n     }\n \n-    let s = ccx.tcx.map.with_path(fn_id.node, |path| {\n+    let hash;\n+    let s = {\n         let mut state = sip::SipState::new();\n         hash_id.hash(&mut state);\n         mono_ty.hash(&mut state);\n \n-        exported_name(path, format!(\"h{}\", state.result()).as_slice())\n-    });\n+        hash = format!(\"h{}\", state.result());\n+        ccx.tcx.map.with_path(fn_id.node, |path| {\n+            exported_name(path, hash.as_slice())\n+        })\n+    };\n+\n     debug!(\"monomorphize_fn mangled to {}\", s);\n \n     // This shouldn't need to option dance.\n     let mut hash_id = Some(hash_id);\n-    let mk_lldecl = || {\n-        let lldecl = decl_internal_rust_fn(ccx, mono_ty, s.as_slice());\n+    let mk_lldecl = |abi: abi::Abi| {\n+        let lldecl = if abi != abi::Rust {\n+            foreign::decl_rust_fn_with_foreign_abi(ccx, mono_ty, s.as_slice())\n+        } else {\n+            decl_internal_rust_fn(ccx, mono_ty, s.as_slice())\n+        };\n+\n         ccx.monomorphized.borrow_mut().insert(hash_id.take_unwrap(), lldecl);\n         lldecl\n     };\n@@ -144,13 +155,21 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ast_map::NodeItem(i) => {\n             match *i {\n               ast::Item {\n-                  node: ast::ItemFn(ref decl, _, _, _, ref body),\n+                  node: ast::ItemFn(ref decl, _, abi, _, ref body),\n                   ..\n               } => {\n-                  let d = mk_lldecl();\n+                  let d = mk_lldecl(abi);\n                   set_llvm_fn_attrs(i.attrs.as_slice(), d);\n-                  trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, [],\n-                           IgnoreItems);\n+\n+                  if abi != abi::Rust {\n+                      foreign::trans_rust_fn_with_foreign_abi(\n+                          ccx, &**decl, &**body, [], d, &psubsts, fn_id.node,\n+                          Some(hash.as_slice()));\n+                  } else {\n+                      trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, [],\n+                               IgnoreItems);\n+                  }\n+\n                   d\n               }\n               _ => {\n@@ -162,7 +181,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n             let parent = ccx.tcx.map.get_parent(fn_id.node);\n             let tvs = ty::enum_variants(ccx.tcx(), local_def(parent));\n             let this_tv = tvs.iter().find(|tv| { tv.id.node == fn_id.node}).unwrap();\n-            let d = mk_lldecl();\n+            let d = mk_lldecl(abi::Rust);\n             set_inline_hint(d);\n             match v.node.kind {\n                 ast::TupleVariantKind(ref args) => {\n@@ -180,7 +199,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n             d\n         }\n         ast_map::NodeMethod(mth) => {\n-            let d = mk_lldecl();\n+            let d = mk_lldecl(abi::Rust);\n             set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n             trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d, &psubsts, mth.id, [],\n                      IgnoreItems);\n@@ -189,7 +208,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ast_map::NodeTraitMethod(method) => {\n             match *method {\n                 ast::Provided(mth) => {\n-                    let d = mk_lldecl();\n+                    let d = mk_lldecl(abi::Rust);\n                     set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n                     trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d,\n                              &psubsts, mth.id, [], IgnoreItems);\n@@ -202,7 +221,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n             }\n         }\n         ast_map::NodeStructCtor(struct_def) => {\n-            let d = mk_lldecl();\n+            let d = mk_lldecl(abi::Rust);\n             set_inline_hint(d);\n             base::trans_tuple_struct(ccx,\n                                      struct_def.fields.as_slice(),\n@@ -230,7 +249,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     ccx.monomorphizing.borrow_mut().insert(fn_id, depth);\n \n     debug!(\"leaving monomorphic fn {}\", ty::item_path_str(ccx.tcx(), fn_id));\n-    (lldecl, false)\n+    (lldecl, true)\n }\n \n // Used to identify cached monomorphized functions and vtables"}, {"sha": "a81c6344cc9c6014002af35656940c1511cbd1d6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -444,17 +444,6 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n     }\n }\n \n-fn ensure_generics_abi(ccx: &CrateCtxt,\n-                       span: Span,\n-                       abi: abi::Abi,\n-                       generics: &ast::Generics) {\n-    if generics.ty_params.len() > 0 &&\n-       !(abi == abi::Rust || abi == abi::RustIntrinsic) {\n-        span_err!(ccx.tcx.sess, span, E0123,\n-                  \"foreign functions may not use type parameters\");\n-    }\n-}\n-\n pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n     let tcx = ccx.tcx;\n     debug!(\"convert: item {} with id {}\", token::get_ident(it.ident), it.id);\n@@ -572,13 +561,8 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n         },\n         ast::ItemTy(_, ref generics) => {\n             ensure_no_ty_param_bounds(ccx, it.span, generics, \"type\");\n-            let pty = ty_of_item(ccx, it);\n-            write_ty_to_tcx(tcx, it.id, pty.ty);\n-        },\n-        ast::ItemFn(_, _, abi, ref generics, _) => {\n-            ensure_generics_abi(ccx, it.span, abi, generics);\n-            let pty = ty_of_item(ccx, it);\n-            write_ty_to_tcx(tcx, it.id, pty.ty);\n+            let tpt = ty_of_item(ccx, it);\n+            write_ty_to_tcx(tcx, it.id, tpt.ty);\n         },\n         _ => {\n             // This call populates the type cache with the converted type"}, {"sha": "a7140d1be87ad180ec66aeddf39a6aff5a3233a3", "filename": "src/test/compile-fail/generic-extern.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Fcompile-fail%2Fgeneric-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Fcompile-fail%2Fgeneric-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-extern.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern \"C\" fn foo<T>() {}  //~ERROR foreign functions may not use type parameters\n+extern {\n+    fn foo<T>(); //~ ERROR foreign items may not have type parameters\n+}\n \n fn main() {\n-    let _ = foo::<int>;\n+    foo::<i32>();\n }"}, {"sha": "f4ead18ee168d099953403fdeaa385cd97b13dca", "filename": "src/test/compile-fail/generic-no-mangle.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Fcompile-fail%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Fcompile-fail%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-no-mangle.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test this should fail to compile (#15844)\n+\n+#[no_mangle]\n+fn foo<T>() {} //~ ERROR generic functions must be mangled\n+\n+#[no_mangle]\n+extern fn foo<T>() {} //~ ERROR generic functions must be mangled\n+"}, {"sha": "a325acbf687b54d01868aded39450f79a904fe3e", "filename": "src/test/run-make/extern-fn-generic/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2FMakefile?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n+\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n+\t$(RUSTC) testcrate.rs -L $(TMPDIR)\n+\t$(RUSTC) test.rs -L $(TMPDIR)\n+\t$(call RUN,test) || exit 1"}, {"sha": "f23dd1eb1462cffe054ec7165139c4bf4c71fd7d", "filename": "src/test/run-make/extern-fn-generic/test.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,16 @@\n+#include <stdint.h>\n+\n+typedef struct TestStruct {\n+\tuint8_t x;\n+\tint32_t y;\n+} TestStruct;\n+\n+typedef int callback(TestStruct s);\n+\n+uint32_t call(callback *c) {\n+\tTestStruct s;\n+\ts.x = 'a';\n+\ts.y = 3;\n+\n+\treturn c(s);\n+}"}, {"sha": "ee0485683ecc801aae74d74267d2631d7d863fdf", "filename": "src/test/run-make/extern-fn-generic/test.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate testcrate;\n+\n+extern \"C\" fn bar<T>(ts: testcrate::TestStruct<T>) -> T { ts.y }\n+\n+#[link(name = \"test\")]\n+extern {\n+    fn call(c: extern \"C\" fn(testcrate::TestStruct<i32>) -> i32) -> i32;\n+}\n+\n+fn main() {\n+    // Let's test calling it cross crate\n+    let back = unsafe {\n+        testcrate::call(testcrate::foo::<i32>)\n+    };\n+    assert_eq!(3, back);\n+\n+    // And just within this crate\n+    let back = unsafe {\n+        call(bar::<i32>)\n+    };\n+    assert_eq!(3, back);\n+}"}, {"sha": "5fd61bb419ca9f0b9bdac3da0caf8b509087d970", "filename": "src/test/run-make/extern-fn-generic/testcrate.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftestcrate.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+#[repr(C)]\n+pub struct TestStruct<T> {\n+    pub x: u8,\n+    pub y: T\n+}\n+\n+pub extern \"C\" fn foo<T>(ts: TestStruct<T>) -> T { ts.y }\n+\n+#[link(name = \"test\")]\n+extern {\n+    pub fn call(c: extern \"C\" fn(TestStruct<i32>) -> i32) -> i32;\n+}"}, {"sha": "ea6971853fe998aa42fc23e3d7421f300a71ef9f", "filename": "src/test/run-make/extern-fn-mangle/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2FMakefile?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n+\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n+\t$(RUSTC) test.rs -L $(TMPDIR)\n+\t$(call RUN,test) || exit 1"}, {"sha": "8d93917ade03ea4f8d1c67e8b54a80b725341abb", "filename": "src/test/run-make/extern-fn-mangle/test.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,8 @@\n+#include <stdint.h>\n+\n+uint32_t foo();\n+uint32_t bar();\n+\n+uint32_t add() {\n+\treturn foo() + bar();\n+}"}, {"sha": "35b5a9278a4295d629dd35467cc8142f8b79a629", "filename": "src/test/run-make/extern-fn-mangle/test.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo() -> i32 { 3 }\n+\n+#[no_mangle]\n+pub extern \"C\" fn bar() -> i32 { 5 }\n+\n+#[link(name = \"test\", kind = \"static\")]\n+extern {\n+    fn add() -> i32;\n+}\n+\n+fn main() {\n+    let back = unsafe { add() };\n+    assert_eq!(8, back);\n+}"}, {"sha": "69846750afc0fb259bf9453b5fc49ca246c7b956", "filename": "src/test/run-pass/generic-extern-mangle.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879ca79240387d18723a324d92c603c5057d342/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs?ref=4879ca79240387d18723a324d92c603c5057d342", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern \"C\" fn foo<T: Int>(a: T, b: T) -> T { a + b }\n+\n+fn main() {\n+    assert_eq!(99u8, foo(255u8, 100u8));\n+    assert_eq!(99u16, foo(65535u16, 100u16));\n+}"}]}