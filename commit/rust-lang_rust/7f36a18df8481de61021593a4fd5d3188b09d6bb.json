{"sha": "7f36a18df8481de61021593a4fd5d3188b09d6bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzZhMThkZjg0ODFkZTYxMDIxNTkzYTRmZDVkMzE4OGIwOWQ2YmI=", "commit": {"author": {"name": "Nathan", "email": "nathanrsizemore@gmail.com", "date": "2015-11-10T00:43:12Z"}, "committer": {"name": "Nathan", "email": "nathanrsizemore@gmail.com", "date": "2016-01-02T05:25:42Z"}, "message": "Added platform notes to std::fs public functions.", "tree": {"sha": "99f8a3f513cd5ef6e4ce6391f6d1156e22e3956b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f8a3f513cd5ef6e4ce6391f6d1156e22e3956b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f36a18df8481de61021593a4fd5d3188b09d6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f36a18df8481de61021593a4fd5d3188b09d6bb", "html_url": "https://github.com/rust-lang/rust/commit/7f36a18df8481de61021593a4fd5d3188b09d6bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f36a18df8481de61021593a4fd5d3188b09d6bb/comments", "author": {"login": "nathansizemore", "id": 3423825, "node_id": "MDQ6VXNlcjM0MjM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3423825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathansizemore", "html_url": "https://github.com/nathansizemore", "followers_url": "https://api.github.com/users/nathansizemore/followers", "following_url": "https://api.github.com/users/nathansizemore/following{/other_user}", "gists_url": "https://api.github.com/users/nathansizemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathansizemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathansizemore/subscriptions", "organizations_url": "https://api.github.com/users/nathansizemore/orgs", "repos_url": "https://api.github.com/users/nathansizemore/repos", "events_url": "https://api.github.com/users/nathansizemore/events{/privacy}", "received_events_url": "https://api.github.com/users/nathansizemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathansizemore", "id": 3423825, "node_id": "MDQ6VXNlcjM0MjM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3423825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathansizemore", "html_url": "https://github.com/nathansizemore", "followers_url": "https://api.github.com/users/nathansizemore/followers", "following_url": "https://api.github.com/users/nathansizemore/following{/other_user}", "gists_url": "https://api.github.com/users/nathansizemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathansizemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathansizemore/subscriptions", "organizations_url": "https://api.github.com/users/nathansizemore/orgs", "repos_url": "https://api.github.com/users/nathansizemore/repos", "events_url": "https://api.github.com/users/nathansizemore/events{/privacy}", "received_events_url": "https://api.github.com/users/nathansizemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4b67cd7cce8e29b22082bc9bc3a667ba3b2e036", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b67cd7cce8e29b22082bc9bc3a667ba3b2e036", "html_url": "https://github.com/rust-lang/rust/commit/d4b67cd7cce8e29b22082bc9bc3a667ba3b2e036"}], "stats": {"total": 200, "additions": 165, "deletions": 35}, "files": [{"sha": "276d6efd8ac2969f74eec4a4845a60f6270b4022", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 165, "deletions": 35, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/7f36a18df8481de61021593a4fd5d3188b09d6bb/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f36a18df8481de61021593a4fd5d3188b09d6bb/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=7f36a18df8481de61021593a4fd5d3188b09d6bb", "patch": "@@ -758,11 +758,19 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n /// guarantee that the file is immediately deleted (e.g. depending on\n /// platform, other open file descriptors may prevent immediate removal).\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `unlink` function on Unix\n+/// and the `DeleteFile` function on Windows. Note that, this\n+/// [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n-/// This function will return an error if `path` points to a directory, if the\n-/// user lacks permissions to remove the file, or if some other filesystem-level\n-/// error occurs.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` points to a directory\n+/// * The user lacks permissions to remove the file\n ///\n /// # Examples\n ///\n@@ -785,6 +793,20 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function will traverse symbolic links to query information about the\n /// destination file.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `stat` function on Unix\n+/// and the `GetFileAttributesEx` function on Windows. Note that, this\n+/// [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The user lacks permissions to perform `metadata` call on `path`\n+/// * `path` does not exist\n+///\n /// # Examples\n ///\n /// ```rust\n@@ -796,19 +818,27 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// # Ok(())\n /// # }\n /// ```\n-///\n-/// # Errors\n-///\n-/// This function will return an error if the user lacks the requisite\n-/// permissions to perform a `metadata` call on the given `path` or if there\n-/// is no entry in the filesystem at the provided path.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n     fs_imp::stat(path.as_ref()).map(Metadata)\n }\n \n /// Query the metadata about a file without following symlinks.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `lstat` function on Unix\n+/// and the `GetFileAttributesEx` function on Windows. Note that, this\n+/// [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The user lacks permissions to perform `metadata` call on `path`\n+/// * `path` does not exist\n+///\n /// # Examples\n ///\n /// ```rust\n@@ -829,12 +859,20 @@ pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n ///\n /// This will not work if the new name is on a different mount point.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `rename` function on Unix\n+/// and the `MoveFileEx` function with the `MOVEFILE_REPLACE_EXISTING` flag on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n-/// This function will return an error if the provided `from` doesn't exist, if\n-/// the process lacks permissions to view the contents, if `from` and `to`\n-/// reside on separate filesystems, or if some other intermittent I/O error\n-/// occurs.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `from` does not exist\n+/// * The user lacks permissions to view contents\n+/// * `from` and `to` are on separate filesystems\n ///\n /// # Examples\n ///\n@@ -861,6 +899,14 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n ///\n /// On success, the total number of bytes copied is returned.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `open` function in Unix\n+/// with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`.\n+/// `O_CLOEXEC` is set for returned file descriptors.\n+/// On Windows, this function currently corresponds to `CopyFileEx`.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n /// This function will return an error in the following situations, but is not\n@@ -890,6 +936,19 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n /// The `dst` path will be a link pointing to the `src` path. Note that systems\n /// often require these two paths to both be located on the same filesystem.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `link` function on Unix\n+/// and the `CreateHardLink` function on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The `src` path is not a file or doesn't exist\n+///\n /// # Examples\n ///\n /// ```\n@@ -933,11 +992,20 @@ pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n \n /// Reads a symbolic link, returning the file that the link points to.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `readlink` function on Unix\n+/// and the `CreateFile` function with `FILE_FLAG_OPEN_REPARSE_POINT` and\n+/// `FILE_FLAG_BACKUP_SEMANTICS` flags on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n-/// This function will return an error on failure. Failure conditions include\n-/// reading a file that does not exist or reading a file that is not a symbolic\n-/// link.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` is not a symbolic link\n+/// * `path` does not exist\n ///\n /// # Examples\n ///\n@@ -957,8 +1025,19 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// Returns the canonical form of a path with all intermediate components\n /// normalized and symbolic links resolved.\n ///\n-/// This function may return an error in situations like where the path does not\n-/// exist, a component in the path is not a directory, or an I/O error happens.\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `realpath` function on Unix\n+/// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` does not exist\n+/// * A component in path is not a directory\n ///\n /// # Examples\n ///\n@@ -977,10 +1056,19 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n \n /// Creates a new, empty directory at the provided path\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `mkdir` function on Unix\n+/// and the `CreateDirectory` function on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n-/// This function will return an error if the user lacks permissions to make a\n-/// new directory at the provided `path`, or if the directory already exists.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * User lacks permissions to create directory at `path`\n+/// * `path` already exists\n ///\n /// # Examples\n ///\n@@ -1000,9 +1088,18 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// Recursively create a directory and all of its parent components if they\n /// are missing.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `mkdir` function on Unix\n+/// and the `CreateDirectory` function on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n-/// This function will fail if any directory in the path specified by `path`\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * If any directory in the path specified by `path`\n /// does not already exist and it could not be created otherwise. The specific\n /// error conditions for when a directory is being created (after it is\n /// determined to not exist) are outlined by `fs::create_dir`.\n@@ -1024,10 +1121,19 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// Removes an existing, empty directory.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `rmdir` function on Unix\n+/// and the `RemoveDirectory` function on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n-/// This function will return an error if the user lacks permissions to remove\n-/// the directory at the provided `path`, or if the directory isn't empty.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The user lacks permissions to remove the directory at the provided `path`\n+/// * The directory isn't empty\n ///\n /// # Examples\n ///\n@@ -1050,6 +1156,13 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function does **not** follow symbolic links and it will simply remove the\n /// symbolic link itself.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to `opendir`, `lstat`, `rm` and `rmdir` functions on Unix\n+/// and the `FindFirstFile`, `GetFileAttributesEx`, `DeleteFile`, and `RemoveDirectory` functions\n+/// on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n /// # Errors\n ///\n /// See `file::remove_file` and `fs::remove_dir`.\n@@ -1087,6 +1200,21 @@ fn _remove_dir_all(path: &Path) -> io::Result<()> {\n /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n /// be encountered after an iterator is initially constructed.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `opendir` function on Unix\n+/// and the `FindFirstFile` function on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The provided `path` doesn't exist\n+/// * The process lacks permissions to view the contents\n+/// * The `path` points at a non-directory file\n+///\n /// # Examples\n ///\n /// ```\n@@ -1109,12 +1237,6 @@ fn _remove_dir_all(path: &Path) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n-///\n-/// # Errors\n-///\n-/// This function will return an error if the provided `path` doesn't exist, if\n-/// the process lacks permissions to view the contents or if the `path` points\n-/// at a non-directory file\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n     fs_imp::readdir(path.as_ref()).map(ReadDir)\n@@ -1180,6 +1302,20 @@ impl Iterator for WalkDir {\n \n /// Changes the permissions found on a file or a directory.\n ///\n+/// # Platform behavior\n+///\n+/// This function currently corresponds to the `chmod` function on Unix\n+/// and the `SetFileAttributes` function on Windows.\n+/// Note that, this [may change in the future.][https://github.com/rust-lang/rust/pull/28613]\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` does not exist\n+/// * The user lacks the permission to change attributes of the file\n+///\n /// # Examples\n ///\n /// ```\n@@ -1192,12 +1328,6 @@ impl Iterator for WalkDir {\n /// # Ok(())\n /// # }\n /// ```\n-///\n-/// # Errors\n-///\n-/// This function will return an error if the provided `path` doesn't exist, if\n-/// the process lacks permissions to change the attributes of the file, or if\n-/// some other I/O error is encountered.\n #[stable(feature = \"set_permissions\", since = \"1.1.0\")]\n pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)\n                                        -> io::Result<()> {"}]}