{"sha": "9ae26c86c202bd8fdada1141055e1e4bc026a60b", "node_id": "C_kwDOAAsO6NoAKDlhZTI2Yzg2YzIwMmJkOGZkYWRhMTE0MTA1NWUxZTRiYzAyNmE2MGI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-27T12:02:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-27T12:05:59Z"}, "message": "add ptr::from_{ref,mut}", "tree": {"sha": "af31ed83d3d50785c3173a41fefdbfe6008cd5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af31ed83d3d50785c3173a41fefdbfe6008cd5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae26c86c202bd8fdada1141055e1e4bc026a60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae26c86c202bd8fdada1141055e1e4bc026a60b", "html_url": "https://github.com/rust-lang/rust/commit/9ae26c86c202bd8fdada1141055e1e4bc026a60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae26c86c202bd8fdada1141055e1e4bc026a60b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8a2e491ebec34113563cf8683f6fec2646cebb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a2e491ebec34113563cf8683f6fec2646cebb1", "html_url": "https://github.com/rust-lang/rust/commit/f8a2e491ebec34113563cf8683f6fec2646cebb1"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "2d793d43e62e743726007c9cbad7ba58de4a04ec", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9ae26c86c202bd8fdada1141055e1e4bc026a60b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae26c86c202bd8fdada1141055e1e4bc026a60b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=9ae26c86c202bd8fdada1141055e1e4bc026a60b", "patch": "@@ -516,6 +516,27 @@ pub const fn null<T: ?Sized + Thin>() -> *const T {\n     from_raw_parts(invalid(0), ())\n }\n \n+/// Creates a null mutable raw pointer.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let p: *mut i32 = ptr::null_mut();\n+/// assert!(p.is_null());\n+/// ```\n+#[inline(always)]\n+#[must_use]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_promotable]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_allow_const_fn_unstable(ptr_metadata)]\n+#[rustc_diagnostic_item = \"ptr_null_mut\"]\n+pub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\n+    from_raw_parts_mut(invalid_mut(0), ())\n+}\n+\n /// Creates an invalid pointer with the given address.\n ///\n /// This is different from `addr as *const T`, which creates a pointer that picks up a previously\n@@ -663,25 +684,26 @@ where\n     addr as *mut T\n }\n \n-/// Creates a null mutable raw pointer.\n+/// Convert a reference to a raw pointer.\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use std::ptr;\n+/// This is equivalent to `r as *const T`, but is a bit safer since it will never silently change\n+/// type or mutability, in particular if the code is refactored.\n+#[inline(always)]\n+#[must_use]\n+#[unstable(feature = \"ptr_from_ref\", issue = \"999999\")] // FIXME\n+pub fn from_ref<T: ?Sized>(r: &T) -> *const T {\n+    r\n+}\n+\n+/// Convert a mutble reference to a raw pointer.\n ///\n-/// let p: *mut i32 = ptr::null_mut();\n-/// assert!(p.is_null());\n-/// ```\n+/// This is equivalent to `r as *mut T`, but is a bit safer since it will never silently change\n+/// type or mutability, in particular if the code is refactored.\n #[inline(always)]\n #[must_use]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n-#[rustc_allow_const_fn_unstable(ptr_metadata)]\n-#[rustc_diagnostic_item = \"ptr_null_mut\"]\n-pub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\n-    from_raw_parts_mut(invalid_mut(0), ())\n+#[unstable(feature = \"ptr_from_ref\", issue = \"999999\")] // FIXME\n+pub fn from_mut<T: ?Sized>(r: &mut T) -> *mut T {\n+    r\n }\n \n /// Forms a raw slice from a pointer and a length."}]}