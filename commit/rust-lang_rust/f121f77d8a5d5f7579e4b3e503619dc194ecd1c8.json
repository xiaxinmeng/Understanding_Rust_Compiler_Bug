{"sha": "f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "node_id": "C_kwDOAAsO6NoAKGYxMjFmNzdkOGE1ZDVmNzU3OWU0YjNlNTAzNjE5ZGMxOTRlY2QxYzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-02T16:12:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-02T16:12:45Z"}, "message": "Rollup merge of #112165 - fee1-dead-contrib:rn-defualtness, r=compiler-errors\n\nRename `impl_defaultness` to `defaultness`\n\nSince this isn't just about the `impl`.", "tree": {"sha": "e5e8f5f5006da0cbaa1f1cb30b9717aaf1fd849d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e8f5f5006da0cbaa1f1cb30b9717aaf1fd849d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkehT9CRBK7hj4Ov3rIwAAOjQIAJA6rWzPNBUP7WFhMZfvkFBK\nS2HkN75sJIW0ZLRNDIMoSd8qD7JTZ3Gdt6gvJvCRSfrgYyB5o6C8WRx1lvQ6Ks1q\nZ3G2Nrd43CgdZt09d+2LNsYOg0bbLZA9S4t0uABNApEVmEa89oCnHwSL4vDmpa77\nK/D4RdJt4jN+5qOSqSWSp714+EJy87ZYTLtCwDX0dEtHALhW4Ra7FZemCHWgaUU+\nuxoig4+HPKDTLW5ri8/Xdm9Zbxn9y7/t+ksUbMOiUvFXuCgQiZViUBdx8fCEos9l\n857/yw6Peo/2HGYiBrVsHu++4RuuqDE5MBFAzQ8/BJEBKWPEIXlG7I/SQWsKf4Q=\n=0pIo\n-----END PGP SIGNATURE-----\n", "payload": "tree e5e8f5f5006da0cbaa1f1cb30b9717aaf1fd849d\nparent a3b639ce435f00df0db2c4729be4a205cbd7bb4d\nparent 21bc5cded401c04316ce52697533cf928c007c63\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685722365 +0200\ncommitter GitHub <noreply@github.com> 1685722365 +0200\n\nRollup merge of #112165 - fee1-dead-contrib:rn-defualtness, r=compiler-errors\n\nRename `impl_defaultness` to `defaultness`\n\nSince this isn't just about the `impl`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "html_url": "https://github.com/rust-lang/rust/commit/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b639ce435f00df0db2c4729be4a205cbd7bb4d", "html_url": "https://github.com/rust-lang/rust/commit/a3b639ce435f00df0db2c4729be4a205cbd7bb4d"}, {"sha": "21bc5cded401c04316ce52697533cf928c007c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/21bc5cded401c04316ce52697533cf928c007c63", "html_url": "https://github.com/rust-lang/rust/commit/21bc5cded401c04316ce52697533cf928c007c63"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "4a1f8ece7b28522a1e1fed10a3aec1a39112f21d", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -704,7 +704,7 @@ pub(super) fn check_specialization_validity<'tcx>(\n             // grandparent. In that case, if parent is a `default impl`, inherited items use the\n             // \"defaultness\" from the grandparent, else they are final.\n             None => {\n-                if tcx.impl_defaultness(parent_impl.def_id()).is_default() {\n+                if tcx.defaultness(parent_impl.def_id()).is_default() {\n                     None\n                 } else {\n                     Some(Err(parent_impl.def_id()))\n@@ -803,7 +803,7 @@ fn check_impl_items_against_trait<'tcx>(\n                 .as_ref()\n                 .is_some_and(|node_item| node_item.item.defaultness(tcx).has_value());\n \n-            if !is_implemented && tcx.impl_defaultness(impl_id).is_final() {\n+            if !is_implemented && tcx.defaultness(impl_id).is_final() {\n                 missing_items.push(tcx.associated_item(trait_item_id));\n             }\n "}, {"sha": "c7b9fc9a697f42eba2f43c73e6e097c1cf8e8ae0", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -941,7 +941,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::TraitDef {\n \n                 match item {\n                     Some(item) if matches!(item.kind, hir::AssocItemKind::Fn { .. }) => {\n-                        if !tcx.impl_defaultness(item.id.owner_id).has_value() {\n+                        if !tcx.defaultness(item.id.owner_id).has_value() {\n                             tcx.sess.emit_err(errors::FunctionNotHaveDefaultImplementation {\n                                 span: item.span,\n                                 note_span: attr_span,"}, {"sha": "e6fadd6cf4a850840891775a0b225cea5bee4e63", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -435,7 +435,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                     in_trait,\n                     ..\n                 }) => {\n-                    if in_trait && !tcx.impl_defaultness(owner).has_value() {\n+                    if in_trait && !tcx.defaultness(owner).has_value() {\n                         span_bug!(\n                             tcx.def_span(def_id),\n                             \"tried to get type of this RPITIT with no definition\""}, {"sha": "9a8fac0fc1be3cea576ceaac545b73817bb45c3b", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -586,7 +586,7 @@ fn foo(&self) -> Self::T { String::new() }\n                             // FIXME: account for returning some type in a trait fn impl that has\n                             // an assoc type as a return type (#72076).\n                             if let hir::Defaultness::Default { has_value: true } =\n-                                tcx.impl_defaultness(item.id.owner_id)\n+                                tcx.defaultness(item.id.owner_id)\n                             {\n                                 let assoc_ty = tcx.type_of(item.id.owner_id).subst_identity();\n                                 if self.infcx.can_eq(param_env, assoc_ty, found) {"}, {"sha": "243e4f5b659076929f33d85f25ce66e040767d0c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -231,7 +231,7 @@ provide! { tcx, def_id, other, cdata,\n     opt_def_kind => { table_direct }\n     impl_parent => { table }\n     impl_polarity => { table_direct }\n-    impl_defaultness => { table_direct }\n+    defaultness => { table_direct }\n     constness => { table_direct }\n     coerce_unsized_info => { table }\n     mir_const_qualif => { table }"}, {"sha": "05c9f154574b2dca615e96d82bae79c83eaf1b17", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -1437,8 +1437,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_trait_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let impl_defaultness = tcx.impl_defaultness(def_id.expect_local());\n-        self.tables.impl_defaultness.set_some(def_id.index, impl_defaultness);\n+        let defaultness = tcx.defaultness(def_id.expect_local());\n+        self.tables.defaultness.set_some(def_id.index, defaultness);\n         let trait_item = tcx.associated_item(def_id);\n         self.tables.assoc_container.set_some(def_id.index, trait_item.container);\n \n@@ -1466,8 +1466,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_impl_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let defaultness = self.tcx.impl_defaultness(def_id.expect_local());\n-        self.tables.impl_defaultness.set_some(def_id.index, defaultness);\n+        let defaultness = self.tcx.defaultness(def_id.expect_local());\n+        self.tables.defaultness.set_some(def_id.index, defaultness);\n         let impl_item = self.tcx.associated_item(def_id);\n         self.tables.assoc_container.set_some(def_id.index, impl_item.container);\n \n@@ -1653,7 +1653,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 );\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n-                self.tables.impl_defaultness.set_some(def_id.index, *defaultness);\n+                self.tables.defaultness.set_some(def_id.index, *defaultness);\n                 self.tables.constness.set_some(def_id.index, *constness);\n                 self.tables.impl_polarity.set_some(def_id.index, self.tcx.impl_polarity(def_id));\n "}, {"sha": "e9b67c70c477aa8b1bedafe0427cfd049badc93c", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -420,7 +420,7 @@ define_tables! {\n     impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n     constness: Table<DefIndex, hir::Constness>,\n-    impl_defaultness: Table<DefIndex, hir::Defaultness>,\n+    defaultness: Table<DefIndex, hir::Defaultness>,\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n     coerce_unsized_info: Table<DefIndex, LazyValue<ty::adjustment::CoerceUnsizedInfo>>,\n     mir_const_qualif: Table<DefIndex, LazyValue<mir::ConstQualifs>>,"}, {"sha": "45e0b498fac67df23057023806a634d4692c83ea", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -1475,8 +1475,9 @@ rustc_queries! {\n         desc { \"getting traits in scope at a block\" }\n     }\n \n-    query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n-        desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n+    /// Returns whether the impl or associated function has the `default` keyword.\n+    query defaultness(def_id: DefId) -> hir::Defaultness {\n+        desc { |tcx| \"looking up whether `{}` has `default`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n         feedable\n     }"}, {"sha": "dc2cd2035609467a0e310619c90fea6fadeef2b9", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -228,7 +228,7 @@ impl<'tcx> Ancestors<'tcx> {\n             if let Some(item) = node.item(tcx, trait_item_def_id) {\n                 if finalizing_node.is_none() {\n                     let is_specializable = item.defaultness(tcx).is_default()\n-                        || tcx.impl_defaultness(node.def_id()).is_default();\n+                        || tcx.defaultness(node.def_id()).is_default();\n \n                     if !is_specializable {\n                         finalizing_node = Some(node);"}, {"sha": "cce609c261e8dd68c81294be492a1e25702f6513", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -48,7 +48,7 @@ impl AssocItem {\n     ///\n     /// [`type_of`]: crate::ty::TyCtxt::type_of\n     pub fn defaultness(&self, tcx: TyCtxt<'_>) -> hir::Defaultness {\n-        tcx.impl_defaultness(self.def_id)\n+        tcx.defaultness(self.def_id)\n     }\n \n     #[inline]"}, {"sha": "0197b99c7db1995b73ecf306fd4d5d5f7e7c9ca7", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -751,7 +751,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                         reach.generics().predicates();\n \n                         if trait_item_ref.kind == AssocItemKind::Type\n-                            && !tcx.impl_defaultness(trait_item_ref.id.owner_id).has_value()\n+                            && !tcx.defaultness(trait_item_ref.id.owner_id).has_value()\n                         {\n                             // No type to visit.\n                         } else {\n@@ -1927,7 +1927,7 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n \n         let (check_ty, is_assoc_ty) = match assoc_item_kind {\n             AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),\n-            AssocItemKind::Type => (self.tcx.impl_defaultness(def_id).has_value(), true),\n+            AssocItemKind::Type => (self.tcx.defaultness(def_id).has_value(), true),\n         };\n         check.in_assoc_ty = is_assoc_ty;\n         check.generics().predicates();"}, {"sha": "537405b7eb91adb39fc6dee051d00bb51270c165", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -295,7 +295,7 @@ pub fn future_trait_ref_and_outputs<'tcx>(\n \n pub fn impl_item_is_final(tcx: TyCtxt<'_>, assoc_item: &ty::AssocItem) -> bool {\n     assoc_item.defaultness(tcx).is_final()\n-        && tcx.impl_defaultness(assoc_item.container_id(tcx)).is_final()\n+        && tcx.defaultness(assoc_item.container_id(tcx)).is_final()\n }\n \n pub enum TupleArgumentsFlag {"}, {"sha": "658ab03c0f48c6e59e4f03cd6094f5f6d7f24bc1", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -297,8 +297,8 @@ fn associated_type_for_impl_trait_in_trait(\n     // Copy visility of the containing function.\n     trait_assoc_ty.visibility(tcx.visibility(fn_def_id));\n \n-    // Copy impl_defaultness of the containing function.\n-    trait_assoc_ty.impl_defaultness(tcx.impl_defaultness(fn_def_id));\n+    // Copy defaultness of the containing function.\n+    trait_assoc_ty.defaultness(tcx.defaultness(fn_def_id));\n \n     // Copy type_of of the opaque.\n     trait_assoc_ty.type_of(ty::EarlyBinder::bind(tcx.mk_opaque(\n@@ -393,8 +393,8 @@ fn associated_type_for_impl_trait_in_impl(\n     // Copy visility of the containing function.\n     impl_assoc_ty.visibility(tcx.visibility(impl_fn_def_id));\n \n-    // Copy impl_defaultness of the containing function.\n-    impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n+    // Copy defaultness of the containing function.\n+    impl_assoc_ty.defaultness(tcx.defaultness(impl_fn_def_id));\n \n     // Copy generics_of the trait's associated item but the impl as the parent.\n     // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) resolves to the trait instead of the impl"}, {"sha": "dd911239ac451d068abdac5f1336d600be2939db", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -204,7 +204,7 @@ fn resolve_associated_item<'tcx>(\n             } else {\n                 // All other methods are default methods of the `Future` trait.\n                 // (this assumes that `ImplSource::Future` is only used for methods on `Future`)\n-                debug_assert!(tcx.impl_defaultness(trait_item_id).has_value());\n+                debug_assert!(tcx.defaultness(trait_item_id).has_value());\n                 Some(Instance::new(trait_item_id, rcvr_substs))\n             }\n         }"}, {"sha": "b367d81a2608ec6730aea17b1ebd789985ca2db3", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -75,13 +75,13 @@ fn sized_constraint_for_ty<'tcx>(\n     result\n }\n \n-fn impl_defaultness(tcx: TyCtxt<'_>, def_id: LocalDefId) -> hir::Defaultness {\n+fn defaultness(tcx: TyCtxt<'_>, def_id: LocalDefId) -> hir::Defaultness {\n     match tcx.hir().get_by_def_id(def_id) {\n         hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.defaultness,\n         hir::Node::ImplItem(hir::ImplItem { defaultness, .. })\n         | hir::Node::TraitItem(hir::TraitItem { defaultness, .. }) => *defaultness,\n         node => {\n-            bug!(\"`impl_defaultness` called on {:?}\", node);\n+            bug!(\"`defaultness` called on {:?}\", node);\n         }\n     }\n }\n@@ -574,7 +574,7 @@ pub fn provide(providers: &mut Providers) {\n         param_env_reveal_all_normalized,\n         instance_def_size_estimate,\n         issue33140_self_ty,\n-        impl_defaultness,\n+        defaultness,\n         unsizing_params_for_adt,\n         ..*providers\n     };"}, {"sha": "b84a9cf369c1a96b8788c9a2e2ca7a74b7205536", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -1224,7 +1224,7 @@ pub(crate) fn clean_impl_item<'tcx>(\n             }\n             hir::ImplItemKind::Fn(ref sig, body) => {\n                 let m = clean_function(cx, sig, impl_.generics, FunctionArgs::Body(body));\n-                let defaultness = cx.tcx.impl_defaultness(impl_.owner_id);\n+                let defaultness = cx.tcx.defaultness(impl_.owner_id);\n                 MethodItem(m, Some(defaultness))\n             }\n             hir::ImplItemKind::Type(hir_ty) => {\n@@ -1258,7 +1258,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n \n             let provided = match assoc_item.container {\n                 ty::ImplContainer => true,\n-                ty::TraitContainer => tcx.impl_defaultness(assoc_item.def_id).has_value(),\n+                ty::TraitContainer => tcx.defaultness(assoc_item.def_id).has_value(),\n             };\n             if provided {\n                 AssocConstItem(ty, ConstantKind::Extern { def_id: assoc_item.def_id })\n@@ -1440,7 +1440,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                 }\n                 generics.where_predicates = where_predicates;\n \n-                if tcx.impl_defaultness(assoc_item.def_id).has_value() {\n+                if tcx.defaultness(assoc_item.def_id).has_value() {\n                     AssocTypeItem(\n                         Box::new(Typedef {\n                             type_: clean_middle_ty("}, {"sha": "c31ba3304b0327648b095470e1d3e4a7c6714643", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -205,7 +205,7 @@ impl UrlFragment {\n             &UrlFragment::Item(def_id) => {\n                 let kind = match tcx.def_kind(def_id) {\n                     DefKind::AssocFn => {\n-                        if tcx.impl_defaultness(def_id).has_value() {\n+                        if tcx.defaultness(def_id).has_value() {\n                             \"method.\"\n                         } else {\n                             \"tymethod.\""}, {"sha": "a41d5a9ce8d2f1f02f2cb9f4d438744d6a18621f", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f121f77d8a5d5f7579e4b3e503619dc194ecd1c8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=f121f77d8a5d5f7579e4b3e503619dc194ecd1c8", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                     match tit_.kind {\n                         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => {},\n                         hir::TraitItemKind::Fn(..) => {\n-                            if cx.tcx.impl_defaultness(tit.id.owner_id).has_value() {\n+                            if cx.tcx.defaultness(tit.id.owner_id).has_value() {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";"}]}