{"sha": "c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNmRkMGUwYWZiNGI3OGFiNGU0ODJhNzQ4OGFkY2YxYzg2NWJkMTk=", "commit": {"author": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-08T07:55:27Z"}, "committer": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-08T07:55:27Z"}, "message": "Add dead-code warning pass", "tree": {"sha": "4850d80648a57d527feda65f921bdf47940111f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4850d80648a57d527feda65f921bdf47940111f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "html_url": "https://github.com/rust-lang/rust/commit/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/comments", "author": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b751dda19af57a2545a67879dd217e601b84c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b751dda19af57a2545a67879dd217e601b84c6", "html_url": "https://github.com/rust-lang/rust/commit/49b751dda19af57a2545a67879dd217e601b84c6"}], "stats": {"total": 625, "additions": 572, "deletions": 53}, "files": [{"sha": "ab2556f24c6d3d66e71dedfd320ae247d9be4c6a", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -64,6 +64,7 @@\n #[ allow(dead_assignment) ];\\n\n #[ allow(unused_mut) ];\\n\n #[ allow(attribute_usage) ];\\n\n+#[ allow(dead_code) ];\\n\n #[ feature(macro_rules, globs, struct_variant, managed_boxes) ];\\n\n \"\"\" + block\n             if xfail:"}, {"sha": "e08726ad8a61cdef406183b62391353d5b37d878", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -310,6 +310,10 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n         time(time_passes, \"reachability checking\", (), |_|\n              reachable::find_reachable(ty_cx, method_map, &exported_items));\n \n+    time(time_passes, \"death checking\", (), |_|\n+         middle::dead::check_crate(ty_cx, method_map,\n+                                   &exported_items, reachable_map, crate));\n+\n     time(time_passes, \"lint checking\", (), |_|\n          lint::check_crate(ty_cx, &exported_items, crate));\n \n@@ -510,19 +514,6 @@ pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n                           input: &input,\n                           ppm: PpMode) {\n-    fn ann_typed_post(tcx: ty::ctxt, node: pprust::ann_node) {\n-        match node {\n-          pprust::node_expr(s, expr) => {\n-            pp::space(s.s);\n-            pp::word(s.s, \"as\");\n-            pp::space(s.s);\n-            pp::word(s.s, ppaux::ty_to_str(tcx, ty::expr_ty(tcx, expr)));\n-            pprust::pclose(s);\n-          }\n-          _ => ()\n-        }\n-    }\n-\n     let crate = phase_1_parse_input(sess, cfg.clone(), input);\n \n     let (crate, is_expanded) = match ppm {"}, {"sha": "2185617c79f0d38d497b71a582afdda4964f8e82", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -77,6 +77,7 @@ pub mod middle {\n     pub mod reachable;\n     pub mod graph;\n     pub mod cfg;\n+    pub mod dead;\n }\n \n pub mod front {"}, {"sha": "2327425c2ade0bee27d6ee9dca865622e24cbb40", "filename": "src/librustc/middle/dead.rs", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -0,0 +1,352 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This implements the dead-code warning pass. It follows middle::reachable\n+// closely. The idea is that all reachable symbols are live, codes called\n+// from live codes are live, and everything else is dead.\n+\n+use middle::ty;\n+use middle::typeck;\n+use middle::privacy;\n+use middle::lint::dead_code;\n+\n+use std::hashmap::HashSet;\n+use syntax::ast;\n+use syntax::ast_map;\n+use syntax::ast_util::{local_def, def_id_of_def, is_local};\n+use syntax::codemap;\n+use syntax::parse::token;\n+use syntax::visit::Visitor;\n+use syntax::visit;\n+\n+// Any local node that may call something in its body block should be\n+// explored. For example, if it's a live node_item that is a\n+// function, then we should explore its block to check for codes that\n+// may need to be marked as live.\n+fn should_explore(tcx: ty::ctxt, def_id: ast::DefId) -> bool {\n+    if !is_local(def_id) {\n+        return false;\n+    }\n+    match tcx.items.find(&def_id.node) {\n+        Some(&ast_map::node_item(..))\n+        | Some(&ast_map::node_method(..))\n+        | Some(&ast_map::node_trait_method(..)) => true,\n+        _ => false\n+    }\n+}\n+\n+struct MarkSymbolVisitor {\n+    worklist: ~[ast::NodeId],\n+    method_map: typeck::method_map,\n+    tcx: ty::ctxt,\n+    live_symbols: ~HashSet<ast::NodeId>,\n+}\n+\n+impl MarkSymbolVisitor {\n+    fn new(tcx: ty::ctxt,\n+           method_map: typeck::method_map,\n+           worklist: ~[ast::NodeId]) -> MarkSymbolVisitor {\n+        MarkSymbolVisitor {\n+            worklist: worklist,\n+            method_map: method_map,\n+            tcx: tcx,\n+            live_symbols: ~HashSet::new(),\n+        }\n+    }\n+\n+    fn lookup_and_handle_definition(&mut self, id: &ast::NodeId,\n+                                    span: codemap::Span) {\n+        let def = match self.tcx.def_map.find(id) {\n+            Some(&def) => def,\n+            None => self.tcx.sess.span_bug(span, \"def ID not in def map?!\"),\n+        };\n+        let def_id = match def {\n+            ast::DefVariant(enum_id, _, _) => Some(enum_id),\n+            ast::DefPrimTy(_) => None,\n+            _ => Some(def_id_of_def(def)),\n+        };\n+        match def_id {\n+            Some(def_id) => {\n+                if should_explore(self.tcx, def_id) {\n+                    self.worklist.push(def_id.node);\n+                }\n+                self.live_symbols.insert(def_id.node);\n+            }\n+            None => (),\n+        }\n+    }\n+\n+    fn mark_live_symbols(&mut self) {\n+        let mut scanned = HashSet::new();\n+        while self.worklist.len() > 0 {\n+            let id = self.worklist.pop();\n+            if scanned.contains(&id) {\n+                continue\n+            }\n+            scanned.insert(id);\n+            match self.tcx.items.find(&id) {\n+                Some(node) => {\n+                    self.live_symbols.insert(id);\n+                    self.visit_node(node);\n+                }\n+                None => (),\n+            }\n+        }\n+    }\n+\n+    fn visit_node(&mut self, node: &ast_map::ast_node) {\n+        match *node {\n+            ast_map::node_item(item, _) => {\n+                match item.node {\n+                    ast::item_fn(..)\n+                    | ast::item_ty(..)\n+                    | ast::item_static(..)\n+                    | ast::item_foreign_mod(_) => {\n+                        visit::walk_item(self, item, ());\n+                    }\n+                    _ => ()\n+                }\n+            }\n+            ast_map::node_trait_method(trait_method, _, _) => {\n+                visit::walk_trait_method(self, trait_method, ());\n+            }\n+            ast_map::node_method(method, _, _) => {\n+                visit::walk_block(self, method.body, ());\n+            }\n+            _ => ()\n+        }\n+    }\n+}\n+\n+impl Visitor<()> for MarkSymbolVisitor {\n+\n+    fn visit_expr(&mut self, expr: @ast::Expr, _: ()) {\n+        match expr.node {\n+            ast::ExprPath(_) | ast::ExprStruct(..) => {\n+                self.lookup_and_handle_definition(&expr.id, expr.span);\n+            }\n+            ast::ExprMethodCall(..) => {\n+                match self.method_map.find(&expr.id) {\n+                    Some(&typeck::method_map_entry {\n+                        origin: typeck::method_static(def_id),\n+                        ..\n+                    }) => {\n+                        if should_explore(self.tcx, def_id) {\n+                            self.worklist.push(def_id.node);\n+                        }\n+                        self.live_symbols.insert(def_id.node);\n+                    }\n+                    Some(_) => (),\n+                    None => {\n+                        self.tcx.sess.span_bug(expr.span,\n+                                               \"method call expression not \\\n+                                                in method map?!\")\n+                    }\n+                }\n+            }\n+            _ => ()\n+        }\n+\n+        visit::walk_expr(self, expr, ())\n+    }\n+\n+    fn visit_ty(&mut self, typ: &ast::Ty, _: ()) {\n+        match typ.node {\n+            ast::ty_path(_, _, ref id) => {\n+                self.lookup_and_handle_definition(id, typ.span);\n+            }\n+            _ => visit::walk_ty(self, typ, ()),\n+        }\n+    }\n+\n+    fn visit_item(&mut self, _item: @ast::item, _: ()) {\n+        // Do not recurse into items. These items will be added to the\n+        // worklist and recursed into manually if necessary.\n+    }\n+}\n+\n+// This visitor is used to mark the implemented methods of a trait. Since we\n+// can not be sure if such methods are live or dead, we simply mark them\n+// as live.\n+struct TraitMethodSeeder {\n+    worklist: ~[ast::NodeId],\n+}\n+\n+impl Visitor<()> for TraitMethodSeeder {\n+    fn visit_item(&mut self, item: @ast::item, _: ()) {\n+        match item.node {\n+            ast::item_impl(_, Some(ref _trait_ref), _, ref methods) => {\n+                for method in methods.iter() {\n+                    self.worklist.push(method.id);\n+                }\n+            }\n+            ast::item_mod(..) | ast::item_fn(..) => {\n+                visit::walk_item(self, item, ());\n+            }\n+            _ => ()\n+        }\n+    }\n+}\n+\n+fn create_and_seed_worklist(tcx: ty::ctxt,\n+                            exported_items: &privacy::ExportedItems,\n+                            reachable_symbols: &HashSet<ast::NodeId>,\n+                            crate: &ast::Crate) -> ~[ast::NodeId] {\n+    let mut worklist = ~[];\n+\n+    // Preferably, we would only need to seed the worklist with reachable\n+    // symbols. However, since the set of reachable symbols differs\n+    // depending on whether a crate is built as bin or lib, and we want\n+    // the warning to be consistent, we also seed the worklist with\n+    // exported symbols.\n+    for &id in exported_items.iter() {\n+        worklist.push(id);\n+    }\n+    for &id in reachable_symbols.iter() {\n+        worklist.push(id);\n+    }\n+\n+    // Seed entry point\n+    match *tcx.sess.entry_fn {\n+        Some((id, _)) => worklist.push(id),\n+        None => ()\n+    }\n+\n+    // Seed implemeneted trait methods\n+    let mut trait_method_seeder = TraitMethodSeeder {\n+        worklist: worklist\n+    };\n+    visit::walk_crate(&mut trait_method_seeder, crate, ());\n+\n+    return trait_method_seeder.worklist;\n+}\n+\n+fn find_live(tcx: ty::ctxt,\n+             method_map: typeck::method_map,\n+             exported_items: &privacy::ExportedItems,\n+             reachable_symbols: &HashSet<ast::NodeId>,\n+             crate: &ast::Crate)\n+             -> ~HashSet<ast::NodeId> {\n+    let worklist = create_and_seed_worklist(tcx, exported_items,\n+                                            reachable_symbols, crate);\n+    let mut symbol_visitor = MarkSymbolVisitor::new(tcx, method_map, worklist);\n+    symbol_visitor.mark_live_symbols();\n+    symbol_visitor.live_symbols\n+}\n+\n+fn should_warn(item: @ast::item) -> bool {\n+    match item.node {\n+        ast::item_static(..)\n+        | ast::item_fn(..)\n+        | ast::item_enum(..)\n+        | ast::item_struct(..) => true,\n+        _ => false\n+    }\n+}\n+\n+fn get_struct_ctor_id(item: &ast::item) -> Option<ast::NodeId> {\n+    match item.node {\n+        ast::item_struct(struct_def, _) => struct_def.ctor_id,\n+        _ => None\n+    }\n+}\n+\n+struct DeadVisitor {\n+    tcx: ty::ctxt,\n+    live_symbols: ~HashSet<ast::NodeId>,\n+}\n+\n+impl DeadVisitor {\n+    // id := node id of an item's definition.\n+    // ctor_id := `Some` if the item is a struct_ctor (tuple struct),\n+    //            `None` otherwise.\n+    // If the item is a struct_ctor, then either its `id` or\n+    // `ctor_id` (unwrapped) is in the live_symbols set. More specifically,\n+    // DefMap maps the ExprPath of a struct_ctor to the node referred by\n+    // `ctor_id`. On the other hand, in a statement like\n+    // `type <ident> <generics> = <ty>;` where <ty> refers to a struct_ctor,\n+    // DefMap maps <ty> to `id` instead.\n+    fn symbol_is_live(&mut self, id: ast::NodeId,\n+                      ctor_id: Option<ast::NodeId>) -> bool {\n+        if self.live_symbols.contains(&id)\n+           || ctor_id.map_default(false,\n+                                  |ctor| self.live_symbols.contains(&ctor)) {\n+            return true;\n+        }\n+        // If it's a type whose methods are live, then it's live, too.\n+        // This is done to handle the case where, for example, the static\n+        // method of a private type is used, but the type itself is never\n+        // called directly.\n+        let def_id = local_def(id);\n+        match self.tcx.inherent_impls.find(&def_id) {\n+            None => (),\n+            Some(ref impl_list) => {\n+                for impl_ in impl_list.iter() {\n+                    for method in impl_.methods.iter() {\n+                        if self.live_symbols.contains(&method.def_id.node) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+}\n+\n+impl Visitor<()> for DeadVisitor {\n+    fn visit_item(&mut self, item: @ast::item, _: ()) {\n+        let ctor_id = get_struct_ctor_id(item);\n+        if !self.symbol_is_live(item.id, ctor_id) && should_warn(item) {\n+            self.tcx.sess.add_lint(dead_code, item.id, item.span,\n+                                   format!(\"code is never used: `{}`\",\n+                                           token::ident_to_str(&item.ident)));\n+        }\n+        visit::walk_item(self, item, ());\n+    }\n+\n+    fn visit_fn(&mut self, fk: &visit::fn_kind,\n+                _: &ast::fn_decl, block: ast::P<ast::Block>,\n+                span: codemap::Span, id: ast::NodeId, _: ()) {\n+        // Have to warn method here because methods are not ast::item\n+        match *fk {\n+            visit::fk_method(..) => {\n+                let ident = visit::name_of_fn(fk);\n+                if !self.symbol_is_live(id, None) {\n+                    self.tcx.sess\n+                            .add_lint(dead_code, id, span,\n+                                      format!(\"code is never used: `{}`\",\n+                                              token::ident_to_str(&ident)));\n+                }\n+            }\n+            _ => ()\n+        }\n+        visit::walk_block(self, block, ());\n+    }\n+\n+    // Overwrite so that we don't warn the trait method itself.\n+    fn visit_trait_method(&mut self, trait_method :&ast::trait_method, _: ()) {\n+        match *trait_method {\n+            ast::provided(method) => visit::walk_block(self, method.body, ()),\n+            ast::required(_) => ()\n+        }\n+    }\n+}\n+\n+pub fn check_crate(tcx: ty::ctxt,\n+                   method_map: typeck::method_map,\n+                   exported_items: &privacy::ExportedItems,\n+                   reachable_symbols: &HashSet<ast::NodeId>,\n+                   crate: &ast::Crate) {\n+    let live_symbols = find_live(tcx, method_map, exported_items,\n+                                 reachable_symbols, crate);\n+    let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };\n+    visit::walk_crate(&mut visitor, crate, ());\n+}"}, {"sha": "3e6803feadbfd39de1e9cb28171651078727bd8f", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -88,6 +88,7 @@ pub enum lint {\n     dead_assignment,\n     unused_mut,\n     unnecessary_allocation,\n+    dead_code,\n \n     missing_doc,\n     unreachable_code,\n@@ -282,6 +283,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n     }),\n \n+    (\"dead_code\",\n+     LintSpec {\n+        lint: dead_code,\n+        desc: \"detect piece of code that will never be used\",\n+        default: warn\n+    }),\n+\n     (\"missing_doc\",\n      LintSpec {\n         lint: missing_doc,"}, {"sha": "a6e45c7e1bbb38d923a7b097dc8f55d217564ebe", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{P, Block, Crate, DeclLocal, Expr_, ExprMac, SyntaxContext};\n+use ast::{P, Block, Crate, DeclLocal, ExprMac, SyntaxContext};\n use ast::{Local, Ident, mac_invoc_tt};\n use ast::{item_mac, Mrk, Stmt, StmtDecl, StmtMac, StmtExpr, StmtSemi};\n use ast::{token_tree};\n@@ -21,7 +21,6 @@ use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use ext::base::*;\n use fold::*;\n-use opt_vec;\n use parse;\n use parse::{parse_item_from_source_str};\n use parse::token;\n@@ -140,29 +139,6 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n \n             let span = e.span;\n \n-            fn mk_expr(_: @ExtCtxt, span: Span, node: Expr_)\n-                           -> @ast::Expr {\n-                @ast::Expr {\n-                    id: ast::DUMMY_NODE_ID,\n-                    node: node,\n-                    span: span,\n-                }\n-            }\n-\n-            fn mk_simple_path(ident: ast::Ident, span: Span) -> ast::Path {\n-                ast::Path {\n-                    span: span,\n-                    global: false,\n-                    segments: ~[\n-                        ast::PathSegment {\n-                            identifier: ident,\n-                            lifetimes: opt_vec::Empty,\n-                            types: opt_vec::Empty,\n-                        }\n-                    ],\n-                }\n-            }\n-\n             // to:\n             //\n             // {\n@@ -714,14 +690,6 @@ pub fn renames_to_fold(renames: @mut ~[(ast::Ident,ast::Name)]) -> @ast_fold {\n     } as @ast_fold\n }\n \n-// perform a bunch of renames\n-fn apply_pending_renames(folder : @ast_fold, stmt : ast::Stmt) -> @ast::Stmt {\n-    folder.fold_stmt(&stmt)\n-            .expect_one(\"renaming of stmt did not produce one stmt\")\n-}\n-\n-\n-\n pub fn new_span(cx: @ExtCtxt, sp: Span) -> Span {\n     /* this discards information in the case of macro-defining macros */\n     Span {\n@@ -739,6 +707,7 @@ pub fn std_macros() -> @str {\n @r#\"mod __std_macros {\n     #[macro_escape];\n     #[doc(hidden)];\n+    #[allow(dead_code)];\n \n     macro_rules! ignore (($($x:tt)*) => (()))\n \n@@ -900,6 +869,7 @@ pub fn std_macros() -> @str {\n             mod $c {\n                 #[allow(unused_imports)];\n                 #[allow(non_uppercase_statics)];\n+                #[allow(dead_code)];\n \n                 use super::*;\n \n@@ -979,12 +949,6 @@ pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n     injector.fold_crate(c)\n }\n \n-struct NoOpFolder {\n-    contents: (),\n-}\n-\n-impl ast_fold for NoOpFolder {}\n-\n pub struct MacroExpander {\n     extsbox: @mut SyntaxEnv,\n     cx: @ExtCtxt,"}, {"sha": "9193a9cee17d23009229b2b555a989974c0d4459", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -331,7 +331,12 @@ impl Context {\n         let unnamed = self.ecx.meta_word(self.fmtsp, @\"address_insignificant\");\n         let unnamed = self.ecx.attribute(self.fmtsp, unnamed);\n \n-        return ~[unnamed];\n+        // Do not warn format string as dead code\n+        let dead_code = self.ecx.meta_word(self.fmtsp, @\"dead_code\");\n+        let allow_dead_code = self.ecx.meta_list(self.fmtsp,\n+                                                 @\"allow\", ~[dead_code]);\n+        let allow_dead_code = self.ecx.attribute(self.fmtsp, allow_dead_code);\n+        return ~[unnamed, allow_dead_code];\n     }\n \n     /// Translate a `parse::Piece` to a static `rt::Piece`"}, {"sha": "2c54b622021153c44ebf5878a54a0d4655f0f44d", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -10,6 +10,7 @@\n \n #[deny(unreachable_code)];\n #[allow(unused_variable)];\n+#[allow(dead_code)];\n \n fn fail_len(v: ~[int]) -> uint {\n     let mut i = 3;"}, {"sha": "23d9f3199c1779eac9ffc22994c2957f23367355", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -1,3 +1,5 @@\n+#[allow(dead_code)];\n+\n // Matching against NaN should result in a warning\n \n use std::f64::NAN;"}, {"sha": "ce31ac2e8fa0a3bc7305b5f4843816c91fccd7c4", "filename": "src/test/compile-fail/issue-7246.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fissue-7246.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fissue-7246.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7246.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #[deny(unreachable_code)];\n+#[allow(dead_code)];\n+\n use std::ptr;\n pub unsafe fn g() {\n     return; "}, {"sha": "e9985430adfa5858e3b304657e81de86460c6df3", "filename": "src/test/compile-fail/lint-change-warnings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-change-warnings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-change-warnings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-change-warnings.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[deny(warnings)];\n+#[allow(dead_code)];\n \n fn main() {\n     while true {} //~ ERROR: infinite"}, {"sha": "2e47695f0fc0fa1a9ff1ed1e5cca73eaf0ccc655", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[deny(ctypes)];\n+#[allow(dead_code)];\n \n enum Z { }\n enum U { A }"}, {"sha": "7d7cbce6e89ac717f41344c8fa8ce32feba02d2d", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unused_variable)];\n+#[deny(dead_code)];\n+\n+#[crate_type=\"lib\"];\n+\n+pub use foo2::Bar2;\n+mod foo {\n+    pub struct Bar; //~ ERROR: code is never used\n+}\n+\n+mod foo2 {\n+    pub struct Bar2;\n+}\n+\n+pub static pub_static: int = 0;\n+static priv_static: int = 0; //~ ERROR: code is never used\n+static used_static: int = 0;\n+pub static used_static2: int = used_static;\n+\n+pub fn pub_fn() {\n+    used_fn();\n+    let used_struct1 = UsedStruct1 { x: 1 };\n+    let used_struct2 = UsedStruct2(1);\n+    let used_struct3 = UsedStruct3;\n+    let e = foo3;\n+    SemiUsedStruct::la_la_la();\n+\n+}\n+fn priv_fn() { //~ ERROR: code is never used\n+    let unused_struct = PrivStruct;\n+}\n+fn used_fn() {}\n+\n+pub type typ = ~UsedStruct4;\n+pub struct PubStruct();\n+struct PrivStruct; //~ ERROR: code is never used\n+struct UsedStruct1 { x: int }\n+struct UsedStruct2(int);\n+struct UsedStruct3;\n+struct UsedStruct4;\n+// this struct is never used directly, but its method is, so we don't want\n+// to warn it\n+struct SemiUsedStruct;\n+impl SemiUsedStruct {\n+    fn la_la_la() {}\n+}\n+\n+pub enum pub_enum { foo1, bar1 }\n+enum priv_enum { foo2, bar2 } //~ ERROR: code is never used\n+enum used_enum { foo3, bar3 }\n+\n+fn foo() { //~ ERROR: code is never used\n+    bar();\n+    let unused_enum = foo2;\n+}\n+\n+fn bar() { //~ ERROR: code is never used\n+    foo();\n+}"}, {"sha": "663e7890bbe09ad8e5e31e3f2b3cb80fb72fd4db", "filename": "src/test/compile-fail/lint-dead-code-2.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unused_variable)];\n+#[deny(dead_code)];\n+\n+struct Foo;\n+\n+trait Bar {\n+    fn bar1(&self);\n+    fn bar2(&self) {\n+        self.bar1();\n+    }\n+}\n+\n+impl Bar for Foo {\n+    fn bar1(&self) {\n+        live_fn();\n+    }\n+}\n+\n+fn live_fn() {}\n+\n+fn dead_fn() {} //~ ERROR: code is never used\n+\n+#[main]\n+fn dead_fn2() {} //~ ERROR: code is never used\n+\n+fn used_fn() {}\n+\n+#[start]\n+fn start(_: int, _: **u8) -> int {\n+    used_fn();\n+    let foo = Foo;\n+    foo.bar2();\n+    0\n+}\n+\n+// this is not main\n+fn main() { //~ ERROR: code is never used\n+    dead_fn();\n+    dead_fn2();\n+}"}, {"sha": "8a5f239ed05c6ec7cc30944496a06125592cfe38", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unused_variable)];\n+#[deny(dead_code)];\n+\n+#[crate_type=\"lib\"];\n+\n+struct Foo; //~ ERROR: code is never used\n+impl Foo {\n+    fn foo(&self) { //~ ERROR: code is never used\n+        bar()\n+    }\n+}\n+\n+fn bar() { //~ ERROR: code is never used\n+    fn baz() {} //~ ERROR: code is never used\n+\n+    Foo.foo();\n+    baz();\n+}\n+\n+// no warning\n+struct Foo2;\n+impl Foo2 { fn foo2(&self) { bar2() } }\n+fn bar2() {\n+    fn baz2() {}\n+\n+    Foo2.foo2();\n+    baz2();\n+}\n+\n+pub fn pub_fn() {\n+    let foo2_struct = Foo2;\n+    foo2_struct.foo2();\n+}\n+\n+// not warned because it's used in the parameter of `free` below\n+enum c_void {}\n+\n+extern {\n+    fn free(p: *c_void);\n+}"}, {"sha": "b550c227898f29361c556c4b5509d61d0ae469e7", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -10,6 +10,7 @@\n \n #[feature(managed_boxes)];\n #[forbid(heap_memory)];\n+#[allow(dead_code)];\n \n struct Foo {\n     x: @int //~ ERROR type uses managed"}, {"sha": "ad35a22b4efa0e2b9407d67afcd886ddc7add2ac", "filename": "src/test/compile-fail/lint-impl-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[allow(while_true)];\n+#[allow(dead_code)];\n \n struct A(int);\n "}, {"sha": "a083948bf8406786fb4d80e93470d32c58ab82c2", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -13,6 +13,7 @@\n #[feature(struct_variant)];\n #[feature(globs)];\n #[deny(missing_doc)];\n+#[allow(dead_code)];\n \n //! Some garbage docs for the crate here\n #[doc=\"More garbage\"];"}, {"sha": "6d217656cd01039768f9e1ffd16f62795d60bc98", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[forbid(non_camel_case_types)];\n+#[allow(dead_code)];\n \n struct foo { //~ ERROR type `foo` should have a camel case identifier\n     bar: int,"}, {"sha": "d41a4ccda8d120aa4cb0c6cb7cdda51e44ed61a9", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[forbid(non_uppercase_statics)];\n+#[allow(dead_code)];\n \n static foo: int = 1; //~ ERROR static constant should have an uppercase identifier\n "}, {"sha": "442bcaa0923140bed7780a6e1a7e1b49aa6b5170", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -12,6 +12,7 @@\n // injected intrinsics by the compiler.\n \n #[deny(attribute_usage)];\n+#[allow(dead_code)];\n \n #[abi=\"stdcall\"] extern {} //~ ERROR: obsolete attribute\n "}, {"sha": "9cc06cc5395bf1cec7ee44a7831f7a3de59a498c", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -15,6 +15,7 @@\n #[deny(unstable)];\n #[deny(deprecated)];\n #[deny(experimental)];\n+#[allow(dead_code)];\n \n mod cross_crate {\n     extern mod lint_stability;"}, {"sha": "f609debb5bd8fc881fd6ccfd50a69470ba58cf9b", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_code)];\n+\n // compile-flags: -D type-limits\n fn main() { }\n "}, {"sha": "529d3e921a069e23fc071ec993b2aa4aab9b6678", "filename": "src/test/compile-fail/lint-unsafe-block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[allow(unused_unsafe)];\n+#[allow(dead_code)];\n #[deny(unsafe_block)];\n #[feature(macro_rules)];\n "}, {"sha": "9d6140b8fd233cc20dccdc87ae823d63882b6aa9", "filename": "src/test/compile-fail/lint-unused-import-tricky-globs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -10,6 +10,7 @@\n \n #[feature(globs)];\n #[deny(unused_imports)];\n+#[allow(dead_code)];\n \n mod A {\n     pub fn p() {}"}, {"sha": "24511296a0b12bb2b0395ec7afdbd249656ddcc4", "filename": "src/test/compile-fail/lint-unused-import-tricky-names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[deny(unused_imports)];\n+#[allow(dead_code)];\n \n // Regression test for issue #6633\n mod issue6633 {"}, {"sha": "e248184d5e2004f0ada2a342c65e94160d0ca209", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -10,6 +10,7 @@\n \n #[feature(globs)];\n #[deny(unused_imports)];\n+#[allow(dead_code)];\n \n use cal = bar::c::cc;\n "}, {"sha": "271aedd3f6a6ba001814e618c278e2ffe5bb350d", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -12,6 +12,7 @@\n \n #[allow(dead_assignment)];\n #[allow(unused_variable)];\n+#[allow(dead_code)];\n #[deny(unused_mut)];\n \n fn main() {"}, {"sha": "96a4c2adca32c93df98dbd3bce38d07664adaa61", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -10,6 +10,7 @@\n \n // Exercise the unused_unsafe attribute in some positive and negative cases\n \n+#[allow(dead_code)];\n #[deny(unused_unsafe)];\n \n mod foo {"}, {"sha": "a3d388d7c341ba9350e486f845be4e5786c91cc2", "filename": "src/test/compile-fail/liveness-dead.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_code)];\n #[deny(dead_assignment)];\n \n fn f1(x: &mut int) {"}, {"sha": "fd605b79dbecd48796f916f2c69b907aa5c0ebb9", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -10,6 +10,7 @@\n \n // Issue #7526: lowercase static constants in patterns look like bindings\n \n+#[allow(dead_code)];\n #[deny(non_uppercase_pattern_statics)];\n \n pub static a : int = 97;"}, {"sha": "4f7f7dd7408af1372bdafe2878d7868831fece2f", "filename": "src/test/compile-fail/static-assert.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fstatic-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fstatic-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-assert.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -1,3 +1,5 @@\n+#[allow(dead_code)];\n+\n #[static_assert]\n static A: bool = false; //~ ERROR static assertion failed\n "}, {"sha": "ceaa388917984a7117a0ed519baf2b14f6123327", "filename": "src/test/compile-fail/static-assert2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -1,3 +1,5 @@\n+#[allow(dead_code)];\n+\n #[static_assert]\n static E: bool = 1 == 2; //~ ERROR static assertion failed\n "}]}