{"sha": "956987f43e3012c3487973cc0dd47f7c4eaa7942", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Njk4N2Y0M2UzMDEyYzM0ODc5NzNjYzBkZDQ3ZjdjNGVhYTc5NDI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-16T06:00:31Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-16T06:14:32Z"}, "message": "RIIR update_lints: Replace lint count in README.md\n\nThis allows the usage of `util/dev update_lints` which will write the\nnew lint_count to the `README.md`.", "tree": {"sha": "0402d867dafce56deb2225a7abbaab252ac53893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0402d867dafce56deb2225a7abbaab252ac53893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/956987f43e3012c3487973cc0dd47f7c4eaa7942", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlvFgcgACgkQtvoGpuDi\nZlugBQ/+KnBCJy0GSHqsfRozlpfOd4ERO0u67j2wXIdL6DKK/q5Yk/V3P7AEJKHn\ngr+oanuX4dr46aWqBz+eYtCU/XNhLujXgQloNqa+9PPHngU7yr+Gi/RKh0l52BM3\nArHJjwyJyMRk2NRou1CgQcFReJaP0lRWTaf45Yqj8HlHLemJ/ZXBTbLiP7YbOkmN\nbqtZRHs46+NcByuWKjjgowGcXWLeZZgmELjeMK5UH/5/QoORguQX1fLLBjrPGWqk\n3IaacQbI7Yx1v6y4x5s+Spdf38UOgTpzNov20L+P0o5OzRvmAVAKZ22xlPyKy8yL\nMJgb4SIZazAeVkpXuJl00Nkn0iDEJRGDeY8R7fdQfHXtEOAd0MgUVDJgjHF+3Viw\neBTXUWFw4cy8eqKZ+0TuQ8NMOITDkehtZ7VgNx9X87D5l+jerFDdzlIzLvebafLx\nkW+ao4Wa1SLBbsRz0BpnsMn/ouJ3nxU65n/vnfr3gBjyhD5aitriRmRMGt/r5nCH\nnN6BW0Md/74JM4rKTyua2/dLcGoZGoNWfFNOH2/pSNGcWvW7z+JDznfCWpBZBHj0\ne4kDE+ga4G6lcnUk6LS7TvpAb658jAO8cefSsgHN0zIF6/XZ4rgygYk72Es//L0D\nhklJzCseJRPZpGEoeg/uEhfbEP6+fFaWOOVIRcwsGv/2bGpVDvY=\n=U5lX\n-----END PGP SIGNATURE-----", "payload": "tree 0402d867dafce56deb2225a7abbaab252ac53893\nparent af441b5b072eb01c939d2e92a3496dbedf6d412b\nauthor Philipp Hansch <dev@phansch.net> 1539669631 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1539670472 +0200\n\nRIIR update_lints: Replace lint count in README.md\n\nThis allows the usage of `util/dev update_lints` which will write the\nnew lint_count to the `README.md`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/956987f43e3012c3487973cc0dd47f7c4eaa7942", "html_url": "https://github.com/rust-lang/rust/commit/956987f43e3012c3487973cc0dd47f7c4eaa7942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/956987f43e3012c3487973cc0dd47f7c4eaa7942/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af441b5b072eb01c939d2e92a3496dbedf6d412b", "url": "https://api.github.com/repos/rust-lang/rust/commits/af441b5b072eb01c939d2e92a3496dbedf6d412b", "html_url": "https://github.com/rust-lang/rust/commit/af441b5b072eb01c939d2e92a3496dbedf6d412b"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "1c303d180d2c1daa8be6e2a14919dda23b700e3e", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/956987f43e3012c3487973cc0dd47f7c4eaa7942/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956987f43e3012c3487973cc0dd47f7c4eaa7942/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=956987f43e3012c3487973cc0dd47f7c4eaa7942", "patch": "@@ -101,6 +101,88 @@ fn lint_files() -> impl Iterator<Item=walkdir::DirEntry> {\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n }\n \n+/// Replace a region in a file delimited by two lines matching regexes.\n+///\n+/// `path` is the relative path to the file on which you want to perform the replacement.\n+///\n+/// See `replace_region_in_text` for documentation of the other options.\n+pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_start: bool, replacements: F) where F: Fn() -> Vec<String> {\n+    let mut f = fs::File::open(path).expect(&format!(\"File not found: {}\", path));\n+    let mut contents = String::new();\n+    f.read_to_string(&mut contents).expect(\"Something went wrong reading the file\");\n+    let replaced = replace_region_in_text(&contents, start, end, replace_start, replacements);\n+\n+    let mut f = fs::File::create(path).expect(&format!(\"File not found: {}\", path));\n+    f.write_all(replaced.as_bytes()).expect(\"Unable to write file\");\n+    // Ensure we write the changes with a trailing newline so that\n+    // the file has the proper line endings.\n+    f.write(b\"\\n\").expect(\"Unable to write file\");\n+}\n+\n+/// Replace a region in a text delimited by two lines matching regexes.\n+///\n+/// * `text` is the input text on which you want to perform the replacement\n+/// * `start` is a `&str` that describes the delimiter line before the region you want to replace.\n+///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n+/// * `end` is a `&str` that describes the delimiter line until where the replacement should\n+///   happen.  As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n+/// * If `replace_start` is true, the `start` delimiter line is replaced as well.\n+///   The `end` delimiter line is never replaced.\n+/// * `replacements` is a closure that has to return a `Vec<String>` which contains the new text.\n+///\n+/// If you want to perform the replacement on files instead of already parsed text,\n+/// use `replace_region_in_file`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n+/// let result = clippy_dev::replace_region_in_text(\n+///     the_text,\n+///     r#\"replace_start\"#,\n+///     r#\"replace_end\"#,\n+///     false,\n+///     || {\n+///         vec![\"a different\".to_string(), \"text\".to_string()]\n+///     }\n+/// );\n+/// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n+/// ```\n+pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> String where F: Fn() -> Vec<String> {\n+    let lines = text.lines();\n+    let mut in_old_region = false;\n+    let mut found = false;\n+    let mut new_lines = vec![];\n+    let start = Regex::new(start).unwrap();\n+    let end = Regex::new(end).unwrap();\n+\n+    for line in lines {\n+        if in_old_region {\n+            if end.is_match(&line) {\n+                in_old_region = false;\n+                new_lines.extend(replacements());\n+                new_lines.push(line.to_string());\n+            }\n+        } else if start.is_match(&line) {\n+            if !replace_start {\n+                new_lines.push(line.to_string());\n+            }\n+            in_old_region = true;\n+            found = true;\n+        } else {\n+            new_lines.push(line.to_string());\n+        }\n+    }\n+\n+    if !found {\n+        // This happens if the provided regex in `clippy_dev/src/main.rs` is not found in the\n+        // given text or file. Most likely this is an error on the programmer's side and the Regex\n+        // is incorrect.\n+        println!(\"regex {:?} not found. You may have to update it.\", start);\n+    }\n+    new_lines.join(\"\\n\")\n+}\n+\n #[test]\n fn test_parse_contents() {\n     let result: Vec<Lint> = parse_contents(\n@@ -140,6 +222,43 @@ declare_deprecated_lint! {\n     assert_eq!(expected, result);\n }\n \n+#[test]\n+fn test_replace_region() {\n+    let text = r#\"\n+abc\n+123\n+789\n+def\n+ghi\"#;\n+    let expected = r#\"\n+abc\n+hello world\n+def\n+ghi\"#;\n+    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n+        vec![\"hello world\".to_string()]\n+    });\n+    assert_eq!(expected, result);\n+}\n+\n+#[test]\n+fn test_replace_region_with_start() {\n+    let text = r#\"\n+abc\n+123\n+789\n+def\n+ghi\"#;\n+    let expected = r#\"\n+hello world\n+def\n+ghi\"#;\n+    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n+        vec![\"hello world\".to_string()]\n+    });\n+    assert_eq!(expected, result);\n+}\n+\n #[test]\n fn test_usable_lints() {\n     let lints = vec!["}, {"sha": "7b688836a95a0817e44b295fce9f6f539f2c1653", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/956987f43e3012c3487973cc0dd47f7c4eaa7942/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956987f43e3012c3487973cc0dd47f7c4eaa7942/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=956987f43e3012c3487973cc0dd47f7c4eaa7942", "patch": "@@ -32,6 +32,8 @@ fn main() {\n     if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n         if matches.is_present(\"print-only\") {\n             print_lints();\n+        } else {\n+            update_lints();\n         }\n     }\n }\n@@ -55,3 +57,21 @@ fn print_lints() {\n \n     println!(\"there are {} lints\", lint_count);\n }\n+\n+fn update_lints() {\n+    let lint_list = gather_all();\n+    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n+    let lint_count = usable_lints.len();\n+\n+    replace_region_in_file(\n+        \"../README.md\",\n+        r#\"\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)\"#,\n+        \"\",\n+        true,\n+        || {\n+            vec![\n+                format!(\"[There are {} lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\", lint_count)\n+            ]\n+        }\n+    );\n+}"}]}