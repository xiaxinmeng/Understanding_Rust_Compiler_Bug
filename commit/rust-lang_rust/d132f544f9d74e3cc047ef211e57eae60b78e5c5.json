{"sha": "d132f544f9d74e3cc047ef211e57eae60b78e5c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzJmNTQ0ZjlkNzRlM2NjMDQ3ZWYyMTFlNTdlYWU2MGI3OGU1YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-07T18:26:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-07T18:26:15Z"}, "message": "Auto merge of #61130 - jonhoo:mem-take, r=SimonSapin\n\nAdd std::mem::take as suggested in #61129\n\nThis PR implements #61129 by adding `std::mem::take`.\n\nThe added function is equivalent to:\n```rust\nstd::mem::replace(dest, Default::default())\n```\n\nThis particular pattern is fairly common, especially when implementing `Future::poll`, where you often need to yield an owned value in `Async::Ready`. This change allows you to write\n```rust\nreturn Async::Ready(std::mem::take(self.result));\n```\ninstead of\n```rust\nreturn Async::Ready(std::mem::replace(self.result, Vec::new()));\n```\n\nEDIT: Changed name from `take` to `swap_default`.\nEDIT: Changed name back to `take`.", "tree": {"sha": "791d2fe11b49b7a14bba265fb1cdb41629e81282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791d2fe11b49b7a14bba265fb1cdb41629e81282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d132f544f9d74e3cc047ef211e57eae60b78e5c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d132f544f9d74e3cc047ef211e57eae60b78e5c5", "html_url": "https://github.com/rust-lang/rust/commit/d132f544f9d74e3cc047ef211e57eae60b78e5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d132f544f9d74e3cc047ef211e57eae60b78e5c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8865d8e195813ade6b84434ac9f8850e7112d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8865d8e195813ade6b84434ac9f8850e7112d1a", "html_url": "https://github.com/rust-lang/rust/commit/c8865d8e195813ade6b84434ac9f8850e7112d1a"}, {"sha": "5a01b547078e45cc1a96a062334d8571f129ddc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a01b547078e45cc1a96a062334d8571f129ddc2", "html_url": "https://github.com/rust-lang/rust/commit/5a01b547078e45cc1a96a062334d8571f129ddc2"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "770d1ca8e750196de4c041861eef4a75fb5704ce", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d132f544f9d74e3cc047ef211e57eae60b78e5c5/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d132f544f9d74e3cc047ef211e57eae60b78e5c5/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=d132f544f9d74e3cc047ef211e57eae60b78e5c5", "patch": "@@ -503,6 +503,61 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n+/// Replace `dest` with the default value of `T`, and return the previous `dest` value.\n+///\n+/// # Examples\n+///\n+/// A simple example:\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// let mut v: Vec<i32> = vec![1, 2];\n+///\n+/// let old_v = mem::take(&mut v);\n+/// assert_eq!(vec![1, 2], old_v);\n+/// assert!(v.is_empty());\n+/// ```\n+///\n+/// `take` allows taking ownership of a struct field by replacing it with an \"empty\" value.\n+/// Without `take` you can run into issues like these:\n+///\n+/// ```compile_fail,E0507\n+/// struct Buffer<T> { buf: Vec<T> }\n+///\n+/// impl<T> Buffer<T> {\n+///     fn get_and_reset(&mut self) -> Vec<T> {\n+///         // error: cannot move out of dereference of `&mut`-pointer\n+///         let buf = self.buf;\n+///         self.buf = Vec::new();\n+///         buf\n+///     }\n+/// }\n+/// ```\n+///\n+/// Note that `T` does not necessarily implement [`Clone`], so it can't even clone and reset\n+/// `self.buf`. But `take` can be used to disassociate the original value of `self.buf` from\n+/// `self`, allowing it to be returned:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// use std::mem;\n+///\n+/// # struct Buffer<T> { buf: Vec<T> }\n+/// impl<T> Buffer<T> {\n+///     fn get_and_reset(&mut self) -> Vec<T> {\n+///         mem::take(&mut self.buf)\n+///     }\n+/// }\n+/// ```\n+///\n+/// [`Clone`]: ../../std/clone/trait.Clone.html\n+#[inline]\n+#[unstable(feature = \"mem_take\", issue = \"61129\")]\n+pub fn take<T: Default>(dest: &mut T) -> T {\n+    replace(dest, T::default())\n+}\n+\n /// Moves `src` into the referenced `dest`, returning the previous `dest` value.\n ///\n /// Neither value is dropped."}]}