{"sha": "00e262689599a6a753bbf7ce8786e07ed100d238", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZTI2MjY4OTU5OWE2YTc1M2JiZjdjZTg3ODZlMDdlZDEwMGQyMzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-15T23:49:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:49:14Z"}, "message": "Account for object safety when suggesting `Box<dyn Trait>`", "tree": {"sha": "9baafe06489391a252a2ec05b5356da9fc9110ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9baafe06489391a252a2ec05b5356da9fc9110ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e262689599a6a753bbf7ce8786e07ed100d238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e262689599a6a753bbf7ce8786e07ed100d238", "html_url": "https://github.com/rust-lang/rust/commit/00e262689599a6a753bbf7ce8786e07ed100d238", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e262689599a6a753bbf7ce8786e07ed100d238/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a62124018ce8438caeedca203d39997f130b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a62124018ce8438caeedca203d39997f130b49", "html_url": "https://github.com/rust-lang/rust/commit/d7a62124018ce8438caeedca203d39997f130b49"}], "stats": {"total": 221, "additions": 202, "deletions": 19}, "files": [{"sha": "c3af063d518f0e92ad97819fd6c568e80e93f385", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -696,11 +696,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     format!(\"Box<{}{}>\", if has_dyn { \"\" } else { \"dyn \" }, snippet),\n                 ));\n                 err.multipart_suggestion(\n-                        \"return a trait object instead\",\n+                    \"return a boxed trait object instead\",\n                     suggestions,\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n+                // This is currently not possible to trigger because E0038 takes precedence, but\n+                // leave it in for completeness in case anything changes in an earlier stage.\n                 err.note(&format!(\n                     \"if trait `{}` was object safe, you could return a trait object\",\n                     trait_obj,"}, {"sha": "5c1d600c837c4b07692683b522e6cf3bc5acd0eb", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -377,6 +377,13 @@ pub enum GenericBound<'hir> {\n }\n \n impl GenericBound<'_> {\n+    pub fn trait_def_id(&self) -> Option<DefId> {\n+        match self {\n+            GenericBound::Trait(data, _) => Some(data.trait_ref.trait_def_id()),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn span(&self) -> Span {\n         match self {\n             &GenericBound::Trait(ref t, ..) => t.span,"}, {"sha": "a32fbff7bfe2df233b19dffc9c691a88395687ac", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -55,6 +55,7 @@ use crate::check::{FnCtxt, Needs};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n use rustc::session::parse::feature_err;\n+use rustc::traits::object_safety_violations;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -68,8 +69,8 @@ use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_span::{self, Span};\n use rustc_span::symbol::sym;\n+use rustc_span::{self, Span};\n use rustc_target::spec::abi::Abi;\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n@@ -1311,7 +1312,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;\n-        let mut return_sp = None;\n+        let mut fn_output = None;\n \n         // Verify that this is a tail expression of a function, otherwise the\n         // label pointing out the cause for the type coercion will be wrong\n@@ -1348,11 +1349,11 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 );\n             }\n             if !pointing_at_return_type {\n-                return_sp = Some(fn_decl.output.span()); // `impl Trait` return type\n+                fn_output = Some(&fn_decl.output); // `impl Trait` return type\n             }\n         }\n-        if let (Some(sp), Some(return_sp)) = (fcx.ret_coercion_span.borrow().as_ref(), return_sp) {\n-            self.add_impl_trait_explanation(&mut err, fcx, expected, *sp, return_sp);\n+        if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.borrow().as_ref(), fn_output) {\n+            self.add_impl_trait_explanation(&mut err, fcx, expected, *sp, fn_output);\n         }\n         err\n     }\n@@ -1363,8 +1364,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         fcx: &FnCtxt<'a, 'tcx>,\n         expected: Ty<'tcx>,\n         sp: Span,\n-        return_sp: Span,\n+        fn_output: &hir::FunctionRetTy<'_>,\n     ) {\n+        let return_sp = fn_output.span();\n         err.span_label(return_sp, \"expected because this return type...\");\n         err.span_label(\n             sp,\n@@ -1386,11 +1388,42 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             .unwrap_or_else(|_| \"dyn Trait\".to_string());\n         let mut snippet_iter = snippet.split_whitespace();\n         let has_impl = snippet_iter.next().map_or(false, |s| s == \"impl\");\n+        // Only suggest `Box<dyn Trait>` if `Trait` in `impl Trait` is object safe.\n+        let mut is_object_safe = false;\n+        if let hir::FunctionRetTy::Return(ty) = fn_output {\n+            // Get the return type.\n+            if let hir::TyKind::Def(..) = ty.kind {\n+                let ty = AstConv::ast_ty_to_ty(fcx, ty);\n+                // Get the `impl Trait`'s `DefId`.\n+                if let ty::Opaque(def_id, _) = ty.kind {\n+                    let hir_id = fcx.tcx.hir().as_local_hir_id(def_id).unwrap();\n+                    // Get the `impl Trait`'s `Item` so that we can get its trait bounds and\n+                    // get the `Trait`'s `DefId`.\n+                    if let hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }) =\n+                        fcx.tcx.hir().expect_item(hir_id).kind\n+                    {\n+                        // Are of this `impl Trait`'s traits object safe?\n+                        is_object_safe = bounds.iter().all(|bound| {\n+                            bound.trait_def_id().map_or(false, |def_id| {\n+                                object_safety_violations(fcx.tcx, def_id).is_empty()\n+                            })\n+                        })\n+                    }\n+                }\n+            }\n+        };\n         if has_impl {\n-            err.help(&format!(\n-                \"you can instead return a trait object using `Box<dyn {}>`\",\n-                &snippet[5..]\n-            ));\n+            if is_object_safe {\n+                err.help(&format!(\n+                    \"you can instead return a boxed trait object using `Box<dyn {}>`\",\n+                    &snippet[5..]\n+                ));\n+            } else {\n+                err.help(&format!(\n+                    \"if the trait `{}` were object safe, you could return a boxed trait object\",\n+                    &snippet[5..]\n+                ));\n+            }\n             err.note(trait_obj_msg);\n         }\n         err.help(\"alternatively, create a new `enum` with a variant for each returned type\");"}, {"sha": "977a7ef0e024464c30d9b037bc9c7b6170c16009", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -86,7 +86,7 @@ LL | fn bal() -> dyn Trait {\n    = note: if all the returned values were of the same type you could use `impl Trait` as the return type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: you can create a new `enum` with a variant for each returned type\n-help: return a trait object instead\n+help: return a boxed trait object instead\n    |\n LL | fn bal() -> Box<dyn Trait> {\n LL |     if true {"}, {"sha": "9178358b60a9c140a8f19870d3ac1f5225898865", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -12,7 +12,7 @@ LL |     0_u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a trait object using `Box<dyn Foo>`\n+   = help: if the trait `Foo` were object safe, you could return a boxed trait object\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n "}, {"sha": "ab3086c78b3a1a9139a5960b01510b2f5bee0ef4", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.rs?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -0,0 +1,35 @@\n+#![allow(bare_trait_objects)]\n+trait NotObjectSafe {\n+    fn foo() -> Self;\n+}\n+\n+struct A;\n+struct B;\n+\n+impl NotObjectSafe for A {\n+    fn foo() -> Self {\n+        A\n+    }\n+}\n+\n+impl NotObjectSafe for B {\n+    fn foo() -> Self {\n+        B\n+    }\n+}\n+\n+fn car() -> dyn NotObjectSafe { //~ ERROR the trait `NotObjectSafe` cannot be made into an object\n+    if true {\n+        return A;\n+    }\n+    B\n+}\n+\n+fn cat() -> Box<dyn NotObjectSafe> { //~ ERROR the trait `NotObjectSafe` cannot be made into an\n+    if true {\n+        return Box::new(A);\n+    }\n+    Box::new(B)\n+}\n+\n+fn main() {}"}, {"sha": "0c8d267c13434b0628fd29c7e114b0bdfbc36849", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -0,0 +1,21 @@\n+error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:21:1\n+   |\n+LL |     fn foo() -> Self;\n+   |        --- associated function `foo` has no `self` parameter\n+...\n+LL | fn car() -> dyn NotObjectSafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+\n+error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:1\n+   |\n+LL |     fn foo() -> Self;\n+   |        --- associated function `foo` has no `self` parameter\n+...\n+LL | fn cat() -> Box<dyn NotObjectSafe> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "503515013b9ab2579a8d7053b0d9b559d56107c5", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.rs?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -0,0 +1,46 @@\n+trait NotObjectSafe {\n+    fn foo() -> Self;\n+}\n+\n+trait ObjectSafe {\n+    fn bar(&self);\n+}\n+\n+struct A;\n+struct B;\n+\n+impl NotObjectSafe for A {\n+    fn foo() -> Self {\n+        A\n+    }\n+}\n+\n+impl NotObjectSafe for B {\n+    fn foo() -> Self {\n+        B\n+    }\n+}\n+\n+impl ObjectSafe for A {\n+    fn bar(&self) {}\n+}\n+\n+impl ObjectSafe for B {\n+    fn bar(&self) {}\n+}\n+\n+fn can() -> impl NotObjectSafe {\n+    if true {\n+        return A;\n+    }\n+    B //~ ERROR mismatched types\n+}\n+\n+fn cat() -> impl ObjectSafe {\n+    if true {\n+        return A;\n+    }\n+    B //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "dd4260fbe4f911b0cfc15f57e73b7958833146d0", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -0,0 +1,39 @@\n+error[E0308]: mismatched types\n+  --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:36:5\n+   |\n+LL | fn can() -> impl NotObjectSafe {\n+   |             ------------------ expected because this return type...\n+LL |     if true {\n+LL |         return A;\n+   |                - ...is found to be `A` here\n+LL |     }\n+LL |     B\n+   |     ^ expected struct `A`, found struct `B`\n+   |\n+   = note: to return `impl Trait`, all returned values must be of the same type\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = help: if the trait `NotObjectSafe` were object safe, you could return a boxed trait object\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n+   |\n+LL | fn cat() -> impl ObjectSafe {\n+   |             --------------- expected because this return type...\n+LL |     if true {\n+LL |         return A;\n+   |                - ...is found to be `A` here\n+LL |     }\n+LL |     B\n+   |     ^ expected struct `A`, found struct `B`\n+   |\n+   = note: to return `impl Trait`, all returned values must be of the same type\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = help: you can instead return a boxed trait object using `Box<dyn ObjectSafe>`\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n+   = help: alternatively, create a new `enum` with a variant for each returned type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b663cccbeef0f192da5e7d6b530a45f3bd974925", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e262689599a6a753bbf7ce8786e07ed100d238/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=00e262689599a6a753bbf7ce8786e07ed100d238", "patch": "@@ -12,7 +12,7 @@ LL |     1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n \n@@ -30,7 +30,7 @@ LL |         return 1u32;\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n \n@@ -48,7 +48,7 @@ LL |         1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n \n@@ -78,7 +78,7 @@ LL |         _ => 1u32,\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n \n@@ -98,7 +98,7 @@ LL | |     }\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n \n@@ -116,7 +116,7 @@ LL |             1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n "}]}