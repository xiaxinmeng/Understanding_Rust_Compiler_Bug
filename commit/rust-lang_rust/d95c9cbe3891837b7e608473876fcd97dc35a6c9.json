{"sha": "d95c9cbe3891837b7e608473876fcd97dc35a6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NWM5Y2JlMzg5MTgzN2I3ZTYwODQ3Mzg3NmZjZDk3ZGMzNWE2Yzk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-25T03:19:44Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-25T04:02:44Z"}, "message": "replace ConstVector trait with the Container trait", "tree": {"sha": "f7085140401223b8e2714d91784aa7db6cb9e86d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7085140401223b8e2714d91784aa7db6cb9e86d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95c9cbe3891837b7e608473876fcd97dc35a6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95c9cbe3891837b7e608473876fcd97dc35a6c9", "html_url": "https://github.com/rust-lang/rust/commit/d95c9cbe3891837b7e608473876fcd97dc35a6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95c9cbe3891837b7e608473876fcd97dc35a6c9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f4f654eb35b21df4f1f893721b89d0897dbe93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f4f654eb35b21df4f1f893721b89d0897dbe93", "html_url": "https://github.com/rust-lang/rust/commit/c3f4f654eb35b21df4f1f893721b89d0897dbe93"}], "stats": {"total": 78, "additions": 36, "deletions": 42}, "files": [{"sha": "62842d04e78309b541ed5ae15ce5553a31306708", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -59,8 +59,8 @@ fn run_cfail_test(config: config, props: test_props, testfile: &Path) {\n     check_correct_failure_status(procres);\n \n     let expected_errors = errors::load_errors(testfile);\n-    if vec::is_not_empty(expected_errors) {\n-        if vec::is_not_empty(props.error_patterns) {\n+    if !expected_errors.is_empty() {\n+        if !props.error_patterns.is_empty() {\n             fatal(~\"both error pattern and expected errors specified\");\n         }\n         check_expected_errors(expected_errors, testfile, procres);\n@@ -440,7 +440,7 @@ fn compose_and_run_compiler(\n     args: procargs,\n     input: Option<~str>) -> procres {\n \n-    if props.aux_builds.is_not_empty() {\n+    if !props.aux_builds.is_empty() {\n         ensure_dir(&aux_output_dir_name(config, testfile));\n     }\n "}, {"sha": "6707dacec3dc549dc8eb4e6cdf8777b48efb468a", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -190,7 +190,8 @@ pub use path::PosixPath;\n \n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, Trimmable};\n-pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n+pub use container::Container;\n+pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};"}, {"sha": "999e0df007b9ba22f62b60aed42e6f6adc9f1e45", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -157,7 +157,7 @@ pub pure fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n \n     // turn digits into string\n     // using stack of digits\n-    while fractionalParts.is_not_empty() {\n+    while !fractionalParts.is_empty() {\n         // Bleh; shouldn't need to be unsafe\n         let mut adjusted_digit = carry + unsafe { fractionalParts.pop() };\n "}, {"sha": "b904e200a345b4f6dd5c410c4e9ea4af25675dbf", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -29,7 +29,8 @@ pub use path::PosixPath;\n \n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, Trimmable};\n-pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n+pub use container::Container;\n+pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};"}, {"sha": "007e85d13b5381d0760aa60ebe181058186b32cf", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -14,6 +14,7 @@\n #[forbid(deprecated_pattern)];\n #[warn(non_camel_case_types)];\n \n+use container::Container;\n use cast::transmute;\n use cast;\n use cmp::{Eq, Ord};\n@@ -453,7 +454,7 @@ pub pure fn partitioned<T: Copy>(v: &[T], f: fn(&T) -> bool) -> (~[T], ~[T]) {\n /// Removes the first element from a vector and return it\n pub fn shift<T>(v: &mut ~[T]) -> T {\n     unsafe {\n-        assert v.is_not_empty();\n+        assert !v.is_empty();\n \n         if v.len() == 1 { return v.pop() }\n \n@@ -1647,20 +1648,11 @@ pub mod traits {\n     }\n }\n \n-pub trait ConstVector {\n-    pure fn is_empty(&self) -> bool;\n-    pure fn is_not_empty(&self) -> bool;\n-    pure fn len(&self) -> uint;\n-}\n-\n-/// Extension methods for vectors\n-impl<T> &[const T]: ConstVector {\n+impl<T> &[const T]: Container {\n     /// Returns true if a vector contains no elements\n     #[inline]\n     pure fn is_empty(&self) -> bool { is_empty(*self) }\n-    /// Returns true if a vector contains some elements\n-    #[inline]\n-    pure fn is_not_empty(&self) -> bool { is_not_empty(*self) }\n+\n     /// Returns the length of a vector\n     #[inline]\n     pure fn len(&self) -> uint { len(*self) }"}, {"sha": "75b7c70db9f8df2b164c882bfa9bbcef196f0a49", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -147,8 +147,8 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n }\n \n fn is_test_fn(i: @ast::item) -> bool {\n-    let has_test_attr = attr::find_attrs_by_name(i.attrs,\n-                                                 ~\"test\").is_not_empty();\n+    let has_test_attr = !attr::find_attrs_by_name(i.attrs,\n+                                                  ~\"test\").is_empty();\n \n     fn has_test_signature(i: @ast::item) -> bool {\n         match &i.node {\n@@ -171,7 +171,7 @@ fn is_ignored(cx: test_ctxt, i: @ast::item) -> bool {\n     let ignoreitems = attr::attr_metas(ignoreattrs);\n     let cfg_metas = vec::concat(vec::filter_map(ignoreitems,\n         |i| attr::get_meta_item_list(*i)));\n-    return if vec::is_not_empty(ignoreitems) {\n+    return if !ignoreitems.is_empty() {\n         config::metas_in_cfg(/*bad*/copy cx.crate.node.config, cfg_metas)\n     } else {\n         false"}, {"sha": "ed87857e384b5d3d7b91aa1628a296647f057fdf", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -1331,7 +1331,7 @@ fn type_to_str_inner(names: type_names, +outer0: ~[TypeRef], ty: TypeRef) ->\n           Struct => {\n             let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n             let mut elts = vec::from_elem(n_elts, 0 as TypeRef);\n-            if elts.is_not_empty() {\n+            if !elts.is_empty() {\n                 llvm::LLVMGetStructElementTypes(\n                     ty, ptr::to_mut_unsafe_ptr(&mut elts[0]));\n             }"}, {"sha": "0099683102de3e425fabf71c1c10982b28db5e34", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -95,7 +95,7 @@ fn warn_if_multiple_versions(e: env, diag: span_handler,\n                 }\n             }));\n \n-        assert matches.is_not_empty();\n+        assert !matches.is_empty();\n \n         if matches.len() != 1u {\n             diag.handler().warn(\n@@ -168,7 +168,7 @@ fn visit_item(e: env, i: @ast::item) {\n                 already_added = !cstore::add_used_library(cstore,\n                                                           foreign_name);\n             }\n-            if link_args.is_not_empty() && already_added {\n+            if !link_args.is_empty() && already_added {\n                 e.diag.span_fatal(i.span, ~\"library '\" + foreign_name +\n                            ~\"' already added: can't specify link_args.\");\n             }"}, {"sha": "9eeabb3ff5ccae4081370dd1a3dd6f70a3b5303d", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -132,7 +132,7 @@ fn raw_pat(p: @pat) -> @pat {\n }\n \n fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n-    assert(pats.is_not_empty());\n+    assert(!pats.is_empty());\n     let ext = match is_useful(cx, vec::map(pats, |p| ~[*p]), ~[wild()]) {\n       not_useful => return, // This is good, wildcard pattern isn't reachable\n       useful_ => None,"}, {"sha": "3bf1547a7d9423a61486018ccf6971ca54c26082", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -459,7 +459,7 @@ fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id,\n                 parent_id: ast::def_id, substs: ~[ty::t])\n    -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"trans_res_dtor\");\n-    if (substs.is_not_empty()) {\n+    if !substs.is_empty() {\n         let did = if did.crate != ast::local_crate {\n             inline::maybe_instantiate_inline(ccx, did, true)\n         } else { did };"}, {"sha": "e1a549bcc7b24b4b650b9c5b98a2480546592d84", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -635,7 +635,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         } else {\n             for m.items.each |item| {\n                 let tpt = ty::lookup_item_type(ccx.tcx, local_def(item.id));\n-                if (*tpt.bounds).is_not_empty() {\n+                if !tpt.bounds.is_empty() {\n                     ccx.tcx.sess.span_err(\n                         item.span,\n                         fmt!(\"foreign items may not have type parameters\"));"}, {"sha": "142f1e989a037af60bfaf1504350625591863c76", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -356,7 +356,7 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n                 Some(ast_map::node_item(it,_)) => {\n                     match it.node {\n                         ast::item_fn(_, _, ref ps, _)\n-                        if vec::is_not_empty(*ps) => {\n+                        if !ps.is_empty() => {\n                             tcx.sess.span_err(\n                                 main_span,\n                                 ~\"main function is not allowed \\"}, {"sha": "fc7834291267b6b423cd20ba24c881f63bc2afee", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -402,7 +402,7 @@ pub impl BigUint {\n     }\n \n     pure fn is_zero(&self) -> bool { self.data.is_empty() }\n-    pure fn is_not_zero(&self) -> bool { self.data.is_not_empty() }\n+    pure fn is_not_zero(&self) -> bool { !self.data.is_empty() }\n     pure fn is_positive(&self) -> bool { self.is_not_zero() }\n     pure fn is_negative(&self) -> bool { false }\n     pure fn is_nonpositive(&self) -> bool { self.is_zero() }"}, {"sha": "ea7b2442bb91955b5838b1b2aad98e720c5bced8", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -599,7 +599,7 @@ pub mod bytepipes {\n             } else if self.buf.is_empty() {\n                 match self.port.try_recv() {\n                     Some(move buf) => {\n-                        assert buf.is_not_empty();\n+                        assert !buf.is_empty();\n                         self.buf = move buf;\n                         return self.try_recv(count);\n                     }\n@@ -904,7 +904,7 @@ mod test {\n         fn pipe_port_loader(bytes: ~[u8]\n                            ) -> pod::PipePort<int> {\n             let (port, chan) = pipes::stream();\n-            if bytes.is_not_empty() {\n+            if !bytes.is_empty() {\n                 chan.send(move bytes);\n             }\n             pod::pipe_port(move port)"}, {"sha": "b3e5854bf452efda2536183b23348883aad25c5c", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -45,7 +45,7 @@\n  *     }\n  *\n  *     fn main(args: ~[str]) {\n- *         check vec::is_not_empty(args);\n+ *         check !args.is_empty()\n  *\n  *         let program : str = vec::head(args);\n  *\n@@ -63,7 +63,7 @@\n  *             return;\n  *         }\n  *         let output = opt_maybe_str(matches, \"o\");\n- *         let input = if vec::is_not_empty(matches.free) {\n+ *         let input = if !matches.free.is_empty() {\n  *             matches.free[0]\n  *         } else {\n  *             print_usage(program);\n@@ -357,7 +357,7 @@ fn opt_val(mm: &Matches, nm: &str) -> Optval { return opt_vals(mm, nm)[0]; }\n \n /// Returns true if an option was matched\n pub fn opt_present(mm: &Matches, nm: &str) -> bool {\n-    opt_vals(mm, nm).is_not_empty()\n+    !opt_vals(mm, nm).is_empty()\n }\n \n /// Returns the number of times an option was matched"}, {"sha": "47d139b8641dd5cd7d8e7be6019b260270fe5601", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c9cbe3891837b7e608473876fcd97dc35a6c9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d95c9cbe3891837b7e608473876fcd97dc35a6c9", "patch": "@@ -532,7 +532,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n \n       ast::item_impl(tps, opt_trait, ty, methods) => {\n         head(s, visibility_qualified(item.vis, ~\"impl\"));\n-        if tps.is_not_empty() {\n+        if !tps.is_empty() {\n             print_type_params(s, tps);\n             space(s.s);\n         }\n@@ -770,7 +770,7 @@ fn print_variant(s: ps, v: ast::variant) {\n     match v.node.kind {\n         ast::tuple_variant_kind(args) => {\n             print_ident(s, v.node.name);\n-            if args.is_not_empty() {\n+            if !args.is_empty() {\n                 popen(s);\n                 fn print_variant_arg(s: ps, arg: ast::variant_arg) {\n                     print_type(s, arg.ty);\n@@ -1054,7 +1054,7 @@ fn print_call_post(s: ps,\n                    has_block: bool,\n                    blk: &Option<@ast::expr>,\n                    base_args: &mut ~[@ast::expr]) {\n-    if !has_block || base_args.is_not_empty() {\n+    if !has_block || !base_args.is_empty() {\n         popen(s);\n         commasep_exprs(s, inconsistent, *base_args);\n         pclose(s);\n@@ -1564,7 +1564,7 @@ fn print_pat(s: ps, &&pat: @ast::pat, refutable: bool) {\n         match args_ {\n           None => word(s.s, ~\"(*)\"),\n           Some(args) => {\n-            if args.is_not_empty() {\n+            if !args.is_empty() {\n               popen(s);\n               commasep(s, inconsistent, args,\n                        |s, p| print_pat(s, p, refutable));\n@@ -1762,7 +1762,7 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n }\n \n fn print_bounds(s: ps, bounds: @~[ast::ty_param_bound]) {\n-    if bounds.is_not_empty() {\n+    if !bounds.is_empty() {\n         word(s.s, ~\":\");\n         let mut first = true;\n         for vec::each(*bounds) |&bound| {\n@@ -1855,7 +1855,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n       ast::view_item_use(id, mta, _) => {\n         head(s, ~\"extern mod\");\n         print_ident(s, id);\n-        if mta.is_not_empty() {\n+        if !mta.is_empty() {\n             popen(s);\n             commasep(s, consistent, mta, print_meta_item);\n             pclose(s);\n@@ -2101,7 +2101,7 @@ fn print_comment(s: ps, cmnt: comments::cmnt) {\n         for cmnt.lines.each |line| {\n             // Don't print empty lines because they will end up as trailing\n             // whitespace\n-            if str::is_not_empty(*line) { word(s.s, *line); }\n+            if !line.is_empty() { word(s.s, *line); }\n             hardbreak(s.s);\n         }\n       }\n@@ -2113,7 +2113,7 @@ fn print_comment(s: ps, cmnt: comments::cmnt) {\n         } else {\n             ibox(s, 0u);\n             for cmnt.lines.each |line| {\n-                if str::is_not_empty(*line) { word(s.s, *line); }\n+                if !line.is_empty() { word(s.s, *line); }\n                 hardbreak(s.s);\n             }\n             end(s);"}]}