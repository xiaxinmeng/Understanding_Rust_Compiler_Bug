{"sha": "10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "node_id": "C_kwDOAAsO6NoAKDEwYjY5YWIwZDIwYmRiYmNkZmM1YmZlNDQzYTUwY2YyYjEyYjY2ZGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-24T20:44:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-25T03:39:23Z"}, "message": "Remove non-descriptive boolean from search_for_structural_match_violation", "tree": {"sha": "05f7cb13bf3a462e8ec3e5289fa2c1269da275c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f7cb13bf3a462e8ec3e5289fa2c1269da275c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "html_url": "https://github.com/rust-lang/rust/commit/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1f54c30bb3200239849649ebc08d7ac2877db6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f54c30bb3200239849649ebc08d7ac2877db6c", "html_url": "https://github.com/rust-lang/rust/commit/c1f54c30bb3200239849649ebc08d7ac2877db6c"}], "stats": {"total": 101, "additions": 57, "deletions": 44}, "files": [{"sha": "e099445117225e4a268718c01617e1612bcbeb63", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "patch": "@@ -226,7 +226,7 @@ impl Qualif for CustomEq {\n         // because that component may be part of an enum variant (e.g.,\n         // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be\n         // structural-match (`Option::None`).\n-        traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty, false).is_some()\n+        traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty).is_some()\n     }\n \n     fn in_adt_inherently<'tcx>("}, {"sha": "d6dd0f017941a74aa2a8f84ee5b9eff18412cdcb", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "patch": "@@ -120,37 +120,35 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n     }\n \n     fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n-        traits::search_for_structural_match_violation(self.span, self.tcx(), ty, false).map(\n-            |non_sm_ty| {\n-                with_no_trimmed_paths!(match non_sm_ty.kind() {\n-                    ty::Adt(adt, _) => self.adt_derive_msg(*adt),\n-                    ty::Dynamic(..) => {\n-                        \"trait objects cannot be used in patterns\".to_string()\n-                    }\n-                    ty::Opaque(..) => {\n-                        \"opaque types cannot be used in patterns\".to_string()\n-                    }\n-                    ty::Closure(..) => {\n-                        \"closures cannot be used in patterns\".to_string()\n-                    }\n-                    ty::Generator(..) | ty::GeneratorWitness(..) => {\n-                        \"generators cannot be used in patterns\".to_string()\n-                    }\n-                    ty::Float(..) => {\n-                        \"floating-point numbers cannot be used in patterns\".to_string()\n-                    }\n-                    ty::FnPtr(..) => {\n-                        \"function pointers cannot be used in patterns\".to_string()\n-                    }\n-                    ty::RawPtr(..) => {\n-                        \"raw pointers cannot be used in patterns\".to_string()\n-                    }\n-                    _ => {\n-                        bug!(\"use of a value of `{non_sm_ty}` inside a pattern\")\n-                    }\n-                })\n-            },\n-        )\n+        traits::search_for_structural_match_violation(self.span, self.tcx(), ty).map(|non_sm_ty| {\n+            with_no_trimmed_paths!(match non_sm_ty.kind() {\n+                ty::Adt(adt, _) => self.adt_derive_msg(*adt),\n+                ty::Dynamic(..) => {\n+                    \"trait objects cannot be used in patterns\".to_string()\n+                }\n+                ty::Opaque(..) => {\n+                    \"opaque types cannot be used in patterns\".to_string()\n+                }\n+                ty::Closure(..) => {\n+                    \"closures cannot be used in patterns\".to_string()\n+                }\n+                ty::Generator(..) | ty::GeneratorWitness(..) => {\n+                    \"generators cannot be used in patterns\".to_string()\n+                }\n+                ty::Float(..) => {\n+                    \"floating-point numbers cannot be used in patterns\".to_string()\n+                }\n+                ty::FnPtr(..) => {\n+                    \"function pointers cannot be used in patterns\".to_string()\n+                }\n+                ty::RawPtr(..) => {\n+                    \"raw pointers cannot be used in patterns\".to_string()\n+                }\n+                _ => {\n+                    bug!(\"use of a value of `{non_sm_ty}` inside a pattern\")\n+                }\n+            })\n+        })\n     }\n \n     fn type_marked_structural(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "d0a17f712d3dfc24e46c9d8b9c902f6a0dc97813", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "patch": "@@ -60,7 +60,9 @@ pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n-pub use self::structural_match::search_for_structural_match_violation;\n+pub use self::structural_match::{\n+    search_for_adt_const_param_violation, search_for_structural_match_violation,\n+};\n pub use self::util::{\n     elaborate_obligations, elaborate_predicates, elaborate_predicates_with_span,\n     elaborate_trait_ref, elaborate_trait_refs,"}, {"sha": "c278752e3d9f46459a6027ebcd67307f0020624c", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "patch": "@@ -35,16 +35,28 @@ use std::ops::ControlFlow;\n /// For more background on why Rust has this requirement, and issues\n /// that arose when the requirement was not enforced completely, see\n /// Rust RFC 1445, rust-lang/rust#61188, and rust-lang/rust#62307.\n-///\n-/// When the `valtree_semantics` flag is set, then we also deny additional\n-/// types that are not evaluatable to valtrees, such as floats and fn ptrs.\n pub fn search_for_structural_match_violation<'tcx>(\n     span: Span,\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n-    valtree_semantics: bool,\n ) -> Option<Ty<'tcx>> {\n-    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), valtree_semantics })\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), adt_const_param: false })\n+        .break_value()\n+}\n+\n+/// This method traverses the structure of `ty`, trying to find any\n+/// types that are not allowed to be used in a const generic.\n+///\n+/// This is either because the type does not implement `StructuralEq`\n+/// and `StructuralPartialEq`, or because the type is intentionally\n+/// not supported in const generics (such as floats and raw pointers,\n+/// which are allowed in match blocks).\n+pub fn search_for_adt_const_param_violation<'tcx>(\n+    span: Span,\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Option<Ty<'tcx>> {\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), adt_const_param: true })\n         .break_value()\n }\n \n@@ -108,8 +120,9 @@ struct Search<'tcx> {\n     seen: FxHashSet<hir::def_id::DefId>,\n \n     // Additionally deny things that have been allowed in patterns,\n-    // but are not evaluatable to a valtree, such as floats and fn ptrs.\n-    valtree_semantics: bool,\n+    // but are not allowed in adt const params, such as floats and\n+    // fn ptrs.\n+    adt_const_param: bool,\n }\n \n impl<'tcx> Search<'tcx> {\n@@ -167,15 +180,15 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n             }\n \n             ty::FnPtr(..) => {\n-                if !self.valtree_semantics {\n+                if !self.adt_const_param {\n                     return ControlFlow::CONTINUE;\n                 } else {\n                     return ControlFlow::Break(ty);\n                 }\n             }\n \n             ty::RawPtr(..) => {\n-                if !self.valtree_semantics {\n+                if !self.adt_const_param {\n                     // structural-match ignores substructure of\n                     // `*const _`/`*mut _`, so skip `super_visit_with`.\n                     //\n@@ -197,7 +210,7 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n             }\n \n             ty::Float(_) => {\n-                if !self.valtree_semantics {\n+                if !self.adt_const_param {\n                     return ControlFlow::CONTINUE;\n                 } else {\n                     return ControlFlow::Break(ty);"}, {"sha": "ca5defd16882a0aa1ccca568f5538bdb7ab126a0", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=10b69ab0d20bdbbcdfc5bfe443a50cf2b12b66de", "patch": "@@ -849,7 +849,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n \n             if tcx.features().adt_const_params {\n                 if let Some(non_structural_match_ty) =\n-                    traits::search_for_structural_match_violation(param.span, tcx, ty, true)\n+                    traits::search_for_adt_const_param_violation(param.span, tcx, ty)\n                 {\n                     // We use the same error code in both branches, because this is really the same\n                     // issue: we just special-case the message for type parameters to make it"}]}