{"sha": "e855fe3620c0a6981a4238df548fa5c2f36a24c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTVmZTM2MjBjMGE2OTgxYTQyMzhkZjU0OGZhNWMyZjM2YTI0Yzk=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-08-16T02:01:56Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T21:02:05Z"}, "message": "Reflect the changes that has been made and fmt", "tree": {"sha": "aab0aee76484bd1dda85b8c28d2d27232ce7ae7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aab0aee76484bd1dda85b8c28d2d27232ce7ae7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e855fe3620c0a6981a4238df548fa5c2f36a24c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e855fe3620c0a6981a4238df548fa5c2f36a24c9", "html_url": "https://github.com/rust-lang/rust/commit/e855fe3620c0a6981a4238df548fa5c2f36a24c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e855fe3620c0a6981a4238df548fa5c2f36a24c9/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce653d65a8f08d785c5061e26570b4e59372e325", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce653d65a8f08d785c5061e26570b4e59372e325", "html_url": "https://github.com/rust-lang/rust/commit/ce653d65a8f08d785c5061e26570b4e59372e325"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "4ff567ffb0ec527639d74625a2fd617dbcce04e4", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e855fe3620c0a6981a4238df548fa5c2f36a24c9/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e855fe3620c0a6981a4238df548fa5c2f36a24c9/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e855fe3620c0a6981a4238df548fa5c2f36a24c9", "patch": "@@ -846,7 +846,7 @@ impl<'a> MinifyingSugg<'a> {\n         s.as_ref()\n     }\n \n-    fn hir(cx: &LateContext<'_, '_>, expr: &Expr<'_>, default: &'a str) -> Self {\n+    fn hir(cx: &LateContext<'_>, expr: &Expr<'_>, default: &'a str) -> Self {\n         Self(sugg::Sugg::hir(cx, expr, default))\n     }\n \n@@ -947,11 +947,7 @@ fn get_details_from_idx<'tcx>(\n     idx: &Expr<'_>,\n     starts: &[Start<'tcx>],\n ) -> Option<(StartKind<'tcx>, Offset)> {\n-    fn get_start<'tcx>(\n-        cx: &LateContext<'tcx>,\n-        e: &Expr<'_>,\n-        starts: &[Start<'tcx>],\n-    ) -> Option<StartKind<'tcx>> {\n+    fn get_start<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>, starts: &[Start<'tcx>]) -> Option<StartKind<'tcx>> {\n         starts.iter().find_map(|start| {\n             if same_var(cx, e, start.id) {\n                 Some(start.kind)\n@@ -982,13 +978,9 @@ fn get_details_from_idx<'tcx>(\n     match idx.kind {\n         ExprKind::Binary(op, lhs, rhs) => match op.node {\n             BinOpKind::Add => {\n-                let offset_opt = if let Some(s) = get_start(cx, lhs, starts) {\n-                    get_offset(cx, rhs, starts).map(|o| (s, o))\n-                } else if let Some(s) = get_start(cx, rhs, starts) {\n-                    get_offset(cx, lhs, starts).map(|o| (s, o))\n-                } else {\n-                    None\n-                };\n+                let offset_opt = get_start(cx, lhs, starts)\n+                    .and_then(|s| get_offset(cx, rhs, starts).map(|o| (s, o)))\n+                    .or_else(|| get_start(cx, rhs, starts).and_then(|s| get_offset(cx, lhs, starts).map(|o| (s, o))));\n \n                 offset_opt.map(|(s, o)| (s, Offset::positive(o)))\n             },\n@@ -1011,7 +1003,7 @@ fn get_assignment<'tcx>(e: &'tcx Expr<'tcx>) -> Option<(&'tcx Expr<'tcx>, &'tcx\n }\n \n fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n-    cx: &'a LateContext<'a, 'tcx>,\n+    cx: &'a LateContext<'tcx>,\n     stmts: &'tcx [Stmt<'tcx>],\n     expr: Option<&'tcx Expr<'tcx>>,\n     loop_counters: &'c [Start<'tcx>],\n@@ -1032,7 +1024,7 @@ fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n }\n \n fn get_loop_counters<'a, 'tcx>(\n-    cx: &'a LateContext<'a, 'tcx>,\n+    cx: &'a LateContext<'tcx>,\n     body: &'tcx Block<'tcx>,\n     expr: &'tcx Expr<'_>,\n ) -> Option<impl Iterator<Item = Start<'tcx>> + 'a> {\n@@ -1042,7 +1034,7 @@ fn get_loop_counters<'a, 'tcx>(\n \n     // For each candidate, check the parent block to see if\n     // it's initialized to zero at the start of the loop.\n-    if let Some(block) = get_enclosing_block(&cx, expr.hir_id) {\n+    get_enclosing_block(&cx, expr.hir_id).and_then(|block| {\n         increment_visitor\n             .into_results()\n             .filter_map(move |var_id| {\n@@ -1055,9 +1047,7 @@ fn get_loop_counters<'a, 'tcx>(\n                 })\n             })\n             .into()\n-    } else {\n-        None\n-    }\n+    })\n }\n \n fn build_manual_memcpy_suggestion<'tcx>(\n@@ -2315,7 +2305,7 @@ struct IncrementVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n-    fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n+    fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n             cx,\n             states: FxHashMap::default(),\n@@ -2396,7 +2386,10 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n enum InitializeVisitorState<'hir> {\n     Initial,          // Not examined yet\n     Declared(Symbol), // Declared but not (yet) initialized\n-    Initialized { name: Symbol, initializer: &'hir Expr<'hir> },\n+    Initialized {\n+        name: Symbol,\n+        initializer: &'hir Expr<'hir>,\n+    },\n     DontWarn,\n }\n \n@@ -2412,7 +2405,7 @@ struct InitializeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n-    fn new(cx: &'a LateContext<'a, 'tcx>, end_expr: &'tcx Expr<'tcx>, var_id: HirId) -> Self {\n+    fn new(cx: &'a LateContext<'tcx>, end_expr: &'tcx Expr<'tcx>, var_id: HirId) -> Self {\n         Self {\n             cx,\n             end_expr,\n@@ -2423,7 +2416,7 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn get_result(&self) -> Option<(Name, &'tcx Expr<'tcx>)> {\n+    fn get_result(&self) -> Option<(Symbol, &'tcx Expr<'tcx>)> {\n         if let InitializeVisitorState::Initialized { name, initializer } = self.state {\n             Some((name, initializer))\n         } else {\n@@ -2442,14 +2435,12 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n             if local.pat.hir_id == self.var_id;\n             if let PatKind::Binding(.., ident, _) = local.pat.kind;\n             then {\n-                self.state = if let Some(ref init) = local.init {\n+                self.state = local.init.map_or(InitializeVisitorState::Declared(ident.name), |init| {\n                     InitializeVisitorState::Initialized {\n                         initializer: init,\n                         name: ident.name,\n                     }\n-                } else {\n-                    InitializeVisitorState::Declared(ident.name)\n-                }\n+                })\n             }\n         }\n         walk_stmt(self, stmt);"}]}