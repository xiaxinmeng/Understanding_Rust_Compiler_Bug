{"sha": "ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZjg1ZjRiZGMzMTlmOWQ5ZDg1M2QxZmZmNjhhOGEyNWU2NGM3YTg=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T21:34:34Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T22:02:46Z"}, "message": "Use diagnostic items for `Vec`, `VecDeque` and connected refactorings", "tree": {"sha": "8075f5ec725069d17e3e29ea5d452a3636ac1f63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8075f5ec725069d17e3e29ea5d452a3636ac1f63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "html_url": "https://github.com/rust-lang/rust/commit/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "html_url": "https://github.com/rust-lang/rust/commit/6ce6b29527f05e2b0fa09009053d5095f4d38aa1"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "295a4e1fccb0ac63103ff04ece42bd8df67b4e01", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::ty::{implements_trait, match_type};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{get_trait_def_id, higher, is_qpath_def_path, paths};\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::{sym, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for iteration that is guaranteed to be infinite.\n@@ -202,15 +203,15 @@ const COMPLETING_METHODS: [(&str, usize); 12] = [\n ];\n \n /// the paths of types that are known to be infinitely allocating\n-const INFINITE_COLLECTORS: [&[&str]; 8] = [\n-    &paths::BINARY_HEAP,\n-    &paths::BTREEMAP,\n-    &paths::BTREESET,\n-    &paths::HASHMAP,\n-    &paths::HASHSET,\n-    &paths::LINKED_LIST,\n-    &paths::VEC,\n-    &paths::VEC_DEQUE,\n+const INFINITE_COLLECTORS: &[Symbol] = &[\n+    sym::BinaryHeap,\n+    sym::BTreeMap,\n+    sym::BTreeSet,\n+    sym::hashmap_type,\n+    sym::hashset_type,\n+    sym::LinkedList,\n+    sym::vec_type,\n+    sym::vecdeque_type,\n ];\n \n fn complete_infinite_iter(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n@@ -235,7 +236,10 @@ fn complete_infinite_iter(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             } else if method.ident.name == sym!(collect) {\n                 let ty = cx.typeck_results().expr_ty(expr);\n-                if INFINITE_COLLECTORS.iter().any(|path| match_type(cx, ty, path)) {\n+                if INFINITE_COLLECTORS\n+                    .iter()\n+                    .any(|diag_item| is_type_diagnostic_item(cx, ty, *diag_item))\n+                {\n                     return is_infinite(cx, &args[0]);\n                 }\n             }"}, {"sha": "b1965cfd601b17e5317f83cd6a6511cfaabfbca8", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "patch": "@@ -67,7 +67,7 @@ fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -\n     const FUNCTIONS: [&[&str]; 8] = [\n         &paths::PTR_COPY_NONOVERLAPPING,\n         &paths::PTR_COPY,\n-        &paths::WRITE_BYTES,\n+        &paths::PTR_WRITE_BYTES,\n         &paths::PTR_SWAP_NONOVERLAPPING,\n         &paths::PTR_SLICE_FROM_RAW_PARTS,\n         &paths::PTR_SLICE_FROM_RAW_PARTS_MUT,"}, {"sha": "868c41aab43b5229c51eba9d11a2555d4f3583ba", "filename": "clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "patch": "@@ -1,28 +1,29 @@\n use super::utils::is_layout_incompatible;\n use super::UNSOUND_COLLECTION_TRANSMUTE;\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_def_path, paths};\n+use clippy_utils::match_any_diagnostic_items;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n+use rustc_span::symbol::{sym, Symbol};\n \n // used to check for UNSOUND_COLLECTION_TRANSMUTE\n-static COLLECTIONS: &[&[&str]] = &[\n-    &paths::VEC,\n-    &paths::VEC_DEQUE,\n-    &paths::BINARY_HEAP,\n-    &paths::BTREESET,\n-    &paths::BTREEMAP,\n-    &paths::HASHSET,\n-    &paths::HASHMAP,\n+static COLLECTIONS: &[Symbol] = &[\n+    sym::vec_type,\n+    sym::vecdeque_type,\n+    sym::BinaryHeap,\n+    sym::BTreeSet,\n+    sym::BTreeMap,\n+    sym::hashset_type,\n+    sym::hashmap_type,\n ];\n \n /// Checks for `unsound_collection_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Adt(from_adt, from_substs), ty::Adt(to_adt, to_substs)) => {\n-            if from_adt.did != to_adt.did || !COLLECTIONS.iter().any(|path| match_def_path(cx, to_adt.did, path)) {\n+            if from_adt.did != to_adt.did || match_any_diagnostic_items(cx, to_adt.did, COLLECTIONS).is_none() {\n                 return false;\n             }\n             if from_substs"}, {"sha": "b0c3fe1e5a7121d56cafc32e45a0f872536d633b", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "patch": "@@ -21,17 +21,11 @@ pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n-/// Preferably use the diagnostic item `sym::BinaryHeap` where possible\n-pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n /// Preferably use the diagnostic item `sym::Borrow` where possible\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n-/// Preferably use the diagnostic item `sym::BTreeMap` where possible\n-pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];\n pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n-/// Preferably use the diagnostic item `sym::BTreeSet` where possible\n-pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n@@ -59,13 +53,9 @@ pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\"\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n-/// Preferably use the diagnostic item `sym::hashmap_type` where possible\n-pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_CONTAINS_KEY: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"contains_key\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_INSERT: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"insert\"];\n-/// Preferably use the diagnostic item `sym::hashset_type` where possible\n-pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n #[cfg(feature = \"internal-lints\")]\n pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];\n #[cfg(feature = \"internal-lints\")]\n@@ -83,8 +73,6 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LIBC_STRLEN: [&str; 2] = [\"libc\", \"strlen\"];\n-/// Preferably use the diagnostic item `sym::LinkedList` where possible\n-pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n #[cfg(any(feature = \"internal-lints\", feature = \"metadata-collector-lint\"))]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n@@ -182,14 +170,10 @@ pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"]\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n-\n-pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n-pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n-pub const WRITE_BYTES: [&str; 3] = [\"core\", \"intrinsics\", \"write_bytes\"];"}, {"sha": "be7b7a9af19207b78f30ba8d48f06f6f8a98ef2b", "filename": "tests/ui-internal/match_type_on_diag_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs?ref=ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "patch": "@@ -27,7 +27,6 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr) {\n         let ty = cx.typeck_results().expr_ty(expr);\n \n-        let _ = match_type(cx, ty, &paths::VEC); // FIXME: Doesn't lint external paths\n         let _ = match_type(cx, ty, &OPTION);\n         let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n "}, {"sha": "f5d92fc615c2069902cb4b532ab4280e23b9d777", "filename": "tests/ui-internal/match_type_on_diag_item.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr?ref=ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "patch": "@@ -1,5 +1,5 @@\n error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n-  --> $DIR/match_type_on_diag_item.rs:31:17\n+  --> $DIR/match_type_on_diag_item.rs:30:17\n    |\n LL |         let _ = match_type(cx, ty, &OPTION);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::option_type)`\n@@ -12,13 +12,13 @@ LL | #![deny(clippy::internal)]\n    = note: `#[deny(clippy::match_type_on_diagnostic_item)]` implied by `#[deny(clippy::internal)]`\n \n error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n-  --> $DIR/match_type_on_diag_item.rs:32:17\n+  --> $DIR/match_type_on_diag_item.rs:31:17\n    |\n LL |         let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::result_type)`\n \n error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n-  --> $DIR/match_type_on_diag_item.rs:35:17\n+  --> $DIR/match_type_on_diag_item.rs:34:17\n    |\n LL |         let _ = clippy_utils::ty::match_type(cx, ty, rc_path);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::Rc)`"}]}