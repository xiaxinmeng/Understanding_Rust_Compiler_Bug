{"sha": "c6143742bd4e625d391ac3ea860be7578ab9f53f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MTQzNzQyYmQ0ZTYyNWQzOTFhYzNlYTg2MGJlNzU3OGFiOWY1M2Y=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-21T08:48:42Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-21T08:48:42Z"}, "message": "add support of feature flag for runnables #4464\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "43cce6b63b38ab0497c54df8850d7c23afd70e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43cce6b63b38ab0497c54df8850d7c23afd70e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6143742bd4e625d391ac3ea860be7578ab9f53f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6143742bd4e625d391ac3ea860be7578ab9f53f", "html_url": "https://github.com/rust-lang/rust/commit/c6143742bd4e625d391ac3ea860be7578ab9f53f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6143742bd4e625d391ac3ea860be7578ab9f53f/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "html_url": "https://github.com/rust-lang/rust/commit/ebaa05a4478096aaf3bc2a48d0d171a287422c7c"}], "stats": {"total": 231, "additions": 212, "deletions": 19}, "files": [{"sha": "a4b201e0e017fd188a3ceb3e76929e069b964bb1", "filename": "crates/ra_cfg/src/cfg_expr.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs?ref=c6143742bd4e625d391ac3ea860be7578ab9f53f", "patch": "@@ -33,6 +33,36 @@ impl CfgExpr {\n             CfgExpr::Not(pred) => pred.fold(query).map(|s| !s),\n         }\n     }\n+\n+    /// Return minimal features needed\n+    pub fn minimal_features_needed(&self) -> Option<Vec<SmolStr>> {\n+        let mut features = vec![];\n+        self.collect_minimal_features_needed(&mut features);\n+        if features.is_empty() {\n+            None\n+        } else {\n+            Some(features)\n+        }\n+    }\n+\n+    fn collect_minimal_features_needed(&self, features: &mut Vec<SmolStr>) {\n+        match self {\n+            CfgExpr::KeyValue { key, value } if key == \"feature\" => features.push(value.clone()),\n+            CfgExpr::All(preds) => {\n+                preds.iter().for_each(|cfg| cfg.collect_minimal_features_needed(features));\n+            }\n+            CfgExpr::Any(preds) => {\n+                for cfg in preds {\n+                    let len_features = features.len();\n+                    cfg.collect_minimal_features_needed(features);\n+                    if len_features != features.len() {\n+                        break;\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n }\n \n pub fn parse_cfg(tt: &Subtree) -> CfgExpr {\n@@ -88,13 +118,17 @@ fn next_cfg_expr(it: &mut SliceIter<tt::TokenTree>) -> Option<CfgExpr> {\n mod tests {\n     use super::*;\n \n-    use mbe::ast_to_token_tree;\n+    use mbe::{ast_to_token_tree, TokenMap};\n     use ra_syntax::ast::{self, AstNode};\n \n-    fn assert_parse_result(input: &str, expected: CfgExpr) {\n+    fn get_token_tree_generated(input: &str) -> (tt::Subtree, TokenMap) {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        let (tt, _) = ast_to_token_tree(&tt).unwrap();\n+        ast_to_token_tree(&tt).unwrap()\n+    }\n+\n+    fn assert_parse_result(input: &str, expected: CfgExpr) {\n+        let (tt, _) = get_token_tree_generated(input);\n         assert_eq!(parse_cfg(&tt), expected);\n     }\n \n@@ -129,4 +163,32 @@ mod tests {\n             ]),\n         );\n     }\n+\n+    #[test]\n+    fn test_cfg_expr_minimal_features_needed() {\n+        let (subtree, _) = get_token_tree_generated(r#\"#![cfg(feature = \"baz\")]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+\n+        assert_eq!(cfg_expr.minimal_features_needed().unwrap(), vec![SmolStr::new(\"baz\")]);\n+\n+        let (subtree, _) =\n+            get_token_tree_generated(r#\"#![cfg(all(feature = \"baz\", feature = \"foo\"))]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+\n+        assert_eq!(\n+            cfg_expr.minimal_features_needed().unwrap(),\n+            vec![SmolStr::new(\"baz\"), SmolStr::new(\"foo\")]\n+        );\n+\n+        let (subtree, _) =\n+            get_token_tree_generated(r#\"#![cfg(any(feature = \"baz\", feature = \"foo\", unix))]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+\n+        assert_eq!(cfg_expr.minimal_features_needed().unwrap(), vec![SmolStr::new(\"baz\")]);\n+\n+        let (subtree, _) = get_token_tree_generated(r#\"#![cfg(foo)]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+\n+        assert!(cfg_expr.minimal_features_needed().is_none());\n+    }\n }"}, {"sha": "3364a822f431cf3067589fe2f3824451802edd87", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=c6143742bd4e625d391ac3ea860be7578ab9f53f", "patch": "@@ -62,6 +62,7 @@ pub use crate::{\n \n pub use hir_def::{\n     adt::StructKind,\n+    attr::Attrs,\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,"}, {"sha": "8b6c0bedee78bc8daf2ffb90af73bbaeca3fe6a9", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=c6143742bd4e625d391ac3ea860be7578ab9f53f", "patch": "@@ -81,7 +81,7 @@ impl Attrs {\n         }\n     }\n \n-    fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn AttrsOwner>) -> Attrs {\n+    pub fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn AttrsOwner>) -> Attrs {\n         let hygiene = Hygiene::new(db.upcast(), owner.file_id);\n         Attrs::new(owner.value, &hygiene)\n     }"}, {"sha": "273036cee1cfec60fee9b4398055fdfc45731519", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=c6143742bd4e625d391ac3ea860be7578ab9f53f", "patch": "@@ -29,7 +29,7 @@ use crate::{\n     AsMacroCall, DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n \n-/// A subset of Exander that only deals with cfg attributes. We only need it to\n+/// A subset of Expander that only deals with cfg attributes. We only need it to\n /// avoid cyclic queries in crate def map during enum processing.\n pub(crate) struct CfgExpander {\n     cfg_options: CfgOptions,"}, {"sha": "4f7eb2c5b2362628f2560d890df6dc040a53f48e", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 133, "deletions": 13, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=c6143742bd4e625d391ac3ea860be7578ab9f53f", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir::Semantics;\n+use hir::{Attrs, HirFileId, InFile, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, ModuleItemOwner, NameOwner},\n-    match_ast, SyntaxNode, TextRange,\n+    match_ast, SmolStr, SyntaxNode, TextRange,\n };\n \n use crate::FileId;\n@@ -16,6 +16,7 @@ use std::fmt::Display;\n pub struct Runnable {\n     pub range: TextRange,\n     pub kind: RunnableKind,\n+    pub features_needed: Option<Vec<SmolStr>>,\n }\n \n #[derive(Debug)]\n@@ -45,20 +46,24 @@ pub enum RunnableKind {\n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(file_id);\n-    source_file.syntax().descendants().filter_map(|i| runnable(&sema, i)).collect()\n+    source_file.syntax().descendants().filter_map(|i| runnable(&sema, i, file_id)).collect()\n }\n \n-fn runnable(sema: &Semantics<RootDatabase>, item: SyntaxNode) -> Option<Runnable> {\n+fn runnable(sema: &Semantics<RootDatabase>, item: SyntaxNode, file_id: FileId) -> Option<Runnable> {\n     match_ast! {\n         match item {\n-            ast::FnDef(it) => runnable_fn(sema, it),\n-            ast::Module(it) => runnable_mod(sema, it),\n+            ast::FnDef(it) => runnable_fn(sema, it, file_id),\n+            ast::Module(it) => runnable_mod(sema, it, file_id),\n             _ => None,\n         }\n     }\n }\n \n-fn runnable_fn(sema: &Semantics<RootDatabase>, fn_def: ast::FnDef) -> Option<Runnable> {\n+fn runnable_fn(\n+    sema: &Semantics<RootDatabase>,\n+    fn_def: ast::FnDef,\n+    file_id: FileId,\n+) -> Option<Runnable> {\n     let name_string = fn_def.name()?.text().to_string();\n \n     let kind = if name_string == \"main\" {\n@@ -89,7 +94,11 @@ fn runnable_fn(sema: &Semantics<RootDatabase>, fn_def: ast::FnDef) -> Option<Run\n             return None;\n         }\n     };\n-    Some(Runnable { range: fn_def.syntax().text_range(), kind })\n+\n+    let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &fn_def));\n+    let features_needed = get_features_needed(attrs);\n+\n+    Some(Runnable { range: fn_def.syntax().text_range(), kind, features_needed })\n }\n \n #[derive(Debug)]\n@@ -125,7 +134,11 @@ fn has_doc_test(fn_def: &ast::FnDef) -> bool {\n     fn_def.doc_comment_text().map_or(false, |comment| comment.contains(\"```\"))\n }\n \n-fn runnable_mod(sema: &Semantics<RootDatabase>, module: ast::Module) -> Option<Runnable> {\n+fn runnable_mod(\n+    sema: &Semantics<RootDatabase>,\n+    module: ast::Module,\n+    file_id: FileId,\n+) -> Option<Runnable> {\n     let has_test_function = module\n         .item_list()?\n         .items()\n@@ -138,11 +151,34 @@ fn runnable_mod(sema: &Semantics<RootDatabase>, module: ast::Module) -> Option<R\n         return None;\n     }\n     let range = module.syntax().text_range();\n-    let module = sema.to_def(&module)?;\n+    let module_def = sema.to_def(&module)?;\n+\n+    let path = module_def\n+        .path_to_root(sema.db)\n+        .into_iter()\n+        .rev()\n+        .filter_map(|it| it.name(sema.db))\n+        .join(\"::\");\n+\n+    let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &module));\n+    let features_needed = get_features_needed(attrs);\n \n-    let path =\n-        module.path_to_root(sema.db).into_iter().rev().filter_map(|it| it.name(sema.db)).join(\"::\");\n-    Some(Runnable { range, kind: RunnableKind::TestMod { path } })\n+    Some(Runnable { range, kind: RunnableKind::TestMod { path }, features_needed })\n+}\n+\n+fn get_features_needed(attrs: Attrs) -> Option<Vec<SmolStr>> {\n+    let cfg_expr = attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree));\n+    let features_needed = cfg_expr.fold(vec![], |mut acc, cfg| {\n+        if let Some(features_needed) = cfg.minimal_features_needed() {\n+            acc.extend(features_needed);\n+        }\n+        acc\n+    });\n+    if features_needed.is_empty() {\n+        None\n+    } else {\n+        Some(features_needed)\n+    }\n }\n \n #[cfg(test)]\n@@ -174,6 +210,7 @@ mod tests {\n             Runnable {\n                 range: 1..21,\n                 kind: Bin,\n+                features_needed: None,\n             },\n             Runnable {\n                 range: 22..46,\n@@ -185,6 +222,7 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n+                features_needed: None,\n             },\n             Runnable {\n                 range: 47..81,\n@@ -196,6 +234,7 @@ mod tests {\n                         ignore: true,\n                     },\n                 },\n+                features_needed: None,\n             },\n         ]\n         \"###\n@@ -223,6 +262,7 @@ mod tests {\n             Runnable {\n                 range: 1..21,\n                 kind: Bin,\n+                features_needed: None,\n             },\n             Runnable {\n                 range: 22..64,\n@@ -231,6 +271,7 @@ mod tests {\n                         \"foo\",\n                     ),\n                 },\n+                features_needed: None,\n             },\n         ]\n         \"###\n@@ -258,6 +299,7 @@ mod tests {\n                 kind: TestMod {\n                     path: \"test_mod\",\n                 },\n+                features_needed: None,\n             },\n             Runnable {\n                 range: 28..57,\n@@ -269,6 +311,7 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n+                features_needed: None,\n             },\n         ]\n         \"###\n@@ -298,6 +341,7 @@ mod tests {\n                 kind: TestMod {\n                     path: \"foo::test_mod\",\n                 },\n+                features_needed: None,\n             },\n             Runnable {\n                 range: 46..79,\n@@ -309,6 +353,7 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n+                features_needed: None,\n             },\n         ]\n         \"###\n@@ -340,6 +385,7 @@ mod tests {\n                 kind: TestMod {\n                     path: \"foo::bar::test_mod\",\n                 },\n+                features_needed: None,\n             },\n             Runnable {\n                 range: 68..105,\n@@ -351,6 +397,80 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n+                features_needed: None,\n+            },\n+        ]\n+        \"###\n+                );\n+    }\n+\n+    #[test]\n+    fn test_runnables_with_feature() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+        //- /lib.rs crate:foo cfg:feature=foo\n+        <|> //empty\n+        #[test]\n+        #[cfg(feature = \"foo\")]\n+        fn test_foo1() {}\n+        \"#,\n+        );\n+        let runnables = analysis.runnables(pos.file_id).unwrap();\n+        assert_debug_snapshot!(&runnables,\n+        @r###\"\n+        [\n+            Runnable {\n+                range: 1..58,\n+                kind: Test {\n+                    test_id: Name(\n+                        \"test_foo1\",\n+                    ),\n+                    attr: TestAttr {\n+                        ignore: false,\n+                    },\n+                },\n+                features_needed: Some(\n+                    [\n+                        \"foo\",\n+                    ],\n+                ),\n+            },\n+        ]\n+        \"###\n+                );\n+    }\n+\n+    #[test]\n+    fn test_runnables_with_features() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+        //- /lib.rs crate:foo cfg:feature=foo,feature=bar\n+        <|> //empty\n+        #[test]\n+        #[cfg(all(feature = \"foo\", feature = \"bar\"))]\n+        fn test_foo1() {}\n+        \"#,\n+        );\n+        let runnables = analysis.runnables(pos.file_id).unwrap();\n+        assert_debug_snapshot!(&runnables,\n+        @r###\"\n+        [\n+            Runnable {\n+                range: 1..80,\n+                kind: Test {\n+                    test_id: Name(\n+                        \"test_foo1\",\n+                    ),\n+                    attr: TestAttr {\n+                        ignore: false,\n+                    },\n+                },\n+                features_needed: Some(\n+                    [\n+                        \"foo\",\n+                        \"bar\",\n+                    ],\n+                ),\n             },\n         ]\n         \"###"}, {"sha": "a2f85060ba375d8015ade7404d3d13053d849222", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=c6143742bd4e625d391ac3ea860be7578ab9f53f", "patch": "@@ -4,6 +4,7 @@ use ra_ide::{FileId, RunnableKind, TestId};\n use ra_project_model::{self, ProjectWorkspace, TargetKind};\n \n use crate::{world::WorldSnapshot, Result};\n+use ra_syntax::SmolStr;\n \n /// Abstract representation of Cargo target.\n ///\n@@ -20,6 +21,7 @@ impl CargoTargetSpec {\n     pub(crate) fn runnable_args(\n         spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n+        features_needed: &Option<Vec<SmolStr>>,\n     ) -> Result<(Vec<String>, Vec<String>)> {\n         let mut args = Vec::new();\n         let mut extra_args = Vec::new();\n@@ -73,6 +75,13 @@ impl CargoTargetSpec {\n                 }\n             }\n         }\n+\n+        if let Some(features_needed) = features_needed {\n+            features_needed.iter().for_each(|feature| {\n+                args.push(\"--features\".to_string());\n+                args.push(feature.to_string());\n+            });\n+        }\n         Ok((args, extra_args))\n     }\n "}, {"sha": "0232cc6f0cc392cb7ea5ab605537d09607966e3b", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6143742bd4e625d391ac3ea860be7578ab9f53f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c6143742bd4e625d391ac3ea860be7578ab9f53f", "patch": "@@ -1012,7 +1012,8 @@ fn to_lsp_runnable(\n ) -> Result<lsp_ext::Runnable> {\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n     let target = spec.as_ref().map(|s| s.target.clone());\n-    let (args, extra_args) = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n+    let (args, extra_args) =\n+        CargoTargetSpec::runnable_args(spec, &runnable.kind, &runnable.features_needed)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),"}]}