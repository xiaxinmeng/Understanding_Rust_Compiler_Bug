{"sha": "ce860e5fdebd626d025d94d53629264923e441d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlODYwZTVmZGViZDYyNmQwMjVkOTRkNTM2MjkyNjQ5MjNlNDQxZDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-19T13:36:03Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-19T14:26:20Z"}, "message": "Fix cross crate static duplicate codegen", "tree": {"sha": "dcd915288ff0d7276f509662327a13bf82c2ff29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcd915288ff0d7276f509662327a13bf82c2ff29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce860e5fdebd626d025d94d53629264923e441d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce860e5fdebd626d025d94d53629264923e441d8", "html_url": "https://github.com/rust-lang/rust/commit/ce860e5fdebd626d025d94d53629264923e441d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce860e5fdebd626d025d94d53629264923e441d8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a20cc0b94a60447c159095676d5813dd508d894", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a20cc0b94a60447c159095676d5813dd508d894", "html_url": "https://github.com/rust-lang/rust/commit/2a20cc0b94a60447c159095676d5813dd508d894"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "a271cb6e62ef91be8980b35c065aa574683016b7", "filename": "example/mini_core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce860e5fdebd626d025d94d53629264923e441d8/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce860e5fdebd626d025d94d53629264923e441d8/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=ce860e5fdebd626d025d94d53629264923e441d8", "patch": "@@ -529,3 +529,5 @@ pub macro line() { /* compiler built-in */ }\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro cfg() { /* compiler built-in */ }\n+\n+pub static A_STATIC: u8 = 42;"}, {"sha": "955530c7f919e3b1cbcb161c077132198fd5c646", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce860e5fdebd626d025d94d53629264923e441d8/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce860e5fdebd626d025d94d53629264923e441d8/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=ce860e5fdebd626d025d94d53629264923e441d8", "patch": "@@ -261,4 +261,7 @@ fn main() {\n     let f2 = -1000.0;\n     assert_eq!(f2 as i8, -128);\n     assert_eq!(f2 as u8, 0);\n+\n+    static ANOTHER_STATIC: &u8 = &A_STATIC;\n+    assert_eq!(*ANOTHER_STATIC, 42);\n }"}, {"sha": "f035d8b9e060fffd2f42cf1853b1d02c6ae58c08", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce860e5fdebd626d025d94d53629264923e441d8/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce860e5fdebd626d025d94d53629264923e441d8/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=ce860e5fdebd626d025d94d53629264923e441d8", "patch": "@@ -297,6 +297,10 @@ fn define_all_allocs(\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n+            // Don't inline `reloc_target_alloc` into the match. That would cause `tcx.alloc_map`\n+            // to be locked for the duration of the match. `data_id_for_static` however may try\n+            // to lock `tcx.alloc_map` itself while calculating the layout of the target static.\n+            // This would cause a panic in single threaded rustc and a deadlock for parallel rustc.\n             let reloc_target_alloc = tcx.alloc_map.lock().get(reloc).unwrap();\n             let data_id = match reloc_target_alloc {\n                 GlobalAlloc::Function(instance) => {\n@@ -311,7 +315,9 @@ fn define_all_allocs(\n                     data_id_for_alloc_id(module, reloc, alloc.align)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n-                    cx.todo.insert(TodoItem::Static(def_id));\n+                    // Don't push a `TodoItem::Static` here, as it will cause statics used by\n+                    // multiple crates to be duplicated between them. It isn't necessary anyway,\n+                    // as it will get pushed by `codegen_static` when necessary.\n                     let linkage = crate::linkage::get_static_ref_linkage(tcx, def_id);\n                     data_id_for_static(tcx, module, def_id, linkage)\n                 }"}, {"sha": "b961069e541a554bc5b69c177aa5bc82a6c0d7df", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce860e5fdebd626d025d94d53629264923e441d8/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ce860e5fdebd626d025d94d53629264923e441d8/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=ce860e5fdebd626d025d94d53629264923e441d8", "patch": "@@ -26,7 +26,7 @@ rm -r target/out || true\n mkdir -p target/out/clif\n \n echo \"[BUILD] mini_core\"\n-$RUSTC example/mini_core.rs --crate-name mini_core --crate-type dylib\n+$RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib\n \n echo \"[BUILD] example\"\n $RUSTC example/example.rs --crate-type lib"}]}