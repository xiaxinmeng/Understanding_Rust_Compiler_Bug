{"sha": "3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZGYyNmE2ZmNhYTU1N2U5YzM2NTJjY2E1YzBlMDgwMjk1NmVlM2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-08T22:51:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-08T22:51:04Z"}, "message": "Merge #7898\n\n7898: generate_function assist: infer return type r=JoshMcguigan a=JoshMcguigan\n\nThis PR makes two changes to the generate function assist:\r\n\r\n1. Attempt to infer an appropriate return type for the generated function\r\n2. If a return type is inferred, and that return type is not unit, don't render the snippet\r\n\r\n```rust\r\nfn main() {\r\n    let x: u32 = foo$0();\r\n    //              ^^^ trigger the assist to generate this function\r\n}\r\n\r\n// BEFORE\r\nfn foo() ${0:-> ()} {\r\n    todo!()\r\n}\r\n\r\n// AFTER (only change 1)\r\nfn foo() ${0:-> u32} {\r\n    todo!()\r\n}\r\n\r\n// AFTER (change  1 and 2, note the lack of snippet around the return type)\r\nfn foo() -> u32 {\r\n    todo!()\r\n}\r\n```\r\n\r\nThese changes are made as two commits, in case we want to omit change 2. I personally feel like it is a nice change, but I could understand there being some opposition.\r\n\r\n#### Pros of change 2\r\nIf we are able to infer a return type, and especially if that return type is not the unit type, the return type is almost as likely to be correct as the argument names/types. I think this becomes even more true as people learn how this feature works.\r\n\r\n#### Cons of change 2\r\n\r\nWe could never be as confident about the return type as we are about the function argument types, so it is more likely a user will want to change that. Plus it is a confusing UX to sometimes have the cursor highlight the return type after triggering this assist and sometimes not have that happen.\r\n\r\n#### Why omit unit type?\r\n\r\nThe assumption is that if we infer the return type as unit, it is likely just because of the current structure of the code rather than that actually being the desired return type. However, this is obviously just a heuristic and will sometimes be wrong. But being wrong here just means falling back to the exact behavior that existed before this PR.\r\n\r\n\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "95068634046c5c57a7689ab7034797224e542dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95068634046c5c57a7689ab7034797224e542dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRqpYCRBK7hj4Ov3rIwAAdHIIAI3IsnYR0w0MpmJhKdwhb2lW\nOYxcis5BYVInh77Vxbjqmyq2dgym9d5Fe9E8SJo6O5aBqHvJ1l/ky/HJSI7/JJmL\nZC7+N7l+r/aFy43eVhlAtKzAPHRmlRSnJdHivzzDZQNveOuKPeg75NDgfqO/+c4h\nC8t0Z38eeEApU5RamR2d2lyEhHnP7YWi3u+Jsnez53+CNj1WKEOVtRHUfbszNE8x\nUX4umL53MSJFaqrdToTIqXV125o7H27NZ2nv86BNAtRczb7a+twhRGnf8okNPabJ\n+V/oyOhK0MFXiPHCJqc6zF4qtQTTjh1/ZHVipLp9zsihoY4rYBq1+X1e7mNo2uo=\n=dYbs\n-----END PGP SIGNATURE-----\n", "payload": "tree 95068634046c5c57a7689ab7034797224e542dca\nparent c48478621fe9b50cb19bfd0ea4a5c2ff0de5d6ac\nparent b275e609051f217f330509da26cf74bf941cf972\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615243864 +0000\ncommitter GitHub <noreply@github.com> 1615243864 +0000\n\nMerge #7898\n\n7898: generate_function assist: infer return type r=JoshMcguigan a=JoshMcguigan\n\nThis PR makes two changes to the generate function assist:\r\n\r\n1. Attempt to infer an appropriate return type for the generated function\r\n2. If a return type is inferred, and that return type is not unit, don't render the snippet\r\n\r\n```rust\r\nfn main() {\r\n    let x: u32 = foo$0();\r\n    //              ^^^ trigger the assist to generate this function\r\n}\r\n\r\n// BEFORE\r\nfn foo() ${0:-> ()} {\r\n    todo!()\r\n}\r\n\r\n// AFTER (only change 1)\r\nfn foo() ${0:-> u32} {\r\n    todo!()\r\n}\r\n\r\n// AFTER (change  1 and 2, note the lack of snippet around the return type)\r\nfn foo() -> u32 {\r\n    todo!()\r\n}\r\n```\r\n\r\nThese changes are made as two commits, in case we want to omit change 2. I personally feel like it is a nice change, but I could understand there being some opposition.\r\n\r\n#### Pros of change 2\r\nIf we are able to infer a return type, and especially if that return type is not the unit type, the return type is almost as likely to be correct as the argument names/types. I think this becomes even more true as people learn how this feature works.\r\n\r\n#### Cons of change 2\r\n\r\nWe could never be as confident about the return type as we are about the function argument types, so it is more likely a user will want to change that. Plus it is a confusing UX to sometimes have the cursor highlight the return type after triggering this assist and sometimes not have that happen.\r\n\r\n#### Why omit unit type?\r\n\r\nThe assumption is that if we infer the return type as unit, it is likely just because of the current structure of the code rather than that actually being the desired return type. However, this is obviously just a heuristic and will sometimes be wrong. But being wrong here just means falling back to the exact behavior that existed before this PR.\r\n\r\n\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f", "html_url": "https://github.com/rust-lang/rust/commit/3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c48478621fe9b50cb19bfd0ea4a5c2ff0de5d6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48478621fe9b50cb19bfd0ea4a5c2ff0de5d6ac", "html_url": "https://github.com/rust-lang/rust/commit/c48478621fe9b50cb19bfd0ea4a5c2ff0de5d6ac"}, {"sha": "b275e609051f217f330509da26cf74bf941cf972", "url": "https://api.github.com/repos/rust-lang/rust/commits/b275e609051f217f330509da26cf74bf941cf972", "html_url": "https://github.com/rust-lang/rust/commit/b275e609051f217f330509da26cf74bf941cf972"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "6f95b1a07398d016e82a8a92915e9dc035fd2f95", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=3fdf26a6fcaa557e9c3652cca5c0e0802956ee3f", "patch": "@@ -83,17 +83,18 @@ struct FunctionTemplate {\n     leading_ws: String,\n     fn_def: ast::Fn,\n     ret_type: ast::RetType,\n+    should_render_snippet: bool,\n     trailing_ws: String,\n     file: FileId,\n }\n \n impl FunctionTemplate {\n     fn to_string(&self, cap: Option<SnippetCap>) -> String {\n-        let f = match cap {\n-            Some(cap) => {\n+        let f = match (cap, self.should_render_snippet) {\n+            (Some(cap), true) => {\n                 render_snippet(cap, self.fn_def.syntax(), Cursor::Replace(self.ret_type.syntax()))\n             }\n-            None => self.fn_def.to_string(),\n+            _ => self.fn_def.to_string(),\n         };\n         format!(\"{}{}{}\", self.leading_ws, f, self.trailing_ws)\n     }\n@@ -104,6 +105,8 @@ struct FunctionBuilder {\n     fn_name: ast::Name,\n     type_params: Option<ast::GenericParamList>,\n     params: ast::ParamList,\n+    ret_type: ast::RetType,\n+    should_render_snippet: bool,\n     file: FileId,\n     needs_pub: bool,\n }\n@@ -132,7 +135,43 @@ impl FunctionBuilder {\n         let fn_name = fn_name(&path)?;\n         let (type_params, params) = fn_args(ctx, target_module, &call)?;\n \n-        Some(Self { target, fn_name, type_params, params, file, needs_pub })\n+        // should_render_snippet intends to express a rough level of confidence about\n+        // the correctness of the return type.\n+        //\n+        // If we are able to infer some return type, and that return type is not unit, we\n+        // don't want to render the snippet. The assumption here is in this situation the\n+        // return type is just as likely to be correct as any other part of the generated\n+        // function.\n+        //\n+        // In the case where the return type is inferred as unit it is likely that the\n+        // user does in fact intend for this generated function to return some non unit\n+        // type, but that the current state of their code doesn't allow that return type\n+        // to be accurately inferred.\n+        let (ret_ty, should_render_snippet) = {\n+            match ctx.sema.type_of_expr(&ast::Expr::CallExpr(call.clone())) {\n+                Some(ty) if ty.is_unknown() || ty.is_unit() => (make::ty_unit(), true),\n+                Some(ty) => {\n+                    let rendered = ty.display_source_code(ctx.db(), target_module.into());\n+                    match rendered {\n+                        Ok(rendered) => (make::ty(&rendered), false),\n+                        Err(_) => (make::ty_unit(), true),\n+                    }\n+                }\n+                None => (make::ty_unit(), true),\n+            }\n+        };\n+        let ret_type = make::ret_type(ret_ty);\n+\n+        Some(Self {\n+            target,\n+            fn_name,\n+            type_params,\n+            params,\n+            ret_type,\n+            should_render_snippet,\n+            file,\n+            needs_pub,\n+        })\n     }\n \n     fn render(self) -> FunctionTemplate {\n@@ -145,7 +184,7 @@ impl FunctionBuilder {\n             self.type_params,\n             self.params,\n             fn_body,\n-            Some(make::ret_type(make::ty_unit())),\n+            Some(self.ret_type),\n         );\n         let leading_ws;\n         let trailing_ws;\n@@ -171,6 +210,7 @@ impl FunctionBuilder {\n             insert_offset,\n             leading_ws,\n             ret_type: fn_def.ret_type().unwrap(),\n+            should_render_snippet: self.should_render_snippet,\n             fn_def,\n             trailing_ws,\n             file: self.file,\n@@ -546,7 +586,7 @@ impl Baz {\n     }\n }\n \n-fn bar(baz: Baz) ${0:-> ()} {\n+fn bar(baz: Baz) -> Baz {\n     todo!()\n }\n \",\n@@ -1059,6 +1099,27 @@ pub(crate) fn bar() ${0:-> ()} {\n         )\n     }\n \n+    #[test]\n+    fn add_function_with_return_type() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+fn main() {\n+    let x: u32 = foo$0();\n+}\n+\",\n+            r\"\n+fn main() {\n+    let x: u32 = foo();\n+}\n+\n+fn foo() -> u32 {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n+\n     #[test]\n     fn add_function_not_applicable_if_function_already_exists() {\n         check_assist_not_applicable("}]}