{"sha": "5fa1016f93d77e43c3ed69b1155308616095cfcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTEwMTZmOTNkNzdlNDNjM2VkNjliMTE1NTMwODYxNjA5NWNmY2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-24T17:25:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-24T17:25:52Z"}, "message": "Rollup merge of #57873 - milesand:master, r=Centril\n\nStabilize no_panic_pow\n\nThis would close #48320.\n\nI'm not sure if I've done this right, I've just changed attribute name to stable and set `since` to two minor versions above current stable since that seemed like what others were doing.", "tree": {"sha": "8c26701f54ae546e976119f78bcfc6d27dd586c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c26701f54ae546e976119f78bcfc6d27dd586c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa1016f93d77e43c3ed69b1155308616095cfcb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSfUgCRBK7hj4Ov3rIwAAdHIIAFFrNn+9bxKFSamLo1T6fs3+\n9RUf+esBWM+7CgwTwwOC4dqJB+PL6T57th2FYL1F0j+v7ej9RNwterBsx0XNem5S\nN15Bg0eL6mPBo8TJk9S03R/OjxlwmkXwAH3gdpNRMceMlvoX2r7OgJzJHvGb+c9W\n4KhCq9a7bK6vwDWWaRVtu1TVzu4QfRFNISc3DnyO0373K8MiCLeBta7HNxh3hKXd\nv4ViL4gk6mnOy74n9YdwDpb6TNrVi/hAEu+y1xzoJmqxwerSk+LIXCds30GpjzJU\nBW9ykZYmr1L7zVDTeNzjJrf/Uq8m0Iz4hWhPdcej/YcIUcwBiJcioXD/k0wZLH0=\n=Rr18\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c26701f54ae546e976119f78bcfc6d27dd586c0\nparent 7274591df50f135ad725577806471fd42320c532\nparent b12aa4fb6e86be9c031cfc4e52ab934ba49897eb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548350752 +0100\ncommitter GitHub <noreply@github.com> 1548350752 +0100\n\nRollup merge of #57873 - milesand:master, r=Centril\n\nStabilize no_panic_pow\n\nThis would close #48320.\n\nI'm not sure if I've done this right, I've just changed attribute name to stable and set `since` to two minor versions above current stable since that seemed like what others were doing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa1016f93d77e43c3ed69b1155308616095cfcb", "html_url": "https://github.com/rust-lang/rust/commit/5fa1016f93d77e43c3ed69b1155308616095cfcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa1016f93d77e43c3ed69b1155308616095cfcb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7274591df50f135ad725577806471fd42320c532", "url": "https://api.github.com/repos/rust-lang/rust/commits/7274591df50f135ad725577806471fd42320c532", "html_url": "https://github.com/rust-lang/rust/commit/7274591df50f135ad725577806471fd42320c532"}, {"sha": "b12aa4fb6e86be9c031cfc4e52ab934ba49897eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb", "html_url": "https://github.com/rust-lang/rust/commit/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "423b800d5852f98d3f75826d80c145712d7655e9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5fa1016f93d77e43c3ed69b1155308616095cfcb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa1016f93d77e43c3ed69b1155308616095cfcb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5fa1016f93d77e43c3ed69b1155308616095cfcb", "patch": "@@ -847,13 +847,12 @@ overflow occurred.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(8\", stringify!($SelfT), \".checked_pow(2), Some(64));\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\",\n $EndFeature, \"\n ```\"),\n \n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n@@ -966,15 +965,14 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"use std::\", stringify!($SelfT), \";\n \n assert_eq!((-4\", stringify!($SelfT), \").saturating_pow(3), -64);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT), \"::MIN);\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n@@ -1297,13 +1295,12 @@ wrapping around at the boundary of the type.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".wrapping_pow(4), 81);\n assert_eq!(3i8.wrapping_pow(5), -13);\n assert_eq!(3i8.wrapping_pow(6), -39);\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n@@ -1669,12 +1666,11 @@ whether an overflow happened.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".overflowing_pow(4), (81, false));\n assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n@@ -2789,11 +2785,10 @@ overflow occurred.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".checked_pow(5), Some(32));\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n@@ -2893,14 +2888,13 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"use std::\", stringify!($SelfT), \";\n \n assert_eq!(4\", stringify!($SelfT), \".saturating_pow(3), 64);\n assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n@@ -3178,11 +3172,10 @@ wrapping around at the boundary of the type.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".wrapping_pow(5), 243);\n assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n@@ -3497,11 +3490,10 @@ whether an overflow happened.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".overflowing_pow(5), (243, false));\n assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;"}]}