{"sha": "42d538e6157cc4f923b4c2b8a3382d6465c90447", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZDUzOGU2MTU3Y2M0ZjkyM2I0YzJiOGEzMzgyZDY0NjVjOTA0NDc=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-06-12T06:38:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-13T20:53:34Z"}, "message": "Fix the unused struct field lint for struct variants\n\nFixes #14837.", "tree": {"sha": "76b2a6c636bd3803c1106ed64e734547f8d47150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b2a6c636bd3803c1106ed64e734547f8d47150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42d538e6157cc4f923b4c2b8a3382d6465c90447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42d538e6157cc4f923b4c2b8a3382d6465c90447", "html_url": "https://github.com/rust-lang/rust/commit/42d538e6157cc4f923b4c2b8a3382d6465c90447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42d538e6157cc4f923b4c2b8a3382d6465c90447/comments", "author": null, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c17af5d7fdd54f727e8cc208a7643082c2f5fe93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c17af5d7fdd54f727e8cc208a7643082c2f5fe93", "html_url": "https://github.com/rust-lang/rust/commit/c17af5d7fdd54f727e8cc208a7643082c2f5fe93"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "aa74614b78cd884fdb08ed2957888188259f99a7", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/42d538e6157cc4f923b4c2b8a3382d6465c90447/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d538e6157cc4f923b4c2b8a3382d6465c90447/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=42d538e6157cc4f923b4c2b8a3382d6465c90447", "patch": "@@ -55,6 +55,11 @@ struct MarkSymbolVisitor<'a> {\n     live_symbols: Box<HashSet<ast::NodeId>>,\n }\n \n+#[deriving(Clone)]\n+struct MarkSymbolVisitorContext {\n+    struct_has_extern_repr: bool\n+}\n+\n impl<'a> MarkSymbolVisitor<'a> {\n     fn new(tcx: &'a ty::ctxt,\n            worklist: Vec<ast::NodeId>) -> MarkSymbolVisitor<'a> {\n@@ -170,48 +175,61 @@ impl<'a> MarkSymbolVisitor<'a> {\n     }\n \n     fn visit_node(&mut self, node: &ast_map::Node) {\n+        let ctxt = MarkSymbolVisitorContext {\n+            struct_has_extern_repr: false\n+        };\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n-                    ast::ItemStruct(struct_def, _) => {\n+                    ast::ItemStruct(..) => {\n                         let has_extern_repr = item.attrs.iter().fold(attr::ReprAny, |acc, attr| {\n                             attr::find_repr_attr(self.tcx.sess.diagnostic(), attr, acc)\n                         }) == attr::ReprExtern;\n-                        let live_fields = struct_def.fields.iter().filter(|f| {\n-                            has_extern_repr || match f.node.kind {\n-                                ast::NamedField(_, ast::Public) => true,\n-                                _ => false\n-                            }\n+\n+                        visit::walk_item(self, &*item, MarkSymbolVisitorContext {\n+                            struct_has_extern_repr: has_extern_repr,\n+                            ..(ctxt)\n                         });\n-                        self.live_symbols.extend(live_fields.map(|f| f.node.id));\n-                        visit::walk_item(self, &*item, ());\n                     }\n                     ast::ItemFn(..)\n-                    | ast::ItemTy(..)\n                     | ast::ItemEnum(..)\n+                    | ast::ItemTy(..)\n                     | ast::ItemStatic(..) => {\n-                        visit::walk_item(self, &*item, ());\n+                        visit::walk_item(self, &*item, ctxt);\n                     }\n                     _ => ()\n                 }\n             }\n             ast_map::NodeTraitMethod(trait_method) => {\n-                visit::walk_trait_method(self, &*trait_method, ());\n+                visit::walk_trait_method(self, &*trait_method, ctxt);\n             }\n             ast_map::NodeMethod(method) => {\n-                visit::walk_block(self, &*method.body, ());\n+                visit::walk_block(self, &*method.body, ctxt);\n             }\n             ast_map::NodeForeignItem(foreign_item) => {\n-                visit::walk_foreign_item(self, &*foreign_item, ());\n+                visit::walk_foreign_item(self, &*foreign_item, ctxt);\n             }\n             _ => ()\n         }\n     }\n }\n \n-impl<'a> Visitor<()> for MarkSymbolVisitor<'a> {\n+impl<'a> Visitor<MarkSymbolVisitorContext> for MarkSymbolVisitor<'a> {\n+\n+    fn visit_struct_def(&mut self, def: &ast::StructDef, _: ast::Ident, _: &ast::Generics,\n+                        _: ast::NodeId, ctxt: MarkSymbolVisitorContext) {\n+        let live_fields = def.fields.iter().filter(|f| {\n+            ctxt.struct_has_extern_repr || match f.node.kind {\n+                ast::NamedField(_, ast::Public) => true,\n+                _ => false\n+            }\n+        });\n+        self.live_symbols.extend(live_fields.map(|f| f.node.id));\n+\n+        visit::walk_struct_def(self, def, ctxt);\n+    }\n \n-    fn visit_expr(&mut self, expr: &ast::Expr, _: ()) {\n+    fn visit_expr(&mut self, expr: &ast::Expr, ctxt: MarkSymbolVisitorContext) {\n         match expr.node {\n             ast::ExprMethodCall(..) => {\n                 self.lookup_and_handle_method(expr.id, expr.span);\n@@ -222,26 +240,26 @@ impl<'a> Visitor<()> for MarkSymbolVisitor<'a> {\n             _ => ()\n         }\n \n-        visit::walk_expr(self, expr, ())\n+        visit::walk_expr(self, expr, ctxt);\n     }\n \n-    fn visit_pat(&mut self, pat: &ast::Pat, _: ()) {\n+    fn visit_pat(&mut self, pat: &ast::Pat, ctxt: MarkSymbolVisitorContext) {\n         match pat.node {\n             ast::PatStruct(_, ref fields, _) => {\n                 self.handle_field_pattern_match(pat, fields.as_slice());\n             }\n             _ => ()\n         }\n \n-        visit::walk_pat(self, pat, ())\n+        visit::walk_pat(self, pat, ctxt);\n     }\n \n-    fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId, _: ()) {\n+    fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId, ctxt: MarkSymbolVisitorContext) {\n         self.lookup_and_handle_definition(&id);\n-        visit::walk_path(self, path, ());\n+        visit::walk_path(self, path, ctxt);\n     }\n \n-    fn visit_item(&mut self, _: &ast::Item, _: ()) {\n+    fn visit_item(&mut self, _: &ast::Item, _: MarkSymbolVisitorContext) {\n         // Do not recurse into items. These items will be added to the\n         // worklist and recursed into manually if necessary.\n     }"}, {"sha": "c207980cd6e34c89053330835c91ff94fa966241", "filename": "src/test/run-pass/issue-14837.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42d538e6157cc4f923b4c2b8a3382d6465c90447/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d538e6157cc4f923b4c2b8a3382d6465c90447/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14837.rs?ref=42d538e6157cc4f923b4c2b8a3382d6465c90447", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(struct_variant)]\n+#![deny(warnings)]\n+\n+pub enum Foo {\n+    Bar {\n+        pub baz: int\n+    }\n+}\n+\n+fn main() { }"}]}