{"sha": "b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "node_id": "C_kwDOAAsO6NoAKGI5ZDNmNjU0MTI4Y2U2YmEyOWUxZTlmZjMxZmNjNDRmMmYwNGI1OWY", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-08-30T22:17:45Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-08-30T22:17:45Z"}, "message": "[drop tracking] Use parent expression for scope\n\nPreviously we were just using the parent node as the scope for a\ntemporary value, but it turns out this is too narrow. For example, in\nan expression like\n\n    Foo {\n        b: &42,\n        a: async { 0 }.await,\n    }\n\nthe scope for the &42 was set to the ExprField node for `b: &42`, when\nwe actually want to use the Foo struct expression.\n\nWe fix this by recursively searching through parent nodes until we find\na Node::Expr. It may be that we don't find one, and if so that's okay,\nwe will just fall back on the enclosing temporary scope which is always\nsufficient.", "tree": {"sha": "97badec6bf25b1c3e4c84453d6e09f44ee1e93aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97badec6bf25b1c3e4c84453d6e09f44ee1e93aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "html_url": "https://github.com/rust-lang/rust/commit/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230a8ee364b693c286a2187e56239cd2cc3be318", "url": "https://api.github.com/repos/rust-lang/rust/commits/230a8ee364b693c286a2187e56239cd2cc3be318", "html_url": "https://github.com/rust-lang/rust/commit/230a8ee364b693c286a2187e56239cd2cc3be318"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "f73d498aabc239040e3ce61c4591f41fd54b40fd", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "patch": "@@ -387,6 +387,18 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n             ty.needs_drop(self.fcx.tcx, self.fcx.param_env)\n         };\n \n+        let find_parent_expr = |mut hir_id| {\n+            let hir = self.fcx.tcx.hir();\n+            hir_id = hir.find_parent_node(hir_id)?;\n+            loop {\n+                if let hir::Node::Expr(_) = self.fcx.tcx.hir().find(hir_id)? {\n+                    return Some(hir_id);\n+                } else {\n+                    hir_id = hir.find_parent_node(hir_id)?;\n+                }\n+            }\n+        };\n+\n         // Typically, the value produced by an expression is consumed by its parent in some way,\n         // so we only have to check if the parent contains a yield (note that the parent may, for\n         // example, store the value into a local variable, but then we already consider local\n@@ -409,8 +421,9 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n             }) {\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id)\n         } else {\n-            debug!(\"parent_node: {:?}\", self.fcx.tcx.hir().find_parent_node(expr.hir_id));\n-            match self.fcx.tcx.hir().find_parent_node(expr.hir_id) {\n+            let parent_expr = find_parent_expr(expr.hir_id);\n+            debug!(\"parent_expr: {:?}\", parent_expr);\n+            match parent_expr {\n                 Some(parent) => Some(Scope { id: parent.local_id, data: ScopeData::Node }),\n                 None => {\n                     self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id)"}, {"sha": "e22675e9d5f4e5ebc45155f2166788600eafc481", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "patch": "@@ -159,8 +159,8 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         bk: rustc_middle::ty::BorrowKind,\n     ) {\n         debug!(\n-            \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n-            borrow_kind={bk:?}\"\n+            \"borrow: place_with_id = {place_with_id:#?}, diag_expr_id={diag_expr_id:#?}, \\\n+            borrow_kind={bk:#?}\"\n         );\n \n         self.borrow_place(place_with_id);"}, {"sha": "dcbe7765a9e1c4fd3d13f34a8e9b2f982f0a719c", "filename": "src/test/ui/async-await/issue-73137.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs?ref=b9d3f654128ce6ba29e1e9ff31fcc44f2f04b59f", "patch": "@@ -2,6 +2,9 @@\n \n // run-pass\n // edition:2018\n+// revisions: normal drop-tracking\n+// [normal]compile-flags: -Zdrop-tracking=no\n+// [drop-tracking]compile-flags: -Zdrop-tracking\n \n #![allow(dead_code)]\n use std::future::Future;"}]}