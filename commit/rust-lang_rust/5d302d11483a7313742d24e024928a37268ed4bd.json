{"sha": "5d302d11483a7313742d24e024928a37268ed4bd", "node_id": "C_kwDOAAsO6NoAKDVkMzAyZDExNDgzYTczMTM3NDJkMjRlMDI0OTI4YTM3MjY4ZWQ0YmQ", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-20T16:11:07Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-22T12:24:14Z"}, "message": "migrate: `BuiltinEllipsisInclusiveRangePatterns`", "tree": {"sha": "2c2a7592b2e25bebd1c057dc8279d0eaedf1e7c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2a7592b2e25bebd1c057dc8279d0eaedf1e7c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d302d11483a7313742d24e024928a37268ed4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d302d11483a7313742d24e024928a37268ed4bd", "html_url": "https://github.com/rust-lang/rust/commit/5d302d11483a7313742d24e024928a37268ed4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d302d11483a7313742d24e024928a37268ed4bd/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "html_url": "https://github.com/rust-lang/rust/commit/7a6ae2367d3b3442a7ae36e53551b58a9ece7155"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "507abad0d56744fc109e687d8e98fc0aa167f52f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5d302d11483a7313742d24e024928a37268ed4bd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d302d11483a7313742d24e024928a37268ed4bd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5d302d11483a7313742d24e024928a37268ed4bd", "patch": "@@ -1,3 +1,6 @@\n+// #![deny(rustc::diagnostic_outside_of_impl)]\n+// #![deny(rustc::untranslatable_diagnostic)]\n+//\n //! Lints in the Rust compiler.\n //!\n //! This contains lints which can feasibly be implemented as their own\n@@ -21,6 +24,7 @@\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n use crate::{\n+    errors::BuiltinEllpisisInclusiveRangePatterns,\n     types::{transparent_newtype_field, CItemKind},\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n };\n@@ -1760,18 +1764,11 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                     None => format!(\"&(..={})\", end),\n                 };\n                 if join.edition() >= Edition::Edition2021 {\n-                    let mut err = cx.sess().struct_span_err_with_code(\n-                        pat.span,\n-                        msg,\n-                        rustc_errors::error_code!(E0783),\n-                    );\n-                    err.span_suggestion(\n-                        pat.span,\n-                        suggestion,\n+                    cx.sess().emit_err(BuiltinEllpisisInclusiveRangePatterns {\n+                        span: pat.span,\n+                        suggestion: pat.span,\n                         replace,\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n+                    });\n                 } else {\n                     cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, |lint| {\n                         lint.build(msg)\n@@ -1787,18 +1784,11 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             } else {\n                 let replace = \"..=\";\n                 if join.edition() >= Edition::Edition2021 {\n-                    let mut err = cx.sess().struct_span_err_with_code(\n-                        pat.span,\n-                        msg,\n-                        rustc_errors::error_code!(E0783),\n-                    );\n-                    err.span_suggestion_short(\n-                        join,\n-                        suggestion,\n-                        replace,\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n+                    cx.sess().emit_err(BuiltinEllpisisInclusiveRangePatterns {\n+                        span: pat.span,\n+                        suggestion: join,\n+                        replace: replace.to_string(),\n+                    });\n                 } else {\n                     cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {\n                         lint.build(msg)"}, {"sha": "569f68bd5e53bd30034287ea5ed5fb7cb02604f5", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d302d11483a7313742d24e024928a37268ed4bd/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d302d11483a7313742d24e024928a37268ed4bd/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=5d302d11483a7313742d24e024928a37268ed4bd", "patch": "@@ -70,3 +70,13 @@ pub struct UnknownTool {\n     #[help]\n     pub is_nightly_build: Option<()>,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(lint::builtin_ellipsis_inclusive_range_patterns, code = \"E0783\")]\n+pub struct BuiltinEllpisisInclusiveRangePatterns {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion_short(code = \"{replace}\", applicability = \"machine-applicable\")]\n+    pub suggestion: Span,\n+    pub replace: String,\n+}"}]}