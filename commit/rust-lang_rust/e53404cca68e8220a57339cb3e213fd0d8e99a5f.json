{"sha": "e53404cca68e8220a57339cb3e213fd0d8e99a5f", "node_id": "C_kwDOAAsO6NoAKGU1MzQwNGNjYTY4ZTgyMjBhNTczMzljYjNlMjEzZmQwZDhlOTlhNWY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-16T15:13:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-20T16:28:54Z"}, "message": "Move def_path_hash_to_def_id to rustc_middle.", "tree": {"sha": "f19b80c291d68a65293756c141cc3ae23115829c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f19b80c291d68a65293756c141cc3ae23115829c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53404cca68e8220a57339cb3e213fd0d8e99a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53404cca68e8220a57339cb3e213fd0d8e99a5f", "html_url": "https://github.com/rust-lang/rust/commit/e53404cca68e8220a57339cb3e213fd0d8e99a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53404cca68e8220a57339cb3e213fd0d8e99a5f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c6d3de95cee8525b40adbb49446f89ad339e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c6d3de95cee8525b40adbb49446f89ad339e4d", "html_url": "https://github.com/rust-lang/rust/commit/88c6d3de95cee8525b40adbb49446f89ad339e4d"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "82973d1f2c8546792f85029cd1fff235b0ade458", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e53404cca68e8220a57339cb3e213fd0d8e99a5f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53404cca68e8220a57339cb3e213fd0d8e99a5f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=e53404cca68e8220a57339cb3e213fd0d8e99a5f", "patch": "@@ -338,11 +338,7 @@ impl DepNodeExt for DepNode {\n     /// has been removed.\n     fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n         if self.kind.fingerprint_style() == FingerprintStyle::DefPathHash {\n-            Some(\n-                tcx.on_disk_cache\n-                    .as_ref()?\n-                    .def_path_hash_to_def_id(tcx, DefPathHash(self.hash.into())),\n-            )\n+            Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into())))\n         } else {\n             None\n         }"}, {"sha": "1244f8372a12596eded258d0e505b792b7954cbd", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e53404cca68e8220a57339cb3e213fd0d8e99a5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53404cca68e8220a57339cb3e213fd0d8e99a5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e53404cca68e8220a57339cb3e213fd0d8e99a5f", "patch": "@@ -79,11 +79,6 @@ pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     where\n         Self: Sized;\n \n-    /// Converts a `DefPathHash` to its corresponding `DefId` in the current compilation\n-    /// session, if it still exists. This is used during incremental compilation to\n-    /// turn a deserialized `DefPathHash` into its current `DefId`.\n-    fn def_path_hash_to_def_id(&self, tcx: TyCtxt<'tcx>, def_path_hash: DefPathHash) -> DefId;\n-\n     fn drop_serialized_data(&self, tcx: TyCtxt<'tcx>);\n \n     fn serialize(&self, tcx: TyCtxt<'tcx>, encoder: &mut FileEncoder) -> FileEncodeResult;\n@@ -1301,6 +1296,27 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Converts a `DefPathHash` to its corresponding `DefId` in the current compilation\n+    /// session, if it still exists. This is used during incremental compilation to\n+    /// turn a deserialized `DefPathHash` into its current `DefId`.\n+    pub fn def_path_hash_to_def_id(self, hash: DefPathHash) -> DefId {\n+        debug!(\"def_path_hash_to_def_id({:?})\", hash);\n+\n+        let stable_crate_id = hash.stable_crate_id();\n+\n+        // If this is a DefPathHash from the local crate, we can look up the\n+        // DefId in the tcx's `Definitions`.\n+        if stable_crate_id == self.sess.local_stable_crate_id() {\n+            self.untracked_resolutions.definitions.local_def_path_hash_to_def_id(hash).to_def_id()\n+        } else {\n+            // If this is a DefPathHash from an upstream crate, let the CrateStore map\n+            // it to a DefId.\n+            let cstore = &self.untracked_resolutions.cstore;\n+            let cnum = cstore.stable_crate_id_to_crate_num(stable_crate_id);\n+            cstore.def_path_hash_to_def_id(cnum, hash)\n+        }\n+    }\n+\n     pub fn def_path_debug_str(self, def_id: DefId) -> String {\n         // We are explicitly not going through queries here in order to get\n         // crate name and stable crate id since this code is called from debug!()"}, {"sha": "499dae650b3a6eaf6a8f4a5b9060b0bbff5c4ad0", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e53404cca68e8220a57339cb3e213fd0d8e99a5f/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53404cca68e8220a57339cb3e213fd0d8e99a5f/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=e53404cca68e8220a57339cb3e213fd0d8e99a5f", "patch": "@@ -358,23 +358,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n             Ok(())\n         })\n     }\n-\n-    fn def_path_hash_to_def_id(&self, tcx: TyCtxt<'tcx>, hash: DefPathHash) -> DefId {\n-        debug!(\"def_path_hash_to_def_id({:?})\", hash);\n-\n-        let stable_crate_id = hash.stable_crate_id();\n-\n-        // If this is a DefPathHash from the local crate, we can look up the\n-        // DefId in the tcx's `Definitions`.\n-        if stable_crate_id == tcx.sess.local_stable_crate_id() {\n-            tcx.definitions_untracked().local_def_path_hash_to_def_id(hash).to_def_id()\n-        } else {\n-            // If this is a DefPathHash from an upstream crate, let the CrateStore map\n-            // it to a DefId.\n-            let cnum = tcx.cstore_untracked().stable_crate_id_to_crate_num(stable_crate_id);\n-            tcx.cstore_untracked().def_path_hash_to_def_id(cnum, hash)\n-        }\n-    }\n }\n \n impl<'sess> OnDiskCache<'sess> {\n@@ -764,7 +747,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n         // If we get to this point, then all of the query inputs were green,\n         // which means that the definition with this hash is guaranteed to\n         // still exist in the current compilation session.\n-        Ok(d.tcx().on_disk_cache.as_ref().unwrap().def_path_hash_to_def_id(d.tcx(), def_path_hash))\n+        Ok(d.tcx().def_path_hash_to_def_id(def_path_hash))\n     }\n }\n "}]}