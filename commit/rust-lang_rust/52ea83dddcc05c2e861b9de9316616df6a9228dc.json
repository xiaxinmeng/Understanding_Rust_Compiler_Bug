{"sha": "52ea83dddcc05c2e861b9de9316616df6a9228dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZWE4M2RkZGNjMDVjMmU4NjFiOWRlOTMxNjYxNmRmNmE5MjI4ZGM=", "commit": {"author": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2014-09-22T17:30:06Z"}, "committer": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2014-09-22T17:30:06Z"}, "message": "Update calls of deprecated functions in macros.\n\nFallout of #17185.", "tree": {"sha": "691834c4f6304a1d3e9d347055a7b532bf50f7a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/691834c4f6304a1d3e9d347055a7b532bf50f7a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52ea83dddcc05c2e861b9de9316616df6a9228dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52ea83dddcc05c2e861b9de9316616df6a9228dc", "html_url": "https://github.com/rust-lang/rust/commit/52ea83dddcc05c2e861b9de9316616df6a9228dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52ea83dddcc05c2e861b9de9316616df6a9228dc/comments", "author": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb58ac126e638287998959a20aa91ffa730b95c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb58ac126e638287998959a20aa91ffa730b95c2", "html_url": "https://github.com/rust-lang/rust/commit/eb58ac126e638287998959a20aa91ffa730b95c2"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "39524ed547d532bfe802d0e3bae15ede41b9fbb7", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -311,13 +311,13 @@ mod tests {\n \n         task::spawn(proc() {\n             let arc_v: Arc<Vec<int>> = rx.recv();\n-            assert_eq!(*arc_v.get(3), 4);\n+            assert_eq!((*arc_v)[3], 4);\n         });\n \n         tx.send(arc_v.clone());\n \n-        assert_eq!(*arc_v.get(2), 3);\n-        assert_eq!(*arc_v.get(4), 5);\n+        assert_eq!((*arc_v)[2], 3);\n+        assert_eq!((*arc_v)[4], 5);\n \n         info!(\"{:?}\", arc_v);\n     }"}, {"sha": "02c8af2c470f3f3cb5c7905c2dfa234f03d80ea4", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -542,6 +542,7 @@ mod tests {\n     use vec::Vec;\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_simple() {\n         let mut d = RingBuf::new();\n         assert_eq!(d.len(), 0u);\n@@ -587,6 +588,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_boxes() {\n         let a: Gc<int> = box(GC) 5;\n         let b: Gc<int> = box(GC) 72;"}, {"sha": "525dc9cbe805e568c4f532c8ffd1e8b72281803d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -904,6 +904,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_initn() {\n         let mut a = vec![11i, 12, 13];\n         let b: &[int] = &[11, 12, 13];\n@@ -1303,6 +1304,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_bsearch_elem() {\n         assert_eq!([1i,2,3,4,5].bsearch_elem(&5), Some(4));\n         assert_eq!([1i,2,3,4,5].bsearch_elem(&4), Some(3));\n@@ -1350,11 +1352,11 @@ mod tests {\n     #[test]\n     fn test_reverse() {\n         let mut v: Vec<int> = vec![10i, 20];\n-        assert_eq!(*v.get(0), 10);\n-        assert_eq!(*v.get(1), 20);\n+        assert_eq!(v[0], 10);\n+        assert_eq!(v[1], 20);\n         v.reverse();\n-        assert_eq!(*v.get(0), 20);\n-        assert_eq!(*v.get(1), 10);\n+        assert_eq!(v[0], 20);\n+        assert_eq!(v[1], 10);\n \n         let mut v3: Vec<int> = vec![];\n         v3.reverse();\n@@ -1462,6 +1464,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_shift() {\n         let mut x = vec![1i, 2, 3];\n         assert_eq!(x.shift(), Some(1));\n@@ -1901,6 +1904,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_copy_from() {\n         let mut a = [1i,2,3,4,5];\n         let b = [6i,7,8];"}, {"sha": "7d66d202d5fa9d1e3f86f2aae075a2606efd35f9", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -452,7 +452,7 @@ impl<V> Index<uint, V> for SmallIntMap<V> {\n }*/\n \n macro_rules! iterator {\n-    (impl $name:ident -> $elem:ty, $getter:ident) => {\n+    (impl $name:ident -> $elem:ty, $($getter:ident),+) => {\n         impl<'a, T> Iterator<$elem> for $name<'a, T> {\n             #[inline]\n             fn next(&mut self) -> Option<$elem> {\n@@ -462,7 +462,7 @@ macro_rules! iterator {\n                             if elem.is_some() {\n                                 let index = self.front;\n                                 self.front += 1;\n-                                return Some((index, elem. $getter ()));\n+                                return Some((index, elem $(. $getter ())+));\n                             }\n                         }\n                         _ => ()\n@@ -481,7 +481,7 @@ macro_rules! iterator {\n }\n \n macro_rules! double_ended_iterator {\n-    (impl $name:ident -> $elem:ty, $getter:ident) => {\n+    (impl $name:ident -> $elem:ty, $($getter:ident),+) => {\n         impl<'a, T> DoubleEndedIterator<$elem> for $name<'a, T> {\n             #[inline]\n             fn next_back(&mut self) -> Option<$elem> {\n@@ -490,7 +490,7 @@ macro_rules! double_ended_iterator {\n                         Some(elem) => {\n                             if elem.is_some() {\n                                 self.back -= 1;\n-                                return Some((self.back, elem. $getter ()));\n+                                return Some((self.back, elem$(. $getter ())+));\n                             }\n                         }\n                         _ => ()\n@@ -510,8 +510,8 @@ pub struct Entries<'a, T:'a> {\n     iter: slice::Items<'a, Option<T>>\n }\n \n-iterator!(impl Entries -> (uint, &'a T), get_ref)\n-double_ended_iterator!(impl Entries -> (uint, &'a T), get_ref)\n+iterator!(impl Entries -> (uint, &'a T), as_ref, unwrap)\n+double_ended_iterator!(impl Entries -> (uint, &'a T), as_ref, unwrap)\n \n /// Forward iterator over the key-value pairs of a map, with the\n /// values being mutable.\n@@ -521,8 +521,8 @@ pub struct MutEntries<'a, T:'a> {\n     iter: slice::MutItems<'a, Option<T>>\n }\n \n-iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n-double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n+iterator!(impl MutEntries -> (uint, &'a mut T), as_mut, unwrap)\n+double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), as_mut, unwrap)\n \n /// Forward iterator over the keys of a map\n pub type Keys<'a, T> ="}, {"sha": "e9981790f7dc08689b7e4c13f1ceba4499df7725", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -434,7 +434,7 @@ impl<T> TrieMap<T> {\n     fn bound_mut<'a>(&'a mut self, key: uint, upper: bool) -> MutEntries<'a, T> {\n         bound!(MutEntries, self = self,\n                key = key, is_upper = upper,\n-               slice_from = mut_slice_from, iter = mut_iter,\n+               slice_from = slice_from_mut, iter = iter_mut,\n                mutability = mut)\n     }\n \n@@ -1020,7 +1020,7 @@ macro_rules! iterator_impl {\n }\n \n iterator_impl! { Entries, iter = iter, mutability = }\n-iterator_impl! { MutEntries, iter = mut_iter, mutability = mut }\n+iterator_impl! { MutEntries, iter = iter_mut, mutability = mut }\n \n /// A forward iterator over a set.\n pub struct SetItems<'a> {"}, {"sha": "a25d205e225ecb7d3090106c4783312b7f6e8269", "filename": "src/libcoretest/cmp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcoretest%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcoretest%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcmp.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -42,6 +42,7 @@ fn test_ordering_order() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_lexical_ordering() {\n     fn t(o1: Ordering, o2: Ordering, e: Ordering) {\n         assert_eq!(lexical_ordering(o1, o2), e);"}, {"sha": "3f150b3d13695ac97dda323ba1c1191556bfbaab", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -244,6 +244,7 @@ fn test_ord() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_mutate() {\n     let mut x = Some(3i);\n     assert!(x.mutate(|i| i+1));"}, {"sha": "31a1bf048ceee516f6d90a24e4647c35a6880f2f", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -1142,7 +1142,7 @@ mod tests {\n           Ok(ref m) => {\n             // The next variable after the flag is just a free argument\n \n-            assert!(*m.free.get(0) == \"20\".to_string());\n+            assert!(m.free[0] == \"20\".to_string());\n           }\n           _ => fail!()\n         }\n@@ -1298,8 +1298,8 @@ mod tests {\n               assert!(m.opt_present(\"t\"));\n               assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n               let pair = m.opt_strs(\"test\");\n-              assert!(*pair.get(0) == \"20\".to_string());\n-              assert!(*pair.get(1) == \"30\".to_string());\n+              assert!(pair[0] == \"20\".to_string());\n+              assert!(pair[1] == \"30\".to_string());\n           }\n           _ => fail!()\n         }\n@@ -1351,19 +1351,19 @@ mod tests {\n         let rs = getopts(args.as_slice(), opts.as_slice());\n         match rs {\n           Ok(ref m) => {\n-            assert!(*m.free.get(0) == \"prog\".to_string());\n-            assert!(*m.free.get(1) == \"free1\".to_string());\n+            assert!(m.free[0] == \"prog\".to_string());\n+            assert!(m.free[1] == \"free1\".to_string());\n             assert_eq!(m.opt_str(\"s\").unwrap(), \"20\".to_string());\n-            assert!(*m.free.get(2) == \"free2\".to_string());\n+            assert!(m.free[2] == \"free2\".to_string());\n             assert!((m.opt_present(\"flag\")));\n             assert_eq!(m.opt_str(\"long\").unwrap(), \"30\".to_string());\n             assert!((m.opt_present(\"f\")));\n             let pair = m.opt_strs(\"m\");\n-            assert!(*pair.get(0) == \"40\".to_string());\n-            assert!(*pair.get(1) == \"50\".to_string());\n+            assert!(pair[0] == \"40\".to_string());\n+            assert!(pair[1] == \"50\".to_string());\n             let pair = m.opt_strs(\"n\");\n-            assert!(*pair.get(0) == \"-A B\".to_string());\n-            assert!(*pair.get(1) == \"-60 70\".to_string());\n+            assert!(pair[0] == \"-A B\".to_string());\n+            assert!(pair[1] == \"-60 70\".to_string());\n             assert!((!m.opt_present(\"notpresent\")));\n           }\n           _ => fail!()"}, {"sha": "e7ce5b7dca8cb05f616441053e3efc6c27b4c8db", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -423,7 +423,7 @@ mod tests {\n             // TLD shouldn't carry over.\n             assert!(my_key.get().is_none());\n             my_key.replace(Some(\"child data\".to_string()));\n-            assert!(my_key.get().get_ref().as_slice() == \"child data\");\n+            assert!(my_key.get().as_ref().unwrap().as_slice() == \"child data\");\n             // should be cleaned up for us\n         });\n "}, {"sha": "43a1899f45e0861285431e437212ac19d7dc6890", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ea83dddcc05c2e861b9de9316616df6a9228dc/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=52ea83dddcc05c2e861b9de9316616df6a9228dc", "patch": "@@ -1519,9 +1519,9 @@ mod tests {\n         let filtered = filter_tests(&opts, tests);\n \n         assert_eq!(filtered.len(), 1);\n-        assert_eq!(filtered.get(0).desc.name.to_string(),\n+        assert_eq!(filtered[0].desc.name.to_string(),\n                    \"1\".to_string());\n-        assert!(filtered.get(0).desc.ignore == false);\n+        assert!(filtered[0].desc.ignore == false);\n     }\n \n     #[test]"}]}