{"sha": "b86574bfff69124397e1a1bdf42a47053beb3aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NjU3NGJmZmY2OTEyNDM5N2UxYTFiZGY0MmE0NzA1M2JlYjNhZmY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-07-18T13:53:29Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-07-29T22:59:19Z"}, "message": "Rename the std::ascii::{Owned,}StrAsciiExt traits to {Owned,}AsciiExt\n\n\u2026 and implement them on Vec<u8> / &[u8].\n\n[breaking-change]", "tree": {"sha": "00a71fab73597e0193684cab58f86e02e031f4a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a71fab73597e0193684cab58f86e02e031f4a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b86574bfff69124397e1a1bdf42a47053beb3aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b86574bfff69124397e1a1bdf42a47053beb3aff", "html_url": "https://github.com/rust-lang/rust/commit/b86574bfff69124397e1a1bdf42a47053beb3aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b86574bfff69124397e1a1bdf42a47053beb3aff/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8365ad81115d79e1a33ef0c034c4a74cf01819", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8365ad81115d79e1a33ef0c034c4a74cf01819", "html_url": "https://github.com/rust-lang/rust/commit/ee8365ad81115d79e1a33ef0c034c4a74cf01819"}], "stats": {"total": 92, "additions": 57, "deletions": 35}, "files": [{"sha": "a8def3e289de235929e20f3fd8eddd68f8c2eab5", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=b86574bfff69124397e1a1bdf42a47053beb3aff", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ascii::StrAsciiExt;\n+use std::ascii::AsciiExt;\n use std::cmp;\n \n #[deriving(Show, Clone)]"}, {"sha": "9224647bc798b19eeb187f3e51a9c0537a564a5b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=b86574bfff69124397e1a1bdf42a47053beb3aff", "patch": "@@ -31,7 +31,7 @@\n #![macro_escape]\n \n use std::hash;\n-use std::ascii::StrAsciiExt;\n+use std::ascii::AsciiExt;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n use syntax::ast;"}, {"sha": "d03282a3196e5c9d4a3a2f0f62f0477ab43602ed", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 54, "deletions": 32, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b86574bfff69124397e1a1bdf42a47053beb3aff", "patch": "@@ -20,7 +20,8 @@ use iter::Iterator;\n use mem;\n use option::{Option, Some, None};\n use slice::{ImmutableVector, MutableVector, Vector};\n-use str::{Str, StrAllocating, StrSlice};\n+use str::{Str, StrSlice};\n+use str;\n use string::String;\n use to_string::IntoStr;\n use vec::Vec;\n@@ -366,91 +367,112 @@ impl IntoBytes for Vec<Ascii> {\n     }\n }\n \n+\n /// Extension methods for ASCII-subset only operations on owned strings\n-pub trait OwnedStrAsciiExt {\n+pub trait OwnedAsciiExt {\n     /// Convert the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n-    fn into_ascii_upper(self) -> String;\n+    fn into_ascii_upper(self) -> Self;\n \n     /// Convert the string to ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n-    fn into_ascii_lower(self) -> String;\n+    fn into_ascii_lower(self) -> Self;\n }\n \n /// Extension methods for ASCII-subset only operations on string slices\n-pub trait StrAsciiExt {\n+pub trait AsciiExt<T> {\n     /// Makes a copy of the string in ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n-    fn to_ascii_upper(&self) -> String;\n+    fn to_ascii_upper(&self) -> T;\n \n     /// Makes a copy of the string in ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n-    fn to_ascii_lower(&self) -> String;\n+    fn to_ascii_lower(&self) -> T;\n \n     /// Check that two strings are an ASCII case-insensitive match.\n     /// Same as `to_ascii_lower(a) == to_ascii_lower(b)`,\n     /// but without allocating and copying temporary strings.\n-    fn eq_ignore_ascii_case(&self, other: &str) -> bool;\n+    fn eq_ignore_ascii_case(&self, other: Self) -> bool;\n }\n \n-impl<'a> StrAsciiExt for &'a str {\n+impl<'a> AsciiExt<String> for &'a str {\n     #[inline]\n     fn to_ascii_upper(&self) -> String {\n-        unsafe { str_copy_map_bytes(*self, &ASCII_UPPER_MAP) }\n+        // Vec<u8>::to_ascii_upper() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.as_bytes().to_ascii_upper()) }\n     }\n \n     #[inline]\n     fn to_ascii_lower(&self) -> String {\n-        unsafe { str_copy_map_bytes(*self, &ASCII_LOWER_MAP) }\n+        // Vec<u8>::to_ascii_lower() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.as_bytes().to_ascii_lower()) }\n     }\n \n     #[inline]\n     fn eq_ignore_ascii_case(&self, other: &str) -> bool {\n-        self.len() == other.len() &&\n-            self.as_bytes().iter().zip(other.as_bytes().iter()).all(\n-            |(byte_self, byte_other)| {\n-                ASCII_LOWER_MAP[*byte_self as uint] ==\n-                    ASCII_LOWER_MAP[*byte_other as uint]\n-            })\n+        self.as_bytes().eq_ignore_ascii_case(other.as_bytes())\n     }\n }\n \n-impl OwnedStrAsciiExt for String {\n+impl OwnedAsciiExt for String {\n     #[inline]\n     fn into_ascii_upper(self) -> String {\n-        unsafe { str_map_bytes(self, &ASCII_UPPER_MAP) }\n+        // Vec<u8>::into_ascii_upper() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.into_bytes().into_ascii_upper()) }\n     }\n \n     #[inline]\n     fn into_ascii_lower(self) -> String {\n-        unsafe { str_map_bytes(self, &ASCII_LOWER_MAP) }\n+        // Vec<u8>::into_ascii_lower() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.into_bytes().into_ascii_lower()) }\n     }\n }\n \n-#[inline]\n-unsafe fn str_map_bytes(string: String, map: &[u8, ..256]) -> String {\n-    let mut bytes = string.into_bytes();\n+impl<'a> AsciiExt<Vec<u8>> for &'a [u8] {\n+    #[inline]\n+    fn to_ascii_upper(&self) -> Vec<u8> {\n+        self.iter().map(|&byte| ASCII_UPPER_MAP[byte as uint]).collect()\n+    }\n \n-    for b in bytes.mut_iter() {\n-        *b = map[*b as uint];\n+    #[inline]\n+    fn to_ascii_lower(&self) -> Vec<u8> {\n+        self.iter().map(|&byte| ASCII_LOWER_MAP[byte as uint]).collect()\n     }\n \n-    String::from_utf8(bytes).unwrap()\n+    #[inline]\n+    fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n+        self.len() == other.len() &&\n+            self.iter().zip(other.iter()).all(\n+            |(byte_self, byte_other)| {\n+                ASCII_LOWER_MAP[*byte_self as uint] ==\n+                    ASCII_LOWER_MAP[*byte_other as uint]\n+            })\n+    }\n }\n \n-#[inline]\n-unsafe fn str_copy_map_bytes(string: &str, map: &[u8, ..256]) -> String {\n-    let mut s = String::from_str(string);\n-    for b in s.as_mut_bytes().mut_iter() {\n-        *b = map[*b as uint];\n+impl OwnedAsciiExt for Vec<u8> {\n+    #[inline]\n+    fn into_ascii_upper(mut self) -> Vec<u8> {\n+        for byte in self.mut_iter() {\n+            *byte = ASCII_UPPER_MAP[*byte as uint];\n+        }\n+        self\n+    }\n+\n+    #[inline]\n+    fn into_ascii_lower(mut self) -> Vec<u8> {\n+        for byte in self.mut_iter() {\n+            *byte = ASCII_LOWER_MAP[*byte as uint];\n+        }\n+        self\n     }\n-    s.into_string()\n }\n \n+\n pub static ASCII_LOWER_MAP: [u8, ..256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,"}, {"sha": "df4342bfeb57e4fcc35dafbc08fa7f395bc3af36", "filename": "src/test/run-pass/issue-10683.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86574bfff69124397e1a1bdf42a47053beb3aff/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10683.rs?ref=b86574bfff69124397e1a1bdf42a47053beb3aff", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ascii::StrAsciiExt;\n+use std::ascii::AsciiExt;\n \n static NAME: &'static str = \"hello world\";\n "}]}