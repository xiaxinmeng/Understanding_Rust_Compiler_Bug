{"sha": "8646c81e8a9127bda2f5360a636c7bf443bf73e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDZjODFlOGE5MTI3YmRhMmY1MzYwYTYzNmM3YmY0NDNiZjczZTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-21T14:01:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-21T14:01:23Z"}, "message": "Rollup merge of #64010 - c410-f3r:stabilize-attrs-fn, r=Centril\n\nStabilize `param_attrs` in Rust 1.39.0\n\n# Stabilization proposal\n\nI propose that we stabilize `#![feature(param_attrs)]`.\n\nTracking issue: #60406\nVersion: 1.39 (2019-09-26 => beta, 2019-11-07 => stable).\n\n## What is stabilized\n\nIt is now possible to add outer attributes like `#[cfg(..)]` on formal parameters of functions, closures, and function pointer types. For example:\n\n```rust\nfn len(\n    #[cfg(windows)] slice: &[u16],\n    #[cfg(not(windows))] slice: &[u8],\n) -> usize {\n    slice.len()\n}\n```\n\n## What isn't stabilized\n\n* Documentation comments like `/// Doc` on parameters.\n\n* Code expansion of a user-defined `#[proc_macro_attribute]` macro used on parameters.\n\n* Built-in attributes other than `cfg`, `cfg_attr`, `allow`, `warn`, `deny`, and `forbid`. Currently, only the lints `unused_variables` and `unused_mut` have effect and may be controlled on parameters.\n\n## Motivation\n\nThe chief motivations for stabilizing `param_attrs` include:\n\n* Finer conditional compilation with `#[cfg(..)]` and linting control of variables.\n\n* Richer macro DSLs created by users.\n\n* External tools and compiler internals can take advantage of the additional information that the parameters provide.\n\nFor more examples, see the [RFC][rfc motivation].\n\n## Reference guide\n\nIn the grammar of function and function pointer, the grammar of variadic tails (`...`) and parameters are changed respectively from:\n\n```rust\nFnParam = { pat:Pat \":\" }? ty:Type;\nVaradicTail = \"...\";\n```\n\ninto:\n\n```rust\nFnParam = OuterAttr* { pat:Pat \":\" }? ty:Type;\nVaradicTail = OuterAttr* \"...\";\n```\n\nThe grammar of a closure parameter is changed from:\n\n```rust\nClosureParam = pat:Pat { \":\" ty:Type }?;\n```\n\ninto:\n\n```rust\nClosureParam = OuterAttr* pat:Pat { \":\" ty:Type }?;\n```\n\nMore generally, where there's a list of formal (value) parameters separated or terminated by `,` and delimited by `(` and `)`. Each parameter in that list may optionally be prefixed by `OuterAttr+`.\n\nNote that in all cases, `OuterAttr*` applies to the whole parameter and not just the pattern. This distinction matters in pretty printing and in turn for macros.\n\n## History\n\n* On 2018-10-15, @Robbepop proposes [RFC 2565][rfc], \"Attributes in formal function parameter position\".\n\n* On 2019-04-30, [RFC 2565][rfc] is merged and the tracking issue is made.\n\n* On 2019-06-12, a partial implementation was completed. The implementation was done in [#60669][60669] by @c410-f3r and the PR was reviewed by @petrochenkov and @Centril.\n\n* On 2019-07-29, [#61238][61238] was fixed in [#61856][61856]. The issue fixed was that lint attributes on function args had no effect. The PR was written by @c410-f3r and reviewed by @matthewjasper, @petrochenkov, and @oli-obk.\n\n* On 2019-08-02, a bug [#63210][63210] was filed wherein the attributes on formal parameters would not be passed to macros. The issue was about forgetting to call the relevant method in `fn print_arg` in the pretty printer. In [#63212][63212], written by @Centril on 2019-08-02 and reviewed by @davidtwco, the issue aforementioned was fixed.\n\n* This PR stabilizes `param_attrs`.\n\n## Tests\n\n* [On Rust 2018, attributes aren't permitted on function parameters without a pattern in trait definitions.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs)\n\n* [All attributes that should be allowed. This includes `cfg`, `cfg_attr`, and lints check attributes.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-allowed.rs)\n\n* [Built-in attributes, which should be forbidden, e.g., `#[test]`, are.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs)\n\n* [`cfg` and `cfg_attr` are properly evaluated.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs)\n\n* [`unused_mut`](https://github.com/rust-lang/rust/blob/46f405ec4d7c6bf16fc2eaafe7541019f1da2996/src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs) and [`unused_variables`](https://github.com/rust-lang/rust/blob/master/src/test/ui/lint/lint-unused-variables.rs) are correctly applied to parameter patterns.\n\n* [Pretty printing takes formal parameter attributes into account.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-pretty.rs)\n\n## Possible future work\n\n* Custom attributes inside function parameters aren't currently supported but it is something being worked on internally.\n\n* Since documentation comments are syntactic sugar for `#[doc(...)]`, it is possible to allow literal `/// Foo` comments on function parameters.\n\n[rfc motivation]: https://github.com/rust-lang/rfcs/blob/master/text/2565-formal-function-parameter-attributes.md#motivation\n[rfc]: https://github.com/rust-lang/rfcs/pull/2565\n[60669]: https://github.com/rust-lang/rust/pull/60669\n[61856]: https://github.com/rust-lang/rust/pull/61856\n[63210]: https://github.com/rust-lang/rust/issues/63210\n[61238]: https://github.com/rust-lang/rust/issues/61238\n[63212]: https://github.com/rust-lang/rust/pull/63212\n\nThis report is a collaborative work with @Centril.", "tree": {"sha": "3caf28cbd91d19c2f4cd56b6770f88102d004a6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3caf28cbd91d19c2f4cd56b6770f88102d004a6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8646c81e8a9127bda2f5360a636c7bf443bf73e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdhi0zCRBK7hj4Ov3rIwAAdHIIAGQ9AgOvbFwe4Z11AYzP4sRf\nnIVU2Y3a/wDf5vFyg1DCH2aG/Bnug86iL5KD+OcW0QkDxwTdxCvv5lWDFj5gG6Hh\n5fSHoutGmlWvn1/svwXrY2MZrt7So/Zh94XAkGzljXLHd4q206fbC4H8SdaHtUnp\nCrQ1deZS+YCThE5dXEI56VTe9JxymUC1AnbmgBEcqzHKCwHDuz2y15XKSphaqWaF\n5rQfXFOuBrJ3KJchl70HndGBNlBhKczdWUKbUE7ZHtbXksE0BNbpAthB11GWSQcL\nNp2jvUk+tfiZwAzQ3GuBM0GcXErh1QoqGO4K+PuKnwKKdZ5nJ1nUnP0R5dZW5xM=\n=CErq\n-----END PGP SIGNATURE-----\n", "payload": "tree 3caf28cbd91d19c2f4cd56b6770f88102d004a6a\nparent 5349e69ae207c4d11245e75463c091eded3ad13c\nparent 299d696b91e833f01f37e97b69767fcf6f5cccf0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569074483 +0200\ncommitter GitHub <noreply@github.com> 1569074483 +0200\n\nRollup merge of #64010 - c410-f3r:stabilize-attrs-fn, r=Centril\n\nStabilize `param_attrs` in Rust 1.39.0\n\n# Stabilization proposal\n\nI propose that we stabilize `#![feature(param_attrs)]`.\n\nTracking issue: #60406\nVersion: 1.39 (2019-09-26 => beta, 2019-11-07 => stable).\n\n## What is stabilized\n\nIt is now possible to add outer attributes like `#[cfg(..)]` on formal parameters of functions, closures, and function pointer types. For example:\n\n```rust\nfn len(\n    #[cfg(windows)] slice: &[u16],\n    #[cfg(not(windows))] slice: &[u8],\n) -> usize {\n    slice.len()\n}\n```\n\n## What isn't stabilized\n\n* Documentation comments like `/// Doc` on parameters.\n\n* Code expansion of a user-defined `#[proc_macro_attribute]` macro used on parameters.\n\n* Built-in attributes other than `cfg`, `cfg_attr`, `allow`, `warn`, `deny`, and `forbid`. Currently, only the lints `unused_variables` and `unused_mut` have effect and may be controlled on parameters.\n\n## Motivation\n\nThe chief motivations for stabilizing `param_attrs` include:\n\n* Finer conditional compilation with `#[cfg(..)]` and linting control of variables.\n\n* Richer macro DSLs created by users.\n\n* External tools and compiler internals can take advantage of the additional information that the parameters provide.\n\nFor more examples, see the [RFC][rfc motivation].\n\n## Reference guide\n\nIn the grammar of function and function pointer, the grammar of variadic tails (`...`) and parameters are changed respectively from:\n\n```rust\nFnParam = { pat:Pat \":\" }? ty:Type;\nVaradicTail = \"...\";\n```\n\ninto:\n\n```rust\nFnParam = OuterAttr* { pat:Pat \":\" }? ty:Type;\nVaradicTail = OuterAttr* \"...\";\n```\n\nThe grammar of a closure parameter is changed from:\n\n```rust\nClosureParam = pat:Pat { \":\" ty:Type }?;\n```\n\ninto:\n\n```rust\nClosureParam = OuterAttr* pat:Pat { \":\" ty:Type }?;\n```\n\nMore generally, where there's a list of formal (value) parameters separated or terminated by `,` and delimited by `(` and `)`. Each parameter in that list may optionally be prefixed by `OuterAttr+`.\n\nNote that in all cases, `OuterAttr*` applies to the whole parameter and not just the pattern. This distinction matters in pretty printing and in turn for macros.\n\n## History\n\n* On 2018-10-15, @Robbepop proposes [RFC 2565][rfc], \"Attributes in formal function parameter position\".\n\n* On 2019-04-30, [RFC 2565][rfc] is merged and the tracking issue is made.\n\n* On 2019-06-12, a partial implementation was completed. The implementation was done in [#60669][60669] by @c410-f3r and the PR was reviewed by @petrochenkov and @Centril.\n\n* On 2019-07-29, [#61238][61238] was fixed in [#61856][61856]. The issue fixed was that lint attributes on function args had no effect. The PR was written by @c410-f3r and reviewed by @matthewjasper, @petrochenkov, and @oli-obk.\n\n* On 2019-08-02, a bug [#63210][63210] was filed wherein the attributes on formal parameters would not be passed to macros. The issue was about forgetting to call the relevant method in `fn print_arg` in the pretty printer. In [#63212][63212], written by @Centril on 2019-08-02 and reviewed by @davidtwco, the issue aforementioned was fixed.\n\n* This PR stabilizes `param_attrs`.\n\n## Tests\n\n* [On Rust 2018, attributes aren't permitted on function parameters without a pattern in trait definitions.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs)\n\n* [All attributes that should be allowed. This includes `cfg`, `cfg_attr`, and lints check attributes.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-allowed.rs)\n\n* [Built-in attributes, which should be forbidden, e.g., `#[test]`, are.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs)\n\n* [`cfg` and `cfg_attr` are properly evaluated.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs)\n\n* [`unused_mut`](https://github.com/rust-lang/rust/blob/46f405ec4d7c6bf16fc2eaafe7541019f1da2996/src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs) and [`unused_variables`](https://github.com/rust-lang/rust/blob/master/src/test/ui/lint/lint-unused-variables.rs) are correctly applied to parameter patterns.\n\n* [Pretty printing takes formal parameter attributes into account.](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2565-param-attrs/param-attrs-pretty.rs)\n\n## Possible future work\n\n* Custom attributes inside function parameters aren't currently supported but it is something being worked on internally.\n\n* Since documentation comments are syntactic sugar for `#[doc(...)]`, it is possible to allow literal `/// Foo` comments on function parameters.\n\n[rfc motivation]: https://github.com/rust-lang/rfcs/blob/master/text/2565-formal-function-parameter-attributes.md#motivation\n[rfc]: https://github.com/rust-lang/rfcs/pull/2565\n[60669]: https://github.com/rust-lang/rust/pull/60669\n[61856]: https://github.com/rust-lang/rust/pull/61856\n[63210]: https://github.com/rust-lang/rust/issues/63210\n[61238]: https://github.com/rust-lang/rust/issues/61238\n[63212]: https://github.com/rust-lang/rust/pull/63212\n\nThis report is a collaborative work with @Centril.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8646c81e8a9127bda2f5360a636c7bf443bf73e9", "html_url": "https://github.com/rust-lang/rust/commit/8646c81e8a9127bda2f5360a636c7bf443bf73e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8646c81e8a9127bda2f5360a636c7bf443bf73e9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5349e69ae207c4d11245e75463c091eded3ad13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5349e69ae207c4d11245e75463c091eded3ad13c", "html_url": "https://github.com/rust-lang/rust/commit/5349e69ae207c4d11245e75463c091eded3ad13c"}, {"sha": "299d696b91e833f01f37e97b69767fcf6f5cccf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/299d696b91e833f01f37e97b69767fcf6f5cccf0", "html_url": "https://github.com/rust-lang/rust/commit/299d696b91e833f01f37e97b69767fcf6f5cccf0"}], "stats": {"total": 297, "additions": 93, "deletions": 204}, "files": [{"sha": "4b83c204ba10579d2152672578834232bd4d1984", "filename": "src/doc/unstable-book/src/language-features/param-attrs.md", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md?ref=5349e69ae207c4d11245e75463c091eded3ad13c", "patch": "@@ -1,27 +0,0 @@\n-# `param_attrs`\n-\n-The tracking issue for this feature is: [#60406]\n-\n-[#60406]: https://github.com/rust-lang/rust/issues/60406\n-\n-Allow attributes in formal function parameter position so external tools and compiler internals can\n-take advantage of the additional information that the parameters provide.\n-\n-Enables finer conditional compilation with `#[cfg(..)]` and linting control of variables. Moreover,\n-opens the path to richer DSLs created by users.\n-\n-------------------------\n-\n-Example:\n-\n-```rust\n-#![feature(param_attrs)]\n-\n-fn len(\n-  #[cfg(windows)] slice: &[u16],\n-  #[cfg(not(windows))] slice: &[u8],\n-) -> usize\n-{\n-  slice.len()\n-}\n-```"}, {"sha": "5538daf388e2f046e38a5c841be431ab0b4a6bc1", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -243,6 +243,8 @@ declare_features! (\n     (accepted, async_await, \"1.39.0\", Some(50547), None),\n     /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n     (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n+    /// Allows attributes in formal function parameters.\n+    (accepted, param_attrs, \"1.39.0\", Some(60406), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "38c16dbac6ab7730265fa7d8655e177b30ce92f8", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -489,9 +489,6 @@ declare_features! (\n     /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n-    /// Attributes on formal function params.\n-    (active, param_attrs, \"1.36.0\", Some(60406), None),\n-\n     /// Allows calling constructor functions in `const fn`.\n     (active, const_constructor, \"1.37.0\", Some(61456), None),\n "}, {"sha": "b50ca1ad1cf2b4ed15418362b443b0fb7932f914", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -812,7 +812,6 @@ pub fn check_crate(krate: &ast::Crate,\n         }\n     }\n \n-    gate_all!(param_attrs, \"attributes on function parameters are unstable\");\n     gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(yields, generators, \"yield syntax is experimental\");"}, {"sha": "bba70973631fefa6ee73e03957b2d2e8a11c32c9", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -19,13 +19,6 @@ const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n                                                      permitted in this context\";\n \n impl<'a> Parser<'a> {\n-    crate fn parse_param_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        self.sess.gated_spans.param_attrs.borrow_mut()\n-            .extend(attrs.iter().map(|a| a.span));\n-        Ok(attrs)\n-    }\n-\n     /// Parses attributes that appear before an item.\n     crate fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();"}, {"sha": "f7b87d154feccb745f9abcbb784b1120c4f04a9f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -49,8 +49,6 @@ static_assert_size!(PResult<'_, bool>, 16);\n /// used and should be feature gated accordingly in `check_crate`.\n #[derive(Default)]\n pub struct GatedSpans {\n-    /// Spans collected for gating `param_attrs`, e.g. `fn foo(#[attr] x: u8) {}`.\n-    pub param_attrs: Lock<Vec<Span>>,\n     /// Spans collected for gating `let_chains`, e.g. `if a && let b = c {}`.\n     pub let_chains: Lock<Vec<Span>>,\n     /// Spans collected for gating `async_closure`, e.g. `async || ..`."}, {"sha": "b2b6504919e96b152a6c7789d1122a387ff09c21", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -979,7 +979,7 @@ impl<'a> Parser<'a> {\n         is_name_required: impl Fn(&token::Token) -> bool,\n     ) -> PResult<'a, Param> {\n         let lo = self.token.span;\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         if let Some(mut param) = self.parse_self_param()? {\n             param.attrs = attrs.into();\n             return self.recover_bad_self_param(param, is_trait_item);\n@@ -1362,7 +1362,7 @@ impl<'a> Parser<'a> {\n     /// Returns the parsed optional self parameter with attributes and whether a self\n     /// shortcut was used.\n     fn parse_self_parameter_with_attrs(&mut self) -> PResult<'a, Option<Param>> {\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         let param_opt = self.parse_self_param()?;\n         Ok(param_opt.map(|mut param| {\n             param.attrs = attrs.into();"}, {"sha": "b383498b7b64d7fa72b0f80282df2a2ae048e0fc", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1176,7 +1176,7 @@ impl<'a> Parser<'a> {\n     /// Parses a parameter in a closure header (e.g., `|arg, arg|`).\n     fn parse_fn_block_param(&mut self) -> PResult<'a, Param> {\n         let lo = self.token.span;\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         let pat = self.parse_pat(PARAM_EXPECTED)?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?"}, {"sha": "1af44ecf362bf50158bd94f9972aaa8a0398fc1e", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -3,7 +3,7 @@\n // Exercise the unused_mut attribute in some positive and negative cases\n \n #![deny(unused_mut)]\n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n \n async fn baz_async(\n     mut a: i32,"}, {"sha": "1a6b5183f0fae48b735084c400a0b84a951ea3da", "filename": "src/test/ui/lint/lint-unused-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n #![deny(unused_variables)]\n \n async fn foo_async("}, {"sha": "995eb62d0bb59b191b9b58e76c28b5e9911e9750", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -2,14 +2,10 @@ pub fn f(\n     /// Comment\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     id: u8,\n     /// Other\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     a: u8,\n ) {}\n "}, {"sha": "669785af45f9323d9d9e3aa3d3793b3d951259fb", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,5 +1,5 @@\n error: attributes cannot be applied to a function parameter's type\n-  --> $DIR/fn-arg-doc-comment.rs:16:12\n+  --> $DIR/fn-arg-doc-comment.rs:12:12\n    |\n LL | fn bar(id: #[allow(dead_code)] i32) {}\n    |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n@@ -11,31 +11,13 @@ LL |     /// Comment\n    |     ^^^^^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/fn-arg-doc-comment.rs:8:5\n+  --> $DIR/fn-arg-doc-comment.rs:6:5\n    |\n LL |     /// Other\n    |     ^^^^^^^^^ doc comments are not allowed here\n \n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/fn-arg-doc-comment.rs:2:5\n-   |\n-LL |     /// Comment\n-   |     ^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/fn-arg-doc-comment.rs:8:5\n-   |\n-LL |     /// Other\n-   |     ^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:22:7\n+  --> $DIR/fn-arg-doc-comment.rs:18:7\n    |\n LL |     f(\"\", \"\");\n    |       ^^ expected u8, found reference\n@@ -44,7 +26,7 @@ LL |     f(\"\", \"\");\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:22:11\n+  --> $DIR/fn-arg-doc-comment.rs:18:11\n    |\n LL |     f(\"\", \"\");\n    |           ^^ expected u8, found reference\n@@ -53,15 +35,14 @@ LL |     f(\"\", \"\");\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:29:9\n+  --> $DIR/fn-arg-doc-comment.rs:25:9\n    |\n LL |     bar(\"\");\n    |         ^^ expected i32, found reference\n    |\n    = note: expected type `i32`\n               found type `&'static str`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a6f693bd5b5f43c833d354d7f6e57dc09dfb2871", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(param_attrs)]\n-\n trait Trait2015 { fn foo(#[allow(C)] i32); }\n //~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n "}, {"sha": "9860e9805b2ed832bae742167a12cabfbae071ee", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `:`, `@`, or `|`, found `)`\n-  --> $DIR/param-attrs-2018.rs:5:41\n+  --> $DIR/param-attrs-2018.rs:3:41\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n    |                                         ^ expected one of `:`, `@`, or `|` here"}, {"sha": "1217f89cb316863d0ea3e802faed1d591c776353", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-allowed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -2,7 +2,6 @@\n // compile-flags: --cfg something\n \n #![deny(unused_mut)]\n-#![feature(param_attrs)]\n \n extern \"C\" {\n     fn ffi("}, {"sha": "c4684a3fa82b0f1d0bb419d2bab96c657c74b920", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(param_attrs)]\n-\n extern \"C\" {\n     fn ffi(\n         /// Foo"}, {"sha": "0fc6ca2f7f37ae8fd133a20bdb6f49e847c5e5f5", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,311 +1,311 @@\n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:7:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:5:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:23:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:21:5\n    |\n LL |     #[test] a: u32,\n    |     ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:38:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:36:5\n    |\n LL |     #[test] a: u32,\n    |     ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:58:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:56:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n    |\n LL |         #[test] a: u32,\n    |         ^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:5:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:3:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:9:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:7:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:11:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:9:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:13:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:11:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:15:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:13:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:21:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:19:5\n    |\n LL |     /// Foo\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:25:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:23:5\n    |\n LL |     /// Bar\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:27:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:25:5\n    |\n LL |     #[must_use]\n    |     ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:29:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:27:5\n    |\n LL |     /// Baz\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:31:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:29:5\n    |\n LL |     #[no_mangle] b: i32,\n    |     ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:36:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:34:5\n    |\n LL |     /// Foo\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:40:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:38:5\n    |\n LL |     /// Bar\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:42:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:40:5\n    |\n LL |     #[must_use]\n    |     ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:44:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:42:5\n    |\n LL |     /// Baz\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:46:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:44:5\n    |\n LL |     #[no_mangle] b: i32,\n    |     ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:53:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:51:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:56:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:54:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:60:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:58:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:62:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:60:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:64:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:62:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:66:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:64:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:74:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:72:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:75:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:81:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:83:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:81:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:85:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:83:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:87:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:85:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:93:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:91:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:94:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:102:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:104:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:102:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:106:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:104:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:112:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:110:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:113:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:121:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:123:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:121:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:125:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:123:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:130:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:136:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:138:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:136:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:140:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:138:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:142:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:140:9\n    |\n LL |         #[no_mangle] b: i32\n    |         ^^^^^^^^^^^^"}, {"sha": "d44ff14e992474e64ac0e1f077e93b3d7f00a166", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n #![deny(unused_variables)]\n \n extern \"C\" {"}, {"sha": "a7f4855915b24f76b70844026cb4580a75c2e13b", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs?ref=5349e69ae207c4d11245e75463c091eded3ad13c", "patch": "@@ -1,16 +0,0 @@\n-// gate-test-param_attrs\n-\n-#![deny(unused_variables)]\n-\n-fn foo(\n-    /// Foo\n-    //~^ ERROR documentation comments cannot be applied to function parameters\n-    //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n-    #[allow(unused_variables)] a: u8\n-    //~^ ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n-) {}\n-\n-fn main() {}"}, {"sha": "0bb9d05dca0acad876418cebefe1ba2f40e2fd98", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr?ref=5349e69ae207c4d11245e75463c091eded3ad13c", "patch": "@@ -1,27 +0,0 @@\n-error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-feature-gate.rs:6:5\n-   |\n-LL |     /// Foo\n-   |     ^^^^^^^ doc comments are not allowed here\n-\n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/param-attrs-feature-gate.rs:6:5\n-   |\n-LL |     /// Foo\n-   |     ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/param-attrs-feature-gate.rs:11:5\n-   |\n-LL |     #[allow(unused_variables)] a: u8\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fb86020d992e96c64376bf44ed5337d1e8edac5f", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![feature(param_attrs)]\n #![feature(c_variadic)]\n \n extern crate param_attrs;"}, {"sha": "9f4e2710dc42070d17e7388fb33d6dcb46e6630a", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,6 +1,5 @@\n // aux-build:ident-mac.rs\n \n-#![feature(param_attrs)]\n #![feature(c_variadic)]\n \n extern crate ident_mac;"}, {"sha": "b4946fa74943fbc7cbd0c0060d455400b6ab4f7f", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8646c81e8a9127bda2f5360a636c7bf443bf73e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=8646c81e8a9127bda2f5360a636c7bf443bf73e9", "patch": "@@ -1,149 +1,149 @@\n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:11:21\n+  --> $DIR/proc-macro-cannot-be-used.rs:10:21\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                     ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:11:38\n+  --> $DIR/proc-macro-cannot-be-used.rs:10:38\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:15:38\n+  --> $DIR/proc-macro-cannot-be-used.rs:14:38\n    |\n LL | unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n    |                                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:18:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:17:28\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:18:38\n+  --> $DIR/proc-macro-cannot-be-used.rs:17:38\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:22:9\n+  --> $DIR/proc-macro-cannot-be-used.rs:21:9\n    |\n LL | fn free(#[id] arg1: u8) {\n    |         ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:24:16\n+  --> $DIR/proc-macro-cannot-be-used.rs:23:16\n    |\n LL |     let lam = |#[id] W(x), #[id] y| ();\n    |                ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:24:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:23:28\n    |\n LL |     let lam = |#[id] W(x), #[id] y| ();\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:30:18\n+  --> $DIR/proc-macro-cannot-be-used.rs:29:18\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                  ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:30:30\n+  --> $DIR/proc-macro-cannot-be-used.rs:29:30\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                              ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:33:18\n+  --> $DIR/proc-macro-cannot-be-used.rs:32:18\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                  ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:33:31\n+  --> $DIR/proc-macro-cannot-be-used.rs:32:31\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:36:22\n+  --> $DIR/proc-macro-cannot-be-used.rs:35:22\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:36:42\n+  --> $DIR/proc-macro-cannot-be-used.rs:35:42\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                                          ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:39:22\n+  --> $DIR/proc-macro-cannot-be-used.rs:38:22\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:39:45\n+  --> $DIR/proc-macro-cannot-be-used.rs:38:45\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                                             ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:45:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:44:15\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:45:27\n+  --> $DIR/proc-macro-cannot-be-used.rs:44:27\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |                           ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:48:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:15\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:48:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:28\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:51:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:19\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:51:39\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:39\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                                       ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:54:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:19\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:54:42\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:42\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                          ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:54:58\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:58\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                                          ^^^^^"}]}