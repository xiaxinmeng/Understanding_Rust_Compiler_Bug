{"sha": "4ec1dd991405404725b5cc448295dc0be9cd17e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzFkZDk5MTQwNTQwNDcyNWI1Y2M0NDgyOTVkYzBiZTljZDE3ZTU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-13T23:03:13Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-13T23:20:23Z"}, "message": "Got the select macro working.", "tree": {"sha": "21dad99d125c9cd021029b316658326578337a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21dad99d125c9cd021029b316658326578337a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec1dd991405404725b5cc448295dc0be9cd17e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec1dd991405404725b5cc448295dc0be9cd17e5", "html_url": "https://github.com/rust-lang/rust/commit/4ec1dd991405404725b5cc448295dc0be9cd17e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec1dd991405404725b5cc448295dc0be9cd17e5/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb5f077c4feb6a2a180810fc16c092bf3532f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb5f077c4feb6a2a180810fc16c092bf3532f76", "html_url": "https://github.com/rust-lang/rust/commit/8bb5f077c4feb6a2a180810fc16c092bf3532f76"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "8abe8d8309d224aebe7f857d4be58fa24a57a771", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ec1dd991405404725b5cc448295dc0be9cd17e5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec1dd991405404725b5cc448295dc0be9cd17e5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4ec1dd991405404725b5cc448295dc0be9cd17e5", "patch": "@@ -47,9 +47,16 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n     };\n \n     // Given `lhses` and `rhses`, this is the new macro we create\n-    fn generic_extension(cx: ext_ctxt, sp: span, arg: ~[ast::token_tree],\n+    fn generic_extension(cx: ext_ctxt, sp: span, name: ident,\n+                         arg: ~[ast::token_tree],\n                          lhses: ~[@named_match], rhses: ~[@named_match])\n     -> mac_result {\n+\n+        //io::println(fmt!(\"%s! { %s }\", *name,\n+        //                 print::pprust::unexpanded_tt_to_str(\n+        //                     ast::tt_delim(arg),\n+        //                     cx.parse_sess().interner)));\n+\n         // Which arm's failure should we report? (the one furthest along)\n         let mut best_fail_spot = {lo: 0u, hi: 0u, expn_info: none};\n         let mut best_fail_msg = ~\"internal error: ran no matchers\";\n@@ -90,7 +97,8 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n         cx.span_fatal(best_fail_spot, best_fail_msg);\n     }\n \n-    let exp = |cx, sp, arg| generic_extension(cx, sp, arg, lhses, rhses);\n+    let exp = |cx, sp, arg| generic_extension(cx, sp, name,\n+                                              arg, lhses, rhses);\n \n     return mr_def({\n         ident: name,"}, {"sha": "40c96ba8588369f2105b35d4b5e0998662382197", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4ec1dd991405404725b5cc448295dc0be9cd17e5/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec1dd991405404725b5cc448295dc0be9cd17e5/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=4ec1dd991405404725b5cc448295dc0be9cd17e5", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test\n \n // Protocols\n proto! foo {\n@@ -25,21 +24,28 @@ proto! bar {\n \n // select!\n macro_rules! select_if {\n+\n+    {\n+        $index:expr,\n+        $count:expr\n+    } => {\n+        fail\n+    };\n+\n     {\n         $index:expr,\n         $count:expr,\n         $port:path => [\n-            $($message:path$(($($x: ident),+))dont_type_this*\n-              -> $next:ident $e:expr),+\n-        ],\n-        $( $ports:path => [\n-            $($messages:path$(($($xs: ident),+))dont_type_this*\n-              -> $nexts:ident $es:expr),+\n-        ], )*\n+            $(type_this $message:path$(($(x $x: ident),+))dont_type_this*\n+              -> $next:ident => { $e:expr }),+\n+        ]\n+        $(, $ports:path => [\n+            $(type_this $messages:path$(($(x $xs: ident),+))dont_type_this*\n+              -> $nexts:ident => { $es:expr }),+\n+        ] )*\n     } => {\n-        log_syntax!{select_if1};\n         if $index == $count {\n-            alt move pipes::try_recv($port) {\n+            match move pipes::try_recv($port) {\n               $(some($message($($($x,)+)* next)) => {\n                 // FIXME (#2329) we really want move out of enum here.\n                 let $next = unsafe { let x <- *ptr::addr_of(next); x };\n@@ -50,22 +56,14 @@ macro_rules! select_if {\n         } else {\n             select_if!{\n                 $index,\n-                $count + 1,\n-                $( $ports => [\n-                    $($messages$(($($xs),+))dont_type_this*\n-                      -> $nexts $es),+\n-                ], )*\n+                $count + 1\n+                $(, $ports => [\n+                    $(type_this $messages$(($(x $xs),+))dont_type_this*\n+                      -> $nexts => { $es }),+\n+                ])*\n             }\n         }\n     };\n-\n-    {\n-        $index:expr,\n-        $count:expr,\n-    } => {\n-        log_syntax!{select_if2};\n-        fail\n-    }\n }\n \n macro_rules! select {\n@@ -76,20 +74,16 @@ macro_rules! select {\n         } )+\n     } => {\n         let index = pipes::selecti([$(($port).header()),+]/_);\n-        log_syntax!{select};\n-        log_syntax!{\n-        select_if!{index, 0, $( $port => [\n-            $($message$(($($x),+))dont_type_this* -> $next $e),+\n-        ], )+}\n-        };\n-        select_if!{index, 0, $( $port => [\n-            $($message$(($($x),+))dont_type_this* -> $next $e),+\n-        ], )+}\n+        select_if!{index, 0 $(, $port => [\n+            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { $e }),+\n+        ])+}\n     }\n }\n \n // Code\n fn test(+foo: foo::client::foo, +bar: bar::client::bar) {\n+    import bar::do_baz;\n+\n     select! {\n         foo => {\n             foo::do_foo -> _next {\n@@ -98,11 +92,11 @@ fn test(+foo: foo::client::foo, +bar: bar::client::bar) {\n \n         bar => {\n             bar::do_bar(x) -> _next {\n-                //debug!(\"%?\", x)\n+                debug!(\"%?\", x)\n             },\n \n             do_baz(b) -> _next {\n-                //if b { debug!(\"true\") } else { debug!(\"false\") }\n+                if b { debug!(\"true\") } else { debug!(\"false\") }\n             }\n         }\n     }"}]}