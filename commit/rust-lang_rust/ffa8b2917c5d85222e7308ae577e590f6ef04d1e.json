{"sha": "ffa8b2917c5d85222e7308ae577e590f6ef04d1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYThiMjkxN2M1ZDg1MjIyZTczMDhhZTU3N2U1OTBmNmVmMDRkMWU=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-09-14T08:33:21Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-09-17T07:56:13Z"}, "message": "Case-insensitive environment keys.", "tree": {"sha": "6bde3721045e02fed3ad2a91990c2fe1ab7a3abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bde3721045e02fed3ad2a91990c2fe1ab7a3abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa8b2917c5d85222e7308ae577e590f6ef04d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa8b2917c5d85222e7308ae577e590f6ef04d1e", "html_url": "https://github.com/rust-lang/rust/commit/ffa8b2917c5d85222e7308ae577e590f6ef04d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa8b2917c5d85222e7308ae577e590f6ef04d1e/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88cb454b91b16fdf8395bc4859b65aff8303acb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/88cb454b91b16fdf8395bc4859b65aff8303acb5", "html_url": "https://github.com/rust-lang/rust/commit/88cb454b91b16fdf8395bc4859b65aff8303acb5"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "2ebafc30718f01a71a1be32623f69133b077fd90", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 75, "deletions": 7, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ffa8b2917c5d85222e7308ae577e590f6ef04d1e/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa8b2917c5d85222e7308ae577e590f6ef04d1e/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=ffa8b2917c5d85222e7308ae577e590f6ef04d1e", "patch": "@@ -24,6 +24,9 @@ use rt::rtio::{RtioProcess, ProcessConfig, IoFactory, LocalIo};\n use rt::rtio;\n use c_str::CString;\n use collections::HashMap;\n+use std::hash::Hash;\n+use std::hash::sip::SipState;\n+use clone::Clone;\n \n /// Signal a process to exit, without forcibly killing it. Corresponds to\n /// SIGTERM on unix platforms.\n@@ -78,8 +81,56 @@ pub struct Process {\n     pub extra_io: Vec<Option<io::PipeStream>>,\n }\n \n+/// A representation of environment variable name\n+/// It compares case-insensitive on Windows and case-sensitive everywhere else.\n+#[cfg(not(windows))]\n+#[deriving(PartialEq, Eq, Hash, Clone, Show)]\n+struct EnvKey(CString);\n+\n+#[doc(hidden)]\n+#[cfg(windows)]\n+#[deriving(Eq, Clone, Show)]\n+struct EnvKey(CString);\n+\n+#[cfg(windows)]\n+impl Hash for EnvKey {\n+    fn hash(&self, state: &mut SipState) {\n+        let &EnvKey(ref x) = self;\n+        match x.as_str() {\n+            Some(s) => for ch in s.chars() {\n+                (ch as u8 as char).to_lowercase().hash(state);\n+            },\n+            None => x.hash(state)\n+        }\n+    }\n+}\n+\n+#[cfg(windows)]\n+impl PartialEq for EnvKey {\n+    fn eq(&self, other: &EnvKey) -> bool {\n+        let &EnvKey(ref x) = self;\n+        let &EnvKey(ref y) = other;\n+        match (x.as_str(), y.as_str()) {\n+            (Some(xs), Some(ys)) => {\n+                if xs.len() != ys.len() {\n+                    return false\n+                } else {\n+                    for (xch, ych) in xs.chars().zip(ys.chars()) {\n+                        if xch.to_lowercase() != ych.to_lowercase() {\n+                            return false;\n+                        }\n+                    }\n+                    return true;\n+                }\n+            },\n+            // If either is not a valid utf8 string, just compare them byte-wise\n+            _ => return x.eq(y)\n+        }\n+    }\n+}\n+\n /// A HashMap representation of environment variables.\n-pub type EnvMap = HashMap<CString, CString>;\n+pub type EnvMap = HashMap<EnvKey, CString>;\n \n /// The `Command` type acts as a process builder, providing fine-grained control\n /// over how a new process should be spawned. A default configuration can be\n@@ -161,14 +212,14 @@ impl Command {\n         self\n     }\n     // Get a mutable borrow of the environment variable map for this `Command`.\n-    fn get_env_map<'a>(&'a mut self) -> &'a mut EnvMap {\n+    fn get_env_map<'a>(&'a mut self) -> &'a mut  EnvMap {\n         match self.env {\n             Some(ref mut map) => map,\n             None => {\n                 // if the env is currently just inheriting from the parent's,\n                 // materialize the parent's env into a hashtable.\n                 self.env = Some(os::env_as_bytes().into_iter()\n-                                   .map(|(k, v)| (k.as_slice().to_c_str(),\n+                                   .map(|(k, v)| (EnvKey(k.as_slice().to_c_str()),\n                                                   v.as_slice().to_c_str()))\n                                    .collect());\n                 self.env.as_mut().unwrap()\n@@ -177,15 +228,18 @@ impl Command {\n     }\n \n     /// Inserts or updates an environment variable mapping.\n+    ///\n+    /// Note that environment variable names are case-insensitive (but case-preserving) on Windows,\n+    /// and case-sensitive on all other platforms.\n     pub fn env<'a, T: ToCStr, U: ToCStr>(&'a mut self, key: T, val: U)\n                                          -> &'a mut Command {\n-        self.get_env_map().insert(key.to_c_str(), val.to_c_str());\n+        self.get_env_map().insert(EnvKey(key.to_c_str()), val.to_c_str());\n         self\n     }\n \n     /// Removes an environment variable mapping.\n     pub fn env_remove<'a, T: ToCStr>(&'a mut self, key: T) -> &'a mut Command {\n-        self.get_env_map().remove(&key.to_c_str());\n+        self.get_env_map().remove(&EnvKey(key.to_c_str()));\n         self\n     }\n \n@@ -195,7 +249,7 @@ impl Command {\n     /// variable, the *rightmost* instance will determine the value.\n     pub fn env_set_all<'a, T: ToCStr, U: ToCStr>(&'a mut self, env: &[(T,U)])\n                                                  -> &'a mut Command {\n-        self.env = Some(env.iter().map(|&(ref k, ref v)| (k.to_c_str(), v.to_c_str()))\n+        self.env = Some(env.iter().map(|&(ref k, ref v)| (EnvKey(k.to_c_str()), v.to_c_str()))\n                                   .collect());\n         self\n     }\n@@ -273,7 +327,9 @@ impl Command {\n             let env = match self.env {\n                 None => None,\n                 Some(ref env_map) =>\n-                    Some(env_map.iter().collect::<Vec<_>>())\n+                    Some(env_map.iter()\n+                                .map(|(&EnvKey(ref key), val)| (key, val))\n+                                .collect::<Vec<_>>())\n             };\n             let cfg = ProcessConfig {\n                 program: &self.program,\n@@ -1039,4 +1095,16 @@ mod tests {\n         assert!(cmd.status().unwrap().success());\n         assert!(fdes.inner_write(\"extra write\\n\".as_bytes()).is_ok());\n     })\n+\n+    #[test]\n+    #[cfg(windows)]\n+    fn env_map_keys_ci() {\n+        use super::EnvKey;\n+        let mut cmd = Command::new(\"\");\n+        cmd.env(\"path\", \"foo\");\n+        cmd.env(\"Path\", \"bar\");\n+        let env = &cmd.env.unwrap();\n+        let val = env.find(&EnvKey(\"PATH\".to_c_str()));\n+        assert!(val.unwrap() == &\"bar\".to_c_str());\n+    }\n }"}]}