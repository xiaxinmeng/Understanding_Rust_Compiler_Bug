{"sha": "017877cbbe7903beb483f13678aedae1e40b6ab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNzg3N2NiYmU3OTAzYmViNDgzZjEzNjc4YWVkYWUxZTQwYjZhYjA=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-24T15:03:57Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-27T19:51:34Z"}, "message": "Implementation of const caller_location.", "tree": {"sha": "a95b12e405248ac18cb7ed7c504f47e43c38d561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a95b12e405248ac18cb7ed7c504f47e43c38d561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017877cbbe7903beb483f13678aedae1e40b6ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017877cbbe7903beb483f13678aedae1e40b6ab0", "html_url": "https://github.com/rust-lang/rust/commit/017877cbbe7903beb483f13678aedae1e40b6ab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017877cbbe7903beb483f13678aedae1e40b6ab0/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec97e050ea5247fa13612399a7a812dbce89ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec97e050ea5247fa13612399a7a812dbce89ec9", "html_url": "https://github.com/rust-lang/rust/commit/aec97e050ea5247fa13612399a7a812dbce89ec9"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "eed26c32b7a9b2e16a11aa79881acda73e56530e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=017877cbbe7903beb483f13678aedae1e40b6ab0", "patch": "@@ -375,11 +375,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         dest: PlaceTy<'tcx>,\n     ) -> InterpResult<'tcx> {\n-        if ecx.emulate_intrinsic(instance, args, dest)? {\n+        if ecx.emulate_intrinsic(span, instance, args, dest)? {\n             return Ok(());\n         }\n         // An intrinsic that we do not support"}, {"sha": "12e080869c7f8355a35751a2883dc8588959b60c", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=017877cbbe7903beb483f13678aedae1e40b6ab0", "patch": "@@ -3,6 +3,7 @@\n //! and miri.\n \n use syntax::symbol::Symbol;\n+use syntax_pos::Span;\n use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::ty::subst::SubstsRef;\n@@ -15,6 +16,7 @@ use super::{\n     Machine, PlaceTy, OpTy, InterpCx,\n };\n \n+mod caller_location;\n mod type_name;\n \n fn numeric_intrinsic<'tcx, Tag>(\n@@ -86,6 +88,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Returns `true` if emulation happened.\n     pub fn emulate_intrinsic(\n         &mut self,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, M::PointerTag>],\n         dest: PlaceTy<'tcx, M::PointerTag>,\n@@ -94,6 +97,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n         match intrinsic_name {\n+            \"caller_location\" => {\n+                self.write_caller_location(span, dest)?;\n+            }\n+\n             \"min_align_of\" |\n             \"pref_align_of\" |\n             \"needs_drop\" |"}, {"sha": "5addb13b61c4298caf534f185021be3fd6b96729", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=017877cbbe7903beb483f13678aedae1e40b6ab0", "patch": "@@ -0,0 +1,54 @@\n+use rustc::middle::lang_items::PanicLocationLangItem;\n+use rustc::mir::interpret::{Pointer, PointerArithmetic, Scalar};\n+use rustc::ty::subst::Subst;\n+use rustc_target::abi::{LayoutOf, Size};\n+use syntax_pos::Span;\n+\n+use crate::interpret::{\n+    MemoryKind,\n+    intrinsics::{InterpCx, InterpResult, Machine, PlaceTy},\n+};\n+\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n+    pub fn write_caller_location(\n+        &mut self,\n+        span: Span,\n+        dest: PlaceTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        let caller = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+        let filename = caller.file.name.to_string();\n+        let line = Scalar::from_u32(caller.line as u32);\n+        let col = Scalar::from_u32(caller.col_display as u32 + 1);\n+\n+        let ptr_size = self.pointer_size();\n+        let u32_size = Size::from_bits(32);\n+\n+        let loc_ty = self.tcx.type_of(self.tcx.require_lang_item(PanicLocationLangItem, None))\n+            .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_static.into()].iter()));\n+        let loc_layout = self.layout_of(loc_ty)?;\n+\n+        let file_alloc = self.tcx.allocate_bytes(filename.as_bytes());\n+        let file_ptr = Pointer::new(file_alloc, Size::ZERO);\n+        let file = Scalar::Ptr(self.tag_static_base_pointer(file_ptr));\n+        let file_len = Scalar::from_uint(filename.len() as u128, ptr_size);\n+\n+        let location = self.allocate(loc_layout, MemoryKind::Stack);\n+\n+        let file_out = self.mplace_field(location, 0)?;\n+        let file_ptr_out = self.force_ptr(self.mplace_field(file_out, 0)?.ptr)?;\n+        let file_len_out = self.force_ptr(self.mplace_field(file_out, 1)?.ptr)?;\n+        let line_out = self.force_ptr(self.mplace_field(location, 1)?.ptr)?;\n+        let col_out = self.force_ptr(self.mplace_field(location, 2)?.ptr)?;\n+\n+        let layout = &self.tcx.data_layout;\n+        let alloc = self.memory.get_mut(file_ptr_out.alloc_id)?;\n+\n+        alloc.write_scalar(layout, file_ptr_out, file.into(), ptr_size)?;\n+        alloc.write_scalar(layout, file_len_out, file_len.into(), ptr_size)?;\n+        alloc.write_scalar(layout, line_out, line.into(), u32_size)?;\n+        alloc.write_scalar(layout, col_out, col.into(), u32_size)?;\n+\n+        self.write_scalar(location.ptr, dest)?;\n+        Ok(())\n+    }\n+}"}, {"sha": "870e50a3cbb9a19a03c7ebff982d5c2490c8680c", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=017877cbbe7903beb483f13678aedae1e40b6ab0", "patch": "@@ -8,6 +8,7 @@ use std::hash::Hash;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt};\n+use syntax_pos::Span;\n \n use super::{\n     Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n@@ -152,6 +153,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// If this returns successfully, the engine will take care of jumping to the next block.\n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         dest: PlaceTy<'tcx, Self::PointerTag>,"}, {"sha": "d90f2058aa74fe15311e9932df201c0d1fc8cb53", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=017877cbbe7903beb483f13678aedae1e40b6ab0", "patch": "@@ -255,7 +255,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Some(dest) => dest,\n                     None => throw_ub!(Unreachable)\n                 };\n-                M::call_intrinsic(self, instance, args, dest)?;\n+                M::call_intrinsic(self, span, instance, args, dest)?;\n                 // No stack frame gets pushed, the main loop will just act as if the\n                 // call completed.\n                 self.goto_block(ret)?;"}, {"sha": "e7095101f465dd3f68ada30031505a8543cacd67", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=017877cbbe7903beb483f13678aedae1e40b6ab0", "patch": "@@ -158,6 +158,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn call_intrinsic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _span: Span,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _dest: PlaceTy<'tcx>,"}, {"sha": "c63822f052b2fbe20762ac69ec5dd85cbebb8881", "filename": "src/test/ui/consts/const-eval/const_caller_location.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017877cbbe7903beb483f13678aedae1e40b6ab0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs?ref=017877cbbe7903beb483f13678aedae1e40b6ab0", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(const_fn, core_intrinsics)]\n+\n+use std::{intrinsics::caller_location, panic::Location};\n+\n+const LOCATION: &Location = caller_location();\n+const NESTED: &Location = {\n+    const fn nested_location() -> &'static Location<'static> {\n+        caller_location()\n+    };\n+    nested_location()\n+};\n+\n+fn main() {\n+    assert_eq!(LOCATION.file(), file!());\n+    assert_eq!(LOCATION.line(), 7);\n+    assert_eq!(LOCATION.column(), 29);\n+\n+    assert_eq!(NESTED.file(), file!());\n+    assert_eq!(NESTED.line(), 10);\n+    assert_eq!(NESTED.column(), 9);\n+}"}]}