{"sha": "0d0a457c8b1750e82f19527b18b313f3514633f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMGE0NTdjOGIxNzUwZTgyZjE5NTI3YjE4YjMxM2YzNTE0NjMzZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-25T23:12:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-25T23:12:38Z"}, "message": "Auto merge of #1262 - RalfJung:rustup, r=RalfJung\n\nrustup; get rid of some try_from that are no longer needed", "tree": {"sha": "078871dae48107db036e9f5f1a639b0e57d41e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078871dae48107db036e9f5f1a639b0e57d41e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d0a457c8b1750e82f19527b18b313f3514633f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a457c8b1750e82f19527b18b313f3514633f0", "html_url": "https://github.com/rust-lang/rust/commit/0d0a457c8b1750e82f19527b18b313f3514633f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a457c8b1750e82f19527b18b313f3514633f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e8838b89739713541382a27b0360c5a9b07fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e8838b89739713541382a27b0360c5a9b07fee", "html_url": "https://github.com/rust-lang/rust/commit/c6e8838b89739713541382a27b0360c5a9b07fee"}, {"sha": "81d505670bb7f274bd33f43ebc879eb8f610d127", "url": "https://api.github.com/repos/rust-lang/rust/commits/81d505670bb7f274bd33f43ebc879eb8f610d127", "html_url": "https://github.com/rust-lang/rust/commit/81d505670bb7f274bd33f43ebc879eb8f610d127"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "538003d9fbaeaa6dd9eae4bfaaa523dc949693c2", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d0a457c8b1750e82f19527b18b313f3514633f0/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/0d0a457c8b1750e82f19527b18b313f3514633f0/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=0d0a457c8b1750e82f19527b18b313f3514633f0", "patch": "@@ -1 +1 @@\n-02046a5d402c789c006d0da7662f800fe3c45faf\n+a5fb9ae5b2ed3cb011ada9dc1e8633aa0927f279"}, {"sha": "8274b52bd085e9d984fdfd47c901d8a7386fe4dc", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d0a457c8b1750e82f19527b18b313f3514633f0/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0a457c8b1750e82f19527b18b313f3514633f0/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=0d0a457c8b1750e82f19527b18b313f3514633f0", "patch": "@@ -114,7 +114,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             ecx.layout_of(tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), u64::try_from(argvs.len()).unwrap()))?;\n         let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Machine.into());\n         for (idx, arg) in argvs.into_iter().enumerate() {\n-            let place = ecx.mplace_field(argvs_place, u64::try_from(idx).unwrap())?;\n+            let place = ecx.mplace_field(argvs_place, idx)?;\n             ecx.write_scalar(arg, place.into())?;\n         }\n         ecx.memory.mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n@@ -154,7 +154,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n             let char_size = Size::from_bytes(2);\n             for (idx, &c) in cmd_utf16.iter().enumerate() {\n-                let place = ecx.mplace_field(cmd_place, u64::try_from(idx).unwrap())?;\n+                let place = ecx.mplace_field(cmd_place, idx)?;\n                 ecx.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n             }\n         }"}, {"sha": "11f95f40b909a4f309d1918893451140bbad2b09", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d0a457c8b1750e82f19527b18b313f3514633f0/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0a457c8b1750e82f19527b18b313f3514633f0/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=0d0a457c8b1750e82f19527b18b313f3514633f0", "patch": "@@ -598,7 +598,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Store the UTF-16 string.\n         let char_size = Size::from_bytes(2);\n         for (idx, c) in u16_vec.into_iter().chain(iter::once(0x0000)).enumerate() {\n-            let place = this.mplace_field(mplace, u64::try_from(idx).unwrap())?; \n+            let place = this.mplace_field(mplace, idx)?;\n             this.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n         }\n         Ok((true, string_length))"}, {"sha": "34c297248f0dd0e0c80aec785201d0e874b42393", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d0a457c8b1750e82f19527b18b313f3514633f0/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0a457c8b1750e82f19527b18b313f3514633f0/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=0d0a457c8b1750e82f19527b18b313f3514633f0", "patch": "@@ -61,7 +61,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(match this.machine.env_vars.map.get(name) {\n             // The offset is used to strip the \"{name}=\" part of the string.\n             Some(var_ptr) => {\n-                Scalar::from(var_ptr.offset(Size::from_bytes(u64::try_from(name.len()).unwrap().checked_add(1).unwrap()), this)?)\n+                Scalar::from(var_ptr.offset(Size::from_bytes(name.len()) + Size::from_bytes(1), this)?)\n             }\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n@@ -187,7 +187,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.layout_of(tcx.mk_array(tcx.types.usize, u64::try_from(vars.len()).unwrap()))?;\n         let vars_place = this.allocate(vars_layout, MiriMemoryKind::Machine.into());\n         for (idx, var) in vars.into_iter().enumerate() {\n-            let place = this.mplace_field(vars_place, u64::try_from(idx).unwrap())?;\n+            let place = this.mplace_field(vars_place, idx)?;\n             this.write_scalar(var, place.into())?;\n         }\n         this.write_scalar("}]}