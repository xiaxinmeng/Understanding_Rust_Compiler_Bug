{"sha": "0da526b5f36daccb2d52adb6e21785474d3525e3", "node_id": "C_kwDOAAsO6NoAKDBkYTUyNmI1ZjM2ZGFjY2IyZDUyYWRiNmUyMTc4NTQ3NGQzNTI1ZTM", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-04-03T11:44:58Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-04-03T11:44:58Z"}, "message": "Remove optimal xz settings from CI\n\nThis is a companion PR to rust-lang/promote-release#58, which moves the\nrelevant optimal code to rust-lang/promote-release. As mentioned in the\ncomments of that PR, this is expected to cut CI costs (and time, though\npredominantly felt on fast builders) and reduce wasted resources due to\nin-practice single-threaded compression not using the full 8+ vCPU\nbuilders we have available.", "tree": {"sha": "f1e0713a2b70bcbf289d89acdaf76fb3b4c958b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e0713a2b70bcbf289d89acdaf76fb3b4c958b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da526b5f36daccb2d52adb6e21785474d3525e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da526b5f36daccb2d52adb6e21785474d3525e3", "html_url": "https://github.com/rust-lang/rust/commit/0da526b5f36daccb2d52adb6e21785474d3525e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da526b5f36daccb2d52adb6e21785474d3525e3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "html_url": "https://github.com/rust-lang/rust/commit/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa"}], "stats": {"total": 59, "additions": 13, "deletions": 46}, "files": [{"sha": "3056d9fc054f14abbb2c6b59ab15d97904aeb6d4", "filename": "src/ci/run.sh", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0da526b5f36daccb2d52adb6e21785474d3525e3/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0da526b5f36daccb2d52adb6e21785474d3525e3/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=0da526b5f36daccb2d52adb6e21785474d3525e3", "patch": "@@ -58,7 +58,12 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-cargo-native-static\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.codegen-units-std=1\"\n-RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set dist.compression-profile=best\"\n+# rust-lang/promote-release will recompress CI artifacts, and while we care\n+# about the per-commit artifact sizes, it's not as important that they're\n+# highly compressed as it is that the process is fast. Best compression\n+# generally implies single-threaded compression which results in wasting most\n+# of our CPU resources.\n+RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set dist.compression-profile=balanced\"\n \n # When building for mingw, limit the number of parallel linker jobs during\n # the LLVM build, as not to run out of memory."}, {"sha": "7c9c946e0b54e79331e4bf4760ac9a616ff79053", "filename": "src/tools/rust-installer/src/compression.rs", "status": "modified", "additions": 7, "deletions": 45, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0da526b5f36daccb2d52adb6e21785474d3525e3/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da526b5f36daccb2d52adb6e21785474d3525e3/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs?ref=0da526b5f36daccb2d52adb6e21785474d3525e3", "patch": "@@ -89,43 +89,11 @@ impl CompressionFormat {\n                         xz2::stream::MtStreamBuilder::new().threads(6).preset(6).encoder().unwrap()\n                     }\n                     CompressionProfile::Best => {\n-                        let mut filters = xz2::stream::Filters::new();\n-                        // the preset is overridden by the other options so it doesn't matter\n-                        let mut lzma_ops = xz2::stream::LzmaOptions::new_preset(9).unwrap();\n-                        // This sets the overall dictionary size, which is also how much memory (baseline)\n-                        // is needed for decompression.\n-                        lzma_ops.dict_size(64 * 1024 * 1024);\n-                        // Use the best match finder for compression ratio.\n-                        lzma_ops.match_finder(xz2::stream::MatchFinder::BinaryTree4);\n-                        lzma_ops.mode(xz2::stream::Mode::Normal);\n-                        // Set nice len to the maximum for best compression ratio\n-                        lzma_ops.nice_len(273);\n-                        // Set depth to a reasonable value, 0 means auto, 1000 is somwhat high but gives\n-                        // good results.\n-                        lzma_ops.depth(1000);\n-                        // 2 is the default and does well for most files\n-                        lzma_ops.position_bits(2);\n-                        // 0 is the default and does well for most files\n-                        lzma_ops.literal_position_bits(0);\n-                        // 3 is the default and does well for most files\n-                        lzma_ops.literal_context_bits(3);\n-\n-                        filters.lzma2(&lzma_ops);\n-\n-                        let mut builder = xz2::stream::MtStreamBuilder::new();\n-                        builder.filters(filters);\n-\n-                        // On 32-bit platforms limit ourselves to 3 threads, otherwise we exceed memory\n-                        // usage this process can take. In the future we'll likely only do super-fast\n-                        // compression in CI and move this heavyweight processing to promote-release (which\n-                        // is always 64-bit and can run on big-memory machines) but for now this lets us\n-                        // move forward.\n-                        if std::mem::size_of::<usize>() == 4 {\n-                            builder.threads(3);\n-                        } else {\n-                            builder.threads(6);\n-                        }\n-                        builder.encoder().unwrap()\n+                        // Note that this isn't actually the best compression settings for the\n+                        // produced artifacts, the production artifacts on static.rust-lang.org are\n+                        // produced by rust-lang/promote-release which hosts recompression logic\n+                        // and is tuned for optimal compression.\n+                        xz2::stream::MtStreamBuilder::new().threads(6).preset(9).encoder().unwrap()\n                     }\n                 };\n \n@@ -245,20 +213,14 @@ impl Write for CombinedEncoder {\n     }\n \n     fn flush(&mut self) -> std::io::Result<()> {\n-        self.encoders\n-            .par_iter_mut()\n-            .map(|w| w.flush())\n-            .collect::<std::io::Result<Vec<()>>>()?;\n+        self.encoders.par_iter_mut().map(|w| w.flush()).collect::<std::io::Result<Vec<()>>>()?;\n         Ok(())\n     }\n }\n \n impl Encoder for CombinedEncoder {\n     fn finish(self: Box<Self>) -> Result<(), Error> {\n-        self.encoders\n-            .into_par_iter()\n-            .map(|e| e.finish())\n-            .collect::<Result<Vec<()>, Error>>()?;\n+        self.encoders.into_par_iter().map(|e| e.finish()).collect::<Result<Vec<()>, Error>>()?;\n         Ok(())\n     }\n }"}]}