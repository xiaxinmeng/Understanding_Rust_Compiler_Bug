{"sha": "7446af747d83622c849ec9f29c0365aa7bf4e697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NDZhZjc0N2Q4MzYyMmM4NDllYzlmMjljMDM2NWFhN2JmNGU2OTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-11T03:40:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-11T03:40:02Z"}, "message": "Translate pat_lit, un-XFAIL alt-pattern-lit.rs for rustc.", "tree": {"sha": "d3aca76bc89dc4d7f3e4d5a33b3fa770a45d2214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3aca76bc89dc4d7f3e4d5a33b3fa770a45d2214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7446af747d83622c849ec9f29c0365aa7bf4e697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7446af747d83622c849ec9f29c0365aa7bf4e697", "html_url": "https://github.com/rust-lang/rust/commit/7446af747d83622c849ec9f29c0365aa7bf4e697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7446af747d83622c849ec9f29c0365aa7bf4e697/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9956a65b49f9cf2b1a691f2b88d61ada753d271", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9956a65b49f9cf2b1a691f2b88d61ada753d271", "html_url": "https://github.com/rust-lang/rust/commit/c9956a65b49f9cf2b1a691f2b88d61ada753d271"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "d55a63c27971f429b1658945593d023579d89283", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7446af747d83622c849ec9f29c0365aa7bf4e697/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7446af747d83622c849ec9f29c0365aa7bf4e697/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=7446af747d83622c849ec9f29c0365aa7bf4e697", "patch": "@@ -444,6 +444,7 @@ TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n TEST_XFAILS_RUSTC := $(filter-out \\\n                       $(addprefix test/run-pass/, \\\n                         alt-path.rs \\\n+                        alt-pattern-lit.rs \\\n                         alt-pattern-simple.rs \\\n                         alt-tag.rs \\\n                         arith-0.rs \\"}, {"sha": "bedfad979809ba69b23e046f0c736e461cf05167", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7446af747d83622c849ec9f29c0365aa7bf4e697/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7446af747d83622c849ec9f29c0365aa7bf4e697/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7446af747d83622c849ec9f29c0365aa7bf4e697", "patch": "@@ -1838,6 +1838,24 @@ fn trans_unary(@block_ctxt cx, ast.unop op,\n     fail;\n }\n \n+// FIXME: implement proper structural comparison.\n+\n+fn trans_compare(@block_ctxt cx, ast.binop op,\n+                 ValueRef lhs, ValueRef rhs) -> ValueRef {\n+    auto cmp = lib.llvm.LLVMIntEQ;\n+    alt (op) {\n+        case (ast.eq) { cmp = lib.llvm.LLVMIntEQ; }\n+        case (ast.ne) { cmp = lib.llvm.LLVMIntNE; }\n+\n+        // FIXME (issue #57): switch by signedness.\n+        case (ast.lt) { cmp = lib.llvm.LLVMIntSLT; }\n+        case (ast.le) { cmp = lib.llvm.LLVMIntSLE; }\n+        case (ast.ge) { cmp = lib.llvm.LLVMIntSGE; }\n+        case (ast.gt) { cmp = lib.llvm.LLVMIntSGT; }\n+    }\n+    ret cx.build.ICmp(cmp, lhs, rhs);\n+}\n+\n fn trans_eager_binop(@block_ctxt cx, ast.binop op,\n                      ValueRef lhs, ValueRef rhs) -> ValueRef {\n \n@@ -1857,18 +1875,7 @@ fn trans_eager_binop(@block_ctxt cx, ast.binop op,\n         case (ast.lsr) { ret cx.build.LShr(lhs, rhs); }\n         case (ast.asr) { ret cx.build.AShr(lhs, rhs); }\n         case (_) {\n-            auto cmp = lib.llvm.LLVMIntEQ;\n-            alt (op) {\n-                case (ast.eq) { cmp = lib.llvm.LLVMIntEQ; }\n-                case (ast.ne) { cmp = lib.llvm.LLVMIntNE; }\n-\n-                // FIXME (issue #57): switch by signedness.\n-                case (ast.lt) { cmp = lib.llvm.LLVMIntSLT; }\n-                case (ast.le) { cmp = lib.llvm.LLVMIntSLE; }\n-                case (ast.ge) { cmp = lib.llvm.LLVMIntSGE; }\n-                case (ast.gt) { cmp = lib.llvm.LLVMIntSGT; }\n-            }\n-            ret cx.build.ICmp(cmp, lhs, rhs);\n+            ret trans_compare(cx, op, lhs, rhs);\n         }\n     }\n     fail;\n@@ -2132,6 +2139,16 @@ fn trans_pat_match(@block_ctxt cx, @ast.pat pat, ValueRef llval,\n     alt (pat.node) {\n         case (ast.pat_wild(_)) { ret res(cx, llval); }\n         case (ast.pat_bind(_, _, _)) { ret res(cx, llval); }\n+\n+        case (ast.pat_lit(?lt, ?ann)) {\n+            auto lllit = trans_lit(cx.fcx.ccx, *lt, ann);\n+            auto lleq = trans_compare(cx, ast.eq, llval, lllit);\n+\n+            auto matched_cx = new_sub_block_ctxt(cx, \"matched_cx\");\n+            cx.build.CondBr(lleq, matched_cx.llbb, next_cx.llbb);\n+            ret res(matched_cx, llval);\n+        }\n+\n         case (ast.pat_tag(?id, ?subpats, ?vdef_opt, ?ann)) {\n             auto lltagptr = cx.build.GEP(llval, vec(C_int(0), C_int(0)));\n             auto lltag = cx.build.Load(lltagptr);\n@@ -2184,6 +2201,7 @@ fn trans_pat_binding(@block_ctxt cx, @ast.pat pat, ValueRef llval)\n     -> result {\n     alt (pat.node) {\n         case (ast.pat_wild(_)) { ret res(cx, llval); }\n+        case (ast.pat_lit(_, _)) { ret res(cx, llval); }\n         case (ast.pat_bind(?id, ?def_id, ?ann)) {\n             auto ty = node_ann_type(cx.fcx.ccx, ann);\n             auto llty = type_of(cx.fcx.ccx, ty);"}]}