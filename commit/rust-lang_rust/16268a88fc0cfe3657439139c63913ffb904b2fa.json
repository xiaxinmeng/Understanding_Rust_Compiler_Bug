{"sha": "16268a88fc0cfe3657439139c63913ffb904b2fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MjY4YTg4ZmMwY2ZlMzY1NzQzOTEzOWM2MzkxM2ZmYjkwNGIyZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T04:01:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T04:01:21Z"}, "message": "Auto merge of #43735 - est31:master, r=alexcrichton\n\nAvoid calling the column!() macro in panic\n\nCloses #43057\n\nThis \"fix\" adds a new macro called `__rust_unstable_column` and to use it instead of the `column` macro inside panic. The new macro can be shadowed as well as `column` can, but its very likely that there is no code that does this in practice.\n\nThere is no real way to make \"unstable\" macros that are usable by stable macros, so we do the next best thing and prefix the macro with `__rust_unstable` to make sure people recognize it is unstable.\n\nr? @alexcrichton", "tree": {"sha": "099c37cc8ee530f9623fe5cc79a6d8a264ab9a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099c37cc8ee530f9623fe5cc79a6d8a264ab9a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16268a88fc0cfe3657439139c63913ffb904b2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16268a88fc0cfe3657439139c63913ffb904b2fa", "html_url": "https://github.com/rust-lang/rust/commit/16268a88fc0cfe3657439139c63913ffb904b2fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16268a88fc0cfe3657439139c63913ffb904b2fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e720d2cd09b6befc5b6eed66b65352fc9ff537", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e720d2cd09b6befc5b6eed66b65352fc9ff537", "html_url": "https://github.com/rust-lang/rust/commit/57e720d2cd09b6befc5b6eed66b65352fc9ff537"}, {"sha": "5cf9f6330a02a0e86f08223289c74b36fba784db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf9f6330a02a0e86f08223289c74b36fba784db", "html_url": "https://github.com/rust-lang/rust/commit/5cf9f6330a02a0e86f08223289c74b36fba784db"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "684b81a27f82e39291addc166bcbd503416d1a4b", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=16268a88fc0cfe3657439139c63913ffb904b2fa", "patch": "@@ -8,6 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[macro_export]\n+// This stability attribute is totally useless.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n+macro_rules! __rust_unstable_column {\n+    () => {\n+        column!()\n+    }\n+}\n+\n /// Entry point of thread panic, for details, see std::macros\n #[macro_export]\n #[allow_internal_unstable]\n@@ -18,7 +28,7 @@ macro_rules! panic {\n     );\n     ($msg:expr) => ({\n         static _MSG_FILE_LINE_COL: (&'static str, &'static str, u32, u32) =\n-            ($msg, file!(), line!(), column!());\n+            ($msg, file!(), line!(), __rust_unstable_column!());\n         $crate::panicking::panic(&_MSG_FILE_LINE_COL)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n@@ -27,7 +37,7 @@ macro_rules! panic {\n         // insufficient, since the user may have\n         // `#[forbid(dead_code)]` and which cannot be overridden.\n         static _MSG_FILE_LINE_COL: (&'static str, u32, u32) =\n-            (file!(), line!(), column!());\n+            (file!(), line!(), __rust_unstable_column!());\n         $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_MSG_FILE_LINE_COL)\n     });\n }"}, {"sha": "5e88a46ecc343016b947bb896a01b0e0d00e96aa", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=16268a88fc0cfe3657439139c63913ffb904b2fa", "patch": "@@ -14,6 +14,16 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n+#[macro_export]\n+// This stability attribute is totally useless.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n+macro_rules! __rust_unstable_column {\n+    () => {\n+        column!()\n+    }\n+}\n+\n /// The entry point for panic of Rust threads.\n ///\n /// This macro is used to inject panic into a Rust thread, causing the thread to\n@@ -48,7 +58,8 @@ macro_rules! panic {\n     ($msg:expr) => ({\n         $crate::rt::begin_panic($msg, {\n             // static requires less code at runtime, more constant data\n-            static _FILE_LINE_COL: (&'static str, u32, u32) = (file!(), line!(), column!());\n+            static _FILE_LINE_COL: (&'static str, u32, u32) = (file!(), line!(),\n+                __rust_unstable_column!());\n             &_FILE_LINE_COL\n         })\n     });\n@@ -58,7 +69,8 @@ macro_rules! panic {\n             // used inside a dead function. Just `#[allow(dead_code)]` is\n             // insufficient, since the user may have\n             // `#[forbid(dead_code)]` and which cannot be overridden.\n-            static _FILE_LINE_COL: (&'static str, u32, u32) = (file!(), line!(), column!());\n+            static _FILE_LINE_COL: (&'static str, u32, u32) = (file!(), line!(),\n+                __rust_unstable_column!());\n             &_FILE_LINE_COL\n         })\n     });"}, {"sha": "b293aa8de38b2944bd5082da7460b3dd4b867d23", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=16268a88fc0cfe3657439139c63913ffb904b2fa", "patch": "@@ -52,6 +52,16 @@ pub fn expand_column(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::TokenTree])\n     base::MacEager::expr(cx.expr_u32(topmost, loc.col.to_usize() as u32))\n }\n \n+/* __rust_unstable_column!(): expands to the current column number */\n+pub fn expand_column_gated(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::TokenTree])\n+                  -> Box<base::MacResult+'static> {\n+    if sp.allows_unstable() {\n+        expand_column(cx, sp, tts)\n+    } else {\n+        cx.span_fatal(sp, \"the __rust_unstable_column macro is unstable\");\n+    }\n+}\n+\n /// file!(): expands to the current filename */\n /// The filemap (`loc.file`) contains a bunch more information we could spit\n /// out if we wanted."}, {"sha": "5eab81dd28fc4bc526eb41ef7fcd8ba609a8f562", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=16268a88fc0cfe3657439139c63913ffb904b2fa", "patch": "@@ -89,6 +89,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n     use syntax::ext::source_util::*;\n     register! {\n         line: expand_line,\n+        __rust_unstable_column: expand_column_gated,\n         column: expand_column,\n         file: expand_file,\n         stringify: expand_stringify,"}, {"sha": "abc92c86eec6aefddfc8ade1bee69e92f565445c", "filename": "src/test/compile-fail/rust-unstable-column-gated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Ftest%2Fcompile-fail%2Frust-unstable-column-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Ftest%2Fcompile-fail%2Frust-unstable-column-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frust-unstable-column-gated.rs?ref=16268a88fc0cfe3657439139c63913ffb904b2fa", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{}\", __rust_unstable_column!());\n+    //~^ERROR the __rust_unstable_column macro is unstable\n+}"}, {"sha": "152ddfb193fc5d590cc87f237f04de9d80ee1aa6", "filename": "src/test/run-pass/issue-43057.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Ftest%2Frun-pass%2Fissue-43057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16268a88fc0cfe3657439139c63913ffb904b2fa/src%2Ftest%2Frun-pass%2Fissue-43057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43057.rs?ref=16268a88fc0cfe3657439139c63913ffb904b2fa", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+macro_rules! column {\n+    ($i:ident) => {\n+        $i\n+    };\n+}\n+\n+fn foo() -> ! {\n+    panic!();\n+}\n+\n+fn main() {}"}]}