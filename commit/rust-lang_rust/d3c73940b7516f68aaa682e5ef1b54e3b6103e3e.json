{"sha": "d3c73940b7516f68aaa682e5ef1b54e3b6103e3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzczOTQwYjc1MTZmNjhhYWE2ODJlNWVmMWI1NGUzYjYxMDNlM2U=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-07T14:34:39Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:28Z"}, "message": "Update `fn_decl_by_hir_id` and `fn_sig_by_hir_id`", "tree": {"sha": "9d5591980d88b96baa19654385b15280b53b5d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5591980d88b96baa19654385b15280b53b5d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e", "html_url": "https://github.com/rust-lang/rust/commit/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a9626bb3202568e97bd580a13c1bf61ca4d6e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9626bb3202568e97bd580a13c1bf61ca4d6e5", "html_url": "https://github.com/rust-lang/rust/commit/e1a9626bb3202568e97bd580a13c1bf61ca4d6e5"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "e9d3865634883c3624d9f949198f82d8cbf42a20", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d3c73940b7516f68aaa682e5ef1b54e3b6103e3e", "patch": "@@ -45,54 +45,56 @@ impl<'hir> Entry<'hir> {\n             _ => Some(self.parent),\n         }\n     }\n+}\n \n-    fn fn_decl(&self) -> Option<&'hir FnDecl<'hir>> {\n-        match self.node {\n-            Node::Item(ref item) => match item.kind {\n-                ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n-                _ => None,\n-            },\n-\n-            Node::TraitItem(ref item) => match item.kind {\n-                TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n-                _ => None,\n-            },\n+fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n+    match node {\n+        Node::Item(ref item) => match item.kind {\n+            ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n+            _ => None,\n+        },\n \n-            Node::ImplItem(ref item) => match item.kind {\n-                ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n-                _ => None,\n-            },\n+        Node::TraitItem(ref item) => match item.kind {\n+            TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n+            _ => None,\n+        },\n \n-            Node::Expr(ref expr) => match expr.kind {\n-                ExprKind::Closure(_, ref fn_decl, ..) => Some(fn_decl),\n-                _ => None,\n-            },\n+        Node::ImplItem(ref item) => match item.kind {\n+            ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n+            _ => None,\n+        },\n \n+        Node::Expr(ref expr) => match expr.kind {\n+            ExprKind::Closure(_, ref fn_decl, ..) => Some(fn_decl),\n             _ => None,\n-        }\n-    }\n+        },\n \n-    fn fn_sig(&self) -> Option<&'hir FnSig<'hir>> {\n-        match &self.node {\n-            Node::Item(item) => match &item.kind {\n-                ItemKind::Fn(sig, _, _) => Some(sig),\n-                _ => None,\n-            },\n+        _ => None,\n+    }\n+}\n \n-            Node::TraitItem(item) => match &item.kind {\n-                TraitItemKind::Fn(sig, _) => Some(sig),\n-                _ => None,\n-            },\n+fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n+    match &node {\n+        Node::Item(item) => match &item.kind {\n+            ItemKind::Fn(sig, _, _) => Some(sig),\n+            _ => None,\n+        },\n \n-            Node::ImplItem(item) => match &item.kind {\n-                ImplItemKind::Method(sig, _) => Some(sig),\n-                _ => None,\n-            },\n+        Node::TraitItem(item) => match &item.kind {\n+            TraitItemKind::Fn(sig, _) => Some(sig),\n+            _ => None,\n+        },\n \n+        Node::ImplItem(item) => match &item.kind {\n+            ImplItemKind::Method(sig, _) => Some(sig),\n             _ => None,\n-        }\n+        },\n+\n+        _ => None,\n     }\n+}\n \n+impl<'hir> Entry<'hir> {\n     fn associated_body(self) -> Option<BodyId> {\n         match self.node {\n             Node::Item(item) => match item.kind {\n@@ -433,18 +435,18 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n-        if let Some(entry) = self.find_entry(hir_id) {\n-            entry.fn_decl()\n+        if let Some(node) = self.find(hir_id) {\n+            fn_decl(node)\n         } else {\n-            bug!(\"no entry for hir_id `{}`\", hir_id)\n+            bug!(\"no node for hir_id `{}`\", hir_id)\n         }\n     }\n \n     pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {\n-        if let Some(entry) = self.find_entry(hir_id) {\n-            entry.fn_sig()\n+        if let Some(node) = self.find(hir_id) {\n+            fn_sig(node)\n         } else {\n-            bug!(\"no entry for hir_id `{}`\", hir_id)\n+            bug!(\"no node for hir_id `{}`\", hir_id)\n         }\n     }\n "}]}