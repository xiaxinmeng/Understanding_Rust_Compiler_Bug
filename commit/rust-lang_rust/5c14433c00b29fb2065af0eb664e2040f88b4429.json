{"sha": "5c14433c00b29fb2065af0eb664e2040f88b4429", "node_id": "C_kwDOAAsO6NoAKDVjMTQ0MzNjMDBiMjlmYjIwNjVhZjBlYjY2NGUyMDQwZjg4YjQ0Mjk", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-09-30T01:06:56Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-10-13T23:26:00Z"}, "message": "Fix incorrect Box::pin suggestion\n\nThe suggestion checked if Pin<Box<T>> could be coeerced to the expected\ntype, but did not check predicates created by the coercion. We now\nlook for predicates that definitely cannot be satisfied before giving\nthe suggestion.\n\nThe suggestion is marked MaybeIncorrect because we allow predicates that\nare still ambiguous and can't be proven.", "tree": {"sha": "0a0a40c2f79eebcc5857ee9b64eff20e4b5e61db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0a40c2f79eebcc5857ee9b64eff20e4b5e61db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c14433c00b29fb2065af0eb664e2040f88b4429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c14433c00b29fb2065af0eb664e2040f88b4429", "html_url": "https://github.com/rust-lang/rust/commit/5c14433c00b29fb2065af0eb664e2040f88b4429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c14433c00b29fb2065af0eb664e2040f88b4429/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c31c31bb87092fec3da6eefe6d5a3a836c6c5ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c31c31bb87092fec3da6eefe6d5a3a836c6c5ba", "html_url": "https://github.com/rust-lang/rust/commit/2c31c31bb87092fec3da6eefe6d5a3a836c6c5ba"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "556c5d152df3096b1383faccafc0eb70e1728c91", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c14433c00b29fb2065af0eb664e2040f88b4429/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c14433c00b29fb2065af0eb664e2040f88b4429/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5c14433c00b29fb2065af0eb664e2040f88b4429", "patch": "@@ -42,7 +42,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n-use rustc_infer::traits::Obligation;\n+use rustc_infer::traits::{Obligation, TraitEngine, TraitEngineExt};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -146,6 +146,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             .and_then(|InferOk { value: ty, obligations }| success(f(ty), ty, obligations))\n     }\n \n+    #[instrument(skip(self))]\n     fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {\n         // First, remove any resolved type variables (at the top level, at least):\n         let a = self.shallow_resolve(a);\n@@ -943,6 +944,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.probe(|_| coerce.coerce(source, target)).is_ok()\n     }\n \n+    /// Same as `try_coerce()`, but without side-effects and attempts to select\n+    /// all predicates created by the coercion. This is useful for e.g. checking\n+    /// that associated types are correct.\n+    pub fn can_coerce_and_satisfy_predicates(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n+        let source = self.resolve_vars_with_obligations(expr_ty);\n+        debug!(\"coercion::can_with_predicates({:?} -> {:?})\", source, target);\n+\n+        let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n+        // We don't ever need two-phase here since we throw out the result of the coercion\n+        let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n+        self.probe(|_| {\n+            let ok = match coerce.coerce(source, target) {\n+                Ok(ok) => ok,\n+                _ => return false,\n+            };\n+            let mut fcx = traits::FulfillmentContext::new_in_snapshot();\n+            fcx.register_predicate_obligations(self, ok.obligations);\n+            fcx.select_where_possible(&self).is_ok()\n+        })\n+    }\n+\n     /// Given a type and a target type, this function will calculate and return\n     /// how many dereference steps needed to achieve `expr_ty <: target`. If\n     /// it's not possible, return `None`."}, {"sha": "62cacdbbce34d5ba8d66415c7609758cdd8d9205", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c14433c00b29fb2065af0eb664e2040f88b4429/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c14433c00b29fb2065af0eb664e2040f88b4429/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=5c14433c00b29fb2065af0eb664e2040f88b4429", "patch": "@@ -370,9 +370,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() => return false,\n             _ => {}\n         }\n-        let boxed_found = self.tcx.mk_box(found);\n-        let new_found = self.tcx.mk_lang_item(boxed_found, LangItem::Pin).unwrap();\n-        if self.can_coerce(new_found, expected) {\n+        let box_found = self.tcx.mk_box(found);\n+        let pin_box_found = self.tcx.mk_lang_item(box_found, LangItem::Pin).unwrap();\n+        let pin_found = self.tcx.mk_lang_item(found, LangItem::Pin).unwrap();\n+        if self.can_coerce_and_satisfy_predicates(pin_box_found, expected) {\n+            debug!(\"can coerce {:?} to {:?}, suggesting Box::pin\", pin_box_found, expected);\n             match found.kind() {\n                 ty::Adt(def, _) if def.is_box() => {\n                     err.help(\"use `Box::pin`\");\n@@ -384,11 +386,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             (expr.span.shrink_to_lo(), \"Box::pin(\".to_string()),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n                         ],\n-                        Applicability::MachineApplicable,\n+                        Applicability::MaybeIncorrect,\n                     );\n                 }\n             }\n             true\n+        } else if self.can_coerce_and_satisfy_predicates(pin_found, expected) {\n+            match found.kind() {\n+                ty::Adt(def, _) if def.is_box() => {\n+                    err.help(\"use `Box::pin`\");\n+                    true\n+                }\n+                _ => false,\n+            }\n         } else {\n             false\n         }"}, {"sha": "d49819fcb14cfe9832d853e6c37e2a5b2dbd0a55", "filename": "src/test/ui/suggestions/box-future-wrong-output.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c14433c00b29fb2065af0eb664e2040f88b4429/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c14433c00b29fb2065af0eb664e2040f88b4429/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs?ref=5c14433c00b29fb2065af0eb664e2040f88b4429", "patch": "@@ -0,0 +1,22 @@\n+// Issue #72117\n+// edition:2018\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+\n+pub type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;\n+\n+impl<T: ?Sized> FutureExt for T where T: Future {}\n+trait FutureExt: Future {\n+    fn boxed<'a>(self) -> BoxFuture<'a, Self::Output>\n+    where\n+        Self: Sized + Send + 'a,\n+    {\n+        Box::pin(self)\n+    }\n+}\n+\n+fn main() {\n+    let _: BoxFuture<'static, bool> = async {}.boxed();\n+    //~^ ERROR: mismatched types\n+}"}, {"sha": "e0c57af25b3d2c4cc52fb52eaa74c037bfef3e64", "filename": "src/test/ui/suggestions/box-future-wrong-output.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c14433c00b29fb2065af0eb664e2040f88b4429/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c14433c00b29fb2065af0eb664e2040f88b4429/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr?ref=5c14433c00b29fb2065af0eb664e2040f88b4429", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/box-future-wrong-output.rs:20:39\n+   |\n+LL |     let _: BoxFuture<'static, bool> = async {}.boxed();\n+   |            ------------------------   ^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Pin<Box<(dyn Future<Output = bool> + Send + 'static)>>`\n+              found struct `Pin<Box<dyn Future<Output = ()> + Send>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}