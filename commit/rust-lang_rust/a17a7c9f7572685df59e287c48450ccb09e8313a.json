{"sha": "a17a7c9f7572685df59e287c48450ccb09e8313a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExN2E3YzlmNzU3MjY4NWRmNTllMjg3YzQ4NDUwY2NiMDllODMxM2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-04T10:23:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-04T22:03:09Z"}, "message": "Miscellaneous reformatting and commenting.", "tree": {"sha": "e1aff5b947b47b561274b1eb655d40e501728511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1aff5b947b47b561274b1eb655d40e501728511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17a7c9f7572685df59e287c48450ccb09e8313a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a7c9f7572685df59e287c48450ccb09e8313a", "html_url": "https://github.com/rust-lang/rust/commit/a17a7c9f7572685df59e287c48450ccb09e8313a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17a7c9f7572685df59e287c48450ccb09e8313a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b820d0d634483e5400b1da52340a0606a32c84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b820d0d634483e5400b1da52340a0606a32c84a", "html_url": "https://github.com/rust-lang/rust/commit/9b820d0d634483e5400b1da52340a0606a32c84a"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "7ff0e1758f526543efea367fa576138db21479e5", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a17a7c9f7572685df59e287c48450ccb09e8313a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17a7c9f7572685df59e287c48450ccb09e8313a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=a17a7c9f7572685df59e287c48450ccb09e8313a", "patch": "@@ -30,7 +30,9 @@ use syntax::print::pprust;\n use syntax::ptr::P;\n \n pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n-                           pat: &ast::Pat, expected: Ty<'tcx>) {\n+                           pat: &ast::Pat,\n+                           expected: Ty<'tcx>)\n+{\n     let fcx = pcx.fcx;\n     let tcx = pcx.fcx.ccx.tcx;\n \n@@ -90,7 +92,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 }\n             } else {\n                 span_err!(tcx.sess, begin.span, E0029,\n-                    \"only char and numeric types are allowed in range\");\n+                          \"only char and numeric types are allowed in range\");\n             }\n \n             fcx.write_ty(pat.id, lhs_ty);\n@@ -154,8 +156,9 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             check_pat_struct(pcx, pat, path, fields.as_slice(), etc, expected);\n         }\n         ast::PatTup(ref elements) => {\n-            let element_tys: Vec<_> = range(0, elements.len()).map(|_| fcx.infcx()\n-                .next_ty_var()).collect();\n+            let element_tys: Vec<_> =\n+                range(0, elements.len()).map(|_| fcx.infcx().next_ty_var())\n+                                        .collect();\n             let pat_ty = ty::mk_tup(tcx, element_tys.clone());\n             fcx.write_ty(pat.id, pat_ty);\n             demand::eqtype(fcx, pat.span, expected, pat_ty);\n@@ -183,8 +186,8 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             let inner_ty = fcx.infcx().next_ty_var();\n \n             let mutbl =\n-                ty::deref(fcx.infcx().shallow_resolve(expected), true)\n-                .map_or(ast::MutImmutable, |mt| mt.mutbl);\n+                ty::deref(fcx.infcx().shallow_resolve(expected), true).map(|mt| mt.mutbl)\n+                                                                      .unwrap_or(ast::MutImmutable);\n \n             let mt = ty::mt { ty: inner_ty, mutbl: mutbl };\n             let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n@@ -217,8 +220,8 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                     let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n                     ty::mk_slice(tcx, tcx.mk_region(region), ty::mt {\n                         ty: inner_ty,\n-                        mutbl: ty::deref(expected_ty, true)\n-                            .map_or(ast::MutImmutable, |mt| mt.mutbl)\n+                        mutbl: ty::deref(expected_ty, true).map(|mt| mt.mutbl)\n+                                                           .unwrap_or(ast::MutImmutable)\n                     })\n                 }\n             };"}, {"sha": "565964012085a802327b808fb373fb0d1659be14", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a17a7c9f7572685df59e287c48450ccb09e8313a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17a7c9f7572685df59e287c48450ccb09e8313a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=a17a7c9f7572685df59e287c48450ccb09e8313a", "patch": "@@ -18,14 +18,15 @@ use syntax::ast;\n use syntax::codemap::Span;\n use util::ppaux::Repr;\n \n-// Requires that the two types unify, and prints an error message if they\n-// don't.\n+// Requires that the two types unify, and prints an error message if\n+// they don't.\n pub fn suptype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n-                         expected: Ty<'tcx>, actual: Ty<'tcx>) {\n-    suptype_with_fn(fcx, sp, false, expected, actual,\n+                         ty_expected: Ty<'tcx>, ty_actual: Ty<'tcx>) {\n+    suptype_with_fn(fcx, sp, false, ty_expected, ty_actual,\n         |sp, e, a, s| { fcx.report_mismatched_types(sp, e, a, s) })\n }\n \n+/// As `suptype`, but call `handle_err` if unification for subtyping fails.\n pub fn suptype_with_fn<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                     sp: Span,\n                                     b_is_expected: bool,\n@@ -48,9 +49,7 @@ pub fn eqtype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n                         expected: Ty<'tcx>, actual: Ty<'tcx>) {\n     match infer::mk_eqty(fcx.infcx(), false, infer::Misc(sp), actual, expected) {\n         Ok(()) => { /* ok */ }\n-        Err(ref err) => {\n-            fcx.report_mismatched_types(sp, expected, actual, err);\n-        }\n+        Err(ref err) => { fcx.report_mismatched_types(sp, expected, actual, err); }\n     }\n }\n "}, {"sha": "0a7c406e631720e662f2201093442dedc8249eb7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17a7c9f7572685df59e287c48450ccb09e8313a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17a7c9f7572685df59e287c48450ccb09e8313a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a17a7c9f7572685df59e287c48450ccb09e8313a", "patch": "@@ -4683,7 +4683,7 @@ impl<'tcx> Repr<'tcx> for Expectation<'tcx> {\n pub fn check_decl_initializer(fcx: &FnCtxt,\n                               nid: ast::NodeId,\n                               init: &ast::Expr)\n-                            {\n+{\n     let local_ty = fcx.local_ty(init.span, nid);\n     check_expr_coercable_to_type(fcx, init, local_ty)\n }"}]}