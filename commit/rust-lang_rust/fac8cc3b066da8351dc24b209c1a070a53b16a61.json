{"sha": "fac8cc3b066da8351dc24b209c1a070a53b16a61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYzhjYzNiMDY2ZGE4MzUxZGMyNGIyMDljMWEwNzBhNTNiMTZhNjE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-19T21:07:30Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-22T19:15:52Z"}, "message": "Use -c in the Makefiles.", "tree": {"sha": "9ded904c475b6285e4e5a0e57dec64df5fec6ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ded904c475b6285e4e5a0e57dec64df5fec6ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac8cc3b066da8351dc24b209c1a070a53b16a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac8cc3b066da8351dc24b209c1a070a53b16a61", "html_url": "https://github.com/rust-lang/rust/commit/fac8cc3b066da8351dc24b209c1a070a53b16a61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac8cc3b066da8351dc24b209c1a070a53b16a61/comments", "author": null, "committer": null, "parents": [{"sha": "c1335510d505ade8d1f2805ebf1a2beb5db8de07", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1335510d505ade8d1f2805ebf1a2beb5db8de07", "html_url": "https://github.com/rust-lang/rust/commit/c1335510d505ade8d1f2805ebf1a2beb5db8de07"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "fac60463cc4fa12615c7e9cc44820e78e06842e6", "filename": "Makefile.in", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fac8cc3b066da8351dc24b209c1a070a53b16a61/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/fac8cc3b066da8351dc24b209c1a070a53b16a61/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=fac8cc3b066da8351dc24b209c1a070a53b16a61", "patch": "@@ -463,27 +463,27 @@ boot/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \t@$(call E, compile: $@)\n \t$(BOOT) -shared -o $@ $<\n \n-stage0/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n+stage0/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE0) -S -shared -o $@ $<\n+\t$(STAGE0) -c -shared -o $@ $<\n \n stage0/$(CFG_STDLIB): stage0/std.o stage0/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage0 -Lrt -lrustrt\n \n-stage1/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n+stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE1) -S -shared -o $@ $<\n+\t$(STAGE1) -c -shared -o $@ $<\n \n stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage1 -Lrt -lrustrt\n \n-stage2/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n+stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE2) -S -shared -o $@ $<\n+\t$(STAGE2) -c -shared -o $@ $<\n \n stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n \t@$(call E, link: $@)\n@@ -497,30 +497,30 @@ stage0/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(BREQ)\n \t$(BOOT) -minimal -o $@ $<\n \t$(Q)chmod 0755 $@\n \n-stage1/rustc.s: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ0)\n+stage1/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ0)\n \t@$(call E, compile: $@)\n-\t$(STAGE0) -S -o $@ $<\n+\t$(STAGE0) -c -o $@ $<\n \n-stage2/rustc.s: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n+stage2/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n \t@$(call E, compile: $@)\n-\t$(STAGE1) -S -o $@ $<\n+\t$(STAGE1) -c -o $@ $<\n \n \n \n-stage0/glue.s: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n+stage0/glue.o: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE0) -S -o $@ -glue\n+\t$(STAGE0) -c -o $@ -glue\n \n-stage1/glue.s: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n+stage1/glue.o: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE1) -S -o $@ -glue\n+\t$(STAGE1) -c -o $@ -glue\n \n-stage2/glue.s: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n+stage2/glue.o: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE2) -S -o $@ -glue\n+\t$(STAGE2) -c -o $@ -glue\n \n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n@@ -805,35 +805,29 @@ compile-check: tidy \\\n \t@$(call E, compile [boot]: $@)\n \t$(BOOT) -o $@ $<\n \n-%.stage0.s: %.rc $(SREQ0)\n+%.stage0.o: %.rc $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -S -o $@ $<\n+\t$(STAGE0) -c -o $@ $<\n \n-%.stage0.s: %.rs $(SREQ0)\n+%.stage0.o: %.rs $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -S -o $@ $<\n+\t$(STAGE0) -c -o $@ $<\n \n-%.stage1.s: %.rc $(SREQ1)\n+%.stage1.o: %.rc $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -S -o $@ $<\n+\t$(STAGE1) -c -o $@ $<\n \n-%.stage1.s: %.rs $(SREQ1)\n+%.stage1.o: %.rs $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -S -o $@ $<\n+\t$(STAGE1) -c -o $@ $<\n \n-%.stage2.s: %.rc $(SREQ2)\n+%.stage2.o: %.rc $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -S -o $@ $<\n+\t$(STAGE2) -c -o $@ $<\n \n-%.stage2.s: %.rs $(SREQ2)\n+%.stage2.o: %.rs $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -S -o $@ $<\n-\n-\n-\n-%.o: %.s\n-\t@$(call E, assemble [llvm]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n+\t$(STAGE2) -c -o $@ $<\n \n # Cancel the implicit .out rule in GNU make.\n %.out: %"}, {"sha": "6d65a7012d2f237e879d4261cb44dfa3ccbb5ea3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fac8cc3b066da8351dc24b209c1a070a53b16a61/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fac8cc3b066da8351dc24b209c1a070a53b16a61/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=fac8cc3b066da8351dc24b209c1a070a53b16a61", "patch": "@@ -53,6 +53,7 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR, LLVMModuleRef M,\n                                         LLVMCodeGenFileType FileType) {\n   InitializeAllTargets();\n   InitializeAllAsmPrinters();\n+  InitializeAllAsmParsers();\n   TargetMachine::setRelocationModel(Reloc::PIC_);\n   std::string Err;\n   const Target *TheTarget = TargetRegistry::lookupTarget(triple, Err);"}]}