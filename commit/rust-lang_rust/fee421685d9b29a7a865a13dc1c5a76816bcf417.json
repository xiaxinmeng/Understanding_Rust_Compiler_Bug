{"sha": "fee421685d9b29a7a865a13dc1c5a76816bcf417", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZTQyMTY4NWQ5YjI5YTdhODY1YTEzZGMxYzVhNzY4MTZiY2Y0MTc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-25T10:03:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-25T10:22:47Z"}, "message": "Introduce OwnerNode::Crate.", "tree": {"sha": "71c2f8f6eb5d85a8acd9b96bb163618892fffc73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c2f8f6eb5d85a8acd9b96bb163618892fffc73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fee421685d9b29a7a865a13dc1c5a76816bcf417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fee421685d9b29a7a865a13dc1c5a76816bcf417", "html_url": "https://github.com/rust-lang/rust/commit/fee421685d9b29a7a865a13dc1c5a76816bcf417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fee421685d9b29a7a865a13dc1c5a76816bcf417/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a28060f146a5c5ff6445659ce5962009c8829d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a28060f146a5c5ff6445659ce5962009c8829d", "html_url": "https://github.com/rust-lang/rust/commit/36a28060f146a5c5ff6445659ce5962009c8829d"}], "stats": {"total": 134, "additions": 69, "deletions": 65}, "files": [{"sha": "57bf7be40566e16fbbc3ad8942926e6cfd4c6015", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -512,8 +512,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         visit::walk_crate(&mut MiscCollector { lctx: &mut self }, c);\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n-        let module = self.lower_mod(&c.items, c.span);\n+        let module = self.arena.alloc(self.lower_mod(&c.items, c.span));\n         self.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n+        self.owners.ensure_contains_elem(CRATE_DEF_ID, || None);\n+        self.owners[CRATE_DEF_ID] = Some(hir::OwnerNode::Crate(module));\n+\n         let body_ids = body_ids(&self.bodies);\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n@@ -548,7 +551,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         let krate = hir::Crate {\n-            item: module,\n             non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n             owners: self.owners,\n             bodies: self.bodies,"}, {"sha": "c4cff79f6c525c5509821b620c4948b43334e08d", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -36,6 +36,7 @@ macro_rules! arena_types {\n             [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n             [] local: rustc_hir::Local<$tcx>,\n             [few] macro_def: rustc_hir::MacroDef<$tcx>,\n+            [few] mod_: rustc_hir::Mod<$tcx>,\n             [] param: rustc_hir::Param<$tcx>,\n             [] pat: rustc_hir::Pat<$tcx>,\n             [] path: rustc_hir::Path<$tcx>,"}, {"sha": "23b28733e2ab1b59d51f612e6615279f9755bb7a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-filelength\n use crate::def::{CtorKind, DefKind, Res};\n-use crate::def_id::DefId;\n+use crate::def_id::{DefId, CRATE_DEF_ID};\n crate use crate::hir_id::{HirId, ItemLocalId};\n use crate::{itemlikevisit, LangItem};\n \n@@ -628,7 +628,6 @@ pub struct ModuleItems {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n #[derive(Debug)]\n pub struct Crate<'hir> {\n-    pub item: Mod<'hir>,\n     // Attributes from non-exported macros, kept only for collecting the library feature list.\n     pub non_exported_macro_attrs: &'hir [Attribute],\n \n@@ -658,6 +657,10 @@ pub struct Crate<'hir> {\n }\n \n impl Crate<'hir> {\n+    pub fn module(&self) -> &'hir Mod<'hir> {\n+        if let Some(OwnerNode::Crate(m)) = self.owners[CRATE_DEF_ID] { m } else { panic!() }\n+    }\n+\n     pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {\n         self.owners[id.def_id].as_ref().unwrap().expect_item()\n     }\n@@ -698,7 +701,7 @@ impl Crate<'_> {\n                 OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),\n                 OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),\n                 OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),\n-                OwnerNode::MacroDef(_) => {}\n+                OwnerNode::MacroDef(_) | OwnerNode::Crate(_) => {}\n             }\n         }\n     }\n@@ -713,7 +716,7 @@ impl Crate<'_> {\n             Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),\n             Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),\n             Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),\n-            Some(OwnerNode::MacroDef(_)) | None => {}\n+            Some(OwnerNode::MacroDef(_)) | Some(OwnerNode::Crate(_)) | None => {}\n         })\n     }\n \n@@ -2943,16 +2946,29 @@ pub enum OwnerNode<'hir> {\n     TraitItem(&'hir TraitItem<'hir>),\n     ImplItem(&'hir ImplItem<'hir>),\n     MacroDef(&'hir MacroDef<'hir>),\n+    Crate(&'hir Mod<'hir>),\n }\n \n impl<'hir> OwnerNode<'hir> {\n-    pub fn ident(&self) -> Ident {\n+    pub fn ident(&self) -> Option<Ident> {\n         match self {\n             OwnerNode::Item(Item { ident, .. })\n             | OwnerNode::ForeignItem(ForeignItem { ident, .. })\n             | OwnerNode::ImplItem(ImplItem { ident, .. })\n             | OwnerNode::TraitItem(TraitItem { ident, .. })\n-            | OwnerNode::MacroDef(MacroDef { ident, .. }) => *ident,\n+            | OwnerNode::MacroDef(MacroDef { ident, .. }) => Some(*ident),\n+            OwnerNode::Crate(..) => None,\n+        }\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        match self {\n+            OwnerNode::Item(Item { span, .. })\n+            | OwnerNode::ForeignItem(ForeignItem { span, .. })\n+            | OwnerNode::ImplItem(ImplItem { span, .. })\n+            | OwnerNode::TraitItem(TraitItem { span, .. })\n+            | OwnerNode::MacroDef(MacroDef { span, .. })\n+            | OwnerNode::Crate(Mod { inner: span, .. }) => *span,\n         }\n     }\n \n@@ -2997,56 +3013,42 @@ impl<'hir> OwnerNode<'hir> {\n             | OwnerNode::ImplItem(ImplItem { def_id, .. })\n             | OwnerNode::ForeignItem(ForeignItem { def_id, .. })\n             | OwnerNode::MacroDef(MacroDef { def_id, .. }) => *def_id,\n+            OwnerNode::Crate(..) => crate::CRATE_HIR_ID.owner,\n         }\n     }\n \n     pub fn expect_item(self) -> &'hir Item<'hir> {\n         match self {\n             OwnerNode::Item(n) => n,\n-            OwnerNode::ForeignItem(_)\n-            | OwnerNode::ImplItem(_)\n-            | OwnerNode::TraitItem(_)\n-            | OwnerNode::MacroDef(_) => panic!(),\n+            _ => panic!(),\n         }\n     }\n \n     pub fn expect_foreign_item(self) -> &'hir ForeignItem<'hir> {\n         match self {\n             OwnerNode::ForeignItem(n) => n,\n-            OwnerNode::Item(_)\n-            | OwnerNode::ImplItem(_)\n-            | OwnerNode::TraitItem(_)\n-            | OwnerNode::MacroDef(_) => panic!(),\n+            _ => panic!(),\n         }\n     }\n \n     pub fn expect_impl_item(self) -> &'hir ImplItem<'hir> {\n         match self {\n             OwnerNode::ImplItem(n) => n,\n-            OwnerNode::ForeignItem(_)\n-            | OwnerNode::Item(_)\n-            | OwnerNode::TraitItem(_)\n-            | OwnerNode::MacroDef(_) => panic!(),\n+            _ => panic!(),\n         }\n     }\n \n     pub fn expect_trait_item(self) -> &'hir TraitItem<'hir> {\n         match self {\n             OwnerNode::TraitItem(n) => n,\n-            OwnerNode::ForeignItem(_)\n-            | OwnerNode::ImplItem(_)\n-            | OwnerNode::Item(_)\n-            | OwnerNode::MacroDef(_) => panic!(),\n+            _ => panic!(),\n         }\n     }\n \n     pub fn expect_macro_def(self) -> &'hir MacroDef<'hir> {\n         match self {\n             OwnerNode::MacroDef(n) => n,\n-            OwnerNode::ForeignItem(_)\n-            | OwnerNode::ImplItem(_)\n-            | OwnerNode::TraitItem(_)\n-            | OwnerNode::Item(_) => panic!(),\n+            _ => panic!(),\n         }\n     }\n }\n@@ -3089,6 +3091,7 @@ impl<'hir> Into<Node<'hir>> for OwnerNode<'hir> {\n             OwnerNode::ImplItem(n) => Node::ImplItem(n),\n             OwnerNode::TraitItem(n) => Node::TraitItem(n),\n             OwnerNode::MacroDef(n) => Node::MacroDef(n),\n+            OwnerNode::Crate(n) => Node::Crate(n),\n         }\n     }\n }\n@@ -3221,6 +3224,18 @@ impl<'hir> Node<'hir> {\n             _ => Constness::NotConst,\n         }\n     }\n+\n+    pub fn as_owner(self) -> Option<OwnerNode<'hir>> {\n+        match self {\n+            Node::Item(i) => Some(OwnerNode::Item(i)),\n+            Node::ForeignItem(i) => Some(OwnerNode::ForeignItem(i)),\n+            Node::TraitItem(i) => Some(OwnerNode::TraitItem(i)),\n+            Node::ImplItem(i) => Some(OwnerNode::ImplItem(i)),\n+            Node::MacroDef(i) => Some(OwnerNode::MacroDef(i)),\n+            Node::Crate(i) => Some(OwnerNode::Crate(i)),\n+            _ => None,\n+        }\n+    }\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger."}, {"sha": "711b62c4a314259a61e1803c252adbedd084c55b", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -478,7 +478,8 @@ pub trait Visitor<'v>: Sized {\n \n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n-    visitor.visit_mod(&krate.item, krate.item.inner, CRATE_HIR_ID);\n+    let top_mod = krate.module();\n+    visitor.visit_mod(top_mod, top_mod.inner, CRATE_HIR_ID);\n     walk_list!(visitor, visit_macro_def, krate.exported_macros());\n     for (&id, attrs) in krate.attrs.iter() {\n         for a in *attrs {"}, {"sha": "4177c2f8d525e9081eb0096f3c298b8e48fd6c24", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -169,7 +169,7 @@ pub fn print_crate<'a>(\n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n \n-    s.print_mod(&krate.item, s.attrs(hir::CRATE_HIR_ID));\n+    s.print_mod(&krate.module(), s.attrs(hir::CRATE_HIR_ID));\n     s.print_remaining_comments();\n     s.s.eof()\n }"}, {"sha": "b3c64b76820f11e3b55aa4da2437d1c8d3444a0d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -568,7 +568,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, hir::CRATE_HIR_ID, krate.item.inner, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, hir::CRATE_HIR_ID, krate.module().inner, \"the\", \"crate\");\n \n         for macro_def in krate.exported_macros() {\n             // Non exported macros should be skipped, since `missing_docs` only"}, {"sha": "45a4762c700e41d6c83fbd2582516eccb3850d99", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -439,7 +439,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_info_for_items(&mut self) {\n         let krate = self.tcx.hir().krate();\n-        self.encode_info_for_mod(CRATE_DEF_ID, &krate.item);\n+        self.encode_info_for_mod(CRATE_DEF_ID, krate.module());\n \n         // Proc-macro crates only export proc-macro items, which are looked\n         // up using `proc_macro_data`"}, {"sha": "09060169c5f4bff9918f859a9bca41d2bc6d321b", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -77,23 +77,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         definitions: &'a definitions::Definitions,\n         mut hcx: StableHashingContext<'a>,\n     ) -> NodeCollector<'a, 'hir> {\n-        let hash = {\n-            let Crate {\n-                ref item,\n-                // These fields are handled separately:\n-                non_exported_macro_attrs: _,\n-                owners: _,\n-                trait_impls: _,\n-                bodies: _,\n-                body_ids: _,\n-                modules: _,\n-                proc_macros: _,\n-                trait_map: _,\n-                attrs: _,\n-            } = *krate;\n-\n-            hash_body(&mut hcx, item)\n-        };\n+        let hash = hash_body(&mut hcx, krate.module());\n \n         let mut collector = NodeCollector {\n             arena,\n@@ -108,7 +92,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         };\n         collector.insert_entry(\n             hir::CRATE_HIR_ID,\n-            Entry { parent: hir::CRATE_HIR_ID, node: Node::Crate(&krate.item) },\n+            Entry { parent: hir::CRATE_HIR_ID, node: Node::Crate(&krate.module()) },\n             hash,\n         );\n "}, {"sha": "876edbd1f6d55569eaf9ae447193dd9e70e58640", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -183,7 +183,7 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n }\n \n fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n-    let sp = tcx.hir().krate().item.inner;\n+    let sp = tcx.hir().krate().module().inner;\n     if *tcx.sess.parse_sess.reached_eof.borrow() {\n         // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about\n         // the missing `fn main()` then as it might have been hidden inside an unclosed block."}, {"sha": "3db0409d8f009c959b9a7116f5be6ca87e974d5a", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -732,7 +732,7 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n \n         annotator.annotate(\n             hir::CRATE_HIR_ID,\n-            krate.item.inner,\n+            krate.module().inner,\n             None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n@@ -929,7 +929,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n-        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.item.inner);\n+        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.module().inner);\n         intravisit::walk_crate(&mut missing, krate);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }"}, {"sha": "4f8dc7d16d4b9578dea145825cf7d98ba19277de", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             },\n             crate_root: crate_root.unwrap_or_else(|| \"<no source>\".to_owned()),\n             external_crates: self.save_ctxt.get_external_crates(),\n-            span: self.span_from_span(krate.item.inner),\n+            span: self.span_from_span(krate.module().inner),\n         };\n \n         self.dumper.crate_prelude(data);\n@@ -1092,11 +1092,12 @@ impl<'tcx> DumpVisitor<'tcx> {\n             format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id(id).to_def_id()));\n \n         let sm = self.tcx.sess.source_map();\n-        let filename = sm.span_to_filename(krate.item.inner);\n+        let krate_mod = krate.module();\n+        let filename = sm.span_to_filename(krate_mod.inner);\n         let data_id = id_from_hir_id(id, &self.save_ctxt);\n         let children =\n-            krate.item.item_ids.iter().map(|i| id_from_def_id(i.def_id.to_def_id())).collect();\n-        let span = self.span_from_span(krate.item.inner);\n+            krate_mod.item_ids.iter().map(|i| id_from_def_id(i.def_id.to_def_id())).collect();\n+        let span = self.span_from_span(krate_mod.inner);\n         let attrs = self.tcx.hir().attrs(id);\n \n         self.dumper.dump_def("}, {"sha": "101d3b400c3dfaf62173c06025a4f2e9677031cb", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -227,7 +227,7 @@ impl ExternalCrate {\n         if root.is_local() {\n             tcx.hir()\n                 .krate()\n-                .item\n+                .module()\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {\n@@ -293,7 +293,7 @@ impl ExternalCrate {\n         if root.is_local() {\n             tcx.hir()\n                 .krate()\n-                .item\n+                .module()\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {"}, {"sha": "d5268abeec79584c55e41b5f4f23ff7284a00c9b", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -144,7 +144,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 hir_collector.visit_testable(\n                     \"\".to_string(),\n                     CRATE_HIR_ID,\n-                    krate.item.inner,\n+                    krate.module().inner,\n                     |this| {\n                         intravisit::walk_crate(this, krate);\n                     },"}, {"sha": "d74b3b4627284321b391a4de5363ef2517e3a5aa", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -72,11 +72,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n-        let span = krate.item.inner;\n+        let span = krate.module().inner;\n         let mut top_level_module = self.visit_mod_contents(\n             &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n-            &krate.item,\n+            &krate.module(),\n             self.cx.tcx.crate_name(LOCAL_CRATE),\n         );\n         // Attach the crate's exported macros to the top-level module."}, {"sha": "1f494e444846fa3555aa3e2907120090684607fc", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -33,7 +33,7 @@ macro_rules! fake_lint_pass {\n                     if !cx.sess().contains_name(attrs, $attr) {\n                         cx.lint(CRATE_NOT_OKAY, |lint| {\n                              let msg = format!(\"crate is not marked with #![{}]\", $attr);\n-                             lint.build(&msg).set_span(krate.item.inner).emit()\n+                             lint.build(&msg).set_span(krate.module().inner).emit()\n                         });\n                     }\n                 )*"}, {"sha": "122a544e9d4699706fff947e2d274eb0a16af64d", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -31,7 +31,7 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n         if !cx.sess().contains_name(attrs, Symbol::intern(\"crate_okay\")) {\n             cx.lint(CRATE_NOT_OKAY, |lint| {\n                 lint.build(\"crate is not marked with #![crate_okay]\")\n-                    .set_span(krate.item.inner)\n+                    .set_span(krate.module().inner)\n                     .emit()\n             });\n         }"}, {"sha": "6ad702f8eafdf28a1130c4c9f6a8bea66313bb91", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee421685d9b29a7a865a13dc1c5a76816bcf417/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=fee421685d9b29a7a865a13dc1c5a76816bcf417", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, krate.item.inner, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, attrs, krate.module().inner, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {"}]}