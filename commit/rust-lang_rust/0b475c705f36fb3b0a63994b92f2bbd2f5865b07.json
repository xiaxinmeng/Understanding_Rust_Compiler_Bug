{"sha": "0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "node_id": "C_kwDOAAsO6NoAKDBiNDc1YzcwNWYzNmZiM2IwYTYzOTk0YjkyZjJiYmQyZjU4NjViMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-14T17:25:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-14T17:25:04Z"}, "message": "Auto merge of #112624 - matthiaskrgr:rollup-db6ta1b, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #98202 (Implement `TryFrom<&OsStr>` for `&str`)\n - #107619 (Specify behavior of HashSet::insert)\n - #109814 (Stabilize String::leak)\n - #111974 (Update runtime guarantee for `select_nth_unstable`)\n - #112109 (Don't print unsupported split-debuginfo modes with `-Zunstable-options`)\n - #112506 (Properly check associated consts for infer placeholders)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2cda00084fc4ef002fab7497665ec301bac26b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cda00084fc4ef002fab7497665ec301bac26b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "html_url": "https://github.com/rust-lang/rust/commit/0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa9fef70904bee316d5a73275397d7c4e7c8c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa9fef70904bee316d5a73275397d7c4e7c8c4b", "html_url": "https://github.com/rust-lang/rust/commit/afa9fef70904bee316d5a73275397d7c4e7c8c4b"}, {"sha": "c1b4d075a2e5304437769bc3847ebb1d5db2c3fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b4d075a2e5304437769bc3847ebb1d5db2c3fa", "html_url": "https://github.com/rust-lang/rust/commit/c1b4d075a2e5304437769bc3847ebb1d5db2c3fa"}], "stats": {"total": 205, "additions": 140, "deletions": 65}, "files": [{"sha": "2f1c78197275d433fdc0068e785f0c46290748fa", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -771,9 +771,7 @@ fn print_crate_info(\n                 use rustc_target::spec::SplitDebuginfo::{Off, Packed, Unpacked};\n \n                 for split in &[Off, Packed, Unpacked] {\n-                    let stable = sess.target.options.supported_split_debuginfo.contains(split);\n-                    let unstable_ok = sess.unstable_options();\n-                    if stable || unstable_ok {\n+                    if sess.target.options.supported_split_debuginfo.contains(split) {\n                         safe_println!(\"{split}\");\n                     }\n                 }"}, {"sha": "8b5c1791fc13902ed3c96e948fdb2a5babac90fe", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -666,17 +666,15 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             tcx.ensure().fn_sig(def_id);\n         }\n \n-        hir::TraitItemKind::Const(.., Some(_)) => {\n+        hir::TraitItemKind::Const(ty, body_id) => {\n             tcx.ensure().type_of(def_id);\n-        }\n-\n-        hir::TraitItemKind::Const(hir_ty, _) => {\n-            tcx.ensure().type_of(def_id);\n-            // Account for `const C: _;`.\n-            let mut visitor = HirPlaceholderCollector::default();\n-            visitor.visit_trait_item(trait_item);\n-            if !tcx.sess.diagnostic().has_stashed_diagnostic(hir_ty.span, StashKey::ItemNoType) {\n-                placeholder_type_error(tcx, None, visitor.0, false, None, \"constant\");\n+            if !tcx.sess.diagnostic().has_stashed_diagnostic(ty.span, StashKey::ItemNoType)\n+                && !(is_suggestable_infer_ty(ty) && body_id.is_some())\n+            {\n+                // Account for `const C: _;`.\n+                let mut visitor = HirPlaceholderCollector::default();\n+                visitor.visit_trait_item(trait_item);\n+                placeholder_type_error(tcx, None, visitor.0, false, None, \"associated constant\");\n             }\n         }\n \n@@ -721,7 +719,14 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n \n             placeholder_type_error(tcx, None, visitor.0, false, None, \"associated type\");\n         }\n-        hir::ImplItemKind::Const(..) => {}\n+        hir::ImplItemKind::Const(ty, _) => {\n+            // Account for `const T: _ = ..;`\n+            if !is_suggestable_infer_ty(ty) {\n+                let mut visitor = HirPlaceholderCollector::default();\n+                visitor.visit_impl_item(impl_item);\n+                placeholder_type_error(tcx, None, visitor.0, false, None, \"associated constant\");\n+            }\n+        }\n     }\n }\n "}, {"sha": "318d0d0c22397ced4b55064ade489339fd060925", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -341,7 +341,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                 .and_then(|body_id| {\n                     is_suggestable_infer_ty(ty).then(|| {\n                         infer_placeholder_type(\n-                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n+                            tcx,\n+                            def_id,\n+                            body_id,\n+                            ty.span,\n+                            item.ident,\n+                            \"associated constant\",\n                         )\n                     })\n                 })\n@@ -359,7 +364,14 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n             }\n             ImplItemKind::Const(ty, body_id) => {\n                 if is_suggestable_infer_ty(ty) {\n-                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident, \"constant\")\n+                    infer_placeholder_type(\n+                        tcx,\n+                        def_id,\n+                        body_id,\n+                        ty.span,\n+                        item.ident,\n+                        \"associated constant\",\n+                    )\n                 } else {\n                     icx.to_ty(ty)\n                 }"}, {"sha": "1c6815fa94110037d9884e92c19ea970f110eedf", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -1853,26 +1853,27 @@ impl String {\n     /// Consumes and leaks the `String`, returning a mutable reference to the contents,\n     /// `&'a mut str`.\n     ///\n-    /// This is mainly useful for data that lives for the remainder of\n-    /// the program's life. Dropping the returned reference will cause a memory\n-    /// leak.\n+    /// The caller has free choice over the returned lifetime, including `'static`. Indeed,\n+    /// this function is ideally used for data that lives for the remainder of the program's life,\n+    /// as dropping the returned reference will cause a memory leak.\n     ///\n     /// It does not reallocate or shrink the `String`,\n     /// so the leaked allocation may include unused capacity that is not part\n-    /// of the returned slice.\n+    /// of the returned slice. If you don't want that, call [`into_boxed_str`],\n+    /// and then [`Box::leak`].\n+    ///\n+    /// [`into_boxed_str`]: Self::into_boxed_str\n     ///\n     /// # Examples\n     ///\n     /// Simple usage:\n     ///\n     /// ```\n-    /// #![feature(string_leak)]\n-    ///\n     /// let x = String::from(\"bucket\");\n     /// let static_ref: &'static mut str = x.leak();\n     /// assert_eq!(static_ref, \"bucket\");\n     /// ```\n-    #[unstable(feature = \"string_leak\", issue = \"102929\")]\n+    #[stable(feature = \"string_leak\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline]\n     pub fn leak<'a>(self) -> &'a mut str {\n         let slice = self.vec.leak();"}, {"sha": "5d6e7dcfcee87d24c245f539ab902c03669727ce", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -2995,7 +2995,7 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n-    /// (i.e. does not allocate), and *O*(*n*) on average. The worst-case performance is *O*(*n* log *n*).\n+    /// (i.e. does not allocate), and runs in *O*(*n*) time.\n     /// This function is also known as \"kth element\" in other libraries.\n     ///\n     /// It returns a triplet of the following from the reordered slice:\n@@ -3045,9 +3045,8 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n-    /// The worst-case performance is *O*(*n* log *n*). This function is also known as\n-    /// \"kth element\" in other libraries.\n+    /// position `index`), in-place (i.e. does not allocate), and runs in *O*(*n*) time.\n+    /// This function is also known as \"kth element\" in other libraries.\n     ///\n     /// It returns a triplet of the following from\n     /// the slice reordered according to the provided comparator function: the subslice prior to\n@@ -3101,8 +3100,7 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n-    /// The worst-case performance is *O*(*n* log *n*).\n+    /// position `index`), in-place (i.e. does not allocate), and runs in *O*(*n*) time.\n     /// This function is also known as \"kth element\" in other libraries.\n     ///\n     /// It returns a triplet of the following from"}, {"sha": "99620610d1c4e6a08684bf50d68c0cdeceb7ca3d", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -868,7 +868,9 @@ where\n     /// Returns whether the value was newly inserted. That is:\n     ///\n     /// - If the set did not previously contain this value, `true` is returned.\n-    /// - If the set already contained this value, `false` is returned.\n+    /// - If the set already contained this value, `false` is returned,\n+    ///   and the set is not modified: original value is not replaced,\n+    ///   and the value passed as argument is dropped.\n     ///\n     /// # Examples\n     ///"}, {"sha": "022ca68ffcfbbff625df402629e4d52623916bdc", "filename": "library/std/src/collections/hash/set/tests.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -3,6 +3,7 @@ use super::HashSet;\n \n use crate::panic::{catch_unwind, AssertUnwindSafe};\n use crate::sync::atomic::{AtomicU32, Ordering};\n+use crate::sync::Arc;\n \n #[test]\n fn test_zero_capacities() {\n@@ -502,3 +503,22 @@ fn const_with_hasher() {\n     const X: HashSet<(), ()> = HashSet::with_hasher(());\n     assert_eq!(X.len(), 0);\n }\n+\n+#[test]\n+fn test_insert_does_not_overwrite_the_value() {\n+    let first_value = Arc::new(17);\n+    let second_value = Arc::new(17);\n+\n+    let mut set = HashSet::new();\n+    let inserted = set.insert(first_value.clone());\n+    assert!(inserted);\n+\n+    let inserted = set.insert(second_value);\n+    assert!(!inserted);\n+\n+    assert!(\n+        Arc::ptr_eq(set.iter().next().unwrap(), &first_value),\n+        \"Insert must not overwrite the value, so the contained value pointer \\\n+            must be the same as first value pointer we inserted\"\n+    );\n+}"}, {"sha": "fbdf7f5ecacc15c1ef3ae558ba8e074ece978e38", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -745,7 +745,7 @@ impl OsStr {\n                   without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n-        self.inner.to_str()\n+        self.inner.to_str().ok()\n     }\n \n     /// Converts an `OsStr` to a <code>[Cow]<[str]></code>.\n@@ -1165,6 +1165,24 @@ impl<'a> From<Cow<'a, OsStr>> for OsString {\n     }\n }\n \n+#[stable(feature = \"str_tryfrom_osstr_impl\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a> TryFrom<&'a OsStr> for &'a str {\n+    type Error = crate::str::Utf8Error;\n+\n+    /// Tries to convert an `&OsStr` to a `&str`.\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// let as_str = <&str>::try_from(os_str).unwrap();\n+    /// assert_eq!(as_str, \"foo\");\n+    /// ```\n+    fn try_from(value: &'a OsStr) -> Result<Self, Self::Error> {\n+        value.inner.to_str()\n+    }\n+}\n+\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     #[inline]"}, {"sha": "f7333fd5a1fed10652aaddef155d104a56d39b89", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -207,8 +207,8 @@ impl Slice {\n         unsafe { Slice::from_os_str_bytes_unchecked(s.as_bytes()) }\n     }\n \n-    pub fn to_str(&self) -> Option<&str> {\n-        str::from_utf8(&self.inner).ok()\n+    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {\n+        str::from_utf8(&self.inner)\n     }\n \n     pub fn to_string_lossy(&self) -> Cow<'_, str> {"}, {"sha": "16c4f55c6879a7af92789cc6eda65ea92a223945", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -166,7 +166,7 @@ impl Slice {\n         unsafe { mem::transmute(Wtf8::from_str(s)) }\n     }\n \n-    pub fn to_str(&self) -> Option<&str> {\n+    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {\n         self.inner.as_str()\n     }\n "}, {"sha": "c9d3e13cf0c56b60c68886c2586b06779da541cf", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -626,13 +626,8 @@ impl Wtf8 {\n     ///\n     /// This does not copy the data.\n     #[inline]\n-    pub fn as_str(&self) -> Option<&str> {\n-        // Well-formed WTF-8 is also well-formed UTF-8\n-        // if and only if it contains no surrogate.\n-        match self.next_surrogate(0) {\n-            None => Some(unsafe { str::from_utf8_unchecked(&self.bytes) }),\n-            Some(_) => None,\n-        }\n+    pub fn as_str(&self) -> Result<&str, str::Utf8Error> {\n+        str::from_utf8(&self.bytes)\n     }\n \n     /// Creates an owned `Wtf8Buf` from a borrowed `Wtf8`."}, {"sha": "a07bbe6d7e425fcac4df32b9db82e07e3a0c45dc", "filename": "library/std/src/sys_common/wtf8/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -521,11 +521,11 @@ fn wtf8_code_points() {\n \n #[test]\n fn wtf8_as_str() {\n-    assert_eq!(Wtf8::from_str(\"\").as_str(), Some(\"\"));\n-    assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").as_str(), Some(\"a\u00e9 \ud83d\udca9\"));\n+    assert_eq!(Wtf8::from_str(\"\").as_str(), Ok(\"\"));\n+    assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").as_str(), Ok(\"a\u00e9 \ud83d\udca9\"));\n     let mut string = Wtf8Buf::new();\n     string.push(CodePoint::from_u32(0xD800).unwrap());\n-    assert_eq!(string.as_str(), None);\n+    assert!(string.as_str().is_err());\n }\n \n #[test]"}, {"sha": "40896c32e1113a3e37c786d0706d5b286d2ef565", "filename": "tests/ui/associated-consts/infer-placeholder-in-non-suggestable-pos.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fassociated-consts%2Finfer-placeholder-in-non-suggestable-pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fassociated-consts%2Finfer-placeholder-in-non-suggestable-pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Finfer-placeholder-in-non-suggestable-pos.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -0,0 +1,10 @@\n+trait Trait {\n+    const ASSOC: i32;\n+}\n+\n+impl Trait for () {\n+    const ASSOC: &dyn Fn(_) = 1i32;\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n+}\n+\n+fn main() {}"}, {"sha": "993a08faba9902e6328fb1da8778d334161e7a2c", "filename": "tests/ui/associated-consts/infer-placeholder-in-non-suggestable-pos.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fassociated-consts%2Finfer-placeholder-in-non-suggestable-pos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fassociated-consts%2Finfer-placeholder-in-non-suggestable-pos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Finfer-placeholder-in-non-suggestable-pos.stderr?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -0,0 +1,9 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n+  --> $DIR/infer-placeholder-in-non-suggestable-pos.rs:6:26\n+   |\n+LL |     const ASSOC: &dyn Fn(_) = 1i32;\n+   |                          ^ not allowed in type signatures\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "cd852a269435e90684a4ce4fb79e153c540be34c", "filename": "tests/ui/const-generics/generic_arg_infer/in-signature.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -33,15 +33,15 @@ static TY_STATIC_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n //~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n trait ArrAssocConst {\n     const ARR: [u8; _];\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n }\n trait TyAssocConst {\n     const ARR: Bar<i32, _>;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n }\n trait TyAssocConstMixed {\n     const ARR: Bar<_, _>;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n }\n \n trait AssocTy {"}, {"sha": "b32018a6a2d22de4772d7a3ec44b093215c69fd1", "filename": "tests/ui/const-generics/generic_arg_infer/in-signature.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -74,19 +74,19 @@ LL | static TY_STATIC_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n    |                         not allowed in type signatures\n    |                         help: replace with the correct type: `Bar<i32, 3>`\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/in-signature.rs:35:21\n    |\n LL |     const ARR: [u8; _];\n    |                     ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/in-signature.rs:39:25\n    |\n LL |     const ARR: Bar<i32, _>;\n    |                         ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/in-signature.rs:43:20\n    |\n LL |     const ARR: Bar<_, _>;"}, {"sha": "bbb95a5798af5eca6afd1f6f9260be70a3a6c428", "filename": "tests/ui/typeck/type-placeholder-fn-in-const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -3,12 +3,13 @@ struct MyStruct;\n trait Test {\n     const TEST: fn() -> _;\n     //~^ ERROR: the placeholder `_` is not allowed within types on item signatures for functions [E0121]\n-    //~| ERROR: the placeholder `_` is not allowed within types on item signatures for constants [E0121]\n+    //~| ERROR: the placeholder `_` is not allowed within types on item signatures for associated constants [E0121]\n }\n \n impl Test for MyStruct {\n     const TEST: fn() -> _ = 42;\n     //~^ ERROR: the placeholder `_` is not allowed within types on item signatures for functions [E0121]\n+    //~| ERROR: the placeholder `_` is not allowed within types on item signatures for associated constants [E0121]\n }\n \n fn main() {}"}, {"sha": "302359d2500c98c436002cff69c828313b0e142e", "filename": "tests/ui/typeck/type-placeholder-fn-in-const.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -4,7 +4,7 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL |     const TEST: fn() -> _;\n    |                         ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/type-placeholder-fn-in-const.rs:4:25\n    |\n LL |     const TEST: fn() -> _;\n@@ -16,6 +16,12 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL |     const TEST: fn() -> _ = 42;\n    |                         ^ not allowed in type signatures\n \n-error: aborting due to 3 previous errors\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n+  --> $DIR/type-placeholder-fn-in-const.rs:10:25\n+   |\n+LL |     const TEST: fn() -> _ = 42;\n+   |                         ^ not allowed in type signatures\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}, {"sha": "4eba14f5a93fb34bf092d849a17726dad7de804d", "filename": "tests/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -190,9 +190,9 @@ trait Qux {\n     type B = _;\n     //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n     const C: _;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n     const D: _ = 42;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n     // type E: _; // FIXME: make the parser propagate the existence of `B`\n     type F: std::ops::Fn(_);\n     //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n@@ -203,10 +203,10 @@ impl Qux for Struct {\n     type B = _;\n     //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n     const C: _;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n     //~| ERROR associated constant in `impl` without body\n     const D: _ = 42;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n }\n \n fn map<T>(_: fn() -> Option<&'static T>) -> Option<T> {"}, {"sha": "0c5e7e3cecb193145c0503598775615d3ec25eed", "filename": "tests/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -525,13 +525,13 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/typeck_type_placeholder_item.rs:192:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/typeck_type_placeholder_item.rs:194:14\n    |\n LL |     const D: _ = 42;\n@@ -642,13 +642,13 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/typeck_type_placeholder_item.rs:205:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/typeck_type_placeholder_item.rs:208:14\n    |\n LL |     const D: _ = 42;"}, {"sha": "914f8a2b28b343f1d1428ea700a31ffcb401c7ba", "filename": "tests/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -16,14 +16,14 @@ const TEST4: fn() -> _ = 42;\n \n trait Test5 {\n     const TEST5: _ = 42;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n }\n \n struct Test6;\n \n impl Test6 {\n     const TEST6: _ = 13;\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated constants\n }\n \n pub fn main() {"}, {"sha": "ed6f4088019f7acc10bfadd32dd039d026f5b8bc", "filename": "tests/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b475c705f36fb3b0a63994b92f2bbd2f5865b07/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "patch": "@@ -37,7 +37,7 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL | const TEST4: fn() -> _ = 42;\n    |                      ^ not allowed in type signatures\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:18:18\n    |\n LL |     const TEST5: _ = 42;\n@@ -46,7 +46,7 @@ LL |     const TEST5: _ = 42;\n    |                  not allowed in type signatures\n    |                  help: replace with the correct type: `i32`\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:25:18\n    |\n LL |     const TEST6: _ = 13;"}]}