{"sha": "80991356e15c372491312c5e47e56c7c22be9773", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOTkxMzU2ZTE1YzM3MjQ5MTMxMmM1ZTQ3ZTU2YzdjMjJiZTk3NzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T09:34:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T09:34:05Z"}, "message": "minore: improve readability\n\nTuples are hard to understand", "tree": {"sha": "4d3dd374f66399097b2300a2b0b75a045682114d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d3dd374f66399097b2300a2b0b75a045682114d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80991356e15c372491312c5e47e56c7c22be9773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80991356e15c372491312c5e47e56c7c22be9773", "html_url": "https://github.com/rust-lang/rust/commit/80991356e15c372491312c5e47e56c7c22be9773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80991356e15c372491312c5e47e56c7c22be9773/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45792ae8f1e39aba86d2999482ee9f1a7c6e4a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45792ae8f1e39aba86d2999482ee9f1a7c6e4a5", "html_url": "https://github.com/rust-lang/rust/commit/c45792ae8f1e39aba86d2999482ee9f1a7c6e4a5"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "7d179e00e702a345d76ea15c1e258ee8586c5e2a", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 28, "deletions": 36, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/80991356e15c372491312c5e47e56c7c22be9773/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80991356e15c372491312c5e47e56c7c22be9773/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=80991356e15c372491312c5e47e56c7c22be9773", "patch": "@@ -43,6 +43,7 @@ pub fn list_files(dir: &Path) -> Vec<PathBuf> {\n     res\n }\n \n+#[derive(Clone)]\n pub struct CommentBlock {\n     pub id: String,\n     pub line: usize,\n@@ -55,58 +56,49 @@ impl CommentBlock {\n \n         let tag = format!(\"{}:\", tag);\n         let mut res = Vec::new();\n-        for (line, mut block) in do_extract_comment_blocks(text, true) {\n-            let first = block.remove(0);\n+        for mut block in CommentBlock::do_extract(text, true) {\n+            let first = block.contents.remove(0);\n             if let Some(id) = first.strip_prefix(&tag) {\n-                let id = id.trim().to_string();\n-                let block = CommentBlock { id, line, contents: block };\n+                block.id = id.trim().to_string();\n                 res.push(block);\n             }\n         }\n         res\n     }\n \n     pub fn extract_untagged(text: &str) -> Vec<CommentBlock> {\n-        let mut res = Vec::new();\n-        for (line, block) in do_extract_comment_blocks(text, false) {\n-            let id = String::new();\n-            let block = CommentBlock { id, line, contents: block };\n-            res.push(block);\n-        }\n-        res\n+        CommentBlock::do_extract(text, false)\n     }\n-}\n \n-fn do_extract_comment_blocks(\n-    text: &str,\n-    allow_blocks_with_empty_lines: bool,\n-) -> Vec<(usize, Vec<String>)> {\n-    let mut res = Vec::new();\n+    fn do_extract(text: &str, allow_blocks_with_empty_lines: bool) -> Vec<CommentBlock> {\n+        let mut res = Vec::new();\n \n-    let prefix = \"// \";\n-    let lines = text.lines().map(str::trim_start);\n+        let prefix = \"// \";\n+        let lines = text.lines().map(str::trim_start);\n \n-    let mut block = (0, vec![]);\n-    for (line_num, line) in lines.enumerate() {\n-        if line == \"//\" && allow_blocks_with_empty_lines {\n-            block.1.push(String::new());\n-            continue;\n-        }\n+        let dummy_block = CommentBlock { id: String::new(), line: 0, contents: Vec::new() };\n+        let mut block = dummy_block.clone();\n+        for (line_num, line) in lines.enumerate() {\n+            if line == \"//\" && allow_blocks_with_empty_lines {\n+                block.contents.push(String::new());\n+                continue;\n+            }\n \n-        let is_comment = line.starts_with(prefix);\n-        if is_comment {\n-            block.1.push(line[prefix.len()..].to_string());\n-        } else {\n-            if !block.1.is_empty() {\n-                res.push(mem::take(&mut block));\n+            let is_comment = line.starts_with(prefix);\n+            if is_comment {\n+                block.contents.push(line[prefix.len()..].to_string());\n+            } else {\n+                if !block.contents.is_empty() {\n+                    res.push(mem::replace(&mut block, dummy_block.clone()));\n+                }\n+                block.line = line_num + 2;\n             }\n-            block.0 = line_num + 2;\n         }\n+        if !block.contents.is_empty() {\n+            res.push(block)\n+        }\n+        res\n     }\n-    if !block.1.is_empty() {\n-        res.push(block)\n-    }\n-    res\n }\n \n #[derive(Debug)]"}]}