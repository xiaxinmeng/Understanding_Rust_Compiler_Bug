{"sha": "0242f963c631a130a3c405d7e54f4695ef10a139", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNDJmOTYzYzYzMWExMzBhM2M0MDVkN2U1NGY0Njk1ZWYxMGExMzk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-08T21:52:15Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-09T21:34:16Z"}, "message": "Add comments to explain memory usage optimization", "tree": {"sha": "084f2e072bc139e9ebc9bad8f61727709ff34e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084f2e072bc139e9ebc9bad8f61727709ff34e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0242f963c631a130a3c405d7e54f4695ef10a139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0242f963c631a130a3c405d7e54f4695ef10a139", "html_url": "https://github.com/rust-lang/rust/commit/0242f963c631a130a3c405d7e54f4695ef10a139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0242f963c631a130a3c405d7e54f4695ef10a139/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d115f6db5172c961dfeb50de15f35784dbc7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d115f6db5172c961dfeb50de15f35784dbc7c9", "html_url": "https://github.com/rust-lang/rust/commit/b2d115f6db5172c961dfeb50de15f35784dbc7c9"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "3f9f558223bb00dabc2d89860953553237da139e", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0242f963c631a130a3c405d7e54f4695ef10a139/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0242f963c631a130a3c405d7e54f4695ef10a139/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=0242f963c631a130a3c405d7e54f4695ef10a139", "patch": "@@ -208,12 +208,19 @@ where\n             }\n         }\n \n+        // `state` is not actually used between iterations;\n+        // this is just an optimization to avoid reallocating\n+        // every iteration.\n         let mut state = analysis.bottom_value(body);\n         while let Some(bb) = dirty_queue.pop() {\n             let bb_data = &body[bb];\n \n-            // Apply the block transfer function, using the cached one if it exists.\n+            // Set the state to the entry state of the block.\n+            // This is equivalent to `state = entry_sets[bb].clone()`,\n+            // but it saves an allocation, thus improving compile times.\n             state.clone_from(&entry_sets[bb]);\n+\n+            // Apply the block transfer function, using the cached one if it exists.\n             match &apply_trans_for_block {\n                 Some(apply) => apply(bb, &mut state),\n                 None => A::Direction::apply_effects_in_block(&analysis, &mut state, bb, bb_data),"}]}