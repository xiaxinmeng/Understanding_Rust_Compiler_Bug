{"sha": "83e921d7707891bc68fd9728245f3c975a2a0f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTkyMWQ3NzA3ODkxYmM2OGZkOTcyODI0NWYzYzk3NWEyYTBmOTg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-03T10:49:14Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-10T09:19:39Z"}, "message": "Run 'x.py fmt'.", "tree": {"sha": "d62beda59951d6a520ce5c4d746ce5fbaefe3db5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62beda59951d6a520ce5c4d746ce5fbaefe3db5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e921d7707891bc68fd9728245f3c975a2a0f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e921d7707891bc68fd9728245f3c975a2a0f98", "html_url": "https://github.com/rust-lang/rust/commit/83e921d7707891bc68fd9728245f3c975a2a0f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e921d7707891bc68fd9728245f3c975a2a0f98/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "url": "https://api.github.com/repos/rust-lang/rust/commits/6848ed2d6504d17bdd0c494b5fbe4841b1d21057", "html_url": "https://github.com/rust-lang/rust/commit/6848ed2d6504d17bdd0c494b5fbe4841b1d21057"}], "stats": {"total": 143, "additions": 42, "deletions": 101}, "files": [{"sha": "625aa25978e6eb265afdd588be4bb649d9363a7a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83e921d7707891bc68fd9728245f3c975a2a0f98/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e921d7707891bc68fd9728245f3c975a2a0f98/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=83e921d7707891bc68fd9728245f3c975a2a0f98", "patch": "@@ -2,18 +2,17 @@ use crate::ty::{self, TyCtxt};\n use errors::Diagnostic;\n use parking_lot::{Condvar, Mutex};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::profiling::QueryInvocationId;\n use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n use rustc_index::vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n-use rustc_data_structures::profiling::QueryInvocationId;\n-use std::sync::atomic::Ordering::Relaxed;\n use std::env;\n use std::hash::Hash;\n use std::mem;\n-use std::sync::atomic::Ordering::SeqCst;\n+use std::sync::atomic::Ordering::Relaxed;\n \n use crate::ich::{Fingerprint, StableHashingContext, StableHashingContextProvider};\n \n@@ -46,7 +45,7 @@ impl DepNodeIndex {\n impl std::convert::From<DepNodeIndex> for QueryInvocationId {\n     #[inline]\n     fn from(dep_node_index: DepNodeIndex) -> Self {\n-         QueryInvocationId(dep_node_index.as_u32())\n+        QueryInvocationId(dep_node_index.as_u32())\n     }\n }\n \n@@ -125,10 +124,7 @@ impl DepGraph {\n     }\n \n     pub fn new_disabled() -> DepGraph {\n-        DepGraph {\n-            data: None,\n-            virtual_dep_node_index: Lrc::new(AtomicU32::new(0)),\n-        }\n+        DepGraph { data: None, virtual_dep_node_index: Lrc::new(AtomicU32::new(0)) }\n     }\n \n     /// Returns `true` if we are actually building the full dep-graph, and `false` otherwise."}, {"sha": "3a363c3f824cf756b49491a9115f818786a34c0a", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 31, "deletions": 71, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/83e921d7707891bc68fd9728245f3c975a2a0f98/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e921d7707891bc68fd9728245f3c975a2a0f98/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=83e921d7707891bc68fd9728245f3c975a2a0f98", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir::map::definitions::DefPathData;\n use crate::ty::context::TyCtxt;\n use crate::ty::query::config::QueryConfig;\n use crate::ty::query::plumbing::QueryCache;\n-use measureme::{StringId, StringComponent};\n+use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n use rustc_data_structures::sharded::Sharded;\n@@ -16,9 +16,7 @@ pub struct QueryKeyStringCache {\n \n impl QueryKeyStringCache {\n     pub fn new() -> QueryKeyStringCache {\n-        QueryKeyStringCache {\n-            def_id_cache: Default::default(),\n-        }\n+        QueryKeyStringCache { def_id_cache: Default::default() }\n     }\n }\n \n@@ -29,24 +27,18 @@ pub struct QueryKeyStringBuilder<'p, 'c, 'tcx> {\n }\n \n impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n-\n     pub fn new(\n         profiler: &'p SelfProfiler,\n         tcx: TyCtxt<'tcx>,\n         string_cache: &'c mut QueryKeyStringCache,\n     ) -> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n-        QueryKeyStringBuilder {\n-            profiler,\n-            tcx,\n-            string_cache,\n-        }\n+        QueryKeyStringBuilder { profiler, tcx, string_cache }\n     }\n \n     // The current implementation is rather crude. In the future it might be a\n     // good idea to base this on `ty::print` in order to get nicer and more\n     // efficient query keys.\n     fn def_id_to_string_id(&mut self, def_id: DefId) -> StringId {\n-\n         if let Some(&string_id) = self.string_cache.def_id_cache.get(&def_id) {\n             return string_id;\n         }\n@@ -55,16 +47,11 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n \n         let (parent_string_id, start_index) = match def_key.parent {\n             Some(parent_index) => {\n-                let parent_def_id = DefId {\n-                    index: parent_index,\n-                    krate: def_id.krate,\n-                };\n+                let parent_def_id = DefId { index: parent_index, krate: def_id.krate };\n \n                 (self.def_id_to_string_id(parent_def_id), 0)\n             }\n-            None => {\n-                (StringId::INVALID, 2)\n-            }\n+            None => (StringId::INVALID, 2),\n         };\n \n         let dis_buffer = &mut [0u8; 16];\n@@ -84,12 +71,10 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n                     dis = \"\";\n                     end_index = 3;\n                 } else {\n-                    write!(&mut dis_buffer[..],\n-                           \"[{}]\",\n-                           def_key.disambiguated_data.disambiguator\n-                    ).unwrap();\n+                    write!(&mut dis_buffer[..], \"[{}]\", def_key.disambiguated_data.disambiguator)\n+                        .unwrap();\n                     let end_of_dis = dis_buffer.iter().position(|&c| c == b']').unwrap();\n-                    dis = std::str::from_utf8(&dis_buffer[.. end_of_dis + 1]).unwrap();\n+                    dis = std::str::from_utf8(&dis_buffer[..end_of_dis + 1]).unwrap();\n                     end_index = 4;\n                 }\n             }\n@@ -99,12 +84,10 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n             StringComponent::Ref(parent_string_id),\n             StringComponent::Value(\"::\"),\n             StringComponent::Value(&name[..]),\n-            StringComponent::Value(dis)\n+            StringComponent::Value(dis),\n         ];\n \n-        let string_id = self.profiler.alloc_string(\n-            &components[start_index .. end_index]\n-        );\n+        let string_id = self.profiler.alloc_string(&components[start_index..end_index]);\n \n         self.string_cache.def_id_cache.insert(def_id, string_id);\n \n@@ -113,72 +96,50 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n }\n \n pub trait IntoSelfProfilingString {\n-    fn to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>\n-    ) -> StringId;\n+    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId;\n }\n \n // The default implementation of `IntoSelfProfilingString` just uses `Debug`\n // which is slow and causes lots of duplication of string data.\n // The specialized impls below take care of making the `DefId` case more\n // efficient.\n impl<T: Debug> IntoSelfProfilingString for T {\n-\n     default fn to_self_profile_string(\n         &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n     ) -> StringId {\n         let s = format!(\"{:?}\", self);\n         builder.profiler.alloc_string(&s[..])\n     }\n }\n \n impl IntoSelfProfilingString for DefId {\n-\n-    fn to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>\n-    ) -> StringId {\n+    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId {\n         builder.def_id_to_string_id(*self)\n     }\n }\n \n impl IntoSelfProfilingString for CrateNum {\n-\n-    fn to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>\n-    ) -> StringId {\n-        builder.def_id_to_string_id(DefId {\n-            krate: *self,\n-            index: CRATE_DEF_INDEX,\n-        })\n+    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId {\n+        builder.def_id_to_string_id(DefId { krate: *self, index: CRATE_DEF_INDEX })\n     }\n }\n \n impl IntoSelfProfilingString for DefIndex {\n-\n-    fn to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>\n-    ) -> StringId {\n-        builder.def_id_to_string_id(DefId {\n-            krate: LOCAL_CRATE,\n-            index: *self,\n-        })\n+    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId {\n+        builder.def_id_to_string_id(DefId { krate: LOCAL_CRATE, index: *self })\n     }\n }\n \n impl<T0, T1> IntoSelfProfilingString for (T0, T1)\n-    where T0: IntoSelfProfilingString+Debug,\n-          T1: IntoSelfProfilingString+Debug,\n+where\n+    T0: IntoSelfProfilingString + Debug,\n+    T1: IntoSelfProfilingString + Debug,\n {\n     default fn to_self_profile_string(\n         &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n     ) -> StringId {\n-\n         let val0 = self.0.to_self_profile_string(builder);\n         let val1 = self.1.to_self_profile_string(builder);\n \n@@ -202,16 +163,17 @@ pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, Q>(\n     query_name: &'static str,\n     query_cache: &Sharded<QueryCache<'tcx, Q>>,\n     string_cache: &mut QueryKeyStringCache,\n-) where Q: QueryConfig<'tcx> {\n+) where\n+    Q: QueryConfig<'tcx>,\n+{\n     tcx.prof.with_profiler(|profiler| {\n         let event_id_builder = profiler.event_id_builder();\n \n         // Walk the entire query cache and allocate the appropriate\n         // string representations. Each cache entry is uniquely\n         // identified by its dep_node_index.\n         if profiler.query_key_recording_enabled() {\n-            let mut query_string_builder =\n-                QueryKeyStringBuilder::new(profiler, tcx, string_cache);\n+            let mut query_string_builder = QueryKeyStringBuilder::new(profiler, tcx, string_cache);\n \n             let query_name = profiler.get_or_alloc_cached_string(query_name);\n \n@@ -226,9 +188,9 @@ pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, Q>(\n                 let mut query_keys_and_indices = Vec::with_capacity(len);\n \n                 for shard in &shards {\n-                    query_keys_and_indices.extend(shard.results.iter().map(|(q_key, q_val)| {\n-                        (q_key.clone(), q_val.index)\n-                    }));\n+                    query_keys_and_indices.extend(\n+                        shard.results.iter().map(|(q_key, q_val)| (q_key.clone(), q_val.index)),\n+                    );\n                 }\n \n                 query_keys_and_indices\n@@ -265,10 +227,8 @@ pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, Q>(\n                     .map(|v| v.index)\n                     .map(|dep_node_index| dep_node_index.into());\n \n-                profiler.bulk_map_query_invocation_id_to_single_string(\n-                    query_invocation_ids,\n-                    event_id,\n-                );\n+                profiler\n+                    .bulk_map_query_invocation_id_to_single_string(query_invocation_ids, event_id);\n             }\n         }\n     });"}, {"sha": "93f8b943224a28995ec4294485f29eb9840503ea", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/83e921d7707891bc68fd9728245f3c975a2a0f98/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e921d7707891bc68fd9728245f3c975a2a0f98/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=83e921d7707891bc68fd9728245f3c975a2a0f98", "patch": "@@ -257,11 +257,7 @@ impl SelfProfilerRef {\n         self.exec(EventFilter::GENERIC_ACTIVITIES, |profiler| {\n             let event_id = profiler.get_or_alloc_cached_string(event_id);\n             let event_id = EventId::from_label(event_id);\n-            TimingGuard::start(\n-                profiler,\n-                profiler.generic_activity_event_kind,\n-                event_id\n-            )\n+            TimingGuard::start(profiler, profiler.generic_activity_event_kind, event_id)\n         })\n     }\n \n@@ -290,11 +286,7 @@ impl SelfProfilerRef {\n     #[inline(always)]\n     pub fn query_blocked(&self) -> TimingGuard<'_> {\n         self.exec(EventFilter::QUERY_BLOCKED, |profiler| {\n-            TimingGuard::start(\n-                profiler,\n-                profiler.query_blocked_event_kind,\n-                EventId::INVALID,\n-            )\n+            TimingGuard::start(profiler, profiler.query_blocked_event_kind, EventId::INVALID)\n         })\n     }\n \n@@ -438,7 +430,7 @@ impl SelfProfiler {\n             let string_cache = self.string_cache.read();\n \n             if let Some(&id) = string_cache.get(s) {\n-                return id\n+                return id;\n             }\n         }\n \n@@ -448,21 +440,14 @@ impl SelfProfiler {\n         *string_cache.entry(s).or_insert_with(|| self.profiler.alloc_string(s))\n     }\n \n-    pub fn map_query_invocation_id_to_string(\n-        &self,\n-        from: QueryInvocationId,\n-        to: StringId\n-    ) {\n+    pub fn map_query_invocation_id_to_string(&self, from: QueryInvocationId, to: StringId) {\n         let from = StringId::new_virtual(from.0);\n         self.profiler.map_virtual_to_concrete_string(from, to);\n     }\n \n-    pub fn bulk_map_query_invocation_id_to_single_string<I>(\n-        &self,\n-        from: I,\n-        to: StringId\n-    )\n-        where I: Iterator<Item=QueryInvocationId> + ExactSizeIterator\n+    pub fn bulk_map_query_invocation_id_to_single_string<I>(&self, from: I, to: StringId)\n+    where\n+        I: Iterator<Item = QueryInvocationId> + ExactSizeIterator,\n     {\n         let from = from.map(|qid| StringId::new_virtual(qid.0));\n         self.profiler.bulk_map_virtual_to_single_concrete_string(from, to);"}]}