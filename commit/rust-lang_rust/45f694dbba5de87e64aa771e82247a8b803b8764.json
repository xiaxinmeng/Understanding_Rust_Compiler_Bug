{"sha": "45f694dbba5de87e64aa771e82247a8b803b8764", "node_id": "C_kwDOAAsO6NoAKDQ1ZjY5NGRiYmE1ZGU4N2U2NGFhNzcxZTgyMjQ3YThiODAzYjg3NjQ", "commit": {"author": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2023-03-01T08:20:08Z"}, "committer": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2023-03-01T08:24:13Z"}, "message": "Remove pass initialization code\n\nThis is no longer necessary with the new pass manager.", "tree": {"sha": "614ead942d5a5d116618735768021be097a09c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/614ead942d5a5d116618735768021be097a09c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f694dbba5de87e64aa771e82247a8b803b8764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f694dbba5de87e64aa771e82247a8b803b8764", "html_url": "https://github.com/rust-lang/rust/commit/45f694dbba5de87e64aa771e82247a8b803b8764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f694dbba5de87e64aa771e82247a8b803b8764/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5983a3a99ea631da9d7d1ce510a6761913f92a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5983a3a99ea631da9d7d1ce510a6761913f92a89", "html_url": "https://github.com/rust-lang/rust/commit/5983a3a99ea631da9d7d1ce510a6761913f92a89"}], "stats": {"total": 22, "additions": 0, "deletions": 22}, "files": [{"sha": "e9e48a0f50c791176f78a395dcf283eeb62b5edd", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f694dbba5de87e64aa771e82247a8b803b8764/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f694dbba5de87e64aa771e82247a8b803b8764/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=45f694dbba5de87e64aa771e82247a8b803b8764", "patch": "@@ -1814,8 +1814,6 @@ extern \"C\" {\n     /// Creates a legacy pass manager -- only used for final codegen.\n     pub fn LLVMCreatePassManager<'a>() -> &'a mut PassManager<'a>;\n \n-    pub fn LLVMInitializePasses();\n-\n     pub fn LLVMTimeTraceProfilerInitialize();\n \n     pub fn LLVMTimeTraceProfilerFinishThread();"}, {"sha": "ba58a2e68e91b75b319822783db4b4bef383b832", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f694dbba5de87e64aa771e82247a8b803b8764/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f694dbba5de87e64aa771e82247a8b803b8764/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=45f694dbba5de87e64aa771e82247a8b803b8764", "patch": "@@ -120,8 +120,6 @@ unsafe fn configure_llvm(sess: &Session) {\n         llvm::LLVMTimeTraceProfilerInitialize();\n     }\n \n-    llvm::LLVMInitializePasses();\n-\n     rustc_llvm::initialize_available_targets();\n \n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());"}, {"sha": "d15a15a9a1fc1ad34286b28799e4f83744441382", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45f694dbba5de87e64aa771e82247a8b803b8764/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/45f694dbba5de87e64aa771e82247a8b803b8764/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=45f694dbba5de87e64aa771e82247a8b803b8764", "patch": "@@ -9,7 +9,6 @@\n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n #include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n-#include \"llvm/InitializePasses.h\"\n #include \"llvm/IR/AutoUpgrade.h\"\n #include \"llvm/IR/AssemblyAnnotationWriter.h\"\n #include \"llvm/IR/IntrinsicInst.h\"\n@@ -58,22 +57,6 @@ typedef struct LLVMOpaqueTargetMachine *LLVMTargetMachineRef;\n DEFINE_STDCXX_CONVERSION_FUNCTIONS(Pass, LLVMPassRef)\n DEFINE_STDCXX_CONVERSION_FUNCTIONS(TargetMachine, LLVMTargetMachineRef)\n \n-extern \"C\" void LLVMInitializePasses() {\n-  PassRegistry &Registry = *PassRegistry::getPassRegistry();\n-  initializeCore(Registry);\n-  initializeCodeGen(Registry);\n-  initializeScalarOpts(Registry);\n-  initializeVectorization(Registry);\n-  initializeIPO(Registry);\n-  initializeAnalysis(Registry);\n-  initializeTransformUtils(Registry);\n-  initializeInstCombine(Registry);\n-#if LLVM_VERSION_LT(16, 0)\n-  initializeInstrumentation(Registry);\n-#endif\n-  initializeTarget(Registry);\n-}\n-\n extern \"C\" void LLVMTimeTraceProfilerInitialize() {\n   timeTraceProfilerInitialize(\n       /* TimeTraceGranularity */ 0,\n@@ -1004,7 +987,6 @@ LLVMRustPrintModule(LLVMModuleRef M, const char *Path, DemangleFn Demangle) {\n }\n \n extern \"C\" void LLVMRustPrintPasses() {\n-  LLVMInitializePasses();\n   struct MyListener : PassRegistrationListener {\n     void passEnumerate(const PassInfo *Info) {\n       StringRef PassArg = Info->getPassArgument();"}]}