{"sha": "71b4e2d852be70174579e7e5a96644418348a7da", "node_id": "C_kwDOAAsO6NoAKDcxYjRlMmQ4NTJiZTcwMTc0NTc5ZTdlNWE5NjY0NDQxODM0OGE3ZGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-05T14:26:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-30T11:51:49Z"}, "message": "Box HIR Generics and Impl.", "tree": {"sha": "723592bfb1d152ab0732ae37d4245ace0847b1a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723592bfb1d152ab0732ae37d4245ace0847b1a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b4e2d852be70174579e7e5a96644418348a7da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b4e2d852be70174579e7e5a96644418348a7da", "html_url": "https://github.com/rust-lang/rust/commit/71b4e2d852be70174579e7e5a96644418348a7da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b4e2d852be70174579e7e5a96644418348a7da/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d4862fdd131b6f79dc0a31857f888d26bcdb27", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d4862fdd131b6f79dc0a31857f888d26bcdb27", "html_url": "https://github.com/rust-lang/rust/commit/76d4862fdd131b6f79dc0a31857f888d26bcdb27"}], "stats": {"total": 117, "additions": 61, "deletions": 56}, "files": [{"sha": "7fc53d264a63bee3667393db5715e7a798016565", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -410,7 +410,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     ImplPolarity::Positive => ImplPolarity::Positive,\n                     ImplPolarity::Negative(s) => ImplPolarity::Negative(self.lower_span(s)),\n                 };\n-                hir::ItemKind::Impl(hir::Impl {\n+                hir::ItemKind::Impl(self.arena.alloc(hir::Impl {\n                     unsafety: self.lower_unsafety(unsafety),\n                     polarity,\n                     defaultness,\n@@ -420,7 +420,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     of_trait: trait_ref,\n                     self_ty: lowered_ty,\n                     items: new_impl_items,\n-                })\n+                }))\n             }\n             ItemKind::Trait(box Trait {\n                 is_auto,\n@@ -1226,7 +1226,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         id: NodeId,\n         kind: FnDeclKind,\n         is_async: Option<NodeId>,\n-    ) -> (hir::Generics<'hir>, hir::FnSig<'hir>) {\n+    ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_implicit_generics(generics, id, |this, idty| {\n             this.lower_fn_decl(&sig.decl, Some((id, idty)), kind, is_async)\n@@ -1349,7 +1349,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         generics: &Generics,\n         itctx: ImplTraitContext<'_, 'hir>,\n-    ) -> hir::Generics<'hir> {\n+    ) -> &'hir hir::Generics<'hir> {\n         let generics_ctor = self.lower_generics_mut(generics, itctx);\n         generics_ctor.into_generics(self.arena)\n     }\n@@ -1419,11 +1419,11 @@ pub(super) struct GenericsCtor<'hir> {\n }\n \n impl<'hir> GenericsCtor<'hir> {\n-    pub(super) fn into_generics(self, arena: &'hir Arena<'hir>) -> hir::Generics<'hir> {\n-        hir::Generics {\n+    pub(super) fn into_generics(self, arena: &'hir Arena<'hir>) -> &'hir hir::Generics<'hir> {\n+        arena.alloc(hir::Generics {\n             params: arena.alloc_from_iter(self.params),\n             where_clause: self.where_clause,\n             span: self.span,\n-        }\n+        })\n     }\n }"}, {"sha": "a5e12408087c395610173223534aac9797475641", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -719,7 +719,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         generics: &Generics,\n         parent_node_id: NodeId,\n         f: impl FnOnce(&mut Self, &mut Vec<hir::GenericParam<'hir>>) -> T,\n-    ) -> (hir::Generics<'hir>, T) {\n+    ) -> (&'hir hir::Generics<'hir>, T) {\n         let mut impl_trait_defs = Vec::new();\n         let mut lowered_generics = self.lower_generics_mut(\n             generics,\n@@ -1383,11 +1383,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug!(\"lower_opaque_impl_trait: lifetime_defs={:#?}\", lifetime_defs);\n \n             let opaque_ty_item = hir::OpaqueTy {\n-                generics: hir::Generics {\n+                generics: self.arena.alloc(hir::Generics {\n                     params: lifetime_defs,\n                     where_clause: hir::WhereClause { predicates: &[], span: lctx.lower_span(span) },\n                     span: lctx.lower_span(span),\n-                },\n+                }),\n                 bounds: hir_bounds,\n                 origin,\n             };\n@@ -1715,11 +1715,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug!(\"lower_async_fn_ret_ty: generic_params={:#?}\", generic_params);\n \n             let opaque_ty_item = hir::OpaqueTy {\n-                generics: hir::Generics {\n+                generics: this.arena.alloc(hir::Generics {\n                     params: generic_params,\n                     where_clause: hir::WhereClause { predicates: &[], span: this.lower_span(span) },\n                     span: this.lower_span(span),\n-                },\n+                }),\n                 bounds: arena_vec![this; future_bound],\n                 origin: hir::OpaqueTyOrigin::AsyncFn(fn_def_id),\n             };"}, {"sha": "5d1314ebb488d08bd39fc386d1d3d50921f06393", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -15,11 +15,13 @@ macro_rules! arena_types {\n             [] block: rustc_hir::Block<'tcx>,\n             [] bare_fn_ty: rustc_hir::BareFnTy<'tcx>,\n             [] body: rustc_hir::Body<'tcx>,\n+            [] generics: rustc_hir::Generics<'tcx>,\n             [] generic_arg: rustc_hir::GenericArg<'tcx>,\n             [] generic_args: rustc_hir::GenericArgs<'tcx>,\n             [] generic_bound: rustc_hir::GenericBound<'tcx>,\n             [] generic_param: rustc_hir::GenericParam<'tcx>,\n             [] expr: rustc_hir::Expr<'tcx>,\n+            [] impl_: rustc_hir::Impl<'tcx>,\n             [] let_expr: rustc_hir::Let<'tcx>,\n             [] expr_field: rustc_hir::ExprField<'tcx>,\n             [] pat_field: rustc_hir::PatField<'tcx>,"}, {"sha": "b723312f0943d368196e833c55986c689a0e5a43", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -572,12 +572,13 @@ pub struct Generics<'hir> {\n }\n \n impl<'hir> Generics<'hir> {\n-    pub const fn empty() -> Generics<'hir> {\n-        Generics {\n+    pub const fn empty() -> &'hir Generics<'hir> {\n+        const NOPE: Generics<'_> = Generics {\n             params: &[],\n             where_clause: WhereClause { predicates: &[], span: DUMMY_SP },\n             span: DUMMY_SP,\n-        }\n+        };\n+        &NOPE\n     }\n \n     pub fn get_named(&self, name: Symbol) -> Option<&GenericParam<'_>> {\n@@ -2075,7 +2076,7 @@ impl TraitItemId {\n pub struct TraitItem<'hir> {\n     pub ident: Ident,\n     pub def_id: LocalDefId,\n-    pub generics: Generics<'hir>,\n+    pub generics: &'hir Generics<'hir>,\n     pub kind: TraitItemKind<'hir>,\n     pub span: Span,\n }\n@@ -2135,7 +2136,7 @@ impl ImplItemId {\n pub struct ImplItem<'hir> {\n     pub ident: Ident,\n     pub def_id: LocalDefId,\n-    pub generics: Generics<'hir>,\n+    pub generics: &'hir Generics<'hir>,\n     pub kind: ImplItemKind<'hir>,\n     pub span: Span,\n     pub vis_span: Span,\n@@ -2340,7 +2341,7 @@ pub struct BareFnTy<'hir> {\n \n #[derive(Debug, HashStable_Generic)]\n pub struct OpaqueTy<'hir> {\n-    pub generics: Generics<'hir>,\n+    pub generics: &'hir Generics<'hir>,\n     pub bounds: GenericBounds<'hir>,\n     pub origin: OpaqueTyOrigin,\n }\n@@ -2814,7 +2815,7 @@ pub enum ItemKind<'hir> {\n     /// A `const` item.\n     Const(&'hir Ty<'hir>, BodyId),\n     /// A function declaration.\n-    Fn(FnSig<'hir>, Generics<'hir>, BodyId),\n+    Fn(FnSig<'hir>, &'hir Generics<'hir>, BodyId),\n     /// A MBE macro definition (`macro_rules!` or `macro`).\n     Macro(ast::MacroDef, MacroKind),\n     /// A module.\n@@ -2824,22 +2825,22 @@ pub enum ItemKind<'hir> {\n     /// Module-level inline assembly (from `global_asm!`).\n     GlobalAsm(&'hir InlineAsm<'hir>),\n     /// A type alias, e.g., `type Foo = Bar<u8>`.\n-    TyAlias(&'hir Ty<'hir>, Generics<'hir>),\n+    TyAlias(&'hir Ty<'hir>, &'hir Generics<'hir>),\n     /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`.\n     OpaqueTy(OpaqueTy<'hir>),\n     /// An enum definition, e.g., `enum Foo<A, B> {C<A>, D<B>}`.\n-    Enum(EnumDef<'hir>, Generics<'hir>),\n+    Enum(EnumDef<'hir>, &'hir Generics<'hir>),\n     /// A struct definition, e.g., `struct Foo<A> {x: A}`.\n-    Struct(VariantData<'hir>, Generics<'hir>),\n+    Struct(VariantData<'hir>, &'hir Generics<'hir>),\n     /// A union definition, e.g., `union Foo<A, B> {x: A, y: B}`.\n-    Union(VariantData<'hir>, Generics<'hir>),\n+    Union(VariantData<'hir>, &'hir Generics<'hir>),\n     /// A trait definition.\n-    Trait(IsAuto, Unsafety, Generics<'hir>, GenericBounds<'hir>, &'hir [TraitItemRef]),\n+    Trait(IsAuto, Unsafety, &'hir Generics<'hir>, GenericBounds<'hir>, &'hir [TraitItemRef]),\n     /// A trait alias.\n-    TraitAlias(Generics<'hir>, GenericBounds<'hir>),\n+    TraitAlias(&'hir Generics<'hir>, GenericBounds<'hir>),\n \n     /// An implementation, e.g., `impl<A> Trait for Foo { .. }`.\n-    Impl(Impl<'hir>),\n+    Impl(&'hir Impl<'hir>),\n }\n \n #[derive(Debug, HashStable_Generic)]\n@@ -2851,7 +2852,7 @@ pub struct Impl<'hir> {\n     // decoding as `Span`s cannot be decoded when a `Session` is not available.\n     pub defaultness_span: Option<Span>,\n     pub constness: Constness,\n-    pub generics: Generics<'hir>,\n+    pub generics: &'hir Generics<'hir>,\n \n     /// The trait being implemented, if any.\n     pub of_trait: Option<TraitRef<'hir>>,\n@@ -2993,7 +2994,7 @@ impl ForeignItem<'_> {\n #[derive(Debug, HashStable_Generic)]\n pub enum ForeignItemKind<'hir> {\n     /// A foreign function.\n-    Fn(&'hir FnDecl<'hir>, &'hir [Ident], Generics<'hir>),\n+    Fn(&'hir FnDecl<'hir>, &'hir [Ident], &'hir Generics<'hir>),\n     /// A foreign static item (`static ext: u8`).\n     Static(&'hir Ty<'hir>, Mutability),\n     /// A foreign type.\n@@ -3326,9 +3327,11 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);\n     rustc_data_structures::static_assert_size!(super::GenericBound<'_>, 48);\n+    rustc_data_structures::static_assert_size!(super::Generics<'static>, 48);\n+    rustc_data_structures::static_assert_size!(super::Impl<'static>, 80);\n \n-    rustc_data_structures::static_assert_size!(super::Item<'static>, 160);\n-    rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);\n-    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 120);\n-    rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 112);\n+    rustc_data_structures::static_assert_size!(super::Item<'static>, 80);\n+    rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 88);\n+    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 80);\n+    rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 72);\n }"}, {"sha": "002fa607416e069c28406ef32f5e7cff7b7b2696", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -619,7 +619,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_trait_ref, of_trait);\n             visitor.visit_ty(self_ty);\n-            walk_list!(visitor, visit_impl_item_ref, items);\n+            walk_list!(visitor, visit_impl_item_ref, *items);\n         }\n         ItemKind::Struct(ref struct_definition, ref generics)\n         | ItemKind::Union(ref struct_definition, ref generics) => {"}, {"sha": "3978579c60be34950aa5bd8fb36cb70e715e3f8a", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -626,16 +626,16 @@ impl<'a> State<'a> {\n                 items,\n             }) => {\n                 self.head(\"\");\n-                self.print_defaultness(defaultness);\n-                self.print_unsafety(unsafety);\n+                self.print_defaultness(*defaultness);\n+                self.print_unsafety(*unsafety);\n                 self.word_nbsp(\"impl\");\n \n                 if !generics.params.is_empty() {\n                     self.print_generic_params(&generics.params);\n                     self.space();\n                 }\n \n-                if constness == hir::Constness::Const {\n+                if *constness == hir::Constness::Const {\n                     self.word_nbsp(\"const\");\n                 }\n \n@@ -655,7 +655,7 @@ impl<'a> State<'a> {\n                 self.space();\n                 self.bopen();\n                 self.print_inner_attributes(attrs);\n-                for impl_item in items {\n+                for impl_item in *items {\n                     self.ann.nested(self, Nested::ImplItem(impl_item.id));\n                 }\n                 self.bclose(item.span);"}, {"sha": "e097ab9d7fdfd9a56067989a30955351d31cb267", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -1199,8 +1199,8 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                     });\n                 }\n             }\n-            hir::ItemKind::Impl(hir::Impl { ref generics, items, .. }) => {\n-                for it in items {\n+            hir::ItemKind::Impl(hir::Impl { generics, items, .. }) => {\n+                for it in *items {\n                     if let hir::AssocItemKind::Fn { .. } = it.kind {\n                         if let Some(no_mangle_attr) = cx\n                             .sess()"}, {"sha": "b46ea955a3a82541fd44e6795c6ca88bc67d6dc3", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -1462,8 +1462,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 }))\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n-                self.tables.impl_defaultness.set(def_id.index, defaultness);\n-                self.tables.impl_constness.set(def_id.index, constness);\n+                self.tables.impl_defaultness.set(def_id.index, *defaultness);\n+                self.tables.impl_constness.set(def_id.index, *constness);\n \n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {"}, {"sha": "3cd183902855491a0163d4338651a2d0ff047107", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -512,7 +512,7 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'tcx> {\n                 if of_trait.is_some() {\n                     self.worklist.push(item.def_id);\n                 }\n-                for impl_item_ref in items {\n+                for impl_item_ref in *items {\n                     let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                     if of_trait.is_some()\n                         || has_allow_dead_code_or_lang_attr(self.tcx, impl_item.hir_id())"}, {"sha": "10dc587be6e48a9304ba5e18c746e7864b820b63", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -737,7 +737,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                     }\n                 }\n \n-                for impl_item_ref in items {\n+                for impl_item_ref in *items {\n                     let impl_item = self.tcx.associated_item(impl_item_ref.id.def_id);\n \n                     if let Some(def_id) = impl_item.trait_item_def_id {"}, {"sha": "a5243bf8ac3f8ee86f4703e73713487cc9bc063f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -86,7 +86,7 @@ impl ForLifetimeSpanType {\n     }\n }\n \n-impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n+impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &&'tcx hir::Generics<'tcx> {\n     fn into(self) -> MissingLifetimeSpot<'tcx> {\n         MissingLifetimeSpot::Generics(self)\n     }"}, {"sha": "e36eebcf93188c311991652a08501b022bef9a8e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -2200,16 +2200,16 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n     let icx = ItemCtxt::new(tcx, def_id);\n \n-    const NO_GENERICS: &hir::Generics<'_> = &hir::Generics::empty();\n+    const NO_GENERICS: &hir::Generics<'_> = hir::Generics::empty();\n \n     // We use an `IndexSet` to preserves order of insertion.\n     // Preserving the order of insertion is important here so as not to break UI tests.\n     let mut predicates: FxIndexSet<(ty::Predicate<'_>, Span)> = FxIndexSet::default();\n \n     let ast_generics = match node {\n-        Node::TraitItem(item) => &item.generics,\n+        Node::TraitItem(item) => item.generics,\n \n-        Node::ImplItem(item) => &item.generics,\n+        Node::ImplItem(item) => item.generics,\n \n         Node::Item(item) => {\n             match item.kind {\n@@ -2223,15 +2223,15 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 | ItemKind::TyAlias(_, ref generics)\n                 | ItemKind::Enum(_, ref generics)\n                 | ItemKind::Struct(_, ref generics)\n-                | ItemKind::Union(_, ref generics) => generics,\n+                | ItemKind::Union(_, ref generics) => *generics,\n \n                 ItemKind::Trait(_, _, ref generics, ..) => {\n                     is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n-                    generics\n+                    *generics\n                 }\n                 ItemKind::TraitAlias(ref generics, _) => {\n                     is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n-                    generics\n+                    *generics\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy {\n                     origin: hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..),\n@@ -2268,7 +2268,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n         Node::ForeignItem(item) => match item.kind {\n             ForeignItemKind::Static(..) => NO_GENERICS,\n-            ForeignItemKind::Fn(_, _, ref generics) => generics,\n+            ForeignItemKind::Fn(_, _, ref generics) => *generics,\n             ForeignItemKind::Type => NO_GENERICS,\n         },\n "}, {"sha": "495b8d3b4eeb38470a3a3976f35884d56d658f29", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -337,8 +337,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         icx.to_ty(ty)\n                     }\n                 }\n-                ItemKind::TyAlias(self_ty, _)\n-                | ItemKind::Impl(hir::Impl { self_ty, .. }) => icx.to_ty(self_ty),\n+                ItemKind::TyAlias(self_ty, _) => icx.to_ty(self_ty),\n+                ItemKind::Impl(hir::Impl { self_ty, .. }) => icx.to_ty(*self_ty),\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_fn_def(def_id.to_def_id(), substs)"}, {"sha": "96c00c205ff2e9401e0589e1a9786fb47c2c2356", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n             ..\n         }) = item.kind\n         {\n-            for assoc_item in items {\n+            for assoc_item in *items {\n                 if assoc_item.kind == (hir::AssocItemKind::Fn { has_self: false }) {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);\n                     if in_external_macro(cx.sess(), impl_item.span) {"}, {"sha": "1469cb434c00c07dfeb0190d14c5527bf5e96c25", "filename": "src/tools/clippy/clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {\n-                for impl_item in impl_items {\n+                for impl_item in *impl_items {\n                     if impl_item.ident.name == sym::ne {\n                         span_lint_hir(\n                             cx,"}, {"sha": "fc1c2af9257bf98484d807b775a7a2da416a56e2", "filename": "src/tools/clippy/clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b4e2d852be70174579e7e5a96644418348a7da/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b4e2d852be70174579e7e5a96644418348a7da/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs?ref=71b4e2d852be70174579e7e5a96644418348a7da", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> LateLintPass<'tcx> for SerdeApi {\n                 if did == visit_did {\n                     let mut seen_str = None;\n                     let mut seen_string = None;\n-                    for item in items {\n+                    for item in *items {\n                         match item.ident.as_str() {\n                             \"visit_str\" => seen_str = Some(item.span),\n                             \"visit_string\" => seen_string = Some(item.span),"}]}