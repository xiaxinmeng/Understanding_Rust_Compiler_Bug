{"sha": "ba1b5ee1d19de24d311335d3735e5100b47c2cf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMWI1ZWUxZDE5ZGUyNGQzMTEzMzVkMzczNWU1MTAwYjQ3YzJjZjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-23T20:00:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-04T20:05:52Z"}, "message": "Simplify impl of Elaborator now that we don't need stack traces anymore.", "tree": {"sha": "0e80bb5bebfc74c8683d1eae549f86a5774fd237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e80bb5bebfc74c8683d1eae549f86a5774fd237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba1b5ee1d19de24d311335d3735e5100b47c2cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1b5ee1d19de24d311335d3735e5100b47c2cf6", "html_url": "https://github.com/rust-lang/rust/commit/ba1b5ee1d19de24d311335d3735e5100b47c2cf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba1b5ee1d19de24d311335d3735e5100b47c2cf6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b3bb0e682c2d252e9f62dd9df5cff9552af91ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3bb0e682c2d252e9f62dd9df5cff9552af91ad", "html_url": "https://github.com/rust-lang/rust/commit/3b3bb0e682c2d252e9f62dd9df5cff9552af91ad"}], "stats": {"total": 56, "additions": 12, "deletions": 44}, "files": [{"sha": "1264d92143f4de45412781032af2ddbb679fa64e", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 12, "deletions": 44, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ba1b5ee1d19de24d311335d3735e5100b47c2cf6/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1b5ee1d19de24d311335d3735e5100b47c2cf6/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=ba1b5ee1d19de24d311335d3735e5100b47c2cf6", "patch": "@@ -76,15 +76,10 @@ impl<'a,'tcx> PredicateSet<'a,'tcx> {\n /// 'static`.\n pub struct Elaborator<'cx, 'tcx:'cx> {\n     tcx: &'cx ty::ctxt<'tcx>,\n-    stack: Vec<StackEntry<'tcx>>,\n+    stack: Vec<ty::Predicate<'tcx>>,\n     visited: PredicateSet<'cx,'tcx>,\n }\n \n-struct StackEntry<'tcx> {\n-    position: uint,\n-    predicates: Vec<ty::Predicate<'tcx>>,\n-}\n-\n pub fn elaborate_trait_ref<'cx, 'tcx>(\n     tcx: &'cx ty::ctxt<'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n@@ -111,8 +106,7 @@ pub fn elaborate_predicates<'cx, 'tcx>(\n {\n     let mut visited = PredicateSet::new(tcx);\n     predicates.retain(|pred| visited.insert(pred));\n-    let entry = StackEntry { position: 0, predicates: predicates };\n-    Elaborator { tcx: tcx, stack: vec![entry], visited: visited }\n+    Elaborator { tcx: tcx, stack: predicates, visited: visited }\n }\n \n impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n@@ -134,8 +128,7 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n                 // Sized { }`.\n                 predicates.retain(|r| self.visited.insert(r));\n \n-                self.stack.push(StackEntry { position: 0,\n-                                             predicates: predicates });\n+                self.stack.extend(predicates.into_iter());\n             }\n             ty::Predicate::Equate(..) => {\n                 // Currently, we do not \"elaborate\" predicates like\n@@ -175,41 +168,16 @@ impl<'cx, 'tcx> Iterator for Elaborator<'cx, 'tcx> {\n     type Item = ty::Predicate<'tcx>;\n \n     fn next(&mut self) -> Option<ty::Predicate<'tcx>> {\n-        loop {\n-            // Extract next item from top-most stack frame, if any.\n-            let next_predicate = match self.stack.last_mut() {\n-                None => {\n-                    // No more stack frames. Done.\n-                    return None;\n-                }\n-                Some(entry) => {\n-                    let p = entry.position;\n-                    if p < entry.predicates.len() {\n-                        // Still more predicates left in the top stack frame.\n-                        entry.position += 1;\n-\n-                        let next_predicate =\n-                            entry.predicates[p].clone();\n-\n-                        Some(next_predicate)\n-                    } else {\n-                        None\n-                    }\n-                }\n-            };\n-\n-            match next_predicate {\n-                Some(next_predicate) => {\n-                    self.push(&next_predicate);\n-                    return Some(next_predicate);\n-                }\n-\n-                None => {\n-                    // Top stack frame is exhausted, pop it.\n-                    self.stack.pop();\n-                }\n+        // Extract next item from top-most stack frame, if any.\n+        let next_predicate = match self.stack.pop() {\n+            Some(predicate) => predicate,\n+            None => {\n+                // No more stack frames. Done.\n+                return None;\n             }\n-        }\n+        };\n+        self.push(&next_predicate);\n+        return Some(next_predicate);\n     }\n }\n "}]}