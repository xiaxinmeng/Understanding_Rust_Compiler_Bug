{"sha": "7945dcdfdcbd5ad9ce798339409e48d814a06787", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDVkY2RmZGNiZDVhZDljZTc5ODMzOTQwOWU0OGQ4MTRhMDY3ODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T18:03:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-05T18:03:17Z"}, "message": "Rollup merge of #67011 - Aaron1011:fix/expected-found-span, r=Dylan-DPC\n\nInclude a span in more `expected...found` notes\n\nIn most places, we use a span when emitting `expected...found` errors.\nHowever, there were a couple of places where we didn't use any span,\nresulting in hard-to-interpret error messages.\n\nThis commit attaches the relevant span to these notes, and additionally\nswitches over to using `note_expected_found` instead of manually\nformatting the message", "tree": {"sha": "b67472bd22bc5809eac0a75c4872e93a8d5f4701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67472bd22bc5809eac0a75c4872e93a8d5f4701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7945dcdfdcbd5ad9ce798339409e48d814a06787", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6UZlCRBK7hj4Ov3rIwAAdHIIAKKZ7tg7NnGgC+r9xGhebecf\nHm/1TJdgKKXGsooywWxym/ryxiSzA61U1dBkVQ1hNDzPFhIq28WqC4VA/Uku0aqp\nvuVfI8ZA3Acefjo/pZpsdxJXw0Kjqyf2bLNOOPRS0d5vCFG3e4s/uiU76Wtyk+Dh\nGo8Sxx+AcU7AYwo6Ec/POEFfLcyQT4SrxvESbWYTYPzG/CFUvgpR9DvgiH6EglaY\nReK4O2wvjdB3vnzE0HEErWVdcyt0K+Lfp2LwGk5UYfgXQasuyeOAtd3dYNQ7gFlq\ntnIbFrQnQWS7Ay6fnoPg6zlb/QxOmwMZuNJXPbnSD9qidL6MtzUdq0nS9j5qyuE=\n=zwz7\n-----END PGP SIGNATURE-----\n", "payload": "tree b67472bd22bc5809eac0a75c4872e93a8d5f4701\nparent 8e6cf861e5e1b558b6a03dd0eaabc15b37570063\nparent 168e35d56935b265d9c3ce767430f40ed7448d05\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575568997 +0100\ncommitter GitHub <noreply@github.com> 1575568997 +0100\n\nRollup merge of #67011 - Aaron1011:fix/expected-found-span, r=Dylan-DPC\n\nInclude a span in more `expected...found` notes\n\nIn most places, we use a span when emitting `expected...found` errors.\nHowever, there were a couple of places where we didn't use any span,\nresulting in hard-to-interpret error messages.\n\nThis commit attaches the relevant span to these notes, and additionally\nswitches over to using `note_expected_found` instead of manually\nformatting the message\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7945dcdfdcbd5ad9ce798339409e48d814a06787", "html_url": "https://github.com/rust-lang/rust/commit/7945dcdfdcbd5ad9ce798339409e48d814a06787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7945dcdfdcbd5ad9ce798339409e48d814a06787/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6cf861e5e1b558b6a03dd0eaabc15b37570063", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6cf861e5e1b558b6a03dd0eaabc15b37570063", "html_url": "https://github.com/rust-lang/rust/commit/8e6cf861e5e1b558b6a03dd0eaabc15b37570063"}, {"sha": "168e35d56935b265d9c3ce767430f40ed7448d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/168e35d56935b265d9c3ce767430f40ed7448d05", "html_url": "https://github.com/rust-lang/rust/commit/168e35d56935b265d9c3ce767430f40ed7448d05"}], "stats": {"total": 459, "additions": 325, "deletions": 134}, "files": [{"sha": "58c1498faa9dedbe017a69f05f810dcb2af0a3b0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -1809,12 +1809,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             sub_region,\n                             \"...\",\n                         );\n-                        err.note(&format!(\n-                            \"...so that the {}:\\nexpected {}\\n   found {}\",\n-                            sup_trace.cause.as_requirement_str(),\n-                            sup_expected.content(),\n-                            sup_found.content()\n+                        err.span_note(sup_trace.cause.span, &format!(\n+                            \"...so that the {}\",\n+                            sup_trace.cause.as_requirement_str()\n                         ));\n+\n+                        err.note_expected_found(\n+                            &\"\",\n+                            sup_expected,\n+                            &\"\",\n+                            sup_found\n+                        );\n                         err.emit();\n                         return;\n                     }"}, {"sha": "4b933735fc75f4eb472869de845881a0b0750c20", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -13,12 +13,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match *origin {\n             infer::Subtype(ref trace) => {\n                 if let Some((expected, found)) = self.values_str(&trace.values) {\n-                    let expected = expected.content();\n-                    let found = found.content();\n-                    err.note(&format!(\"...so that the {}:\\nexpected {}\\n   found {}\",\n-                                      trace.cause.as_requirement_str(),\n-                                      expected,\n-                                      found));\n+                    err.span_note(\n+                        trace.cause.span,\n+                        &format!(\n+                            \"...so that the {}\",\n+                            trace.cause.as_requirement_str()\n+                        )\n+                    );\n+\n+                    err.note_expected_found(\n+                        &\"\",\n+                        expected,\n+                        &\"\",\n+                        found\n+                    );\n                 } else {\n                     // FIXME: this really should be handled at some earlier stage. Our\n                     // handling of region checking when type errors are present is"}, {"sha": "3e39c8a7924467918d8b96c642199c002f5c61b1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,13 +9,21 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n    |        ^^\n-   = note: ...so that the expression is assignable:\n-           expected Type<'_>\n-              found Type<'a>\n+note: ...so that the expression is assignable\n+  --> $DIR/project-fn-ret-invariant.rs:48:13\n+   |\n+LL |    bar(foo, x)\n+   |             ^\n+   = note: expected  `Type<'_>`\n+              found  `Type<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected Type<'static>\n-              found Type<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/project-fn-ret-invariant.rs:48:4\n+   |\n+LL |    bar(foo, x)\n+   |    ^^^^^^^^^^^\n+   = note: expected  `Type<'static>`\n+              found  `Type<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "cd4cd8b198de8b4ee3ad4d8dc4864397589260d6", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -49,9 +49,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     let _ = ap.with_copy(|ap| { ap });\n    |                          ^^^^^^^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected core::ffi::VaList<'_, '_>\n-              found core::ffi::VaList<'_, '_>\n+note: ...so that the expression is assignable\n+  --> $DIR/variadic-ffi-4.rs:16:33\n+   |\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |                                 ^^\n+   = note: expected  `core::ffi::VaList<'_, '_>`\n+              found  `core::ffi::VaList<'_, '_>`\n note: but, the lifetime must be valid for the method call at 16:13...\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |"}, {"sha": "3300293bb36caf2e8822d7b89b53f472c5b0cdd4", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,13 +9,21 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                          ^^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<dyn std::fmt::Debug>\n-              found std::boxed::Box<(dyn std::fmt::Debug + 'a)>\n+note: ...so that the expression is assignable\n+  --> $DIR/dyn-trait.rs:20:16\n+   |\n+LL |     static_val(x);\n+   |                ^\n+   = note: expected  `std::boxed::Box<dyn std::fmt::Debug>`\n+              found  `std::boxed::Box<(dyn std::fmt::Debug + 'a)>`\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected StaticTrait\n-              found StaticTrait\n+note: ...so that the types are compatible\n+  --> $DIR/dyn-trait.rs:20:5\n+   |\n+LL |     static_val(x);\n+   |     ^^^^^^^^^^\n+   = note: expected  `StaticTrait`\n+              found  `StaticTrait`\n \n error: aborting due to previous error\n "}, {"sha": "99700f2084e4a23aa6d159b7b1e83724dfcf2521", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -21,9 +21,13 @@ note: but, the lifetime must be valid for the lifetime `'a` as defined on the tr\n    |\n LL | trait T<'a> {\n    |         ^^\n-   = note: ...so that the types are compatible:\n-           expected &'a Self\n-              found &Self\n+note: ...so that the types are compatible\n+  --> $DIR/issue-16683.rs:4:14\n+   |\n+LL |         self.a();\n+   |              ^\n+   = note: expected  `&'a Self`\n+              found  `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "adfc3f5085826b020f35e2bc688eec204833b4a3", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -22,9 +22,13 @@ note: but, the lifetime must be valid for the lifetime `'a` as defined on the tr\n    |\n LL | trait Foo<'a> {\n    |           ^^\n-   = note: ...so that the types are compatible:\n-           expected &'a Self\n-              found &Self\n+note: ...so that the types are compatible\n+  --> $DIR/issue-17758.rs:7:14\n+   |\n+LL |         self.foo();\n+   |              ^^^\n+   = note: expected  `&'a Self`\n+              found  `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "c7fd134a129decdd7352545c9946fd7fedb4a70d", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -88,9 +88,19 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n    |\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Publisher<'_>\n-              found Publisher<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/issue-20831-debruijn.rs:28:5\n+   |\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | |         // Not obvious, but there is an implicit lifetime here -------^\n+LL | |\n+LL | |\n+...  |\n+LL | |         self.sub = t;\n+LL | |     }\n+   | |_____^\n+   = note: expected  `Publisher<'_>`\n+              found  `Publisher<'_>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a8960f7756367c6fecfa173ebec89a4ee5b2abc5", "filename": "src/test/ui/issues/issue-52213.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       ^^\n-   = note: ...so that the types are compatible:\n-           expected (&&(T,),)\n-              found (&&'a (T,),)\n+note: ...so that the types are compatible\n+  --> $DIR/issue-52213.rs:2:11\n+   |\n+LL |     match (&t,) {\n+   |           ^^^^^\n+   = note: expected  `(&&(T,),)`\n+              found  `(&&'a (T,),)`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 1:27...\n   --> $DIR/issue-52213.rs:1:27\n    |"}, {"sha": "b8cafdc5c14b5e8a89a2bd6aab63f2a2a19aea0c", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -15,9 +15,13 @@ note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closu\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>\n+note: ...so that the expression is assignable\n+  --> $DIR/issue-55796.rs:16:9\n+   |\n+LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-55796.rs:21:9\n@@ -36,9 +40,13 @@ note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closu\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>\n+note: ...so that the expression is assignable\n+  --> $DIR/issue-55796.rs:21:9\n+   |\n+LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "69a6ab004fd915ae014acfc5c238a9b124e9a079", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -21,9 +21,13 @@ note: but, the lifetime must be valid for the lifetime `'_` as defined on the im\n    |\n LL | impl Foo<'_> {\n    |          ^^\n-   = note: ...so that the expression is assignable:\n-           expected Foo<'_>\n-              found Foo<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/issue-55394.rs:9:9\n+   |\n+LL |         Foo { bar }\n+   |         ^^^^^^^^^^^\n+   = note: expected  `Foo<'_>`\n+              found  `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "58f206742f4f57b71192cf9742d22d9a78e852ac", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -14,9 +14,13 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |                  ^^\n-   = note: ...so that the types are compatible:\n-           expected Visitor<'d>\n-              found Visitor<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/normalization-bounds-error.rs:12:1\n+   |\n+LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `Visitor<'d>`\n+              found  `Visitor<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "5191deca281ccea48c667a48ef0fff5475b84c94", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -11,17 +11,25 @@ LL | /     fn from_box(b: Box<B>) -> Self {\n LL | |         C { f: b }\n LL | |     }\n    | |_____^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<std::boxed::Box<&isize>>\n-              found std::boxed::Box<std::boxed::Box<&isize>>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:17:16\n+   |\n+LL |         C { f: b }\n+   |                ^\n+   = note: expected  `std::boxed::Box<std::boxed::Box<&isize>>`\n+              found  `std::boxed::Box<std::boxed::Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n   --> $DIR/type-alias-free-regions.rs:15:6\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected C<'a>\n-              found C<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:17:9\n+   |\n+LL |         C { f: b }\n+   |         ^^^^^^^^^^\n+   = note: expected  `C<'a>`\n+              found  `C<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/type-alias-free-regions.rs:27:16\n@@ -36,17 +44,25 @@ LL | /     fn from_tuple(b: (B,)) -> Self {\n LL | |         C { f: Box::new(b.0) }\n LL | |     }\n    | |_____^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<&isize>\n-              found std::boxed::Box<&isize>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:27:25\n+   |\n+LL |         C { f: Box::new(b.0) }\n+   |                         ^^^\n+   = note: expected  `std::boxed::Box<&isize>`\n+              found  `std::boxed::Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n   --> $DIR/type-alias-free-regions.rs:25:6\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected C<'a>\n-              found C<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:27:9\n+   |\n+LL |         C { f: Box::new(b.0) }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `C<'a>`\n+              found  `C<'_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "37be450fd0a791aedab7a58226feefb4c3d1827c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'_>\n-              found Foo<'a>\n+note: ...so that the types are compatible\n+  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+   |\n+LL |     <Foo<'a>>::C\n+   |     ^^^^^^^^^^^^\n+   = note: expected  `Foo<'_>`\n+              found  `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-inherent-1.rs:8:5"}, {"sha": "4ee32847c5ec8555771612d5f29545ef8b7bfa78", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'_>\n-              found Foo<'a>\n+note: ...so that the types are compatible\n+  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+   |\n+LL |     T::C\n+   |     ^^^^\n+   = note: expected  `Foo<'_>`\n+              found  `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-trait-item-3.rs:10:5"}, {"sha": "1952ee8269d5b1a912d005b8c5170287d3723ef4", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -19,9 +19,13 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |             ^^\n-   = note: ...so that the expression is assignable:\n-           expected &'b (dyn SomeTrait + 'b)\n-              found &dyn SomeTrait\n+note: ...so that the expression is assignable\n+  --> $DIR/object-lifetime-default-elision.rs:71:5\n+   |\n+LL |     ss\n+   |     ^^\n+   = note: expected  `&'b (dyn SomeTrait + 'b)`\n+              found  `&dyn SomeTrait`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/object-lifetime-default-elision.rs:71:5\n@@ -44,9 +48,13 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |             ^^\n-   = note: ...so that the expression is assignable:\n-           expected &'b (dyn SomeTrait + 'b)\n-              found &dyn SomeTrait\n+note: ...so that the expression is assignable\n+  --> $DIR/object-lifetime-default-elision.rs:71:5\n+   |\n+LL |     ss\n+   |     ^^\n+   = note: expected  `&'b (dyn SomeTrait + 'b)`\n+              found  `&dyn SomeTrait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e889651647034ec245574e92fda12d8792b16d8f", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -34,17 +34,25 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected &[u8]\n-              found &'a [u8]\n+note: ...so that the expression is assignable\n+  --> $DIR/region-object-lifetime-in-coercion.rs:26:14\n+   |\n+LL |     Box::new(v)\n+   |              ^\n+   = note: expected  `&[u8]`\n+              found  `&'a [u8]`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |         ^^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn Foo + 'b)>\n-              found std::boxed::Box<dyn Foo>\n+note: ...so that the expression is assignable\n+  --> $DIR/region-object-lifetime-in-coercion.rs:26:5\n+   |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn Foo + 'b)>`\n+              found  `std::boxed::Box<dyn Foo>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "865e967fba32e963b3e0dbdb3007de5a3f67e36a", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the imp\n    |\n LL | impl<'a> Foo<'static> for &'a i32 {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'static>\n-              found Foo<'static>\n+note: ...so that the types are compatible\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n+   |\n+LL | impl<'a> Foo<'static> for &'a i32 {\n+   |          ^^^^^^^^^^^^\n+   = note: expected  `Foo<'static>`\n+              found  `Foo<'static>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n@@ -30,9 +34,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the imp\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'b>\n-              found Foo<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:13\n+   |\n+LL | impl<'a,'b> Foo<'b> for &'a i64 {\n+   |             ^^^^^^^\n+   = note: expected  `Foo<'b>`\n+              found  `Foo<'_>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 19:9...\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:9\n    |"}, {"sha": "6a34871c07efdfdfeb8075d6dcb3f856ee2a3f1f", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the imp\n    |\n LL | impl<'a> Foo for &'a i32 {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo\n-              found Foo\n+note: ...so that the types are compatible\n+  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10\n+   |\n+LL | impl<'a> Foo for &'a i32 {\n+   |          ^^^\n+   = note: expected  `Foo`\n+              found  `Foo`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10"}, {"sha": "28873ab807f8d7bcff4eb1068232875e7384a14b", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -15,9 +15,13 @@ note: ...so that the type `(dyn A<T> + 'a)` is not borrowed for too long\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn X + 'static)>\n-              found std::boxed::Box<dyn X>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n+              found  `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "449a5b5fdd4d654c69ebcd8e2314284674ce09fa", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -15,9 +15,13 @@ note: ...so that the type `(dyn A<U> + 'a)` is not borrowed for too long\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn X + 'static)>\n-              found std::boxed::Box<dyn X>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n+              found  `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "b2a7afaf1b452ff3f37257a031dd4a81b5ff6df2", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -19,9 +19,13 @@ note: but, the lifetime must be valid for the lifetime `'c` as defined on the fu\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n    |                          ^^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn SomeTrait + 'c)>\n-              found std::boxed::Box<dyn SomeTrait>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n+   |\n+LL |     box v as Box<dyn SomeTrait + 'a>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn SomeTrait + 'c)>`\n+              found  `std::boxed::Box<dyn SomeTrait>`\n \n error: aborting due to previous error\n "}, {"sha": "58f74e4ee142d67f412634030199e04cc90ba3d6", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,17 +9,25 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                ^^\n-   = note: ...so that the expression is assignable:\n-           expected &Ast<'_>\n-              found &Ast<'a>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-creating-enums4.rs:7:14\n+   |\n+LL |     Ast::Add(x, y)\n+   |              ^\n+   = note: expected  `&Ast<'_>`\n+              found  `&Ast<'a>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 6:19...\n   --> $DIR/regions-creating-enums4.rs:6:19\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                   ^^\n-   = note: ...so that the expression is assignable:\n-           expected Ast<'b>\n-              found Ast<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-creating-enums4.rs:7:5\n+   |\n+LL |     Ast::Add(x, y)\n+   |     ^^^^^^^^^^^^^^\n+   = note: expected  `Ast<'b>`\n+              found  `Ast<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "ffc2a259485aa77afb467fbc07a36520a7836553", "filename": "src/test/ui/regions/regions-escape-method.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     s.f(|p| p)\n    |         ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &i32\n-              found &i32\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-escape-method.rs:15:13\n+   |\n+LL |     s.f(|p| p)\n+   |             ^\n+   = note: expected  `&i32`\n+              found  `&i32`\n note: but, the lifetime must be valid for the method call at 15:5...\n   --> $DIR/regions-escape-method.rs:15:5\n    |"}, {"sha": "90823464c56d26ee8fef1219cda652aa071a9c33", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &isize\n-              found &isize\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-escape-via-trait-or-not.rs:18:14\n+   |\n+LL |     with(|o| o)\n+   |              ^\n+   = note: expected  `&isize`\n+              found  `&isize`\n note: but, the lifetime must be valid for the expression at 18:5...\n   --> $DIR/regions-escape-via-trait-or-not.rs:18:5\n    |"}, {"sha": "8fce1609d78305d64d441dac01685f33e7b1dfeb", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -29,9 +29,18 @@ LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n-   = note: ...so that the types are compatible:\n-           expected &isize\n-              found &isize\n+note: ...so that the types are compatible\n+  --> $DIR/regions-nested-fns.rs:13:76\n+   |\n+LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+   |  ____________________________________________________________________________^\n+LL | |         if false { return x; }\n+LL | |         if false { return ay; }\n+LL | |         return z;\n+LL | |     }));\n+   | |_____^\n+   = note: expected  `&isize`\n+              found  `&isize`\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n   --> $DIR/regions-nested-fns.rs:14:27"}, {"sha": "8a600d2a1e6955166e78ccdf17a3f424abbf2790", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -17,9 +17,16 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined on\n    |\n LL | fn bar<'a, 'b>()\n    |            ^^\n-   = note: ...so that the types are compatible:\n-           expected Project<'a, 'b>\n-              found Project<'_, '_>\n+note: ...so that the types are compatible\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+   |\n+LL | / fn bar<'a, 'b>()\n+LL | |     where <() as Project<'a, 'b>>::Item : Eq\n+LL | | {\n+LL | | }\n+   | |_^\n+   = note: expected  `Project<'a, 'b>`\n+              found  `Project<'_, '_>`\n \n error: aborting due to previous error\n "}, {"sha": "2895a0ccdeec8f40d10768028000e9addcedc807", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &isize\n-              found &isize\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-ret-borrowed-1.rs:10:14\n+   |\n+LL |     with(|o| o)\n+   |              ^\n+   = note: expected  `&isize`\n+              found  `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14\n    |"}, {"sha": "b74f10f5075ebdf2db4f45e518eef0435f6fb853", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &isize\n-              found &isize\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-ret-borrowed.rs:13:14\n+   |\n+LL |     with(|o| o)\n+   |              ^\n+   = note: expected  `&isize`\n+              found  `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n   --> $DIR/regions-ret-borrowed.rs:12:14\n    |"}, {"sha": "58b79d212700cfd81c385af01abe8f297705ca89", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -36,9 +36,13 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |            ^^\n-   = note: ...so that the expression is assignable:\n-           expected &'b mut (dyn Dummy + 'b)\n-              found &mut (dyn Dummy + 'b)\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+   |\n+LL |     x\n+   |     ^\n+   = note: expected  `&'b mut (dyn Dummy + 'b)`\n+              found  `&mut (dyn Dummy + 'b)`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-trait-object-subtyping.rs:22:5"}, {"sha": "527babb01208f3a6003060689c284db4dab0d34c", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -105,9 +105,13 @@ note: ...but the lifetime must also be valid for the lifetime `'l2` as defined o\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |               ^^^\n-   = note: ...so that the types are compatible:\n-           expected W<'l1, 'l2>\n-              found W<'_, '_>\n+note: ...so that the types are compatible\n+  --> $DIR/reject-specialized-drops-8142.rs:54:1\n+   |\n+LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `W<'l1, 'l2>`\n+              found  `W<'_, '_>`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "9fdcd4de495c017c0d026d77acf56c8210184fa1", "filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -14,9 +14,13 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined on\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |         ^^\n-   = note: ...so that the types are compatible:\n-           expected T1<'a>\n-              found T1<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+   |\n+LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n+   |             ^^^^^^^^^^\n+   = note: expected  `T1<'a>`\n+              found  `T1<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "e6029e0d4623ae73523bb6f763a8484345980de2", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7945dcdfdcbd5ad9ce798339409e48d814a06787/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=7945dcdfdcbd5ad9ce798339409e48d814a06787", "patch": "@@ -18,9 +18,13 @@ note: ...so that reference does not outlive borrowed content\n LL |     Box::new(items.iter())\n    |              ^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item = &T>>\n+note: ...so that the expression is assignable\n+  --> $DIR/dyn-trait-underscore.rs:8:5\n+   |\n+LL |     Box::new(items.iter())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>`\n+              found  `std::boxed::Box<dyn std::iter::Iterator<Item = &T>>`\n \n error: aborting due to previous error\n "}]}