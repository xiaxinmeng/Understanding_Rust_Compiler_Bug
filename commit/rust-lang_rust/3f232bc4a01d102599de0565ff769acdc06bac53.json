{"sha": "3f232bc4a01d102599de0565ff769acdc06bac53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMjMyYmM0YTAxZDEwMjU5OWRlMDU2NWZmNzY5YWNkYzA2YmFjNTM=", "commit": {"author": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-20T10:07:14Z"}, "committer": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-20T10:07:14Z"}, "message": "Add ARC::get method and implements the function from it. Add an example showing a simple use of ARC.", "tree": {"sha": "03ee103dc94a935c50544285600d0ef04a064d82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ee103dc94a935c50544285600d0ef04a064d82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f232bc4a01d102599de0565ff769acdc06bac53", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f232bc4a01d102599de0565ff769acdc06bac53", "html_url": "https://github.com/rust-lang/rust/commit/3f232bc4a01d102599de0565ff769acdc06bac53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f232bc4a01d102599de0565ff769acdc06bac53/comments", "author": null, "committer": null, "parents": [{"sha": "a9c7d3f7757ee67fd5d068b0ebfb5a95d8e4d2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c7d3f7757ee67fd5d068b0ebfb5a95d8e4d2cc", "html_url": "https://github.com/rust-lang/rust/commit/a9c7d3f7757ee67fd5d068b0ebfb5a95d8e4d2cc"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "9c7db35f6f206a9d86d1b6ab61be1cb95ced8ff7", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3f232bc4a01d102599de0565ff769acdc06bac53/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f232bc4a01d102599de0565ff769acdc06bac53/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=3f232bc4a01d102599de0565ff769acdc06bac53", "patch": "@@ -8,9 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/**\n+/*!\n  * Concurrency-enabled mechanisms for sharing mutable and/or immutable state\n  * between tasks.\n+ *\n+ * # Example\n+ *\n+ * In this example, a large vector of floats is shared between several tasks.\n+ * With simple pipes, without ARC, a copy would have to be made for each task.\n+ *\n+ * ~~~\n+ * extern mod std;\n+ * use std::arc;\n+ * let numbers=vec::from_fn(100, |ind| (ind as float)*rand::random());\n+ * let shared_numbers=arc::ARC(numbers);\n+ *\n+ *   for 10.times {\n+ *       let (port, chan)  = stream();\n+ *       chan.send(shared_numbers.clone());\n+ *\n+ *       do spawn {\n+ *           let shared_numbers=port.recv();\n+ *           let local_numbers=shared_numbers.get();\n+ *\n+ *           // Work with the local numbers\n+ *       }\n+ *   }\n+ * ~~~\n  */\n \n use sync;\n@@ -93,9 +117,14 @@ pub fn ARC<T:Const + Owned>(data: T) -> ARC<T> {\n  * wrapper.\n  */\n pub fn get<'a, T:Const + Owned>(rc: &'a ARC<T>) -> &'a T {\n-    unsafe { &*rc.x.get_immut() }\n+    rc.get()\n }\n \n+impl<T:Const+Owned> ARC<T> {\n+    pub fn get<'a>(&'a self) -> &'a T {\n+        unsafe { &*self.x.get_immut() }\n+    }\n+}\n /**\n  * Duplicate an atomically reference counted wrapper.\n  *\n@@ -508,6 +537,7 @@ mod tests {\n         c.send(arc::clone(&arc_v));\n \n         assert_eq!((*arc::get(&arc_v))[2], 3);\n+        assert_eq!(arc_v.get()[4], 5);\n \n         info!(arc_v);\n     }"}]}