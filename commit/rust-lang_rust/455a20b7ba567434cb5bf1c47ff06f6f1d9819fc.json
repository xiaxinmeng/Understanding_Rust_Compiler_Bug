{"sha": "455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "node_id": "C_kwDOAAsO6NoAKDQ1NWEyMGI3YmE1Njc0MzRjYjViZjFjNDdmZjA2ZjZmMWQ5ODE5ZmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-24T12:29:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-24T12:29:54Z"}, "message": "Rollup merge of #102186 - ink-feather-org:const_try_trait, r=fee1-dead\n\nAdd const_closure, Constify Try trait\n\nAdds a struct for creating const `FnMut` closures (for now just copy pasted form my [const_closure](https://crates.io/crates/const_closure) crate).\nI'm not sure if this way is how it should be done.\nThe `ConstFnClosure` and `ConstFnOnceClosure` structs can probably also be entirely removed.\n\nThis is then used to constify the try trait.\n\nNot sure if i should add const_closure in its own pr and maybe make it public behind a perma-unstable feature gate.\n\ncc ```@fee1-dead```  ```@rust-lang/wg-const-eval```", "tree": {"sha": "5e2978dd09dd3ad9b8f4aa89e0165a1fff4e6566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e2978dd09dd3ad9b8f4aa89e0165a1fff4e6566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjLvhCCRBK7hj4Ov3rIwAAJ4MIAJaXGXgVrNF8zFbHVKk+z/Im\nLWL6z9HiP3y09H+IaggfeAmH5NRiKqNRzZorwONnjGkzYe98S5wMPnbnnPyfww5i\nX/2g6NlOJ5R179rbyWeOud/q7Jyq1gq6vcqvM7lkwyOhZJ01OsywavXlv4/g/BlJ\nmlno6kGRuSaoNTP3JCruEgzTUQ7qKQSAmloJ0yW0jB/NniiBXWWNC2nmzBIkz312\nCRRHHc3xWpOWZrir2/iMegVHYCe5L/iuOFglE16yJUgMffUyIXVPLzrUzulWy6qa\nTyPG6NNwm/cr55uKF1001NTa/MjRU2iXeeopOZgfbZJ29IP4Hi4zqJyFWXO14Pw=\n=1jKO\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e2978dd09dd3ad9b8f4aa89e0165a1fff4e6566\nparent eb628e867055c52f1864e19eb94854022fdf1640\nparent 84666afb36365c3dafe0acfdcd17ea177f58af19\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664022594 +0200\ncommitter GitHub <noreply@github.com> 1664022594 +0200\n\nRollup merge of #102186 - ink-feather-org:const_try_trait, r=fee1-dead\n\nAdd const_closure, Constify Try trait\n\nAdds a struct for creating const `FnMut` closures (for now just copy pasted form my [const_closure](https://crates.io/crates/const_closure) crate).\nI'm not sure if this way is how it should be done.\nThe `ConstFnClosure` and `ConstFnOnceClosure` structs can probably also be entirely removed.\n\nThis is then used to constify the try trait.\n\nNot sure if i should add const_closure in its own pr and maybe make it public behind a perma-unstable feature gate.\n\ncc ```@fee1-dead```  ```@rust-lang/wg-const-eval```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "html_url": "https://github.com/rust-lang/rust/commit/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb628e867055c52f1864e19eb94854022fdf1640", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb628e867055c52f1864e19eb94854022fdf1640", "html_url": "https://github.com/rust-lang/rust/commit/eb628e867055c52f1864e19eb94854022fdf1640"}, {"sha": "84666afb36365c3dafe0acfdcd17ea177f58af19", "url": "https://api.github.com/repos/rust-lang/rust/commits/84666afb36365c3dafe0acfdcd17ea177f58af19", "html_url": "https://github.com/rust-lang/rust/commit/84666afb36365c3dafe0acfdcd17ea177f58af19"}], "stats": {"total": 125, "additions": 104, "deletions": 21}, "files": [{"sha": "d2e80e8e7e5dfaf446ec1a0f3ce0981bfbb16e32", "filename": "library/core/src/const_closure.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -0,0 +1,63 @@\n+use crate::marker::Destruct;\n+\n+/// Struct representing a closure with mutably borrowed data.\n+///\n+/// Example:\n+/// ```no_build\n+/// #![feature(const_mut_refs)]\n+/// use crate::const_closure::ConstFnMutClosure;\n+/// const fn imp(state: &mut i32, (arg,): (i32,)) -> i32 {\n+///   *state += arg;\n+///   *state\n+/// }\n+/// let mut i = 5;\n+/// let mut cl = ConstFnMutClosure::new(&mut i, imp);\n+///\n+/// assert!(7 == cl(2));\n+/// assert!(8 == cl(1));\n+/// ```\n+pub(crate) struct ConstFnMutClosure<'a, CapturedData: ?Sized, Function> {\n+    data: &'a mut CapturedData,\n+    func: Function,\n+}\n+\n+impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<'a, CapturedData, Function> {\n+    /// Function for creating a new closure.\n+    ///\n+    /// `data` is the a mutable borrow of data that is captured from the environment.\n+    ///\n+    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n+    ///   and return the return value of the closure.\n+    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n+        data: &'a mut CapturedData,\n+        func: Function,\n+    ) -> Self\n+    where\n+        Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n+    {\n+        Self { data, func }\n+    }\n+}\n+\n+impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n+    FnOnce<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n+where\n+    Function:\n+        ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n+{\n+    type Output = ClosureReturnValue;\n+\n+    extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+        self.call_mut(args)\n+    }\n+}\n+\n+impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n+    FnMut<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n+where\n+    Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n+{\n+    extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+        (self.func)(self.data, args)\n+    }\n+}"}, {"sha": "489fb13c0dc97aff6df6fd8bd16f7c26c4283bb8", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -1,4 +1,5 @@\n use crate::array;\n+use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{ByRefSized, FusedIterator, Iterator};\n use crate::ops::{ControlFlow, NeverShortCircuit, Try};\n \n@@ -82,12 +83,12 @@ where\n         }\n     }\n \n-    fn fold<B, F>(mut self, init: B, f: F) -> B\n+    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(init, NeverShortCircuit::wrap_mut_2(f)).0\n+        self.try_fold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n \n@@ -126,12 +127,12 @@ where\n         try { acc }\n     }\n \n-    fn rfold<B, F>(mut self, init: B, f: F) -> B\n+    fn rfold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_rfold(init, NeverShortCircuit::wrap_mut_2(f)).0\n+        self.try_rfold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n "}, {"sha": "1945e402ff50ed8e4875cebd8f7bb7c98202f9fa", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -1,4 +1,7 @@\n-use crate::ops::{NeverShortCircuit, Try};\n+use crate::{\n+    const_closure::ConstFnMutClosure,\n+    ops::{NeverShortCircuit, Try},\n+};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n ///\n@@ -36,12 +39,13 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn fold<B, F>(self, init: B, f: F) -> B\n+    fn fold<B, F>(self, init: B, mut f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `fold` needs ownership, so this can't forward directly.\n-        I::try_fold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n+        I::try_fold(self.0, init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp))\n+            .0\n     }\n \n     #[inline]\n@@ -72,12 +76,17 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn rfold<B, F>(self, init: B, f: F) -> B\n+    fn rfold<B, F>(self, init: B, mut f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `rfold` needs ownership, so this can't forward directly.\n-        I::try_rfold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n+        I::try_rfold(\n+            self.0,\n+            init,\n+            ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp),\n+        )\n+        .0\n     }\n \n     #[inline]"}, {"sha": "de3a534f81b8adf4b0655e4f1471232ec45fde64", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -1,3 +1,4 @@\n+use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{InPlaceIterable, Iterator};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, NeverShortCircuit, Residual, Try};\n \n@@ -203,12 +204,12 @@ where\n             .into_try()\n     }\n \n-    fn fold<B, F>(mut self, init: B, fold: F) -> B\n+    fn fold<B, F>(mut self, init: B, mut fold: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n+        self.try_fold(init, ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n "}, {"sha": "6fbe7ade7325501d19382edf185f599abc6182cc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -356,6 +356,8 @@ mod bool;\n mod tuple;\n mod unit;\n \n+mod const_closure;\n+\n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n pub mod primitive;\n "}, {"sha": "72ebe653caff3483b4dd1c75424805684d11e7b6", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -126,7 +126,8 @@ impl<B, C> const ops::FromResidual for ControlFlow<B, C> {\n }\n \n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n-impl<B, C> ops::Residual<C> for ControlFlow<B, convert::Infallible> {\n+#[rustc_const_unstable(feature = \"const_try\", issue = \"74935\")]\n+impl<B, C> const ops::Residual<C> for ControlFlow<B, convert::Infallible> {\n     type TryType = ControlFlow<B, C>;\n }\n "}, {"sha": "4d0d4e12adbf899fc1b4b86772fc8580ac5e9d86", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -129,7 +129,7 @@ use crate::ops::ControlFlow;\n #[doc(alias = \"?\")]\n #[lang = \"Try\"]\n #[const_trait]\n-pub trait Try: FromResidual {\n+pub trait Try: ~const FromResidual {\n     /// The type of the value produced by `?` when *not* short-circuiting.\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     type Output;\n@@ -438,10 +438,11 @@ where\n /// and in the other direction,\n /// `<Result<Infallible, E> as Residual<T>>::TryType = Result<T, E>`.\n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n+#[const_trait]\n pub trait Residual<O> {\n     /// The \"return\" type of this meta-function.\n     #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n-    type TryType: Try<Output = O, Residual = Self>;\n+    type TryType: ~const Try<Output = O, Residual = Self>;\n }\n \n #[unstable(feature = \"pub_crate_should_not_need_unstable_attr\", issue = \"none\")]\n@@ -460,14 +461,17 @@ pub(crate) struct NeverShortCircuit<T>(pub T);\n impl<T> NeverShortCircuit<T> {\n     /// Wrap a binary `FnMut` to return its result wrapped in a `NeverShortCircuit`.\n     #[inline]\n-    pub fn wrap_mut_2<A, B>(mut f: impl FnMut(A, B) -> T) -> impl FnMut(A, B) -> Self {\n-        move |a, b| NeverShortCircuit(f(a, b))\n+    pub const fn wrap_mut_2_imp<A, B, F: ~const FnMut(A, B) -> T>(\n+        f: &mut F,\n+        (a, b): (A, B),\n+    ) -> NeverShortCircuit<T> {\n+        NeverShortCircuit(f(a, b))\n     }\n }\n \n pub(crate) enum NeverShortCircuitResidual {}\n \n-impl<T> Try for NeverShortCircuit<T> {\n+impl<T> const Try for NeverShortCircuit<T> {\n     type Output = T;\n     type Residual = NeverShortCircuitResidual;\n \n@@ -482,14 +486,14 @@ impl<T> Try for NeverShortCircuit<T> {\n     }\n }\n \n-impl<T> FromResidual for NeverShortCircuit<T> {\n+impl<T> const FromResidual for NeverShortCircuit<T> {\n     #[inline]\n     fn from_residual(never: NeverShortCircuitResidual) -> Self {\n         match never {}\n     }\n }\n \n-impl<T> Residual<T> for NeverShortCircuitResidual {\n+impl<T> const Residual<T> for NeverShortCircuitResidual {\n     type TryType = NeverShortCircuit<T>;\n }\n "}, {"sha": "96b16b13256ce7398159fcbeedf91d0372861c75", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -2321,7 +2321,8 @@ impl<T> ops::FromResidual<ops::Yeet<()>> for Option<T> {\n }\n \n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n-impl<T> ops::Residual<T> for Option<convert::Infallible> {\n+#[rustc_const_unstable(feature = \"const_try\", issue = \"74935\")]\n+impl<T> const ops::Residual<T> for Option<convert::Infallible> {\n     type TryType = Option<T>;\n }\n "}, {"sha": "dc90e90402c8ecddbe5991b63840bb955c6fc6b0", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a20b7ba567434cb5bf1c47ff06f6f1d9819fc/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=455a20b7ba567434cb5bf1c47ff06f6f1d9819fc", "patch": "@@ -2116,6 +2116,7 @@ impl<T, E, F: From<E>> ops::FromResidual<ops::Yeet<E>> for Result<T, F> {\n }\n \n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n-impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {\n+#[rustc_const_unstable(feature = \"const_try\", issue = \"74935\")]\n+impl<T, E> const ops::Residual<T> for Result<convert::Infallible, E> {\n     type TryType = Result<T, E>;\n }"}]}