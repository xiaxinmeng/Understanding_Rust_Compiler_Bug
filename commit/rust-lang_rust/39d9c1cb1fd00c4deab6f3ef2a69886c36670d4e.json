{"sha": "39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "node_id": "C_kwDOAAsO6NoAKDM5ZDljMWNiMWZkMDBjNGRlYWI2ZjNlZjJhNjk4ODZjMzY2NzBkNGU", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-05T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-07T06:11:49Z"}, "message": "Move `predecessors` from Body to BasicBlocks", "tree": {"sha": "42579ce8645f7891a58a6b557d1e237eeaba5e2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42579ce8645f7891a58a6b557d1e237eeaba5e2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "html_url": "https://github.com/rust-lang/rust/commit/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2446b17745517170aee5707cc75ef3661f365f23", "url": "https://api.github.com/repos/rust-lang/rust/commits/2446b17745517170aee5707cc75ef3661f365f23", "html_url": "https://github.com/rust-lang/rust/commit/2446b17745517170aee5707cc75ef3661f365f23"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "d2a54a646ec6d538b3ac91f1ca3cae5469acc0de", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -1628,7 +1628,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             location: Location,\n         ) -> impl Iterator<Item = Location> + Captures<'tcx> + 'a {\n             if location.statement_index == 0 {\n-                let predecessors = body.predecessors()[location.block].to_vec();\n+                let predecessors = body.basic_blocks.predecessors()[location.block].to_vec();\n                 Either::Left(predecessors.into_iter().map(move |bb| body.terminator_loc(bb)))\n             } else {\n                 Either::Right(std::iter::once(Location {"}, {"sha": "3795378b56861a426f354fbcaaadaa2a8593605d", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -258,7 +258,7 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n \n                 let block = self.cx.elements.to_location(block_start).block;\n                 self.stack.extend(\n-                    self.cx.body.predecessors()[block]\n+                    self.cx.body.basic_blocks.predecessors()[block]\n                         .iter()\n                         .map(|&pred_bb| self.cx.body.terminator_loc(pred_bb))\n                         .map(|pred_loc| self.cx.elements.point_from_location(pred_loc)),\n@@ -354,7 +354,7 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         }\n \n         let body = self.cx.body;\n-        for &pred_block in body.predecessors()[block].iter() {\n+        for &pred_block in body.basic_blocks.predecessors()[block].iter() {\n             debug!(\"compute_drop_live_points_for_block: pred_block = {:?}\", pred_block,);\n \n             // Check whether the variable is (at least partially)"}, {"sha": "9a2c7fa7cc4bc943506ce811a89585e0834d535c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -41,7 +41,6 @@ use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::{ControlFlow, Index, IndexMut};\n use std::{iter, mem};\n \n-use self::predecessors::Predecessors;\n pub use self::query::*;\n use self::switch_sources::SwitchSources;\n pub use basic_blocks::BasicBlocks;\n@@ -449,11 +448,6 @@ impl<'tcx> Body<'tcx> {\n             .unwrap_or_else(|| Either::Right(block_data.terminator()))\n     }\n \n-    #[inline]\n-    pub fn predecessors(&self) -> &Predecessors {\n-        self.basic_blocks.predecessors()\n-    }\n-\n     /// `body.switch_sources()[&(target, switch)]` returns a list of switch\n     /// values that lead to a `target` block from a `switch` block.\n     #[inline]\n@@ -2837,7 +2831,7 @@ impl Location {\n             return true;\n         }\n \n-        let predecessors = body.predecessors();\n+        let predecessors = body.basic_blocks.predecessors();\n \n         // If we're in another block, then we want to check that block is a predecessor of `other`.\n         let mut queue: Vec<BasicBlock> = predecessors[other.block].to_vec();"}, {"sha": "5d9bf6194a427dac9e654c6b77ef7927cdafcad8", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -228,7 +228,7 @@ impl Direction for Backward {\n     ) where\n         A: Analysis<'tcx>,\n     {\n-        for pred in body.predecessors()[bb].iter().copied() {\n+        for pred in body.basic_blocks.predecessors()[bb].iter().copied() {\n             match body[pred].terminator().kind {\n                 // Apply terminator-specific edge effects.\n                 //"}, {"sha": "f12c8560c0e82bd0a3d041dc4d8ce3b8e314628b", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> MirPass<'tcx> for AddCallGuards {\n impl AddCallGuards {\n     pub fn add_call_guards(&self, body: &mut Body<'_>) {\n         let mut pred_count: IndexVec<_, _> =\n-            body.predecessors().iter().map(|ps| ps.len()).collect();\n+            body.basic_blocks.predecessors().iter().map(|ps| ps.len()).collect();\n         pred_count[START_BLOCK] += 1;\n \n         // We need a place to store the new blocks generated"}, {"sha": "759ea7cd32820b9d5c1ae3d16d3e6014580c55f3", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -95,7 +95,7 @@ impl CoverageGraph {\n         let mut basic_blocks = Vec::new();\n         for (bb, data) in mir_cfg_without_unwind {\n             if let Some(last) = basic_blocks.last() {\n-                let predecessors = &mir_body.predecessors()[bb];\n+                let predecessors = &mir_body.basic_blocks.predecessors()[bb];\n                 if predecessors.len() > 1 || !predecessors.contains(last) {\n                     // The `bb` has more than one _incoming_ edge, and should start its own\n                     // `BasicCoverageBlockData`. (Note, the `basic_blocks` vector does not yet"}, {"sha": "bb063915f55a907f8119f617e9c20b5433481e82", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -133,7 +133,7 @@ fn find_local_assigned_to_return_place(\n             return local;\n         }\n \n-        match body.predecessors()[block].as_slice() {\n+        match body.basic_blocks.predecessors()[block].as_slice() {\n             &[pred] => block = pred,\n             _ => return None,\n         }"}, {"sha": "194c2794aacb60e22c904db8a56c3f3051257d19", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> MirPass<'tcx> for SeparateConstSwitch {\n /// Returns the amount of blocks that were duplicated\n pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n     let mut new_blocks: SmallVec<[(BasicBlock, BasicBlock); 6]> = SmallVec::new();\n-    let predecessors = body.predecessors();\n+    let predecessors = body.basic_blocks.predecessors();\n     'block_iter: for (block_id, block) in body.basic_blocks().iter_enumerated() {\n         if let TerminatorKind::SwitchInt {\n             discr: Operand::Copy(switch_place) | Operand::Move(switch_place),"}, {"sha": "eddca60457574822fb1917afc8fc9ac81f3233ce", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=39d9c1cb1fd00c4deab6f3ef2a69886c36670d4e", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // `arg` is a reference as it is `.deref()`ed in the previous block.\n                 // Look into the predecessor block and find out the source of deref.\n \n-                let ps = &mir.predecessors()[bb];\n+                let ps = &mir.basic_blocks.predecessors()[bb];\n                 if ps.len() != 1 {\n                     continue;\n                 }"}]}