{"sha": "72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "node_id": "C_kwDOAAsO6NoAKDcyMDE0YThkYzMwYmM5M2ViOTg3NjE2Y2ZhOWQ0MzE0ZDFiM2Q0N2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-26T19:59:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-26T19:59:56Z"}, "message": "Auto merge of #2801 - RalfJung:fd-cleanup, r=oli-obk\n\na bit of FileDescriptor trait cleanup\n\n- add default impl for `is_tty`\n- `as_epoll_handle` was just dyn downcasting in disguise; this can be done more generally", "tree": {"sha": "2381117cd31b5cb09b5c1c8f5f708ee4d7b57a96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2381117cd31b5cb09b5c1c8f5f708ee4d7b57a96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "html_url": "https://github.com/rust-lang/rust/commit/72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827", "html_url": "https://github.com/rust-lang/rust/commit/3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827"}, {"sha": "30859d99f071121f6dc1148f9faef3b2b4e5037a", "url": "https://api.github.com/repos/rust-lang/rust/commits/30859d99f071121f6dc1148f9faef3b2b4e5037a", "html_url": "https://github.com/rust-lang/rust/commit/30859d99f071121f6dc1148f9faef3b2b4e5037a"}], "stats": {"total": 118, "additions": 73, "deletions": 45}, "files": [{"sha": "21a413002d06ed75ca16753b724b39a38ce2bf9f", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "patch": "@@ -1,5 +1,6 @@\n pub mod convert;\n \n+use std::any::Any;\n use std::cmp;\n use std::iter;\n use std::num::NonZeroUsize;\n@@ -23,7 +24,23 @@ use rand::RngCore;\n \n use crate::*;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+/// A trait to work around not having trait object upcasting:\n+/// Add `AsAny` as supertrait and your trait objects can be turned into `&dyn Any` on which you can\n+/// then call `downcast`.\n+pub trait AsAny: Any {\n+    fn as_any(&self) -> &dyn Any;\n+    fn as_any_mut(&mut self) -> &mut dyn Any;\n+}\n+impl<T: Any> AsAny for T {\n+    #[inline(always)]\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+    #[inline(always)]\n+    fn as_any_mut(&mut self) -> &mut dyn Any {\n+        self\n+    }\n+}\n \n // This mapping should match `decode_error_kind` in\n // <https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/mod.rs>.\n@@ -119,6 +136,7 @@ fn try_resolve_did(tcx: TyCtxt<'_>, path: &[&str], namespace: Option<Namespace>)\n     }\n }\n \n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Checks if the given crate/module exists.\n     fn have_module(&self, path: &[&str]) -> bool {"}, {"sha": "1eca389e9842919ae99fcfce84ede03e902497bc", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "patch": "@@ -17,25 +17,16 @@ use crate::shims::os_str::bytes_to_os_str;\n use crate::*;\n use shims::os_str::os_str_to_bytes;\n use shims::time::system_time_to_duration;\n-use shims::unix::linux::fd::epoll::Epoll;\n \n #[derive(Debug)]\n pub struct FileHandle {\n     file: File,\n     writable: bool,\n }\n \n-pub trait FileDescriptor: std::fmt::Debug {\n+pub trait FileDescriptor: std::fmt::Debug + helpers::AsAny {\n     fn name(&self) -> &'static str;\n \n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        throw_unsup_format!(\"{} cannot be used as FileHandle\", self.name());\n-    }\n-\n-    fn as_epoll_handle<'tcx>(&mut self) -> InterpResult<'tcx, &mut Epoll> {\n-        throw_unsup_format!(\"not an epoll file descriptor\");\n-    }\n-\n     fn read<'tcx>(\n         &mut self,\n         _communicate_allowed: bool,\n@@ -69,7 +60,9 @@ pub trait FileDescriptor: std::fmt::Debug {\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n \n-    fn is_tty(&self) -> bool;\n+    fn is_tty(&self) -> bool {\n+        false\n+    }\n \n     #[cfg(unix)]\n     fn as_unix_host_fd(&self) -> Option<i32> {\n@@ -82,10 +75,6 @@ impl FileDescriptor for FileHandle {\n         \"FILE\"\n     }\n \n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        Ok(self)\n-    }\n-\n     fn read<'tcx>(\n         &mut self,\n         communicate_allowed: bool,\n@@ -271,10 +260,6 @@ impl FileDescriptor for NullOutput {\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(NullOutput))\n     }\n-\n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n }\n \n #[derive(Debug)]\n@@ -694,7 +679,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         } else if this.tcx.sess.target.os == \"macos\" && cmd == this.eval_libc_i32(\"F_FULLFSYNC\") {\n             if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n                 // FIXME: Support fullfsync for all FDs\n-                let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+                let FileHandle { file, writable } =\n+                    file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                        err_unsup_format!(\n+                            \"`F_FULLFSYNC` is only supported on file-backed file descriptors\"\n+                        )\n+                    })?;\n                 let io_result = maybe_sync_file(file, *writable, File::sync_all);\n                 this.try_unwrap_io_result(io_result)\n             } else {\n@@ -1530,7 +1520,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         Ok(Scalar::from_i32(\n             if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n                 // FIXME: Support ftruncate64 for all FDs\n-                let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+                let FileHandle { file, writable } =\n+                    file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                        err_unsup_format!(\n+                            \"`ftruncate64` is only supported on file-backed file descriptors\"\n+                        )\n+                    })?;\n                 if *writable {\n                     if let Ok(length) = length.try_into() {\n                         let result = file.set_len(length);\n@@ -1571,7 +1566,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support fsync for all FDs\n-            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let FileHandle { file, writable } =\n+                file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                    err_unsup_format!(\"`fsync` is only supported on file-backed file descriptors\")\n+                })?;\n             let io_result = maybe_sync_file(file, *writable, File::sync_all);\n             this.try_unwrap_io_result(io_result)\n         } else {\n@@ -1593,7 +1591,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support fdatasync for all FDs\n-            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let FileHandle { file, writable } =\n+                file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                    err_unsup_format!(\n+                        \"`fdatasync` is only supported on file-backed file descriptors\"\n+                    )\n+                })?;\n             let io_result = maybe_sync_file(file, *writable, File::sync_data);\n             this.try_unwrap_io_result(io_result)\n         } else {\n@@ -1638,7 +1641,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support sync_data_range for all FDs\n-            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let FileHandle { file, writable } =\n+                file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                    err_unsup_format!(\n+                        \"`sync_data_range` is only supported on file-backed file descriptors\"\n+                    )\n+                })?;\n             let io_result = maybe_sync_file(file, *writable, File::sync_data);\n             Ok(Scalar::from_i32(this.try_unwrap_io_result(io_result)?))\n         } else {\n@@ -1942,7 +1950,16 @@ impl FileMetadata {\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let option = ecx.machine.file_handler.handles.get(&fd);\n         let file = match option {\n-            Some(file_descriptor) => &file_descriptor.as_file_handle()?.file,\n+            Some(file_descriptor) =>\n+                &file_descriptor\n+                    .as_any()\n+                    .downcast_ref::<FileHandle>()\n+                    .ok_or_else(|| {\n+                        err_unsup_format!(\n+                            \"obtaining metadata is only supported on file-backed file descriptors\"\n+                        )\n+                    })?\n+                    .file,\n             None => return ecx.handle_not_found().map(|_: i32| None),\n         };\n         let metadata = file.metadata();"}, {"sha": "3c4a678e598df714bb6dfa94016c695c33213436", "filename": "src/tools/miri/src/shims/unix/linux/fd.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs?ref=72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "patch": "@@ -80,7 +80,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             let event = EpollEvent { events, data };\n \n             if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n-                let epfd = epfd.as_epoll_handle()?;\n+                let epfd = epfd\n+                    .as_any_mut()\n+                    .downcast_mut::<Epoll>()\n+                    .ok_or_else(|| err_unsup_format!(\"non-epoll FD passed to `epoll_ctl`\"))?;\n \n                 epfd.file_descriptors.insert(fd, event);\n                 Ok(Scalar::from_i32(0))\n@@ -89,7 +92,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n         } else if op == epoll_ctl_del {\n             if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n-                let epfd = epfd.as_epoll_handle()?;\n+                let epfd = epfd\n+                    .as_any_mut()\n+                    .downcast_mut::<Epoll>()\n+                    .ok_or_else(|| err_unsup_format!(\"non-epoll FD passed to `epoll_ctl`\"))?;\n \n                 epfd.file_descriptors.remove(&fd);\n                 Ok(Scalar::from_i32(0))\n@@ -148,7 +154,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let numevents = 0;\n         if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n-            let _epfd = epfd.as_epoll_handle()?;\n+            let _epfd = epfd\n+                .as_any_mut()\n+                .downcast_mut::<Epoll>()\n+                .ok_or_else(|| err_unsup_format!(\"non-epoll FD passed to `epoll_wait`\"))?;\n \n             // FIXME return number of events ready when scheme for marking events ready exists\n             Ok(Scalar::from_i32(numevents))"}, {"sha": "a429caaf8f4102ca7160f87a5374fe947b55b723", "filename": "src/tools/miri/src/shims/unix/linux/fd/epoll.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fepoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fepoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fepoll.rs?ref=72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "patch": "@@ -32,18 +32,10 @@ impl FileDescriptor for Epoll {\n         \"epoll\"\n     }\n \n-    fn as_epoll_handle<'tcx>(&mut self) -> InterpResult<'tcx, &mut Epoll> {\n-        Ok(self)\n-    }\n-\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(self.clone()))\n     }\n \n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n-\n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,"}, {"sha": "1db020bb7b6d9c0917fdc1c438480ad7c7e30003", "filename": "src/tools/miri/src/shims/unix/linux/fd/event.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs?ref=72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "patch": "@@ -28,10 +28,6 @@ impl FileDescriptor for Event {\n         Ok(Box::new(Event { val: self.val.clone() }))\n     }\n \n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n-\n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,"}, {"sha": "6adae88235f3d8c0d37fa69132d04a22670fe4f0", "filename": "src/tools/miri/src/shims/unix/linux/fd/socketpair.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fsocketpair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72014a8dc30bc93eb987616cfa9d4314d1b3d47e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fsocketpair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fsocketpair.rs?ref=72014a8dc30bc93eb987616cfa9d4314d1b3d47e", "patch": "@@ -19,10 +19,6 @@ impl FileDescriptor for SocketPair {\n         Ok(Box::new(SocketPair))\n     }\n \n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n-\n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,"}]}