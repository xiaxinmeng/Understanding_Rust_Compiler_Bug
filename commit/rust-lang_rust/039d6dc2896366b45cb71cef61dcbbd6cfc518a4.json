{"sha": "039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "node_id": "C_kwDOAAsO6NoAKDAzOWQ2ZGMyODk2MzY2YjQ1Y2I3MWNlZjYxZGNiYmQ2Y2ZjNTE4YTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-16T15:58:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-16T15:58:16Z"}, "message": "Rollup merge of #92706 - umanwizard:btree, r=dtolnay\n\nClarify explicitly that BTree{Map,Set} are ordered.\n\nOne of the main reasons one would want to use a BTree{Map,Set} rather than a Hash{Map,Set} is because they maintain their keys in sorted order; but this was never explicitly stated in the top-level docs (it was only indirectly alluded to there, and stated explicitly in the docs for `iter`, `values`, etc.)\n\nThis PR states the ordering guarantee more prominently.", "tree": {"sha": "abeb1fdb1dd798bdb31a098f7c805d2278b814f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abeb1fdb1dd798bdb31a098f7c805d2278b814f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5ECYCRBK7hj4Ov3rIwAAhy8IAJwCJQ48Wk9z2pzvUiakpctG\nL/5Az8JaMVT2gUqK0AKdin5saHMQiZ/EcovjwnpeHsvTbMwe7sKYHWy9zb/fkX38\nQt4D5jg1vzQ8xsc2MRCXgMXFK1Qh6hEI3+fFQ23fQeW9HoQWFK572GjRALCoETVa\nY0TIhnPtzIEM48KD/edCFlQCKxKWcOxbobpZoFes71ZhiEMbr1Apl4+N/YsLS3lH\n+0pS676SQ921bm/DqL4iQO6g0xGgUk+jaKwkHEjTcUagbYG0yYqZt/tSdl+adJW6\n0brbosNNpVpL2qCphfs8q+HgVedEHIzgC83S0Q8K9rcT6xf+jMbZXBl93yK8NNs=\n=G7dg\n-----END PGP SIGNATURE-----\n", "payload": "tree abeb1fdb1dd798bdb31a098f7c805d2278b814f7\nparent c5041f88ea6bb48379db3539e339e175534e4352\nparent ad6408dd7a786db603c2ed323894feb7110e8dea\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642348696 +0100\ncommitter GitHub <noreply@github.com> 1642348696 +0100\n\nRollup merge of #92706 - umanwizard:btree, r=dtolnay\n\nClarify explicitly that BTree{Map,Set} are ordered.\n\nOne of the main reasons one would want to use a BTree{Map,Set} rather than a Hash{Map,Set} is because they maintain their keys in sorted order; but this was never explicitly stated in the top-level docs (it was only indirectly alluded to there, and stated explicitly in the docs for `iter`, `values`, etc.)\n\nThis PR states the ordering guarantee more prominently.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "html_url": "https://github.com/rust-lang/rust/commit/039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/039d6dc2896366b45cb71cef61dcbbd6cfc518a4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5041f88ea6bb48379db3539e339e175534e4352", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5041f88ea6bb48379db3539e339e175534e4352", "html_url": "https://github.com/rust-lang/rust/commit/c5041f88ea6bb48379db3539e339e175534e4352"}, {"sha": "ad6408dd7a786db603c2ed323894feb7110e8dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6408dd7a786db603c2ed323894feb7110e8dea", "html_url": "https://github.com/rust-lang/rust/commit/ad6408dd7a786db603c2ed323894feb7110e8dea"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "794b9356e7c28df02b1bc3f1dce5df8b776fee9a", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/039d6dc2896366b45cb71cef61dcbbd6cfc518a4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039d6dc2896366b45cb71cef61dcbbd6cfc518a4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "patch": "@@ -34,7 +34,7 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n // An empty map is represented either by the absence of a root node or by a\n // root node that is an empty leaf.\n \n-/// A map based on a [B-Tree].\n+/// An ordered map based on a [B-Tree].\n ///\n /// B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\n /// the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal\n@@ -68,6 +68,10 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n /// behavior.\n ///\n+/// Iterators obtained from functions such as [`BTreeMap::iter`], [`BTreeMap::values`], or\n+/// [`BTreeMap::keys`] produce their items in order by key, and take worst-case logarithmic and\n+/// amortized constant time per item returned.\n+///\n /// [B-Tree]: https://en.wikipedia.org/wiki/B-tree\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell"}, {"sha": "31df4e98ed746884fca583ba22b16855cd476406", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/039d6dc2896366b45cb71cef61dcbbd6cfc518a4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039d6dc2896366b45cb71cef61dcbbd6cfc518a4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "patch": "@@ -15,7 +15,7 @@ use super::Recover;\n \n // FIXME(conventions): implement bounded iterators\n \n-/// A set based on a B-Tree.\n+/// An ordered set based on a B-Tree.\n ///\n /// See [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance\n /// benefits and drawbacks.\n@@ -27,6 +27,9 @@ use super::Recover;\n /// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n /// behavior.\n ///\n+/// Iterators returned by [`BTreeSet::iter`] produce their items in order, and take worst-case\n+/// logarithmic and amortized constant time per item returned.\n+///\n /// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell"}, {"sha": "628a5b155673c9cc1cb9f4ce72799b2bc926e9ea", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039d6dc2896366b45cb71cef61dcbbd6cfc518a4/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039d6dc2896366b45cb71cef61dcbbd6cfc518a4/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "patch": "@@ -14,15 +14,15 @@ pub mod vec_deque;\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_map {\n-    //! A map based on a B-Tree.\n+    //! An ordered map based on a B-Tree.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::btree::map::*;\n }\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_set {\n-    //! A set based on a B-Tree.\n+    //! An ordered set based on a B-Tree.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::btree::set::*;\n }"}]}