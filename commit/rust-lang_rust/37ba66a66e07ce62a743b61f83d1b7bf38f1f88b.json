{"sha": "37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YmE2NmE2NmUwN2NlNjJhNzQzYjYxZjgzZDFiN2JmMzhmMWY4OGI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-29T23:36:51Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-03T07:37:56Z"}, "message": "Rename middle::ty::ctxt to TyCtxt", "tree": {"sha": "4519aaeb50b395e70d1106583a1b7a424a928807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4519aaeb50b395e70d1106583a1b7a424a928807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "html_url": "https://github.com/rust-lang/rust/commit/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cee8b9ffb6a2dac7e2f729988c2324e2f8ac10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cee8b9ffb6a2dac7e2f729988c2324e2f8ac10f", "html_url": "https://github.com/rust-lang/rust/commit/7cee8b9ffb6a2dac7e2f729988c2324e2f8ac10f"}], "stats": {"total": 1409, "additions": 703, "deletions": 706}, "files": [{"sha": "2fad161652f699f20863fb7b637f02c703a02e04", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -10,7 +10,7 @@\n \n use self::thread::{DepGraphThreadData, DepMessage};\n use middle::def_id::DefId;\n-use middle::ty;\n+use middle::ty::TyCtxt;\n use rustc_front::hir;\n use rustc_front::intravisit::Visitor;\n use std::rc::Rc;\n@@ -181,13 +181,13 @@ pub use self::query::DepGraphQuery;\n /// read edge from the corresponding AST node. This is used in\n /// compiler passes to automatically record the item that they are\n /// working on.\n-pub fn visit_all_items_in_krate<'tcx,V,F>(tcx: &ty::ctxt<'tcx>,\n+pub fn visit_all_items_in_krate<'tcx,V,F>(tcx: &TyCtxt<'tcx>,\n                                           mut dep_node_fn: F,\n                                           visitor: &mut V)\n     where F: FnMut(DefId) -> DepNode, V: Visitor<'tcx>\n {\n     struct TrackingVisitor<'visit, 'tcx: 'visit, F: 'visit, V: 'visit> {\n-        tcx: &'visit ty::ctxt<'tcx>,\n+        tcx: &'visit TyCtxt<'tcx>,\n         dep_node_fn: &'visit mut F,\n         visitor: &'visit mut V\n     }"}, {"sha": "d492f6927039b0cf3dea7c4dfb7ded5566e27cad", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -27,7 +27,7 @@ use self::TargetLint::*;\n \n use dep_graph::DepNode;\n use middle::privacy::AccessLevels;\n-use middle::ty;\n+use middle::ty::TyCtxt;\n use session::{config, early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass};\n use lint::{EarlyLintPass, EarlyLintPassObject, LateLintPass, LateLintPassObject};\n@@ -298,7 +298,7 @@ impl LintStore {\n /// Context for lint checking after type checking.\n pub struct LateContext<'a, 'tcx: 'a> {\n     /// Type context we're checking in.\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n \n     /// The crate being checked.\n     pub krate: &'a hir::Crate,\n@@ -662,7 +662,7 @@ impl<'a> EarlyContext<'a> {\n }\n \n impl<'a, 'tcx> LateContext<'a, 'tcx> {\n-    fn new(tcx: &'a ty::ctxt<'tcx>,\n+    fn new(tcx: &'a TyCtxt<'tcx>,\n            krate: &'a hir::Crate,\n            access_levels: &'a AccessLevels) -> LateContext<'a, 'tcx> {\n         // We want to own the lint store, so move it out of the session.\n@@ -1249,7 +1249,7 @@ fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,\n /// Perform lint checking on a crate.\n ///\n /// Consumes the `lint_store` field of the `Session`.\n-pub fn check_crate(tcx: &ty::ctxt, access_levels: &AccessLevels) {\n+pub fn check_crate(tcx: &TyCtxt, access_levels: &AccessLevels) {\n     let _task = tcx.dep_graph.in_task(DepNode::LateLintCheck);\n \n     let krate = tcx.map.krate();"}, {"sha": "e17aaaca16e04e8f2ae4d22db7991c1cc2ffde64", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,12 +15,12 @@\n  */\n \n use middle::def::Def;\n-use middle::ty::{self, Ty};\n+use middle::ty::{Ty, TyCtxt};\n \n use syntax::codemap::Span;\n use rustc_front::hir as ast;\n \n-pub fn prohibit_type_params(tcx: &ty::ctxt, segments: &[ast::PathSegment]) {\n+pub fn prohibit_type_params(tcx: &TyCtxt, segments: &[ast::PathSegment]) {\n     for segment in segments {\n         for typ in segment.parameters.types() {\n             span_err!(tcx.sess, typ.span, E0109,\n@@ -39,13 +39,13 @@ pub fn prohibit_type_params(tcx: &ty::ctxt, segments: &[ast::PathSegment]) {\n     }\n }\n \n-pub fn prohibit_projection(tcx: &ty::ctxt, span: Span)\n+pub fn prohibit_projection(tcx: &TyCtxt, span: Span)\n {\n     span_err!(tcx.sess, span, E0229,\n               \"associated type bindings are not allowed here\");\n }\n \n-pub fn prim_ty_to_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn prim_ty_to_ty<'tcx>(tcx: &TyCtxt<'tcx>,\n                            segments: &[ast::PathSegment],\n                            nty: ast::PrimTy)\n                            -> Ty<'tcx> {\n@@ -62,7 +62,7 @@ pub fn prim_ty_to_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n /// If a type in the AST is a primitive type, return the ty::Ty corresponding\n /// to it.\n-pub fn ast_ty_to_prim_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ast_ty: &ast::Ty)\n+pub fn ast_ty_to_prim_ty<'tcx>(tcx: &TyCtxt<'tcx>, ast_ty: &ast::Ty)\n                                -> Option<Ty<'tcx>> {\n     if let ast::TyPath(None, ref path) = ast_ty.node {\n         let def = match tcx.def_map.borrow().get(&ast_ty.id) {"}, {"sha": "a6fb5c02f54c324548e9c3cd17307daa73965231", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,14 +12,14 @@ use rustc_data_structures::graph;\n use middle::cfg::*;\n use middle::def::Def;\n use middle::pat_util;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax::ptr::P;\n \n use rustc_front::hir::{self, PatKind};\n \n struct CFGBuilder<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     graph: CFGGraph,\n     fn_exit: CFGIndex,\n     loop_scopes: Vec<LoopScope>,\n@@ -32,7 +32,7 @@ struct LoopScope {\n     break_index: CFGIndex,    // where to go on a `break\n }\n \n-pub fn construct(tcx: &ty::ctxt,\n+pub fn construct(tcx: &TyCtxt,\n                  blk: &hir::Block) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);"}, {"sha": "394633c59114d2766ddba640b2ee58c05d5ea212", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,7 +12,7 @@\n //! Uses `Graph` as the underlying representation.\n \n use rustc_data_structures::graph;\n-use middle::ty;\n+use middle::ty::TyCtxt;\n use syntax::ast;\n use rustc_front::hir;\n \n@@ -58,7 +58,7 @@ pub type CFGNode = graph::Node<CFGNodeData>;\n pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n-    pub fn new(tcx: &ty::ctxt,\n+    pub fn new(tcx: &TyCtxt,\n                blk: &hir::Block) -> CFG {\n         construct::construct(tcx, blk)\n     }"}, {"sha": "be8793bac5dbfb5c7a7bc3a62904f53e8ff0de32", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -107,7 +107,7 @@ impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> {\n \n //NOTE: appears to be the only place other then InferCtxt to contain a ParamEnv\n pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n     pub param_env: ParameterEnvironment<'a, 'tcx>,\n }\n \n@@ -154,7 +154,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt) {\n+pub fn check_crate(tcx: &TyCtxt) {\n     tcx.visit_all_items_in_krate(DepNode::MatchCheck, &mut MatchCheckCtxt {\n         tcx: tcx,\n         param_env: tcx.empty_parameter_environment(),\n@@ -433,13 +433,13 @@ fn const_val_to_expr(value: &ConstVal) -> P<hir::Expr> {\n }\n \n pub struct StaticInliner<'a, 'tcx: 'a> {\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n     pub failed: bool,\n     pub renaming_map: Option<&'a mut FnvHashMap<(NodeId, Span), NodeId>>,\n }\n \n impl<'a, 'tcx> StaticInliner<'a, 'tcx> {\n-    pub fn new<'b>(tcx: &'b ty::ctxt<'tcx>,\n+    pub fn new<'b>(tcx: &'b TyCtxt<'tcx>,\n                    renaming_map: Option<&'b mut FnvHashMap<(NodeId, Span), NodeId>>)\n                    -> StaticInliner<'b, 'tcx> {\n         StaticInliner {"}, {"sha": "06030c0021171a2c217ab8153893ce1adb60c442", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -22,7 +22,7 @@ use middle::def::Def;\n use middle::subst::Subst;\n use middle::def_id::DefId;\n use middle::pat_util::def_to_path;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::astconv_util::ast_ty_to_prim_ty;\n use util::num::ToPrimitive;\n use util::nodemap::NodeMap;\n@@ -46,7 +46,7 @@ use std::mem::transmute;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64};\n use std::rc::Rc;\n \n-fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n+fn lookup_variant_by_id<'a>(tcx: &'a TyCtxt,\n                             enum_def: DefId,\n                             variant_def: DefId)\n                             -> Option<&'a Expr> {\n@@ -84,7 +84,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n /// `maybe_ref_id` and `param_substs` are optional and are used for\n /// finding substitutions in associated constants. This generally\n /// happens in late/trans const evaluation.\n-pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n+pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a TyCtxt<'tcx>,\n                                         def_id: DefId,\n                                         maybe_ref_id: Option<ast::NodeId>,\n                                         param_substs: Option<&'tcx subst::Substs<'tcx>>)\n@@ -189,7 +189,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n     }\n }\n \n-fn inline_const_fn_from_external_crate(tcx: &ty::ctxt, def_id: DefId)\n+fn inline_const_fn_from_external_crate(tcx: &TyCtxt, def_id: DefId)\n                                        -> Option<ast::NodeId> {\n     match tcx.extern_const_fns.borrow().get(&def_id) {\n         Some(&ast::DUMMY_NODE_ID) => return None,\n@@ -212,7 +212,7 @@ fn inline_const_fn_from_external_crate(tcx: &ty::ctxt, def_id: DefId)\n     fn_id\n }\n \n-pub fn lookup_const_fn_by_id<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+pub fn lookup_const_fn_by_id<'tcx>(tcx: &TyCtxt<'tcx>, def_id: DefId)\n                                    -> Option<FnLikeNode<'tcx>>\n {\n     let fn_id = if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n@@ -322,7 +322,7 @@ impl ConstVal {\n     }\n }\n \n-pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<hir::Pat> {\n+pub fn const_expr_to_pat(tcx: &TyCtxt, expr: &Expr, span: Span) -> P<hir::Pat> {\n     let pat = match expr.node {\n         hir::ExprTup(ref exprs) =>\n             PatKind::Tup(exprs.iter().map(|expr| const_expr_to_pat(tcx, &expr, span)).collect()),\n@@ -382,7 +382,7 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<hir::Pat>\n     P(hir::Pat { id: expr.id, node: pat, span: span })\n }\n \n-pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> ConstVal {\n+pub fn eval_const_expr(tcx: &TyCtxt, e: &Expr) -> ConstVal {\n     match eval_const_expr_partial(tcx, e, ExprTypeChecked, None) {\n         Ok(r) => r,\n         Err(s) => tcx.sess.span_fatal(s.span, &s.description())\n@@ -542,7 +542,7 @@ pub enum IntTy { I8, I16, I32, I64 }\n pub enum UintTy { U8, U16, U32, U64 }\n \n impl IntTy {\n-    pub fn from(tcx: &ty::ctxt, t: ast::IntTy) -> IntTy {\n+    pub fn from(tcx: &TyCtxt, t: ast::IntTy) -> IntTy {\n         let t = if let ast::IntTy::Is = t {\n             tcx.sess.target.int_type\n         } else {\n@@ -559,7 +559,7 @@ impl IntTy {\n }\n \n impl UintTy {\n-    pub fn from(tcx: &ty::ctxt, t: ast::UintTy) -> UintTy {\n+    pub fn from(tcx: &TyCtxt, t: ast::UintTy) -> UintTy {\n         let t = if let ast::UintTy::Us = t {\n             tcx.sess.target.uint_type\n         } else {\n@@ -810,7 +810,7 @@ pub_fn_checked_op!{ const_uint_checked_shr_via_int(a: u64, b: i64,.. UintTy) {\n /// guaranteed to be evaluatable. `ty_hint` is usually ExprTypeChecked,\n /// but a few places need to evaluate constants during type-checking, like\n /// computing the length of an array. (See also the FIXME above EvalHint.)\n-pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n                                      e: &Expr,\n                                      ty_hint: EvalHint<'tcx>,\n                                      fn_args: FnArgMap) -> EvalResult {\n@@ -1222,7 +1222,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n     Ok(result)\n }\n \n-fn impl_or_trait_container(tcx: &ty::ctxt, def_id: DefId) -> ty::ImplOrTraitItemContainer {\n+fn impl_or_trait_container(tcx: &TyCtxt, def_id: DefId) -> ty::ImplOrTraitItemContainer {\n     // This is intended to be equivalent to tcx.impl_or_trait_item(def_id).container()\n     // for local def_id, but it can be called before tcx.impl_or_trait_items is complete.\n     if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n@@ -1239,7 +1239,7 @@ fn impl_or_trait_container(tcx: &ty::ctxt, def_id: DefId) -> ty::ImplOrTraitItem\n     panic!(\"{:?} is not local\", def_id);\n }\n \n-fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n+fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a TyCtxt<'tcx>,\n                                                 ti: &'tcx hir::TraitItem,\n                                                 trait_id: DefId,\n                                                 rcvr_substs: subst::Substs<'tcx>)\n@@ -1289,7 +1289,7 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n     }\n }\n \n-fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult {\n+fn cast_const<'tcx>(tcx: &TyCtxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult {\n     macro_rules! convert_val {\n         ($intermediate_ty:ty, $const_type:ident, $target_ty:ty) => {\n             match val {\n@@ -1385,7 +1385,7 @@ pub fn compare_const_vals(a: &ConstVal, b: &ConstVal) -> Option<Ordering> {\n     })\n }\n \n-pub fn compare_lit_exprs<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn compare_lit_exprs<'tcx>(tcx: &TyCtxt<'tcx>,\n                                a: &Expr,\n                                b: &Expr) -> Option<Ordering> {\n     let a = match eval_const_expr_partial(tcx, a, ExprTypeChecked, None) {"}, {"sha": "3af987df3a8c265385697d0555ac47426e819fbd", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -26,7 +26,7 @@ use back::svh::Svh;\n use front::map as hir_map;\n use middle::def::{self, Def};\n use middle::lang_items;\n-use middle::ty::{self, Ty, VariantKind};\n+use middle::ty::{self, Ty, TyCtxt, VariantKind};\n use middle::def_id::{DefId, DefIndex};\n use mir::repr::Mir;\n use mir::mir_map::MirMap;\n@@ -137,57 +137,57 @@ pub trait CrateStore<'tcx> : Any {\n     // item info\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n-    fn closure_kind(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+    fn closure_kind(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                     -> ty::ClosureKind;\n-    fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+    fn closure_ty(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                   -> ty::ClosureTy<'tcx>;\n     fn item_variances(&self, def: DefId) -> ty::ItemVariances;\n     fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr>;\n-    fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx>;\n     fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n     fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n     fn item_name(&self, def: DefId) -> ast::Name;\n-    fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx>;\n-    fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_super_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                              -> ty::GenericPredicates<'tcx>;\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n     fn item_symbol(&self, def: DefId) -> String;\n-    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>;\n-    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>;\n+    fn trait_def(&self, tcx: &TyCtxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>;\n+    fn adt_def(&self, tcx: &TyCtxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>;\n     fn method_arg_names(&self, did: DefId) -> Vec<String>;\n     fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>;\n \n     // trait info\n     fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId>;\n-    fn provided_trait_methods(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn provided_trait_methods(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                               -> Vec<Rc<ty::Method<'tcx>>>;\n     fn trait_item_def_ids(&self, def: DefId)\n                           -> Vec<ty::ImplOrTraitItemId>;\n \n     // impl info\n     fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>;\n-    fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn impl_trait_ref(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                       -> Option<ty::TraitRef<'tcx>>;\n     fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity>;\n     fn custom_coerce_unsized_kind(&self, def: DefId)\n                                   -> Option<ty::adjustment::CustomCoerceUnsized>;\n-    fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn associated_consts(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                          -> Vec<Rc<ty::AssociatedConst<'tcx>>>;\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+    fn trait_of_item(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                      -> Option<DefId>;\n-    fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn impl_or_trait_item(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> ty::ImplOrTraitItem<'tcx>;\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool;\n     fn is_defaulted_trait(&self, did: DefId) -> bool;\n     fn is_impl(&self, did: DefId) -> bool;\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n-    fn is_extern_item(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool;\n+    fn is_extern_item(&self, tcx: &TyCtxt<'tcx>, did: DefId) -> bool;\n     fn is_static_method(&self, did: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;\n     fn is_typedef(&self, did: DefId) -> bool;\n@@ -219,9 +219,9 @@ pub trait CrateStore<'tcx> : Any {\n     fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>;\n \n     // misc. metadata\n-    fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn maybe_get_item_ast(&'tcx self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx>;\n-    fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn maybe_get_item_mir(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> Option<Mir<'tcx>>;\n     fn is_item_mir_available(&self, def: DefId) -> bool;\n \n@@ -234,12 +234,12 @@ pub trait CrateStore<'tcx> : Any {\n     // utility functions\n     fn metadata_filename(&self) -> &str;\n     fn metadata_section_name(&self, target: &Target) -> &str;\n-    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>;\n+    fn encode_type(&self, tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>;\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>;\n     fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource;\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>;\n     fn encode_metadata(&self,\n-                       tcx: &ty::ctxt<'tcx>,\n+                       tcx: &TyCtxt<'tcx>,\n                        reexports: &def::ExportMap,\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n@@ -302,61 +302,61 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // item info\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { unimplemented!() }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { unimplemented!() }\n-    fn closure_kind(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+    fn closure_kind(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                     -> ty::ClosureKind  { unimplemented!() }\n-    fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+    fn closure_ty(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                   -> ty::ClosureTy<'tcx>  { unimplemented!() }\n     fn item_variances(&self, def: DefId) -> ty::ItemVariances { unimplemented!() }\n     fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> { unimplemented!() }\n-    fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx> { unimplemented!() }\n     fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n     fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n     fn item_name(&self, def: DefId) -> ast::Name { unimplemented!() }\n-    fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx> { unimplemented!() }\n-    fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_super_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                              -> ty::GenericPredicates<'tcx> { unimplemented!() }\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { unimplemented!() }\n     fn item_symbol(&self, def: DefId) -> String { unimplemented!() }\n-    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>\n+    fn trait_def(&self, tcx: &TyCtxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>\n         { unimplemented!() }\n-    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n+    fn adt_def(&self, tcx: &TyCtxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n         { unimplemented!() }\n     fn method_arg_names(&self, did: DefId) -> Vec<String> { unimplemented!() }\n     fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId> { vec![] }\n \n     // trait info\n     fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId> { vec![] }\n-    fn provided_trait_methods(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn provided_trait_methods(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                               -> Vec<Rc<ty::Method<'tcx>>> { unimplemented!() }\n     fn trait_item_def_ids(&self, def: DefId)\n                           -> Vec<ty::ImplOrTraitItemId> { unimplemented!() }\n \n     // impl info\n     fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>\n         { unimplemented!() }\n-    fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn impl_trait_ref(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                       -> Option<ty::TraitRef<'tcx>> { unimplemented!() }\n     fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity> { unimplemented!() }\n     fn custom_coerce_unsized_kind(&self, def: DefId)\n                                   -> Option<ty::adjustment::CustomCoerceUnsized>\n         { unimplemented!() }\n-    fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn associated_consts(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                          -> Vec<Rc<ty::AssociatedConst<'tcx>>> { unimplemented!() }\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+    fn trait_of_item(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                      -> Option<DefId> { unimplemented!() }\n-    fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn impl_or_trait_item(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> ty::ImplOrTraitItem<'tcx> { unimplemented!() }\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool { unimplemented!() }\n     fn is_defaulted_trait(&self, did: DefId) -> bool { unimplemented!() }\n     fn is_impl(&self, did: DefId) -> bool { unimplemented!() }\n     fn is_default_impl(&self, impl_did: DefId) -> bool { unimplemented!() }\n-    fn is_extern_item(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool { unimplemented!() }\n+    fn is_extern_item(&self, tcx: &TyCtxt<'tcx>, did: DefId) -> bool { unimplemented!() }\n     fn is_static_method(&self, did: DefId) -> bool { unimplemented!() }\n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool { false }\n     fn is_typedef(&self, did: DefId) -> bool { unimplemented!() }\n@@ -398,9 +398,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n         { unimplemented!() }\n \n     // misc. metadata\n-    fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn maybe_get_item_ast(&'tcx self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx> { unimplemented!() }\n-    fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn maybe_get_item_mir(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> Option<Mir<'tcx>> { unimplemented!() }\n     fn is_item_mir_available(&self, def: DefId) -> bool {\n         unimplemented!()\n@@ -415,14 +415,14 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // utility functions\n     fn metadata_filename(&self) -> &str { unimplemented!() }\n     fn metadata_section_name(&self, target: &Target) -> &str { unimplemented!() }\n-    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>\n+    fn encode_type(&self, tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>\n         { unimplemented!() }\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>\n         { vec![] }\n     fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource { unimplemented!() }\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum> { None }\n     fn encode_metadata(&self,\n-                       tcx: &ty::ctxt<'tcx>,\n+                       tcx: &TyCtxt<'tcx>,\n                        reexports: &def::ExportMap,\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n@@ -439,7 +439,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n /// be available to them. For example, we can automatically translate def-id and\n /// span information during decoding because the decoding context knows which\n /// crate the data is decoded from. Or it allows to make ty::Ty decodable\n-/// because the context has access to the ty::ctxt that is needed for creating\n+/// because the context has access to the TyCtxt that is needed for creating\n /// ty::Ty instances.\n ///\n /// Note, however, that this only works for RBML-based encoding and decoding at\n@@ -450,12 +450,12 @@ pub mod tls {\n     use serialize;\n     use std::cell::Cell;\n     use std::mem;\n-    use middle::ty::{self, Ty};\n+    use middle::ty::{self, Ty, TyCtxt};\n     use middle::subst::Substs;\n     use middle::def_id::DefId;\n \n     pub trait EncodingContext<'tcx> {\n-        fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n+        fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx>;\n         fn encode_ty(&self, encoder: &mut OpaqueEncoder, t: Ty<'tcx>);\n         fn encode_substs(&self, encoder: &mut OpaqueEncoder, substs: &Substs<'tcx>);\n     }\n@@ -522,7 +522,7 @@ pub mod tls {\n     }\n \n     pub trait DecodingContext<'tcx> {\n-        fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n+        fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx>;\n         fn decode_ty(&self, decoder: &mut OpaqueDecoder) -> ty::Ty<'tcx>;\n         fn decode_substs(&self, decoder: &mut OpaqueDecoder) -> Substs<'tcx>;\n         fn translate_def_id(&self, def_id: DefId) -> DefId;"}, {"sha": "c746fab3ea13b2a2022f0726913314b68ccaa7cd", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -16,7 +16,7 @@\n \n use middle::cfg;\n use middle::cfg::CFGIndex;\n-use middle::ty;\n+use middle::ty::TyCtxt;\n use std::io;\n use std::mem;\n use std::usize;\n@@ -38,7 +38,7 @@ pub enum EntryOrExit {\n \n #[derive(Clone)]\n pub struct DataFlowContext<'a, 'tcx: 'a, O> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n \n     /// a name for the analysis using this dataflow instance\n     analysis_name: &'static str,\n@@ -223,7 +223,7 @@ pub enum KillFrom {\n }\n \n impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n-    pub fn new(tcx: &'a ty::ctxt<'tcx>,\n+    pub fn new(tcx: &'a TyCtxt<'tcx>,\n                analysis_name: &'static str,\n                decl: Option<&hir::FnDecl>,\n                cfg: &cfg::CFG,"}, {"sha": "f1b38ea8b81302cf302b587046527981143a397e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -18,6 +18,7 @@ use rustc_front::hir::{self, PatKind};\n use rustc_front::intravisit::{self, Visitor};\n \n use middle::{pat_util, privacy, ty};\n+use middle::ty::TyCtxt;\n use middle::def::Def;\n use middle::def_id::{DefId};\n use lint;\n@@ -30,7 +31,7 @@ use syntax::attr::{self, AttrMetaMethods};\n // explored. For example, if it's a live NodeItem that is a\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n-fn should_explore(tcx: &ty::ctxt, node_id: ast::NodeId) -> bool {\n+fn should_explore(tcx: &TyCtxt, node_id: ast::NodeId) -> bool {\n     match tcx.map.find(node_id) {\n         Some(ast_map::NodeItem(..)) |\n         Some(ast_map::NodeImplItem(..)) |\n@@ -44,7 +45,7 @@ fn should_explore(tcx: &ty::ctxt, node_id: ast::NodeId) -> bool {\n \n struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     worklist: Vec<ast::NodeId>,\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     live_symbols: Box<HashSet<ast::NodeId>>,\n     struct_has_extern_repr: bool,\n     ignore_non_const_paths: bool,\n@@ -53,7 +54,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n-    fn new(tcx: &'a ty::ctxt<'tcx>,\n+    fn new(tcx: &'a TyCtxt<'tcx>,\n            worklist: Vec<ast::NodeId>) -> MarkSymbolVisitor<'a, 'tcx> {\n         MarkSymbolVisitor {\n             worklist: worklist,\n@@ -367,7 +368,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n     }\n }\n \n-fn create_and_seed_worklist(tcx: &ty::ctxt,\n+fn create_and_seed_worklist(tcx: &TyCtxt,\n                             access_levels: &privacy::AccessLevels,\n                             krate: &hir::Crate) -> Vec<ast::NodeId> {\n     let mut worklist = Vec::new();\n@@ -390,7 +391,7 @@ fn create_and_seed_worklist(tcx: &ty::ctxt,\n     return life_seeder.worklist;\n }\n \n-fn find_live(tcx: &ty::ctxt,\n+fn find_live(tcx: &TyCtxt,\n              access_levels: &privacy::AccessLevels,\n              krate: &hir::Crate)\n              -> Box<HashSet<ast::NodeId>> {\n@@ -410,7 +411,7 @@ fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> {\n }\n \n struct DeadVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     live_symbols: Box<HashSet<ast::NodeId>>,\n }\n \n@@ -587,7 +588,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt, access_levels: &privacy::AccessLevels) {\n+pub fn check_crate(tcx: &TyCtxt, access_levels: &privacy::AccessLevels) {\n     let _task = tcx.dep_graph.in_task(DepNode::DeadCheck);\n     let krate = tcx.map.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "e3d05388f5218a69b2df78b3356e50e08972e0d5", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -14,7 +14,7 @@ use self::RootUnsafeContext::*;\n \n use dep_graph::DepNode;\n use middle::def::Def;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::MethodCall;\n \n use syntax::ast;\n@@ -50,7 +50,7 @@ fn type_is_unsafe_function(ty: Ty) -> bool {\n }\n \n struct EffectCheckVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n \n     /// Whether we're in an unsafe context.\n     unsafe_context: UnsafeContext,\n@@ -182,7 +182,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt) {\n+pub fn check_crate(tcx: &TyCtxt) {\n     let _task = tcx.dep_graph.in_task(DepNode::EffectCheck);\n \n     let mut visitor = EffectCheckVisitor {"}, {"sha": "8b042e73e796a0fe9e96a6caa11ec7a574e998ea", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -24,8 +24,7 @@ use middle::def::Def;\n use middle::def_id::{DefId};\n use middle::infer;\n use middle::mem_categorization as mc;\n-use middle::ty;\n-use middle::ty::adjustment;\n+use middle::ty::{self, TyCtxt, adjustment};\n \n use rustc_front::hir::{self, PatKind};\n \n@@ -210,7 +209,7 @@ enum OverloadedCallType {\n }\n \n impl OverloadedCallType {\n-    fn from_trait_id(tcx: &ty::ctxt, trait_id: DefId)\n+    fn from_trait_id(tcx: &TyCtxt, trait_id: DefId)\n                      -> OverloadedCallType {\n         for &(maybe_function_trait, overloaded_call_type) in &[\n             (tcx.lang_items.fn_once_trait(), FnOnceOverloadedCall),\n@@ -228,7 +227,7 @@ impl OverloadedCallType {\n         tcx.sess.bug(\"overloaded call didn't map to known function trait\")\n     }\n \n-    fn from_method_id(tcx: &ty::ctxt, method_id: DefId)\n+    fn from_method_id(tcx: &TyCtxt, method_id: DefId)\n                       -> OverloadedCallType {\n         let method = tcx.impl_or_trait_item(method_id);\n         OverloadedCallType::from_trait_id(tcx, method.container().id())\n@@ -307,7 +306,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         }\n     }\n \n-    fn tcx(&self) -> &'t ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'t TyCtxt<'tcx> {\n         self.typer.tcx\n     }\n "}, {"sha": "cb45a3e2507c9274eb7a9fec117a36889402cd74", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@\n //! `TransitiveRelation` type and use that to decide when one free\n //! region outlives another and so forth.\n \n-use middle::ty::{self, FreeRegion, Region};\n+use middle::ty::{self, TyCtxt, FreeRegion, Region};\n use middle::ty::wf::ImpliedBound;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n@@ -49,7 +49,7 @@ impl FreeRegionMap {\n     }\n \n     pub fn relate_free_regions_from_predicates<'tcx>(&mut self,\n-                                                     tcx: &ty::ctxt<'tcx>,\n+                                                     tcx: &TyCtxt<'tcx>,\n                                                      predicates: &[ty::Predicate<'tcx>]) {\n         debug!(\"relate_free_regions_from_predicates(predicates={:?})\", predicates);\n         for predicate in predicates {\n@@ -121,7 +121,7 @@ impl FreeRegionMap {\n     /// Determines whether one region is a subregion of another.  This is intended to run *after\n     /// inference* and sadly the logic is somewhat duplicated with the code in infer.rs.\n     pub fn is_subregion_of(&self,\n-                           tcx: &ty::ctxt,\n+                           tcx: &TyCtxt,\n                            sub_region: ty::Region,\n                            super_region: ty::Region)\n                            -> bool {"}, {"sha": "cb6542856be24aa51c32731b2c7dd71f44e55cb6", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -28,7 +28,7 @@\n use super::combine::{self, CombineFields};\n use super::type_variable::{BiTo};\n \n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::TyVar;\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n@@ -45,7 +45,7 @@ impl<'a, 'tcx> Bivariate<'a, 'tcx> {\n impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Bivariate<'a, 'tcx> {\n     fn tag(&self) -> &'static str { \"Bivariate\" }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n "}, {"sha": "cd4a2eb2d93b48279805b8425141c279e40078c5", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -42,7 +42,7 @@ use super::{MiscVariable, TypeTrace};\n use super::type_variable::{RelationDir, BiTo, EqTo, SubtypeOf, SupertypeOf};\n \n use middle::ty::{IntType, UintType};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::error::TypeError;\n use middle::ty::fold::{TypeFolder, TypeFoldable};\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n@@ -149,7 +149,7 @@ fn unify_float_variable<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n }\n \n impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n-    pub fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    pub fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -293,7 +293,7 @@ struct Generalizer<'cx, 'tcx:'cx> {\n }\n \n impl<'cx, 'tcx> ty::fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "a10568d1fa33a8c5f59b9a0effc694011044b9c5", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -13,7 +13,7 @@ use super::higher_ranked::HigherRankedRelations;\n use super::{Subtype};\n use super::type_variable::{EqTo};\n \n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::TyVar;\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n@@ -31,7 +31,7 @@ impl<'a, 'tcx> Equate<'a, 'tcx> {\n impl<'a, 'tcx> TypeRelation<'a,'tcx> for Equate<'a, 'tcx> {\n     fn tag(&self) -> &'static str { \"Equate\" }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n "}, {"sha": "2f1af4184e5496f444cb6f523b229bf6bb09aed1", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -82,7 +82,7 @@ use middle::def_id::DefId;\n use middle::infer::{self, TypeOrigin};\n use middle::region;\n use middle::subst;\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use middle::ty::{Region, ReFree};\n use middle::ty::error::TypeError;\n \n@@ -95,7 +95,7 @@ use syntax::codemap::{self, Pos, Span};\n use syntax::parse::token;\n use syntax::ptr::P;\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn note_and_explain_region(&self,\n                                    err: &mut DiagnosticBuilder,\n                                    prefix: &str,\n@@ -112,7 +112,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n             }\n         }\n \n-        fn explain_span(tcx: &ty::ctxt, heading: &str, span: Span)\n+        fn explain_span(tcx: &TyCtxt, heading: &str, span: Span)\n                         -> (String, Option<Span>) {\n             let lo = tcx.sess.codemap().lookup_char_pos_adj(span.lo);\n             (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize()),\n@@ -419,7 +419,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n \n-        fn free_regions_from_same_fn(tcx: &ty::ctxt,\n+        fn free_regions_from_same_fn(tcx: &TyCtxt,\n                                      sub: Region,\n                                      sup: Region)\n                                      -> Option<FreeRegionsFromSameFn> {\n@@ -1057,7 +1057,7 @@ struct RebuildPathInfo<'a> {\n }\n \n struct Rebuilder<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     fn_decl: &'a hir::FnDecl,\n     expl_self_opt: Option<&'a hir::ExplicitSelf_>,\n     generics: &'a hir::Generics,\n@@ -1073,7 +1073,7 @@ enum FreshOrKept {\n }\n \n impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n-    fn new(tcx: &'a ty::ctxt<'tcx>,\n+    fn new(tcx: &'a TyCtxt<'tcx>,\n            fn_decl: &'a hir::FnDecl,\n            expl_self_opt: Option<&'a hir::ExplicitSelf_>,\n            generics: &'a hir::Generics,\n@@ -1877,7 +1877,7 @@ impl<'tcx> Resolvable<'tcx> for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n-fn lifetimes_in_scope(tcx: &ty::ctxt,\n+fn lifetimes_in_scope(tcx: &TyCtxt,\n                       scope_id: ast::NodeId)\n                       -> Vec<hir::LifetimeDef> {\n     let mut taken = Vec::new();"}, {"sha": "b64fa688d5163480d83014a6996c01b2675d2c83", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -30,7 +30,7 @@\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n \n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use middle::ty::fold::TypeFolder;\n use std::collections::hash_map::{self, Entry};\n \n@@ -78,7 +78,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> &'b ty::ctxt<'tcx> {\n+    fn tcx<'b>(&'b self) -> &'b TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "82803acd393e98cf5e74c7596894306b23dc252b", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -14,7 +14,7 @@ use super::InferCtxt;\n use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Greatest lower bound\" (common subtype)\n@@ -31,7 +31,7 @@ impl<'a, 'tcx> Glb<'a, 'tcx> {\n impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Glb<'a, 'tcx> {\n     fn tag(&self) -> &'static str { \"Glb\" }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n "}, {"sha": "9b6625886a47c0de7da339d378d8aa64a5751e3f", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -14,7 +14,7 @@\n use super::{CombinedSnapshot, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::CombineFields;\n \n-use middle::ty::{self, Binder, TypeFoldable};\n+use middle::ty::{self, TyCtxt, Binder, TypeFoldable};\n use middle::ty::error::TypeError;\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use syntax::codemap::Span;\n@@ -351,7 +351,7 @@ fn is_var_in_set(new_vars: &[ty::RegionVid], r: ty::Region) -> bool {\n     }\n }\n \n-fn fold_regions_in<'tcx, T, F>(tcx: &ty::ctxt<'tcx>,\n+fn fold_regions_in<'tcx, T, F>(tcx: &TyCtxt<'tcx>,\n                                unbound_value: &T,\n                                mut fldr: F)\n                                -> T"}, {"sha": "2ab0b92e42a33d5d5e903052c17d22e0cc6cd9fc", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -14,7 +14,7 @@ use super::InferCtxt;\n use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Least upper bound\" (common supertype)\n@@ -31,7 +31,7 @@ impl<'a, 'tcx> Lub<'a, 'tcx> {\n impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Lub<'a, 'tcx> {\n     fn tag(&self) -> &'static str { \"Lub\" }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n "}, {"sha": "b9a5b32b71d825e0626c52927c3f1819c230b1a7", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -30,7 +30,7 @@ use middle::subst::Subst;\n use middle::traits;\n use middle::ty::adjustment;\n use middle::ty::{TyVid, IntVid, FloatVid};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use middle::ty::fold::{TypeFolder, TypeFoldable};\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n@@ -68,7 +68,7 @@ pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n pub type FixupResult<T> = Result<T, FixupError>; // \"fixup result\"\n \n pub struct InferCtxt<'a, 'tcx: 'a> {\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n \n     pub tables: &'a RefCell<ty::Tables<'tcx>>,\n \n@@ -352,7 +352,7 @@ pub fn fixup_err_to_string(f: FixupError) -> String {\n     }\n }\n \n-pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n+pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a TyCtxt<'tcx>,\n                                 tables: &'a RefCell<ty::Tables<'tcx>>,\n                                 param_env: Option<ty::ParameterEnvironment<'a, 'tcx>>)\n                                 -> InferCtxt<'a, 'tcx> {\n@@ -370,7 +370,7 @@ pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n     }\n }\n \n-pub fn normalizing_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n+pub fn normalizing_infer_ctxt<'a, 'tcx>(tcx: &'a TyCtxt<'tcx>,\n                                         tables: &'a RefCell<ty::Tables<'tcx>>)\n                                         -> InferCtxt<'a, 'tcx> {\n     let mut infcx = new_infer_ctxt(tcx, tables, None);\n@@ -501,7 +501,7 @@ pub struct CombinedSnapshot {\n     region_vars_snapshot: RegionSnapshot,\n }\n \n-pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n+pub fn normalize_associated_type<'tcx,T>(tcx: &TyCtxt<'tcx>, value: &T) -> T\n     where T : TypeFoldable<'tcx>\n {\n     debug!(\"normalize_associated_type(t={:?})\", value);\n@@ -1553,7 +1553,7 @@ impl<'tcx> TypeTrace<'tcx> {\n         }\n     }\n \n-    pub fn dummy(tcx: &ty::ctxt<'tcx>) -> TypeTrace<'tcx> {\n+    pub fn dummy(tcx: &TyCtxt<'tcx>) -> TypeTrace<'tcx> {\n         TypeTrace {\n             origin: TypeOrigin::Misc(codemap::DUMMY_SP),\n             values: Types(ExpectedFound {"}, {"sha": "b6c9b5636d9af1488f39bb55bcfee56c1f0b4e38", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -18,7 +18,7 @@\n /// For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n \n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use middle::region::CodeExtent;\n use super::Constraint;\n use middle::infer::SubregionOrigin;\n@@ -119,7 +119,7 @@ pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a,\n }\n \n struct ConstraintGraph<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     graph_name: String,\n     map: &'a FnvHashMap<Constraint, SubregionOrigin<'tcx>>,\n     node_ids: FnvHashMap<Node, usize>,\n@@ -139,7 +139,7 @@ enum Edge {\n }\n \n impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> {\n-    fn new(tcx: &'a ty::ctxt<'tcx>,\n+    fn new(tcx: &'a TyCtxt<'tcx>,\n            name: String,\n            map: &'a ConstraintMap<'tcx>)\n            -> ConstraintGraph<'a, 'tcx> {\n@@ -254,7 +254,7 @@ impl<'a, 'tcx> dot::GraphWalk<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> {\n \n pub type ConstraintMap<'tcx> = FnvHashMap<Constraint, SubregionOrigin<'tcx>>;\n \n-fn dump_region_constraints_to<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n+fn dump_region_constraints_to<'a, 'tcx: 'a>(tcx: &'a TyCtxt<'tcx>,\n                                             map: &ConstraintMap<'tcx>,\n                                             path: &str)\n                                             -> io::Result<()> {"}, {"sha": "36462b68288c9bf7d0f8206c88569a2493a36900", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -23,7 +23,7 @@ use super::unify_key;\n use rustc_data_structures::graph::{self, Direction, NodeIndex};\n use rustc_data_structures::unify::{self, UnificationTable};\n use middle::free_region::FreeRegionMap;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::{BoundRegion, Region, RegionVid};\n use middle::ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound};\n use middle::ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n@@ -187,7 +187,7 @@ impl SameRegions {\n pub type CombineMap = FnvHashMap<TwoRegions, RegionVid>;\n \n pub struct RegionVarBindings<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     var_origins: RefCell<Vec<RegionVariableOrigin>>,\n \n     // Constraints of the form `A <= B` introduced by the region\n@@ -250,7 +250,7 @@ pub struct RegionSnapshot {\n }\n \n impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n-    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> RegionVarBindings<'a, 'tcx> {\n+    pub fn new(tcx: &'a TyCtxt<'tcx>) -> RegionVarBindings<'a, 'tcx> {\n         RegionVarBindings {\n             tcx: tcx,\n             var_origins: RefCell::new(Vec::new()),\n@@ -1358,7 +1358,7 @@ impl<'tcx> fmt::Display for GenericKind<'tcx> {\n }\n \n impl<'tcx> GenericKind<'tcx> {\n-    pub fn to_ty(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty(&self, tcx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n             GenericKind::Projection(ref p) => tcx.mk_projection(p.trait_ref.clone(), p.item_name),\n@@ -1420,7 +1420,7 @@ impl VerifyBound {\n     }\n \n     fn is_met<'tcx>(&self,\n-                    tcx: &ty::ctxt<'tcx>,\n+                    tcx: &TyCtxt<'tcx>,\n                     free_regions: &FreeRegionMap,\n                     var_values: &Vec<VarValue>,\n                     min: ty::Region)"}, {"sha": "8c6105898446ac83991bd17a31304abc58f4b27e", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use super::{InferCtxt, FixupError, FixupResult};\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n ///////////////////////////////////////////////////////////////////////////\n // OPPORTUNISTIC TYPE RESOLVER\n@@ -30,7 +30,7 @@ impl<'a, 'tcx> OpportunisticTypeResolver<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -58,7 +58,7 @@ impl<'a, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -104,7 +104,7 @@ struct FullTypeResolver<'a, 'tcx:'a> {\n }\n \n impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "e13d29b8b4215c7bbe6402d52dd503629c83386d", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -13,7 +13,7 @@ use super::higher_ranked::HigherRankedRelations;\n use super::SubregionOrigin;\n use super::type_variable::{SubtypeOf, SupertypeOf};\n \n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::TyVar;\n use middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use std::mem;\n@@ -31,7 +31,7 @@ impl<'a, 'tcx> Sub<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Sub<'a, 'tcx> {\n     fn tag(&self) -> &'static str { \"Sub\" }\n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.infcx.tcx }\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> { self.fields.infcx.tcx }\n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n     fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R"}, {"sha": "5008a92a4f59d7facdfdac69b5acb3e70b0283b1", "filename": "src/librustc/middle/infer/unify_key.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify_key.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use syntax::ast;\n-use middle::ty::{self, IntVarValue, Ty};\n+use middle::ty::{self, IntVarValue, Ty, TyCtxt};\n use rustc_data_structures::unify::{Combine, UnifyKey};\n \n pub trait ToType<'tcx> {\n-    fn to_type(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx>;\n+    fn to_type(&self, tcx: &TyCtxt<'tcx>) -> Ty<'tcx>;\n }\n \n impl UnifyKey for ty::IntVid {\n@@ -51,7 +51,7 @@ impl UnifyKey for ty::RegionVid {\n }\n \n impl<'tcx> ToType<'tcx> for IntVarValue {\n-    fn to_type(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    fn to_type(&self, tcx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             ty::IntType(i) => tcx.mk_mach_int(i),\n             ty::UintType(i) => tcx.mk_mach_uint(i),\n@@ -69,7 +69,7 @@ impl UnifyKey for ty::FloatVid {\n }\n \n impl<'tcx> ToType<'tcx> for ast::FloatTy {\n-    fn to_type(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    fn to_type(&self, tcx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         tcx.mk_mach_float(*self)\n     }\n }"}, {"sha": "7de8904e3f26fa84d7ca1a6e0a94dcc02eb0a993", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,7 +12,7 @@ use dep_graph::DepNode;\n use middle::def::Def;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n-use middle::ty::{TransmuteRestriction, ctxt, TyBareFn};\n+use middle::ty::{TransmuteRestriction, TyCtxt, TyBareFn};\n use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n@@ -23,7 +23,7 @@ use syntax::codemap::Span;\n use rustc_front::intravisit::{self, Visitor, FnKind};\n use rustc_front::hir;\n \n-pub fn check_crate(tcx: &ctxt) {\n+pub fn check_crate(tcx: &TyCtxt) {\n     let mut visitor = IntrinsicCheckingVisitor {\n         tcx: tcx,\n         param_envs: Vec::new(),\n@@ -34,7 +34,7 @@ pub fn check_crate(tcx: &ctxt) {\n }\n \n struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n \n     // As we traverse the AST, we keep a stack of the parameter\n     // environments for each function we encounter. When we find a"}, {"sha": "81f0cb1fbb2a949db1b4d2d35bc7e485f2deac8f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -112,7 +112,7 @@ use self::VarKind::*;\n use dep_graph::DepNode;\n use middle::def::*;\n use middle::pat_util;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use lint;\n use util::nodemap::NodeMap;\n \n@@ -166,7 +166,7 @@ enum LiveNodeKind {\n     ExitNode\n }\n \n-fn live_node_kind_to_string(lnk: LiveNodeKind, cx: &ty::ctxt) -> String {\n+fn live_node_kind_to_string(lnk: LiveNodeKind, cx: &TyCtxt) -> String {\n     let cm = cx.sess.codemap();\n     match lnk {\n         FreeVarNode(s) => {\n@@ -192,7 +192,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> {\n     fn visit_arm(&mut self, a: &hir::Arm) { visit_arm(self, a); }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt) {\n+pub fn check_crate(tcx: &TyCtxt) {\n     let _task = tcx.dep_graph.in_task(DepNode::Liveness);\n     tcx.map.krate().visit_all_items(&mut IrMaps::new(tcx));\n     tcx.sess.abort_if_errors();\n@@ -260,7 +260,7 @@ enum VarKind {\n }\n \n struct IrMaps<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n \n     num_live_nodes: usize,\n     num_vars: usize,\n@@ -272,7 +272,7 @@ struct IrMaps<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n-    fn new(tcx: &'a ty::ctxt<'tcx>) -> IrMaps<'a, 'tcx> {\n+    fn new(tcx: &'a TyCtxt<'tcx>) -> IrMaps<'a, 'tcx> {\n         IrMaps {\n             tcx: tcx,\n             num_live_nodes: 0,"}, {"sha": "11ef1dbd70556ce23f79d7c77ae5d9b185192c14", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -77,7 +77,7 @@ use middle::infer;\n use middle::const_qualif::ConstQualif;\n use middle::def::Def;\n use middle::ty::adjustment;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n \n use rustc_front::hir::{MutImmutable, MutMutable, PatKind};\n use rustc_front::hir;\n@@ -302,7 +302,7 @@ impl MutabilityCategory {\n         ret\n     }\n \n-    fn from_local(tcx: &ty::ctxt, id: ast::NodeId) -> MutabilityCategory {\n+    fn from_local(tcx: &TyCtxt, id: ast::NodeId) -> MutabilityCategory {\n         let ret = match tcx.map.get(id) {\n             ast_map::NodeLocal(p) => match p.node {\n                 PatKind::Ident(bind_mode, _, _) => {\n@@ -363,7 +363,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n         MemCategorizationContext { typer: typer }\n     }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.typer.tcx\n     }\n \n@@ -1081,7 +1081,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n         /// In a pattern like [a, b, ..c], normally `c` has slice type, but if you have [a, b,\n         /// ..ref c], then the type of `ref c` will be `&&[]`, so to extract the slice details we\n         /// have to recurse through rptrs.\n-        fn vec_slice_info(tcx: &ty::ctxt,\n+        fn vec_slice_info(tcx: &TyCtxt,\n                           pat: &hir::Pat,\n                           slice_ty: Ty)\n                           -> (hir::Mutability, ty::Region) {\n@@ -1387,7 +1387,7 @@ impl<'tcx> cmt_<'tcx> {\n     }\n \n     /// Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.\n-    pub fn freely_aliasable(&self, ctxt: &ty::ctxt<'tcx>)\n+    pub fn freely_aliasable(&self, ctxt: &TyCtxt<'tcx>)\n                             -> Aliasability {\n         // Maybe non-obvious: copied upvars can only be considered\n         // non-aliasable in once closures, since any other kind can be\n@@ -1462,7 +1462,7 @@ impl<'tcx> cmt_<'tcx> {\n     }\n \n \n-    pub fn descriptive_string(&self, tcx: &ty::ctxt) -> String {\n+    pub fn descriptive_string(&self, tcx: &TyCtxt) -> String {\n         match self.cat {\n             Categorization::StaticItem => {\n                 \"static item\".to_string()"}, {"sha": "81166945115bbcf4468c87ac1f98b3eccf63bc06", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -10,7 +10,7 @@\n \n use middle::def::*;\n use middle::def_id::DefId;\n-use middle::ty;\n+use middle::ty::TyCtxt;\n use util::nodemap::FnvHashMap;\n \n use syntax::ast;\n@@ -210,7 +210,7 @@ pub fn simple_name<'a>(pat: &'a hir::Pat) -> Option<ast::Name> {\n     }\n }\n \n-pub fn def_to_path(tcx: &ty::ctxt, id: DefId) -> hir::Path {\n+pub fn def_to_path(tcx: &TyCtxt, id: DefId) -> hir::Path {\n     tcx.with_path(id, |path| hir::Path {\n         global: false,\n         segments: path.last().map(|elem| hir::PathSegment {"}, {"sha": "601f069513d128fe6571df98531b67217e0aa26e", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -19,7 +19,7 @@ use dep_graph::DepNode;\n use front::map as ast_map;\n use middle::def::Def;\n use middle::def_id::DefId;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use middle::privacy;\n use session::config;\n use util::nodemap::NodeSet;\n@@ -55,7 +55,7 @@ fn item_might_be_inlined(item: &hir::Item) -> bool {\n     }\n }\n \n-fn method_might_be_inlined(tcx: &ty::ctxt, sig: &hir::MethodSig,\n+fn method_might_be_inlined(tcx: &TyCtxt, sig: &hir::MethodSig,\n                            impl_item: &hir::ImplItem,\n                            impl_src: DefId) -> bool {\n     if attr::requests_inline(&impl_item.attrs) ||\n@@ -77,7 +77,7 @@ fn method_might_be_inlined(tcx: &ty::ctxt, sig: &hir::MethodSig,\n // Information needed while computing reachability.\n struct ReachableContext<'a, 'tcx: 'a> {\n     // The type context.\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     // The set of items which must be exported in the linkage sense.\n     reachable_symbols: NodeSet,\n     // A worklist of item IDs. Each item ID in this worklist will be inlined\n@@ -143,7 +143,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n \n impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // Creates a new reachability computation context.\n-    fn new(tcx: &'a ty::ctxt<'tcx>) -> ReachableContext<'a, 'tcx> {\n+    fn new(tcx: &'a TyCtxt<'tcx>) -> ReachableContext<'a, 'tcx> {\n         let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n             *ty != config::CrateTypeExecutable\n         });\n@@ -349,7 +349,7 @@ impl<'a, 'v> Visitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n     }\n }\n \n-pub fn find_reachable(tcx: &ty::ctxt,\n+pub fn find_reachable(tcx: &TyCtxt,\n                       access_levels: &privacy::AccessLevels)\n                       -> NodeSet {\n     let _task = tcx.dep_graph.in_task(DepNode::Reachability);"}, {"sha": "2d92742ed0f2098c26bb0bd2c46f50427ae4a0b7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -20,7 +20,7 @@ use lint;\n use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def::Def;\n use middle::def_id::{CRATE_DEF_INDEX, DefId};\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::parse::token::InternedString;\n use syntax::codemap::{Span, DUMMY_SP};\n@@ -72,7 +72,7 @@ pub struct Index<'tcx> {\n \n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n     parent_depr: Option<Deprecation>,\n@@ -279,7 +279,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n \n impl<'tcx> Index<'tcx> {\n     /// Construct the stability index for a crate being compiled.\n-    pub fn build(&mut self, tcx: &ty::ctxt<'tcx>, access_levels: &AccessLevels) {\n+    pub fn build(&mut self, tcx: &TyCtxt<'tcx>, access_levels: &AccessLevels) {\n         let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.map.krate();\n         let mut annotator = Annotator {\n@@ -319,7 +319,7 @@ impl<'tcx> Index<'tcx> {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors. Returns a list of all\n /// features used.\n-pub fn check_unstable_api_usage(tcx: &ty::ctxt)\n+pub fn check_unstable_api_usage(tcx: &TyCtxt)\n                                 -> FnvHashMap<InternedString, StabilityLevel> {\n     let _task = tcx.dep_graph.in_task(DepNode::StabilityCheck);\n     let ref active_lib_features = tcx.sess.features.borrow().declared_lib_features;\n@@ -339,7 +339,7 @@ pub fn check_unstable_api_usage(tcx: &ty::ctxt)\n }\n \n struct Checker<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     active_features: FnvHashSet<InternedString>,\n     used_features: FnvHashMap<InternedString, StabilityLevel>,\n     // Within a block where feature gate checking can be skipped.\n@@ -466,7 +466,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n }\n \n /// Helper for discovering nodes to check for stability\n-pub fn check_item(tcx: &ty::ctxt, item: &hir::Item, warn_about_defns: bool,\n+pub fn check_item(tcx: &TyCtxt, item: &hir::Item, warn_about_defns: bool,\n                   cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Deprecation>)) {\n     match item.node {\n         hir::ItemExternCrate(_) => {\n@@ -503,7 +503,7 @@ pub fn check_item(tcx: &ty::ctxt, item: &hir::Item, warn_about_defns: bool,\n }\n \n /// Helper for discovering nodes to check for stability\n-pub fn check_expr(tcx: &ty::ctxt, e: &hir::Expr,\n+pub fn check_expr(tcx: &TyCtxt, e: &hir::Expr,\n                   cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Deprecation>)) {\n     let span;\n     let id = match e.node {\n@@ -564,7 +564,7 @@ pub fn check_expr(tcx: &ty::ctxt, e: &hir::Expr,\n     maybe_do_stability_check(tcx, id, span, cb);\n }\n \n-pub fn check_path(tcx: &ty::ctxt, path: &hir::Path, id: ast::NodeId,\n+pub fn check_path(tcx: &TyCtxt, path: &hir::Path, id: ast::NodeId,\n                   cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Deprecation>)) {\n     match tcx.def_map.borrow().get(&id).map(|d| d.full_def()) {\n         Some(Def::PrimTy(..)) => {}\n@@ -576,7 +576,7 @@ pub fn check_path(tcx: &ty::ctxt, path: &hir::Path, id: ast::NodeId,\n     }\n }\n \n-pub fn check_path_list_item(tcx: &ty::ctxt, item: &hir::PathListItem,\n+pub fn check_path_list_item(tcx: &TyCtxt, item: &hir::PathListItem,\n                   cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Deprecation>)) {\n     match tcx.def_map.borrow().get(&item.node.id()).map(|d| d.full_def()) {\n         Some(Def::PrimTy(..)) => {}\n@@ -587,7 +587,7 @@ pub fn check_path_list_item(tcx: &ty::ctxt, item: &hir::PathListItem,\n     }\n }\n \n-pub fn check_pat(tcx: &ty::ctxt, pat: &hir::Pat,\n+pub fn check_pat(tcx: &TyCtxt, pat: &hir::Pat,\n                  cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Deprecation>)) {\n     debug!(\"check_pat(pat = {:?})\", pat);\n     if is_internal(tcx, pat.span) { return; }\n@@ -616,7 +616,7 @@ pub fn check_pat(tcx: &ty::ctxt, pat: &hir::Pat,\n     }\n }\n \n-fn maybe_do_stability_check(tcx: &ty::ctxt, id: DefId, span: Span,\n+fn maybe_do_stability_check(tcx: &TyCtxt, id: DefId, span: Span,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>, &Option<Deprecation>)) {\n     if is_internal(tcx, span) {\n@@ -634,11 +634,11 @@ fn maybe_do_stability_check(tcx: &ty::ctxt, id: DefId, span: Span,\n     cb(id, span, &stability, &deprecation);\n }\n \n-fn is_internal(tcx: &ty::ctxt, span: Span) -> bool {\n+fn is_internal(tcx: &TyCtxt, span: Span) -> bool {\n     tcx.sess.codemap().span_allows_unstable(span)\n }\n \n-fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool {\n+fn is_staged_api(tcx: &TyCtxt, id: DefId) -> bool {\n     match tcx.trait_item_of_item(id) {\n         Some(ty::MethodTraitItemId(trait_method_id))\n             if trait_method_id != id => {\n@@ -653,7 +653,7 @@ fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool {\n \n /// Lookup the stability for a node, loading external crate\n /// metadata as necessary.\n-pub fn lookup_stability<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> {\n+pub fn lookup_stability<'tcx>(tcx: &TyCtxt<'tcx>, id: DefId) -> Option<&'tcx Stability> {\n     if let Some(st) = tcx.stability.borrow().stab_map.get(&id) {\n         return *st;\n     }\n@@ -663,7 +663,7 @@ pub fn lookup_stability<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx S\n     st\n }\n \n-pub fn lookup_deprecation<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<Deprecation> {\n+pub fn lookup_deprecation<'tcx>(tcx: &TyCtxt<'tcx>, id: DefId) -> Option<Deprecation> {\n     if let Some(depr) = tcx.stability.borrow().depr_map.get(&id) {\n         return depr.clone();\n     }\n@@ -673,7 +673,7 @@ pub fn lookup_deprecation<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<Depre\n     depr\n }\n \n-fn lookup_stability_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> {\n+fn lookup_stability_uncached<'tcx>(tcx: &TyCtxt<'tcx>, id: DefId) -> Option<&'tcx Stability> {\n     debug!(\"lookup(id={:?})\", id);\n     if id.is_local() {\n         None // The stability cache is filled partially lazily\n@@ -682,7 +682,7 @@ fn lookup_stability_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'\n     }\n }\n \n-fn lookup_deprecation_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<Deprecation> {\n+fn lookup_deprecation_uncached<'tcx>(tcx: &TyCtxt<'tcx>, id: DefId) -> Option<Deprecation> {\n     debug!(\"lookup(id={:?})\", id);\n     if id.is_local() {\n         None // The stability cache is filled partially lazily"}, {"sha": "9cc94402b1651c33e7b5960155e9a8237205a1ff", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@ pub use self::RegionSubsts::*;\n \n use middle::cstore;\n use middle::def_id::DefId;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use serialize::{Encodable, Encoder, Decodable, Decoder};\n@@ -161,7 +161,7 @@ impl<'tcx> Substs<'tcx> {\n     }\n \n     /// Creates a trait-ref out of this substs, ignoring the FnSpace substs\n-    pub fn to_trait_ref(&self, tcx: &ty::ctxt<'tcx>, trait_id: DefId)\n+    pub fn to_trait_ref(&self, tcx: &TyCtxt<'tcx>, trait_id: DefId)\n                         -> ty::TraitRef<'tcx> {\n         let Substs { mut types, regions } = self.clone();\n         types.truncate(FnSpace, 0);\n@@ -589,19 +589,19 @@ impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> {\n // there is more information available (for better errors).\n \n pub trait Subst<'tcx> : Sized {\n-    fn subst(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>) -> Self {\n+    fn subst(&self, tcx: &TyCtxt<'tcx>, substs: &Substs<'tcx>) -> Self {\n         self.subst_spanned(tcx, substs, None)\n     }\n \n-    fn subst_spanned(&self, tcx: &ty::ctxt<'tcx>,\n+    fn subst_spanned(&self, tcx: &TyCtxt<'tcx>,\n                      substs: &Substs<'tcx>,\n                      span: Option<Span>)\n                      -> Self;\n }\n \n impl<'tcx, T:TypeFoldable<'tcx>> Subst<'tcx> for T {\n     fn subst_spanned(&self,\n-                     tcx: &ty::ctxt<'tcx>,\n+                     tcx: &TyCtxt<'tcx>,\n                      substs: &Substs<'tcx>,\n                      span: Option<Span>)\n                      -> T\n@@ -620,7 +620,7 @@ impl<'tcx, T:TypeFoldable<'tcx>> Subst<'tcx> for T {\n // The actual substitution engine itself is a type folder.\n \n struct SubstFolder<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     substs: &'a Substs<'tcx>,\n \n     // The location for which the substitution is performed, if available.\n@@ -637,7 +637,7 @@ struct SubstFolder<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }\n+    fn tcx(&self) -> &TyCtxt<'tcx> { self.tcx }\n \n     fn enter_region_binder(&mut self) {\n         self.region_binders_passed += 1;"}, {"sha": "b0970457892bb6d846b975e57f9f30e64472e517", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -20,7 +20,7 @@ use super::util;\n use middle::cstore::LOCAL_CRATE;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, TypeSpace};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::infer::{self, InferCtxt, TypeOrigin};\n use syntax::codemap::{DUMMY_SP, Span};\n \n@@ -94,7 +94,7 @@ fn overlap<'cx, 'tcx>(selcx: &mut SelectionContext<'cx, 'tcx>,\n     Some(selcx.infcx().resolve_type_vars_if_possible(&a_trait_ref))\n }\n \n-pub fn trait_ref_is_knowable<'tcx>(tcx: &ty::ctxt<'tcx>, trait_ref: &ty::TraitRef<'tcx>) -> bool\n+pub fn trait_ref_is_knowable<'tcx>(tcx: &TyCtxt<'tcx>, trait_ref: &ty::TraitRef<'tcx>) -> bool\n {\n     debug!(\"trait_ref_is_knowable(trait_ref={:?})\", trait_ref);\n \n@@ -174,7 +174,7 @@ pub enum OrphanCheckErr<'tcx> {\n ///\n /// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n /// 2. Some local type must appear in `Self`.\n-pub fn orphan_check<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn orphan_check<'tcx>(tcx: &TyCtxt<'tcx>,\n                           impl_def_id: DefId)\n                           -> Result<(), OrphanCheckErr<'tcx>>\n {\n@@ -195,7 +195,7 @@ pub fn orphan_check<'tcx>(tcx: &ty::ctxt<'tcx>,\n     orphan_check_trait_ref(tcx, &trait_ref, InferIsLocal(false))\n }\n \n-fn orphan_check_trait_ref<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn orphan_check_trait_ref<'tcx>(tcx: &TyCtxt<'tcx>,\n                                 trait_ref: &ty::TraitRef<'tcx>,\n                                 infer_is_local: InferIsLocal)\n                                 -> Result<(), OrphanCheckErr<'tcx>>\n@@ -243,7 +243,7 @@ fn orphan_check_trait_ref<'tcx>(tcx: &ty::ctxt<'tcx>,\n     return Err(OrphanCheckErr::NoLocalInputType);\n }\n \n-fn uncovered_tys<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn uncovered_tys<'tcx>(tcx: &TyCtxt<'tcx>,\n                        ty: Ty<'tcx>,\n                        infer_is_local: InferIsLocal)\n                        -> Vec<Ty<'tcx>>\n@@ -267,13 +267,13 @@ fn is_type_parameter<'tcx>(ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-fn ty_is_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>, infer_is_local: InferIsLocal) -> bool\n+fn ty_is_local<'tcx>(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>, infer_is_local: InferIsLocal) -> bool\n {\n     ty_is_local_constructor(tcx, ty, infer_is_local) ||\n         fundamental_ty(tcx, ty) && ty.walk_shallow().any(|t| ty_is_local(tcx, t, infer_is_local))\n }\n \n-fn fundamental_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool\n+fn fundamental_ty<'tcx>(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool\n {\n     match ty.sty {\n         ty::TyBox(..) | ty::TyRef(..) =>\n@@ -287,7 +287,7 @@ fn fundamental_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool\n     }\n }\n \n-fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn ty_is_local_constructor<'tcx>(tcx: &TyCtxt<'tcx>,\n                                  ty: Ty<'tcx>,\n                                  infer_is_local: InferIsLocal)\n                                  -> bool"}, {"sha": "dd051471a4d1b464aef0c50a09609633a56dde8e", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -26,7 +26,7 @@ use super::{\n use fmt_macros::{Parser, Piece, Position};\n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n-use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, Ty, TypeFoldable};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, Ty, TyCtxt, TypeFoldable};\n use middle::ty::fast_reject;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n@@ -326,7 +326,7 @@ pub fn try_report_overflow_error_type_of_infinite_size<'a, 'tcx>(\n     unreachable!();\n }\n \n-pub fn recursive_type_with_infinite_size_error<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn recursive_type_with_infinite_size_error<'tcx>(tcx: &TyCtxt<'tcx>,\n                                                      type_def_id: DefId)\n                                                      -> DiagnosticBuilder<'tcx>\n {\n@@ -507,7 +507,7 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     }\n }\n \n-pub fn report_object_safety_error<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn report_object_safety_error<'tcx>(tcx: &TyCtxt<'tcx>,\n                                         span: Span,\n                                         trait_def_id: DefId,\n                                         violations: Vec<ObjectSafetyViolation>)\n@@ -796,7 +796,7 @@ fn note_obligation_cause_code<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n     }\n }\n \n-fn suggest_new_overflow_limit(tcx: &ty::ctxt, err:&mut DiagnosticBuilder, span: Span) {\n+fn suggest_new_overflow_limit(tcx: &TyCtxt, err:&mut DiagnosticBuilder, span: Span) {\n     let current_limit = tcx.sess.recursion_limit.get();\n     let suggested_limit = current_limit * 2;\n     err.fileline_note("}, {"sha": "b23711756422888ab32a78bc87d4b007a4c6e872", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -10,7 +10,7 @@\n \n use dep_graph::DepGraph;\n use middle::infer::InferCtxt;\n-use middle::ty::{self, Ty, TypeFoldable, ToPolyTraitRef};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable, ToPolyTraitRef};\n use rustc_data_structures::obligation_forest::{Backtrace, ObligationForest, Error};\n use std::iter;\n use syntax::ast;\n@@ -237,7 +237,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n     }\n \n     fn is_duplicate_or_add(&mut self,\n-                           tcx: &ty::ctxt<'tcx>,\n+                           tcx: &TyCtxt<'tcx>,\n                            predicate: &ty::Predicate<'tcx>)\n                            -> bool {\n         // For \"global\" predicates -- that is, predicates that don't"}, {"sha": "4a0da521eef30429c8aeaf4a708a1244b4f0974c", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -23,7 +23,7 @@ use super::elaborate_predicates;\n use middle::def_id::DefId;\n use middle::subst::{self, SelfSpace, TypeSpace};\n use middle::traits;\n-use middle::ty::{self, ToPolyTraitRef, Ty, TypeFoldable};\n+use middle::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use std::rc::Rc;\n use syntax::ast;\n \n@@ -53,7 +53,7 @@ pub enum MethodViolationCode {\n     Generic,\n }\n \n-pub fn is_object_safe<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn is_object_safe<'tcx>(tcx: &TyCtxt<'tcx>,\n                             trait_def_id: DefId)\n                             -> bool\n {\n@@ -80,7 +80,7 @@ pub fn is_object_safe<'tcx>(tcx: &ty::ctxt<'tcx>,\n /// astconv - currently, Self in supertraits. This is needed\n /// because `object_safety_violations` can't be used during\n /// type collection.\n-pub fn astconv_object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn astconv_object_safety_violations<'tcx>(tcx: &TyCtxt<'tcx>,\n                                               trait_def_id: DefId)\n                                               -> Vec<ObjectSafetyViolation<'tcx>>\n {\n@@ -97,7 +97,7 @@ pub fn astconv_object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,\n     violations\n }\n \n-pub fn object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn object_safety_violations<'tcx>(tcx: &TyCtxt<'tcx>,\n                                       trait_def_id: DefId)\n                                       -> Vec<ObjectSafetyViolation<'tcx>>\n {\n@@ -106,7 +106,7 @@ pub fn object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,\n         .collect()\n }\n \n-fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn object_safety_violations_for_trait<'tcx>(tcx: &TyCtxt<'tcx>,\n                                             trait_def_id: DefId)\n                                             -> Vec<ObjectSafetyViolation<'tcx>>\n {\n@@ -139,7 +139,7 @@ fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n     violations\n }\n \n-pub fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn supertraits_reference_self<'tcx>(tcx: &TyCtxt<'tcx>,\n                                         trait_def_id: DefId)\n                                         -> bool\n {\n@@ -172,7 +172,7 @@ pub fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n         })\n }\n \n-fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn trait_has_sized_self<'tcx>(tcx: &TyCtxt<'tcx>,\n                               trait_def_id: DefId)\n                               -> bool\n {\n@@ -181,7 +181,7 @@ fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n     generics_require_sized_self(tcx, &trait_def.generics, &trait_predicates)\n }\n \n-fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn generics_require_sized_self<'tcx>(tcx: &TyCtxt<'tcx>,\n                                      generics: &ty::Generics<'tcx>,\n                                      predicates: &ty::GenericPredicates<'tcx>)\n                                      -> bool\n@@ -215,7 +215,7 @@ fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n }\n \n /// Returns `Some(_)` if this method makes the containing trait not object safe.\n-fn object_safety_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn object_safety_violation_for_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                             trait_def_id: DefId,\n                                             method: &ty::Method<'tcx>)\n                                             -> Option<MethodViolationCode>\n@@ -233,7 +233,7 @@ fn object_safety_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n /// object.  Note that object-safe traits can have some\n /// non-vtable-safe methods, so long as they require `Self:Sized` or\n /// otherwise ensure that they cannot be used when `Self=Trait`.\n-pub fn is_vtable_safe_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn is_vtable_safe_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                    trait_def_id: DefId,\n                                    method: &ty::Method<'tcx>)\n                                    -> bool\n@@ -245,7 +245,7 @@ pub fn is_vtable_safe_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n /// object; this does not necessarily imply that the enclosing trait\n /// is not object safe, because the method might have a where clause\n /// `Self:Sized`.\n-fn virtual_call_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn virtual_call_violation_for_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                            trait_def_id: DefId,\n                                            method: &ty::Method<'tcx>)\n                                            -> Option<MethodViolationCode>\n@@ -286,7 +286,7 @@ fn virtual_call_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     None\n }\n \n-fn contains_illegal_self_type_reference<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn contains_illegal_self_type_reference<'tcx>(tcx: &TyCtxt<'tcx>,\n                                               trait_def_id: DefId,\n                                               ty: Ty<'tcx>)\n                                               -> bool"}, {"sha": "b19771420bd399bfd8b306363c77378e3be7b8ee", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -23,7 +23,7 @@ use super::util;\n \n use middle::infer::{self, TypeOrigin};\n use middle::subst::Subst;\n-use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n use syntax::parse::token;\n use util::common::FN_OUTPUT_NAME;\n@@ -257,7 +257,7 @@ impl<'a,'b,'tcx> AssociatedTypeNormalizer<'a,'b,'tcx> {\n }\n \n impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.selcx.tcx()\n     }\n "}, {"sha": "373ec37663f55dab1c12b7caeb2e81e95eff80c3", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -39,7 +39,7 @@ use middle::def_id::DefId;\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener, TypeOrigin};\n use middle::subst::{Subst, Substs, TypeSpace};\n-use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TypeFoldable};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use middle::ty::fast_reject;\n use middle::ty::relate::TypeRelation;\n \n@@ -273,7 +273,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx\n     }\n \n-    pub fn tcx(&self) -> &'cx ty::ctxt<'tcx> {\n+    pub fn tcx(&self) -> &'cx TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "08d504143c7cc589782405aa32dc125895f67cb5", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -11,20 +11,20 @@\n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n use middle::subst::Substs;\n-use middle::ty::{self, Ty, ToPredicate, ToPolyTraitRef};\n+use middle::ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use syntax::codemap::Span;\n use util::common::ErrorReported;\n use util::nodemap::FnvHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation};\n \n struct PredicateSet<'a,'tcx:'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     set: FnvHashSet<ty::Predicate<'tcx>>,\n }\n \n impl<'a,'tcx> PredicateSet<'a,'tcx> {\n-    fn new(tcx: &'a ty::ctxt<'tcx>) -> PredicateSet<'a,'tcx> {\n+    fn new(tcx: &'a TyCtxt<'tcx>) -> PredicateSet<'a,'tcx> {\n         PredicateSet { tcx: tcx, set: FnvHashSet() }\n     }\n \n@@ -77,21 +77,21 @@ impl<'a,'tcx> PredicateSet<'a,'tcx> {\n /// Foo : 'static`, and we know that `T : Foo`, then we know that `T :\n /// 'static`.\n pub struct Elaborator<'cx, 'tcx:'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>,\n+    tcx: &'cx TyCtxt<'tcx>,\n     stack: Vec<ty::Predicate<'tcx>>,\n     visited: PredicateSet<'cx,'tcx>,\n }\n \n pub fn elaborate_trait_ref<'cx, 'tcx>(\n-    tcx: &'cx ty::ctxt<'tcx>,\n+    tcx: &'cx TyCtxt<'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n     -> Elaborator<'cx, 'tcx>\n {\n     elaborate_predicates(tcx, vec![trait_ref.to_predicate()])\n }\n \n pub fn elaborate_trait_refs<'cx, 'tcx>(\n-    tcx: &'cx ty::ctxt<'tcx>,\n+    tcx: &'cx TyCtxt<'tcx>,\n     trait_refs: &[ty::PolyTraitRef<'tcx>])\n     -> Elaborator<'cx, 'tcx>\n {\n@@ -102,7 +102,7 @@ pub fn elaborate_trait_refs<'cx, 'tcx>(\n }\n \n pub fn elaborate_predicates<'cx, 'tcx>(\n-    tcx: &'cx ty::ctxt<'tcx>,\n+    tcx: &'cx TyCtxt<'tcx>,\n     mut predicates: Vec<ty::Predicate<'tcx>>)\n     -> Elaborator<'cx, 'tcx>\n {\n@@ -205,14 +205,14 @@ impl<'cx, 'tcx> Iterator for Elaborator<'cx, 'tcx> {\n \n pub type Supertraits<'cx, 'tcx> = FilterToTraits<Elaborator<'cx, 'tcx>>;\n \n-pub fn supertraits<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n+pub fn supertraits<'cx, 'tcx>(tcx: &'cx TyCtxt<'tcx>,\n                               trait_ref: ty::PolyTraitRef<'tcx>)\n                               -> Supertraits<'cx, 'tcx>\n {\n     elaborate_trait_ref(tcx, trait_ref).filter_to_traits()\n }\n \n-pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n+pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx TyCtxt<'tcx>,\n                                     bounds: &[ty::PolyTraitRef<'tcx>])\n                                     -> Supertraits<'cx, 'tcx>\n {\n@@ -223,12 +223,12 @@ pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n // Iterator over def-ids of supertraits\n \n pub struct SupertraitDefIds<'cx, 'tcx:'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>,\n+    tcx: &'cx TyCtxt<'tcx>,\n     stack: Vec<DefId>,\n     visited: FnvHashSet<DefId>,\n }\n \n-pub fn supertrait_def_ids<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n+pub fn supertrait_def_ids<'cx, 'tcx>(tcx: &'cx TyCtxt<'tcx>,\n                                      trait_def_id: DefId)\n                                      -> SupertraitDefIds<'cx, 'tcx>\n {\n@@ -330,7 +330,7 @@ pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n }\n \n pub fn trait_ref_for_builtin_bound<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &TyCtxt<'tcx>,\n     builtin_bound: ty::BuiltinBound,\n     param_ty: Ty<'tcx>)\n     -> Result<ty::TraitRef<'tcx>, ErrorReported>\n@@ -364,7 +364,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n }\n \n pub fn predicate_for_trait_def<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &TyCtxt<'tcx>,\n     cause: ObligationCause<'tcx>,\n     trait_def_id: DefId,\n     recursion_depth: usize,\n@@ -380,7 +380,7 @@ pub fn predicate_for_trait_def<'tcx>(\n }\n \n pub fn predicate_for_builtin_bound<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &TyCtxt<'tcx>,\n     cause: ObligationCause<'tcx>,\n     builtin_bound: ty::BuiltinBound,\n     recursion_depth: usize,\n@@ -394,7 +394,7 @@ pub fn predicate_for_builtin_bound<'tcx>(\n /// Cast a trait reference into a reference to one of its super\n /// traits; returns `None` if `target_trait_def_id` is not a\n /// supertrait.\n-pub fn upcast<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn upcast<'tcx>(tcx: &TyCtxt<'tcx>,\n                     source_trait_ref: ty::PolyTraitRef<'tcx>,\n                     target_trait_def_id: DefId)\n                     -> Vec<ty::PolyTraitRef<'tcx>>\n@@ -411,7 +411,7 @@ pub fn upcast<'tcx>(tcx: &ty::ctxt<'tcx>,\n /// Given a trait `trait_ref`, returns the number of vtable entries\n /// that come from `trait_ref`, excluding its supertraits. Used in\n /// computing the vtable base for an upcast trait of a trait object.\n-pub fn count_own_vtable_entries<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn count_own_vtable_entries<'tcx>(tcx: &TyCtxt<'tcx>,\n                                       trait_ref: ty::PolyTraitRef<'tcx>)\n                                       -> usize {\n     let mut entries = 0;\n@@ -428,7 +428,7 @@ pub fn count_own_vtable_entries<'tcx>(tcx: &ty::ctxt<'tcx>,\n /// Given an upcast trait object described by `object`, returns the\n /// index of the method `method_def_id` (which should be part of\n /// `object.upcast_trait_ref`) within the vtable for `object`.\n-pub fn get_vtable_index_of_object_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn get_vtable_index_of_object_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                                object: &super::VtableObjectData<'tcx>,\n                                                method_def_id: DefId) -> usize {\n     // Count number of methods preceding the one we are selecting and\n@@ -457,7 +457,7 @@ pub fn get_vtable_index_of_object_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n pub enum TupleArgumentsFlag { Yes, No }\n \n pub fn closure_trait_ref_and_return_type<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &TyCtxt<'tcx>,\n     fn_trait_def_id: DefId,\n     self_ty: Ty<'tcx>,\n     sig: &ty::PolyFnSig<'tcx>,"}, {"sha": "41612a68a91ef33f8c7ef0c05fa414bbff921bc7", "filename": "src/librustc/middle/ty/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2F_match.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::error::TypeError;\n use middle::ty::relate::{self, Relate, TypeRelation, RelateResult};\n \n@@ -29,18 +29,18 @@ use middle::ty::relate::{self, Relate, TypeRelation, RelateResult};\n /// important thing about the result is Ok/Err. Also, matching never\n /// affects any type variables or unification state.\n pub struct Match<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>\n+    tcx: &'a TyCtxt<'tcx>\n }\n \n impl<'a, 'tcx> Match<'a, 'tcx> {\n-    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> Match<'a, 'tcx> {\n+    pub fn new(tcx: &'a TyCtxt<'tcx>) -> Match<'a, 'tcx> {\n         Match { tcx: tcx }\n     }\n }\n \n impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> {\n     fn tag(&self) -> &'static str { \"Match\" }\n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.tcx }\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> { self.tcx }\n     fn a_is_expected(&self) -> bool { true } // irrelevant\n \n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,"}, {"sha": "40581cfa1c54dcfe064b0673bb77fe9fc43e8a1f", "filename": "src/librustc/middle/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -11,7 +11,7 @@\n pub use self::AutoAdjustment::*;\n pub use self::AutoRef::*;\n \n-use middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeAndMut, TypeFoldable};\n use middle::ty::LvaluePreference::{NoPreference};\n \n use syntax::ast;\n@@ -138,7 +138,7 @@ pub enum CustomCoerceUnsized {\n \n impl<'tcx> ty::TyS<'tcx> {\n     /// See `expr_ty_adjusted`\n-    pub fn adjust<F>(&'tcx self, cx: &ty::ctxt<'tcx>,\n+    pub fn adjust<F>(&'tcx self, cx: &TyCtxt<'tcx>,\n                      span: Span,\n                      expr_id: ast::NodeId,\n                      adjustment: Option<&AutoAdjustment<'tcx>>,\n@@ -220,7 +220,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     }\n \n     pub fn adjust_for_autoderef<F>(&'tcx self,\n-                                   cx: &ty::ctxt<'tcx>,\n+                                   cx: &TyCtxt<'tcx>,\n                                    expr_id: ast::NodeId,\n                                    expr_span: Span,\n                                    autoderef: u32, // how many autoderefs so far?\n@@ -249,7 +249,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n-    pub fn adjust_for_autoref(&'tcx self, cx: &ty::ctxt<'tcx>,\n+    pub fn adjust_for_autoref(&'tcx self, cx: &TyCtxt<'tcx>,\n                               autoref: Option<AutoRef<'tcx>>)\n                               -> Ty<'tcx> {\n         match autoref {"}, {"sha": "8dfa0262f2b0d553cf8e7e6d3fe6bc5b77272605", "filename": "src/librustc/middle/ty/contents.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::def_id::{DefId};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use util::common::MemoizationMap;\n use util::nodemap::FnvHashMap;\n \n@@ -89,7 +89,7 @@ impl TypeContents {\n         self.intersects(TC::InteriorUnsafe)\n     }\n \n-    pub fn needs_drop(&self, _: &ty::ctxt) -> bool {\n+    pub fn needs_drop(&self, _: &TyCtxt) -> bool {\n         self.intersects(TC::NeedsDrop)\n     }\n \n@@ -140,10 +140,10 @@ impl fmt::Debug for TypeContents {\n }\n \n impl<'tcx> ty::TyS<'tcx> {\n-    pub fn type_contents(&'tcx self, cx: &ty::ctxt<'tcx>) -> TypeContents {\n+    pub fn type_contents(&'tcx self, cx: &TyCtxt<'tcx>) -> TypeContents {\n         return cx.tc_cache.memoize(self, || tc_ty(cx, self, &mut FnvHashMap()));\n \n-        fn tc_ty<'tcx>(cx: &ty::ctxt<'tcx>,\n+        fn tc_ty<'tcx>(cx: &TyCtxt<'tcx>,\n                        ty: Ty<'tcx>,\n                        cache: &mut FnvHashMap<Ty<'tcx>, TypeContents>) -> TypeContents\n         {\n@@ -255,7 +255,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             result\n         }\n \n-        fn apply_lang_items(cx: &ty::ctxt, did: DefId, tc: TypeContents)\n+        fn apply_lang_items(cx: &TyCtxt, did: DefId, tc: TypeContents)\n                             -> TypeContents {\n             if Some(did) == cx.lang_items.unsafe_cell_type() {\n                 tc | TC::InteriorUnsafe"}, {"sha": "ffc52af19bbe12b865e3ab087c84a71f183d1e1a", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -10,9 +10,6 @@\n \n //! type context book-keeping\n \n-// FIXME: (@jroesch) @eddyb should remove this when he renames ctxt\n-#![allow(non_camel_case_types)]\n-\n use dep_graph::{DepGraph, DepTrackingMap};\n use front::map as ast_map;\n use session::Session;\n@@ -155,7 +152,7 @@ impl<'tcx> Tables<'tcx> {\n     }\n \n     pub fn closure_kind(this: &RefCell<Self>,\n-                        tcx: &ty::ctxt<'tcx>,\n+                        tcx: &TyCtxt<'tcx>,\n                         def_id: DefId)\n                         -> ty::ClosureKind {\n         // If this is a local def-id, it should be inserted into the\n@@ -171,7 +168,7 @@ impl<'tcx> Tables<'tcx> {\n     }\n \n     pub fn closure_type(this: &RefCell<Self>,\n-                        tcx: &ty::ctxt<'tcx>,\n+                        tcx: &TyCtxt<'tcx>,\n                         def_id: DefId,\n                         substs: &ClosureSubsts<'tcx>)\n                         -> ty::ClosureTy<'tcx>\n@@ -194,7 +191,7 @@ impl<'tcx> CommonTypes<'tcx> {\n            interner: &RefCell<FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>>)\n            -> CommonTypes<'tcx>\n     {\n-        let mk = |sty| ctxt::intern_ty(arena, interner, sty);\n+        let mk = |sty| TyCtxt::intern_ty(arena, interner, sty);\n         CommonTypes {\n             bool: mk(TyBool),\n             char: mk(TyChar),\n@@ -218,7 +215,7 @@ impl<'tcx> CommonTypes<'tcx> {\n /// The data structure to keep track of all the information that typechecker\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n-pub struct ctxt<'tcx> {\n+pub struct TyCtxt<'tcx> {\n     /// The arenas that types etc are allocated from.\n     arenas: &'tcx CtxtArenas<'tcx>,\n \n@@ -417,7 +414,7 @@ pub struct ctxt<'tcx> {\n     pub fragment_infos: RefCell<DefIdMap<Vec<ty::FragmentInfo>>>,\n }\n \n-impl<'tcx> ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn type_parameter_def(&self,\n                               node_id: NodeId)\n                               -> ty::TypeParameterDef<'tcx>\n@@ -498,7 +495,7 @@ impl<'tcx> ctxt<'tcx> {\n         value.lift_to_tcx(self)\n     }\n \n-    /// Create a type context and call the closure with a `&ty::ctxt` reference\n+    /// Create a type context and call the closure with a `&TyCtxt` reference\n     /// to the context. The closure enforces that the type context and any interned\n     /// value (types, substs, etc.) can only be used while `ty::tls` has a valid\n     /// reference to the context, to allow formatting values that need it.\n@@ -512,13 +509,13 @@ impl<'tcx> ctxt<'tcx> {\n                                  lang_items: middle::lang_items::LanguageItems,\n                                  stability: stability::Index<'tcx>,\n                                  f: F) -> R\n-                                 where F: FnOnce(&ctxt<'tcx>) -> R\n+                                 where F: FnOnce(&TyCtxt<'tcx>) -> R\n     {\n         let interner = RefCell::new(FnvHashMap());\n         let common_types = CommonTypes::new(&arenas.type_, &interner);\n         let dep_graph = map.dep_graph.clone();\n         let fulfilled_predicates = traits::GlobalFulfilledPredicates::new(dep_graph.clone());\n-        tls::enter(ctxt {\n+        tls::enter(TyCtxt {\n             arenas: arenas,\n             interner: interner,\n             substs_interner: RefCell::new(FnvHashMap()),\n@@ -577,7 +574,7 @@ impl<'tcx> ctxt<'tcx> {\n \n /// A trait implemented for all X<'a> types which can be safely and\n /// efficiently converted to X<'tcx> as long as they are part of the\n-/// provided ty::ctxt<'tcx>.\n+/// provided TyCtxt<'tcx>.\n /// This can be done, for example, for Ty<'tcx> or &'tcx Substs<'tcx>\n /// by looking them up in their respective interners.\n /// None is returned if the value or one of the components is not part\n@@ -588,12 +585,12 @@ impl<'tcx> ctxt<'tcx> {\n /// e.g. `()` or `u8`, was interned in a different context.\n pub trait Lift<'tcx> {\n     type Lifted;\n-    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Self::Lifted>;\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<Self::Lifted>;\n }\n \n impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n     type Lifted = Ty<'tcx>;\n-    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Ty<'tcx>> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<Ty<'tcx>> {\n         if let Some(&ty) = tcx.interner.borrow().get(&self.sty) {\n             if *self as *const _ == ty as *const _ {\n                 return Some(ty);\n@@ -605,7 +602,7 @@ impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n     type Lifted = &'tcx Substs<'tcx>;\n-    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<&'tcx Substs<'tcx>> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<&'tcx Substs<'tcx>> {\n         if let Some(&substs) = tcx.substs_interner.borrow().get(*self) {\n             if *self as *const _ == substs as *const _ {\n                 return Some(substs);\n@@ -617,7 +614,7 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n \n \n pub mod tls {\n-    use middle::ty;\n+    use middle::ty::TyCtxt;\n \n     use std::cell::Cell;\n     use std::fmt;\n@@ -638,7 +635,7 @@ pub mod tls {\n         })\n     }\n \n-    pub fn enter<'tcx, F: FnOnce(&ty::ctxt<'tcx>) -> R, R>(tcx: ty::ctxt<'tcx>, f: F) -> R {\n+    pub fn enter<'tcx, F: FnOnce(&TyCtxt<'tcx>) -> R, R>(tcx: TyCtxt<'tcx>, f: F) -> R {\n         codemap::SPAN_DEBUG.with(|span_dbg| {\n             let original_span_debug = span_dbg.get();\n             span_dbg.set(span_debug);\n@@ -655,14 +652,14 @@ pub mod tls {\n         })\n     }\n \n-    pub fn with<F: FnOnce(&ty::ctxt) -> R, R>(f: F) -> R {\n+    pub fn with<F: FnOnce(&TyCtxt) -> R, R>(f: F) -> R {\n         TLS_TCX.with(|tcx| {\n             let tcx = tcx.get().unwrap();\n-            f(unsafe { &*(tcx as *const ty::ctxt) })\n+            f(unsafe { &*(tcx as *const TyCtxt) })\n         })\n     }\n \n-    pub fn with_opt<F: FnOnce(Option<&ty::ctxt>) -> R, R>(f: F) -> R {\n+    pub fn with_opt<F: FnOnce(Option<&TyCtxt>) -> R, R>(f: F) -> R {\n         if TLS_TCX.with(|tcx| tcx.get().is_some()) {\n             with(|v| f(Some(v)))\n         } else {\n@@ -677,7 +674,7 @@ macro_rules! sty_debug_print {\n         // variable names.\n         #[allow(non_snake_case)]\n         mod inner {\n-            use middle::ty;\n+            use middle::ty::{self, TyCtxt};\n             #[derive(Copy, Clone)]\n             struct DebugStat {\n                 total: usize,\n@@ -686,7 +683,7 @@ macro_rules! sty_debug_print {\n                 both_infer: usize,\n             }\n \n-            pub fn go(tcx: &ty::ctxt) {\n+            pub fn go(tcx: &TyCtxt) {\n                 let mut total = DebugStat {\n                     total: 0,\n                     region_infer: 0, ty_infer: 0, both_infer: 0,\n@@ -733,7 +730,7 @@ macro_rules! sty_debug_print {\n     }}\n }\n \n-impl<'tcx> ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn print_debug_stats(&self) {\n         sty_debug_print!(\n             self,\n@@ -780,7 +777,7 @@ fn bound_list_is_sorted(bounds: &[ty::PolyProjectionPredicate]) -> bool {\n             |(index, bound)| bounds[index].sort_key() <= bound.sort_key())\n }\n \n-impl<'tcx> ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     // Type constructors\n     pub fn mk_substs(&self, substs: Substs<'tcx>) -> &'tcx Substs<'tcx> {\n         if let Some(substs) = self.substs_interner.borrow().get(&substs) {\n@@ -854,7 +851,7 @@ impl<'tcx> ctxt<'tcx> {\n     // Interns a type/name combination, stores the resulting box in cx.interner,\n     // and returns the box as cast to an unsafe ptr (see comments for Ty above).\n     pub fn mk_ty(&self, st: TypeVariants<'tcx>) -> Ty<'tcx> {\n-        ctxt::intern_ty(&self.arenas.type_, &self.interner, st)\n+        TyCtxt::intern_ty(&self.arenas.type_, &self.interner, st)\n     }\n \n     pub fn mk_mach_int(&self, tm: ast::IntTy) -> Ty<'tcx> {"}, {"sha": "39a5069e129440ff4d84a390c989afe2134860a6", "filename": "src/librustc/middle/ty/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -11,7 +11,7 @@\n use middle::def_id::DefId;\n use middle::subst;\n use middle::infer::type_variable;\n-use middle::ty::{self, BoundRegion, Region, Ty};\n+use middle::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n \n use std::fmt;\n use syntax::abi;\n@@ -211,7 +211,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n }\n \n impl<'tcx> ty::TyS<'tcx> {\n-    fn sort_string(&self, cx: &ty::ctxt) -> String {\n+    fn sort_string(&self, cx: &TyCtxt) -> String {\n         match self.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr => self.to_string(),\n@@ -252,7 +252,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     }\n }\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn note_and_explain_type_err(&self,\n                                      db: &mut DiagnosticBuilder,\n                                      err: &TypeError<'tcx>,"}, {"sha": "a42e5fc2e85f2e47374fe1d570f626cb0660560c", "filename": "src/librustc/middle/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::def_id::DefId;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use syntax::ast;\n \n use self::SimplifiedType::*;\n@@ -43,7 +43,7 @@ pub enum SimplifiedType {\n /// then we can't say much about whether two types would unify. Put another way,\n /// `can_simplify_params` should be true if type parameters appear free in `ty` and `false` if they\n /// are to be considered bound.\n-pub fn simplify_type(tcx: &ty::ctxt,\n+pub fn simplify_type(tcx: &TyCtxt,\n                      ty: Ty,\n                      can_simplify_params: bool)\n                      -> Option<SimplifiedType>"}, {"sha": "162ea3a7714dfbca5df3a2b5f032a87341ccb17e", "filename": "src/librustc/middle/ty/fold.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -42,7 +42,7 @@\n use middle::region;\n use middle::subst;\n use middle::ty::adjustment;\n-use middle::ty::{self, Binder, Ty, TypeFlags};\n+use middle::ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n use std::fmt;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n@@ -114,7 +114,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n /// identity fold, it should invoke `foo.fold_with(self)` to fold each\n /// sub-item.\n pub trait TypeFolder<'tcx> : Sized {\n-    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n+    fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx>;\n \n     /// Invoked by the `super_*` routines when we enter a region\n     /// binding level (for example, when entering a function\n@@ -209,14 +209,14 @@ pub trait TypeVisitor<'tcx> : Sized {\n // Some sample folders\n \n pub struct BottomUpFolder<'a, 'tcx: 'a, F> where F: FnMut(Ty<'tcx>) -> Ty<'tcx> {\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n     pub fldop: F,\n }\n \n impl<'a, 'tcx, F> TypeFolder<'tcx> for BottomUpFolder<'a, 'tcx, F> where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }\n+    fn tcx(&self) -> &TyCtxt<'tcx> { self.tcx }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let t1 = ty.super_fold_with(self);\n@@ -227,7 +227,7 @@ impl<'a, 'tcx, F> TypeFolder<'tcx> for BottomUpFolder<'a, 'tcx, F> where\n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     /// Collects the free and escaping regions in `value` into `region_set`. Returns\n     /// whether any late-bound regions were skipped\n     pub fn collect_regions<T>(&self,\n@@ -267,14 +267,14 @@ impl<'tcx> ty::ctxt<'tcx> {\n /// visited by `fld_r`.\n \n pub struct RegionFolder<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     skipped_regions: &'a mut bool,\n     current_depth: u32,\n     fld_r: &'a mut (FnMut(ty::Region, u32) -> ty::Region + 'a),\n }\n \n impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n-    pub fn new<F>(tcx: &'a ty::ctxt<'tcx>,\n+    pub fn new<F>(tcx: &'a TyCtxt<'tcx>,\n                   skipped_regions: &'a mut bool,\n                   fld_r: &'a mut F) -> RegionFolder<'a, 'tcx>\n         where F : FnMut(ty::Region, u32) -> ty::Region\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx>\n {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }\n+    fn tcx(&self) -> &TyCtxt<'tcx> { self.tcx }\n \n     fn enter_region_binder(&mut self) {\n         self.current_depth += 1;\n@@ -323,13 +323,13 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx>\n // Replaces the escaping regions in a type.\n \n struct RegionReplacer<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     current_depth: u32,\n     fld_r: &'a mut (FnMut(ty::BoundRegion) -> ty::Region + 'a),\n     map: FnvHashMap<ty::BoundRegion, ty::Region>\n }\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_late_bound_regions<T,F>(&self,\n         value: &Binder<T>,\n         mut f: F)\n@@ -418,7 +418,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n }\n \n impl<'a, 'tcx> RegionReplacer<'a, 'tcx> {\n-    fn new<F>(tcx: &'a ty::ctxt<'tcx>, fld_r: &'a mut F) -> RegionReplacer<'a, 'tcx>\n+    fn new<F>(tcx: &'a TyCtxt<'tcx>, fld_r: &'a mut F) -> RegionReplacer<'a, 'tcx>\n         where F : FnMut(ty::BoundRegion) -> ty::Region\n     {\n         RegionReplacer {\n@@ -432,7 +432,7 @@ impl<'a, 'tcx> RegionReplacer<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx>\n {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }\n+    fn tcx(&self) -> &TyCtxt<'tcx> { self.tcx }\n \n     fn enter_region_binder(&mut self) {\n         self.current_depth += 1;\n@@ -475,7 +475,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx>\n ///////////////////////////////////////////////////////////////////////////\n // Region eraser\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     /// Returns an equivalent value with all free regions removed (note\n     /// that late-bound regions remain, because they are important for\n     /// subtyping, but they are anonymized and normalized as well)..\n@@ -487,10 +487,10 @@ impl<'tcx> ty::ctxt<'tcx> {\n                value, value1);\n         return value1;\n \n-        struct RegionEraser<'a, 'tcx: 'a>(&'a ty::ctxt<'tcx>);\n+        struct RegionEraser<'a, 'tcx: 'a>(&'a TyCtxt<'tcx>);\n \n         impl<'a, 'tcx> TypeFolder<'tcx> for RegionEraser<'a, 'tcx> {\n-            fn tcx(&self) -> &ty::ctxt<'tcx> { self.0 }\n+            fn tcx(&self) -> &TyCtxt<'tcx> { self.0 }\n \n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n                 match self.tcx().normalized_cache.borrow().get(&ty).cloned() {\n@@ -555,7 +555,7 @@ pub fn shift_region(region: ty::Region, amount: u32) -> ty::Region {\n     }\n }\n \n-pub fn shift_regions<'tcx, T:TypeFoldable<'tcx>>(tcx: &ty::ctxt<'tcx>,\n+pub fn shift_regions<'tcx, T:TypeFoldable<'tcx>>(tcx: &TyCtxt<'tcx>,\n                                                  amount: u32, value: &T) -> T {\n     debug!(\"shift_regions(value={:?}, amount={})\",\n            value, amount);"}, {"sha": "85035b2500144466631bd5c6034f7869fba4f4da", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -75,7 +75,7 @@ pub use self::sty::BuiltinBound::Copy as BoundCopy;\n pub use self::sty::BuiltinBound::Sync as BoundSync;\n \n pub use self::contents::TypeContents;\n-pub use self::context::{ctxt, tls};\n+pub use self::context::{TyCtxt, tls};\n pub use self::context::{CtxtArenas, Lift, Tables};\n \n pub use self::trait_def::{TraitDef, TraitFlags};\n@@ -699,15 +699,15 @@ impl<'tcx> GenericPredicates<'tcx> {\n         }\n     }\n \n-    pub fn instantiate(&self, tcx: &ctxt<'tcx>, substs: &Substs<'tcx>)\n+    pub fn instantiate(&self, tcx: &TyCtxt<'tcx>, substs: &Substs<'tcx>)\n                        -> InstantiatedPredicates<'tcx> {\n         InstantiatedPredicates {\n             predicates: self.predicates.subst(tcx, substs),\n         }\n     }\n \n     pub fn instantiate_supertrait(&self,\n-                                  tcx: &ctxt<'tcx>,\n+                                  tcx: &TyCtxt<'tcx>,\n                                   poly_trait_ref: &ty::PolyTraitRef<'tcx>)\n                                   -> InstantiatedPredicates<'tcx>\n     {\n@@ -751,7 +751,7 @@ impl<'tcx> Predicate<'tcx> {\n     /// substitution in terms of what happens with bound regions.  See\n     /// lengthy comment below for details.\n     pub fn subst_supertrait(&self,\n-                            tcx: &ctxt<'tcx>,\n+                            tcx: &TyCtxt<'tcx>,\n                             trait_ref: &ty::PolyTraitRef<'tcx>)\n                             -> ty::Predicate<'tcx>\n     {\n@@ -1111,7 +1111,7 @@ impl<'tcx> TraitRef<'tcx> {\n /// more distinctions clearer.\n #[derive(Clone)]\n pub struct ParameterEnvironment<'a, 'tcx:'a> {\n-    pub tcx: &'a ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n \n     /// See `construct_free_substs` for details.\n     pub free_substs: Substs<'tcx>,\n@@ -1160,7 +1160,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n         }\n     }\n \n-    pub fn for_item(cx: &'a ctxt<'tcx>, id: NodeId) -> ParameterEnvironment<'a, 'tcx> {\n+    pub fn for_item(cx: &'a TyCtxt<'tcx>, id: NodeId) -> ParameterEnvironment<'a, 'tcx> {\n         match cx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n@@ -1460,7 +1460,7 @@ impl VariantKind {\n }\n \n impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n-    fn new(tcx: &ctxt<'tcx>,\n+    fn new(tcx: &TyCtxt<'tcx>,\n            did: DefId,\n            kind: AdtKind,\n            variants: Vec<VariantDefData<'tcx, 'container>>) -> Self {\n@@ -1489,7 +1489,7 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n         }\n     }\n \n-    fn calculate_dtorck(&'tcx self, tcx: &ctxt<'tcx>) {\n+    fn calculate_dtorck(&'tcx self, tcx: &TyCtxt<'tcx>) {\n         if tcx.is_adt_dtorck(self) {\n             self.flags.set(self.flags.get() | AdtFlags::IS_DTORCK);\n         }\n@@ -1510,7 +1510,7 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n     /// true, this type being safe for destruction requires it to be\n     /// alive; Otherwise, only the contents are required to be.\n     #[inline]\n-    pub fn is_dtorck(&'tcx self, tcx: &ctxt<'tcx>) -> bool {\n+    pub fn is_dtorck(&'tcx self, tcx: &TyCtxt<'tcx>) -> bool {\n         if !self.flags.get().intersects(AdtFlags::IS_DTORCK_VALID) {\n             self.calculate_dtorck(tcx)\n         }\n@@ -1551,12 +1551,12 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n     }\n \n     #[inline]\n-    pub fn type_scheme(&self, tcx: &ctxt<'tcx>) -> TypeScheme<'tcx> {\n+    pub fn type_scheme(&self, tcx: &TyCtxt<'tcx>) -> TypeScheme<'tcx> {\n         tcx.lookup_item_type(self.did)\n     }\n \n     #[inline]\n-    pub fn predicates(&self, tcx: &ctxt<'tcx>) -> GenericPredicates<'tcx> {\n+    pub fn predicates(&self, tcx: &TyCtxt<'tcx>) -> GenericPredicates<'tcx> {\n         tcx.lookup_predicates(self.did)\n     }\n \n@@ -1674,7 +1674,7 @@ impl<'tcx, 'container> FieldDefData<'tcx, 'container> {\n         }\n     }\n \n-    pub fn ty(&self, tcx: &ctxt<'tcx>, subst: &Substs<'tcx>) -> Ty<'tcx> {\n+    pub fn ty(&self, tcx: &TyCtxt<'tcx>, subst: &Substs<'tcx>) -> Ty<'tcx> {\n         self.unsubst_ty().subst(tcx, subst)\n     }\n \n@@ -1705,7 +1705,7 @@ pub enum ClosureKind {\n }\n \n impl ClosureKind {\n-    pub fn trait_did(&self, cx: &ctxt) -> DefId {\n+    pub fn trait_did(&self, cx: &TyCtxt) -> DefId {\n         let result = match *self {\n             FnClosureKind => cx.lang_items.require(FnTraitLangItem),\n             FnMutClosureKind => {\n@@ -1855,7 +1855,7 @@ impl BorrowKind {\n     }\n }\n \n-impl<'tcx> ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn node_id_to_type(&self, id: NodeId) -> Ty<'tcx> {\n         match self.node_id_to_type_opt(id) {\n            Some(ty) => ty,\n@@ -2666,7 +2666,7 @@ pub type TraitMap = NodeMap<Vec<DefId>>;\n // imported.\n pub type GlobMap = HashMap<NodeId, HashSet<Name>>;\n \n-impl<'tcx> ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn with_freevars<T, F>(&self, fid: NodeId, f: F) -> T where\n         F: FnOnce(&[Freevar]) -> T,\n     {"}, {"sha": "5d6106a6d7747d97a33e8412788eb725f339fcaf", "filename": "src/librustc/middle/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@\n \n use middle::def_id::DefId;\n use middle::subst::{ErasedRegions, NonerasedRegions, ParamSpace, Substs};\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use middle::ty::error::{ExpectedFound, TypeError};\n use std::rc::Rc;\n use syntax::abi;\n@@ -29,7 +29,7 @@ pub enum Cause {\n }\n \n pub trait TypeRelation<'a,'tcx> : Sized {\n-    fn tcx(&self) -> &'a ty::ctxt<'tcx>;\n+    fn tcx(&self) -> &'a TyCtxt<'tcx>;\n \n     /// Returns a static string we can use for printouts.\n     fn tag(&self) -> &'static str;"}, {"sha": "001ea02a27c3efb88ecd4ec0732622742bf42e6c", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -10,7 +10,7 @@\n \n use middle::subst::{self, VecPerParamSpace};\n use middle::traits;\n-use middle::ty::{self, Lift, TraitRef, Ty};\n+use middle::ty::{self, Lift, TraitRef, Ty, TyCtxt};\n use middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use std::rc::Rc;\n@@ -24,14 +24,14 @@ use rustc_front::hir;\n \n impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>> Lift<'tcx> for (A, B) {\n     type Lifted = (A::Lifted, B::Lifted);\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.0).and_then(|a| tcx.lift(&self.1).map(|b| (a, b)))\n     }\n }\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n     type Lifted = Vec<T::Lifted>;\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         // type annotation needed to inform `projection_must_outlive`\n         let mut result : Vec<<T as Lift<'tcx>>::Lifted>\n             = Vec::with_capacity(self.len());\n@@ -48,14 +48,14 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n \n impl<'tcx> Lift<'tcx> for ty::Region {\n     type Lifted = Self;\n-    fn lift_to_tcx(&self, _: &ty::ctxt<'tcx>) -> Option<ty::Region> {\n+    fn lift_to_tcx(&self, _: &TyCtxt<'tcx>) -> Option<ty::Region> {\n         Some(*self)\n     }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for TraitRef<'a> {\n     type Lifted = TraitRef<'tcx>;\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<TraitRef<'tcx>> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<TraitRef<'tcx>> {\n         tcx.lift(&self.substs).map(|substs| TraitRef {\n             def_id: self.def_id,\n             substs: substs\n@@ -65,7 +65,7 @@ impl<'a, 'tcx> Lift<'tcx> for TraitRef<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     type Lifted = ty::TraitPredicate<'tcx>;\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<ty::TraitPredicate<'tcx>> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<ty::TraitPredicate<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| ty::TraitPredicate {\n             trait_ref: trait_ref\n         })\n@@ -74,21 +74,21 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::EquatePredicate<'a> {\n     type Lifted = ty::EquatePredicate<'tcx>;\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<ty::EquatePredicate<'tcx>> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<ty::EquatePredicate<'tcx>> {\n         tcx.lift(&(self.0, self.1)).map(|(a, b)| ty::EquatePredicate(a, b))\n     }\n }\n \n impl<'tcx, A: Copy+Lift<'tcx>, B: Copy+Lift<'tcx>> Lift<'tcx> for ty::OutlivesPredicate<A, B> {\n     type Lifted = ty::OutlivesPredicate<A::Lifted, B::Lifted>;\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&(self.0, self.1)).map(|(a, b)| ty::OutlivesPredicate(a, b))\n     }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n     type Lifted = ty::ProjectionPredicate<'tcx>;\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<ty::ProjectionPredicate<'tcx>> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<ty::ProjectionPredicate<'tcx>> {\n         tcx.lift(&(self.projection_ty.trait_ref, self.ty)).map(|(trait_ref, ty)| {\n             ty::ProjectionPredicate {\n                 projection_ty: ty::ProjectionTy {\n@@ -103,7 +103,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n     type Lifted = ty::Binder<T::Lifted>;\n-    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx(&self, tcx: &TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.0).map(|x| ty::Binder(x))\n     }\n }"}, {"sha": "c8f8e07383275bbcfcfbd8db6f9ea72c44910caf", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@ use middle::def_id::DefId;\n use middle::region;\n use middle::subst::{self, Substs};\n use middle::traits;\n-use middle::ty::{self, AdtDef, ToPredicate, TypeFlags, Ty, TyS, TypeFoldable};\n+use middle::ty::{self, AdtDef, ToPredicate, TypeFlags, Ty, TyCtxt, TyS, TypeFoldable};\n use util::common::ErrorReported;\n \n use collections::enum_set::{self, EnumSet, CLike};\n@@ -281,7 +281,7 @@ impl<'tcx> TraitTy<'tcx> {\n     /// you must give *some* self-type. A common choice is `mk_err()`\n     /// or some skolemized type.\n     pub fn principal_trait_ref_with_self_ty(&self,\n-                                            tcx: &ty::ctxt<'tcx>,\n+                                            tcx: &TyCtxt<'tcx>,\n                                             self_ty: Ty<'tcx>)\n                                             -> ty::PolyTraitRef<'tcx>\n     {\n@@ -295,7 +295,7 @@ impl<'tcx> TraitTy<'tcx> {\n     }\n \n     pub fn projection_bounds_with_self_ty(&self,\n-                                          tcx: &ty::ctxt<'tcx>,\n+                                          tcx: &TyCtxt<'tcx>,\n                                           self_ty: Ty<'tcx>)\n                                           -> Vec<ty::PolyProjectionPredicate<'tcx>>\n     {\n@@ -540,7 +540,7 @@ impl ParamTy {\n         ParamTy::new(def.space, def.index, def.name)\n     }\n \n-    pub fn to_ty<'tcx>(self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty<'tcx>(self, tcx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         tcx.mk_param(self.space, self.idx, self.name)\n     }\n \n@@ -775,7 +775,7 @@ impl BuiltinBounds {\n     }\n \n     pub fn to_predicates<'tcx>(&self,\n-                               tcx: &ty::ctxt<'tcx>,\n+                               tcx: &TyCtxt<'tcx>,\n                                self_ty: Ty<'tcx>) -> Vec<ty::Predicate<'tcx>> {\n         self.iter().filter_map(|builtin_bound|\n             match traits::trait_ref_for_builtin_bound(tcx, builtin_bound, self_ty) {\n@@ -822,7 +822,7 @@ impl CLike for BuiltinBound {\n     }\n }\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn try_add_builtin_trait(&self,\n                                  trait_def_id: DefId,\n                                  builtin_bounds: &mut EnumSet<BuiltinBound>)\n@@ -902,7 +902,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_empty(&self, _cx: &ty::ctxt) -> bool {\n+    pub fn is_empty(&self, _cx: &TyCtxt) -> bool {\n         // FIXME(#24885): be smarter here\n         match self.sty {\n             TyEnum(def, _) | TyStruct(def, _) => def.is_empty(),\n@@ -974,7 +974,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn sequence_element_type(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    pub fn sequence_element_type(&self, cx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             TyArray(ty, _) | TySlice(ty) => ty,\n             TyStr => cx.mk_mach_uint(ast::UintTy::U8),\n@@ -983,7 +983,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn simd_type(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    pub fn simd_type(&self, cx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             TyStruct(def, substs) => {\n                 def.struct_variant().fields[0].ty(cx, substs)\n@@ -992,7 +992,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn simd_size(&self, _cx: &ty::ctxt) -> usize {\n+    pub fn simd_size(&self, _cx: &TyCtxt) -> usize {\n         match self.sty {\n             TyStruct(def, _) => def.struct_variant().fields.len(),\n             _ => panic!(\"simd_size called on invalid type\")"}, {"sha": "5ecbbbcfbde6dd93d23919090a0f79f0f77dca43", "filename": "src/librustc/middle/ty/trait_def.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,7 +12,7 @@ use dep_graph::DepNode;\n use middle::def_id::DefId;\n use middle::ty;\n use middle::ty::fast_reject;\n-use middle::ty::Ty;\n+use middle::ty::{Ty, TyCtxt};\n use std::borrow::{Borrow};\n use std::cell::{Cell, Ref, RefCell};\n use syntax::ast::Name;\n@@ -106,17 +106,17 @@ impl<'tcx> TraitDef<'tcx> {\n         );\n     }\n \n-    fn write_trait_impls(&self, tcx: &ty::ctxt<'tcx>) {\n+    fn write_trait_impls(&self, tcx: &TyCtxt<'tcx>) {\n         tcx.dep_graph.write(DepNode::TraitImpls(self.trait_ref.def_id));\n     }\n \n-    fn read_trait_impls(&self, tcx: &ty::ctxt<'tcx>) {\n+    fn read_trait_impls(&self, tcx: &TyCtxt<'tcx>) {\n         tcx.dep_graph.read(DepNode::TraitImpls(self.trait_ref.def_id));\n     }\n \n     /// Records a trait-to-implementation mapping.\n     pub fn record_impl(&self,\n-                       tcx: &ty::ctxt<'tcx>,\n+                       tcx: &TyCtxt<'tcx>,\n                        impl_def_id: DefId,\n                        impl_trait_ref: ty::TraitRef<'tcx>) {\n         debug!(\"TraitDef::record_impl for {:?}, from {:?}\",\n@@ -147,7 +147,7 @@ impl<'tcx> TraitDef<'tcx> {\n         }\n     }\n \n-    pub fn for_each_impl<F: FnMut(DefId)>(&self, tcx: &ty::ctxt<'tcx>, mut f: F)  {\n+    pub fn for_each_impl<F: FnMut(DefId)>(&self, tcx: &TyCtxt<'tcx>, mut f: F)  {\n         self.read_trait_impls(tcx);\n \n         tcx.populate_implementations_for_trait_if_necessary(self.trait_ref.def_id);\n@@ -166,7 +166,7 @@ impl<'tcx> TraitDef<'tcx> {\n     /// Iterate over every impl that could possibly match the\n     /// self-type `self_ty`.\n     pub fn for_each_relevant_impl<F: FnMut(DefId)>(&self,\n-                                                   tcx: &ty::ctxt<'tcx>,\n+                                                   tcx: &TyCtxt<'tcx>,\n                                                    self_ty: Ty<'tcx>,\n                                                    mut f: F)\n     {\n@@ -205,7 +205,7 @@ impl<'tcx> TraitDef<'tcx> {\n         }\n     }\n \n-    pub fn borrow_impl_lists<'s>(&'s self, tcx: &ty::ctxt<'tcx>)\n+    pub fn borrow_impl_lists<'s>(&'s self, tcx: &TyCtxt<'tcx>)\n                                  -> (Ref<'s, Vec<DefId>>,\n                                      Ref<'s, FnvHashMap<fast_reject::SimplifiedType, Vec<DefId>>>) {\n         self.read_trait_impls(tcx);"}, {"sha": "7c32d931fffcb6f2affe9a742acca392f7e7da2a", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -18,7 +18,7 @@ use middle::subst::{self, Subst, Substs};\n use middle::infer;\n use middle::pat_util;\n use middle::traits;\n-use middle::ty::{self, Ty, TypeAndMut, TypeFlags, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n use middle::ty::{Disr, ParameterEnvironment};\n use middle::ty::TypeVariants::*;\n use util::num::ToPrimitive;\n@@ -33,7 +33,7 @@ use syntax::codemap::Span;\n use rustc_front::hir;\n \n pub trait IntTypeExt {\n-    fn to_ty<'tcx>(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx>;\n+    fn to_ty<'tcx>(&self, cx: &TyCtxt<'tcx>) -> Ty<'tcx>;\n     fn i64_to_disr(&self, val: i64) -> Option<Disr>;\n     fn u64_to_disr(&self, val: u64) -> Option<Disr>;\n     fn disr_incr(&self, val: Disr) -> Option<Disr>;\n@@ -42,7 +42,7 @@ pub trait IntTypeExt {\n }\n \n impl IntTypeExt for attr::IntType {\n-    fn to_ty<'tcx>(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    fn to_ty<'tcx>(&self, cx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             SignedInt(ast::IntTy::I8)      => cx.types.i8,\n             SignedInt(ast::IntTy::I16)     => cx.types.i16,\n@@ -218,7 +218,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn pat_contains_ref_binding(&self, pat: &hir::Pat) -> Option<hir::Mutability> {\n         pat_util::pat_contains_ref_binding(&self.def_map, pat)\n     }\n@@ -430,7 +430,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n         helper(self, ty, svh, &mut state);\n         return state.finish();\n \n-        fn helper<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh,\n+        fn helper<'tcx>(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>, svh: &Svh,\n                         state: &mut SipHasher) {\n             macro_rules! byte { ($b:expr) => { ($b as u8).hash(state) } }\n             macro_rules! hash { ($e:expr) => { $e.hash(state) }  }\n@@ -603,7 +603,7 @@ pub struct ImplMethod<'tcx> {\n     pub is_provided: bool\n }\n \n-impl<'tcx> ty::ctxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn get_impl_method(&self,\n                            impl_def_id: DefId,\n                            substs: Substs<'tcx>,\n@@ -742,10 +742,10 @@ impl<'tcx> ty::TyS<'tcx> {\n \n     /// Check whether a type is representable. This means it cannot contain unboxed\n     /// structural recursion. This check is needed for structs and enums.\n-    pub fn is_representable(&'tcx self, cx: &ty::ctxt<'tcx>, sp: Span) -> Representability {\n+    pub fn is_representable(&'tcx self, cx: &TyCtxt<'tcx>, sp: Span) -> Representability {\n \n         // Iterate until something non-representable is found\n-        fn find_nonrepresentable<'tcx, It: Iterator<Item=Ty<'tcx>>>(cx: &ty::ctxt<'tcx>,\n+        fn find_nonrepresentable<'tcx, It: Iterator<Item=Ty<'tcx>>>(cx: &TyCtxt<'tcx>,\n                                                                     sp: Span,\n                                                                     seen: &mut Vec<Ty<'tcx>>,\n                                                                     iter: It)\n@@ -754,7 +754,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                       |r, ty| cmp::max(r, is_type_structurally_recursive(cx, sp, seen, ty)))\n         }\n \n-        fn are_inner_types_recursive<'tcx>(cx: &ty::ctxt<'tcx>, sp: Span,\n+        fn are_inner_types_recursive<'tcx>(cx: &TyCtxt<'tcx>, sp: Span,\n                                            seen: &mut Vec<Ty<'tcx>>, ty: Ty<'tcx>)\n                                            -> Representability {\n             match ty.sty {\n@@ -813,7 +813,7 @@ impl<'tcx> ty::TyS<'tcx> {\n \n         // Does the type `ty` directly (without indirection through a pointer)\n         // contain any types on stack `seen`?\n-        fn is_type_structurally_recursive<'tcx>(cx: &ty::ctxt<'tcx>,\n+        fn is_type_structurally_recursive<'tcx>(cx: &TyCtxt<'tcx>,\n                                                 sp: Span,\n                                                 seen: &mut Vec<Ty<'tcx>>,\n                                                 ty: Ty<'tcx>) -> Representability {"}, {"sha": "c6d1bc8d649585c1b91c2421bac880b502918db6", "filename": "src/librustc/middle/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -13,7 +13,7 @@ use middle::infer::InferCtxt;\n use middle::ty::outlives::{self, Component};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use std::iter::once;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -487,7 +487,7 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n /// `'static` would appear in the list. The hard work is done by\n /// `ty::required_region_bounds`, see that for more information.\n pub fn object_region_bounds<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &TyCtxt<'tcx>,\n     principal: &ty::PolyTraitRef<'tcx>,\n     others: ty::BuiltinBounds)\n     -> Vec<ty::Region>"}, {"sha": "933621b765f93dff5426e33e36c3c9fab414efa7", "filename": "src/librustc/mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmir_map.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,15 +12,15 @@ use dep_graph::DepNode;\n use util::nodemap::NodeMap;\n use mir::repr::Mir;\n use mir::transform::MirPass;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use middle::infer;\n \n pub struct MirMap<'tcx> {\n     pub map: NodeMap<Mir<'tcx>>,\n }\n \n impl<'tcx> MirMap<'tcx> {\n-    pub fn run_passes(&mut self, passes: &mut [Box<MirPass>], tcx: &ty::ctxt<'tcx>) {\n+    pub fn run_passes(&mut self, passes: &mut [Box<MirPass>], tcx: &TyCtxt<'tcx>) {\n         if passes.is_empty() { return; }\n \n         for (&id, mir) in &mut self.map {"}, {"sha": "26f6db4aa4fc17b9549842b0ea74bbeae19d9124", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -16,7 +16,7 @@\n use mir::repr::*;\n use middle::const_eval::ConstVal;\n use middle::subst::{Subst, Substs};\n-use middle::ty::{self, AdtDef, Ty};\n+use middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_front::hir;\n \n #[derive(Copy, Clone, Debug)]\n@@ -35,7 +35,7 @@ impl<'tcx> LvalueTy<'tcx> {\n         LvalueTy::Ty { ty: ty }\n     }\n \n-    pub fn to_ty(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty(&self, tcx: &TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             LvalueTy::Ty { ty } =>\n                 ty,\n@@ -45,7 +45,7 @@ impl<'tcx> LvalueTy<'tcx> {\n     }\n \n     pub fn projection_ty(self,\n-                         tcx: &ty::ctxt<'tcx>,\n+                         tcx: &TyCtxt<'tcx>,\n                          elem: &LvalueElem<'tcx>)\n                          -> LvalueTy<'tcx>\n     {\n@@ -80,7 +80,7 @@ impl<'tcx> LvalueTy<'tcx> {\n \n impl<'tcx> Mir<'tcx> {\n     pub fn operand_ty(&self,\n-                      tcx: &ty::ctxt<'tcx>,\n+                      tcx: &TyCtxt<'tcx>,\n                       operand: &Operand<'tcx>)\n                       -> Ty<'tcx>\n     {\n@@ -91,7 +91,7 @@ impl<'tcx> Mir<'tcx> {\n     }\n \n     pub fn binop_ty(&self,\n-                    tcx: &ty::ctxt<'tcx>,\n+                    tcx: &TyCtxt<'tcx>,\n                     op: BinOp,\n                     lhs_ty: Ty<'tcx>,\n                     rhs_ty: Ty<'tcx>)\n@@ -116,7 +116,7 @@ impl<'tcx> Mir<'tcx> {\n     }\n \n     pub fn lvalue_ty(&self,\n-                     tcx: &ty::ctxt<'tcx>,\n+                     tcx: &TyCtxt<'tcx>,\n                      lvalue: &Lvalue<'tcx>)\n                      -> LvalueTy<'tcx>\n     {\n@@ -137,7 +137,7 @@ impl<'tcx> Mir<'tcx> {\n     }\n \n     pub fn rvalue_ty(&self,\n-                     tcx: &ty::ctxt<'tcx>,\n+                     tcx: &TyCtxt<'tcx>,\n                      rvalue: &Rvalue<'tcx>)\n                      -> Option<Ty<'tcx>>\n     {"}, {"sha": "9c92208191e9c79b84a2bc040d5d8a100d7b5542", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -17,7 +17,7 @@ use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n use std::fmt;\n use syntax::abi::Abi;\n@@ -66,7 +66,7 @@ fn parameterized<GG>(f: &mut fmt::Formatter,\n                      projections: &[ty::ProjectionPredicate],\n                      get_generics: GG)\n                      -> fmt::Result\n-    where GG: for<'tcx> FnOnce(&ty::ctxt<'tcx>) -> ty::Generics<'tcx>\n+    where GG: for<'tcx> FnOnce(&TyCtxt<'tcx>) -> ty::Generics<'tcx>\n {\n     let (fn_trait_kind, verbose) = try!(ty::tls::with(|tcx| {\n         try!(write!(f, \"{}\", tcx.item_path_str(did)));\n@@ -189,7 +189,7 @@ fn parameterized<GG>(f: &mut fmt::Formatter,\n }\n \n fn in_binder<'tcx, T, U>(f: &mut fmt::Formatter,\n-                         tcx: &ty::ctxt<'tcx>,\n+                         tcx: &TyCtxt<'tcx>,\n                          original: &ty::Binder<T>,\n                          lifted: Option<ty::Binder<U>>) -> fmt::Result\n     where T: fmt::Display, U: fmt::Display + TypeFoldable<'tcx>"}, {"sha": "4a1c115e65599cde3f34e0bd158d3ec4c43466fa", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -26,7 +26,7 @@ use rustc::middle::infer;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc_front::hir;\n@@ -231,7 +231,7 @@ fn compatible_borrow_kinds(borrow_kind1: ty::BorrowKind,\n }\n \n impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n-    pub fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.bccx.tcx }\n+    pub fn tcx(&self) -> &'a TyCtxt<'tcx> { self.bccx.tcx }\n \n     pub fn each_issued_loan<F>(&self, node: ast::NodeId, mut op: F) -> bool where\n         F: FnMut(&Loan<'tcx>) -> bool,"}, {"sha": "3d6e9c8868c92df5bc4aaa4f15b53609fc9c2822", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -21,7 +21,7 @@ use borrowck::LoanPathElem::{LpDeref, LpInterior};\n use borrowck::move_data::InvalidMovePathIndex;\n use borrowck::move_data::{MoveData, MovePathIndex};\n use rustc::middle::def_id::{DefId};\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n use rustc::middle::mem_categorization as mc;\n \n use std::mem;\n@@ -200,7 +200,7 @@ impl FragmentSets {\n }\n \n pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n-                                       tcx: &ty::ctxt<'tcx>,\n+                                       tcx: &TyCtxt<'tcx>,\n                                        sp: Span,\n                                        id: ast::NodeId) {\n     let span_err = tcx.map.attrs(id).iter()\n@@ -245,7 +245,7 @@ pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n ///\n /// Note: \"left-over fragments\" means paths that were not directly referenced in moves nor\n /// assignments, but must nonetheless be tracked as potential drop obligations.\n-pub fn fixup_fragment_sets<'tcx>(this: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) {\n+pub fn fixup_fragment_sets<'tcx>(this: &MoveData<'tcx>, tcx: &TyCtxt<'tcx>) {\n \n     let mut fragments = this.fragments.borrow_mut();\n \n@@ -347,7 +347,7 @@ pub fn fixup_fragment_sets<'tcx>(this: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) {\n /// example, if `lp` represents `s.x.j`, then adds moves paths for `s.x.i` and `s.x.k`, the\n /// siblings of `s.x.j`.\n fn add_fragment_siblings<'tcx>(this: &MoveData<'tcx>,\n-                               tcx: &ty::ctxt<'tcx>,\n+                               tcx: &TyCtxt<'tcx>,\n                                gathered_fragments: &mut Vec<Fragment>,\n                                lp: Rc<LoanPath<'tcx>>,\n                                origin_id: Option<ast::NodeId>) {\n@@ -406,7 +406,7 @@ fn add_fragment_siblings<'tcx>(this: &MoveData<'tcx>,\n /// We have determined that `origin_lp` destructures to LpExtend(parent, original_field_name).\n /// Based on this, add move paths for all of the siblings of `origin_lp`.\n fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n-                                             tcx: &ty::ctxt<'tcx>,\n+                                             tcx: &TyCtxt<'tcx>,\n                                              gathered_fragments: &mut Vec<Fragment>,\n                                              parent_lp: &Rc<LoanPath<'tcx>>,\n                                              mc: mc::MutabilityCategory,\n@@ -504,7 +504,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n /// Adds the single sibling `LpExtend(parent, new_field_name)` of `origin_lp` (the original\n /// loan-path).\n fn add_fragment_sibling_core<'tcx>(this: &MoveData<'tcx>,\n-                                   tcx: &ty::ctxt<'tcx>,\n+                                   tcx: &TyCtxt<'tcx>,\n                                    gathered_fragments: &mut Vec<Fragment>,\n                                    parent: Rc<LoanPath<'tcx>>,\n                                    mc: mc::MutabilityCategory,"}, {"sha": "e2543b289103a6d66e7656a979955e36cf3b9d1a", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -23,7 +23,7 @@ use rustc::middle::infer;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n \n use syntax::ast;\n use syntax::codemap::Span;\n@@ -253,7 +253,7 @@ fn check_mutability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n-    pub fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.bccx.tcx }\n+    pub fn tcx(&self) -> &'a TyCtxt<'tcx> { self.bccx.tcx }\n \n     /// Guarantees that `cmt` is assignable, or reports an error.\n     fn guarantee_assignment_valid(&mut self,"}, {"sha": "ceaa6625fe2d92c186ec6d9e1acf3e80462900e5", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -34,7 +34,7 @@ use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n \n use std::fmt;\n use std::mem;\n@@ -98,7 +98,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt) {\n+pub fn check_crate(tcx: &TyCtxt) {\n     let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n         free_region_map: FreeRegionMap::new(),\n@@ -232,7 +232,7 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n /// Accessor for introspective clients inspecting `AnalysisData` and\n /// the `BorrowckCtxt` itself , e.g. the flowgraph visualizer.\n pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     fn_parts: FnParts<'a>,\n     cfg: &cfg::CFG)\n     -> (BorrowckCtxt<'a, 'tcx>, AnalysisData<'a, 'tcx>)\n@@ -264,7 +264,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n // Type definitions\n \n pub struct BorrowckCtxt<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n \n     // Hacky. As we visit various fns, we have to load up the\n     // free-region map for each one. This map is computed by during\n@@ -394,7 +394,7 @@ pub enum LoanPathElem {\n }\n \n pub fn closure_to_block(closure_id: ast::NodeId,\n-                        tcx: &ty::ctxt) -> ast::NodeId {\n+                        tcx: &TyCtxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n         hir_map::NodeExpr(expr) => match expr.node {\n             hir::ExprClosure(_, _, ref block) => {\n@@ -409,7 +409,7 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n }\n \n impl<'tcx> LoanPath<'tcx> {\n-    pub fn kill_scope(&self, tcx: &ty::ctxt<'tcx>) -> region::CodeExtent {\n+    pub fn kill_scope(&self, tcx: &TyCtxt<'tcx>) -> region::CodeExtent {\n         match self.kind {\n             LpVar(local_id) => tcx.region_maps.var_scope(local_id),\n             LpUpvar(upvar_id) => {\n@@ -1157,7 +1157,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     }\n }\n \n-fn statement_scope_span(tcx: &ty::ctxt, region: ty::Region) -> Option<Span> {\n+fn statement_scope_span(tcx: &TyCtxt, region: ty::Region) -> Option<Span> {\n     match region {\n         ty::ReScope(scope) => {\n             match tcx.map.find(scope.node_id(&tcx.region_maps)) {"}, {"sha": "4c645d4bb69bde6de7d7199bc4598017a5e9afe3", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -21,7 +21,7 @@ use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::expr_use_visitor::MutateMode;\n-use rustc::middle::ty;\n+use rustc::middle::ty::TyCtxt;\n use rustc::util::nodemap::{FnvHashMap, NodeSet};\n \n use std::cell::RefCell;\n@@ -273,7 +273,7 @@ impl<'tcx> MoveData<'tcx> {\n     /// Returns the existing move path index for `lp`, if any, and otherwise adds a new index for\n     /// `lp` and any of its base paths that do not yet have an index.\n     pub fn move_path(&self,\n-                     tcx: &ty::ctxt<'tcx>,\n+                     tcx: &TyCtxt<'tcx>,\n                      lp: Rc<LoanPath<'tcx>>) -> MovePathIndex {\n         match self.path_map.borrow().get(&lp) {\n             Some(&index) => {\n@@ -365,7 +365,7 @@ impl<'tcx> MoveData<'tcx> {\n \n     /// Adds a new move entry for a move of `lp` that occurs at location `id` with kind `kind`.\n     pub fn add_move(&self,\n-                    tcx: &ty::ctxt<'tcx>,\n+                    tcx: &TyCtxt<'tcx>,\n                     lp: Rc<LoanPath<'tcx>>,\n                     id: ast::NodeId,\n                     kind: MoveKind) {\n@@ -393,7 +393,7 @@ impl<'tcx> MoveData<'tcx> {\n     /// Adds a new record for an assignment to `lp` that occurs at location `id` with the given\n     /// `span`.\n     pub fn add_assignment(&self,\n-                          tcx: &ty::ctxt<'tcx>,\n+                          tcx: &TyCtxt<'tcx>,\n                           lp: Rc<LoanPath<'tcx>>,\n                           assign_id: ast::NodeId,\n                           span: Span,\n@@ -438,7 +438,7 @@ impl<'tcx> MoveData<'tcx> {\n     /// should be able to recover the span info from the\n     /// `pattern_id` and the ast_map, I think.)\n     pub fn add_variant_match(&self,\n-                             tcx: &ty::ctxt<'tcx>,\n+                             tcx: &TyCtxt<'tcx>,\n                              lp: Rc<LoanPath<'tcx>>,\n                              pattern_id: ast::NodeId,\n                              base_lp: Rc<LoanPath<'tcx>>,\n@@ -461,7 +461,7 @@ impl<'tcx> MoveData<'tcx> {\n         self.variant_matches.borrow_mut().push(variant_match);\n     }\n \n-    fn fixup_fragment_sets(&self, tcx: &ty::ctxt<'tcx>) {\n+    fn fixup_fragment_sets(&self, tcx: &TyCtxt<'tcx>) {\n         fragments::fixup_fragment_sets(self, tcx)\n     }\n \n@@ -471,7 +471,7 @@ impl<'tcx> MoveData<'tcx> {\n     /// scoping. Assignments are generated by assignment to variables and\n     /// killed by scoping. See `README.md` for more details.\n     fn add_gen_kills(&self,\n-                     tcx: &ty::ctxt<'tcx>,\n+                     tcx: &TyCtxt<'tcx>,\n                      dfcx_moves: &mut MoveDataFlow,\n                      dfcx_assign: &mut AssignDataFlow) {\n         for (i, the_move) in self.moves.borrow().iter().enumerate() {\n@@ -600,7 +600,7 @@ impl<'tcx> MoveData<'tcx> {\n \n impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n     pub fn new(move_data: MoveData<'tcx>,\n-               tcx: &'a ty::ctxt<'tcx>,\n+               tcx: &'a TyCtxt<'tcx>,\n                cfg: &cfg::CFG,\n                id_range: ast_util::IdRange,\n                decl: &hir::FnDecl,"}, {"sha": "9c1be4c9f2f3e51df4b5412549df23617e542592", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -17,9 +17,9 @@ use rustc::session::{Session, CompileResult, compile_result_from_err_count};\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n-use rustc::middle::{dependency_format, stability, ty, reachable};\n+use rustc::middle::{self, dependency_format, stability, ty, reachable};\n use rustc::middle::privacy::AccessLevels;\n-use rustc::middle;\n+use rustc::middle::ty::TyCtxt;\n use rustc::util::common::time;\n use rustc::util::nodemap::NodeSet;\n use rustc_borrowck as borrowck;\n@@ -313,7 +313,7 @@ pub struct CompileState<'a, 'ast: 'a, 'tcx: 'a> {\n     pub ast_map: Option<&'a hir_map::Map<'ast>>,\n     pub mir_map: Option<&'a MirMap<'tcx>>,\n     pub analysis: Option<&'a ty::CrateAnalysis<'a>>,\n-    pub tcx: Option<&'a ty::ctxt<'tcx>>,\n+    pub tcx: Option<&'a TyCtxt<'tcx>>,\n     pub lcx: Option<&'a LoweringContext<'a>>,\n     pub trans: Option<&'a trans::CrateTranslation>,\n }\n@@ -389,7 +389,7 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                             hir_crate: &'a hir::Crate,\n                             analysis: &'a ty::CrateAnalysis,\n                             mir_map: Option<&'a MirMap<'tcx>>,\n-                            tcx: &'a ty::ctxt<'tcx>,\n+                            tcx: &'a TyCtxt<'tcx>,\n                             lcx: &'a LoweringContext<'a>,\n                             crate_name: &'a str)\n                             -> CompileState<'a, 'ast, 'tcx> {\n@@ -730,7 +730,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                                make_glob_map: resolve::MakeGlobMap,\n                                                f: F)\n                                                -> Result<R, usize>\n-    where F: FnOnce(&ty::ctxt<'tcx>, Option<MirMap<'tcx>>, ty::CrateAnalysis, CompileResult) -> R\n+    where F: FnOnce(&TyCtxt<'tcx>, Option<MirMap<'tcx>>, ty::CrateAnalysis, CompileResult) -> R\n {\n     macro_rules! try_with_f {\n         ($e: expr, ($t: expr, $m: expr, $a: expr)) => {\n@@ -803,7 +803,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let index = stability::Index::new(&hir_map);\n \n-    ty::ctxt::create_and_enter(sess,\n+    TyCtxt::create_and_enter(sess,\n                                arenas,\n                                def_map,\n                                named_region_map,\n@@ -913,7 +913,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-pub fn phase_4_translate_to_llvm<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn phase_4_translate_to_llvm<'tcx>(tcx: &TyCtxt<'tcx>,\n                                        mut mir_map: MirMap<'tcx>,\n                                        analysis: ty::CrateAnalysis)\n                                        -> trans::CrateTranslation {"}, {"sha": "eb4668e6abb1c40e493be36288b338f242ddeddd", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -20,7 +20,7 @@ use rustc_trans::back::link;\n use {driver, abort_on_err};\n \n use rustc::dep_graph::DepGraph;\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n use rustc::session::Session;\n@@ -431,7 +431,7 @@ impl<'ast> pprust::PpAnn for HygieneAnnotation<'ast> {\n \n \n struct TypedAnnotation<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n }\n \n impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n@@ -913,7 +913,7 @@ pub fn pretty_print_input(sess: Session,\n }\n \n fn print_flowgraph<W: Write>(variants: Vec<borrowck_dot::Variant>,\n-                             tcx: &ty::ctxt,\n+                             tcx: &TyCtxt,\n                              code: blocks::Code,\n                              mode: PpFlowGraphMode,\n                              mut out: W)"}, {"sha": "abeaffe80ab0bdd70e2c9f2f135a2e73388850eb", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -22,7 +22,7 @@ use rustc_typeck::middle::resolve_lifetime;\n use rustc_typeck::middle::stability;\n use rustc_typeck::middle::subst;\n use rustc_typeck::middle::subst::Subst;\n-use rustc_typeck::middle::ty::{self, Ty, TypeFoldable};\n+use rustc_typeck::middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_typeck::middle::ty::relate::TypeRelation;\n use rustc_typeck::middle::infer::{self, TypeOrigin};\n use rustc_typeck::middle::infer::lub::Lub;\n@@ -133,7 +133,7 @@ fn test_env<F>(source_string: &str,\n     let named_region_map = resolve_lifetime::krate(&sess, &ast_map, &def_map.borrow());\n     let region_map = region::resolve_crate(&sess, &ast_map);\n     let index = stability::Index::new(&ast_map);\n-    ty::ctxt::create_and_enter(&sess,\n+    TyCtxt::create_and_enter(&sess,\n                                &arenas,\n                                def_map,\n                                named_region_map.unwrap(),\n@@ -153,7 +153,7 @@ fn test_env<F>(source_string: &str,\n }\n \n impl<'a, 'tcx> Env<'a, 'tcx> {\n-    pub fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    pub fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "86ab8d45e4e1dbf7e8828c119289855affa6b64b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -33,7 +33,7 @@ use middle::def::Def;\n use middle::cstore::CrateStore;\n use middle::def_id::DefId;\n use middle::subst::Substs;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::adjustment;\n use rustc::front::map as hir_map;\n use util::nodemap::{NodeSet};\n@@ -774,7 +774,7 @@ impl LateLintPass for UnconditionalRecursion {\n         // Functions for identifying if the given Expr NodeId `id`\n         // represents a call to the function `fn_id`/method `method`.\n \n-        fn expr_refers_to_this_fn(tcx: &ty::ctxt,\n+        fn expr_refers_to_this_fn(tcx: &TyCtxt,\n                                   fn_id: ast::NodeId,\n                                   id: ast::NodeId) -> bool {\n             match tcx.map.get(id) {\n@@ -790,7 +790,7 @@ impl LateLintPass for UnconditionalRecursion {\n         }\n \n         // Check if the expression `id` performs a call to `method`.\n-        fn expr_refers_to_this_method(tcx: &ty::ctxt,\n+        fn expr_refers_to_this_method(tcx: &TyCtxt,\n                                       method: &ty::Method,\n                                       id: ast::NodeId) -> bool {\n             // Check for method calls and overloaded operators.\n@@ -838,7 +838,7 @@ impl LateLintPass for UnconditionalRecursion {\n \n         // Check if the method call to the method with the ID `callee_id`\n         // and instantiated with `callee_substs` refers to method `method`.\n-        fn method_call_refers_to_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+        fn method_call_refers_to_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                               method: &ty::Method,\n                                               callee_id: DefId,\n                                               callee_substs: &Substs<'tcx>,"}, {"sha": "c7cb2d15a092f3d94a16299ebb4e2b0fd5f135c0", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -13,7 +13,7 @@\n use middle::{infer};\n use middle::def_id::DefId;\n use middle::subst::Substs;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::const_eval::{eval_const_expr_partial, ConstVal};\n use middle::const_eval::EvalHint::ExprTypeChecked;\n use util::nodemap::{FnvHashSet};\n@@ -293,7 +293,7 @@ impl LateLintPass for TypeLimits {\n             }\n         }\n \n-        fn check_limits(tcx: &ty::ctxt, binop: hir::BinOp,\n+        fn check_limits(tcx: &TyCtxt, binop: hir::BinOp,\n                         l: &hir::Expr, r: &hir::Expr) -> bool {\n             let (lit, expr, swap) = match (&l.node, &r.node) {\n                 (&hir::ExprLit(_), _) => (l, r, true),\n@@ -374,7 +374,7 @@ enum FfiResult {\n /// to function pointers and references, but could be\n /// expanded to cover NonZero raw pointers and newtypes.\n /// FIXME: This duplicates code in trans.\n-fn is_repr_nullable_ptr<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn is_repr_nullable_ptr<'tcx>(tcx: &TyCtxt<'tcx>,\n                               def: ty::AdtDef<'tcx>,\n                               substs: &Substs<'tcx>)\n                               -> bool {\n@@ -400,7 +400,7 @@ fn is_repr_nullable_ptr<'tcx>(tcx: &ty::ctxt<'tcx>,\n     false\n }\n \n-fn ast_ty_to_normalized<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn ast_ty_to_normalized<'tcx>(tcx: &TyCtxt<'tcx>,\n                               id: ast::NodeId)\n                               -> Ty<'tcx> {\n     let tty = match tcx.ast_ty_to_ty_cache.borrow().get(&id) {"}, {"sha": "d43a9f4dcda58e41228ebdce52a5fdb7d1ca304c", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -34,7 +34,7 @@ use middle::def::{self, Def};\n use middle::def_id::DefId;\n use middle::region;\n use middle::subst;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n \n use syntax::{ast, ast_util, codemap};\n use syntax::ast::NodeIdAssigner;\n@@ -59,7 +59,7 @@ use serialize::EncoderHelpers;\n #[cfg(test)] use rustc_front::lowering::{lower_item, LoweringContext};\n \n struct DecodeContext<'a, 'b, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     cdata: &'b cstore::crate_metadata,\n     from_id_range: ast_util::IdRange,\n     to_id_range: ast_util::IdRange,\n@@ -122,7 +122,7 @@ impl<'a, 'b, 'c, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'c, 'tcx> {\n /// Decodes an item from its AST in the cdata's metadata and adds it to the\n /// ast-map.\n pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n-                                 tcx: &ty::ctxt<'tcx>,\n+                                 tcx: &TyCtxt<'tcx>,\n                                  parent_path: Vec<ast_map::PathElem>,\n                                  parent_def_path: ast_map::DefPath,\n                                  par_doc: rbml::Doc,\n@@ -878,18 +878,18 @@ trait rbml_decoder_decoder_helpers<'tcx> {\n     // Versions of the type reading functions that don't need the full\n     // DecodeContext.\n     fn read_ty_nodcx(&mut self,\n-                     tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata) -> Ty<'tcx>;\n+                     tcx: &TyCtxt<'tcx>, cdata: &cstore::crate_metadata) -> Ty<'tcx>;\n     fn read_tys_nodcx(&mut self,\n-                      tcx: &ty::ctxt<'tcx>,\n+                      tcx: &TyCtxt<'tcx>,\n                       cdata: &cstore::crate_metadata) -> Vec<Ty<'tcx>>;\n-    fn read_substs_nodcx(&mut self, tcx: &ty::ctxt<'tcx>,\n+    fn read_substs_nodcx(&mut self, tcx: &TyCtxt<'tcx>,\n                          cdata: &cstore::crate_metadata)\n                          -> subst::Substs<'tcx>;\n }\n \n impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_ty_nodcx(&mut self,\n-                     tcx: &ty::ctxt<'tcx>,\n+                     tcx: &TyCtxt<'tcx>,\n                      cdata: &cstore::crate_metadata)\n                      -> Ty<'tcx> {\n         self.read_opaque(|_, doc| {\n@@ -901,7 +901,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     }\n \n     fn read_tys_nodcx(&mut self,\n-                      tcx: &ty::ctxt<'tcx>,\n+                      tcx: &TyCtxt<'tcx>,\n                       cdata: &cstore::crate_metadata) -> Vec<Ty<'tcx>> {\n         self.read_to_vec(|this| Ok(this.read_ty_nodcx(tcx, cdata)) )\n             .unwrap()\n@@ -910,7 +910,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     }\n \n     fn read_substs_nodcx(&mut self,\n-                         tcx: &ty::ctxt<'tcx>,\n+                         tcx: &TyCtxt<'tcx>,\n                          cdata: &cstore::crate_metadata)\n                          -> subst::Substs<'tcx>\n     {"}, {"sha": "63db3d3c870e60c9594ed1142f70ce50a7d36e20", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -18,7 +18,7 @@ use middle::cstore::{CrateStore, CrateSource, ChildItem, FoundAst};\n use middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n use middle::def;\n use middle::lang_items;\n-use middle::ty::{self, Ty, VariantKind};\n+use middle::ty::{self, Ty, TyCtxt, VariantKind};\n use middle::def_id::{DefId, DefIndex};\n \n use rustc::front::map as hir_map;\n@@ -49,14 +49,14 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_deprecation(&cdata, def.index)\n     }\n \n-    fn closure_kind(&self, _tcx: &ty::ctxt<'tcx>, def_id: DefId) -> ty::ClosureKind\n+    fn closure_kind(&self, _tcx: &TyCtxt<'tcx>, def_id: DefId) -> ty::ClosureKind\n     {\n         assert!(!def_id.is_local());\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::closure_kind(&cdata, def_id.index)\n     }\n \n-    fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx>\n+    fn closure_ty(&self, tcx: &TyCtxt<'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx>\n     {\n         assert!(!def_id.is_local());\n         let cdata = self.get_crate_data(def_id.krate);\n@@ -73,21 +73,21 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_repr_attrs(&cdata, def.index)\n     }\n \n-    fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_type(&cdata, def.index, tcx)\n     }\n \n-    fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_predicates(&cdata, def.index, tcx)\n     }\n \n-    fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn item_super_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                              -> ty::GenericPredicates<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n@@ -106,13 +106,13 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_symbol(&cdata, def.index)\n     }\n \n-    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::TraitDef<'tcx>\n+    fn trait_def(&self, tcx: &TyCtxt<'tcx>, def: DefId) -> ty::TraitDef<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_trait_def(&cdata, def.index, tcx)\n     }\n \n-    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n+    fn adt_def(&self, tcx: &TyCtxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_adt_def(&self.intr, &cdata, def.index, tcx)\n@@ -173,7 +173,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         result\n     }\n \n-    fn provided_trait_methods(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn provided_trait_methods(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                               -> Vec<Rc<ty::Method<'tcx>>>\n     {\n         let cdata = self.get_crate_data(def.krate);\n@@ -199,7 +199,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_impl_polarity(&cdata, def.index)\n     }\n \n-    fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn impl_trait_ref(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                       -> Option<ty::TraitRef<'tcx>>\n     {\n         let cdata = self.get_crate_data(def.krate);\n@@ -214,19 +214,19 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     }\n \n     // FIXME: killme\n-    fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn associated_consts(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                          -> Vec<Rc<ty::AssociatedConst<'tcx>>> {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_associated_consts(self.intr.clone(), &cdata, def.index, tcx)\n     }\n \n-    fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId) -> Option<DefId>\n+    fn trait_of_item(&self, tcx: &TyCtxt<'tcx>, def_id: DefId) -> Option<DefId>\n     {\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::get_trait_of_item(&cdata, def_id.index, tcx)\n     }\n \n-    fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn impl_or_trait_item(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> ty::ImplOrTraitItem<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n@@ -260,7 +260,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::is_default_impl(&cdata, impl_did.index)\n     }\n \n-    fn is_extern_item(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool {\n+    fn is_extern_item(&self, tcx: &TyCtxt<'tcx>, did: DefId) -> bool {\n         let cdata = self.get_crate_data(did.krate);\n         decoder::is_extern_item(&cdata, did.index, tcx)\n     }\n@@ -425,15 +425,15 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         result\n     }\n \n-    fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn maybe_get_item_ast(&'tcx self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n         let decode_inlined_item = Box::new(astencode::decode_inlined_item);\n         decoder::maybe_get_item_ast(&cdata, tcx, def.index, decode_inlined_item)\n     }\n \n-    fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+    fn maybe_get_item_mir(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                           -> Option<Mir<'tcx>> {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::maybe_get_item_mir(&cdata, tcx, def.index)\n@@ -470,7 +470,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         loader::meta_section_name(target)\n     }\n-    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>\n+    fn encode_type(&self, tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>\n     {\n         encoder::encoded_ty(tcx, ty)\n     }\n@@ -491,7 +491,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     }\n \n     fn encode_metadata(&self,\n-                       tcx: &ty::ctxt<'tcx>,\n+                       tcx: &TyCtxt<'tcx>,\n                        reexports: &def::ExportMap,\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,"}, {"sha": "e286e028f33307158ca12bcd58cf75b84b5d4ff6", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -33,7 +33,7 @@ use middle::def_id::{DefId, DefIndex};\n use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n-use middle::ty::{self, Ty, TypeFoldable, VariantKind};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable, VariantKind};\n \n use rustc::mir;\n use rustc::mir::visit::MutVisitor;\n@@ -206,14 +206,14 @@ fn variant_disr_val(d: rbml::Doc) -> Option<ty::Disr> {\n     })\n }\n \n-fn doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Ty<'tcx> {\n+fn doc_type<'tcx>(doc: rbml::Doc, tcx: &TyCtxt<'tcx>, cdata: Cmd) -> Ty<'tcx> {\n     let tp = reader::get_doc(doc, tag_items_data_item_type);\n     TyDecoder::with_doc(tcx, cdata.cnum, tp,\n                         &mut |did| translate_def_id(cdata, did))\n         .parse_ty()\n }\n \n-fn maybe_doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Option<Ty<'tcx>> {\n+fn maybe_doc_type<'tcx>(doc: rbml::Doc, tcx: &TyCtxt<'tcx>, cdata: Cmd) -> Option<Ty<'tcx>> {\n     reader::maybe_get_doc(doc, tag_items_data_item_type).map(|tp| {\n         TyDecoder::with_doc(tcx, cdata.cnum, tp,\n                             &mut |did| translate_def_id(cdata, did))\n@@ -222,18 +222,18 @@ fn maybe_doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Opt\n }\n \n pub fn item_type<'tcx>(_item_id: DefId, item: rbml::Doc,\n-                       tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Ty<'tcx> {\n+                       tcx: &TyCtxt<'tcx>, cdata: Cmd) -> Ty<'tcx> {\n     doc_type(item, tcx, cdata)\n }\n \n-fn doc_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n+fn doc_trait_ref<'tcx>(doc: rbml::Doc, tcx: &TyCtxt<'tcx>, cdata: Cmd)\n                        -> ty::TraitRef<'tcx> {\n     TyDecoder::with_doc(tcx, cdata.cnum, doc,\n                         &mut |did| translate_def_id(cdata, did))\n         .parse_trait_ref()\n }\n \n-fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n+fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &TyCtxt<'tcx>, cdata: Cmd)\n                         -> ty::TraitRef<'tcx> {\n     let tp = reader::get_doc(doc, tag_item_trait_ref);\n     doc_trait_ref(tp, tcx, cdata)\n@@ -351,7 +351,7 @@ fn parse_associated_type_names(item_doc: rbml::Doc) -> Vec<ast::Name> {\n \n pub fn get_trait_def<'tcx>(cdata: Cmd,\n                            item_id: DefIndex,\n-                           tcx: &ty::ctxt<'tcx>) -> ty::TraitDef<'tcx>\n+                           tcx: &TyCtxt<'tcx>) -> ty::TraitDef<'tcx>\n {\n     let item_doc = cdata.lookup_item(item_id);\n     let generics = doc_generics(item_doc, tcx, cdata, tag_item_generics);\n@@ -369,9 +369,9 @@ pub fn get_trait_def<'tcx>(cdata: Cmd,\n pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                          cdata: Cmd,\n                          item_id: DefIndex,\n-                         tcx: &ty::ctxt<'tcx>) -> ty::AdtDefMaster<'tcx>\n+                         tcx: &TyCtxt<'tcx>) -> ty::AdtDefMaster<'tcx>\n {\n-    fn expect_variant_kind<'tcx>(family: Family, tcx: &ty::ctxt<'tcx>) -> ty::VariantKind {\n+    fn expect_variant_kind<'tcx>(family: Family, tcx: &TyCtxt<'tcx>) -> ty::VariantKind {\n         match family_to_variant_kind(family) {\n             Some(kind) => kind,\n             _ => tcx.sess.bug(&format!(\"unexpected family: {:?}\", family)),\n@@ -380,7 +380,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n     fn get_enum_variants<'tcx>(intr: &IdentInterner,\n                                cdata: Cmd,\n                                doc: rbml::Doc,\n-                               tcx: &ty::ctxt<'tcx>) -> Vec<ty::VariantDefData<'tcx, 'tcx>> {\n+                               tcx: &TyCtxt<'tcx>) -> Vec<ty::VariantDefData<'tcx, 'tcx>> {\n         let mut disr_val = 0;\n         reader::tagged_docs(doc, tag_items_data_item_variant).map(|p| {\n             let did = translated_def_id(cdata, p);\n@@ -404,7 +404,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n     fn get_variant_fields<'tcx>(intr: &IdentInterner,\n                                 cdata: Cmd,\n                                 doc: rbml::Doc,\n-                                tcx: &ty::ctxt<'tcx>) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n+                                tcx: &TyCtxt<'tcx>) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n         let mut index = 0;\n         reader::tagged_docs(doc, tag_item_field).map(|f| {\n             let ff = item_family(f);\n@@ -427,7 +427,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                                 cdata: Cmd,\n                                 doc: rbml::Doc,\n                                 did: DefId,\n-                                tcx: &ty::ctxt<'tcx>) -> ty::VariantDefData<'tcx, 'tcx> {\n+                                tcx: &TyCtxt<'tcx>) -> ty::VariantDefData<'tcx, 'tcx> {\n         ty::VariantDefData {\n             did: did,\n             name: item_name(intr, doc),\n@@ -500,7 +500,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n \n pub fn get_predicates<'tcx>(cdata: Cmd,\n                             item_id: DefIndex,\n-                            tcx: &ty::ctxt<'tcx>)\n+                            tcx: &TyCtxt<'tcx>)\n                             -> ty::GenericPredicates<'tcx>\n {\n     let item_doc = cdata.lookup_item(item_id);\n@@ -509,14 +509,14 @@ pub fn get_predicates<'tcx>(cdata: Cmd,\n \n pub fn get_super_predicates<'tcx>(cdata: Cmd,\n                                   item_id: DefIndex,\n-                                  tcx: &ty::ctxt<'tcx>)\n+                                  tcx: &TyCtxt<'tcx>)\n                                   -> ty::GenericPredicates<'tcx>\n {\n     let item_doc = cdata.lookup_item(item_id);\n     doc_predicates(item_doc, tcx, cdata, tag_item_super_predicates)\n }\n \n-pub fn get_type<'tcx>(cdata: Cmd, id: DefIndex, tcx: &ty::ctxt<'tcx>)\n+pub fn get_type<'tcx>(cdata: Cmd, id: DefIndex, tcx: &TyCtxt<'tcx>)\n                       -> ty::TypeScheme<'tcx>\n {\n     let item_doc = cdata.lookup_item(id);\n@@ -584,7 +584,7 @@ pub fn get_custom_coerce_unsized_kind<'tcx>(\n \n pub fn get_impl_trait<'tcx>(cdata: Cmd,\n                             id: DefIndex,\n-                            tcx: &ty::ctxt<'tcx>)\n+                            tcx: &TyCtxt<'tcx>)\n                             -> Option<ty::TraitRef<'tcx>>\n {\n     let item_doc = cdata.lookup_item(id);\n@@ -773,7 +773,7 @@ pub fn get_item_name(intr: &IdentInterner, cdata: Cmd, id: DefIndex) -> ast::Nam\n \n pub type DecodeInlinedItem<'a> =\n     Box<for<'tcx> FnMut(Cmd,\n-                        &ty::ctxt<'tcx>,\n+                        &TyCtxt<'tcx>,\n                         Vec<hir_map::PathElem>, // parent_path\n                         hir_map::DefPath,       // parent_def_path\n                         rbml::Doc,\n@@ -782,7 +782,7 @@ pub type DecodeInlinedItem<'a> =\n                                                       hir_map::DefPath)> + 'a>;\n \n pub fn maybe_get_item_ast<'tcx>(cdata: Cmd,\n-                                tcx: &ty::ctxt<'tcx>,\n+                                tcx: &TyCtxt<'tcx>,\n                                 id: DefIndex,\n                                 mut decode_inlined_item: DecodeInlinedItem)\n                                 -> FoundAst<'tcx> {\n@@ -840,7 +840,7 @@ pub fn is_item_mir_available<'tcx>(cdata: Cmd, id: DefIndex) -> bool {\n }\n \n pub fn maybe_get_item_mir<'tcx>(cdata: Cmd,\n-                                tcx: &ty::ctxt<'tcx>,\n+                                tcx: &TyCtxt<'tcx>,\n                                 id: DefIndex)\n                                 -> Option<mir::repr::Mir<'tcx>> {\n     let item_doc = cdata.lookup_item(id);\n@@ -955,7 +955,7 @@ pub fn is_static_method(cdata: Cmd, id: DefIndex) -> bool {\n pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n                                     cdata: Cmd,\n                                     id: DefIndex,\n-                                    tcx: &ty::ctxt<'tcx>)\n+                                    tcx: &TyCtxt<'tcx>)\n                                     -> ty::ImplOrTraitItem<'tcx> {\n     let item_doc = cdata.lookup_item(id);\n \n@@ -1042,7 +1042,7 @@ pub fn get_item_variances(cdata: Cmd, id: DefIndex) -> ty::ItemVariances {\n pub fn get_provided_trait_methods<'tcx>(intr: Rc<IdentInterner>,\n                                         cdata: Cmd,\n                                         id: DefIndex,\n-                                        tcx: &ty::ctxt<'tcx>)\n+                                        tcx: &TyCtxt<'tcx>)\n                                         -> Vec<Rc<ty::Method<'tcx>>> {\n     let item = cdata.lookup_item(id);\n \n@@ -1069,7 +1069,7 @@ pub fn get_provided_trait_methods<'tcx>(intr: Rc<IdentInterner>,\n pub fn get_associated_consts<'tcx>(intr: Rc<IdentInterner>,\n                                    cdata: Cmd,\n                                    id: DefIndex,\n-                                   tcx: &ty::ctxt<'tcx>)\n+                                   tcx: &TyCtxt<'tcx>)\n                                    -> Vec<Rc<ty::AssociatedConst<'tcx>>> {\n     let item = cdata.lookup_item(id);\n \n@@ -1436,7 +1436,7 @@ pub fn each_implementation_for_trait<F>(cdata: Cmd,\n     }\n }\n \n-pub fn get_trait_of_item(cdata: Cmd, id: DefIndex, tcx: &ty::ctxt)\n+pub fn get_trait_of_item(cdata: Cmd, id: DefIndex, tcx: &TyCtxt)\n                          -> Option<DefId> {\n     let item_doc = cdata.lookup_item(id);\n     let parent_item_id = match item_parent_item(cdata, item_doc) {\n@@ -1571,7 +1571,7 @@ pub fn is_const_fn(cdata: Cmd, id: DefIndex) -> bool {\n     }\n }\n \n-pub fn is_extern_item(cdata: Cmd, id: DefIndex, tcx: &ty::ctxt) -> bool {\n+pub fn is_extern_item(cdata: Cmd, id: DefIndex, tcx: &TyCtxt) -> bool {\n     let item_doc = match cdata.get_item(id) {\n         Some(doc) => doc,\n         None => return false,\n@@ -1606,7 +1606,7 @@ pub fn is_impl(cdata: Cmd, id: DefIndex) -> bool {\n }\n \n fn doc_generics<'tcx>(base_doc: rbml::Doc,\n-                      tcx: &ty::ctxt<'tcx>,\n+                      tcx: &TyCtxt<'tcx>,\n                       cdata: Cmd,\n                       tag: usize)\n                       -> ty::Generics<'tcx>\n@@ -1655,7 +1655,7 @@ fn doc_generics<'tcx>(base_doc: rbml::Doc,\n \n fn doc_predicate<'tcx>(cdata: Cmd,\n                        doc: rbml::Doc,\n-                       tcx: &ty::ctxt<'tcx>)\n+                       tcx: &TyCtxt<'tcx>)\n                        -> ty::Predicate<'tcx>\n {\n     let predicate_pos = cdata.xref_index.lookup(\n@@ -1667,7 +1667,7 @@ fn doc_predicate<'tcx>(cdata: Cmd,\n }\n \n fn doc_predicates<'tcx>(base_doc: rbml::Doc,\n-                        tcx: &ty::ctxt<'tcx>,\n+                        tcx: &TyCtxt<'tcx>,\n                         cdata: Cmd,\n                         tag: usize)\n                         -> ty::GenericPredicates<'tcx>\n@@ -1722,7 +1722,7 @@ pub fn closure_kind(cdata: Cmd, closure_id: DefIndex) -> ty::ClosureKind {\n     ty::ClosureKind::decode(&mut decoder).unwrap()\n }\n \n-pub fn closure_ty<'tcx>(cdata: Cmd, closure_id: DefIndex, tcx: &ty::ctxt<'tcx>)\n+pub fn closure_ty<'tcx>(cdata: Cmd, closure_id: DefIndex, tcx: &TyCtxt<'tcx>)\n                         -> ty::ClosureTy<'tcx> {\n     let closure_doc = cdata.lookup_item(closure_id);\n     let closure_ty_doc = reader::get_doc(closure_doc, tag_items_closure_ty);"}, {"sha": "1d1cd38225522b8ef5732ebc4cbf4ef8ba29b07e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -25,7 +25,7 @@ use middle::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::dependency_format::Linkage;\n use middle::stability;\n use middle::subst;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n \n use rustc::back::svh::Svh;\n use rustc::front::map::{LinkedPath, PathElem, PathElems};\n@@ -58,7 +58,7 @@ pub type EncodeInlinedItem<'a> =\n \n pub struct EncodeParams<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n     pub reexports: &'a def::ExportMap,\n     pub item_symbols: &'a RefCell<NodeMap<String>>,\n     pub link_meta: &'a LinkMeta,\n@@ -70,7 +70,7 @@ pub struct EncodeParams<'a, 'tcx: 'a> {\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n     pub reexports: &'a def::ExportMap,\n     pub item_symbols: &'a RefCell<NodeMap<String>>,\n     pub link_meta: &'a LinkMeta,\n@@ -1766,7 +1766,7 @@ fn encode_struct_field_attrs(ecx: &EncodeContext,\n \n \n struct ImplVisitor<'a, 'tcx:'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     impls: FnvHashMap<DefId, Vec<DefId>>\n }\n \n@@ -2093,7 +2093,7 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n }\n \n // Get the encoded string for a type\n-pub fn encoded_ty<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> Vec<u8> {\n+pub fn encoded_ty<'tcx>(tcx: &TyCtxt<'tcx>, t: Ty<'tcx>) -> Vec<u8> {\n     let mut wr = Cursor::new(Vec::new());\n     tyencode::enc_ty(&mut wr, &tyencode::ctxt {\n         diag: tcx.sess.diagnostic(),"}, {"sha": "f90abd9e1d9611cdc3c3614d71587bc4914b8e6d", "filename": "src/librustc_metadata/tls_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Ftls_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Ftls_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftls_context.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -16,7 +16,7 @@ use rbml::opaque::Decoder as OpaqueDecoder;\n use rustc::middle::cstore::tls;\n use rustc::middle::def_id::DefId;\n use rustc::middle::subst::Substs;\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n \n use decoder::{self, Cmd};\n use encoder;\n@@ -25,7 +25,7 @@ use tyencode;\n \n impl<'a, 'tcx: 'a> tls::EncodingContext<'tcx> for encoder::EncodeContext<'a, 'tcx> {\n \n-    fn tcx<'s>(&'s self) -> &'s ty::ctxt<'tcx> {\n+    fn tcx<'s>(&'s self) -> &'s TyCtxt<'tcx> {\n         &self.tcx\n     }\n \n@@ -40,12 +40,12 @@ impl<'a, 'tcx: 'a> tls::EncodingContext<'tcx> for encoder::EncodeContext<'a, 'tc\n \n pub struct DecodingContext<'a, 'tcx: 'a> {\n     pub crate_metadata: Cmd<'a>,\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx: 'a> tls::DecodingContext<'tcx> for DecodingContext<'a, 'tcx> {\n \n-    fn tcx<'s>(&'s self) -> &'s ty::ctxt<'tcx> {\n+    fn tcx<'s>(&'s self) -> &'s TyCtxt<'tcx> {\n         &self.tcx\n     }\n "}, {"sha": "bf5a97232fcc71edcb66300c5cd03d450cca6b74", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -22,7 +22,7 @@ use middle::def_id::{DefId, DefIndex};\n use middle::region;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n use rbml;\n use rbml::leb128;\n@@ -41,12 +41,12 @@ pub struct TyDecoder<'a, 'tcx: 'a> {\n     data: &'a [u8],\n     krate: ast::CrateNum,\n     pos: usize,\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     conv_def_id: DefIdConvert<'a>,\n }\n \n impl<'a,'tcx> TyDecoder<'a,'tcx> {\n-    pub fn with_doc(tcx: &'a ty::ctxt<'tcx>,\n+    pub fn with_doc(tcx: &'a TyCtxt<'tcx>,\n                     crate_num: ast::CrateNum,\n                     doc: rbml::Doc<'a>,\n                     conv: DefIdConvert<'a>)\n@@ -57,7 +57,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n     pub fn new(data: &'a [u8],\n                crate_num: ast::CrateNum,\n                pos: usize,\n-               tcx: &'a ty::ctxt<'tcx>,\n+               tcx: &'a TyCtxt<'tcx>,\n                conv: DefIdConvert<'a>)\n                -> TyDecoder<'a, 'tcx> {\n         TyDecoder {"}, {"sha": "7289cd2b5b3b8843c4fafaba075a0cdc2df03807", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -22,7 +22,7 @@ use middle::region;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::ParamTy;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::FnvHashMap;\n \n use rustc_front::hir;\n@@ -39,7 +39,7 @@ pub struct ctxt<'a, 'tcx: 'a> {\n     // Def -> str Callback:\n     pub ds: fn(DefId) -> String,\n     // The type context.\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n     pub abbrevs: &'a abbrev_map<'tcx>\n }\n "}, {"sha": "6b1b3a33d3d79ffc378db85d325d994fa466af9d", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -90,7 +90,7 @@ use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n use rustc::middle::region::CodeExtent;\n use rustc::middle::lang_items;\n use rustc::middle::subst::{Substs, Subst, VecPerParamSpace};\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::mir::repr::*;\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token::intern_and_get_ident;\n@@ -551,7 +551,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n     block.unit()\n }\n \n-fn build_diverge_scope<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn build_diverge_scope<'tcx>(tcx: &TyCtxt<'tcx>,\n                              cfg: &mut CFG<'tcx>,\n                              unit_temp: Lvalue<'tcx>,\n                              scope: &mut Scope<'tcx>,\n@@ -625,7 +625,7 @@ fn build_diverge_scope<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n }\n \n-fn build_free<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn build_free<'tcx>(tcx: &TyCtxt<'tcx>,\n                     unit_temp: Lvalue<'tcx>,\n                     data: &FreeData<'tcx>,\n                     target: BasicBlock) -> Terminator<'tcx> {"}, {"sha": "f1b74ca1288f3fa74ec435ef927eb9b6a2b4d01f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -20,14 +20,14 @@ use rustc::mir::repr::*;\n \n use rustc::middle::const_eval::{self, ConstVal};\n use rustc::middle::infer::InferCtxt;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n use syntax::codemap::Span;\n use syntax::parse::token;\n use rustc_front::hir;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n@@ -103,7 +103,7 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         self.tcx.sess.span_bug(span, message)\n     }\n \n-    pub fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    pub fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "96828628888bebe8e6596ceadd90ae70f379bc0c", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -33,7 +33,7 @@ use rustc::mir::transform::MirPass;\n use rustc::mir::mir_map::MirMap;\n use rustc::middle::infer;\n use rustc::middle::region::CodeExtentData;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n use rustc_front::hir;\n@@ -42,7 +42,7 @@ use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n \n-pub fn build_mir_for_crate<'tcx>(tcx: &ty::ctxt<'tcx>) -> MirMap<'tcx> {\n+pub fn build_mir_for_crate<'tcx>(tcx: &TyCtxt<'tcx>) -> MirMap<'tcx> {\n     let mut map = MirMap {\n         map: NodeMap(),\n     };\n@@ -60,7 +60,7 @@ pub fn build_mir_for_crate<'tcx>(tcx: &ty::ctxt<'tcx>) -> MirMap<'tcx> {\n // OuterDump -- walks a crate, looking for fn items and methods to build MIR from\n \n struct OuterDump<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     map: &'a mut MirMap<'tcx>,\n }\n \n@@ -116,7 +116,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterDump<'a, 'tcx> {\n // InnerDump -- dumps MIR for a single fn and its contained closures\n \n struct InnerDump<'a, 'm, 'tcx: 'a + 'm> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     map: &'m mut MirMap<'tcx>,\n     attr: Option<&'a ast::Attribute>,\n }\n@@ -236,7 +236,7 @@ fn build_mir<'a,'tcx:'a>(cx: Cx<'a,'tcx>,\n                         body))\n }\n \n-fn closure_self_ty<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn closure_self_ty<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n                              closure_expr_id: ast::NodeId,\n                              body_id: ast::NodeId)\n                              -> Ty<'tcx> {"}, {"sha": "53d88709add9decf77676901d519477ca8a5b7a4", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,23 +12,23 @@\n //! We want to do this once just before trans, so trans does not have to take\n //! care erasing regions all over the place.\n \n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n use rustc::mir::repr::*;\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::mir_map::MirMap;\n \n-pub fn erase_regions<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &mut MirMap<'tcx>) {\n+pub fn erase_regions<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &mut MirMap<'tcx>) {\n     for (_, mir) in &mut mir_map.map {\n         EraseRegionsVisitor::new(tcx).visit_mir(mir);\n     }\n }\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n-    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> Self {\n+    pub fn new(tcx: &'a TyCtxt<'tcx>) -> Self {\n         EraseRegionsVisitor {\n             tcx: tcx\n         }"}, {"sha": "bf22c7b0b8b34e7efe77acf0370e21c9f9f61241", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -13,7 +13,7 @@\n \n use rustc::middle::infer::{self, InferCtxt};\n use rustc::middle::traits;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::middle::ty::fold::TypeFoldable;\n use rustc::mir::repr::*;\n use rustc::mir::tcx::LvalueTy;\n@@ -113,7 +113,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.cx.infcx.tcx\n     }\n \n@@ -346,7 +346,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                        a, b)\n     }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "3703e602746c6ac450054f6058016011e98d1f3c", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -36,7 +36,7 @@ use rustc::middle::infer;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::traits;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::NodeMap;\n use rustc::middle::const_qualif::ConstQualif;\n use rustc::lint::builtin::CONST_ERR;\n@@ -65,7 +65,7 @@ enum Mode {\n }\n \n struct CheckCrateVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     mode: Mode,\n     qualif: ConstQualif,\n     rvalue_borrows: NodeMap<hir::Mutability>\n@@ -788,7 +788,7 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt) {\n+pub fn check_crate(tcx: &TyCtxt) {\n     tcx.visit_all_items_in_krate(DepNode::CheckConst, &mut CheckCrateVisitor {\n         tcx: tcx,\n         mode: Mode::Var,"}, {"sha": "7eef69ca50fd0e8883c4da61c710ac796d6205c6", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,20 +15,20 @@ use rustc::dep_graph::DepNode;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::infer;\n use rustc::middle::mem_categorization as mc;\n-use rustc::middle::ty::{self, ParameterEnvironment};\n+use rustc::middle::ty::{self, TyCtxt, ParameterEnvironment};\n \n use rustc_front::hir;\n use rustc_front::intravisit;\n use syntax::ast;\n use syntax::codemap::Span;\n \n-pub fn check_crate(tcx: &ty::ctxt) {\n+pub fn check_crate(tcx: &TyCtxt) {\n     let mut rvcx = RvalueContext { tcx: tcx };\n     tcx.visit_all_items_in_krate(DepNode::RvalueCheck, &mut rvcx);\n }\n \n struct RvalueContext<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n@@ -53,7 +53,7 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n }\n \n struct RvalueContextDelegate<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     param_env: &'a ty::ParameterEnvironment<'a,'tcx>,\n }\n "}, {"sha": "ceab0ed30e7199db8335b8828586f8a9065f1f5a", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,12 +15,12 @@\n \n use {Intrinsic, i, i_, u, u_, f, v, v_, agg, p, void};\n use IntrinsicDef::Named;\n-use rustc::middle::ty;\n+use rustc::middle::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"aarch64_v\") { return None }\n     Some(match &name[\"aarch64_v\".len()..] {\n         \"hadd_s8\" => Intrinsic {"}, {"sha": "916f267951b501502a3482322f1a80c85f4543f4", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,12 +15,12 @@\n \n use {Intrinsic, i, i_, u, u_, f, v, v_, agg, p, void};\n use IntrinsicDef::Named;\n-use rustc::middle::ty;\n+use rustc::middle::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"arm_v\") { return None }\n     Some(match &name[\"arm_v\".len()..] {\n         \"hadd_s8\" => Intrinsic {"}, {"sha": "41d5c1a50bc9213528dda3a695e831c095fb5768", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -18,7 +18,7 @@\n extern crate rustc_llvm as llvm;\n extern crate rustc;\n \n-use rustc::middle::ty;\n+use rustc::middle::ty::TyCtxt;\n \n pub struct Intrinsic {\n     pub inputs: Vec<Type>,\n@@ -66,7 +66,7 @@ mod arm;\n mod aarch64;\n \n impl Intrinsic {\n-    pub fn find<'tcx>(tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+    pub fn find<'tcx>(tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         if name.starts_with(\"x86_\") {\n             x86::find(tcx, name)\n         } else if name.starts_with(\"arm_\") {"}, {"sha": "4a9b9970caf2d414e4c7421e50aef334b9e66841", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,12 +15,12 @@\n \n use {Intrinsic, i, i_, u, u_, f, v, v_, agg, p, void};\n use IntrinsicDef::Named;\n-use rustc::middle::ty;\n+use rustc::middle::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"x86_mm\") { return None }\n     Some(match &name[\"x86_mm\".len()..] {\n         \"_movemask_ps\" => Intrinsic {"}, {"sha": "782ac593f4411792992406fae785f2a124382a28", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -42,7 +42,7 @@ use rustc::middle::def::{self, Def};\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::middle::privacy::ExternalExports;\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n use rustc::util::nodemap::{NodeMap, NodeSet};\n use rustc::front::map as ast_map;\n \n@@ -63,7 +63,7 @@ type CheckResult = Option<(Span, String, Option<(Span, String)>)>;\n ////////////////////////////////////////////////////////////////////////////////\n \n struct ParentVisitor<'a, 'tcx:'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     parents: NodeMap<ast::NodeId>,\n     curparent: ast::NodeId,\n }\n@@ -155,7 +155,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ParentVisitor<'a, 'tcx> {\n ////////////////////////////////////////////////////////////////////////////////\n \n struct EmbargoVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     export_map: &'a def::ExportMap,\n \n     // Accessibility levels for reachable nodes\n@@ -472,7 +472,7 @@ impl<'b, 'a, 'tcx: 'a, 'v> Visitor<'v> for ReachEverythingInTheInterfaceVisitor<\n ////////////////////////////////////////////////////////////////////////////////\n \n struct PrivacyVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     curitem: ast::NodeId,\n     in_foreign: bool,\n     parents: NodeMap<ast::NodeId>,\n@@ -972,7 +972,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n ////////////////////////////////////////////////////////////////////////////////\n \n struct SanePrivacyVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> {\n@@ -1043,7 +1043,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////////\n \n struct ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     access_levels: &'a AccessLevels,\n     in_variant: bool,\n     // set of errors produced by this obsolete visitor\n@@ -1382,7 +1382,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n ///////////////////////////////////////////////////////////////////////////////\n \n struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     // Do not report an error when a private type is found\n     is_quiet: bool,\n     // Is private component found?\n@@ -1513,7 +1513,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n }\n \n struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     old_error_set: &'a NodeSet,\n }\n \n@@ -1603,7 +1603,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt,\n+pub fn check_crate(tcx: &TyCtxt,\n                    export_map: &def::ExportMap,\n                    external_exports: ExternalExports)\n                    -> AccessLevels {"}, {"sha": "88ae6cb91abb4dfb0c5bbb248a28d001720abb7a", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -23,7 +23,7 @@ use session::Session;\n use middle::cstore::{self, CrateStore, LinkMeta};\n use middle::cstore::{LinkagePreference, NativeLibraryKind};\n use middle::dependency_format::Linkage;\n-use middle::ty::{self, Ty};\n+use middle::ty::{Ty, TyCtxt};\n use rustc::front::map::DefPath;\n use trans::{CrateContext, CrateTranslation, gensym_name};\n use util::common::time;\n@@ -202,7 +202,7 @@ fn truncated_hash_result(symbol_hasher: &mut Sha256) -> String {\n \n \n // This calculates STH for a symbol, as defined above\n-fn symbol_hash<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn symbol_hash<'tcx>(tcx: &TyCtxt<'tcx>,\n                      symbol_hasher: &mut Sha256,\n                      t: Ty<'tcx>,\n                      link_meta: &LinkMeta)"}, {"sha": "c15d5ca86d026c12bde4e5abc9d9bc17868609b9", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -34,7 +34,7 @@ use session::Session;\n \n use middle::def::Def;\n use middle::def_id::DefId;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n \n use std::fs::File;\n use std::hash::*;\n@@ -65,7 +65,7 @@ macro_rules! down_cast_data {\n pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     sess: &'l Session,\n-    tcx: &'l ty::ctxt<'tcx>,\n+    tcx: &'l TyCtxt<'tcx>,\n     analysis: &'l ty::CrateAnalysis<'l>,\n \n     span: SpanUtils<'l>,\n@@ -83,7 +83,7 @@ pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n }\n \n impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n-    pub fn new(tcx: &'l ty::ctxt<'tcx>,\n+    pub fn new(tcx: &'l TyCtxt<'tcx>,\n                lcx: &'l LoweringContext<'l>,\n                analysis: &'l ty::CrateAnalysis<'l>,\n                output_file: Box<File>)"}, {"sha": "7f9f876fad1fae320a4a4d59c66feab1419f4dde", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use middle::def::Def;\n use middle::def_id::DefId;\n \n@@ -37,7 +37,7 @@ pub mod recorder;\n mod dump_csv;\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n-    tcx: &'l ty::ctxt<'tcx>,\n+    tcx: &'l TyCtxt<'tcx>,\n     lcx: &'l lowering::LoweringContext<'l>,\n     span_utils: SpanUtils<'l>,\n }\n@@ -195,14 +195,14 @@ macro_rules! option_try(\n \n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n-    pub fn new(tcx: &'l ty::ctxt<'tcx>,\n+    pub fn new(tcx: &'l TyCtxt<'tcx>,\n                lcx: &'l lowering::LoweringContext<'l>)\n                -> SaveContext<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&tcx.sess);\n         SaveContext::from_span_utils(tcx, lcx, span_utils)\n     }\n \n-    pub fn from_span_utils(tcx: &'l ty::ctxt<'tcx>,\n+    pub fn from_span_utils(tcx: &'l TyCtxt<'tcx>,\n                            lcx: &'l lowering::LoweringContext<'l>,\n                            span_utils: SpanUtils<'l>)\n                            -> SaveContext<'l, 'tcx> {\n@@ -790,7 +790,7 @@ impl<'v> Visitor<'v> for PathCollector {\n     }\n }\n \n-pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,\n+pub fn process_crate<'l, 'tcx>(tcx: &'l TyCtxt<'tcx>,\n                                lcx: &'l lowering::LoweringContext<'l>,\n                                krate: &ast::Crate,\n                                analysis: &ty::CrateAnalysis,"}, {"sha": "7ca2cf998bd2d8074ef6021e69e97962761ce7b9", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@ use super::span_utils::SpanUtils;\n \n use middle::cstore::LOCAL_CRATE;\n use middle::def_id::{CRATE_DEF_INDEX, DefId};\n-use middle::ty;\n+use middle::ty::TyCtxt;\n \n use std::io::Write;\n \n@@ -55,7 +55,7 @@ impl Recorder {\n pub struct FmtStrs<'a, 'tcx: 'a> {\n     pub recorder: Box<Recorder>,\n     span: SpanUtils<'a>,\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n }\n \n macro_rules! s { ($e:expr) => { format!(\"{}\", $e) }}\n@@ -103,7 +103,7 @@ pub enum Row {\n impl<'a, 'tcx: 'a> FmtStrs<'a, 'tcx> {\n     pub fn new(rec: Box<Recorder>,\n                span: SpanUtils<'a>,\n-               tcx: &'a ty::ctxt<'tcx>)\n+               tcx: &'a TyCtxt<'tcx>)\n                -> FmtStrs<'a, 'tcx> {\n         FmtStrs {\n             recorder: rec,"}, {"sha": "d1567cc6fa543052d885d7f4cea3ea8e655f27ac", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -216,7 +216,7 @@ use trans::monomorphize;\n use trans::tvec;\n use trans::type_of;\n use trans::Disr;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use session::config::NoDebugInfo;\n use util::common::indenter;\n use util::nodemap::FnvHashMap;\n@@ -237,7 +237,7 @@ use syntax::ptr::P;\n struct ConstantExpr<'a>(&'a hir::Expr);\n \n impl<'a> ConstantExpr<'a> {\n-    fn eq(self, other: ConstantExpr<'a>, tcx: &ty::ctxt) -> bool {\n+    fn eq(self, other: ConstantExpr<'a>, tcx: &TyCtxt) -> bool {\n         match const_eval::compare_lit_exprs(tcx, self.0, other.0) {\n             Some(result) => result == Ordering::Equal,\n             None => panic!(\"compare_list_exprs: type mismatch\"),\n@@ -258,7 +258,7 @@ enum Opt<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Opt<'a, 'tcx> {\n-    fn eq(&self, other: &Opt<'a, 'tcx>, tcx: &ty::ctxt<'tcx>) -> bool {\n+    fn eq(&self, other: &Opt<'a, 'tcx>, tcx: &TyCtxt<'tcx>) -> bool {\n         match (self, other) {\n             (&ConstantValue(a, _), &ConstantValue(b, _)) => a.eq(b, tcx),\n             (&ConstantRange(a1, a2, _), &ConstantRange(b1, b2, _)) => {\n@@ -794,7 +794,7 @@ fn any_region_pat(m: &[Match], col: usize) -> bool {\n     any_pat!(m, col, PatKind::Ref(..))\n }\n \n-fn any_irrefutable_adt_pat(tcx: &ty::ctxt, m: &[Match], col: usize) -> bool {\n+fn any_irrefutable_adt_pat(tcx: &TyCtxt, m: &[Match], col: usize) -> bool {\n     m.iter().any(|br| {\n         let pat = br.pats[col];\n         match pat.node {"}, {"sha": "e8368f1bd971c5fb39ff06671f29fd765f726f50", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -50,7 +50,7 @@ use std::rc::Rc;\n use llvm::{ValueRef, True, IntEQ, IntNE};\n use back::abi::FAT_PTR_ADDR;\n use middle::subst;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::IntType;\n@@ -241,7 +241,7 @@ fn dtor_to_init_u8(dtor: bool) -> u8 {\n }\n \n pub trait GetDtorType<'tcx> { fn dtor_type(&self) -> Ty<'tcx>; }\n-impl<'tcx> GetDtorType<'tcx> for ty::ctxt<'tcx> {\n+impl<'tcx> GetDtorType<'tcx> for TyCtxt<'tcx> {\n     fn dtor_type(&self) -> Ty<'tcx> { self.types.u8 }\n }\n \n@@ -438,7 +438,7 @@ struct Case<'tcx> {\n /// This represents the (GEP) indices to follow to get to the discriminant field\n pub type DiscrField = Vec<usize>;\n \n-fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn find_discr_field_candidate<'tcx>(tcx: &TyCtxt<'tcx>,\n                                     ty: Ty<'tcx>,\n                                     mut path: DiscrField) -> Option<DiscrField> {\n     match ty.sty {\n@@ -540,7 +540,7 @@ impl<'tcx> Case<'tcx> {\n     }\n }\n \n-fn get_cases<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn get_cases<'tcx>(tcx: &TyCtxt<'tcx>,\n                    adt: ty::AdtDef<'tcx>,\n                    substs: &subst::Substs<'tcx>)\n                    -> Vec<Case<'tcx>> {\n@@ -664,7 +664,7 @@ fn bounds_usable(cx: &CrateContext, ity: IntType, bounds: &IntBounds) -> bool {\n     }\n }\n \n-pub fn ty_of_inttype<'tcx>(tcx: &ty::ctxt<'tcx>, ity: IntType) -> Ty<'tcx> {\n+pub fn ty_of_inttype<'tcx>(tcx: &TyCtxt<'tcx>, ity: IntType) -> Ty<'tcx> {\n     match ity {\n         attr::SignedInt(t) => tcx.mk_mach_int(t),\n         attr::UnsignedInt(t) => tcx.mk_mach_uint(t)"}, {"sha": "a186a8ea99ce95e1b2203e09d58869c1220d1c37", "filename": "src/librustc_trans/trans/assert_dep_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -40,7 +40,7 @@\n use graphviz as dot;\n use rustc::dep_graph::{DepGraphQuery, DepNode};\n use rustc::middle::def_id::DefId;\n-use rustc::middle::ty;\n+use rustc::middle::ty::TyCtxt;\n use rustc_data_structures::fnv::{FnvHashMap, FnvHashSet};\n use rustc_data_structures::graph::{Direction, INCOMING, OUTGOING, NodeIndex};\n use rustc_front::hir;\n@@ -58,7 +58,7 @@ const IF_THIS_CHANGED: &'static str = \"rustc_if_this_changed\";\n const THEN_THIS_WOULD_NEED: &'static str = \"rustc_then_this_would_need\";\n const ID: &'static str = \"id\";\n \n-pub fn assert_dep_graph(tcx: &ty::ctxt) {\n+pub fn assert_dep_graph(tcx: &TyCtxt) {\n     let _ignore = tcx.dep_graph.in_ignore();\n \n     if tcx.sess.opts.dump_dep_graph {\n@@ -84,7 +84,7 @@ type TargetHashMap = FnvHashMap<InternedString,\n                                 FnvHashSet<(Span, InternedString, ast::NodeId, DepNode)>>;\n \n struct IfThisChanged<'a, 'tcx:'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     if_this_changed: SourceHashMap,\n     then_this_would_need: TargetHashMap,\n }\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IfThisChanged<'a, 'tcx> {\n     }\n }\n \n-fn check_paths(tcx: &ty::ctxt,\n+fn check_paths(tcx: &TyCtxt,\n                if_this_changed: &SourceHashMap,\n                then_this_would_need: &TargetHashMap)\n {\n@@ -212,7 +212,7 @@ fn check_paths(tcx: &ty::ctxt,\n     }\n }\n \n-fn dump_graph(tcx: &ty::ctxt) {\n+fn dump_graph(tcx: &TyCtxt) {\n     let path: String = env::var(\"RUST_DEP_GRAPH\").unwrap_or_else(|_| format!(\"dep_graph\"));\n     let query = tcx.dep_graph.query();\n "}, {"sha": "33d3d66adcd67625c87fd0d7aca9be037420cddd", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -43,7 +43,7 @@ use middle::weak_lang_items;\n use middle::pat_util::simple_name;\n use middle::subst::{self, Substs};\n use middle::traits;\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use middle::ty::adjustment::CustomCoerceUnsized;\n use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n@@ -1471,7 +1471,7 @@ impl<'v> Visitor<'v> for FindNestedReturn {\n     }\n }\n \n-fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>) {\n+fn build_cfg(tcx: &TyCtxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>) {\n     let blk = match tcx.map.find(id) {\n         Some(hir_map::NodeItem(i)) => {\n             match i.node {\n@@ -1527,7 +1527,7 @@ fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>)\n // part of a larger expression that may have already partially-filled the\n // return slot alloca. This can cause errors related to clean-up due to\n // the clobbering of the existing value in the return slot.\n-fn has_nested_returns(tcx: &ty::ctxt, cfg: &cfg::CFG, blk_id: ast::NodeId) -> bool {\n+fn has_nested_returns(tcx: &TyCtxt, cfg: &cfg::CFG, blk_id: ast::NodeId) -> bool {\n     for index in cfg.graph.depth_traverse(cfg.entry) {\n         let n = cfg.graph.node_data(index);\n         match tcx.map.find(n.id()) {\n@@ -3137,7 +3137,7 @@ pub fn filter_reachable_ids(ccx: &SharedCrateContext) -> NodeSet {\n     }).collect()\n }\n \n-pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n                          mir_map: &MirMap<'tcx>,\n                          analysis: ty::CrateAnalysis)\n                          -> CrateTranslation {"}, {"sha": "5f8e31781f199c06f9a83855a9af06f8d1002114", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -51,7 +51,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n use trans::Disr;\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use middle::ty::MethodCall;\n use rustc_front::hir;\n \n@@ -408,7 +408,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n     // def_id to the local id of the inlined copy.\n     let def_id = inline::maybe_instantiate_inline(ccx, def_id);\n \n-    fn is_named_tuple_constructor(tcx: &ty::ctxt, def_id: DefId) -> bool {\n+    fn is_named_tuple_constructor(tcx: &TyCtxt, def_id: DefId) -> bool {\n         let node_id = match tcx.map.as_local_node_id(def_id) {\n             Some(n) => n,\n             None => { return false; }"}, {"sha": "416d951e4b5c5913fc3281bae04226c6071db501", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -129,7 +129,7 @@ use trans::debuginfo::{DebugLoc, ToDebugLoc};\n use trans::glue;\n use middle::region;\n use trans::type_::Type;\n-use middle::ty::{self, Ty};\n+use middle::ty::{Ty, TyCtxt};\n use std::fmt;\n use syntax::ast;\n \n@@ -1180,7 +1180,7 @@ impl<'tcx> Cleanup<'tcx> for LifetimeEnd {\n     }\n }\n \n-pub fn temporary_scope(tcx: &ty::ctxt,\n+pub fn temporary_scope(tcx: &TyCtxt,\n                        id: ast::NodeId)\n                        -> ScopeId {\n     match tcx.region_maps.temporary_scope(id) {\n@@ -1196,7 +1196,7 @@ pub fn temporary_scope(tcx: &ty::ctxt,\n     }\n }\n \n-pub fn var_scope(tcx: &ty::ctxt,\n+pub fn var_scope(tcx: &TyCtxt,\n                  id: ast::NodeId)\n                  -> ScopeId {\n     let r = AstScope(tcx.region_maps.var_scope(id).node_id(&tcx.region_maps));"}, {"sha": "3ba27a4b787565daa9073246050fd0fc3514beb1", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -38,7 +38,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n use middle::traits;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::fold::{TypeFolder, TypeFoldable};\n use rustc_front::hir;\n use rustc::mir::repr::Mir;\n@@ -58,11 +58,11 @@ use syntax::parse::token;\n pub use trans::context::CrateContext;\n \n /// Is the type's representation size known at compile time?\n-pub fn type_is_sized<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+pub fn type_is_sized<'tcx>(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     ty.is_sized(&tcx.empty_parameter_environment(), DUMMY_SP)\n }\n \n-pub fn type_is_fat_ptr<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+pub fn type_is_fat_ptr<'tcx>(cx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         ty::TyRawPtr(ty::TypeAndMut{ty, ..}) |\n         ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n@@ -184,7 +184,7 @@ pub struct VariantInfo<'tcx> {\n }\n \n impl<'tcx> VariantInfo<'tcx> {\n-    pub fn from_ty(tcx: &ty::ctxt<'tcx>,\n+    pub fn from_ty(tcx: &TyCtxt<'tcx>,\n                    ty: Ty<'tcx>,\n                    opt_def: Option<Def>)\n                    -> Self\n@@ -222,7 +222,7 @@ impl<'tcx> VariantInfo<'tcx> {\n     }\n \n     /// Return the variant corresponding to a given node (e.g. expr)\n-    pub fn of_node(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>, id: ast::NodeId) -> Self {\n+    pub fn of_node(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>, id: ast::NodeId) -> Self {\n         let node_def = tcx.def_map.borrow().get(&id).map(|v| v.full_def());\n         Self::from_ty(tcx, ty, node_def)\n     }\n@@ -621,7 +621,7 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n     pub fn fcx(&self) -> &'blk FunctionContext<'blk, 'tcx> {\n         self.fcx\n     }\n-    pub fn tcx(&self) -> &'blk ty::ctxt<'tcx> {\n+    pub fn tcx(&self) -> &'blk TyCtxt<'tcx> {\n         self.fcx.ccx.tcx()\n     }\n     pub fn sess(&self) -> &'blk Session { self.fcx.ccx.sess() }\n@@ -752,7 +752,7 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n     pub fn fcx(&self) -> &'blk FunctionContext<'blk, 'tcx> {\n         self.bcx.fcx()\n     }\n-    pub fn tcx(&self) -> &'blk ty::ctxt<'tcx> {\n+    pub fn tcx(&self) -> &'blk TyCtxt<'tcx> {\n         self.bcx.tcx()\n     }\n     pub fn sess(&self) -> &'blk Session {"}, {"sha": "eb5ca7722fd3eb27258873889c5bed2ef54ea2a7", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -27,7 +27,7 @@ use trans::monomorphize::MonoId;\n use trans::collector::{TransItem, TransItemState};\n use trans::type_::{Type, TypeNames};\n use middle::subst::Substs;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use session::config::NoDebugInfo;\n use session::Session;\n use util::sha2::Sha256;\n@@ -70,7 +70,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     item_symbols: RefCell<NodeMap<String>>,\n     link_meta: LinkMeta,\n     symbol_hasher: RefCell<Sha256>,\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     stats: Stats,\n     check_overflow: bool,\n     check_drop_flag_for_sanity: bool,\n@@ -271,7 +271,7 @@ unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextR\n impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn new(crate_name: &str,\n                local_count: usize,\n-               tcx: &'b ty::ctxt<'tcx>,\n+               tcx: &'b TyCtxt<'tcx>,\n                mir_map: &'b MirMap<'tcx>,\n                export_map: ExportMap,\n                symbol_hasher: Sha256,\n@@ -430,7 +430,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.link_meta\n     }\n \n-    pub fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> {\n+    pub fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -574,7 +574,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n \n \n-    pub fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> {\n+    pub fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx> {\n         self.shared.tcx\n     }\n "}, {"sha": "591d8a9f76c9705fb2522fe40242acaef5e278cc", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -73,7 +73,7 @@ use trans::Disr;\n use middle::ty::adjustment::{AdjustDerefRef, AdjustReifyFnPointer};\n use middle::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use middle::ty::adjustment::CustomCoerceUnsized;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::MethodCall;\n use middle::ty::cast::{CastKind, CastTy};\n use util::common::indenter;\n@@ -723,7 +723,7 @@ fn trans_field<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n                               base: &hir::Expr,\n                               get_idx: F)\n                               -> DatumBlock<'blk, 'tcx, Expr> where\n-    F: FnOnce(&'blk ty::ctxt<'tcx>, &VariantInfo<'tcx>) -> usize,\n+    F: FnOnce(&'blk TyCtxt<'tcx>, &VariantInfo<'tcx>) -> usize,\n {\n     let mut bcx = bcx;\n     let _icx = push_ctxt(\"trans_rec_field\");\n@@ -1998,7 +1998,7 @@ fn trans_overloaded_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     bcx\n }\n \n-pub fn cast_is_noop<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn cast_is_noop<'tcx>(tcx: &TyCtxt<'tcx>,\n                           expr: &hir::Expr,\n                           t_in: Ty<'tcx>,\n                           t_out: Ty<'tcx>)\n@@ -2365,7 +2365,7 @@ impl OverflowOpViaIntrinsic {\n         let name = self.to_intrinsic_name(bcx.tcx(), lhs_ty);\n         bcx.ccx().get_intrinsic(&name)\n     }\n-    fn to_intrinsic_name(&self, tcx: &ty::ctxt, ty: Ty) -> &'static str {\n+    fn to_intrinsic_name(&self, tcx: &TyCtxt, ty: Ty) -> &'static str {\n         use syntax::ast::IntTy::*;\n         use syntax::ast::UintTy::*;\n         use middle::ty::{TyInt, TyUint};\n@@ -2557,7 +2557,7 @@ enum ExprKind {\n     RvalueStmt\n }\n \n-fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n+fn expr_kind(tcx: &TyCtxt, expr: &hir::Expr) -> ExprKind {\n     if tcx.is_method_call(expr.id) {\n         // Overloaded operations are generally calls, and hence they are\n         // generated via DPS, but there are a few exceptions:"}, {"sha": "2a2178dd63b9ffd2c977c97550052910fa98da79", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -28,7 +28,7 @@ use trans::type_::Type;\n use trans::type_of::*;\n use trans::type_of;\n use middle::infer;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::subst::Substs;\n \n use std::cmp;\n@@ -467,7 +467,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n // feature gate SIMD types in FFI, since I (huonw) am not sure the\n // ABIs are handled at all correctly.\n-fn gate_simd_ffi(tcx: &ty::ctxt, decl: &hir::FnDecl, ty: &ty::BareFnTy) {\n+fn gate_simd_ffi(tcx: &TyCtxt, decl: &hir::FnDecl, ty: &ty::BareFnTy) {\n     if !tcx.sess.features.borrow().simd_ffi {\n         let check = |ast_ty: &hir::Ty, ty: ty::Ty| {\n             if ty.is_simd() {"}, {"sha": "0b2ab58a835a23a4b6fe601288b18f5ea7b59f80", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -20,7 +20,7 @@ use llvm::{ValueRef, get_param};\n use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst::{Substs};\n use middle::traits;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use trans::adt;\n use trans::adt::GetDtorType; // for tcx.dtor_type()\n use trans::base::*;\n@@ -89,7 +89,7 @@ pub fn trans_exchange_free_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n }\n \n-pub fn type_needs_drop<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+pub fn type_needs_drop<'tcx>(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     tcx.type_needs_drop_given_env(ty, &tcx.empty_parameter_environment())\n }\n "}, {"sha": "221d17e6641d5ad94cac485e15ebdd5c30c7f764", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -33,7 +33,7 @@ use trans::machine;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of::*;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::MethodCall;\n \n use syntax::ast;\n@@ -641,7 +641,7 @@ pub fn get_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n /// Replace the self type (&Self or Box<Self>) with an opaque pointer.\n-fn opaque_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>, method_ty: &ty::BareFnTy<'tcx>)\n+fn opaque_method_ty<'tcx>(tcx: &TyCtxt<'tcx>, method_ty: &ty::BareFnTy<'tcx>)\n                           -> &'tcx ty::BareFnTy<'tcx> {\n     let mut inputs = method_ty.sig.0.inputs.clone();\n     inputs[0] = tcx.mk_mut_ptr(tcx.mk_mach_int(ast::IntTy::I8));"}, {"sha": "3741b07d248e23900073d3470e1ee4fcc74a176d", "filename": "src/librustc_trans/trans/mir/did.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,7 +12,7 @@\n \n use syntax::codemap::DUMMY_SP;\n use rustc::front::map;\n-use rustc::middle::ty::{self, Ty, TypeFoldable};\n+use rustc::middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::middle::subst::Substs;\n use rustc::middle::const_eval;\n use rustc::middle::def_id::DefId;\n@@ -156,7 +156,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n    }\n }\n \n-fn is_named_tuple_constructor(tcx: &ty::ctxt, def_id: DefId) -> bool {\n+fn is_named_tuple_constructor(tcx: &TyCtxt, def_id: DefId) -> bool {\n     let node_id = match tcx.map.as_local_node_id(def_id) {\n         Some(n) => n,\n         None => { return false; }"}, {"sha": "9edda3d2b5c9b72d06fe5cee6acb213ef72b6e68", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -23,7 +23,7 @@ use trans::base;\n use trans::common::*;\n use trans::declare;\n use trans::foreign;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use trans::Disr;\n use rustc::front::map as hir_map;\n \n@@ -296,7 +296,7 @@ pub struct MonoId<'tcx> {\n \n /// Monomorphizes a type from the AST by first applying the in-scope\n /// substitutions and then normalizing any associated types.\n-pub fn apply_param_substs<'tcx,T>(tcx: &ty::ctxt<'tcx>,\n+pub fn apply_param_substs<'tcx,T>(tcx: &TyCtxt<'tcx>,\n                                   param_substs: &Substs<'tcx>,\n                                   value: &T)\n                                   -> T\n@@ -308,7 +308,7 @@ pub fn apply_param_substs<'tcx,T>(tcx: &ty::ctxt<'tcx>,\n \n \n /// Returns the normalized type of a struct field\n-pub fn field_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn field_ty<'tcx>(tcx: &TyCtxt<'tcx>,\n                       param_substs: &Substs<'tcx>,\n                       f: ty::FieldDef<'tcx>)\n                       -> Ty<'tcx>"}, {"sha": "134da7a3bb0bb770253dfbe4963c55c537017421", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -56,7 +56,7 @@ use middle::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs, ParamSpace};\n use middle::traits;\n-use middle::ty::{self, Ty, ToPredicate, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use middle::ty::wf::object_region_bounds;\n use require_c_abi_if_variadic;\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n@@ -76,7 +76,7 @@ use rustc_front::hir;\n use rustc_back::slice;\n \n pub trait AstConv<'tcx> {\n-    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n+    fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx>;\n \n     /// Identify the type scheme for an item with a type, like a type\n     /// alias, fn, or struct. This allows you to figure out the set of\n@@ -153,7 +153,7 @@ pub trait AstConv<'tcx> {\n                     -> Ty<'tcx>;\n }\n \n-pub fn ast_region_to_region(tcx: &ty::ctxt, lifetime: &hir::Lifetime)\n+pub fn ast_region_to_region(tcx: &TyCtxt, lifetime: &hir::Lifetime)\n                             -> ty::Region {\n     let r = match tcx.named_region_map.get(&lifetime.id) {\n         None => {\n@@ -571,7 +571,7 @@ fn convert_angle_bracketed_parameters<'tcx>(this: &AstConv<'tcx>,\n /// Returns the appropriate lifetime to use for any output lifetimes\n /// (if one exists) and a vector of the (pattern, number of lifetimes)\n /// corresponding to each input type/pattern.\n-fn find_implied_output_region<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn find_implied_output_region<'tcx>(tcx: &TyCtxt<'tcx>,\n                                     input_tys: &[Ty<'tcx>],\n                                     input_pats: Vec<String>) -> ElidedLifetime\n {\n@@ -1166,7 +1166,7 @@ fn make_object_type<'tcx>(this: &AstConv<'tcx>,\n     tcx.mk_trait(object.principal, object.bounds)\n }\n \n-fn report_ambiguous_associated_type(tcx: &ty::ctxt,\n+fn report_ambiguous_associated_type(tcx: &TyCtxt,\n                                     span: Span,\n                                     type_str: &str,\n                                     trait_str: &str,\n@@ -1220,7 +1220,7 @@ fn find_bound_for_assoc_item<'tcx>(this: &AstConv<'tcx>,\n \n // Checks that bounds contains exactly one element and reports appropriate\n // errors otherwise.\n-fn one_bound_for_assoc_type<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn one_bound_for_assoc_type<'tcx>(tcx: &TyCtxt<'tcx>,\n                                   bounds: Vec<ty::PolyTraitRef<'tcx>>,\n                                   ty_param_name: &str,\n                                   assoc_name: &str,\n@@ -2153,7 +2153,7 @@ pub struct PartitionedBounds<'a> {\n \n /// Divides a list of bounds from the AST into three groups: builtin bounds (Copy, Sized etc),\n /// general trait bounds, and region bounds.\n-pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n+pub fn partition_bounds<'a>(tcx: &TyCtxt,\n                             _span: Span,\n                             ast_bounds: &'a [hir::TyParamBound])\n                             -> PartitionedBounds<'a>\n@@ -2202,15 +2202,15 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n     }\n }\n \n-fn prohibit_projections<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn prohibit_projections<'tcx>(tcx: &TyCtxt<'tcx>,\n                               bindings: &[ConvertedBinding<'tcx>])\n {\n     for binding in bindings.iter().take(1) {\n         prohibit_projection(tcx, binding.span);\n     }\n }\n \n-fn check_type_argument_count(tcx: &ty::ctxt, span: Span, supplied: usize,\n+fn check_type_argument_count(tcx: &TyCtxt, span: Span, supplied: usize,\n                              required: usize, accepted: usize) {\n     if supplied < required {\n         let expected = if required < accepted {\n@@ -2235,7 +2235,7 @@ fn check_type_argument_count(tcx: &ty::ctxt, span: Span, supplied: usize,\n     }\n }\n \n-fn report_lifetime_number_error(tcx: &ty::ctxt, span: Span, number: usize, expected: usize) {\n+fn report_lifetime_number_error(tcx: &TyCtxt, span: Span, number: usize, expected: usize) {\n     span_err!(tcx.sess, span, E0107,\n               \"wrong number of lifetime parameters: expected {}, found {}\",\n               expected, number);\n@@ -2253,7 +2253,7 @@ pub struct Bounds<'tcx> {\n \n impl<'tcx> Bounds<'tcx> {\n     pub fn predicates(&self,\n-        tcx: &ty::ctxt<'tcx>,\n+        tcx: &TyCtxt<'tcx>,\n         param_ty: Ty<'tcx>)\n         -> Vec<ty::Predicate<'tcx>>\n     {"}, {"sha": "5ab3c6f983f96f45c85283591b5cc81021cdbb11", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -68,7 +68,7 @@ use middle::traits::{predicate_for_trait_def, report_selection_error};\n use middle::ty::adjustment::{AutoAdjustment, AutoDerefRef, AdjustDerefRef};\n use middle::ty::adjustment::{AutoPtr, AutoUnsafe, AdjustReifyFnPointer};\n use middle::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n-use middle::ty::{self, LvaluePreference, TypeAndMut, Ty};\n+use middle::ty::{self, LvaluePreference, TypeAndMut, Ty, TyCtxt};\n use middle::ty::fold::TypeFoldable;\n use middle::ty::error::TypeError;\n use middle::ty::relate::RelateResult;\n@@ -87,7 +87,7 @@ struct Coerce<'a, 'tcx: 'a> {\n type CoerceResult<'tcx> = RelateResult<'tcx, Option<AutoAdjustment<'tcx>>>;\n \n impl<'f, 'tcx> Coerce<'f, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.fcx.tcx()\n     }\n "}, {"sha": "2bf7d65e331478c161fe3af9b7c13b32f00bf299", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -11,7 +11,7 @@\n use middle::free_region::FreeRegionMap;\n use middle::infer::{self, TypeOrigin};\n use middle::traits;\n-use middle::ty::{self};\n+use middle::ty::{self, TyCtxt};\n use middle::subst::{self, Subst, Substs, VecPerParamSpace};\n \n use syntax::ast;\n@@ -30,7 +30,7 @@ use super::assoc;\n /// - trait_m: the method in the trait\n /// - impl_trait_ref: the TraitRef corresponding to the trait implementation\n \n-pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn compare_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                  impl_m: &ty::Method<'tcx>,\n                                  impl_m_span: Span,\n                                  impl_m_body_id: ast::NodeId,\n@@ -364,7 +364,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n     infcx.resolve_regions_and_report_errors(&free_regions, impl_m_body_id);\n \n-    fn check_region_bounds_on_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+    fn check_region_bounds_on_impl_method<'tcx>(tcx: &TyCtxt<'tcx>,\n                                                 span: Span,\n                                                 impl_m: &ty::Method<'tcx>,\n                                                 trait_generics: &ty::Generics<'tcx>,\n@@ -408,7 +408,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n }\n \n-pub fn compare_const_impl<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn compare_const_impl<'tcx>(tcx: &TyCtxt<'tcx>,\n                                 impl_c: &ty::AssociatedConst<'tcx>,\n                                 impl_c_span: Span,\n                                 trait_c: &ty::AssociatedConst<'tcx>,"}, {"sha": "78faef473ddf605e6efea41afcc6ed49c12fab56", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -16,7 +16,7 @@ use middle::infer;\n use middle::region;\n use middle::subst::{self, Subst};\n use middle::traits;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use util::nodemap::FnvHashSet;\n \n use syntax::ast;\n@@ -39,7 +39,7 @@ use syntax::codemap::{self, Span};\n ///    struct/enum definition for the nominal type itself (i.e.\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n-pub fn check_drop_impl(tcx: &ty::ctxt, drop_impl_did: DefId) -> Result<(), ()> {\n+pub fn check_drop_impl(tcx: &TyCtxt, drop_impl_did: DefId) -> Result<(), ()> {\n     let ty::TypeScheme { generics: ref dtor_generics,\n                          ty: dtor_self_type } = tcx.lookup_item_type(drop_impl_did);\n     let dtor_predicates = tcx.lookup_predicates(drop_impl_did);\n@@ -70,7 +70,7 @@ pub fn check_drop_impl(tcx: &ty::ctxt, drop_impl_did: DefId) -> Result<(), ()> {\n }\n \n fn ensure_drop_params_and_item_params_correspond<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &TyCtxt<'tcx>,\n     drop_impl_did: DefId,\n     drop_impl_generics: &ty::Generics<'tcx>,\n     drop_impl_ty: &ty::Ty<'tcx>,\n@@ -119,7 +119,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n /// Confirms that every predicate imposed by dtor_predicates is\n /// implied by assuming the predicates attached to self_type_did.\n fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &TyCtxt<'tcx>,\n     drop_impl_did: DefId,\n     dtor_predicates: &ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n@@ -495,7 +495,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n     }\n }\n \n-fn has_dtor_of_interest<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn has_dtor_of_interest<'tcx>(tcx: &TyCtxt<'tcx>,\n                               ty: ty::Ty<'tcx>) -> bool {\n     match ty.sty {\n         ty::TyEnum(def, _) | ty::TyStruct(def, _) => {"}, {"sha": "6d8fff3caca2c42bf6236b1b229225f8a9d84330", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@ use astconv::AstConv;\n use intrinsics;\n use middle::subst;\n use middle::ty::FnSig;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::fold::TypeFolder;\n use {CrateCtxt, require_same_types};\n \n@@ -28,7 +28,7 @@ use syntax::parse::token;\n \n use rustc_front::hir;\n \n-fn equate_intrinsic_type<'a, 'tcx>(tcx: &ty::ctxt<'tcx>, it: &hir::ForeignItem,\n+fn equate_intrinsic_type<'a, 'tcx>(tcx: &TyCtxt<'tcx>, it: &hir::ForeignItem,\n                                    n_tps: usize,\n                                    abi: Abi,\n                                    inputs: Vec<ty::Ty<'tcx>>,\n@@ -412,7 +412,7 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n // the same, in a kinda-structural way, i.e. `Vector`s have to be simd structs with\n // exactly the right element type\n fn match_intrinsic_type_to_type<'tcx, 'a>(\n-        tcx: &ty::ctxt<'tcx>,\n+        tcx: &TyCtxt<'tcx>,\n         position: &str,\n         span: Span,\n         structural_to_nominal: &mut HashMap<&'a intrinsics::Type, ty::Ty<'tcx>>,"}, {"sha": "f2f2eb664444f7dcc2ccaf31b66e49c7077834e7", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@ use check::UnresolvedTypeAction;\n use middle::def_id::DefId;\n use middle::subst::{self};\n use middle::traits;\n-use middle::ty::{self, NoPreference, PreferMutLvalue, Ty};\n+use middle::ty::{self, NoPreference, PreferMutLvalue, Ty, TyCtxt};\n use middle::ty::adjustment::{AdjustDerefRef, AutoDerefRef, AutoPtr};\n use middle::ty::fold::TypeFoldable;\n use middle::infer;\n@@ -613,7 +613,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n     ///////////////////////////////////////////////////////////////////////////\n     // MISCELLANY\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.fcx.tcx()\n     }\n "}, {"sha": "fce446834130516852c3f0a1807edb4afee3bb81", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -16,7 +16,7 @@ use middle::def::Def;\n use middle::def_id::DefId;\n use middle::subst;\n use middle::traits;\n-use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n+use middle::ty::{self, TyCtxt, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n use middle::ty::adjustment::{AdjustDerefRef, AutoDerefRef, AutoPtr};\n use middle::infer;\n \n@@ -350,7 +350,7 @@ pub fn resolve_ufcs<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n /// Find item with name `item_name` defined in `trait_def_id`\n /// and return it, or `None`, if no such item.\n-fn trait_item<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn trait_item<'tcx>(tcx: &TyCtxt<'tcx>,\n                     trait_def_id: DefId,\n                     item_name: ast::Name)\n                     -> Option<ty::ImplOrTraitItem<'tcx>>\n@@ -361,7 +361,7 @@ fn trait_item<'tcx>(tcx: &ty::ctxt<'tcx>,\n                .cloned()\n }\n \n-fn impl_item<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn impl_item<'tcx>(tcx: &TyCtxt<'tcx>,\n                    impl_def_id: DefId,\n                    item_name: ast::Name)\n                    -> Option<ty::ImplOrTraitItem<'tcx>>"}, {"sha": "02f8584c55d535b04b83bd7de6d922eb6502f5bf", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -19,7 +19,7 @@ use middle::def_id::DefId;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n-use middle::ty::{self, NoPreference, Ty, ToPolyTraitRef, TraitRef, TypeFoldable};\n+use middle::ty::{self, NoPreference, Ty, TyCtxt, ToPolyTraitRef, TraitRef, TypeFoldable};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeOrigin};\n use syntax::ast;\n@@ -258,7 +258,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         self.static_candidates.clear();\n     }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.fcx.tcx()\n     }\n \n@@ -1278,7 +1278,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n     }\n }\n \n-fn impl_item<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn impl_item<'tcx>(tcx: &TyCtxt<'tcx>,\n                    impl_def_id: DefId,\n                    item_name: ast::Name)\n                    -> Option<ty::ImplOrTraitItem<'tcx>>\n@@ -1293,7 +1293,7 @@ fn impl_item<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n /// Find item with name `item_name` defined in `trait_def_id`\n /// and return it, or `None`, if no such item.\n-fn trait_item<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn trait_item<'tcx>(tcx: &TyCtxt<'tcx>,\n                     trait_def_id: DefId,\n                     item_name: ast::Name)\n                     -> Option<ty::ImplOrTraitItem<'tcx>>"}, {"sha": "9be46cf4053b1781b3c18ecf6e73db71e870e080", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -96,7 +96,7 @@ use middle::traits::{self, report_fulfillment_errors};\n use middle::ty::{GenericPredicates, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n-use middle::ty::{self, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPolyTraitRef, Ty, TyCtxt};\n use middle::ty::{MethodCall, MethodCallee};\n use middle::ty::adjustment;\n use middle::ty::error::TypeError;\n@@ -300,7 +300,7 @@ pub struct FnCtxt<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Inherited<'a, 'tcx> {\n-    fn new(tcx: &'a ty::ctxt<'tcx>,\n+    fn new(tcx: &'a TyCtxt<'tcx>,\n            tables: &'a RefCell<ty::Tables<'tcx>>,\n            param_env: ty::ParameterEnvironment<'a, 'tcx>)\n            -> Inherited<'a, 'tcx> {\n@@ -1091,7 +1091,7 @@ fn report_cast_to_unsized_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n \n impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> { self.ccx.tcx }\n+    fn tcx(&self) -> &TyCtxt<'tcx> { self.ccx.tcx }\n \n     fn get_item_type_scheme(&self, _: Span, id: DefId)\n                             -> Result<ty::TypeScheme<'tcx>, ErrorReported>\n@@ -1199,7 +1199,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> { self.ccx.tcx }\n+    fn tcx(&self) -> &TyCtxt<'tcx> { self.ccx.tcx }\n \n     pub fn infcx(&self) -> &infer::InferCtxt<'a,'tcx> {\n         &self.inh.infcx\n@@ -2582,7 +2582,7 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n }\n \n // FIXME(#17596) Ty<'tcx> is incorrectly invariant w.r.t 'tcx.\n-fn err_args<'tcx>(tcx: &ty::ctxt<'tcx>, len: usize) -> Vec<Ty<'tcx>> {\n+fn err_args<'tcx>(tcx: &TyCtxt<'tcx>, len: usize) -> Vec<Ty<'tcx>> {\n     (0..len).map(|_| tcx.types.err).collect()\n }\n \n@@ -3832,7 +3832,7 @@ impl<'tcx> Expectation<'tcx> {\n     /// which still is useful, because it informs integer literals and the like.\n     /// See the test case `test/run-pass/coerce-expect-unsized.rs` and #20169\n     /// for examples of where this comes up,.\n-    fn rvalue_hint(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Expectation<'tcx> {\n+    fn rvalue_hint(tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> Expectation<'tcx> {\n         match tcx.struct_tail(ty).sty {\n             ty::TySlice(_) | ty::TyStr | ty::TyTrait(..) => {\n                 ExpectRvalueLikeUnsized(ty)\n@@ -4114,7 +4114,7 @@ fn check_const_with_ty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n /// Checks whether a type can be represented in memory. In particular, it\n /// identifies types that contain themselves without indirection through a\n /// pointer, which would mean their size is unbounded.\n-pub fn check_representable(tcx: &ty::ctxt,\n+pub fn check_representable(tcx: &TyCtxt,\n                            sp: Span,\n                            item_id: ast::NodeId,\n                            _designation: &str) -> bool {\n@@ -4136,7 +4136,7 @@ pub fn check_representable(tcx: &ty::ctxt,\n     return true\n }\n \n-pub fn check_simd(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) {\n+pub fn check_simd(tcx: &TyCtxt, sp: Span, id: ast::NodeId) {\n     let t = tcx.node_id_to_type(id);\n     match t.sty {\n         ty::TyStruct(def, substs) => {\n@@ -4852,7 +4852,7 @@ pub fn structurally_resolved_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n }\n \n // Returns true if b contains a break that can exit from b\n-pub fn may_break(cx: &ty::ctxt, id: ast::NodeId, b: &hir::Block) -> bool {\n+pub fn may_break(cx: &TyCtxt, id: ast::NodeId, b: &hir::Block) -> bool {\n     // First: is there an unlabeled break immediately\n     // inside the loop?\n     (loop_query(&b, |e| {"}, {"sha": "f6225cf6ca7682fc7ad4ee58cb816e7c3f7aeaef", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -91,7 +91,7 @@ use middle::mem_categorization::Categorization;\n use middle::region::{self, CodeExtent};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, Ty, MethodCall, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, MethodCall, TypeFoldable};\n use middle::infer::{self, GenericKind, InferCtxt, SubregionOrigin, TypeOrigin, VerifyBound};\n use middle::pat_util;\n use middle::ty::adjustment;\n@@ -208,7 +208,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         }\n     }\n \n-    pub fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    pub fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.fcx.ccx.tcx\n     }\n "}, {"sha": "fca2c8193a7b0e4ef9fdf88695da27cd6bbb8b4b", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -46,7 +46,7 @@ use check::demand;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::infer::{InferCtxt, UpvarRegion};\n use std::collections::HashSet;\n use syntax::ast;\n@@ -114,7 +114,7 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n         SeedBorrowKind { fcx: fcx, closures_with_inferred_kinds: HashSet::new() }\n     }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.fcx.tcx()\n     }\n "}, {"sha": "997f56bd449c631ae3b90f1514554ebca3981ca2", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -16,7 +16,7 @@ use middle::def_id::DefId;\n use middle::region::{CodeExtent};\n use middle::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use middle::traits;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::fold::{TypeFolder};\n \n use std::cell::RefCell;\n@@ -42,7 +42,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         }\n     }\n \n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &TyCtxt<'tcx> {\n         self.ccx.tcx\n     }\n \n@@ -516,7 +516,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     }\n }\n \n-fn reject_shadowing_type_parameters<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn reject_shadowing_type_parameters<'tcx>(tcx: &TyCtxt<'tcx>,\n                                           span: Span,\n                                           generics: &ty::Generics<'tcx>) {\n     let impl_params = generics.types.get_slice(subst::TypeSpace).iter()\n@@ -623,13 +623,13 @@ pub fn error_380<'ccx,'tcx>(ccx: &'ccx CrateCtxt<'ccx, 'tcx>, span: Span) {\n                Trait for ..`) must have no methods or associated items\")\n }\n \n-pub fn error_392<'tcx>(tcx: &ty::ctxt<'tcx>, span: Span, param_name: ast::Name)\n+pub fn error_392<'tcx>(tcx: &TyCtxt<'tcx>, span: Span, param_name: ast::Name)\n                        -> DiagnosticBuilder<'tcx> {\n     struct_span_err!(tcx.sess, span, E0392,\n                      \"parameter `{}` is never used\", param_name)\n }\n \n-pub fn error_194<'tcx>(tcx: &ty::ctxt<'tcx>, span: Span, name: ast::Name) {\n+pub fn error_194<'tcx>(tcx: &TyCtxt<'tcx>, span: Span, name: ast::Name) {\n     span_err!(tcx.sess, span, E0194,\n               \"type parameter `{}` shadows another type parameter of the same name\",\n               name);"}, {"sha": "20c86f9a17c8d422ad62bc3404d5586c32c03082", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -17,7 +17,7 @@ use astconv::AstConv;\n use check::FnCtxt;\n use middle::def_id::DefId;\n use middle::pat_util;\n-use middle::ty::{self, Ty, MethodCall, MethodCallee};\n+use middle::ty::{self, Ty, TyCtxt, MethodCall, MethodCallee};\n use middle::ty::adjustment;\n use middle::ty::fold::{TypeFolder,TypeFoldable};\n use middle::infer;\n@@ -85,7 +85,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         WritebackCx { fcx: fcx }\n     }\n \n-    fn tcx(&self) -> &'cx ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'cx TyCtxt<'tcx> {\n         self.fcx.tcx()\n     }\n \n@@ -381,7 +381,7 @@ enum ResolveReason {\n }\n \n impl ResolveReason {\n-    fn span(&self, tcx: &ty::ctxt) -> Span {\n+    fn span(&self, tcx: &TyCtxt) -> Span {\n         match *self {\n             ResolvingExpr(s) => s,\n             ResolvingLocal(s) => s,\n@@ -411,7 +411,7 @@ impl ResolveReason {\n // unresolved types and so forth.\n \n struct Resolver<'cx, 'tcx: 'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>,\n+    tcx: &'cx TyCtxt<'tcx>,\n     infcx: &'cx infer::InferCtxt<'cx, 'tcx>,\n     writeback_errors: &'cx Cell<bool>,\n     reason: ResolveReason,\n@@ -487,7 +487,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n }\n \n impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n-    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "6106011433027de4e72ea1d313f3c9db9c7d9843", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -20,7 +20,7 @@ use middle::def_id::DefId;\n use middle::lang_items::UnsizeTraitLangItem;\n use middle::subst::{self, Subst};\n use middle::traits;\n-use middle::ty::{self, TypeFoldable};\n+use middle::ty::{self, TyCtxt, TypeFoldable};\n use middle::ty::{ImplOrTraitItemId, ConstTraitItemId};\n use middle::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use middle::ty::{Ty, TyBool, TyChar, TyEnum, TyError};\n@@ -492,7 +492,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     }\n }\n \n-fn enforce_trait_manually_implementable(tcx: &ty::ctxt, sp: Span, trait_def_id: DefId) {\n+fn enforce_trait_manually_implementable(tcx: &TyCtxt, sp: Span, trait_def_id: DefId) {\n     if tcx.sess.features.borrow().unboxed_closures {\n         // the feature gate allows all of them\n         return"}, {"sha": "56e6d0399036dd929bf08704afd83d4a5cb66200", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -14,20 +14,20 @@\n use middle::cstore::LOCAL_CRATE;\n use middle::def_id::DefId;\n use middle::traits;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc::dep_graph::DepNode;\n use rustc_front::intravisit;\n use rustc_front::hir;\n \n-pub fn check(tcx: &ty::ctxt) {\n+pub fn check(tcx: &TyCtxt) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n     tcx.visit_all_items_in_krate(DepNode::CoherenceOrphanCheck, &mut orphan);\n }\n \n struct OrphanChecker<'cx, 'tcx:'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>\n+    tcx: &'cx TyCtxt<'tcx>\n }\n \n impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {"}, {"sha": "9ec42b6d3f859f25cf5efd316767221e960612c8", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -14,7 +14,7 @@\n use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def_id::DefId;\n use middle::traits;\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use middle::infer;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -23,7 +23,7 @@ use rustc_front::hir;\n use rustc_front::intravisit;\n use util::nodemap::{DefIdMap, DefIdSet};\n \n-pub fn check(tcx: &ty::ctxt) {\n+pub fn check(tcx: &TyCtxt) {\n     let mut overlap = OverlapChecker { tcx: tcx,\n                                        traits_checked: DefIdSet(),\n                                        default_impls: DefIdMap() };\n@@ -34,7 +34,7 @@ pub fn check(tcx: &ty::ctxt) {\n }\n \n struct OverlapChecker<'cx, 'tcx:'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>,\n+    tcx: &'cx TyCtxt<'tcx>,\n \n     // The set of traits where we have checked for overlap.  This is\n     // used to avoid checking the same trait twice."}, {"sha": "fbb1653b06a07f73ef55a497e60ccdda44f1a7f5", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -11,17 +11,17 @@\n //! Unsafety checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n-use middle::ty;\n+use middle::ty::TyCtxt;\n use rustc_front::intravisit;\n use rustc_front::hir;\n \n-pub fn check(tcx: &ty::ctxt) {\n+pub fn check(tcx: &TyCtxt) {\n     let mut orphan = UnsafetyChecker { tcx: tcx };\n     tcx.map.krate().visit_all_items(&mut orphan);\n }\n \n struct UnsafetyChecker<'cx, 'tcx:'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>\n+    tcx: &'cx TyCtxt<'tcx>\n }\n \n impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {"}, {"sha": "b3305fdb9a04449680516d66d9e0c2b2caad2e4a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -69,7 +69,7 @@ use middle::const_eval::{self, ConstVal};\n use middle::const_eval::EvalHint::UncheckedExprHint;\n use middle::subst::{Substs, FnSpace, ParamSpace, SelfSpace, TypeSpace, VecPerParamSpace};\n use middle::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n-use middle::ty::{self, ToPolyTraitRef, Ty, TypeScheme};\n+use middle::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeScheme};\n use middle::ty::{VariantKind};\n use middle::ty::fold::{TypeFolder};\n use middle::ty::util::IntTypeExt;\n@@ -97,7 +97,7 @@ use rustc_front::print::pprust;\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-pub fn collect_item_types(tcx: &ty::ctxt) {\n+pub fn collect_item_types(tcx: &TyCtxt) {\n     let ccx = &CrateCtxt { tcx: tcx, stack: RefCell::new(Vec::new()) };\n     let mut visitor = CollectItemTypesVisitor{ ccx: ccx };\n     ccx.tcx.visit_all_items_in_krate(DepNode::CollectItem, &mut visitor);\n@@ -106,7 +106,7 @@ pub fn collect_item_types(tcx: &ty::ctxt) {\n ///////////////////////////////////////////////////////////////////////////\n \n struct CrateCtxt<'a,'tcx:'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n \n     // This stack is used to identify cycles in the user's source.\n     // Note that these cycles can cross multiple items.\n@@ -304,7 +304,7 @@ impl<'a,'tcx> ItemCtxt<'a,'tcx> {\n }\n \n impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> { self.ccx.tcx }\n+    fn tcx(&self) -> &TyCtxt<'tcx> { self.ccx.tcx }\n \n     fn get_item_type_scheme(&self, span: Span, id: DefId)\n                             -> Result<ty::TypeScheme<'tcx>, ErrorReported>\n@@ -500,7 +500,7 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for hir::Generics {\n /// parameter with id `param_id`. We use this so as to avoid running\n /// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n /// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn is_param<'tcx>(tcx: &TyCtxt<'tcx>,\n                   ast_ty: &hir::Ty,\n                   param_id: ast::NodeId)\n                   -> bool\n@@ -920,7 +920,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n     }\n }\n \n-fn convert_variant_ctor<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn convert_variant_ctor<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n                                   ctor_id: ast::NodeId,\n                                   variant: ty::VariantDef<'tcx>,\n                                   scheme: ty::TypeScheme<'tcx>,\n@@ -970,7 +970,7 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n }\n \n-fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn convert_struct_variant<'tcx>(tcx: &TyCtxt<'tcx>,\n                                 did: DefId,\n                                 name: ast::Name,\n                                 disr_val: ty::Disr,\n@@ -1000,7 +1000,7 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n }\n \n-fn convert_struct_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn convert_struct_def<'tcx>(tcx: &TyCtxt<'tcx>,\n                             it: &hir::Item,\n                             def: &hir::VariantData)\n                             -> ty::AdtDefMaster<'tcx>\n@@ -1019,12 +1019,12 @@ fn convert_struct_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n     )\n }\n \n-fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn convert_enum_def<'tcx>(tcx: &TyCtxt<'tcx>,\n                           it: &hir::Item,\n                           def: &hir::EnumDef)\n                           -> ty::AdtDefMaster<'tcx>\n {\n-    fn evaluate_disr_expr<'tcx>(tcx: &ty::ctxt<'tcx>,\n+    fn evaluate_disr_expr<'tcx>(tcx: &TyCtxt<'tcx>,\n                                 repr_ty: Ty<'tcx>,\n                                 e: &hir::Expr) -> Option<ty::Disr> {\n         debug!(\"disr expr, checking {}\", pprust::expr_to_string(e));\n@@ -1057,7 +1057,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n     }\n \n-    fn report_discrim_overflow(tcx: &ty::ctxt,\n+    fn report_discrim_overflow(tcx: &TyCtxt,\n                                variant_span: Span,\n                                variant_name: &str,\n                                repr_type: attr::IntType,\n@@ -1072,7 +1072,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n                   prev_val, repr_type, variant_name, computed_value);\n     }\n \n-    fn next_disr(tcx: &ty::ctxt,\n+    fn next_disr(tcx: &TyCtxt,\n                  v: &hir::Variant,\n                  repr_type: attr::IntType,\n                  prev_disr_val: Option<ty::Disr>) -> Option<ty::Disr> {\n@@ -1087,7 +1087,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n             Some(ty::INITIAL_DISCRIMINANT_VALUE)\n         }\n     }\n-    fn convert_enum_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n+    fn convert_enum_variant<'tcx>(tcx: &TyCtxt<'tcx>,\n                                   v: &hir::Variant,\n                                   disr: ty::Disr)\n                                   -> ty::VariantDefData<'tcx, 'tcx>\n@@ -2171,7 +2171,7 @@ fn mk_item_substs<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n }\n \n /// Checks that all the type parameters on an impl\n-fn enforce_impl_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn enforce_impl_params_are_constrained<'tcx>(tcx: &TyCtxt<'tcx>,\n                                              ast_generics: &hir::Generics,\n                                              impl_predicates: &mut ty::GenericPredicates<'tcx>,\n                                              impl_def_id: DefId)\n@@ -2206,7 +2206,7 @@ fn enforce_impl_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n }\n \n-fn enforce_impl_lifetimes_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn enforce_impl_lifetimes_are_constrained<'tcx>(tcx: &TyCtxt<'tcx>,\n                                                 ast_generics: &hir::Generics,\n                                                 impl_def_id: DefId,\n                                                 impl_items: &[hir::ImplItem])\n@@ -2271,7 +2271,7 @@ fn enforce_impl_lifetimes_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // used elsewhere are not projected back out.\n }\n \n-fn report_unused_parameter(tcx: &ty::ctxt,\n+fn report_unused_parameter(tcx: &TyCtxt,\n                            span: Span,\n                            kind: &str,\n                            name: &str)"}, {"sha": "336bff26e2c7fd0be48da04dfbc325c73d664cbd", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::subst;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n \n use std::collections::HashSet;\n \n@@ -93,7 +93,7 @@ fn parameters_for_region(region: &ty::Region) -> Option<Parameter> {\n     }\n }\n \n-pub fn identify_constrained_type_params<'tcx>(_tcx: &ty::ctxt<'tcx>,\n+pub fn identify_constrained_type_params<'tcx>(_tcx: &TyCtxt<'tcx>,\n                                               predicates: &[ty::Predicate<'tcx>],\n                                               impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                               input_parameters: &mut HashSet<Parameter>)\n@@ -143,7 +143,7 @@ pub fn identify_constrained_type_params<'tcx>(_tcx: &ty::ctxt<'tcx>,\n /// which is determined by 1, which requires `U`, that is determined\n /// by 0. I should probably pick a less tangled example, but I can't\n /// think of any.\n-pub fn setup_constraining_predicates<'tcx>(_tcx: &ty::ctxt<'tcx>,\n+pub fn setup_constraining_predicates<'tcx>(_tcx: &TyCtxt<'tcx>,\n                                            predicates: &mut [ty::Predicate<'tcx>],\n                                            impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                            input_parameters: &mut HashSet<Parameter>)"}, {"sha": "a103cbc928b4957a34ece2c116e2929763a7d57c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -104,7 +104,7 @@ use front::map as hir_map;\n use middle::def::Def;\n use middle::infer::{self, TypeOrigin};\n use middle::subst;\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use session::{config, CompileResult};\n use util::common::time;\n use rustc_front::hir;\n@@ -140,17 +140,17 @@ pub struct CrateCtxt<'a, 'tcx: 'a> {\n     /// error reporting, and so is lazily initialised and generally\n     /// shouldn't taint the common path (hence the RefCell).\n     pub all_traits: RefCell<Option<check::method::AllTraitsVec>>,\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n }\n \n // Functions that write types into the node type table\n-fn write_ty_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n+fn write_ty_to_tcx<'tcx>(tcx: &TyCtxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n     debug!(\"write_ty_to_tcx({}, {:?})\", node_id,  ty);\n     assert!(!ty.needs_infer());\n     tcx.node_type_insert(node_id, ty);\n }\n \n-fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn write_substs_to_tcx<'tcx>(tcx: &TyCtxt<'tcx>,\n                                  node_id: ast::NodeId,\n                                  item_substs: ty::ItemSubsts<'tcx>) {\n     if !item_substs.is_noop() {\n@@ -164,7 +164,7 @@ fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n }\n \n-fn lookup_full_def(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) -> Def {\n+fn lookup_full_def(tcx: &TyCtxt, sp: Span, id: ast::NodeId) -> Def {\n     match tcx.def_map.borrow().get(&id) {\n         Some(x) => x.full_def(),\n         None => {\n@@ -173,7 +173,7 @@ fn lookup_full_def(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) -> Def {\n     }\n }\n \n-fn require_c_abi_if_variadic(tcx: &ty::ctxt,\n+fn require_c_abi_if_variadic(tcx: &TyCtxt,\n                              decl: &hir::FnDecl,\n                              abi: Abi,\n                              span: Span) {\n@@ -183,7 +183,7 @@ fn require_c_abi_if_variadic(tcx: &ty::ctxt,\n     }\n }\n \n-fn require_same_types<'a, 'tcx, M>(tcx: &ty::ctxt<'tcx>,\n+fn require_same_types<'a, 'tcx, M>(tcx: &TyCtxt<'tcx>,\n                                    maybe_infcx: Option<&infer::InferCtxt<'a, 'tcx>>,\n                                    t1_is_expected: bool,\n                                    span: Span,\n@@ -325,7 +325,7 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt, trait_map: ty::TraitMap) -> CompileResult {\n+pub fn check_crate(tcx: &TyCtxt, trait_map: ty::TraitMap) -> CompileResult {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = CrateCtxt {\n         trait_map: trait_map,"}, {"sha": "0c9fa9fd0ab4f238d5fbf7fa10c25aa601b253ad", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -18,7 +18,7 @@ use middle::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use middle::subst;\n use middle::subst::ParamSpace;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::maps::ItemVariances;\n use rustc::front::map as hir_map;\n use syntax::ast;\n@@ -127,7 +127,7 @@ fn is_lifetime(map: &hir_map::Map, param_id: ast::NodeId) -> bool {\n }\n \n impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.terms_cx.tcx\n     }\n "}, {"sha": "ab37ef952c9a9c2ad4b77eb5adce707b5b2bd32c", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -12,7 +12,7 @@\n //! parameters. See README.md for details.\n \n use arena;\n-use middle::ty;\n+use middle::ty::TyCtxt;\n \n /// Defines the `TermsContext` basically houses an arena where we can\n /// allocate terms.\n@@ -27,7 +27,7 @@ mod solve;\n /// Code for transforming variances.\n mod xform;\n \n-pub fn infer_variance(tcx: &ty::ctxt) {\n+pub fn infer_variance(tcx: &TyCtxt) {\n     let mut arena = arena::TypedArena::new();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);"}, {"sha": "ff55aefb20ff3080cec2a1c71da6f00b7a15457d", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -22,7 +22,7 @@\n use arena::TypedArena;\n use dep_graph::DepTrackingMapConfig;\n use middle::subst::{ParamSpace, FnSpace, TypeSpace, SelfSpace, VecPerParamSpace};\n-use middle::ty;\n+use middle::ty::{self, TyCtxt};\n use middle::ty::maps::ItemVariances;\n use std::fmt;\n use std::rc::Rc;\n@@ -59,7 +59,7 @@ impl<'a> fmt::Debug for VarianceTerm<'a> {\n // The first pass over the crate simply builds up the set of inferreds.\n \n pub struct TermsContext<'a, 'tcx: 'a> {\n-    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub tcx: &'a TyCtxt<'tcx>,\n     pub arena: &'a TypedArena<VarianceTerm<'a>>,\n \n     pub empty_variances: Rc<ty::ItemVariances>,\n@@ -98,7 +98,7 @@ pub struct InferredInfo<'a> {\n }\n \n pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n-    tcx: &'a ty::ctxt<'tcx>,\n+    tcx: &'a TyCtxt<'tcx>,\n     arena: &'a mut TypedArena<VarianceTerm<'a>>)\n     -> TermsContext<'a, 'tcx>\n {\n@@ -125,7 +125,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n     terms_cx\n }\n \n-fn lang_items(tcx: &ty::ctxt) -> Vec<(ast::NodeId,Vec<ty::Variance>)> {\n+fn lang_items(tcx: &TyCtxt) -> Vec<(ast::NodeId,Vec<ty::Variance>)> {\n     let all = vec![\n         (tcx.lang_items.phantom_data(), vec![ty::Covariant]),\n         (tcx.lang_items.unsafe_cell_type(), vec![ty::Invariant]),"}, {"sha": "02ea83615a372a1b58584f3d45745b82479ec44d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -19,7 +19,7 @@ use rustc_front::hir;\n use rustc::middle::cstore::{self, CrateStore};\n use rustc::middle::def::Def;\n use rustc::middle::def_id::DefId;\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n use rustc::middle::subst;\n use rustc::middle::stability;\n use rustc::middle::const_eval;\n@@ -67,7 +67,7 @@ pub fn try_inline(cx: &DocContext, id: ast::NodeId, into: Option<ast::Name>)\n     })\n }\n \n-fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n+fn try_inline_def(cx: &DocContext, tcx: &TyCtxt,\n                   def: Def) -> Option<Vec<clean::Item>> {\n     let mut ret = Vec::new();\n     let did = def.def_id();\n@@ -128,7 +128,7 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n     Some(ret)\n }\n \n-pub fn load_attrs(cx: &DocContext, tcx: &ty::ctxt,\n+pub fn load_attrs(cx: &DocContext, tcx: &TyCtxt,\n                   did: DefId) -> Vec<clean::Attribute> {\n     tcx.get_attrs(did).iter().map(|a| a.clean(cx)).collect()\n }\n@@ -148,7 +148,7 @@ pub fn record_extern_fqn(cx: &DocContext, did: DefId, kind: clean::TypeKind) {\n     }\n }\n \n-pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n+pub fn build_external_trait(cx: &DocContext, tcx: &TyCtxt,\n                             did: DefId) -> clean::Trait {\n     let def = tcx.lookup_trait_def(did);\n     let trait_items = tcx.trait_items(did).clean(cx);\n@@ -164,7 +164,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n     }\n }\n \n-fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean::Function {\n+fn build_external_function(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::Function {\n     let t = tcx.lookup_item_type(did);\n     let (decl, style, abi) = match t.ty.sty {\n         ty::TyBareFn(_, ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n@@ -187,7 +187,7 @@ fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean\n     }\n }\n \n-fn build_struct(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean::Struct {\n+fn build_struct(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::Struct {\n     let t = tcx.lookup_item_type(did);\n     let predicates = tcx.lookup_predicates(did);\n     let variant = tcx.lookup_adt_def(did).struct_variant();\n@@ -205,7 +205,7 @@ fn build_struct(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean::Struct {\n     }\n }\n \n-fn build_type(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean::ItemEnum {\n+fn build_type(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::ItemEnum {\n     let t = tcx.lookup_item_type(did);\n     let predicates = tcx.lookup_predicates(did);\n     match t.ty.sty {\n@@ -225,7 +225,7 @@ fn build_type(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean::ItemEnum {\n     }, false)\n }\n \n-pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n+pub fn build_impls(cx: &DocContext, tcx: &TyCtxt,\n                    did: DefId) -> Vec<clean::Item> {\n     tcx.populate_inherent_implementations_for_type_if_necessary(did);\n     let mut impls = Vec::new();\n@@ -252,7 +252,7 @@ pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n             populate_impls(cx, tcx, item.def, &mut impls);\n         }\n \n-        fn populate_impls(cx: &DocContext, tcx: &ty::ctxt,\n+        fn populate_impls(cx: &DocContext, tcx: &TyCtxt,\n                           def: cstore::DefLike,\n                           impls: &mut Vec<clean::Item>) {\n             match def {\n@@ -276,7 +276,7 @@ pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n }\n \n pub fn build_impl(cx: &DocContext,\n-                  tcx: &ty::ctxt,\n+                  tcx: &TyCtxt,\n                   did: DefId,\n                   ret: &mut Vec<clean::Item>) {\n     if !cx.inlined.borrow_mut().as_mut().unwrap().insert(did) {\n@@ -442,7 +442,7 @@ fn is_doc_hidden(a: &clean::Attribute) -> bool {\n     }\n }\n \n-fn build_module(cx: &DocContext, tcx: &ty::ctxt,\n+fn build_module(cx: &DocContext, tcx: &TyCtxt,\n                 did: DefId) -> clean::Module {\n     let mut items = Vec::new();\n     fill_in(cx, tcx, did, &mut items);\n@@ -451,7 +451,7 @@ fn build_module(cx: &DocContext, tcx: &ty::ctxt,\n         is_crate: false,\n     };\n \n-    fn fill_in(cx: &DocContext, tcx: &ty::ctxt, did: DefId,\n+    fn fill_in(cx: &DocContext, tcx: &TyCtxt, did: DefId,\n                items: &mut Vec<clean::Item>) {\n         // If we're reexporting a reexport it may actually reexport something in\n         // two namespaces, so the target may be listed twice. Make sure we only\n@@ -478,7 +478,7 @@ fn build_module(cx: &DocContext, tcx: &ty::ctxt,\n     }\n }\n \n-fn build_const(cx: &DocContext, tcx: &ty::ctxt,\n+fn build_const(cx: &DocContext, tcx: &TyCtxt,\n                did: DefId) -> clean::Constant {\n     use rustc::middle::const_eval;\n     use rustc_front::print::pprust;\n@@ -496,7 +496,7 @@ fn build_const(cx: &DocContext, tcx: &ty::ctxt,\n     }\n }\n \n-fn build_static(cx: &DocContext, tcx: &ty::ctxt,\n+fn build_static(cx: &DocContext, tcx: &TyCtxt,\n                 did: DefId,\n                 mutable: bool) -> clean::Static {\n     clean::Static {"}, {"sha": "b6da5b0ef20e894593b6faa3a2a3c3acf356f302", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -1408,7 +1408,7 @@ pub struct PolyTrait {\n }\n \n /// A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\n-/// type out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\n+/// type out of the AST/TyCtxt given one of these, if more information is needed. Most importantly\n /// it does not preserve mutability or boxes.\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum Type {"}, {"sha": "345b84e0cac81596f2a421f7b2cdfb76a0540f90", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba66a66e07ce62a743b61f83d1b7bf38f1f88b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=37ba66a66e07ce62a743b61f83d1b7bf38f1f88b", "patch": "@@ -15,7 +15,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::middle::ty;\n+use rustc::middle::ty::{self, TyCtxt};\n use rustc::front::map as hir_map;\n use rustc::lint;\n use rustc_trans::back::link;\n@@ -41,7 +41,7 @@ pub use rustc::session::search_paths::SearchPaths;\n \n /// Are we generating documentation (`Typed`) or tests (`NotTyped`)?\n pub enum MaybeTyped<'a, 'tcx: 'a> {\n-    Typed(&'a ty::ctxt<'tcx>),\n+    Typed(&'a TyCtxt<'tcx>),\n     NotTyped(&'a session::Session)\n }\n \n@@ -68,14 +68,14 @@ impl<'b, 'tcx> DocContext<'b, 'tcx> {\n         }\n     }\n \n-    pub fn tcx_opt<'a>(&'a self) -> Option<&'a ty::ctxt<'tcx>> {\n+    pub fn tcx_opt<'a>(&'a self) -> Option<&'a TyCtxt<'tcx>> {\n         match self.maybe_typed {\n             Typed(tcx) => Some(tcx),\n             NotTyped(_) => None\n         }\n     }\n \n-    pub fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> {\n+    pub fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx> {\n         let tcx_opt = self.tcx_opt();\n         tcx_opt.expect(\"tcx not present\")\n     }"}]}