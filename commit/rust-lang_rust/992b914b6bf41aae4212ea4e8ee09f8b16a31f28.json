{"sha": "992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MmI5MTRiNmJmNDFhYWU0MjEyZWE0ZThlZTA5ZjhiMTZhMzFmMjg=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-27T10:37:50Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-27T11:06:57Z"}, "message": "Recover from X<Y,Z> when parsing const expr\n\nThis adds recovery when in array type syntax user writes\n\n    [X; Y<Z, ...>]\n\ninstead of\n\n    [X; Y::<Z, ...>]\n\nFixes #82566\n\nNote that whenever we parse an expression and know that the next token\ncannot be `,`, we should be calling\ncheck_mistyped_turbofish_with_multiple_type_params for this recovery.\nPreviously we only did this for statement parsing (e.g. `let x = f<a,\nb>;`). We now also do it when parsing the length field in array type\nsyntax.", "tree": {"sha": "354a37698a7a8d61a905b083e5b5e133af586c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/354a37698a7a8d61a905b083e5b5e133af586c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "html_url": "https://github.com/rust-lang/rust/commit/992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "html_url": "https://github.com/rust-lang/rust/commit/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "8f03bfd4c3ab78fd7f58ce8a35f2cdd03df01e8a", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "patch": "@@ -360,12 +360,20 @@ impl<'a> Parser<'a> {\n             }\n             Err(err) => return Err(err),\n         };\n+\n         let ty = if self.eat(&token::Semi) {\n-            TyKind::Array(elt_ty, self.parse_anon_const_expr()?)\n+            let mut length = self.parse_anon_const_expr()?;\n+            if let Err(e) = self.expect(&token::CloseDelim(token::Bracket)) {\n+                // Try to recover from `X<Y, ...>` when `X::<Y, ...>` works\n+                self.check_mistyped_turbofish_with_multiple_type_params(e, &mut length.value)?;\n+                self.expect(&token::CloseDelim(token::Bracket))?;\n+            }\n+            TyKind::Array(elt_ty, length)\n         } else {\n+            self.expect(&token::CloseDelim(token::Bracket))?;\n             TyKind::Slice(elt_ty)\n         };\n-        self.expect(&token::CloseDelim(token::Bracket))?;\n+\n         Ok(ty)\n     }\n "}, {"sha": "95c31fbaa289ace51be419dcec281f4f5f0f8d77", "filename": "src/test/ui/suggestions/issue-82566-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.rs?ref=992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "previous_filename": "src/test/ui/suggestions/issue-82566.rs"}, {"sha": "5a9099a894c8fb4387a88834bc92d4bc4c928871", "filename": "src/test/ui/suggestions/issue-82566-1.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr?ref=992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "patch": "@@ -1,5 +1,5 @@\n error: comparison operators cannot be chained\n-  --> $DIR/issue-82566.rs:18:7\n+  --> $DIR/issue-82566-1.rs:18:7\n    |\n LL |     T1<1>::C;\n    |       ^ ^\n@@ -10,7 +10,7 @@ LL |     T1::<1>::C;\n    |       ^^\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n-  --> $DIR/issue-82566.rs:19:9\n+  --> $DIR/issue-82566-1.rs:19:9\n    |\n LL |     T2<1, 2>::C;\n    |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n@@ -21,7 +21,7 @@ LL |     T2::<1, 2>::C;\n    |       ^^\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n-  --> $DIR/issue-82566.rs:20:9\n+  --> $DIR/issue-82566-1.rs:20:9\n    |\n LL |     T3<1, 2, 3>::C;\n    |         ^ expected one of `.`, `;`, `?`, `}`, or an operator", "previous_filename": "src/test/ui/suggestions/issue-82566.stderr"}, {"sha": "80c8034bd0adff49f2c8dc483b439d9a58a14525", "filename": "src/test/ui/suggestions/issue-82566-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.rs?ref=992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "patch": "@@ -0,0 +1,31 @@\n+struct Foo1<const N1: usize>;\n+struct Foo2<const N1: usize, const N2: usize>;\n+struct Foo3<const N1: usize, const N2: usize, const N3: usize>;\n+\n+impl<const N1: usize> Foo1<N1> {\n+    const SUM: usize = N1;\n+}\n+\n+impl<const N1: usize, const N2: usize> Foo2<N1, N2> {\n+    const SUM: usize = N1 + N2;\n+}\n+\n+impl<const N1: usize, const N2: usize, const N3: usize> Foo3<N1, N2, N3> {\n+    const SUM: usize = N1 + N2 + N3;\n+}\n+\n+fn foo1() -> [(); Foo1<10>::SUM] { //~ ERROR: comparison operators cannot be chained\n+    todo!()\n+}\n+\n+fn foo2() -> [(); Foo2<10, 20>::SUM] {\n+    //~^ ERROR: expected one of `.`, `?`, `]`, or an operator, found `,`\n+    todo!()\n+}\n+\n+fn foo3() -> [(); Foo3<10, 20, 30>::SUM] {\n+    //~^ ERROR: expected one of `.`, `?`, `]`, or an operator, found `,`\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "ea391ee078c8154c7440acbea7680dcf03589f25", "filename": "src/test/ui/suggestions/issue-82566-2.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/992b914b6bf41aae4212ea4e8ee09f8b16a31f28/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr?ref=992b914b6bf41aae4212ea4e8ee09f8b16a31f28", "patch": "@@ -0,0 +1,35 @@\n+error: comparison operators cannot be chained\n+  --> $DIR/issue-82566-2.rs:17:23\n+   |\n+LL | fn foo1() -> [(); Foo1<10>::SUM] {\n+   |                       ^  ^\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL | fn foo1() -> [(); Foo1::<10>::SUM] {\n+   |                       ^^\n+\n+error: expected one of `.`, `?`, `]`, or an operator, found `,`\n+  --> $DIR/issue-82566-2.rs:21:26\n+   |\n+LL | fn foo2() -> [(); Foo2<10, 20>::SUM] {\n+   |                          ^ expected one of `.`, `?`, `]`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL | fn foo2() -> [(); Foo2::<10, 20>::SUM] {\n+   |                       ^^\n+\n+error: expected one of `.`, `?`, `]`, or an operator, found `,`\n+  --> $DIR/issue-82566-2.rs:26:26\n+   |\n+LL | fn foo3() -> [(); Foo3<10, 20, 30>::SUM] {\n+   |                          ^ expected one of `.`, `?`, `]`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL | fn foo3() -> [(); Foo3::<10, 20, 30>::SUM] {\n+   |                       ^^\n+\n+error: aborting due to 3 previous errors\n+"}]}