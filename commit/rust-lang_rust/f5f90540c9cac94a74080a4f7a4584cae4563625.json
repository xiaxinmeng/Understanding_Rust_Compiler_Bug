{"sha": "f5f90540c9cac94a74080a4f7a4584cae4563625", "node_id": "C_kwDOAAsO6NoAKGY1ZjkwNTQwYzljYWM5NGE3NDA4MGE0ZjdhNDU4NGNhZTQ1NjM2MjU", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-14T17:37:04Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-15T21:32:16Z"}, "message": "Fully serialize AdtDef\n\nThis avoids needing to invoke the `adt_def` query during\nthe decoding of another query's result.", "tree": {"sha": "55ce81f19c676981fa9ed3b38238b69da4037ed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ce81f19c676981fa9ed3b38238b69da4037ed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f90540c9cac94a74080a4f7a4584cae4563625", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmG6XuEACgkQtAh+UQ6Y\nsWRw6Q/3fJlh/JEIDWQBeS+9B6OVtO1EN2k449halgegGUBwROvZDfp2Jnd+7o1y\nnNr6RXw0P0zD8b1KTpIEftSepXM8Wt24Ue8UGk4xwuwgmrWR3UmXR77GfvL6hWYB\n6Y1+9Fg4+xnr/X6Ra2KGJ9RscOJVIC5/0C6iC33YR27D9pdO75/jxfu9F4w3fF75\nZBtlYGb/8VIVJngiKmaMmIrQhxLPebQg4P78Z7WBKWLf6W0PwEslY6pxh2Uf5AwV\nAj6UzJ5xj/IIUhBYd9WbzX79deHQ+AExPSTReuoTpGka5otumuTBVWTbQR5Vxt8U\nxcBMaF8kYxy0nTj5nc7Z6zHwABVY3zWTmn/2vyBOHuYuUHY508J4/h6XNnOi8i/M\noHR2+x1LJvG+EB2zl50AifR4i531w4IZ0n9BYBD9kXXECdDma+/i+Sp/YVqxTvd2\n1ASn28T6FFLfxniOHqCHjWnbvK0wZ5JmxcXSqOVg56Ontb68DM5jmWCX1VbgYvgd\nsK7JxvvQWmENtkAL0qtHI9GajBuwHQMWIpqcsSIpr6l2MlvBh2RHrh4LIS8isn1C\n5tF6gybWccrreoEGloFe04chS201syn2Ui2Htldvtu/aXivkN7MIF6iMNXfuto2n\nnHqOIMTANEzew1+tx7PY55gTGopHFl6MQxLeQSB1bvdqzvsCfg==\n=2yhg\n-----END PGP SIGNATURE-----", "payload": "tree 55ce81f19c676981fa9ed3b38238b69da4037ed6\nparent c5ecc157043ba413568b09292001a4a74b541a4e\nauthor Aaron Hill <aa1ronham@gmail.com> 1639503424 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1639603936 -0500\n\nFully serialize AdtDef\n\nThis avoids needing to invoke the `adt_def` query during\nthe decoding of another query's result.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f90540c9cac94a74080a4f7a4584cae4563625", "html_url": "https://github.com/rust-lang/rust/commit/f5f90540c9cac94a74080a4f7a4584cae4563625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f90540c9cac94a74080a4f7a4584cae4563625/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ecc157043ba413568b09292001a4a74b541a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ecc157043ba413568b09292001a4a74b541a4e", "html_url": "https://github.com/rust-lang/rust/commit/c5ecc157043ba413568b09292001a4a74b541a4e"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "a936852f4e7af96787ff9d89a863dd1b3cd59223", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=f5f90540c9cac94a74080a4f7a4584cae4563625", "patch": "@@ -9,7 +9,7 @@ macro_rules! arena_types {\n             [] layout: rustc_target::abi::Layout,\n             [] fn_abi: rustc_target::abi::call::FnAbi<'tcx, rustc_middle::ty::Ty<'tcx>>,\n             // AdtDef are interned and compared by address\n-            [] adt_def: rustc_middle::ty::AdtDef,\n+            [decode] adt_def: rustc_middle::ty::AdtDef,\n             [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<'tcx>>,\n             [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<'tcx>>,\n             [decode] mir: rustc_middle::mir::Body<'tcx>,"}, {"sha": "5cde54c9328d16295b29259ce1c0c9b0d7cdd10d", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=f5f90540c9cac94a74080a4f7a4584cae4563625", "patch": "@@ -11,7 +11,6 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_serialize::{self, Encodable, Encoder};\n use rustc_session::DataTypeKind;\n use rustc_span::symbol::sym;\n use rustc_target::abi::VariantIdx;\n@@ -20,7 +19,7 @@ use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::hash::{Hash, Hasher};\n use std::ops::Range;\n-use std::{ptr, str};\n+use std::str;\n \n use super::{\n     Destructor, FieldDef, GenericPredicates, ReprOptions, Ty, TyCtxt, VariantDef, VariantDiscr,\n@@ -30,7 +29,7 @@ use super::{\n pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n \n bitflags! {\n-    #[derive(HashStable)]\n+    #[derive(HashStable, TyEncodable, TyDecodable)]\n     pub struct AdtFlags: u32 {\n         const NO_ADT_FLAGS        = 0;\n         /// Indicates whether the ADT is an enum.\n@@ -88,6 +87,7 @@ bitflags! {\n ///\n /// where `x` here represents the `DefId` of `S.x`. Then, the `DefId`\n /// can be used with [`TyCtxt::type_of()`] to get the type of the field.\n+#[derive(TyEncodable, TyDecodable)]\n pub struct AdtDef {\n     /// The `DefId` of the struct, enum or union item.\n     pub did: DefId,\n@@ -113,26 +113,23 @@ impl Ord for AdtDef {\n     }\n }\n \n+/// There should be only one AdtDef for each `did`, therefore\n+/// it is fine to implement `PartialEq` only based on `did`.\n impl PartialEq for AdtDef {\n-    // `AdtDef`s are always interned, and this is part of `TyS` equality.\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n-        ptr::eq(self, other)\n+        self.did == other.did\n     }\n }\n \n impl Eq for AdtDef {}\n \n+/// There should be only one AdtDef for each `did`, therefore\n+/// it is fine to implement `Hash` only based on `did`.\n impl Hash for AdtDef {\n     #[inline]\n     fn hash<H: Hasher>(&self, s: &mut H) {\n-        (self as *const AdtDef).hash(s)\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for AdtDef {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        self.did.encode(s)\n+        self.did.hash(s)\n     }\n }\n \n@@ -161,7 +158,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for AdtDef {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, TyEncodable, TyDecodable)]\n pub enum AdtKind {\n     Struct,\n     Union,"}, {"sha": "2032f32ed8c2b6f5ab34c15c9260334bbdfd9364", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=f5f90540c9cac94a74080a4f7a4584cae4563625", "patch": "@@ -16,7 +16,6 @@ use crate::thir;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, List, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::DefId;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::Span;\n use std::hash::Hash;\n@@ -308,13 +307,6 @@ macro_rules! impl_decodable_via_ref {\n     }\n }\n \n-impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::AdtDef {\n-    fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n-        let def_id = <DefId as Decodable<D>>::decode(decoder)?;\n-        Ok(decoder.tcx().adt_def(def_id))\n-    }\n-}\n-\n impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;"}, {"sha": "119120b57bec2b9c8cd47a4f94a1399077092532", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f5f90540c9cac94a74080a4f7a4584cae4563625", "patch": "@@ -112,6 +112,7 @@ pub struct CtxtInterners<'tcx> {\n     const_allocation: InternedSet<'tcx, Allocation>,\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, Layout>,\n+    adt_def: InternedSet<'tcx, AdtDef>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -132,6 +133,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             const_allocation: Default::default(),\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n+            adt_def: Default::default(),\n         }\n     }\n \n@@ -1078,7 +1080,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         variants: IndexVec<VariantIdx, ty::VariantDef>,\n         repr: ReprOptions,\n     ) -> &'tcx ty::AdtDef {\n-        self.arena.alloc(ty::AdtDef::new(self, did, kind, variants, repr))\n+        self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))\n     }\n \n     /// Allocates a read-only byte or string literal for `mir::interpret`.\n@@ -2057,6 +2059,7 @@ direct_interners! {\n     const_: mk_const(Const<'tcx>),\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),\n+    adt_def: intern_adt_def(AdtDef),\n }\n \n macro_rules! slice_interners {"}, {"sha": "642ec51413058730d7344b987fe1052b4721cc0d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f90540c9cac94a74080a4f7a4584cae4563625/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f5f90540c9cac94a74080a4f7a4584cae4563625", "patch": "@@ -1472,7 +1472,7 @@ pub struct Destructor {\n }\n \n bitflags! {\n-    #[derive(HashStable)]\n+    #[derive(HashStable, TyEncodable, TyDecodable)]\n     pub struct VariantFlags: u32 {\n         const NO_VARIANT_FLAGS        = 0;\n         /// Indicates whether the field list of this variant is `#[non_exhaustive]`.\n@@ -1484,7 +1484,7 @@ bitflags! {\n }\n \n /// Definition of a variant -- a struct's fields or an enum variant.\n-#[derive(Debug, HashStable)]\n+#[derive(Debug, HashStable, TyEncodable, TyDecodable)]\n pub struct VariantDef {\n     /// `DefId` that identifies the variant itself.\n     /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.\n@@ -1586,7 +1586,7 @@ pub enum VariantDiscr {\n     Relative(u32),\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Debug, HashStable, TyEncodable, TyDecodable)]\n pub struct FieldDef {\n     pub did: DefId,\n     #[stable_hasher(project(name))]"}]}