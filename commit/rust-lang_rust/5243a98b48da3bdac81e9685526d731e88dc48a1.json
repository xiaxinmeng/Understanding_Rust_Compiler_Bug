{"sha": "5243a98b48da3bdac81e9685526d731e88dc48a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNDNhOThiNDhkYTNiZGFjODFlOTY4NTUyNmQ3MzFlODhkYzQ4YTE=", "commit": {"author": {"name": "Bryan Tan", "email": "techniux@gmail.com", "date": "2017-10-14T06:38:55Z"}, "committer": {"name": "Bryan Tan", "email": "techniux@gmail.com", "date": "2017-10-15T02:19:19Z"}, "message": "Add a brief description and two examples to std::process", "tree": {"sha": "8ba902e4c32796357a64e167c26c285b6883b261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ba902e4c32796357a64e167c26c285b6883b261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5243a98b48da3bdac81e9685526d731e88dc48a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5243a98b48da3bdac81e9685526d731e88dc48a1", "html_url": "https://github.com/rust-lang/rust/commit/5243a98b48da3bdac81e9685526d731e88dc48a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5243a98b48da3bdac81e9685526d731e88dc48a1/comments", "author": {"login": "Technius", "id": 1066652, "node_id": "MDQ6VXNlcjEwNjY2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1066652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Technius", "html_url": "https://github.com/Technius", "followers_url": "https://api.github.com/users/Technius/followers", "following_url": "https://api.github.com/users/Technius/following{/other_user}", "gists_url": "https://api.github.com/users/Technius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Technius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Technius/subscriptions", "organizations_url": "https://api.github.com/users/Technius/orgs", "repos_url": "https://api.github.com/users/Technius/repos", "events_url": "https://api.github.com/users/Technius/events{/privacy}", "received_events_url": "https://api.github.com/users/Technius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Technius", "id": 1066652, "node_id": "MDQ6VXNlcjEwNjY2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1066652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Technius", "html_url": "https://github.com/Technius", "followers_url": "https://api.github.com/users/Technius/followers", "following_url": "https://api.github.com/users/Technius/following{/other_user}", "gists_url": "https://api.github.com/users/Technius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Technius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Technius/subscriptions", "organizations_url": "https://api.github.com/users/Technius/orgs", "repos_url": "https://api.github.com/users/Technius/repos", "events_url": "https://api.github.com/users/Technius/events{/privacy}", "received_events_url": "https://api.github.com/users/Technius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7778906bee9e8e93792353824548044a758b72f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7778906bee9e8e93792353824548044a758b72f4", "html_url": "https://github.com/rust-lang/rust/commit/7778906bee9e8e93792353824548044a758b72f4"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "d3e60e3dff9d8093255d36bbb0e495b3c3106418", "filename": "src/libstd/process.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5243a98b48da3bdac81e9685526d731e88dc48a1/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5243a98b48da3bdac81e9685526d731e88dc48a1/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=5243a98b48da3bdac81e9685526d731e88dc48a1", "patch": "@@ -10,24 +10,57 @@\n \n //! A module for working with processes.\n //!\n+//! This module provides a [`Command`] struct that can be used to configure and\n+//! spawn a process, as well as a [`Child`] struct that represents a running or\n+//! terminated process.\n+//!\n //! # Examples\n //!\n-//! Basic usage where we try to execute the `cat` shell command:\n+//! Hello world, `std::process` edition:\n //!\n-//! ```should_panic\n-//! use std::process::Command;\n+//! ```\n+//! use std::process:Command;\n //!\n-//! let mut child = Command::new(\"/bin/cat\")\n-//!                         .arg(\"file.txt\")\n+//! // Note that by default, the output of the command will be sent to stdout\n+//! let child = Command::new(\"echo\")\n+//!                         .arg(\"Hello world\")\n //!                         .spawn()\n-//!                         .expect(\"failed to execute child\");\n+//!                         .expect(\"Failed to start process\");\n //!\n //! let ecode = child.wait()\n-//!                  .expect(\"failed to wait on child\");\n+//!                  .expect(\"Failed to wait on child\");\n //!\n //! assert!(ecode.success());\n //! ```\n //!\n+//! Piping output from one command into another command:\n+//!\n+//! ```\n+//! use std::process::{Command, Stdio};\n+//!\n+//! // stdout must be configured with `Stdio::piped` in order to use\n+//! // `echo_child.stdout`\n+//! let echo_child = Command::new(\"echo\")\n+//!     .arg(\"Oh no, a tpyo!\")\n+//!     .stdout(Stdio::piped())\n+//!     .spawn()\n+//!     .expect(\"Failed to start echo process\");\n+//!\n+//! // Note that `echo_child` is moved here, but we won't be needing\n+//! // `echo_child` anymore\n+//! let echo_out = echo_child.stdout.expect(\"Failed to open echo stdout\");\n+//!\n+//! let mut sed_child = Command::new(\"sed\")\n+//!     .arg(\"s/tpyo/typo/\")\n+//!     .stdin(Stdio::from(echo_out))\n+//!     .stdout(Stdio::piped())\n+//!     .spawn()\n+//!     .expect(\"Failed to start sed process\");\n+//!\n+//! let output = sed_child.wait_with_output().expect(\"Failed to wait on sed\");\n+//! assert_eq!(b\"Oh no, a typo!\\n\", output.stdout.as_slice());\n+//! ```\n+//!\n //! Calling a command with input and reading its output:\n //!\n //! ```no_run\n@@ -52,6 +85,9 @@\n //!\n //! assert_eq!(b\"test\", output.stdout.as_slice());\n //! ```\n+//!\n+//! [`Command`]: struct.Command.html\n+//! [`Child`]: struct.Child.html\n \n #![stable(feature = \"process\", since = \"1.0.0\")]\n "}]}