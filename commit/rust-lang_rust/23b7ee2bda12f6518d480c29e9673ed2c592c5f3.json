{"sha": "23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjdlZTJiZGExMmY2NTE4ZDQ4MGMyOWU5NjczZWQyYzU5MmM1ZjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-18T02:14:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-22T21:16:52Z"}, "message": "std: Remove unstable::global. Unused", "tree": {"sha": "f0903ad2ec7d0da1ea84e5d4e22574421d4d93dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0903ad2ec7d0da1ea84e5d4e22574421d4d93dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "html_url": "https://github.com/rust-lang/rust/commit/23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6174f9a4d9dc48f9988cd252f4fea8b319020298", "url": "https://api.github.com/repos/rust-lang/rust/commits/6174f9a4d9dc48f9988cd252f4fea8b319020298", "html_url": "https://github.com/rust-lang/rust/commit/6174f9a4d9dc48f9988cd252f4fea8b319020298"}], "stats": {"total": 293, "additions": 1, "deletions": 292}, "files": [{"sha": "af28879f73971c9a2fbed1ce880e361b4b142f6e", "filename": "src/libstd/unstable/global.rs", "status": "removed", "additions": 0, "deletions": 281, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/6174f9a4d9dc48f9988cd252f4fea8b319020298/src%2Flibstd%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6174f9a4d9dc48f9988cd252f4fea8b319020298/src%2Flibstd%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fglobal.rs?ref=6174f9a4d9dc48f9988cd252f4fea8b319020298", "patch": "@@ -1,281 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-Global data\n-\n-An interface for creating and retrieving values with global\n-(per-runtime) scope.\n-\n-Global values are stored in a map and protected by a single global\n-mutex. Operations are provided for accessing and cloning the value\n-under the mutex.\n-\n-Because all globals go through a single mutex, they should be used\n-sparingly.  The interface is intended to be used with clonable,\n-atomically reference counted synchronization types, like ARCs, in\n-which case the value should be cached locally whenever possible to\n-avoid hitting the mutex.\n-*/\n-\n-use cast::{transmute};\n-use clone::Clone;\n-use kinds::Send;\n-use libc::{c_void, intptr_t};\n-use option::{Option, Some, None};\n-use ops::Drop;\n-use unstable::sync::{Exclusive, exclusive};\n-use unstable::at_exit::at_exit;\n-use unstable::intrinsics::atomic_cxchg;\n-use hashmap::HashMap;\n-use sys::Closure;\n-\n-#[cfg(test)] use unstable::sync::{UnsafeAtomicRcBox};\n-#[cfg(test)] use task::spawn;\n-#[cfg(test)] use uint;\n-\n-pub type GlobalDataKey<'self,T> = &'self fn(v: T);\n-\n-pub unsafe fn global_data_clone_create<T:Send + Clone>(\n-    key: GlobalDataKey<T>, create: &fn() -> ~T) -> T {\n-    /*!\n-     * Clone a global value or, if it has not been created,\n-     * first construct the value then return a clone.\n-     *\n-     * # Safety note\n-     *\n-     * Both the clone operation and the constructor are\n-     * called while the global lock is held. Recursive\n-     * use of the global interface in either of these\n-     * operations will result in deadlock.\n-     */\n-    global_data_clone_create_(key_ptr(key), create)\n-}\n-\n-unsafe fn global_data_clone_create_<T:Send + Clone>(\n-    key: uint, create: &fn() -> ~T) -> T {\n-\n-    let mut clone_value: Option<T> = None;\n-    do global_data_modify_(key) |value: Option<~T>| {\n-        match value {\n-            None => {\n-                let value = create();\n-                clone_value = Some((*value).clone());\n-                Some(value)\n-            }\n-            Some(value) => {\n-                clone_value = Some((*value).clone());\n-                Some(value)\n-            }\n-        }\n-    }\n-    return clone_value.unwrap();\n-}\n-\n-unsafe fn global_data_modify<T:Send>(\n-    key: GlobalDataKey<T>, op: &fn(Option<~T>) -> Option<~T>) {\n-\n-    global_data_modify_(key_ptr(key), op)\n-}\n-\n-unsafe fn global_data_modify_<T:Send>(\n-    key: uint, op: &fn(Option<~T>) -> Option<~T>) {\n-\n-    let mut old_dtor = None;\n-    do get_global_state().with |gs| {\n-        let (maybe_new_value, maybe_dtor) = match gs.map.pop(&key) {\n-            Some((ptr, dtor)) => {\n-                let value: ~T = transmute(ptr);\n-                (op(Some(value)), Some(dtor))\n-            }\n-            None => {\n-                (op(None), None)\n-            }\n-        };\n-        match maybe_new_value {\n-            Some(value) => {\n-                let data: *c_void = transmute(value);\n-                let dtor: ~fn() = match maybe_dtor {\n-                    Some(dtor) => dtor,\n-                    None => {\n-                        let dtor: ~fn() = || {\n-                            let _destroy_value: ~T = transmute(data);\n-                        };\n-                        dtor\n-                    }\n-                };\n-                let value = (data, dtor);\n-                gs.map.insert(key, value);\n-            }\n-            None => {\n-                match maybe_dtor {\n-                    Some(dtor) => old_dtor = Some(dtor),\n-                    None => ()\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-pub unsafe fn global_data_clone<T:Send + Clone>(\n-    key: GlobalDataKey<T>) -> Option<T> {\n-    let mut maybe_clone: Option<T> = None;\n-    do global_data_modify(key) |current| {\n-        match &current {\n-            &Some(~ref value) => {\n-                maybe_clone = Some(value.clone());\n-            }\n-            &None => ()\n-        }\n-        current\n-    }\n-    return maybe_clone;\n-}\n-\n-// GlobalState is a map from keys to unique pointers and a\n-// destructor. Keys are pointers derived from the type of the\n-// global value.  There is a single GlobalState instance per runtime.\n-struct GlobalState {\n-    map: HashMap<uint, (*c_void, ~fn())>\n-}\n-\n-impl Drop for GlobalState {\n-    fn drop(&self) {\n-        for self.map.each_value |v| {\n-            match v {\n-                &(_, ref dtor) => (*dtor)()\n-            }\n-        }\n-    }\n-}\n-\n-fn get_global_state() -> Exclusive<GlobalState> {\n-\n-    static POISON: int = -1;\n-\n-    // FIXME #4728: Doing atomic_cxchg to initialize the global state\n-    // lazily, which wouldn't be necessary with a runtime written\n-    // in Rust\n-    let global_ptr = unsafe { rust_get_global_data_ptr() };\n-\n-    if unsafe { *global_ptr } == 0 {\n-        // Global state doesn't exist yet, probably\n-\n-        // The global state object\n-        let state = GlobalState {\n-            map: HashMap::new()\n-        };\n-\n-        // It's under a reference-counted mutex\n-        let state = ~exclusive(state);\n-\n-        // Convert it to an integer\n-        let state_i: int = unsafe {\n-            let state_ptr: &Exclusive<GlobalState> = state;\n-            transmute(state_ptr)\n-        };\n-\n-        // Swap our structure into the global pointer\n-        let prev_i = unsafe { atomic_cxchg(&mut *global_ptr, 0, state_i) };\n-\n-        // Sanity check that we're not trying to reinitialize after shutdown\n-        assert!(prev_i != POISON);\n-\n-        if prev_i == 0 {\n-            // Successfully installed the global pointer\n-\n-            // Take a handle to return\n-            let clone = (*state).clone();\n-\n-            // Install a runtime exit function to destroy the global object\n-            do at_exit {\n-                // Poison the global pointer\n-                let prev_i = unsafe {\n-                    atomic_cxchg(&mut *global_ptr, state_i, POISON)\n-                };\n-                assert_eq!(prev_i, state_i);\n-\n-                // Capture the global state object in the at_exit closure\n-                // so that it is destroyed at the right time\n-                let _capture_global_state = &state;\n-            };\n-            return clone;\n-        } else {\n-            // Somebody else initialized the globals first\n-            let state: &Exclusive<GlobalState> = unsafe { transmute(prev_i) };\n-            return state.clone();\n-        }\n-    } else {\n-        let state: &Exclusive<GlobalState> = unsafe {\n-            transmute(*global_ptr)\n-        };\n-        return state.clone();\n-    }\n-}\n-\n-fn key_ptr<T:Send>(key: GlobalDataKey<T>) -> uint {\n-    unsafe {\n-        let closure: Closure = transmute(key);\n-        return transmute(closure.code);\n-    }\n-}\n-\n-extern {\n-    fn rust_get_global_data_ptr() -> *mut intptr_t;\n-}\n-\n-#[test]\n-fn test_clone_rc() {\n-    fn key(_v: UnsafeAtomicRcBox<int>) { }\n-\n-    for uint::range(0, 100) |_| {\n-        do spawn {\n-            unsafe {\n-                let val = do global_data_clone_create(key) {\n-                    ~UnsafeAtomicRcBox::new(10)\n-                };\n-\n-                assert!(val.get() == &10);\n-            }\n-        }\n-    }\n-}\n-\n-#[test]\n-fn test_modify() {\n-    fn key(_v: UnsafeAtomicRcBox<int>) { }\n-\n-    unsafe {\n-        do global_data_modify(key) |v| {\n-            match v {\n-                None => { Some(~UnsafeAtomicRcBox::new(10)) }\n-                _ => fail!()\n-            }\n-        }\n-\n-        do global_data_modify(key) |v| {\n-            match v {\n-                Some(sms) => {\n-                    let v = sms.get();\n-                    assert!(*v == 10);\n-                    None\n-                },\n-                _ => fail!()\n-            }\n-        }\n-\n-        do global_data_modify(key) |v| {\n-            match v {\n-                None => { Some(~UnsafeAtomicRcBox::new(10)) }\n-                _ => fail!()\n-            }\n-        }\n-    }\n-}"}, {"sha": "3c1da46cf020d241cee9ba744a841c7bd1bbe6eb", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "patch": "@@ -20,7 +20,6 @@ pub mod at_exit;\n \n pub mod dynamic_lib;\n \n-pub mod global;\n pub mod finally;\n pub mod intrinsics;\n pub mod simd;"}, {"sha": "860f20e73084d2caef3170337adb312aa8639fce", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "patch": "@@ -763,12 +763,6 @@ rust_register_exit_function(spawn_fn runner, fn_env_pair *f) {\n     task->kernel->register_exit_function(runner, f);\n }\n \n-extern \"C\" intptr_t*\n-rust_get_global_data_ptr() {\n-    rust_task *task = rust_get_current_task();\n-    return &task->kernel->global_data;\n-}\n-\n #ifndef _WIN32\n #include <sys/types.h>\n #include <dirent.h>"}, {"sha": "20ac5384a3c7e17639a03b1a6e03fc56306e6f56", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "patch": "@@ -33,8 +33,7 @@ rust_kernel::rust_kernel(rust_env *env) :\n     non_weak_tasks(0),\n     at_exit_runner(NULL),\n     at_exit_started(false),\n-    env(env),\n-    global_data(0)\n+    env(env)\n {\n     // Create the single threaded scheduler that will run on the platform's\n     // main thread"}, {"sha": "91f49662f46f07101e4fe6846d3b812aa179c33b", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "patch": "@@ -124,7 +124,6 @@ class rust_kernel {\n \n public:\n     struct rust_env *env;\n-    intptr_t global_data;\n \n     rust_kernel(rust_env *env);\n "}, {"sha": "c07868aede1478fd02180b06212f9d05f009f818", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "patch": "@@ -215,7 +215,6 @@ linenoiseHistoryLoad\n rust_raw_thread_start\n rust_raw_thread_join_delete\n rust_register_exit_function\n-rust_get_global_data_ptr\n rust_get_rt_tls_key\n swap_registers\n rust_readdir"}]}