{"sha": "a805a1fb37443601819604954510cb312a724fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MDVhMWZiMzc0NDM2MDE4MTk2MDQ5NTQ1MTBjYjMxMmE3MjRmZTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T20:58:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T22:02:53Z"}, "message": "rustc: Add the notion of inherited visibility", "tree": {"sha": "ea0c58d28b930856c147829de8ed8590ad2a7cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea0c58d28b930856c147829de8ed8590ad2a7cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a805a1fb37443601819604954510cb312a724fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a805a1fb37443601819604954510cb312a724fe9", "html_url": "https://github.com/rust-lang/rust/commit/a805a1fb37443601819604954510cb312a724fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a805a1fb37443601819604954510cb312a724fe9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c623c4474f439c0bb85b7f91ae663d9584e7973", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c623c4474f439c0bb85b7f91ae663d9584e7973", "html_url": "https://github.com/rust-lang/rust/commit/0c623c4474f439c0bb85b7f91ae663d9584e7973"}], "stats": {"total": 148, "additions": 83, "deletions": 65}, "files": [{"sha": "1b60cb6c47bbe304e55a91f6456f42f726a27474", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -700,7 +700,7 @@ type attribute_ = {style: attr_style, value: meta_item, is_sugared_doc: bool};\n type trait_ref = {path: @path, ref_id: node_id, impl_id: node_id};\n \n #[auto_serialize]\n-enum visibility { public, private }\n+enum visibility { public, private, inherited }\n \n #[auto_serialize]\n type item = {ident: ident, attrs: ~[attribute],"}, {"sha": "375ee81faa9d6259665dee6bed99362e8a9bef82", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -437,7 +437,6 @@ impl parse_utils of ext_ctxt_parse_utils for ext_ctxt {\n             @(copy s),\n             self.cfg(),\n             ~[],\n-            ast::public,\n             self.parse_sess());\n         alt res {\n           some(ast) { ast }"}, {"sha": "87ecf93aa3cbaac60397e9e711a3d6b06f71f196", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -183,7 +183,7 @@ fn parse_expr(p: parser) -> @ast::expr { p.parse_expr() }\n fn parse_pat(p: parser) -> @ast::pat { p.parse_pat(true) }\n \n fn parse_item(p: parser) -> @ast::item {\n-    alt p.parse_item(~[], ast::public) {\n+    alt p.parse_item(~[]) {\n       some(item) { item }\n       none       { fail ~\"parse_item: parsing an item failed\"; }\n     }"}, {"sha": "dd29ce04eeb17402f1906b7c5af696cc3dc5d837", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -320,7 +320,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n \n fn parse_nt(p: parser, name: ~str) -> nonterminal {\n     alt name {\n-      ~\"item\" { alt p.parse_item(~[], ast::public) {\n+      ~\"item\" { alt p.parse_item(~[]) {\n         some(i) { token::nt_item(i) }\n         none { p.fatal(~\"expected an item keyword\") }\n       }}"}, {"sha": "05c1317fcde5fb525a5e5084699534bb0f8f57b5", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -120,11 +120,10 @@ fn parse_expr_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n \n fn parse_item_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                               +attrs: ~[ast::attribute],\n-                              vis: ast::visibility,\n                               sess: parse_sess) -> option<@ast::item> {\n     let (p, rdr) = new_parser_etc_from_source_str(sess, cfg, name,\n                                                   codemap::fss_none, source);\n-    let r = p.parse_item(attrs, vis);\n+    let r = p.parse_item(attrs);\n     sess.chpos = rdr.chpos;\n     sess.byte_pos = sess.byte_pos + rdr.pos;\n     return r;"}, {"sha": "417d973ee0d6fbc7dba05d56088bd20825492d29", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 61, "deletions": 45, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -31,25 +31,25 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              expr_rec, expr_ret, expr_swap, expr_struct, expr_tup, expr_unary,\n              expr_unary_move, expr_vec, expr_vstore, expr_while, extern_fn,\n              field, fn_decl, foreign_item, foreign_item_fn, foreign_mod,\n-             ident, impure_fn, infer, init_assign, init_move, initializer,\n-             instance_var, item, item_, item_class, item_const, item_enum,\n-             item_fn, item_foreign_mod, item_impl, item_mac, item_mod,\n-             item_trait, item_ty, lit, lit_, lit_bool, lit_float, lit_int,\n-             lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const,\n-             m_imm, m_mutbl, mac_, mac_aq, mac_ellipsis,\n-             mac_invoc, mac_invoc_tt, mac_var, matcher, match_nonterminal,\n-             match_seq, match_tok, method, mode, mt, mul, mutability, neg,\n-             noreturn, not, pat, pat_box, pat_enum, pat_ident, pat_lit,\n-             pat_range, pat_rec, pat_tup, pat_uniq, pat_wild, path, private,\n-             proto, proto_any, proto_bare, proto_block, proto_box, proto_uniq,\n-             provided, public, pure_fn, purity, re_anon, re_named, region,\n-             rem, required, ret_style, return_val, self_ty, shl, shr, stmt,\n-             stmt_decl, stmt_expr, stmt_semi, subtract, sty_box, sty_by_ref,\n-             sty_region, sty_uniq, sty_value, token_tree, trait_method,\n-             trait_ref, tt_delim, tt_seq, tt_tok, tt_nonterminal, ty, ty_,\n-             ty_bot, ty_box, ty_field, ty_fn, ty_infer, ty_mac, ty_method,\n-             ty_nil, ty_param, ty_path, ty_ptr, ty_rec, ty_rptr, ty_tup,\n-             ty_u32, ty_uniq, ty_vec, ty_fixed_length, unchecked_blk, uniq,\n+             ident, impure_fn, infer, inherited, init_assign, init_move,\n+             initializer, instance_var, item, item_, item_class, item_const,\n+             item_enum, item_fn, item_foreign_mod, item_impl, item_mac,\n+             item_mod, item_trait, item_ty, lit, lit_, lit_bool, lit_float,\n+             lit_int, lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local,\n+             m_const, m_imm, m_mutbl, mac_, mac_aq, mac_ellipsis, mac_invoc,\n+             mac_invoc_tt, mac_var, matcher, match_nonterminal, match_seq,\n+             match_tok, method, mode, mt, mul, mutability, neg, noreturn, not,\n+             pat, pat_box, pat_enum, pat_ident, pat_lit, pat_range, pat_rec,\n+             pat_tup, pat_uniq, pat_wild, path, private, proto, proto_any,\n+             proto_bare, proto_block, proto_box, proto_uniq, provided, public,\n+             pure_fn, purity, re_anon, re_named, region, rem, required,\n+             ret_style, return_val, self_ty, shl, shr, stmt, stmt_decl,\n+             stmt_expr, stmt_semi, subtract, sty_box, sty_by_ref, sty_region,\n+             sty_uniq, sty_value, token_tree, trait_method, trait_ref,\n+             tt_delim, tt_seq, tt_tok, tt_nonterminal, ty, ty_, ty_bot,\n+             ty_box, ty_field, ty_fn, ty_infer, ty_mac, ty_method, ty_nil,\n+             ty_param, ty_path, ty_ptr, ty_rec, ty_rptr, ty_tup, ty_u32,\n+             ty_uniq, ty_vec, ty_fixed_length, unchecked_blk, uniq,\n              unsafe_blk, unsafe_fn, variant, view_item, view_item_,\n              view_item_export, view_item_import, view_item_use, view_path,\n              view_path_glob, view_path_list, view_path_simple, visibility,\n@@ -273,7 +273,7 @@ class parser {\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n-            let vis = p.parse_visibility(public);\n+            let vis = p.parse_visibility();\n             let ident = p.parse_method_name();\n             let tps = p.parse_ty_params();\n             let d = p.parse_ty_fn_decl(pur);\n@@ -1873,7 +1873,7 @@ class parser {\n \n             let item_attrs = vec::append(first_item_attrs, item_attrs);\n \n-            alt self.parse_item(item_attrs, public) {\n+            alt self.parse_item(item_attrs) {\n               some(i) {\n                 let mut hi = i.span.hi;\n                 let decl = @spanned(lo, hi, decl_item(i));\n@@ -2459,8 +2459,7 @@ class parser {\n         }\n     }\n \n-    fn parse_single_class_item(vis: visibility)\n-        -> @class_member {\n+    fn parse_single_class_item(vis: visibility) -> @class_member {\n         if (self.eat_keyword(~\"let\") ||\n                 self.token_is_keyword(~\"mut\", copy self.token) ||\n                 !self.is_any_keyword(copy self.token)) &&\n@@ -2491,17 +2490,27 @@ class parser {\n         dtor_decl(body, attrs, mk_sp(lo, self.last_span.hi))\n     }\n \n-    fn parse_class_item(class_name_with_tps: @path)\n-        -> class_contents {\n-\n+    fn parse_class_item(class_name_with_tps: @path) -> class_contents {\n         if self.eat_keyword(~\"priv\") {\n-            self.expect(token::LBRACE);\n-            let mut results = ~[];\n-            while self.token != token::RBRACE {\n-                vec::push(results, self.parse_single_class_item(private));\n+            // XXX: Remove after snapshot.\n+            match self.token {\n+                token::LBRACE => {\n+                    self.bump();\n+                    let mut results = ~[];\n+                    while self.token != token::RBRACE {\n+                        vec::push(results,\n+                                  self.parse_single_class_item(private));\n+                    }\n+                    self.bump();\n+                    return members(results);\n+                }\n+                _ =>\n+                   return members(~[self.parse_single_class_item(private)])\n             }\n-            self.bump();\n-            return members(results);\n+        }\n+\n+        if self.eat_keyword(~\"pub\") {\n+           return members(~[self.parse_single_class_item(public)]);\n         }\n \n         let attrs = self.parse_outer_attributes();\n@@ -2515,14 +2524,14 @@ class parser {\n            return self.parse_dtor(attrs);\n         }\n         else {\n-           return members(~[self.parse_single_class_item(public)]);\n+           return members(~[self.parse_single_class_item(inherited)]);\n         }\n     }\n \n-    fn parse_visibility(def: visibility) -> visibility {\n+    fn parse_visibility() -> visibility {\n         if self.eat_keyword(~\"pub\") { public }\n         else if self.eat_keyword(~\"priv\") { private }\n-        else { def }\n+        else { inherited }\n     }\n \n     fn parse_mod_items(term: token::token,\n@@ -2539,8 +2548,7 @@ class parser {\n                 first = false;\n             }\n             debug!{\"parse_mod_items: parse_item(attrs=%?)\", attrs};\n-            let vis = self.parse_visibility(private);\n-            alt self.parse_item(attrs, vis) {\n+            alt self.parse_item(attrs) {\n               some(i) { vec::push(items, i); }\n               _ {\n                 self.fatal(~\"expected item but found `\" +\n@@ -2661,7 +2669,7 @@ class parser {\n         }\n     }\n \n-    fn parse_item_enum(default_vis: visibility) -> item_info {\n+    fn parse_item_enum() -> item_info {\n         let id = self.parse_ident();\n         self.parse_region_param();\n         let ty_params = self.parse_ty_params();\n@@ -2689,7 +2697,7 @@ class parser {\n         while self.token != token::RBRACE {\n             let variant_attrs = self.parse_outer_attributes();\n             let vlo = self.span.lo;\n-            let vis = self.parse_visibility(default_vis);\n+            let vis = self.parse_visibility();\n             let ident = self.parse_value_ident();\n             let mut args = ~[], disr_expr = none;\n             if self.token == token::LPAREN {\n@@ -2752,11 +2760,19 @@ class parser {\n         }\n     }\n \n-    fn parse_item(+attrs: ~[attribute], vis: visibility)\n-        -> option<@item> {\n-\n+    fn parse_item(+attrs: ~[attribute]) -> option<@item> {\n         maybe_whole!{some self,nt_item};\n         let lo = self.span.lo;\n+\n+        let visibility;\n+        if self.eat_keyword(~\"pub\") {\n+            visibility = public;\n+        } else if self.eat_keyword(~\"priv\") {\n+            visibility = private;\n+        } else {\n+            visibility = inherited;\n+        }\n+\n         let (ident, item_, extra_attrs) = if self.eat_keyword(~\"const\") {\n             self.parse_item_const()\n         } else if self.is_keyword(~\"fn\") &&\n@@ -2782,7 +2798,7 @@ class parser {\n         } else if self.eat_keyword(~\"type\") {\n             self.parse_item_type()\n         } else if self.eat_keyword(~\"enum\") {\n-            self.parse_item_enum(vis)\n+            self.parse_item_enum()\n         } else if self.eat_keyword(~\"iface\") {\n             self.warn(~\"`iface` is deprecated; use `trait`\");\n             self.parse_item_trait()\n@@ -2816,7 +2832,7 @@ class parser {\n                                       expn_info: none}};\n             (id, item_mac(m), none)\n         } else { return none; };\n-        some(self.mk_item(lo, self.last_span.hi, ident, item_, vis,\n+        some(self.mk_item(lo, self.last_span.hi, ident, item_, visibility,\n                           alt extra_attrs {\n                               some(as) { vec::append(attrs, as) }\n                               none { attrs }\n@@ -2917,7 +2933,7 @@ class parser {\n     }\n \n     fn parse_view_item(+attrs: ~[attribute]) -> @view_item {\n-        let lo = self.span.lo, vis = self.parse_visibility(private);\n+        let lo = self.span.lo, vis = self.parse_visibility();\n         let node = if self.eat_keyword(~\"use\") {\n             self.parse_use()\n         } else if self.eat_keyword(~\"import\") {"}, {"sha": "20656c23852ed3b3aa390f9038392bf712f47566", "filename": "src/rustc/front/intrinsic_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic_inject.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -12,7 +12,7 @@ fn inject_intrinsic(sess: session,\n     let item = parse::parse_item_from_source_str(~\"<intrinsic>\",\n                                                  intrinsic_module,\n                                                  sess.opts.cfg,\n-                                                 ~[], ast::public,\n+                                                 ~[],\n                                                  sess.parse_sess);\n     let item =\n         alt item {"}, {"sha": "17a00827f6a2c7476f7f7270067918b865235d77", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -294,7 +294,7 @@ fn item_to_def_like(item: ebml::doc, did: ast::def_id, cnum: ast::crate_num)\n       }\n       'I' { dl_def(ast::def_ty(did)) }\n       'i' { dl_impl(did) }\n-      'g' | 'j' { dl_field }\n+      'g' | 'j' | 'N' => { dl_field }\n       ch { fail fmt!{\"unexpected family code: '%c'\", ch} }\n     }\n }\n@@ -741,14 +741,16 @@ fn get_class_members(cdata: cmd, id: ast::node_id,\n \n pure fn family_to_visibility(family: char) -> ast::visibility {\n     alt family {\n-      'g' { ast::public }\n-      _   { ast::private }\n+      'g' => ast::public,\n+      'j' => ast::private,\n+      'N' => ast::inherited,\n+      _ => fail\n     }\n }\n \n-/* 'g' for public field, 'j' for private field */\n+/* 'g' for public field, 'j' for private field, 'N' for inherited field */\n fn get_class_fields(cdata: cmd, id: ast::node_id) -> ~[ty::field_ty] {\n-    get_class_members(cdata, id, |f| f == 'g' || f == 'j')\n+    get_class_members(cdata, id, |f| f == 'g' || f == 'j' || f == 'N')\n }\n \n fn family_has_type_params(fam_ch: char) -> bool {\n@@ -802,6 +804,7 @@ fn item_family_to_str(fam: char) -> ~str {\n       'S' { return ~\"struct\"; }\n       'g' { return ~\"public field\"; }\n       'j' { return ~\"private field\"; }\n+      'N' { return ~\"inherited field\"; }\n     }\n }\n "}, {"sha": "256d8e310c430d83c36a079f9b9f92a3b5ecf2f7", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -144,7 +144,7 @@ fn encode_class_item_paths(ebml_w: ebml::writer,\n     for items.each |it| {\n      alt ast_util::class_member_visibility(it) {\n           private { again; }\n-          public {\n+          public | inherited {\n               let (id, ident) = alt it.node {\n                  instance_var(v, _, _, vid, _) { (vid, v) }\n                  class_method(it) { (it.id, it.ident) }\n@@ -434,7 +434,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n \n fn encode_visibility(ebml_w: ebml::writer, visibility: visibility) {\n     encode_family(ebml_w, alt visibility {\n-        public { 'g' } private { 'j' }\n+        public { 'g' } private { 'j' } inherited { 'N' }\n     });\n }\n \n@@ -519,7 +519,7 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         }\n         class_method(m) {\n            alt m.vis {\n-              public {\n+              public | inherited {\n                 vec::push(*index, {val: m.id, pos: ebml_w.writer.tell()});\n                 vec::push(*global_index,\n                           {val: m.id, pos: ebml_w.writer.tell()});\n@@ -756,7 +756,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         for ms.each |m| {\n            alt m.vis {\n               private { /* do nothing */ }\n-              public {\n+              public | inherited {\n                 /* Write the info that's needed when viewing this class\n                    as a trait */\n                 ebml_w.start_tag(tag_item_trait_method);"}, {"sha": "0d587e60af29a8a9837e83090dff4987cedc1fb2", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a805a1fb37443601819604954510cb312a724fe9/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a805a1fb37443601819604954510cb312a724fe9", "patch": "@@ -2940,10 +2940,11 @@ fn lookup_public_fields(cx: ctxt, did: ast::def_id) -> ~[field_ty] {\n }\n \n pure fn is_public(f: field_ty) -> bool {\n-  alt f.vis {\n-    public { true }\n-    private { false }\n-  }\n+    // XXX: This is wrong.\n+    match f.vis {\n+        public | inherited => true,\n+        private => false\n+    }\n }\n \n /* Given a class def_id and a method name, return the method's"}]}