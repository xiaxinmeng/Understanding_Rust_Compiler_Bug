{"sha": "01e179840fe57c9d2a574613b0cafce756520894", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTE3OTg0MGZlNTdjOWQyYTU3NDYxM2IwY2FmY2U3NTY1MjA4OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-20T06:12:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-20T06:12:46Z"}, "message": "auto merge of #5432 : ILyoan/rust/arm_use_ndk_rebase, r=sanxiyn\n\nPartial Fix for #5265\r\n\r\n- Enabling LLVM ARM ehabi option.\r\n- Add ARM debug information manually for ccall.s\r\n- Compile object file using Android-NDK.\r\n\r\nCurrent LLVM trunk version can generate ARM debug information for assembly files but it is incomplete for object files. Unwinding on ARM can be done with LLVM trunk(the LLVM submodule of rust has problem on generating ARM debug information). See #5368\r\n\r\nThe Android-NDK detour(0f89eab) can be removed after LLVM has complete feature of generating ARM debug information for object file.", "tree": {"sha": "22aa2e2c52482e608b9661fbc794c8502d49b88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22aa2e2c52482e608b9661fbc794c8502d49b88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e179840fe57c9d2a574613b0cafce756520894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e179840fe57c9d2a574613b0cafce756520894", "html_url": "https://github.com/rust-lang/rust/commit/01e179840fe57c9d2a574613b0cafce756520894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e179840fe57c9d2a574613b0cafce756520894/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c879fdd8aad67cf4f6edd3aacb0189c284c920", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c879fdd8aad67cf4f6edd3aacb0189c284c920", "html_url": "https://github.com/rust-lang/rust/commit/f3c879fdd8aad67cf4f6edd3aacb0189c284c920"}, {"sha": "c1cacc36672e2c6a581848c2909c7bb8a1b01f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cacc36672e2c6a581848c2909c7bb8a1b01f33", "html_url": "https://github.com/rust-lang/rust/commit/c1cacc36672e2c6a581848c2909c7bb8a1b01f33"}], "stats": {"total": 99, "additions": 73, "deletions": 26}, "files": [{"sha": "e7a971a98a16d9547f298cac27d372e2102623ec", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/01e179840fe57c9d2a574613b0cafce756520894/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e179840fe57c9d2a574613b0cafce756520894/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=01e179840fe57c9d2a574613b0cafce756520894", "patch": "@@ -167,15 +167,18 @@ pub mod write {\n     use back::link::{output_type_assembly, output_type_bitcode};\n     use back::link::{output_type_exe, output_type_llvm_assembly};\n     use back::link::{output_type_object};\n+    use back::link::output_type;\n     use driver::session::Session;\n     use driver::session;\n     use lib::llvm::llvm;\n     use lib::llvm::{False, True, ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n \n+    use core::prelude::*;\n     use core::libc::{c_char, c_int, c_uint};\n     use core::path::Path;\n     use core::str;\n+    use core::run;\n \n     pub fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||\n@@ -185,7 +188,8 @@ pub mod write {\n         return false;\n     }\n \n-    pub fn run_passes(sess: Session, llmod: ModuleRef, output: &Path) {\n+    pub fn run_passes(sess: Session, llmod: ModuleRef,\n+            output_type: output_type, output: &Path) {\n         unsafe {\n             let opts = sess.opts;\n             if sess.time_llvm_passes() { llvm::LLVMRustEnableTimePasses(); }\n@@ -201,7 +205,7 @@ pub mod write {\n \n \n             if opts.save_temps {\n-                match opts.output_type {\n+                match output_type {\n                   output_type_bitcode => {\n                     if opts.optimize != session::No {\n                         let filename = output.with_filetype(\"no-opt.bc\");\n@@ -262,7 +266,7 @@ pub mod write {\n                 llvm::LLVMPassManagerBuilderDispose(MPMB);\n             }\n             if !sess.no_verify() { llvm::LLVMAddVerifierPass(pm.llpm); }\n-            if is_object_or_assembly_or_exe(opts.output_type) || opts.jit {\n+            if is_object_or_assembly_or_exe(output_type) || opts.jit {\n                 let LLVMOptNone       = 0 as c_int; // -O0\n                 let LLVMOptLess       = 1 as c_int; // -O1\n                 let LLVMOptDefault    = 2 as c_int; // -O2, -Os\n@@ -290,8 +294,8 @@ pub mod write {\n                 }\n \n                 let mut FileType;\n-                if opts.output_type == output_type_object ||\n-                       opts.output_type == output_type_exe {\n+                if output_type == output_type_object ||\n+                       output_type == output_type_exe {\n                    FileType = lib::llvm::ObjectFile;\n                 } else { FileType = lib::llvm::AssemblyFile; }\n                 // Write optimized bitcode if --save-temps was on.\n@@ -307,7 +311,7 @@ pub mod write {\n                     pm = mk_pass_manager();\n                     // Save the assembly file if -S is used\n \n-                    if opts.output_type == output_type_assembly {\n+                    if output_type == output_type_assembly {\n                         let _: () = str::as_c_str(\n                             sess.targ_cfg.target_strs.target_triple,\n                             |buf_t| {\n@@ -328,8 +332,8 @@ pub mod write {\n \n                     // Save the object file for -c or --save-temps alone\n                     // This .o is needed when an exe is built\n-                    if opts.output_type == output_type_object ||\n-                           opts.output_type == output_type_exe {\n+                    if output_type == output_type_object ||\n+                           output_type == output_type_exe {\n                         let _: () = str::as_c_str(\n                             sess.targ_cfg.target_strs.target_triple,\n                             |buf_t| {\n@@ -375,7 +379,7 @@ pub mod write {\n                 return;\n             }\n \n-            if opts.output_type == output_type_llvm_assembly {\n+            if output_type == output_type_llvm_assembly {\n                 // Given options \"-S --emit-llvm\": output LLVM assembly\n                 str::as_c_str(output.to_str(), |buf_o| {\n                     llvm::LLVMRustAddPrintModulePass(pm.llpm, llmod, buf_o)});\n@@ -391,6 +395,34 @@ pub mod write {\n             if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n         }\n     }\n+\n+    pub fn run_ndk(sess: Session, assembly: &Path, object: &Path) {\n+        let cc_prog: ~str = match &sess.opts.android_cross_path {\n+            &Some(copy path) => {\n+                fmt!(\"%s/bin/arm-linux-androideabi-gcc\", path)\n+            }\n+            &None => {\n+                sess.fatal(~\"need Android NDK path for building \\\n+                             (--android-cross-path)\")\n+            }\n+        };\n+        let mut cc_args = ~[];\n+        cc_args.push(~\"-c\");\n+        cc_args.push(~\"-o\");\n+        cc_args.push(object.to_str());\n+        cc_args.push(assembly.to_str());\n+\n+        let prog = run::program_output(cc_prog, cc_args);\n+\n+        if prog.status != 0 {\n+            sess.err(fmt!(\"building with `%s` failed with code %d\",\n+                        cc_prog, prog.status));\n+            sess.note(fmt!(\"%s arguments: %s\",\n+                        cc_prog, str::connect(cc_args, ~\" \")));\n+            sess.note(prog.err + prog.out);\n+            sess.abort_if_errors();\n+        }\n+    }\n }\n \n "}, {"sha": "42db21282a01580cb5de489699d2d3fa5d43ad34", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01e179840fe57c9d2a574613b0cafce756520894/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e179840fe57c9d2a574613b0cafce756520894/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=01e179840fe57c9d2a574613b0cafce756520894", "patch": "@@ -323,9 +323,23 @@ pub fn compile_rest(sess: Session, cfg: ast::crate_cfg,\n \n     };\n \n-    time(time_passes, ~\"LLVM passes\", ||\n-        link::write::run_passes(sess, llmod,\n+    // NOTE: Android hack\n+    if sess.targ_cfg.arch == session::arch_arm &&\n+            (sess.opts.output_type == link::output_type_object ||\n+             sess.opts.output_type == link::output_type_exe) {\n+        let output_type = link::output_type_assembly;\n+        let obj_filename = outputs.obj_filename.with_filetype(\"s\");\n+\n+        time(time_passes, ~\"LLVM passes\", ||\n+            link::write::run_passes(sess, llmod, output_type,\n+                            &obj_filename));\n+\n+        link::write::run_ndk(sess, &obj_filename, &outputs.obj_filename);\n+    } else {\n+        time(time_passes, ~\"LLVM passes\", ||\n+            link::write::run_passes(sess, llmod, sess.opts.output_type,\n                                 &outputs.obj_filename));\n+    }\n \n     let stop_after_codegen =\n         sess.opts.output_type != link::output_type_exe ||"}, {"sha": "345e6462d07b03bc538f8355093247629de7f04d", "filename": "src/rt/arch/arm/ccall.S", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/01e179840fe57c9d2a574613b0cafce756520894/src%2Frt%2Farch%2Farm%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/01e179840fe57c9d2a574613b0cafce756520894/src%2Frt%2Farch%2Farm%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fccall.S?ref=01e179840fe57c9d2a574613b0cafce756520894", "patch": "@@ -5,23 +5,18 @@\n \n .globl __morestack\n .hidden __morestack\n+.type __morestack, %function\n __morestack:\n-\tmov r3, sp\n+\t.fnstart\n+\t.save {r4, fp, lr}\n+\tpush {r4, fp, lr}\n+    .movsp r4\n+\tmov r4, sp\n \tmov sp, r2\n-\t\n-\tstr r3, [sp]\n-\tstr lr, [sp, #-4]\n-\t\n-\tsub sp, #8\n-\t\n+\tmov fp, sp\n \tblx r1\n-\n-\tadd sp, #8\n-\t\n-\tldr lr, [sp, #-4]\n-\tldr r3, [sp] \n-\t\n-\tmov sp, r3\n+\tmov sp, r4\n+\tpop {r4, fp, lr}\n \tmov pc, lr\n-\t\n+\t.fnend\n "}, {"sha": "c4846c1a62bc3730e2139e82bbb6050ce96fe351", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01e179840fe57c9d2a574613b0cafce756520894/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01e179840fe57c9d2a574613b0cafce756520894/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=01e179840fe57c9d2a574613b0cafce756520894", "patch": "@@ -27,6 +27,7 @@\n #include \"llvm/ADT/DenseSet.h\"\n #include \"llvm/Assembly/Parser.h\"\n #include \"llvm/Assembly/PrintModulePass.h\"\n+#include \"llvm/Support/CommandLine.h\"\n #include \"llvm/Support/FormattedStream.h\"\n #include \"llvm/Support/Timer.h\"\n #include \"llvm/Support/raw_ostream.h\"\n@@ -428,6 +429,11 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n \n   LLVMRustInitializeTargets();\n \n+  int argc = 3;\n+  const char* argv[] = {\"rustc\", \"-arm-enable-ehabi\",\n+      \"-arm-enable-ehabi-descriptors\"};\n+  cl::ParseCommandLineOptions(argc, argv);\n+\n   TargetOptions Options;\n   Options.NoFramePointerElim = true;\n   Options.EnableSegmentedStacks = EnableSegmentedStacks;"}]}