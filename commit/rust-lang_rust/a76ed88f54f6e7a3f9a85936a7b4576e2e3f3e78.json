{"sha": "a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NmVkODhmNTRmNmU3YTNmOWE4NTkzNmE3YjQ1NzZlMmUzZjNlNzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-04T00:48:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-04T00:56:50Z"}, "message": "tutorial: Add a more detailed example to the intro", "tree": {"sha": "21017392f9ee24053b5341ba368d67d69e8807a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21017392f9ee24053b5341ba368d67d69e8807a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78", "html_url": "https://github.com/rust-lang/rust/commit/a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "url": "https://api.github.com/repos/rust-lang/rust/commits/41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "html_url": "https://github.com/rust-lang/rust/commit/41bca84dd95e0ef9ceb9f0a304eca0d62602198b"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "6214afdeb67adb06bbd148327b38509ae56346fa", "filename": "doc/tutorial.md", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=a76ed88f54f6e7a3f9a85936a7b4576e2e3f3e78", "patch": "@@ -17,7 +17,7 @@ As a curly-brace language in the tradition of C, C++, and JavaScript,\n Rust looks a lot like other languages you may be familiar with.\n \n ~~~~\n-fn fac(n: int) -> int {\n+fn boring_old_factorial(n: int) -> int {\n     let mut result = 1, i = 1;\n     while i <= n {\n         result *= i;\n@@ -36,8 +36,65 @@ tendency towards aggressive abbreviation in the keywords\u2014`fn` for\n function, `ret` for return.\n \n You should, however, not conclude that Rust is simply an evolution of\n-C. As will become clear in the rest of this tutorial, it goes in\n-quite a different direction.\n+C. As will become clear in the rest of this tutorial, it goes in quite\n+a different direction, with efficient, strongly-typed and memory-safe\n+support for many high-level idioms.\n+\n+Here's a parallel game of rock, paper, scissors to whet your appetite.\n+\n+~~~~\n+use std;\n+\n+import comm::{listen, methods};\n+import task::spawn;\n+import iter::repeat;\n+import std::rand::{seeded_rng, seed};\n+import uint::range;\n+import io::println;\n+\n+fn main() {\n+    // Open a channel for receiving game results\n+    do listen |result_from_game| {\n+\n+        let times = 10;\n+        let player1 = \"graydon\";\n+        let player2 = \"patrick\";\n+\n+        for repeat(times) {\n+            // Start another task to play the game\n+            do spawn |copy player1, copy player2| {\n+                let outcome = play_game(player1, player2);\n+                result_from_game.send(outcome);\n+            }\n+        }\n+\n+        // Report the results as the games complete\n+        for range(0, times) |round| {\n+            let winner = result_from_game.recv();\n+            println(#fmt(\"%s wins round #%u\", winner, round));\n+        }\n+\n+        fn play_game(player1: str, player2: str) -> str {\n+\n+            // Our rock/paper/scissors types\n+            enum gesture {\n+                rock, paper, scissors\n+            }\n+\n+            let rng = seeded_rng(seed());\n+            // A small inline function for picking an RPS gesture\n+            let pick = || [rock, paper, scissors][rng.gen_uint() % 3];\n+\n+            // Pick two gestures and decide the result\n+            alt (pick(), pick()) {\n+                (rock, scissors) | (paper, rock) | (scissors, paper) { copy player1 }\n+                (scissors, rock) | (rock, paper) | (paper, scissors) { copy player2 }\n+                _ { \"tie\" }\n+            }\n+        }\n+    }\n+}\n+~~~~\n \n ## Conventions\n "}]}