{"sha": "ae53a9e363af76f5310f4c0e108cc4a9749c1da3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNTNhOWUzNjNhZjc2ZjUzMTBmNGMwZTEwOGNjNGE5NzQ5YzFkYTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-15T12:34:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-15T12:34:02Z"}, "message": "Rollup merge of #63467 - terhechte:support-ios-catalyst-macabi-target-triple, r=estebank\n\nAdd Catalyst (iOS apps running on macOS) target\n\nThis is a first attempt of adding support for the new [Apple Catalyst](https://developer.apple.com/ipad-apps-for-mac/) target (i.e. running iOS apps on macOS). Currently, `rustc` supports the iOS and iOS simulator targets for iOS:\n- iOS: ARM cpu, iOS SDK, linked agains the iOS ABI\n- Simulator: X86_64 cpu, iOS SDK, linked against the iOS ABI\n\nApple Catalyst will add an additional target:\n- Macabi: X86_64 CPU, iOS SDK, linked again the macOS ABI.\n\nNote, it the actual SDK is the also the macOS 10.15 SDK, but the symbols are the iOS SDK symbols as they were added to macOS with 10.15.\n\nI've collected additional information via links in the open question sections below. This is way out of my comfort zone so please excuse whatever errors I may have made.\n\n# Open Questions:\n\n## Clang Version\nIt seems to me that `macabi` has not been merged into `clang` yet, I don't know whether that is a requirement rustc to compile, or if it is sufficient if the Clang that is used on a developers system is the correct one supporting macabi (that comes with current Xcode)\n\n## Hardcoded iOS version\n\n`swift-llvm` actually used [x86_64-apple-ios13.0-macabi](https://github.com/apple/swift-llvm/commit/3f1fd4f46a8e82cee6fffb284ee46daf8ddf66ae) as the target triple which hard-codes the current iOS version. A post on stackoverflow [points out that `MIN_IOS_VERSION` and `MIN_OSX_VERSION` should be used when compiling C code for clang (`-target x86_64-apple-ios${MIN_IOS_VERSION}-macabi`)](https://stackoverflow.com/questions/56487645/how-to-compile-a-3rd-party-library-to-be-used-with-uikit-for-mac-catalyst). However, I wasn't entirely sure how to do that in this PR. Pointers welcome.\n\n## Data Layout\nI'm probably using the wrong data-layout. I don't know whether it should be the macOS version or the iOS version. This is probably easier to answer for somebody who understands these things much better than me. I just copied the iOS Simulator X86_64 version as it seems to be (based on what I understand) that Catalyst is just the simulator target build against a different SDK.\n\n# Current State\n1. I got it to compile\n2. I could successfully compile a `macabi` `libcore` via `cargo build --target x86_64-apple-ios-macabi`\n\nI'm not sure what needs to be done next. Supposedly I need to compile everything into a toolchain somehow that I can then test via `rustup` to make sure that a binary compiled against the toolchain also works with Catalyst. [I read this article, but I'm still lost](https://www.reddit.com/r/rust/comments/5ag60z/how_do_i_bootstrap_rust_to_crosscompile_for_a_new/d9gicr2/) and would love pointers what to do next here.\n\n# Additional Information\n- [Commit adding Catalyst support to the Swift Clang Fork](https://github.com/CocoaPods/CocoaPods/issues/8877)\n- [Compiling C to Catalyst Discussion](https://github.com/CocoaPods/CocoaPods/issues/8877)\n- [CocoaPods Discussion on Adding Catalyst support](https://github.com/CocoaPods/CocoaPods/issues/8877)", "tree": {"sha": "7b7054269b6cc619541b8d67e8c01dbdc5c7f436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7054269b6cc619541b8d67e8c01dbdc5c7f436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae53a9e363af76f5310f4c0e108cc4a9749c1da3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVVE7CRBK7hj4Ov3rIwAAdHIIAJ6ZUVhoLab97yLGeQXQe9U3\nrord14YUWRZfisFRAKfGM+6zv5pd7LC4C+57zsBmHSZ7cG5V1RieAf34OKsaGIab\nFOmAD0iJZVkv/PgAdfxLCJG3FZfV/cH4rpsbLQsNcbWlrH7wqqhmt921XcNCKvMo\n2Ip8T82u2W3Pd1Z5Jwhnbl+iGHB7aq1AbmVjGrb5Qn9zZVt2/2GumkhCEPby0DNC\nOJWl10qRnS/CdQwk42oy8K1Zp+J4F4HEP/JDujojet90YhPsm9TwLIOtITP/tgqW\nyhlpF4b2DE97PYfG4+o7etoTnBo9V1hfhG2VFZz2kcbjaiFhT3SAzvqdsXHqiH8=\n=5a+h\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b7054269b6cc619541b8d67e8c01dbdc5c7f436\nparent 988cd5d50c203d5d37da8e0e047381fbebf53b8d\nparent af1e668f33d5c8b4d93e35b31be8e78fec18fcf4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565872442 +0200\ncommitter GitHub <noreply@github.com> 1565872442 +0200\n\nRollup merge of #63467 - terhechte:support-ios-catalyst-macabi-target-triple, r=estebank\n\nAdd Catalyst (iOS apps running on macOS) target\n\nThis is a first attempt of adding support for the new [Apple Catalyst](https://developer.apple.com/ipad-apps-for-mac/) target (i.e. running iOS apps on macOS). Currently, `rustc` supports the iOS and iOS simulator targets for iOS:\n- iOS: ARM cpu, iOS SDK, linked agains the iOS ABI\n- Simulator: X86_64 cpu, iOS SDK, linked against the iOS ABI\n\nApple Catalyst will add an additional target:\n- Macabi: X86_64 CPU, iOS SDK, linked again the macOS ABI.\n\nNote, it the actual SDK is the also the macOS 10.15 SDK, but the symbols are the iOS SDK symbols as they were added to macOS with 10.15.\n\nI've collected additional information via links in the open question sections below. This is way out of my comfort zone so please excuse whatever errors I may have made.\n\n# Open Questions:\n\n## Clang Version\nIt seems to me that `macabi` has not been merged into `clang` yet, I don't know whether that is a requirement rustc to compile, or if it is sufficient if the Clang that is used on a developers system is the correct one supporting macabi (that comes with current Xcode)\n\n## Hardcoded iOS version\n\n`swift-llvm` actually used [x86_64-apple-ios13.0-macabi](https://github.com/apple/swift-llvm/commit/3f1fd4f46a8e82cee6fffb284ee46daf8ddf66ae) as the target triple which hard-codes the current iOS version. A post on stackoverflow [points out that `MIN_IOS_VERSION` and `MIN_OSX_VERSION` should be used when compiling C code for clang (`-target x86_64-apple-ios${MIN_IOS_VERSION}-macabi`)](https://stackoverflow.com/questions/56487645/how-to-compile-a-3rd-party-library-to-be-used-with-uikit-for-mac-catalyst). However, I wasn't entirely sure how to do that in this PR. Pointers welcome.\n\n## Data Layout\nI'm probably using the wrong data-layout. I don't know whether it should be the macOS version or the iOS version. This is probably easier to answer for somebody who understands these things much better than me. I just copied the iOS Simulator X86_64 version as it seems to be (based on what I understand) that Catalyst is just the simulator target build against a different SDK.\n\n# Current State\n1. I got it to compile\n2. I could successfully compile a `macabi` `libcore` via `cargo build --target x86_64-apple-ios-macabi`\n\nI'm not sure what needs to be done next. Supposedly I need to compile everything into a toolchain somehow that I can then test via `rustup` to make sure that a binary compiled against the toolchain also works with Catalyst. [I read this article, but I'm still lost](https://www.reddit.com/r/rust/comments/5ag60z/how_do_i_bootstrap_rust_to_crosscompile_for_a_new/d9gicr2/) and would love pointers what to do next here.\n\n# Additional Information\n- [Commit adding Catalyst support to the Swift Clang Fork](https://github.com/CocoaPods/CocoaPods/issues/8877)\n- [Compiling C to Catalyst Discussion](https://github.com/CocoaPods/CocoaPods/issues/8877)\n- [CocoaPods Discussion on Adding Catalyst support](https://github.com/CocoaPods/CocoaPods/issues/8877)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae53a9e363af76f5310f4c0e108cc4a9749c1da3", "html_url": "https://github.com/rust-lang/rust/commit/ae53a9e363af76f5310f4c0e108cc4a9749c1da3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae53a9e363af76f5310f4c0e108cc4a9749c1da3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "988cd5d50c203d5d37da8e0e047381fbebf53b8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/988cd5d50c203d5d37da8e0e047381fbebf53b8d", "html_url": "https://github.com/rust-lang/rust/commit/988cd5d50c203d5d37da8e0e047381fbebf53b8d"}, {"sha": "af1e668f33d5c8b4d93e35b31be8e78fec18fcf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1e668f33d5c8b4d93e35b31be8e78fec18fcf4", "html_url": "https://github.com/rust-lang/rust/commit/af1e668f33d5c8b4d93e35b31be8e78fec18fcf4"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "6d3900c0b203f372fe64112322a29d73d7cca658", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae53a9e363af76f5310f4c0e108cc4a9749c1da3/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae53a9e363af76f5310f4c0e108cc4a9749c1da3/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=ae53a9e363af76f5310f4c0e108cc4a9749c1da3", "patch": "@@ -13,7 +13,8 @@ pub enum Arch {\n     Armv7s,\n     Arm64,\n     I386,\n-    X86_64\n+    X86_64,\n+    X86_64_macabi,\n }\n \n impl Arch {\n@@ -23,7 +24,8 @@ impl Arch {\n             Armv7s => \"armv7s\",\n             Arm64 => \"arm64\",\n             I386 => \"i386\",\n-            X86_64 => \"x86_64\"\n+            X86_64 => \"x86_64\",\n+            X86_64_macabi => \"x86_64\"\n         }\n     }\n }\n@@ -67,7 +69,8 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n     let sdk_name = match arch {\n         Armv7 | Armv7s | Arm64 => \"iphoneos\",\n-        I386 | X86_64 => \"iphonesimulator\"\n+        I386 | X86_64 => \"iphonesimulator\",\n+        X86_64_macabi => \"macosx10.15\",\n     };\n \n     let arch_name = arch.to_string();\n@@ -93,6 +96,7 @@ fn target_cpu(arch: Arch) -> String {\n         Arm64 => \"cyclone\",\n         I386 => \"yonah\",\n         X86_64 => \"core2\",\n+        X86_64_macabi => \"core2\",\n     }.to_string()\n }\n "}, {"sha": "9a009ca68eee3c636fc930646e4102d3afa4ea50", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae53a9e363af76f5310f4c0e108cc4a9749c1da3/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae53a9e363af76f5310f4c0e108cc4a9749c1da3/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=ae53a9e363af76f5310f4c0e108cc4a9749c1da3", "patch": "@@ -428,6 +428,7 @@ supported_targets! {\n     (\"aarch64-apple-ios\", aarch64_apple_ios),\n     (\"armv7-apple-ios\", armv7_apple_ios),\n     (\"armv7s-apple-ios\", armv7s_apple_ios),\n+    (\"x86_64-apple-ios-macabi\", x86_64_apple_ios_macabi),\n \n     (\"armebv7r-none-eabi\", armebv7r_none_eabi),\n     (\"armebv7r-none-eabihf\", armebv7r_none_eabihf),"}, {"sha": "2ce77282e90222ce27903e167cab919e513a059f", "filename": "src/librustc_target/spec/x86_64_apple_ios_macabi.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ae53a9e363af76f5310f4c0e108cc4a9749c1da3/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae53a9e363af76f5310f4c0e108cc4a9749c1da3/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=ae53a9e363af76f5310f4c0e108cc4a9749c1da3", "patch": "@@ -0,0 +1,23 @@\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use super::apple_ios_base::{opts, Arch};\n+\n+pub fn target() -> TargetResult {\n+    let base = opts(Arch::X86_64_macabi)?;\n+    Ok(Target {\n+        llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"ios\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions {\n+            max_atomic_width: Some(64),\n+            stack_probes: true,\n+            .. base\n+        }\n+    })\n+}"}]}