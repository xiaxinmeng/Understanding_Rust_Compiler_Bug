{"sha": "7e184516331e1f3f0aef6c2d7a1f204a20752505", "node_id": "C_kwDOAAsO6NoAKDdlMTg0NTE2MzMxZTFmM2YwYWVmNmMyZDdhMWYyMDRhMjA3NTI1MDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T01:21:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T01:21:27Z"}, "message": "Auto merge of #10175 - koka831:fix/10171, r=giraffate\n\nUse original variable name in the suggestion\n\nFix https://github.com/rust-lang/rust-clippy/issues/10171\n\n---\n\nchangelog: Sugg: [`manual_let_else`]: Now suggest the correct variable name\n[#10175](https://github.com/rust-lang/rust-clippy/pull/10175)\n<!-- changelog_checked -->", "tree": {"sha": "c78697e41f334854d5001fdf0875071a346af608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c78697e41f334854d5001fdf0875071a346af608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e184516331e1f3f0aef6c2d7a1f204a20752505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e184516331e1f3f0aef6c2d7a1f204a20752505", "html_url": "https://github.com/rust-lang/rust/commit/7e184516331e1f3f0aef6c2d7a1f204a20752505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e184516331e1f3f0aef6c2d7a1f204a20752505/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4909746add9b34e3f10508ca37b87f5aa96c0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4909746add9b34e3f10508ca37b87f5aa96c0b8", "html_url": "https://github.com/rust-lang/rust/commit/c4909746add9b34e3f10508ca37b87f5aa96c0b8"}, {"sha": "07c8c50a41dd4551ca3cb9155976a237eeefc1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c8c50a41dd4551ca3cb9155976a237eeefc1eb", "html_url": "https://github.com/rust-lang/rust/commit/07c8c50a41dd4551ca3cb9155976a237eeefc1eb"}], "stats": {"total": 162, "additions": 100, "deletions": 62}, "files": [{"sha": "3f8b42ffe80532f44850730bfe149a5bec459b8b", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7e184516331e1f3f0aef6c2d7a1f204a20752505/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e184516331e1f3f0aef6c2d7a1f204a20752505/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=7e184516331e1f3f0aef6c2d7a1f204a20752505", "patch": "@@ -38,7 +38,6 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n-    /// # #![feature(let_else)]\n     /// # fn main () {\n     /// # let w = Some(0);\n     /// let Some(v) = w else { return };\n@@ -69,29 +68,23 @@ impl_lint_pass!(ManualLetElse => [MANUAL_LET_ELSE]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &'tcx Stmt<'tcx>) {\n-        let if_let_or_match = if_chain! {\n-            if self.msrv.meets(msrvs::LET_ELSE);\n-            if !in_external_macro(cx.sess(), stmt.span);\n-            if let StmtKind::Local(local) = stmt.kind;\n-            if let Some(init) = local.init;\n-            if local.els.is_none();\n-            if local.ty.is_none();\n-            if init.span.ctxt() == stmt.span.ctxt();\n-            if let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init);\n-            then {\n-                if_let_or_match\n-            } else {\n-                return;\n-            }\n-        };\n+        if !self.msrv.meets(msrvs::LET_ELSE) || in_external_macro(cx.sess(), stmt.span) {\n+            return;\n+        }\n \n+        if let StmtKind::Local(local) = stmt.kind &&\n+            let Some(init) = local.init &&\n+            local.els.is_none() &&\n+            local.ty.is_none() &&\n+            init.span.ctxt() == stmt.span.ctxt() &&\n+            let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init) {\n         match if_let_or_match {\n             IfLetOrMatch::IfLet(if_let_expr, let_pat, if_then, if_else) => if_chain! {\n                 if expr_is_simple_identity(let_pat, if_then);\n                 if let Some(if_else) = if_else;\n                 if expr_diverges(cx, if_else);\n                 then {\n-                    emit_manual_let_else(cx, stmt.span, if_let_expr, let_pat, if_else);\n+                    emit_manual_let_else(cx, stmt.span, if_let_expr, local.pat, let_pat, if_else);\n                 }\n             },\n             IfLetOrMatch::Match(match_expr, arms, source) => {\n@@ -128,15 +121,23 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                     return;\n                 }\n \n-                emit_manual_let_else(cx, stmt.span, match_expr, pat_arm.pat, diverging_arm.body);\n+                emit_manual_let_else(cx, stmt.span, match_expr, local.pat, pat_arm.pat, diverging_arm.body);\n             },\n         }\n+        };\n     }\n \n     extract_msrv_attr!(LateContext);\n }\n \n-fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat: &Pat<'_>, else_body: &Expr<'_>) {\n+fn emit_manual_let_else(\n+    cx: &LateContext<'_>,\n+    span: Span,\n+    expr: &Expr<'_>,\n+    local: &Pat<'_>,\n+    pat: &Pat<'_>,\n+    else_body: &Expr<'_>,\n+) {\n     span_lint_and_then(\n         cx,\n         MANUAL_LET_ELSE,\n@@ -145,12 +146,11 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n         |diag| {\n             // This is far from perfect, for example there needs to be:\n             // * mut additions for the bindings\n-            // * renamings of the bindings\n+            // * renamings of the bindings for `PatKind::Or`\n             // * unused binding collision detection with existing ones\n             // * putting patterns with at the top level | inside ()\n             // for this to be machine applicable.\n             let mut app = Applicability::HasPlaceholders;\n-            let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n             let (sn_expr, _) = snippet_with_context(cx, expr.span, span.ctxt(), \"\", &mut app);\n             let (sn_else, _) = snippet_with_context(cx, else_body.span, span.ctxt(), \"\", &mut app);\n \n@@ -159,10 +159,21 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n             } else {\n                 format!(\"{{ {sn_else} }}\")\n             };\n-            let sn_bl = if matches!(pat.kind, PatKind::Or(..)) {\n-                format!(\"({sn_pat})\")\n-            } else {\n-                sn_pat.into_owned()\n+            let sn_bl = match pat.kind {\n+                PatKind::Or(..) => {\n+                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+                    format!(\"({sn_pat})\")\n+                },\n+                // Replace the variable name iff `TupleStruct` has one argument like `Variant(v)`.\n+                PatKind::TupleStruct(ref w, args, ..) if args.len() == 1 => {\n+                    let sn_wrapper = cx.sess().source_map().span_to_snippet(w.span()).unwrap_or_default();\n+                    let (sn_inner, _) = snippet_with_context(cx, local.span, span.ctxt(), \"\", &mut app);\n+                    format!(\"{sn_wrapper}({sn_inner})\")\n+                },\n+                _ => {\n+                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+                    sn_pat.into_owned()\n+                },\n             };\n             let sugg = format!(\"let {sn_bl} = {sn_expr} else {else_bl};\");\n             diag.span_suggestion(span, \"consider writing\", sugg, app);"}, {"sha": "3996d775f55f47e263b31a21fc61907a419643f0", "filename": "tests/ui/manual_let_else.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e184516331e1f3f0aef6c2d7a1f204a20752505/tests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e184516331e1f3f0aef6c2d7a1f204a20752505/tests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.rs?ref=7e184516331e1f3f0aef6c2d7a1f204a20752505", "patch": "@@ -8,6 +8,12 @@\n )]\n #![warn(clippy::manual_let_else)]\n \n+enum Variant {\n+    A(usize, usize),\n+    B(usize),\n+    C,\n+}\n+\n fn g() -> Option<()> {\n     None\n }\n@@ -135,6 +141,15 @@ fn fire() {\n         };\n     }\n     create_binding_if_some!(w, g());\n+\n+    fn e() -> Variant {\n+        Variant::A(0, 0)\n+    }\n+\n+    // Should not be renamed\n+    let v = if let Variant::A(a, 0) = e() { a } else { return };\n+    // Should be renamed\n+    let v = if let Variant::B(b) = e() { b } else { return };\n }\n \n fn not_fire() {"}, {"sha": "f6f56f7b00e5127facad2405fdd0ae479d21228a", "filename": "tests/ui/manual_let_else.stderr", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7e184516331e1f3f0aef6c2d7a1f204a20752505/tests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e184516331e1f3f0aef6c2d7a1f204a20752505/tests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.stderr?ref=7e184516331e1f3f0aef6c2d7a1f204a20752505", "patch": "@@ -1,13 +1,13 @@\n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:18:5\n+  --> $DIR/manual_let_else.rs:24:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { return };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { return };`\n    |\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:19:5\n+  --> $DIR/manual_let_else.rs:25:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -18,13 +18,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         return;\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:25:5\n+  --> $DIR/manual_let_else.rs:31:5\n    |\n LL | /     let v = if let Some(v) = g() {\n LL | |         // Blocks around the identity should have no impact\n@@ -45,25 +45,25 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:38:9\n+  --> $DIR/manual_let_else.rs:44:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { continue };\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { continue };`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { continue };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:39:9\n+  --> $DIR/manual_let_else.rs:45:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { break };\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { break };`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { break };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:43:5\n+  --> $DIR/manual_let_else.rs:49:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { panic!() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { panic!() };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { panic!() };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:46:5\n+  --> $DIR/manual_let_else.rs:52:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -74,13 +74,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         std::process::abort()\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:53:5\n+  --> $DIR/manual_let_else.rs:59:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -91,13 +91,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         if true { return } else { panic!() }\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:60:5\n+  --> $DIR/manual_let_else.rs:66:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -109,14 +109,14 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         if true {}\n LL +         panic!();\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:70:5\n+  --> $DIR/manual_let_else.rs:76:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -129,7 +129,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match () {\n LL +             _ if panic!() => {},\n LL +             _ => panic!(),\n@@ -138,13 +138,13 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:80:5\n+  --> $DIR/manual_let_else.rs:86:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { if panic!() {} };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { if panic!() {} };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { if panic!() {} };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:83:5\n+  --> $DIR/manual_let_else.rs:89:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -157,15 +157,15 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match panic!() {\n LL +             _ => {},\n LL +         }\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:92:5\n+  --> $DIR/manual_let_else.rs:98:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -178,15 +178,15 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else { if true {\n+LL ~     let Some(v) = g() else { if true {\n LL +         return;\n LL +     } else {\n LL +         panic!(\"diverge\");\n LL +     } };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:101:5\n+  --> $DIR/manual_let_else.rs:107:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -199,7 +199,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match (g(), g()) {\n LL +             (Some(_), None) => return,\n LL +             (None, Some(_)) => {\n@@ -215,7 +215,7 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:118:5\n+  --> $DIR/manual_let_else.rs:124:5\n    |\n LL | /     let (v, w) = if let Some(v_some) = g().map(|v| (v, 42)) {\n LL | |         v_some\n@@ -226,13 +226,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g().map(|v| (v, 42)) else {\n+LL ~     let Some((v, w)) = g().map(|v| (v, 42)) else {\n LL +         return;\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:125:5\n+  --> $DIR/manual_let_else.rs:131:5\n    |\n LL | /     let v = if let (Some(v_some), w_some) = (g(), 0) {\n LL | |         (w_some, v_some)\n@@ -249,24 +249,36 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:134:13\n+  --> $DIR/manual_let_else.rs:140:13\n    |\n LL |             let $n = if let Some(v) = $e { v } else { return };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { return };`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some($n) = g() else { return };`\n ...\n LL |     create_binding_if_some!(w, g());\n    |     ------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `create_binding_if_some` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:247:5\n+  --> $DIR/manual_let_else.rs:150:5\n+   |\n+LL |     let v = if let Variant::A(a, 0) = e() { a } else { return };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::A(a, 0) = e() else { return };`\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:152:5\n+   |\n+LL |     let v = if let Variant::B(b) = e() { b } else { return };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::B(v) = e() else { return };`\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:262:5\n    |\n LL | /     let _ = match ff {\n LL | |         Some(value) => value,\n LL | |         _ => macro_call!(),\n LL | |     };\n-   | |______^ help: consider writing: `let Some(value) = ff else { macro_call!() };`\n+   | |______^ help: consider writing: `let Some(_) = ff else { macro_call!() };`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "bacc14dc967203f321818083baf01124f93439c4", "filename": "tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e184516331e1f3f0aef6c2d7a1f204a20752505/tests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e184516331e1f3f0aef6c2d7a1f204a20752505/tests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.stderr?ref=7e184516331e1f3f0aef6c2d7a1f204a20752505", "patch": "@@ -5,7 +5,7 @@ LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n LL | |         None => return,\n LL | |     };\n-   | |______^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   | |______^ help: consider writing: `let Some(v) = g() else { return };`\n    |\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n@@ -16,7 +16,7 @@ LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n LL | |         _ => return,\n LL | |     };\n-   | |______^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   | |______^ help: consider writing: `let Some(v) = g() else { return };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:44:9"}]}