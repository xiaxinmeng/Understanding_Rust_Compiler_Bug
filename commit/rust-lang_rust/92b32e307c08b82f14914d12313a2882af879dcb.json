{"sha": "92b32e307c08b82f14914d12313a2882af879dcb", "node_id": "C_kwDOAAsO6NoAKDkyYjMyZTMwN2MwOGI4MmYxNDkxNGQxMjMxM2EyODgyYWY4NzlkY2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-11T20:52:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T20:52:59Z"}, "message": "Rollup merge of #99500 - tmandry:fuchsia-flags, r=petrochenkov\n\nFix flags when using clang as linker for Fuchsia\n\nDon't add C runtime or set dynamic linker when linking with clang for\nFuchsia. Clang already does this for us.", "tree": {"sha": "21041fec46c0dcc2287c601f307dc3c72d70f911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21041fec46c0dcc2287c601f307dc3c72d70f911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b32e307c08b82f14914d12313a2882af879dcb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9WwrCRBK7hj4Ov3rIwAAXTcIAKueB2I7gHYmWcGDxyF3Jl31\nMImHmU/SsVgW76n85H5irfZH02NF6TXcgT3mXym+Q4KrjehVXWyz9j56s3l7Ccxk\nH0NZ/0K0GN2Wic/jKI5xGxbw3DTkH0SKmEq0Ciz3P55mPWgwupuDBekVGguCZ00r\n8HIXK1c2wJJRfjuHaJql+9FTS/N/cLMTL+e1Bc5wsLDHR719djZd6E9LNRcNdr2b\nHq4YANTP0lcS7A+DAxTPwSF27ae3Hyu8DPLp0aNAuM42xbGm8T1/yXBMu3D8jpoB\nNalOtpyQNaR8SBAdIlBLVciQyRrlPY+EiHO1PolgZDn4ZExQM5ydc83YAbl5pb8=\n=bsWU\n-----END PGP SIGNATURE-----\n", "payload": "tree 21041fec46c0dcc2287c601f307dc3c72d70f911\nparent 6737549aaf9e93bc444fc8409698d0cc1109457e\nparent 55d5dcb1aaa656df115a326433cd33ab30237612\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660251179 +0200\ncommitter GitHub <noreply@github.com> 1660251179 +0200\n\nRollup merge of #99500 - tmandry:fuchsia-flags, r=petrochenkov\n\nFix flags when using clang as linker for Fuchsia\n\nDon't add C runtime or set dynamic linker when linking with clang for\nFuchsia. Clang already does this for us.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b32e307c08b82f14914d12313a2882af879dcb", "html_url": "https://github.com/rust-lang/rust/commit/92b32e307c08b82f14914d12313a2882af879dcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b32e307c08b82f14914d12313a2882af879dcb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6737549aaf9e93bc444fc8409698d0cc1109457e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6737549aaf9e93bc444fc8409698d0cc1109457e", "html_url": "https://github.com/rust-lang/rust/commit/6737549aaf9e93bc444fc8409698d0cc1109457e"}, {"sha": "55d5dcb1aaa656df115a326433cd33ab30237612", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d5dcb1aaa656df115a326433cd33ab30237612", "html_url": "https://github.com/rust-lang/rust/commit/55d5dcb1aaa656df115a326433cd33ab30237612"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "953761a782052f952e1e60722253a49489d6e1f1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92b32e307c08b82f14914d12313a2882af879dcb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b32e307c08b82f14914d12313a2882af879dcb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=92b32e307c08b82f14914d12313a2882af879dcb", "patch": "@@ -1583,12 +1583,21 @@ fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n fn add_pre_link_objects(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n+    flavor: LinkerFlavor,\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n+    // FIXME: we are currently missing some infra here (per-linker-flavor CRT objects),\n+    // so Fuchsia has to be special-cased.\n     let opts = &sess.target;\n-    let objects =\n-        if self_contained { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n+    let empty = Default::default();\n+    let objects = if self_contained {\n+        &opts.pre_link_objects_fallback\n+    } else if !(sess.target.os == \"fuchsia\" && flavor == LinkerFlavor::Gcc) {\n+        &opts.pre_link_objects\n+    } else {\n+        &empty\n+    };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n         cmd.add_object(&get_object_file_path(sess, obj, self_contained));\n     }\n@@ -1914,7 +1923,7 @@ fn linker_with_args<'a>(\n     // ------------ Object code and libraries, order-dependent ------------\n \n     // Pre-link CRT objects.\n-    add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n+    add_pre_link_objects(cmd, sess, flavor, link_output_kind, crt_objects_fallback);\n \n     add_linked_symbol_object(\n         cmd,\n@@ -2070,7 +2079,10 @@ fn add_order_independent_options(\n \n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n-    if sess.target.os == \"fuchsia\" && crate_type == CrateType::Executable {\n+    if sess.target.os == \"fuchsia\"\n+        && crate_type == CrateType::Executable\n+        && flavor != LinkerFlavor::Gcc\n+    {\n         let prefix = if sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n         } else {"}, {"sha": "962ad0c66d914b502f92b6640703b2c08b637814", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92b32e307c08b82f14914d12313a2882af879dcb/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b32e307c08b82f14914d12313a2882af879dcb/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=92b32e307c08b82f14914d12313a2882af879dcb", "patch": "@@ -1,6 +1,11 @@\n use crate::spec::{crt_objects, cvs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n+    // This mirrors the linker options provided by clang. We presume lld for\n+    // now. When using clang as the linker it will supply these options for us,\n+    // so we only list them for ld/lld.\n+    //\n+    // https://github.com/llvm/llvm-project/blob/db9322b2066c55254e7691efeab863f43bfcc084/clang/lib/Driver/ToolChains/Fuchsia.cpp#L31\n     let pre_link_args = TargetOptions::link_args(\n         LinkerFlavor::Ld,\n         &["}]}