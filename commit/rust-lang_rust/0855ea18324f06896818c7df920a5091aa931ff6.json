{"sha": "0855ea18324f06896818c7df920a5091aa931ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTVlYTE4MzI0ZjA2ODk2ODE4YzdkZjkyMGE1MDkxYWE5MzFmZjY=", "commit": {"author": {"name": "Eduardo Pinho", "email": "enet4mikeenet@gmail.com", "date": "2017-11-18T21:05:06Z"}, "committer": {"name": "Eduardo Pinho", "email": "enet4mikeenet@gmail.com", "date": "2017-11-18T21:05:06Z"}, "message": "impl From<T> for RwLock<T>", "tree": {"sha": "31c4c0467b3762640e9cb3ef4a017fb6603e236a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c4c0467b3762640e9cb3ef4a017fb6603e236a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0855ea18324f06896818c7df920a5091aa931ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0855ea18324f06896818c7df920a5091aa931ff6", "html_url": "https://github.com/rust-lang/rust/commit/0855ea18324f06896818c7df920a5091aa931ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0855ea18324f06896818c7df920a5091aa931ff6/comments", "author": {"login": "Enet4", "id": 4738426, "node_id": "MDQ6VXNlcjQ3Mzg0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4738426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enet4", "html_url": "https://github.com/Enet4", "followers_url": "https://api.github.com/users/Enet4/followers", "following_url": "https://api.github.com/users/Enet4/following{/other_user}", "gists_url": "https://api.github.com/users/Enet4/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enet4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enet4/subscriptions", "organizations_url": "https://api.github.com/users/Enet4/orgs", "repos_url": "https://api.github.com/users/Enet4/repos", "events_url": "https://api.github.com/users/Enet4/events{/privacy}", "received_events_url": "https://api.github.com/users/Enet4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enet4", "id": 4738426, "node_id": "MDQ6VXNlcjQ3Mzg0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4738426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enet4", "html_url": "https://github.com/Enet4", "followers_url": "https://api.github.com/users/Enet4/followers", "following_url": "https://api.github.com/users/Enet4/following{/other_user}", "gists_url": "https://api.github.com/users/Enet4/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enet4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enet4/subscriptions", "organizations_url": "https://api.github.com/users/Enet4/orgs", "repos_url": "https://api.github.com/users/Enet4/repos", "events_url": "https://api.github.com/users/Enet4/events{/privacy}", "received_events_url": "https://api.github.com/users/Enet4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfc6c1296c0b174577d6817557d0d1ed77687fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfc6c1296c0b174577d6817557d0d1ed77687fb", "html_url": "https://github.com/rust-lang/rust/commit/1bfc6c1296c0b174577d6817557d0d1ed77687fb"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "fd6cff6b69c40f8270c2e101dc15af5c1951256f", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0855ea18324f06896818c7df920a5091aa931ff6/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0855ea18324f06896818c7df920a5091aa931ff6/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=0855ea18324f06896818c7df920a5091aa931ff6", "patch": "@@ -457,6 +457,17 @@ impl<T: Default> Default for RwLock<T> {\n     }\n }\n \n+#[stable(feature = \"rw_lock_from\", since = \"1.22.0\")]\n+impl<T> From<T> for RwLock<T> {\n+    /// Creates a new instance of an `RwLock<T>` which is unlocked.\n+    /// This is equivalent to [`RwLock::new`].\n+    ///\n+    /// [`RwLock::new`]: #method.new\n+    fn from(t: T) -> Self {\n+        RwLock::new(t)\n+    }\n+}\n+\n impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n     unsafe fn new(lock: &'rwlock RwLock<T>)\n                   -> LockResult<RwLockReadGuard<'rwlock, T>> {"}]}