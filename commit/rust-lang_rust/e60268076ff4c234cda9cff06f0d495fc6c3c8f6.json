{"sha": "e60268076ff4c234cda9cff06f0d495fc6c3c8f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MDI2ODA3NmZmNGMyMzRjZGE5Y2ZmMDZmMGQ0OTVmYzZjM2M4ZjY=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-04-22T20:51:11Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-04-22T20:51:11Z"}, "message": "Add a \"by reference\" adaptor for `AllocRef`", "tree": {"sha": "a4ada4afc88e7fbf6265ffc328374c852d1a4db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ada4afc88e7fbf6265ffc328374c852d1a4db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60268076ff4c234cda9cff06f0d495fc6c3c8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60268076ff4c234cda9cff06f0d495fc6c3c8f6", "html_url": "https://github.com/rust-lang/rust/commit/e60268076ff4c234cda9cff06f0d495fc6c3c8f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60268076ff4c234cda9cff06f0d495fc6c3c8f6/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e90d64266b8a4b53935d629786e69610b33f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e90d64266b8a4b53935d629786e69610b33f25", "html_url": "https://github.com/rust-lang/rust/commit/82e90d64266b8a4b53935d629786e69610b33f25"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "a3958ed6a30cc43dc317b80fca5cbecd6472b833", "filename": "src/libcore/alloc/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e60268076ff4c234cda9cff06f0d495fc6c3c8f6/src%2Flibcore%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60268076ff4c234cda9cff06f0d495fc6c3c8f6/src%2Flibcore%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Fmod.rs?ref=e60268076ff4c234cda9cff06f0d495fc6c3c8f6", "patch": "@@ -364,4 +364,51 @@ pub unsafe trait AllocRef {\n             }\n         }\n     }\n+\n+    /// Creates a \"by reference\" adaptor for this instance of `AllocRef`.\n+    ///\n+    /// The returned adaptor also implements `AllocRef` and will simply borrow this.\n+    #[inline(always)]\n+    fn by_ref(&mut self) -> &mut Self {\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+unsafe impl<A> AllocRef for &mut A\n+where\n+    A: AllocRef + ?Sized,\n+{\n+    #[inline]\n+    fn alloc(&mut self, layout: Layout, init: AllocInit) -> Result<MemoryBlock, AllocErr> {\n+        (**self).alloc(layout, init)\n+    }\n+\n+    #[inline]\n+    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n+        (**self).dealloc(ptr, layout)\n+    }\n+\n+    #[inline]\n+    unsafe fn grow(\n+        &mut self,\n+        ptr: NonNull<u8>,\n+        layout: Layout,\n+        new_size: usize,\n+        placement: ReallocPlacement,\n+        init: AllocInit,\n+    ) -> Result<MemoryBlock, AllocErr> {\n+        (**self).grow(ptr, layout, new_size, placement, init)\n+    }\n+\n+    #[inline]\n+    unsafe fn shrink(\n+        &mut self,\n+        ptr: NonNull<u8>,\n+        layout: Layout,\n+        new_size: usize,\n+        placement: ReallocPlacement,\n+    ) -> Result<MemoryBlock, AllocErr> {\n+        (**self).shrink(ptr, layout, new_size, placement)\n+    }\n }"}]}