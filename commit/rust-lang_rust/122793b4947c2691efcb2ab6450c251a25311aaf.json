{"sha": "122793b4947c2691efcb2ab6450c251a25311aaf", "node_id": "C_kwDOAAsO6NoAKDEyMjc5M2I0OTQ3YzI2OTFlZmNiMmFiNjQ1MGMyNTFhMjUzMTFhYWY", "commit": {"author": {"name": "John Kelly", "email": "johnharrykelly@gmail.com", "date": "2023-05-02T17:21:23Z"}, "committer": {"name": "John Kelly", "email": "johnharrykelly@gmail.com", "date": "2023-05-02T17:21:23Z"}, "message": "Update trait_bounds.rs", "tree": {"sha": "90faf11bb958f84534a758b7c7479d505a88a3c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90faf11bb958f84534a758b7c7479d505a88a3c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/122793b4947c2691efcb2ab6450c251a25311aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/122793b4947c2691efcb2ab6450c251a25311aaf", "html_url": "https://github.com/rust-lang/rust/commit/122793b4947c2691efcb2ab6450c251a25311aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/122793b4947c2691efcb2ab6450c251a25311aaf/comments", "author": {"login": "john-h-k", "id": 32420055, "node_id": "MDQ6VXNlcjMyNDIwMDU1", "avatar_url": "https://avatars.githubusercontent.com/u/32420055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/john-h-k", "html_url": "https://github.com/john-h-k", "followers_url": "https://api.github.com/users/john-h-k/followers", "following_url": "https://api.github.com/users/john-h-k/following{/other_user}", "gists_url": "https://api.github.com/users/john-h-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/john-h-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/john-h-k/subscriptions", "organizations_url": "https://api.github.com/users/john-h-k/orgs", "repos_url": "https://api.github.com/users/john-h-k/repos", "events_url": "https://api.github.com/users/john-h-k/events{/privacy}", "received_events_url": "https://api.github.com/users/john-h-k/received_events", "type": "User", "site_admin": false}, "committer": {"login": "john-h-k", "id": 32420055, "node_id": "MDQ6VXNlcjMyNDIwMDU1", "avatar_url": "https://avatars.githubusercontent.com/u/32420055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/john-h-k", "html_url": "https://github.com/john-h-k", "followers_url": "https://api.github.com/users/john-h-k/followers", "following_url": "https://api.github.com/users/john-h-k/following{/other_user}", "gists_url": "https://api.github.com/users/john-h-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/john-h-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/john-h-k/subscriptions", "organizations_url": "https://api.github.com/users/john-h-k/orgs", "repos_url": "https://api.github.com/users/john-h-k/repos", "events_url": "https://api.github.com/users/john-h-k/events{/privacy}", "received_events_url": "https://api.github.com/users/john-h-k/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd0135bd2d2e546ca4c2c2147798d1f7c547128", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd0135bd2d2e546ca4c2c2147798d1f7c547128", "html_url": "https://github.com/rust-lang/rust/commit/cbd0135bd2d2e546ca4c2c2147798d1f7c547128"}], "stats": {"total": 81, "additions": 35, "deletions": 46}, "files": [{"sha": "5acd44dccaf5c30ae90db47ba12ffab9c07190d3", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 35, "deletions": 46, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/122793b4947c2691efcb2ab6450c251a25311aaf/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122793b4947c2691efcb2ab6450c251a25311aaf/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=122793b4947c2691efcb2ab6450c251a25311aaf", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    GenericArg, GenericBound, Generics, Item, ItemKind, MutTy, Node, Path, PathSegment, PredicateOrigin, QPath,\n+    GenericArg, GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, PredicateOrigin, QPath,\n     TraitBoundModifier, TraitItem, TraitRef, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -169,60 +169,49 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n-        let TyKind::Ref(\n-            ..,\n-            MutTy {\n-                ty: Ty {\n-                    kind: TyKind::TraitObject(\n-                        bounds,\n-                        ..\n-                    ),\n-                    ..\n-                },\n-                ..\n-            }\n-        ) = ty.kind else { return; };\n+        if_chain! {\n+            if let TyKind::Ref(.., mut_ty) = &ty.kind;\n+            if let TyKind::TraitObject(bounds, ..) = mut_ty.ty.kind;\n+            if bounds.len() > 2;\n+            then {\n+                let mut bounds_span = bounds[0].span;\n \n-        if bounds.len() < 2 {\n-            return;\n-        }\n+                for bound in bounds.iter().skip(1) {\n+                    bounds_span = bounds_span.to(bound.span);\n+                }\n \n-        let mut bounds_span = bounds[0].span;\n+                let mut seen_def_ids = FxHashSet::default();\n+                let mut fixed_traits = Vec::new();\n \n-        for bound in bounds.iter().skip(1) {\n-            bounds_span = bounds_span.to(bound.span);\n-        }\n+                for bound in bounds.iter() {\n+                    let Some(def_id) = bound.trait_ref.trait_def_id() else { continue; };\n \n-        let mut seen_def_ids = FxHashSet::default();\n-        let mut fixed_traits = Vec::new();\n+                    let new_trait = seen_def_ids.insert(def_id);\n \n-        for bound in bounds.iter() {\n-            let Some(def_id) = bound.trait_ref.trait_def_id() else { continue; };\n+                    if new_trait {\n+                        fixed_traits.push(bound);\n+                    }\n+                }\n \n-            let new_trait = seen_def_ids.insert(def_id);\n+                if bounds.len() != fixed_traits.len() {\n+                    let fixed_trait_snippet = fixed_traits\n+                        .iter()\n+                        .filter_map(|b| snippet_opt(cx, b.span))\n+                        .collect::<Vec<_>>()\n+                        .join(\" + \");\n \n-            if new_trait {\n-                fixed_traits.push(bound);\n+                    span_lint_and_sugg(\n+                        cx,\n+                        TRAIT_DUPLICATION_IN_BOUNDS,\n+                        bounds_span,\n+                        \"this trait bound is already specified in trait declaration\",\n+                        \"try\",\n+                        fixed_trait_snippet,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         }\n-\n-        if bounds.len() != fixed_traits.len() {\n-            let fixed_trait_snippet = fixed_traits\n-                .iter()\n-                .filter_map(|b| snippet_opt(cx, b.span))\n-                .collect::<Vec<_>>()\n-                .join(\" + \");\n-\n-            span_lint_and_sugg(\n-                cx,\n-                TRAIT_DUPLICATION_IN_BOUNDS,\n-                bounds_span,\n-                \"this trait bound is already specified in trait declaration\",\n-                \"try\",\n-                fixed_trait_snippet,\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n     }\n }\n "}]}