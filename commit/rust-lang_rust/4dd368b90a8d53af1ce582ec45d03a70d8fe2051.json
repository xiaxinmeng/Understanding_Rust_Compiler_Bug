{"sha": "4dd368b90a8d53af1ce582ec45d03a70d8fe2051", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZDM2OGI5MGE4ZDUzYWYxY2U1ODJlYzQ1ZDAzYTcwZDhmZTIwNTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-07T18:53:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T01:26:20Z"}, "message": "Normalize associated types in `with_field_tys`", "tree": {"sha": "267009d644c7fac7c068c0e18ba2d68753a5172b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267009d644c7fac7c068c0e18ba2d68753a5172b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd368b90a8d53af1ce582ec45d03a70d8fe2051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd368b90a8d53af1ce582ec45d03a70d8fe2051", "html_url": "https://github.com/rust-lang/rust/commit/4dd368b90a8d53af1ce582ec45d03a70d8fe2051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd368b90a8d53af1ce582ec45d03a70d8fe2051/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "html_url": "https://github.com/rust-lang/rust/commit/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "ead670f7b7a04c6e8b8e3a0dcf86e9fb21a1f7f9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4dd368b90a8d53af1ce582ec45d03a70d8fe2051/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd368b90a8d53af1ce582ec45d03a70d8fe2051/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4dd368b90a8d53af1ce582ec45d03a70d8fe2051", "patch": "@@ -107,7 +107,7 @@ pub struct CrateAnalysis<'tcx> {\n     pub glob_map: Option<GlobMap>,\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct field<'tcx> {\n     pub name: ast::Name,\n     pub mt: mt<'tcx>\n@@ -7212,6 +7212,12 @@ impl<'tcx> HasProjectionTypes for FnSig<'tcx> {\n     }\n }\n \n+impl<'tcx> HasProjectionTypes for field<'tcx> {\n+    fn has_projection_types(&self) -> bool {\n+        self.mt.ty.has_projection_types()\n+    }\n+}\n+\n impl<'tcx> HasProjectionTypes for BareFnTy<'tcx> {\n     fn has_projection_types(&self) -> bool {\n         self.sig.has_projection_types()\n@@ -7311,3 +7317,11 @@ impl<'tcx> Repr<'tcx> for UnboxedClosureUpvar<'tcx> {\n                 self.ty.repr(tcx))\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for field<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        format!(\"field({},{})\",\n+                self.name.repr(tcx),\n+                self.mt.repr(tcx))\n+    }\n+}"}, {"sha": "6c00790258257fb8b22ba88c09f6c2106a780920", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4dd368b90a8d53af1ce582ec45d03a70d8fe2051/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd368b90a8d53af1ce582ec45d03a70d8fe2051/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=4dd368b90a8d53af1ce582ec45d03a70d8fe2051", "patch": "@@ -273,6 +273,15 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for ty::field<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::field<'tcx> {\n+        ty::field {\n+            name: self.name,\n+            mt: self.mt.fold_with(folder),\n+        }\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for ty::Region {\n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Region {\n         folder.fold_region(*self)"}, {"sha": "21b400a710f083cdee3b5b3b844219d66672aabb", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4dd368b90a8d53af1ce582ec45d03a70d8fe2051/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd368b90a8d53af1ce582ec45d03a70d8fe2051/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=4dd368b90a8d53af1ce582ec45d03a70d8fe2051", "patch": "@@ -50,6 +50,7 @@ use trans::debuginfo;\n use trans::glue;\n use trans::machine;\n use trans::meth;\n+use trans::monomorphize;\n use trans::inline;\n use trans::tvec;\n use trans::type_of;\n@@ -1318,7 +1319,9 @@ pub fn with_field_tys<'tcx, R, F>(tcx: &ty::ctxt<'tcx>,\n {\n     match ty.sty {\n         ty::ty_struct(did, substs) => {\n-            op(0, struct_fields(tcx, did, substs).index(&FullRange))\n+            let fields = struct_fields(tcx, did, substs);\n+            let fields = monomorphize::normalize_associated_type(tcx, &fields);\n+            op(0, fields.index(&FullRange))\n         }\n \n         ty::ty_tup(ref v) => {\n@@ -1340,10 +1343,9 @@ pub fn with_field_tys<'tcx, R, F>(tcx: &ty::ctxt<'tcx>,\n                         def::DefVariant(enum_id, variant_id, _) => {\n                             let variant_info = ty::enum_variant_with_id(\n                                 tcx, enum_id, variant_id);\n-                            op(variant_info.disr_val,\n-                               struct_fields(tcx,\n-                                             variant_id,\n-                                             substs).index(&FullRange))\n+                            let fields = struct_fields(tcx, variant_id, substs);\n+                            let fields = monomorphize::normalize_associated_type(tcx, &fields);\n+                            op(variant_info.disr_val, fields.index(&FullRange))\n                         }\n                         _ => {\n                             tcx.sess.bug(\"resolve didn't map this expr to a \\"}]}