{"sha": "734834c7d6e4862c8348a8c9660bb338773047ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDgzNGM3ZDZlNDg2MmM4MzQ4YThjOTY2MGJiMzM4NzczMDQ3Y2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-30T20:14:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:47Z"}, "message": "std: Restore missing timer examples", "tree": {"sha": "5d88a8923812bf1752abb7a36c1a1bba01c51e36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d88a8923812bf1752abb7a36c1a1bba01c51e36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734834c7d6e4862c8348a8c9660bb338773047ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734834c7d6e4862c8348a8c9660bb338773047ca", "html_url": "https://github.com/rust-lang/rust/commit/734834c7d6e4862c8348a8c9660bb338773047ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734834c7d6e4862c8348a8c9660bb338773047ca/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5fe8655af5b8927cb6868d715c5bd9fa30c3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5fe8655af5b8927cb6868d715c5bd9fa30c3b3", "html_url": "https://github.com/rust-lang/rust/commit/8a5fe8655af5b8927cb6868d715c5bd9fa30c3b3"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "d9f35ed73e0f922b35287580d7e4e0fbb7bb7aef", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/734834c7d6e4862c8348a8c9660bb338773047ca/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734834c7d6e4862c8348a8c9660bb338773047ca/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=734834c7d6e4862c8348a8c9660bb338773047ca", "patch": "@@ -114,6 +114,29 @@ impl Timer {\n     /// this is called in method-chaining style, the receiver will be\n     /// invalidated at the end of that statement, and all `recv` calls will\n     /// fail.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::io::Timer;\n+    ///\n+    /// let mut timer = Timer::new().unwrap();\n+    /// let ten_milliseconds = timer.oneshot(10);\n+    ///\n+    /// for _ in range(0u, 100) { /* do work */ }\n+    ///\n+    /// // blocks until 10 ms after the `oneshot` call\n+    /// ten_milliseconds.recv();\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// use std::io::Timer;\n+    ///\n+    /// // Incorrect, method chaining-style:\n+    /// let mut five_ms = Timer::new().unwrap().oneshot(5);\n+    /// // The timer object was destroyed, so this will always fail:\n+    /// // five_ms.recv()\n+    /// ```\n     pub fn oneshot(&mut self, duration: Duration) -> Receiver<()> {\n         let (tx, rx) = channel();\n         self.obj.oneshot(in_ms(duration), box TimerCallback { tx: tx });\n@@ -133,6 +156,35 @@ impl Timer {\n     /// this is called in method-chaining style, the receiver will be\n     /// invalidated at the end of that statement, and all `recv` calls will\n     /// fail.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::io::Timer;\n+    ///\n+    /// let mut timer = Timer::new().unwrap();\n+    /// let ten_milliseconds = timer.periodic(10);\n+    ///\n+    /// for _ in range(0u, 100) { /* do work */ }\n+    ///\n+    /// // blocks until 10 ms after the `periodic` call\n+    /// ten_milliseconds.recv();\n+    ///\n+    /// for _ in range(0u, 100) { /* do work */ }\n+    ///\n+    /// // blocks until 20 ms after the `periodic` call (*not* 10ms after the\n+    /// // previous `recv`)\n+    /// ten_milliseconds.recv();\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// use std::io::Timer;\n+    ///\n+    /// // Incorrect, method chaining-style.\n+    /// let mut five_ms = Timer::new().unwrap().periodic(5);\n+    /// // The timer object was destroyed, so this will always fail:\n+    /// // five_ms.recv()\n+    /// ```\n     pub fn periodic(&mut self, duration: Duration) -> Receiver<()> {\n         let (tx, rx) = channel();\n         self.obj.period(in_ms(duration), box TimerCallback { tx: tx });"}]}