{"sha": "3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxODNmZjNhN2IxZmJjZjNjYjUzNzljZjE2MmEzZDc2OWEyMWJlN2E=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T22:46:56Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T23:07:20Z"}, "message": "Disable the completion for no corresponding client resolve capabilities", "tree": {"sha": "5aa366155109b6f564f0f0a021fe2e43c0ac1bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aa366155109b6f564f0f0a021fe2e43c0ac1bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "html_url": "https://github.com/rust-lang/rust/commit/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9656ceb8963273047dab4ee9f3d0b19976890599", "url": "https://api.github.com/repos/rust-lang/rust/commits/9656ceb8963273047dab4ee9f3d0b19976890599", "html_url": "https://github.com/rust-lang/rust/commit/9656ceb8963273047dab4ee9f3d0b19976890599"}], "stats": {"total": 250, "additions": 87, "deletions": 163}, "files": [{"sha": "2a315cb864a89992e5e23e93b1082fb52f14f7a4", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 58, "deletions": 76, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         acc.add_resolution(ctx, name.to_string(), &res)\n     });\n \n-    if ctx.config.enable_experimental_completions {\n+    if !ctx.config.disable_fuzzy_autoimports && ctx.config.resolve_additional_edits_lazily() {\n         fuzzy_completion(acc, ctx).unwrap_or_default()\n     }\n }\n@@ -99,6 +99,7 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n //\n // To avoid an excessive amount of the results returned, completion input is checked for inclusion in the identifiers only\n // (i.e. in `HashMap` in the `std::collections::HashMap` path), also not in the module indentifiers.\n+// It also avoids searching for any imports for inputs with their length less that 3 symbols.\n //\n // .Merge Behaviour\n //\n@@ -107,53 +108,53 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n //\n // .LSP and performance implications\n //\n-// LSP 3.16 provides the way to defer the computation of some completion data, including the import edits for this feature.\n-// If the LSP client supports the `additionalTextEdits` (case sensitive) resolve client capability, rust-analyzer computes\n-// the completion edits only when a corresponding completion item is selected.\n+// The feature is enabled only if the LSP client supports LSP protocol version 3.16+ and reports the `additionalTextEdits`\n+// (case sensitive) resolve client capability in its client capabilities.\n+// This way the server is able to defer the costly computations, doing them for a selected completion item only.\n // For clients with no such support, all edits have to be calculated on the completion request, including the fuzzy search completion ones,\n-// which might be slow.\n+// which might be slow ergo the feature is automatically disabled.\n //\n // .Feature toggle\n //\n-// The feature can be turned off in the settings with the `rust-analyzer.completion.enableExperimental` flag.\n+// The feature can be forcefully turned off in the settings with the `rust-analyzer.completion.disableFuzzyAutoimports` flag.\n fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let _p = profile::span(\"fuzzy_completion\");\n+    let potential_import_name = ctx.token.to_string();\n+\n+    if potential_import_name.len() < 3 {\n+        return None;\n+    }\n+\n     let current_module = ctx.scope.module()?;\n     let anchor = ctx.name_ref_syntax.as_ref()?;\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n \n-    let potential_import_name = ctx.token.to_string();\n-\n-    let possible_imports = imports_locator::find_similar_imports(\n-        &ctx.sema,\n-        ctx.krate?,\n-        &potential_import_name,\n-        50,\n-        true,\n-    )\n-    .filter_map(|import_candidate| {\n-        Some(match import_candidate {\n-            Either::Left(module_def) => {\n-                (current_module.find_use_path(ctx.db, module_def)?, ScopeDef::ModuleDef(module_def))\n-            }\n-            Either::Right(macro_def) => {\n-                (current_module.find_use_path(ctx.db, macro_def)?, ScopeDef::MacroDef(macro_def))\n-            }\n-        })\n-    })\n-    .filter(|(mod_path, _)| mod_path.len() > 1)\n-    .take(20)\n-    .filter_map(|(import_path, definition)| {\n-        render_resolution_with_import(\n-            RenderContext::new(ctx),\n-            ImportEdit {\n-                import_path: import_path.clone(),\n-                import_scope: import_scope.clone(),\n-                merge_behaviour: ctx.config.merge,\n-            },\n-            &definition,\n-        )\n-    });\n+    let possible_imports =\n+        imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name, true)\n+            .filter_map(|import_candidate| {\n+                Some(match import_candidate {\n+                    Either::Left(module_def) => (\n+                        current_module.find_use_path(ctx.db, module_def)?,\n+                        ScopeDef::ModuleDef(module_def),\n+                    ),\n+                    Either::Right(macro_def) => (\n+                        current_module.find_use_path(ctx.db, macro_def)?,\n+                        ScopeDef::MacroDef(macro_def),\n+                    ),\n+                })\n+            })\n+            .filter(|(mod_path, _)| mod_path.len() > 1)\n+            .filter_map(|(import_path, definition)| {\n+                render_resolution_with_import(\n+                    RenderContext::new(ctx),\n+                    ImportEdit {\n+                        import_path: import_path.clone(),\n+                        import_scope: import_scope.clone(),\n+                        merge_behaviour: ctx.config.merge,\n+                    },\n+                    &definition,\n+                )\n+            });\n \n     acc.add_all(possible_imports);\n     Some(())\n@@ -775,7 +776,13 @@ impl My<|>\n \n     #[test]\n     fn function_fuzzy_completion() {\n-        check_edit(\n+        let mut completion_config = CompletionConfig::default();\n+        completion_config\n+            .active_resolve_capabilities\n+            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n+\n+        check_edit_with_config(\n+            completion_config,\n             \"stdin\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -800,7 +807,13 @@ fn main() {\n \n     #[test]\n     fn macro_fuzzy_completion() {\n-        check_edit(\n+        let mut completion_config = CompletionConfig::default();\n+        completion_config\n+            .active_resolve_capabilities\n+            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n+\n+        check_edit_with_config(\n+            completion_config,\n             \"macro_with_curlies!\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -827,37 +840,6 @@ fn main() {\n \n     #[test]\n     fn struct_fuzzy_completion() {\n-        check_edit(\n-            \"ThirdStruct\",\n-            r#\"\n-//- /lib.rs crate:dep\n-pub struct FirstStruct;\n-pub mod some_module {\n-    pub struct SecondStruct;\n-    pub struct ThirdStruct;\n-}\n-\n-//- /main.rs crate:main deps:dep\n-use dep::{FirstStruct, some_module::SecondStruct};\n-\n-fn main() {\n-    this<|>\n-}\n-\"#,\n-            r#\"\n-use dep::{FirstStruct, some_module::{SecondStruct, ThirdStruct}};\n-\n-fn main() {\n-    ThirdStruct\n-}\n-\"#,\n-        );\n-    }\n-\n-    /// LSP protocol supports separate completion resolve requests to do the heavy computations there.\n-    /// This test checks that for a certain resolve capatilities no such operations (autoimport) are done.\n-    #[test]\n-    fn no_fuzzy_completions_applied_for_certain_resolve_capability() {\n         let mut completion_config = CompletionConfig::default();\n         completion_config\n             .active_resolve_capabilities\n@@ -870,22 +852,22 @@ fn main() {\n //- /lib.rs crate:dep\n pub struct FirstStruct;\n pub mod some_module {\n-pub struct SecondStruct;\n-pub struct ThirdStruct;\n+    pub struct SecondStruct;\n+    pub struct ThirdStruct;\n }\n \n //- /main.rs crate:main deps:dep\n use dep::{FirstStruct, some_module::SecondStruct};\n \n fn main() {\n-this<|>\n+    this<|>\n }\n \"#,\n             r#\"\n-use dep::{FirstStruct, some_module::SecondStruct};\n+use dep::{FirstStruct, some_module::{SecondStruct, ThirdStruct}};\n \n fn main() {\n-ThirdStruct\n+    ThirdStruct\n }\n \"#,\n         );"}, {"sha": "8082ec9cb001b3defccbefd1ef0603a8d8ebd548", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -10,7 +10,7 @@ use rustc_hash::FxHashSet;\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n     pub enable_postfix_completions: bool,\n-    pub enable_experimental_completions: bool,\n+    pub disable_fuzzy_autoimports: bool,\n     pub add_call_parenthesis: bool,\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n@@ -52,7 +52,7 @@ impl Default for CompletionConfig {\n     fn default() -> Self {\n         CompletionConfig {\n             enable_postfix_completions: true,\n-            enable_experimental_completions: true,\n+            disable_fuzzy_autoimports: false,\n             add_call_parenthesis: true,\n             add_call_argument_snippets: true,\n             snippet_cap: Some(SnippetCap { _private: () }),"}, {"sha": "bd94402d75364ed43cf130687c2b742ddf8510eb", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -209,7 +209,6 @@ impl CompletionItem {\n             score: None,\n             ref_match: None,\n             import_to_add: None,\n-            resolve_import_lazily: false,\n         }\n     }\n \n@@ -301,7 +300,6 @@ pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n     import_to_add: Option<ImportEdit>,\n-    resolve_import_lazily: bool,\n     label: String,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -339,25 +337,13 @@ impl Builder {\n             }\n         }\n \n-        let mut text_edit = match self.text_edit {\n+        let text_edit = match self.text_edit {\n             Some(it) => it,\n             None => {\n                 TextEdit::replace(self.source_range, insert_text.unwrap_or_else(|| label.clone()))\n             }\n         };\n \n-        let import_to_add = if self.resolve_import_lazily {\n-            self.import_to_add\n-        } else {\n-            match apply_import_eagerly(self.import_to_add.as_ref(), &mut text_edit) {\n-                Ok(()) => self.import_to_add,\n-                Err(()) => {\n-                    log::error!(\"Failed to apply eager import edit: original edit and import edit intersect\");\n-                    None\n-                }\n-            }\n-        };\n-\n         CompletionItem {\n             source_range: self.source_range,\n             label,\n@@ -372,7 +358,7 @@ impl Builder {\n             trigger_call_info: self.trigger_call_info.unwrap_or(false),\n             score: self.score,\n             ref_match: self.ref_match,\n-            import_to_add,\n+            import_to_add: self.import_to_add,\n         }\n     }\n     pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder {\n@@ -435,13 +421,8 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn add_import(\n-        mut self,\n-        import_to_add: Option<ImportEdit>,\n-        resolve_import_lazily: bool,\n-    ) -> Builder {\n+    pub(crate) fn add_import(mut self, import_to_add: Option<ImportEdit>) -> Builder {\n         self.import_to_add = import_to_add;\n-        self.resolve_import_lazily = resolve_import_lazily;\n         self\n     }\n     pub(crate) fn set_ref_match(\n@@ -453,16 +434,6 @@ impl Builder {\n     }\n }\n \n-fn apply_import_eagerly(\n-    import_to_add: Option<&ImportEdit>,\n-    original_edit: &mut TextEdit,\n-) -> Result<(), ()> {\n-    match import_to_add.and_then(|import_edit| import_edit.to_text_edit()) {\n-        Some(import_edit) => original_edit.union(import_edit).map_err(|_| ()),\n-        None => Ok(()),\n-    }\n-}\n-\n impl<'a> Into<CompletionItem> for Builder {\n     fn into(self) -> CompletionItem {\n         self.build()"}, {"sha": "8df9f00fe299c287e013713240ecfac2b7aa9e13", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -73,7 +73,7 @@ pub use crate::{\n // }\n // ```\n //\n-// And experimental completions, enabled with the `rust-analyzer.completion.enableExperimental` setting.\n+// And experimental completions, enabled with the `rust-analyzer.completion.disableFuzzyAutoimports` setting.\n // This flag enables or disables:\n //\n // - Auto import: additional completion options with automatic `use` import and options from all project importable items, matched for the input"}, {"sha": "b940388df26aabbd40dddbeed4f27092763c7ca4", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -190,10 +190,7 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n-                .add_import(\n-                    import_to_add,\n-                    self.ctx.completion.config.resolve_additional_edits_lazily(),\n-                )\n+                .add_import(import_to_add)\n                 .build();\n                 return Some(item);\n             }\n@@ -248,7 +245,7 @@ impl<'a> Render<'a> {\n \n         let item = item\n             .kind(kind)\n-            .add_import(import_to_add, self.ctx.completion.config.resolve_additional_edits_lazily())\n+            .add_import(import_to_add)\n             .set_documentation(docs)\n             .set_ref_match(ref_match)\n             .build();\n@@ -449,28 +446,6 @@ fn main() { let _: m::Spam = S<|> }\n                         insert: \"m\",\n                         kind: Module,\n                     },\n-                    CompletionItem {\n-                        label: \"m::Spam\",\n-                        source_range: 75..76,\n-                        text_edit: TextEdit {\n-                            indels: [\n-                                Indel {\n-                                    insert: \"use m::Spam;\",\n-                                    delete: 0..0,\n-                                },\n-                                Indel {\n-                                    insert: \"\\n\\n\",\n-                                    delete: 0..0,\n-                                },\n-                                Indel {\n-                                    insert: \"Spam\",\n-                                    delete: 75..76,\n-                                },\n-                            ],\n-                        },\n-                        kind: Enum,\n-                        lookup: \"Spam\",\n-                    },\n                     CompletionItem {\n                         label: \"m::Spam::Foo\",\n                         source_range: 75..76,"}, {"sha": "8e0fea6c0fc5768e6ee2acfa912371f323c371ea", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -71,7 +71,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .add_import(import_to_add, self.ctx.completion.config.resolve_additional_edits_lazily())\n+        .add_import(import_to_add)\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "d16005249c0cee3b2f22f181fa523cfbb3623303", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -47,7 +47,7 @@ impl<'a> FunctionRender<'a> {\n             .set_deprecated(self.ctx.is_deprecated(self.func))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .add_import(import_to_add, self.ctx.completion.config.resolve_additional_edits_lazily())\n+            .add_import(import_to_add)\n             .build()\n     }\n "}, {"sha": "eb3209bee3dcf8e6a599110763e048dd255bcaa6", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -50,10 +50,7 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .add_import(\n-                    import_to_add,\n-                    self.ctx.completion.config.resolve_additional_edits_lazily(),\n-                )\n+                .add_import(import_to_add)\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "25f5f4924cd53ee06768135dad297194ec9994e0", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -96,7 +96,16 @@ pub(crate) fn check_edit_with_config(\n         .collect_tuple()\n         .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n     let mut actual = db.file_text(position.file_id).to_string();\n-    completion.text_edit().apply(&mut actual);\n+\n+    let mut combined_edit = completion.text_edit().to_owned();\n+    if let Some(import_text_edit) = completion.import_to_add().and_then(|edit| edit.to_text_edit())\n+    {\n+        combined_edit.union(import_text_edit).expect(\n+            \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n+        )\n+    }\n+\n+    combined_edit.apply(&mut actual);\n     assert_eq_text!(&ra_fixture_after, &actual)\n }\n "}, {"sha": "31151ce242d1b1a02c72e6fb25209ae4675a0548", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -35,26 +35,16 @@ pub fn find_similar_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n     name_to_import: &str,\n-    limit: usize,\n     ignore_modules: bool,\n ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n     let _p = profile::span(\"find_similar_imports\");\n \n-    let mut external_query = import_map::Query::new(name_to_import).limit(limit);\n+    let mut external_query = import_map::Query::new(name_to_import);\n     if ignore_modules {\n         external_query = external_query.exclude_import_kind(import_map::ImportKind::Module);\n     }\n \n-    find_imports(\n-        sema,\n-        krate,\n-        {\n-            let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n-            local_query.limit(limit);\n-            local_query\n-        },\n-        external_query,\n-    )\n+    find_imports(sema, krate, symbol_index::Query::new(name_to_import.to_string()), external_query)\n }\n \n fn find_imports<'a>("}, {"sha": "f46aa2dd4b7ec343a63a614c02b3a7eaf3782412", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -182,7 +182,7 @@ impl Config {\n             },\n             completion: CompletionConfig {\n                 enable_postfix_completions: true,\n-                enable_experimental_completions: true,\n+                disable_fuzzy_autoimports: false,\n                 add_call_parenthesis: true,\n                 add_call_argument_snippets: true,\n                 ..CompletionConfig::default()\n@@ -305,7 +305,7 @@ impl Config {\n         };\n \n         self.completion.enable_postfix_completions = data.completion_postfix_enable;\n-        self.completion.enable_experimental_completions = data.completion_enableExperimental;\n+        self.completion.disable_fuzzy_autoimports = data.completion_disableFuzzyAutoimports;\n         self.completion.add_call_parenthesis = data.completion_addCallParenthesis;\n         self.completion.add_call_argument_snippets = data.completion_addCallArgumentSnippets;\n         self.completion.merge = self.assist.insert_use.merge;\n@@ -508,7 +508,7 @@ config_data! {\n         completion_addCallArgumentSnippets: bool = true,\n         completion_addCallParenthesis: bool      = true,\n         completion_postfix_enable: bool          = true,\n-        completion_enableExperimental: bool      = true,\n+        completion_disableFuzzyAutoimports: bool = false,\n \n         diagnostics_enable: bool                = true,\n         diagnostics_enableExperimental: bool    = true,"}, {"sha": "4b0f41a243dae4458cdaedb2b2bf9d9ac0744b45", "filename": "editors/code/package.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=3183ff3a7b1fbcf3cb5379cf162a3d769a21be7a", "patch": "@@ -460,10 +460,10 @@\n                     \"default\": true,\n                     \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\"\n                 },\n-                \"rust-analyzer.completion.enableExperimental\": {\n+                \"rust-analyzer.completion.disableFuzzyAutoimports\": {\n                     \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Display additional completions with potential false positives and performance issues\"\n+                    \"default\": false,\n+                    \"markdownDescription\": \"Turns off extra completion suggestions that might be too noisy or slow\"\n                 },\n                 \"rust-analyzer.callInfo.full\": {\n                     \"type\": \"boolean\","}]}