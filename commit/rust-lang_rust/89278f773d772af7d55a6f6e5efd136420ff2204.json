{"sha": "89278f773d772af7d55a6f6e5efd136420ff2204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Mjc4Zjc3M2Q3NzJhZjdkNTVhNmY2ZTVlZmQxMzY0MjBmZjIyMDQ=", "commit": {"author": {"name": "Nathaniel Herman", "email": "nherman@college.harvard.edu", "date": "2014-01-30T22:19:19Z"}, "committer": {"name": "Nathaniel Herman", "email": "nherman@college.harvard.edu", "date": "2014-01-30T22:20:35Z"}, "message": "Make size_of, align_of, and element_offset functions return u64 instead of uint in trans::machine (per #5172)", "tree": {"sha": "3b411f190c9dc300e8055d2f0cc0e015b5b1872d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b411f190c9dc300e8055d2f0cc0e015b5b1872d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89278f773d772af7d55a6f6e5efd136420ff2204", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89278f773d772af7d55a6f6e5efd136420ff2204", "html_url": "https://github.com/rust-lang/rust/commit/89278f773d772af7d55a6f6e5efd136420ff2204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89278f773d772af7d55a6f6e5efd136420ff2204/comments", "author": {"login": "nathanielherman", "id": 5169954, "node_id": "MDQ6VXNlcjUxNjk5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5169954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanielherman", "html_url": "https://github.com/nathanielherman", "followers_url": "https://api.github.com/users/nathanielherman/followers", "following_url": "https://api.github.com/users/nathanielherman/following{/other_user}", "gists_url": "https://api.github.com/users/nathanielherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanielherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanielherman/subscriptions", "organizations_url": "https://api.github.com/users/nathanielherman/orgs", "repos_url": "https://api.github.com/users/nathanielherman/repos", "events_url": "https://api.github.com/users/nathanielherman/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanielherman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanielherman", "id": 5169954, "node_id": "MDQ6VXNlcjUxNjk5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5169954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanielherman", "html_url": "https://github.com/nathanielherman", "followers_url": "https://api.github.com/users/nathanielherman/followers", "following_url": "https://api.github.com/users/nathanielherman/following{/other_user}", "gists_url": "https://api.github.com/users/nathanielherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanielherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanielherman/subscriptions", "organizations_url": "https://api.github.com/users/nathanielherman/orgs", "repos_url": "https://api.github.com/users/nathanielherman/repos", "events_url": "https://api.github.com/users/nathanielherman/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanielherman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3427137f667e7def78f12a69af7d8beb2fcd5e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/3427137f667e7def78f12a69af7d8beb2fcd5e65", "html_url": "https://github.com/rust-lang/rust/commit/3427137f667e7def78f12a69af7d8beb2fcd5e65"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "36cc6f3afd16e40b419c8e9e824e99cad59c373c", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=89278f773d772af7d55a6f6e5efd136420ff2204", "patch": "@@ -1646,7 +1646,7 @@ fn set_members_of_composite_type(cx: &CrateContext,\n         .map(|(i, member_description)| {\n             let (member_size, member_align) = size_and_align_of(cx, member_description.llvm_type);\n             let member_offset = match member_description.offset {\n-                FixedMemberOffset { bytes } => bytes,\n+                FixedMemberOffset { bytes } => bytes as u64,\n                 ComputedMemberOffset => machine::llelement_offset(cx, composite_llvm_type, i)\n             };\n \n@@ -1815,7 +1815,7 @@ fn fixed_vec_metadata(cx: &CrateContext,\n     return unsafe {\n         llvm::LLVMDIBuilderCreateArrayType(\n             DIB(cx),\n-            bytes_to_bits(element_type_size * len),\n+            bytes_to_bits(element_type_size * (len as u64)),\n             bytes_to_bits(element_type_align),\n             element_type_metadata,\n             subscripts)\n@@ -2211,11 +2211,11 @@ fn span_start(cx: &CrateContext, span: Span) -> codemap::Loc {\n     cx.sess.codemap.lookup_char_pos(span.lo)\n }\n \n-fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (uint, uint) {\n+fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u64) {\n     (machine::llsize_of_alloc(cx, llvm_type), machine::llalign_of_min(cx, llvm_type))\n }\n \n-fn bytes_to_bits(bytes: uint) -> c_ulonglong {\n+fn bytes_to_bits(bytes: u64) -> c_ulonglong {\n     (bytes * 8) as c_ulonglong\n }\n "}, {"sha": "d9a34e1da7d51cac8185f03da0d9fbc991f95bef", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=89278f773d772af7d55a6f6e5efd136420ff2204", "patch": "@@ -341,7 +341,7 @@ pub fn trans_native_call<'a>(\n             let llalign = cmp::min(llforeign_align, llrust_align);\n             debug!(\"llrust_size={:?}\", llrust_size);\n             base::call_memcpy(bcx, llretptr_i8, llscratch_i8,\n-                              C_uint(ccx, llrust_size), llalign as u32);\n+                              C_uint(ccx, llrust_size as uint), llalign as u32);\n         }\n     }\n "}, {"sha": "25c4ff04ce57907151f2004d89985862739499a9", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=89278f773d772af7d55a6f6e5efd136420ff2204", "patch": "@@ -247,7 +247,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         \"size_of\" => {\n             let tp_ty = substs.tys[0];\n             let lltp_ty = type_of::type_of(ccx, tp_ty);\n-            Ret(bcx, C_uint(ccx, machine::llsize_of_real(ccx, lltp_ty)));\n+            Ret(bcx, C_uint(ccx, machine::llsize_of_real(ccx, lltp_ty) as uint));\n         }\n         \"move_val_init\" => {\n             // Create a datum reflecting the value being moved.\n@@ -266,12 +266,12 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         \"min_align_of\" => {\n             let tp_ty = substs.tys[0];\n             let lltp_ty = type_of::type_of(ccx, tp_ty);\n-            Ret(bcx, C_uint(ccx, machine::llalign_of_min(ccx, lltp_ty)));\n+            Ret(bcx, C_uint(ccx, machine::llalign_of_min(ccx, lltp_ty) as uint));\n         }\n         \"pref_align_of\"=> {\n             let tp_ty = substs.tys[0];\n             let lltp_ty = type_of::type_of(ccx, tp_ty);\n-            Ret(bcx, C_uint(ccx, machine::llalign_of_pref(ccx, lltp_ty)));\n+            Ret(bcx, C_uint(ccx, machine::llalign_of_pref(ccx, lltp_ty) as uint));\n         }\n         \"get_tydesc\" => {\n             let tp_ty = substs.tys[0];\n@@ -337,7 +337,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                         _ => fail!(\"transmute has non-expr arg\"),\n                     }\n                 };\n-                let pluralize = |n| if 1u == n { \"\" } else { \"s\" };\n+                let pluralize = |n| if 1 == n { \"\" } else { \"s\" };\n                 ccx.sess.span_fatal(sp,\n                                     format!(\"transmute called on types with \\\n                                           different sizes: {} ({} bit{}) to \\"}, {"sha": "7a7e3a9b759132fa18c0097c2e45fd5fa41dda96", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=89278f773d772af7d55a6f6e5efd136420ff2204", "patch": "@@ -21,17 +21,17 @@ use middle::trans::type_::Type;\n // compute sizeof / alignof\n \n // Returns the number of bytes clobbered by a Store to this type.\n-pub fn llsize_of_store(cx: &CrateContext, ty: Type) -> uint {\n+pub fn llsize_of_store(cx: &CrateContext, ty: Type) -> u64 {\n     unsafe {\n-        return llvm::LLVMStoreSizeOfType(cx.td.lltd, ty.to_ref()) as uint;\n+        return llvm::LLVMStoreSizeOfType(cx.td.lltd, ty.to_ref()) as u64;\n     }\n }\n \n // Returns the number of bytes between successive elements of type T in an\n // array of T. This is the \"ABI\" size. It includes any ABI-mandated padding.\n-pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> uint {\n+pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> u64 {\n     unsafe {\n-        return llvm::LLVMABISizeOfType(cx.td.lltd, ty.to_ref()) as uint;\n+        return llvm::LLVMABISizeOfType(cx.td.lltd, ty.to_ref()) as u64;\n     }\n }\n \n@@ -43,22 +43,22 @@ pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> uint {\n // that LLVM *does* distinguish between e.g. a 1-bit value and an 8-bit value\n // at the codegen level! In general you should prefer `llbitsize_of_real`\n // below.\n-pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> uint {\n+pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> u64 {\n     unsafe {\n-        let nbits = llvm::LLVMSizeOfTypeInBits(cx.td.lltd, ty.to_ref()) as uint;\n-        if nbits & 7u != 0u {\n+        let nbits = llvm::LLVMSizeOfTypeInBits(cx.td.lltd, ty.to_ref()) as u64;\n+        if nbits & 7 != 0 {\n             // Not an even number of bytes, spills into \"next\" byte.\n-            1u + (nbits >> 3)\n+            1 + (nbits >> 3)\n         } else {\n             nbits >> 3\n         }\n     }\n }\n \n /// Returns the \"real\" size of the type in bits.\n-pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> uint {\n+pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> u64 {\n     unsafe {\n-        llvm::LLVMSizeOfTypeInBits(cx.td.lltd, ty.to_ref()) as uint\n+        llvm::LLVMSizeOfTypeInBits(cx.td.lltd, ty.to_ref()) as u64\n     }\n }\n \n@@ -71,7 +71,7 @@ pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef {\n     // there's no need for that contrivance.  The instruction\n     // selection DAG generator would flatten that GEP(1) node into a\n     // constant of the type's alloc size, so let's save it some work.\n-    return C_uint(cx, llsize_of_alloc(cx, ty));\n+    return C_uint(cx, llsize_of_alloc(cx, ty) as uint);\n }\n \n // Returns the \"default\" size of t (see above), or 1 if the size would\n@@ -89,18 +89,18 @@ pub fn nonzero_llsize_of(cx: &CrateContext, ty: Type) -> ValueRef {\n // The preferred alignment may be larger than the alignment used when\n // packing the type into structs. This will be used for things like\n // allocations inside a stack frame, which LLVM has a free hand in.\n-pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> uint {\n+pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> u64 {\n     unsafe {\n-        return llvm::LLVMPreferredAlignmentOfType(cx.td.lltd, ty.to_ref()) as uint;\n+        return llvm::LLVMPreferredAlignmentOfType(cx.td.lltd, ty.to_ref()) as u64;\n     }\n }\n \n // Returns the minimum alignment of a type required by the platform.\n // This is the alignment that will be used for struct fields, arrays,\n // and similar ABI-mandated things.\n-pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> uint {\n+pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> u64 {\n     unsafe {\n-        return llvm::LLVMABIAlignmentOfType(cx.td.lltd, ty.to_ref()) as uint;\n+        return llvm::LLVMABIAlignmentOfType(cx.td.lltd, ty.to_ref()) as u64;\n     }\n }\n \n@@ -114,8 +114,8 @@ pub fn llalign_of(cx: &CrateContext, ty: Type) -> ValueRef {\n     }\n }\n \n-pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: uint) -> uint {\n+pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: uint) -> u64 {\n     unsafe {\n-        return llvm::LLVMOffsetOfElement(cx.td.lltd, struct_ty.to_ref(), element as u32) as uint;\n+        return llvm::LLVMOffsetOfElement(cx.td.lltd, struct_ty.to_ref(), element as u32) as u64;\n     }\n }"}, {"sha": "cbfd83309a4a0f3902741317a383990ea3e0a92b", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=89278f773d772af7d55a6f6e5efd136420ff2204", "patch": "@@ -73,8 +73,8 @@ impl<'a> Reflector<'a> {\n         let tr = type_of(self.bcx.ccx(), t);\n         let s = machine::llsize_of_real(self.bcx.ccx(), tr);\n         let a = machine::llalign_of_min(self.bcx.ccx(), tr);\n-        return ~[self.c_uint(s),\n-             self.c_uint(a)];\n+        return ~[self.c_uint(s as uint),\n+             self.c_uint(a as uint)];\n     }\n \n     pub fn c_tydesc(&mut self, t: ty::t) -> ValueRef {"}, {"sha": "5754a9ba88b99d67ad4a8e50f2990462dbb574f0", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89278f773d772af7d55a6f6e5efd136420ff2204/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=89278f773d772af7d55a6f6e5efd136420ff2204", "patch": "@@ -164,7 +164,7 @@ pub struct VecTypes {\n     unit_ty: ty::t,\n     llunit_ty: Type,\n     llunit_size: ValueRef,\n-    llunit_alloc_size: uint\n+    llunit_alloc_size: u64\n }\n \n impl VecTypes {"}]}