{"sha": "a63780afcee53489e2f1640245d3b7c496dbe071", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Mzc4MGFmY2VlNTM0ODllMmYxNjQwMjQ1ZDNiN2M0OTZkYmUwNzE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-07T19:31:15Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-07T20:15:59Z"}, "message": "Minor class-related tweaks to the AST", "tree": {"sha": "528c39b713494ffdd24ceae75f27188658f5dee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/528c39b713494ffdd24ceae75f27188658f5dee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63780afcee53489e2f1640245d3b7c496dbe071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63780afcee53489e2f1640245d3b7c496dbe071", "html_url": "https://github.com/rust-lang/rust/commit/a63780afcee53489e2f1640245d3b7c496dbe071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63780afcee53489e2f1640245d3b7c496dbe071/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47143ee24a135ee2a82864c9ff892fafe5cd262d", "url": "https://api.github.com/repos/rust-lang/rust/commits/47143ee24a135ee2a82864c9ff892fafe5cd262d", "html_url": "https://github.com/rust-lang/rust/commit/47143ee24a135ee2a82864c9ff892fafe5cd262d"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "d57bc0ab36ed7da0c39dc31e0fab2e6364bf0275", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -119,7 +119,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, module: _mod, path: [str],\n             encode_def_id(ebml_w, local_def(it.id));\n             ebml::end_tag(ebml_w);\n           }\n-          item_class(_,_,_,_) {\n+          item_class(_,_,_,_,_) {\n               fail \"encode: implement item_class\";\n           }\n           item_enum(variants, tps) {\n@@ -343,7 +343,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         ebml::end_tag(ebml_w);\n         encode_enum_variant_info(ecx, ebml_w, item.id, variants, index, tps);\n       }\n-      item_class(_,_,_,_) {\n+      item_class(_,_,_,_,_) {\n           fail \"encode: implement item_class\";\n       }\n       item_res(_, tps, _, _, ctor_id) {"}, {"sha": "47b0c71e11220e639e36505a8113282cd567f0c6", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -1452,7 +1452,7 @@ fn index_mod(md: ast::_mod) -> mod_index {\n                 variant_idx += 1u;\n             }\n           }\n-          ast::item_class(_, items, ctor_decl, _) {\n+          ast::item_class(_, items, _, ctor_decl, _) {\n               fail \"resolve::index_mod: item_class\";\n           }\n         }\n@@ -1498,6 +1498,7 @@ fn ns_for_def(d: def) -> namespace {\n       ast::def_mod(_) | ast::def_native_mod(_) { ns_module }\n       ast::def_ty(_) | ast::def_binding(_) | ast::def_use(_) |\n       ast::def_ty_param(_, _) | ast::def_prim_ty(_) { ns_type }\n+      _ { fail \"Dead\"; }\n     }\n }\n "}, {"sha": "f9a3740c04905ae4c54230a89368c0f196c9bfcf", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -60,7 +60,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n              ccx: ccx};\n         find_pre_post_fn(fcx, body);\n       }\n-      item_class(_,_,_,_) {\n+      item_class(_,_,_,_,_) {\n           fail \"find_pre_post_item: implement item_class\";\n       }\n       item_impl(_, _, _, ms) { for m in ms { find_pre_post_method(ccx, m); } }"}, {"sha": "7eb9380d3f8ff436a93da32cd9ecd24969ad6563", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -424,7 +424,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n-      ast::item_class(_,_,_,_) {\n+      ast::item_class(_,_,_,_,_) {\n           fail \"ty_of_item: implement item_class\";\n       }\n       ast::item_impl(_, _, _, _) | ast::item_mod(_) |\n@@ -2006,7 +2006,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                 let variants = ty::enum_variants(tcx, id);\n                 if vec::len(*variants) != 1u ||\n                        vec::len(variants[0].args) != 1u {\n-                    tcx.sess.span_fatal(expr.span,\n+                    tcx.sess.span_err(expr.span,\n                                         \"can only dereference enums \" +\n                                         \"with a single variant which has a \"\n                                             + \"single argument\");\n@@ -2019,7 +2019,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                 require_unsafe(tcx.sess, fcx.purity, expr.span);\n               }\n               _ {\n-                tcx.sess.span_fatal(expr.span,\n+                tcx.sess.span_err(expr.span,\n                                     \"dereferencing non-\" +\n                                         \"dereferenceable type: \" +\n                                         ty_to_str(tcx, oper_t));"}, {"sha": "c1b3b4e1636f92f010795c44f4fe3833d17d7d12", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -47,6 +47,12 @@ enum def {\n     def_binding(def_id),\n     def_use(def_id),\n     def_upvar(def_id, @def, node_id), // node_id == expr_fn or expr_fn_block\n+    def_class(def_id),\n+    // first def_id is for parent class\n+    def_class_field(def_id, def_id),\n+    // No purity allowed for now, I guess\n+    // (simpler this way, b/c presumably methods read mutable state)\n+    def_class_method(def_id, def_id)\n }\n \n // The set of meta_items that define the compilation environment of the crate,\n@@ -483,6 +489,7 @@ enum item_ {\n     item_class([ty_param], /* ty params for class */\n                [@class_item], /* methods, etc. */\n                              /* (not including ctor) */\n+               node_id,\n                fn_decl, /* ctor decl */\n                blk /* ctor body */\n                ),\n@@ -491,12 +498,15 @@ enum item_ {\n               @ty /* self */, [@method]),\n }\n \n-type class_item_ = {privacy: privacy, decl: @class_member};\n+type class_item_ = {privacy: privacy, decl: class_member};\n type class_item = spanned<class_item_>;\n \n enum class_member {\n     instance_var(ident, @ty, class_mutability, node_id),\n-    class_method(@item)\n+    class_method(@item) // FIXME: methods aren't allowed to be\n+    // type-parametric.\n+    // without constrained types, have to duplicate some stuff. or factor out\n+    // item to separate out things with type params?\n }\n \n enum class_mutability { class_mutable, class_immutable }"}, {"sha": "3046ba029070e1bb65cd9b4d0dbdb520610887e1", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -32,6 +32,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_binding(id) | def_use(id) | def_upvar(id, _, _) { id }\n       def_prim_ty(_) { fail; }\n+      _ { fail \"Dead\"; }\n     }\n }\n "}, {"sha": "723a70741abad374c8a8f437ef223431d99bb972", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -227,7 +227,7 @@ fn noop_fold_class_item(&&ci: @class_item, fld: ast_fold)\n     @{node: {\n       privacy:ci.node.privacy,\n             decl:\n-     @alt *ci.node.decl {\n+      alt ci.node.decl {\n         instance_var(ident, t, cm, id) {\n             instance_var(ident, fld.fold_ty(t), cm, id)\n         }\n@@ -249,9 +249,10 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n           item_enum(variants, typms) {\n             item_enum(vec::map(variants, fld.fold_variant), typms)\n           }\n-          item_class(typms, items, ctor_decl, ctor_body) {\n+          item_class(typms, items, id, ctor_decl, ctor_body) {\n               item_class(typms,\n                          vec::map(items, fld.fold_class_item),\n+                         id,\n                          fold_fn_decl(ctor_decl, fld),\n                          fld.fold_block(ctor_body))\n           }\n@@ -617,7 +618,7 @@ fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n         @{node:\n          {privacy:ci.node.privacy,\n                decl:\n-        @alt *ci.node.decl {\n+          alt ci.node.decl {\n            instance_var(nm, t, mt, id) {\n                instance_var(nm, f_ty(afp, f, t),\n                                  mt, id)"}, {"sha": "dab6be43e2fd71eba08386a2d4e687b0f2d07ff9", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -1965,27 +1965,29 @@ fn parse_item_class(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let ty_params = parse_ty_params(p);\n     expect(p, token::LBRACE);\n     let items: [@ast::class_item] = [];\n+    let ctor_id = p.get_id();\n     let the_ctor : option<(ast::fn_decl, ast::blk)> = none;\n     while p.token != token::RBRACE {\n        alt parse_class_item(p) {\n             ctor_decl(a_fn_decl, blk) {\n                 the_ctor = some((a_fn_decl, blk));\n             }\n             plain_decl(a_decl) {\n-                items += [@{node: {privacy: ast::pub, decl: a_decl},\n+                items += [@{node: {privacy: ast::pub, decl: *a_decl},\n                             span: p.last_span}];\n             }\n             priv_decls(some_decls) {\n                 items += vec::map(some_decls, {|d|\n-                            @{node: {privacy: ast::priv, decl: d},\n+                            @{node: {privacy: ast::priv, decl: *d},\n                                 span: p.last_span}});\n             }\n        }\n     }\n     p.bump();\n     alt the_ctor {\n        some((ct_d, ct_b)) { ret mk_item(p, lo, p.last_span.hi, class_name,\n-                     ast::item_class(ty_params, items, ct_d, ct_b), attrs); }\n+                                 ast::item_class(ty_params, items, ctor_id,\n+                                                 ct_d, ct_b), attrs); }\n        /*\n          Is it strange for the parser to check this?\n        */"}, {"sha": "a60e68b335d4c0bf420ca7709601c069f1a7158c", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -470,7 +470,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n             bclose(s, item.span);\n         }\n       }\n-      ast::item_class(tps,items,ctor_decl,ctor_body) {\n+      ast::item_class(tps,items,_,ctor_decl,ctor_body) {\n           head(s, \"class\");\n           word_nbsp(s, item.ident);\n           print_type_params(s, tps);\n@@ -494,7 +494,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n                 }\n                 _ {}\n              }\n-             alt *ci.node.decl {\n+             alt ci.node.decl {\n                  ast::instance_var(nm, t, mt, _) {\n                     word_nbsp(s, \"let\");\n                     alt mt {"}, {"sha": "571deb576c4d75152edf3a155dceeaf58813b0d4", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63780afcee53489e2f1640245d3b7c496dbe071/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=a63780afcee53489e2f1640245d3b7c496dbe071", "patch": "@@ -55,7 +55,7 @@ type visitor<E> =\n       visit_ty_params: fn@([ty_param], E, vt<E>),\n       visit_constr: fn@(@path, span, node_id, E, vt<E>),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id, E, vt<E>),\n-      visit_class_item: fn@(span, privacy, @class_member, E, vt<E>)};\n+      visit_class_item: fn@(span, privacy, class_member, E, vt<E>)};\n \n fn default_visitor<E>() -> visitor<E> {\n     ret @{visit_mod: bind visit_mod::<E>(_, _, _, _, _),\n@@ -137,7 +137,7 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n                        m.id, e, v);\n         }\n       }\n-      item_class(tps, members, ctor_decl, ctor_blk) {\n+      item_class(tps, members, _, ctor_decl, ctor_blk) {\n           v.visit_ty_params(tps, e, v);\n           for m in members {\n              v.visit_class_item(m.span, m.node.privacy, m.node.decl, e, v);\n@@ -155,9 +155,9 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n     }\n }\n \n-fn visit_class_item<E>(_s: span, _p: privacy, cm: @class_member,\n+fn visit_class_item<E>(_s: span, _p: privacy, cm: class_member,\n                        e:E, v:vt<E>) {\n-    alt *cm {\n+    alt cm {\n         instance_var(ident, t, mt, id) {\n             v.visit_ty(t, e, v);\n         }\n@@ -409,7 +409,7 @@ type simple_visitor =\n       visit_ty_params: fn@([ty_param]),\n       visit_constr: fn@(@path, span, node_id),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id),\n-      visit_class_item: fn@(span, privacy, @class_member)};\n+      visit_class_item: fn@(span, privacy, class_member)};\n \n fn simple_ignore_ty(_t: @ty) {}\n \n@@ -430,7 +430,7 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_constr: fn@(_p: @path, _sp: span, _id: node_id) { },\n           visit_fn: fn@(_fk: fn_kind, _d: fn_decl, _b: blk, _sp: span,\n                         _id: node_id) { },\n-          visit_class_item: fn@(_s: span, _p: privacy, _c: @class_member) {}\n+          visit_class_item: fn@(_s: span, _p: privacy, _c: class_member) {}\n          };\n }\n \n@@ -505,8 +505,8 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n     } else {\n         bind v_ty(v.visit_ty, _, _, _)\n     };\n-    fn v_class_item(f: fn@(span, privacy, @class_member),\n-                    s:span, p:privacy, cm: @class_member, &&e: (),\n+    fn v_class_item(f: fn@(span, privacy, class_member),\n+                    s:span, p:privacy, cm: class_member, &&e: (),\n                     v: vt<()>) {\n         f(s, p, cm);\n         visit_class_item(s, p, cm, e, v);"}]}