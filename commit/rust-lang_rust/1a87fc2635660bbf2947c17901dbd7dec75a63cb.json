{"sha": "1a87fc2635660bbf2947c17901dbd7dec75a63cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODdmYzI2MzU2NjBiYmYyOTQ3YzE3OTAxZGJkN2RlYzc1YTYzY2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-17T20:17:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-23T17:25:45Z"}, "message": "convert `custom_coerce_unsized_kind` into a `coerce_unsized_info`\n\nThis \"on-demand\" task both checks for errors and computes the custom\nunsized kind, if any. This task is only defined on impls of\n`CoerceUnsized`; invoking it on any other kind of impl results in a bug.\nThis is just to avoid having an `Option`, could easily be changed.", "tree": {"sha": "92802eb9c3abbcb1e1cae6420136b58fc8ba3ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92802eb9c3abbcb1e1cae6420136b58fc8ba3ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a87fc2635660bbf2947c17901dbd7dec75a63cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a87fc2635660bbf2947c17901dbd7dec75a63cb", "html_url": "https://github.com/rust-lang/rust/commit/1a87fc2635660bbf2947c17901dbd7dec75a63cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a87fc2635660bbf2947c17901dbd7dec75a63cb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5580374d7eb8795a8188be4650bd5079a25c6b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5580374d7eb8795a8188be4650bd5079a25c6b3", "html_url": "https://github.com/rust-lang/rust/commit/d5580374d7eb8795a8188be4650bd5079a25c6b3"}], "stats": {"total": 110, "additions": 77, "deletions": 33}, "files": [{"sha": "d8ca30477205c53ccfcfd0e5bc61dab9c16828ae", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -139,6 +139,21 @@ pub enum AutoBorrow<'tcx> {\n     RawPtr(hir::Mutability),\n }\n \n+/// Information for `CoerceUnsized` impls, storing information we\n+/// have computed about the coercion.\n+///\n+/// This struct can be obtained via the `coerce_impl_info` query.\n+/// Demanding this struct also has the side-effect of reporting errors\n+/// for inappropriate impls.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub struct CoerceUnsizedInfo {\n+    /// If this is a \"custom coerce\" impl, then what kind of custom\n+    /// coercion is it? This applies to impls of `CoerceUnsized` for\n+    /// structs, primarily, where we store a bit of info about which\n+    /// fields need to be coerced.\n+    pub custom_kind: Option<CustomCoerceUnsized>\n+}\n+\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub enum CustomCoerceUnsized {\n     /// Records the index of the field being coerced."}, {"sha": "d4214dc429ced19e972bdbacb81b1efc57d946d8", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -393,8 +393,8 @@ define_maps! { <'tcx>\n     pub closure_type: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n \n     /// Caches CoerceUnsized kinds for impls on custom types.\n-    pub custom_coerce_unsized_kind: ItemSignature(DefId)\n-        -> ty::adjustment::CustomCoerceUnsized,\n+    pub coerce_unsized_info: ItemSignature(DefId)\n+        -> ty::adjustment::CoerceUnsizedInfo,\n \n     pub typeck_tables: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n "}, {"sha": "d140426995812ac544350ccda3f27b96f94809a2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -2054,8 +2054,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    pub fn custom_coerce_unsized_kind(self, did: DefId) -> adjustment::CustomCoerceUnsized {\n-        queries::custom_coerce_unsized_kind::get(self, DUMMY_SP, did)\n+    pub fn coerce_unsized_info(self, did: DefId) -> adjustment::CoerceUnsizedInfo {\n+        queries::coerce_unsized_info::get(self, DUMMY_SP, did)\n     }\n \n     pub fn associated_item(self, def_id: DefId) -> AssociatedItem {"}, {"sha": "7cac201f14f769c1261316a4410e00d53b6f575a", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -88,9 +88,9 @@ provide! { <'tcx> tcx, def_id, cdata\n     }\n     associated_item => { cdata.get_associated_item(def_id.index) }\n     impl_trait_ref => { cdata.get_impl_trait(def_id.index, tcx) }\n-    custom_coerce_unsized_kind => {\n-        cdata.get_custom_coerce_unsized_kind(def_id.index).unwrap_or_else(|| {\n-            bug!(\"custom_coerce_unsized_kind: `{:?}` is missing its kind\", def_id);\n+    coerce_unsized_info => {\n+        cdata.get_coerce_unsized_info(def_id.index).unwrap_or_else(|| {\n+            bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n         })\n     }\n     mir => {"}, {"sha": "3de1e3442c69ddb6c0ecf63f8a31df8062bbad8d", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -643,10 +643,10 @@ impl<'a, 'tcx> CrateMetadata {\n         self.get_impl_data(id).polarity\n     }\n \n-    pub fn get_custom_coerce_unsized_kind(&self,\n-                                          id: DefIndex)\n-                                          -> Option<ty::adjustment::CustomCoerceUnsized> {\n-        self.get_impl_data(id).coerce_unsized_kind\n+    pub fn get_coerce_unsized_info(&self,\n+                                   id: DefIndex)\n+                                   -> Option<ty::adjustment::CoerceUnsizedInfo> {\n+        self.get_impl_data(id).coerce_unsized_info\n     }\n \n     pub fn get_impl_trait(&self,"}, {"sha": "5bc84759f87979a509c5cb24ed47a5c8decb5a8c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let data = ImplData {\n                     polarity: hir::ImplPolarity::Positive,\n                     parent_impl: None,\n-                    coerce_unsized_kind: None,\n+                    coerce_unsized_info: None,\n                     trait_ref: tcx.impl_trait_ref(def_id).map(|trait_ref| self.lazy(&trait_ref)),\n                 };\n \n@@ -715,13 +715,21 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     None\n                 };\n \n+                // if this is an impl of `CoerceUnsized`, create its\n+                // \"unsized info\", else just store None\n+                let coerce_unsized_info =\n+                    trait_ref.and_then(|t| {\n+                        if Some(t.def_id) == tcx.lang_items.coerce_unsized_trait() {\n+                            Some(ty::queries::coerce_unsized_info::get(tcx, item.span, def_id))\n+                        } else {\n+                            None\n+                        }\n+                    });\n+\n                 let data = ImplData {\n                     polarity: polarity,\n                     parent_impl: parent,\n-                    coerce_unsized_kind: tcx.maps.custom_coerce_unsized_kind\n-                        .borrow()\n-                        .get(&def_id)\n-                        .cloned(),\n+                    coerce_unsized_info: coerce_unsized_info,\n                     trait_ref: trait_ref.map(|trait_ref| self.lazy(&trait_ref)),\n                 };\n "}, {"sha": "abb482a50ebc2621487e53fb43c3af4c5e8f7b73", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -285,7 +285,9 @@ pub struct TraitData<'tcx> {\n pub struct ImplData<'tcx> {\n     pub polarity: hir::ImplPolarity,\n     pub parent_impl: Option<DefId>,\n-    pub coerce_unsized_kind: Option<ty::adjustment::CustomCoerceUnsized>,\n+\n+    /// This is `Some` only for impls of `CoerceUnsized`.\n+    pub coerce_unsized_info: Option<ty::adjustment::CoerceUnsizedInfo>,\n     pub trait_ref: Option<Lazy<ty::TraitRef<'tcx>>>,\n }\n "}, {"sha": "382ca8ef01001ecfd31d922b869d143d5e3a04a0", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -287,7 +287,7 @@ pub fn custom_coerce_unsize_info<'scx, 'tcx>(scx: &SharedCrateContext<'scx, 'tcx\n \n     match fulfill_obligation(scx, DUMMY_SP, trait_ref) {\n         traits::VtableImpl(traits::VtableImplData { impl_def_id, .. }) => {\n-            scx.tcx().custom_coerce_unsized_kind(impl_def_id)\n+            scx.tcx().coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n         }\n         vtable => {\n             bug!(\"invalid CoerceUnsized vtable: {:?}\", vtable);"}, {"sha": "47b41a75cf5316a9f041d1200ce362f260a45aea", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -18,6 +18,7 @@ use rustc::traits::{self, ObligationCause, Reveal};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::ParameterEnvironment;\n use rustc::ty::TypeFoldable;\n+use rustc::ty::adjustment::CoerceUnsizedInfo;\n use rustc::ty::subst::Subst;\n use rustc::ty::util::CopyImplementationError;\n use rustc::infer;\n@@ -159,28 +160,41 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                    coerce_unsized_trait: DefId,\n+                                                    _: DefId,\n                                                     impl_did: DefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\",\n            impl_did);\n \n+    // Just compute this for the side-effects, in particular reporting\n+    // errors; other parts of the code may demand it for the info of\n+    // course.\n+    if impl_did.is_local() {\n+        let span = tcx.def_span(impl_did);\n+        ty::queries::coerce_unsized_info::get(tcx, span, impl_did);\n+    }\n+}\n+\n+pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                     impl_did: DefId)\n+                                     -> CoerceUnsizedInfo {\n+    debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n+    let coerce_unsized_trait = tcx.lang_items.coerce_unsized_trait().unwrap();\n+\n     let unsize_trait = match tcx.lang_items.require(UnsizeTraitLangItem) {\n         Ok(id) => id,\n         Err(err) => {\n             tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));\n         }\n     };\n \n-    let impl_node_id = if let Some(n) = tcx.hir.as_local_node_id(impl_did) {\n-        n\n-    } else {\n-        debug!(\"visit_implementation_of_coerce_unsized(): impl not \\\n-                in this crate\");\n-        return;\n-    };\n+    // this provider should only get invoked for local def-ids\n+    let impl_node_id = tcx.hir.as_local_node_id(impl_did).unwrap_or_else(|| {\n+        bug!(\"coerce_unsized_info: invoked for non-local def-id {:?}\", impl_did)\n+    });\n \n     let source = tcx.item_type(impl_did);\n     let trait_ref = tcx.impl_trait_ref(impl_did).unwrap();\n+    assert_eq!(trait_ref.def_id, coerce_unsized_trait);\n     let target = trait_ref.substs.type_at(1);\n     debug!(\"visit_implementation_of_coerce_unsized: {:?} -> {:?} (bound)\",\n            source,\n@@ -192,6 +206,8 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let target = target.subst(tcx, &param_env.free_substs);\n     assert!(!source.has_escaping_regions());\n \n+    let err_info = CoerceUnsizedInfo { custom_kind: None };\n+\n     debug!(\"visit_implementation_of_coerce_unsized: {:?} -> {:?} (free)\",\n            source,\n            target);\n@@ -234,7 +250,7 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                definition; expected {}, found {}\",\n                               source_path,\n                               target_path);\n-                    return;\n+                    return err_info;\n                 }\n \n                 let fields = &def_a.struct_variant().fields;\n@@ -268,7 +284,7 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               \"the trait `CoerceUnsized` may only be implemented \\\n                                for a coercion between structures with one field \\\n                                being coerced, none found\");\n-                    return;\n+                    return err_info;\n                 } else if diff_fields.len() > 1 {\n                     let item = tcx.hir.expect_item(impl_node_id);\n                     let span = if let ItemImpl(.., Some(ref t), _, _) = item.node {\n@@ -295,7 +311,7 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                           .join(\", \")));\n                     err.span_label(span, &format!(\"requires multiple coercions\"));\n                     err.emit();\n-                    return;\n+                    return err_info;\n                 }\n \n                 let (i, a, b) = diff_fields[0];\n@@ -309,7 +325,7 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           E0376,\n                           \"the trait `CoerceUnsized` may only be implemented \\\n                            for a coercion between structures\");\n-                return;\n+                return err_info;\n             }\n         };\n \n@@ -331,8 +347,8 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             .caller_bounds);\n         infcx.resolve_regions_and_report_errors(&free_regions, impl_node_id);\n \n-        if let Some(kind) = kind {\n-            tcx.maps.custom_coerce_unsized_kind.borrow_mut().insert(impl_did, kind);\n+        CoerceUnsizedInfo {\n+            custom_kind: kind\n         }\n-    });\n+    })\n }"}, {"sha": "6abd061e81f2a9dd0d072398457f008795aad20e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc2635660bbf2947c17901dbd7dec75a63cb/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=1a87fc2635660bbf2947c17901dbd7dec75a63cb", "patch": "@@ -102,9 +102,12 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_d\n }\n \n pub fn provide(providers: &mut Providers) {\n+    use self::builtin::coerce_unsized_info;\n+\n     *providers = Providers {\n         coherent_trait,\n         coherent_inherent_impls,\n+        coerce_unsized_info,\n         ..*providers\n     };\n }"}]}